
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800aaa0  0800aaa0  0001aaa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad38  0800ad38  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad38  0800ad38  0001ad38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad40  0800ad40  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad40  0800ad40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad44  0800ad44  0001ad44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800ad48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001674  2000015c  0800aea4  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017d0  0800aea4  000217d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001633e  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ad1  00000000  00000000  0003650d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000def  00000000  00000000  0003b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a4cb  00000000  00000000  0003c00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f62  00000000  00000000  000564da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dc75  00000000  00000000  0007043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005290  00000000  00000000  000fe0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00103344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aa84 	.word	0x0800aa84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	0800aa84 	.word	0x0800aa84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <flightController_App>:
extern DMA_HandleTypeDef hdma_usart2_rx;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0b6      	sub	sp, #216	; 0xd8
 8000edc:	af00      	add	r7, sp, #0
    //        CDC_Transmit_FS(str0, strlen((const char *)str0));
    //    }

    /* IMU Demo */
    MPU6050_HandleTypeDef_t * hmpu6050;
    HAL_Delay(1000);
 8000ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee2:	f000 ffff 	bl	8001ee4 <HAL_Delay>
    hmpu6050 = MPU6050_Init(&hi2c1);
 8000ee6:	482c      	ldr	r0, [pc, #176]	; (8000f98 <flightController_App+0xc0>)
 8000ee8:	f000 fe02 	bl	8001af0 <MPU6050_Init>
 8000eec:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    accelerometerValues_t * accelerometerValues;
    uint16_t tempVal;
    magnetometerValues_t * magnetometerValues;

    while (1) {
        HAL_Delay(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f000 fff6 	bl	8001ee4 <HAL_Delay>
//        tempVal = MPU6050_ReadTemperatureSensor(hmpu6050);
//        sprintf((char *)str3, (const char *)"Value Temperature: %d\r\n\n", tempVal);
//        LOG(str3, LOG_DEBUGGING);
//        HAL_Delay(10);

        MPU6050_ReadMagnetometer(hmpu6050, magnetometerValues);
 8000ef8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8000efc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000f00:	f000 fe40 	bl	8001b84 <MPU6050_ReadMagnetometer>
        sprintf((char *)str4, (const char *)"Value Mag X: %d\r\n", magnetometerValues->magnetometerX);
 8000f04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4922      	ldr	r1, [pc, #136]	; (8000f9c <flightController_App+0xc4>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	f008 ff38 	bl	8009d88 <siprintf>
        LOG(str4, LOG_DEBUGGING);
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 ff0d 	bl	8001d3c <LOG>
        HAL_Delay(10);
 8000f22:	200a      	movs	r0, #10
 8000f24:	f000 ffde 	bl	8001ee4 <HAL_Delay>
        sprintf((char *)str4, (const char *)"Value Mag Y: %d\r\n", magnetometerValues->magnetometerY);
 8000f28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f30:	461a      	mov	r2, r3
 8000f32:	463b      	mov	r3, r7
 8000f34:	491a      	ldr	r1, [pc, #104]	; (8000fa0 <flightController_App+0xc8>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f008 ff26 	bl	8009d88 <siprintf>
        LOG(str4, LOG_DEBUGGING);
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fefb 	bl	8001d3c <LOG>
        HAL_Delay(10);
 8000f46:	200a      	movs	r0, #10
 8000f48:	f000 ffcc 	bl	8001ee4 <HAL_Delay>
        sprintf((char *)str4, (const char *)"Value Mag Z: %d\r\n\n", magnetometerValues->magnetometerZ);
 8000f4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f54:	461a      	mov	r2, r3
 8000f56:	463b      	mov	r3, r7
 8000f58:	4912      	ldr	r1, [pc, #72]	; (8000fa4 <flightController_App+0xcc>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f008 ff14 	bl	8009d88 <siprintf>
        LOG(str4, LOG_DEBUGGING);
 8000f60:	463b      	mov	r3, r7
 8000f62:	2101      	movs	r1, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fee9 	bl	8001d3c <LOG>
        HAL_Delay(10);
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f000 ffba 	bl	8001ee4 <HAL_Delay>

        int16_t heading = MPU6050_ReadMagnetometerHeading(hmpu6050);
 8000f70:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000f74:	f000 fe70 	bl	8001c58 <MPU6050_ReadMagnetometerHeading>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        sprintf((char *)str4, (const char *)"Heading Value: %d\r\n\n", heading);
 8000f7e:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	; 0xce
 8000f82:	463b      	mov	r3, r7
 8000f84:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <flightController_App+0xd0>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f008 fefe 	bl	8009d88 <siprintf>
        LOG(str4, LOG_DEBUGGING);
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fed3 	bl	8001d3c <LOG>
    while (1) {
 8000f96:	e7ab      	b.n	8000ef0 <flightController_App+0x18>
 8000f98:	20000178 	.word	0x20000178
 8000f9c:	0800aaa0 	.word	0x0800aaa0
 8000fa0:	0800aab4 	.word	0x0800aab4
 8000fa4:	0800aac8 	.word	0x0800aac8
 8000fa8:	0800aadc 	.word	0x0800aadc

08000fac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000fb0:	f000 ff26 	bl	8001e00 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000fb4:	f000 f810 	bl	8000fd8 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000fb8:	f000 f8ea 	bl	8001190 <MX_GPIO_Init>
    MX_DMA_Init();
 8000fbc:	f000 f8ce 	bl	800115c <MX_DMA_Init>
    MX_USB_DEVICE_Init();
 8000fc0:	f008 f916 	bl	80091f0 <MX_USB_DEVICE_Init>
    MX_I2C1_Init();
 8000fc4:	f000 f872 	bl	80010ac <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000fc8:	f000 f89e 	bl	8001108 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    flightController_App();
 8000fcc:	f7ff ff84 	bl	8000ed8 <flightController_App>
 8000fd0:	2300      	movs	r3, #0
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	; 0x50
 8000fdc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	2230      	movs	r2, #48	; 0x30
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f008 feee 	bl	8009dc8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <SystemClock_Config+0xcc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <SystemClock_Config+0xcc>)
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <SystemClock_Config+0xcc>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <SystemClock_Config+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001024:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <SystemClock_Config+0xd0>)
 8001026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <SystemClock_Config+0xd0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001046:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 800104c:	230f      	movs	r3, #15
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8001050:	2390      	movs	r3, #144	; 0x90
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001054:	2304      	movs	r3, #4
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 8001058:	2305      	movs	r3, #5
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f003 fd95 	bl	8004b90 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x98>
        Error_Handler();
 800106c:	f000 f8c6 	bl	80011fc <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001070:	230f      	movs	r3, #15
 8001072:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2101      	movs	r1, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f003 fff7 	bl	8005080 <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xc4>
        Error_Handler();
 8001098:	f000 f8b0 	bl	80011fc <Error_Handler>
    }
}
 800109c:	bf00      	nop
 800109e:	3750      	adds	r7, #80	; 0x50
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_I2C1_Init+0x50>)
 80010b2:	4a13      	ldr	r2, [pc, #76]	; (8001100 <MX_I2C1_Init+0x54>)
 80010b4:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_I2C1_Init+0x50>)
 80010b8:	4a12      	ldr	r2, [pc, #72]	; (8001104 <MX_I2C1_Init+0x58>)
 80010ba:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_I2C1_Init+0x50>)
 80010ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ce:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_I2C1_Init+0x50>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_I2C1_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_I2C1_Init+0x50>)
 80010ea:	f001 fb15 	bl	8002718 <HAL_I2C_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_I2C1_Init+0x4c>
        Error_Handler();
 80010f4:	f000 f882 	bl	80011fc <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000178 	.word	0x20000178
 8001100:	40005400 	.word	0x40005400
 8001104:	00061a80 	.word	0x00061a80

08001108 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_USART2_UART_Init+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 800112e:	2204      	movs	r2, #4
 8001130:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_USART2_UART_Init+0x4c>)
 8001140:	f004 f97e 	bl	8005440 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART2_UART_Init+0x46>
        Error_Handler();
 800114a:	f000 f857 	bl	80011fc <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200001cc 	.word	0x200001cc
 8001158:	40004400 	.word	0x40004400

0800115c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_DMA_Init+0x30>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <MX_DMA_Init+0x30>)
 800116c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_DMA_Init+0x30>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_GPIO_Init+0x68>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <MX_GPIO_Init+0x68>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_GPIO_Init+0x68>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_GPIO_Init+0x68>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <MX_GPIO_Init+0x68>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MX_GPIO_Init+0x68>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_GPIO_Init+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <MX_GPIO_Init+0x68>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_GPIO_Init+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_MspInit+0x4c>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_MspInit+0x4c>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_I2C_MspInit+0x84>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d12b      	bne.n	80012d6 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800129a:	23c0      	movs	r3, #192	; 0xc0
 800129c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129e:	2312      	movs	r3, #18
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012aa:	2304      	movs	r3, #4
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <HAL_I2C_MspInit+0x8c>)
 80012b6:	f001 f8ab 	bl	8002410 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 80012c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40005400 	.word	0x40005400
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020400 	.word	0x40020400

080012ec <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a30      	ldr	r2, [pc, #192]	; (80013cc <HAL_UART_MspInit+0xe0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d15a      	bne.n	80013c4 <HAL_UART_MspInit+0xd8>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_UART_MspInit+0xe4>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <HAL_UART_MspInit+0xe4>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_UART_MspInit+0xe4>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_UART_MspInit+0xe4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_UART_MspInit+0xe4>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <HAL_UART_MspInit+0xe4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001346:	230c      	movs	r3, #12
 8001348:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001356:	2307      	movs	r3, #7
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	481c      	ldr	r0, [pc, #112]	; (80013d4 <HAL_UART_MspInit+0xe8>)
 8001362:	f001 f855 	bl	8002410 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001368:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <HAL_UART_MspInit+0xf0>)
 800136a:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800136e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001372:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001386:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139a:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_UART_MspInit+0xec>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <HAL_UART_MspInit+0xec>)
 80013aa:	f000 fed1 	bl	8002150 <HAL_DMA_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_UART_MspInit+0xcc>
            Error_Handler();
 80013b4:	f7ff ff22 	bl	80011fc <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_UART_MspInit+0xec>)
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38
 80013be:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_UART_MspInit+0xec>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40004400 	.word	0x40004400
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	20000210 	.word	0x20000210
 80013dc:	40026088 	.word	0x40026088

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 fd3a 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <OTG_FS_IRQHandler+0x10>)
 800143a:	f002 fa7c 	bl	8003936 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000f5c 	.word	0x20000f5c

08001448 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d207      	bcs.n	8001488 <_sbrk+0x40>
        errno = ENOMEM;
 8001478:	f008 fcce 	bl	8009e18 <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001486:	e009      	b.n	800149c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20010000 	.word	0x20010000
 80014a8:	00000400 	.word	0x00000400
 80014ac:	20000270 	.word	0x20000270
 80014b0:	200017d0 	.word	0x200017d0

080014b4 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <SystemInit+0x20>)
 80014ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <SystemInit+0x20>)
 80014c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001510 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014de:	490e      	ldr	r1, [pc, #56]	; (8001518 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e0:	4a0e      	ldr	r2, [pc, #56]	; (800151c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f4:	4c0b      	ldr	r4, [pc, #44]	; (8001524 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001502:	f7ff ffd7 	bl	80014b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001506:	f008 fc8d 	bl	8009e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150a:	f7ff fd4f 	bl	8000fac <main>
  bx  lr
 800150e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001510:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 800151c:	0800ad48 	.word	0x0800ad48
  ldr r2, =_sbss
 8001520:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001524:	200017d0 	.word	0x200017d0

08001528 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC_IRQHandler>

0800152a <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af02      	add	r7, sp, #8
 8001530:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hmpu6050) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <I2C_Init+0x12>
        return false;
 8001538:	2300      	movs	r3, #0
 800153a:	e010      	b.n	800155e <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6858      	ldr	r0, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7a19      	ldrb	r1, [r3, #8]
 8001544:	f107 030f 	add.w	r3, r7, #15
 8001548:	2201      	movs	r2, #1
 800154a:	9200      	str	r2, [sp, #0]
 800154c:	2275      	movs	r2, #117	; 0x75
 800154e:	f000 f80a 	bl	8001566 <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b68      	cmp	r3, #104	; 0x68
 8001556:	d101      	bne.n	800155c <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 800155c:	2300      	movs	r3, #0
    }
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8001566:	b580      	push	{r7, lr}
 8001568:	b088      	sub	sp, #32
 800156a:	af04      	add	r7, sp, #16
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	72fb      	strb	r3, [r7, #11]
 8001574:	4613      	mov	r3, r2
 8001576:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <I2C_Read+0x1c>
        return false;
 800157e:	2300      	movs	r3, #0
 8001580:	e019      	b.n	80015b6 <I2C_Read+0x50>
    }
    if (NULL == data) {
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <I2C_Read+0x26>
        return false;
 8001588:	2300      	movs	r3, #0
 800158a:	e014      	b.n	80015b6 <I2C_Read+0x50>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 800158c:	7afb      	ldrb	r3, [r7, #11]
 800158e:	b299      	uxth	r1, r3
 8001590:	7abb      	ldrb	r3, [r7, #10]
 8001592:	b29a      	uxth	r2, r3
 8001594:	7e3b      	ldrb	r3, [r7, #24]
 8001596:	b29b      	uxth	r3, r3
 8001598:	2064      	movs	r0, #100	; 0x64
 800159a:	9002      	str	r0, [sp, #8]
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2301      	movs	r3, #1
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f001 faf5 	bl	8002b94 <HAL_I2C_Mem_Read>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <I2C_Read+0x4e>

        /* Data couldn't be read */
        return false;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e000      	b.n	80015b6 <I2C_Read+0x50>
    } else {

        /* Data read successfully */
        return true;
 80015b4:	2301      	movs	r3, #1
    }
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 80015be:	b580      	push	{r7, lr}
 80015c0:	b088      	sub	sp, #32
 80015c2:	af04      	add	r7, sp, #16
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	72fb      	strb	r3, [r7, #11]
 80015cc:	4613      	mov	r3, r2
 80015ce:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <I2C_Write+0x1c>
        return false;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e018      	b.n	800160c <I2C_Write+0x4e>
    }
    if (NULL == data) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <I2C_Write+0x26>
        return false;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e013      	b.n	800160c <I2C_Write+0x4e>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	b299      	uxth	r1, r3
 80015e8:	7abb      	ldrb	r3, [r7, #10]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	2364      	movs	r3, #100	; 0x64
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	2301      	movs	r3, #1
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f001 f9d0 	bl	80029a0 <HAL_I2C_Mem_Write>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <I2C_Write+0x4c>

        /* Data couldn't be written */
        return false;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 800160a:	2301      	movs	r3, #1
    }
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <MPU6050_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvortMalloc(sizeof(1));
#else
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 800161c:	2014      	movs	r0, #20
 800161e:	f008 faf7 	bl	8009c10 <malloc>
 8001622:	4603      	mov	r3, r0
 8001624:	60fb      	str	r3, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
 8001626:	2004      	movs	r0, #4
 8001628:	f008 faf2 	bl	8009c10 <malloc>
 800162c:	4603      	mov	r3, r0
 800162e:	60bb      	str	r3, [r7, #8]
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <MPU6050_InstanceInit+0x28>
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10c      	bne.n	8001656 <MPU6050_InstanceInit+0x42>
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
        vPortFree(hmpu6050);
#else
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
        free(hmpu6050->buffer);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	4618      	mov	r0, r3
 8001648:	f008 faea 	bl	8009c20 <free>
        free(hmpu6050);
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f008 fae7 	bl	8009c20 <free>
#endif
        return NULL;
 8001652:	2300      	movs	r3, #0
 8001654:	e01b      	b.n	800168e <MPU6050_InstanceInit+0x7a>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MPU6050_InstanceInit+0x84>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d106      	bne.n	800166c <MPU6050_InstanceInit+0x58>
            hmpu6050->instance = 1;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	22d0      	movs	r2, #208	; 0xd0
 8001668:	721a      	strb	r2, [r3, #8]
 800166a:	e009      	b.n	8001680 <MPU6050_InstanceInit+0x6c>
        } else if (instancesNumber == 1) {
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <MPU6050_InstanceInit+0x84>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <MPU6050_InstanceInit+0x6c>
            hmpu6050->instance = 2;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2202      	movs	r2, #2
 8001678:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR2;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	22d1      	movs	r2, #209	; 0xd1
 800167e:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->hi2c = hi2c;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]
        hmpu6050->buffer = buffer;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 800168c:	68fb      	ldr	r3, [r7, #12]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000274 	.word	0x20000274

0800169c <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(MPU6050_HandleTypeDef_t * hmpu6050) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	6078      	str	r0, [r7, #4]

	/* Wake up device */
	uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6858      	ldr	r0, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7a19      	ldrb	r1, [r3, #8]
 80016b0:	f107 030f 	add.w	r3, r7, #15
 80016b4:	2200      	movs	r2, #0
 80016b6:	9200      	str	r2, [sp, #0]
 80016b8:	226b      	movs	r2, #107	; 0x6b
 80016ba:	f000 f9e5 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(MPU6050_HandleTypeDef_t * hmpu6050) {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af02      	add	r7, sp, #8
 80016cc:	6078      	str	r0, [r7, #4]

    /* Set clock source */
	uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6858      	ldr	r0, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7a19      	ldrb	r1, [r3, #8]
 80016da:	f107 030f 	add.w	r3, r7, #15
 80016de:	2201      	movs	r2, #1
 80016e0:	9200      	str	r2, [sp, #0]
 80016e2:	226b      	movs	r2, #107	; 0x6b
 80016e4:	f000 f9d0 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(MPU6050_HandleTypeDef_t * hmpu6050) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	6078      	str	r0, [r7, #4]

	/* Set sample rate divider */
	uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 80016f8:	2318      	movs	r3, #24
 80016fa:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6858      	ldr	r0, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7a19      	ldrb	r1, [r3, #8]
 8001704:	f107 030f 	add.w	r3, r7, #15
 8001708:	2201      	movs	r2, #1
 800170a:	9200      	str	r2, [sp, #0]
 800170c:	2219      	movs	r2, #25
 800170e:	f000 f9bb 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(MPU6050_HandleTypeDef_t * hmpu6050) {
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af02      	add	r7, sp, #8
 8001720:	6078      	str	r0, [r7, #4]

	/* Set gyroscope range */
	uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_3; // Full range
 8001722:	2318      	movs	r3, #24
 8001724:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6858      	ldr	r0, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7a19      	ldrb	r1, [r3, #8]
 800172e:	f107 030f 	add.w	r3, r7, #15
 8001732:	2201      	movs	r2, #1
 8001734:	9200      	str	r2, [sp, #0]
 8001736:	221b      	movs	r2, #27
 8001738:	f000 f9a6 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af02      	add	r7, sp, #8
 800174a:	6078      	str	r0, [r7, #4]

	/* Set accelerometer range */
	uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_3; // Full range
 800174c:	2318      	movs	r3, #24
 800174e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6858      	ldr	r0, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7a19      	ldrb	r1, [r3, #8]
 8001758:	f107 030f 	add.w	r3, r7, #15
 800175c:	2201      	movs	r2, #1
 800175e:	9200      	str	r2, [sp, #0]
 8001760:	221c      	movs	r2, #28
 8001762:	f000 f991 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(MPU6050_HandleTypeDef_t * hmpu6050) {
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af02      	add	r7, sp, #8
 8001774:	6078      	str	r0, [r7, #4]

	/* Enable I2C Master mode */
	uint8_t regData;

    regData = 0b00100010; // TODO
 8001776:	2322      	movs	r3, #34	; 0x22
 8001778:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6858      	ldr	r0, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7a19      	ldrb	r1, [r3, #8]
 8001782:	f107 030f 	add.w	r3, r7, #15
 8001786:	2201      	movs	r2, #1
 8001788:	9200      	str	r2, [sp, #0]
 800178a:	226a      	movs	r2, #106	; 0x6a
 800178c:	f000 f97c 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	6078      	str	r0, [r7, #4]

	/* Disable I2C Master mode */
	uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 80017a0:	2320      	movs	r3, #32
 80017a2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6858      	ldr	r0, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7a19      	ldrb	r1, [r3, #8]
 80017ac:	f107 030f 	add.w	r3, r7, #15
 80017b0:	2200      	movs	r2, #0
 80017b2:	9200      	str	r2, [sp, #0]
 80017b4:	226a      	movs	r2, #106	; 0x6a
 80017b6:	f000 f967 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(MPU6050_HandleTypeDef_t * hmpu6050) {
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af02      	add	r7, sp, #8
 80017c8:	6078      	str	r0, [r7, #4]

	/* Enable Bypass mode */
	uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 80017ca:	2302      	movs	r3, #2
 80017cc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6858      	ldr	r0, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7a19      	ldrb	r1, [r3, #8]
 80017d6:	f107 030f 	add.w	r3, r7, #15
 80017da:	2201      	movs	r2, #1
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	2237      	movs	r2, #55	; 0x37
 80017e0:	f000 f952 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(MPU6050_HandleTypeDef_t * hmpu6050) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	6078      	str	r0, [r7, #4]

	/* Disable Bypass mode */
	uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 80017f4:	2302      	movs	r3, #2
 80017f6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6858      	ldr	r0, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7a19      	ldrb	r1, [r3, #8]
 8001800:	f107 030f 	add.w	r3, r7, #15
 8001804:	2201      	movs	r2, #1
 8001806:	9200      	str	r2, [sp, #0]
 8001808:	2237      	movs	r2, #55	; 0x37
 800180a:	f000 f93d 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af02      	add	r7, sp, #8
 800181c:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
	uint8_t regData;

    regData = 0b00001101; // 400 kHz TODO
 800181e:	230d      	movs	r3, #13
 8001820:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6858      	ldr	r0, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7a19      	ldrb	r1, [r3, #8]
 800182a:	f107 030f 	add.w	r3, r7, #15
 800182e:	2201      	movs	r2, #1
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	2224      	movs	r2, #36	; 0x24
 8001834:	f000 f928 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <MPU6050_TestConnection_QMC5883L>:

static bool_t MPU6050_TestConnection_QMC5883L(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af02      	add	r7, sp, #8
 8001846:	6078      	str	r0, [r7, #4]

	/* Test QMC5883L magnetometer connection */
	uint8_t regData;

	MPU6050_ReadRegister(hmpu6050->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6858      	ldr	r0, [r3, #4]
 800184c:	f107 030f 	add.w	r3, r7, #15
 8001850:	2201      	movs	r2, #1
 8001852:	9200      	str	r2, [sp, #0]
 8001854:	220d      	movs	r2, #13
 8001856:	211a      	movs	r1, #26
 8001858:	f000 f8ee 	bl	8001a38 <MPU6050_ReadRegister>

	if(QMC5883L_BIT_CHIP_ID != regData) {
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d001      	beq.n	8001866 <MPU6050_TestConnection_QMC5883L+0x26>
		return false;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <MPU6050_TestConnection_QMC5883L+0x28>
	} else {
		return true;
 8001866:	2301      	movs	r3, #1
	}
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <MPU6050_TestConnection_BMP180>:

static bool_t MPU6050_TestConnection_BMP180(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	6078      	str	r0, [r7, #4]

	/* Test BMP180 barometer connection */
	uint8_t regData;

    MPU6050_ReadRegister(hmpu6050->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xD0, &regData, sizeof(regData));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6858      	ldr	r0, [r3, #4]
 800187c:	f107 030f 	add.w	r3, r7, #15
 8001880:	2201      	movs	r2, #1
 8001882:	9200      	str	r2, [sp, #0]
 8001884:	22d0      	movs	r2, #208	; 0xd0
 8001886:	21ee      	movs	r1, #238	; 0xee
 8001888:	f000 f8d6 	bl	8001a38 <MPU6050_ReadRegister>

	if(0x55 != regData) { // TODO
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b55      	cmp	r3, #85	; 0x55
 8001890:	d001      	beq.n	8001896 <MPU6050_TestConnection_BMP180+0x26>
		return false;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <MPU6050_TestConnection_BMP180+0x28>
	} else {
		return true;
 8001896:	2301      	movs	r3, #1
	}
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <QMC5883L_Configure>:

static void QMC5883L_Configure(MPU6050_HandleTypeDef_t * hmpu6050) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6078      	str	r0, [r7, #4]

	/* Configure QMC5883L magnetometer */
	uint8_t regData;

	/* Reset QMC5883L magnetometer */
	regData = 0b00000001;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6858      	ldr	r0, [r3, #4]
 80018b0:	f107 030f 	add.w	r3, r7, #15
 80018b4:	2201      	movs	r2, #1
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	220b      	movs	r2, #11
 80018ba:	211a      	movs	r1, #26
 80018bc:	f000 f8e4 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>

	/* Configure QMC5883L magnetometer: Control Register 1 */
	regData = 0b00011101;
 80018c0:	231d      	movs	r3, #29
 80018c2:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6858      	ldr	r0, [r3, #4]
 80018c8:	f107 030f 	add.w	r3, r7, #15
 80018cc:	2201      	movs	r2, #1
 80018ce:	9200      	str	r2, [sp, #0]
 80018d0:	2209      	movs	r2, #9
 80018d2:	211a      	movs	r1, #26
 80018d4:	f000 f8d8 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>

	/* Configure QMC5883L magnetometer: Control Register 2 */
	regData = 0b00000000;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6858      	ldr	r0, [r3, #4]
 80018e0:	f107 030f 	add.w	r3, r7, #15
 80018e4:	2201      	movs	r2, #1
 80018e6:	9200      	str	r2, [sp, #0]
 80018e8:	220a      	movs	r2, #10
 80018ea:	211a      	movs	r1, #26
 80018ec:	f000 f8cc 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <BMP180_Configure>:

static void BMP180_Configure(MPU6050_HandleTypeDef_t * hmpu6050) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	6078      	str	r0, [r7, #4]

	/* Configure BMP180 barometer */
	uint8_t regData;

	regData = 0b01000000;
 8001900:	2340      	movs	r3, #64	; 0x40
 8001902:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData, BMP180_SET_BIT);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6858      	ldr	r0, [r3, #4]
 8001908:	f107 030f 	add.w	r3, r7, #15
 800190c:	2201      	movs	r2, #1
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	22f4      	movs	r2, #244	; 0xf4
 8001912:	21ee      	movs	r1, #238	; 0xee
 8001914:	f000 f8b8 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af02      	add	r7, sp, #8
 8001926:	6078      	str	r0, [r7, #4]

	/* Configure slave QMC5883L magnetometer */
	uint8_t regData;

	/* Set slave QMC5883L magnetometer device address */
	regData = QMC5883L_AUX_VAL_I2C_ADDR | 0x80;
 8001928:	238d      	movs	r3, #141	; 0x8d
 800192a:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6858      	ldr	r0, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7a19      	ldrb	r1, [r3, #8]
 8001934:	f107 030f 	add.w	r3, r7, #15
 8001938:	2201      	movs	r2, #1
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	2225      	movs	r2, #37	; 0x25
 800193e:	f000 f8a3 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>

	/* Set slave QMC5883L magnetometer registers addresses to read */
	regData = QMC5883L_REG_X_LSB;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6858      	ldr	r0, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7a19      	ldrb	r1, [r3, #8]
 800194e:	f107 030f 	add.w	r3, r7, #15
 8001952:	2201      	movs	r2, #1
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	2226      	movs	r2, #38	; 0x26
 8001958:	f000 f896 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>

	/* Set slave QMC5883L magnetometer number of registers to read*/
	regData = 0x80 | 0x06;
 800195c:	2386      	movs	r3, #134	; 0x86
 800195e:	73fb      	strb	r3, [r7, #15]
	MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6858      	ldr	r0, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7a19      	ldrb	r1, [r3, #8]
 8001968:	f107 030f 	add.w	r3, r7, #15
 800196c:	2201      	movs	r2, #1
 800196e:	9200      	str	r2, [sp, #0]
 8001970:	2227      	movs	r2, #39	; 0x27
 8001972:	f000 f889 	bl	8001a88 <MPU6050_WriteRegisterBitmasked>
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <MPU6050_Config>:

static void MPU6050_Config(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hmpu6050);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fe87 	bl	800169c <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hmpu6050);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fe99 	bl	80016c6 <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hmpu6050);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff feab 	bl	80016f0 <MPU6050_SetSampleDivider>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hmpu6050);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff febd 	bl	800171a <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hmpu6050);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fecf 	bl	8001744 <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hmpu6050);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fef6 	bl	8001798 <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hmpu6050);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff08 	bl	80017c2 <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if(!MPU6050_TestConnection_QMC5883L(hmpu6050)) {
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ff44 	bl	8001840 <MPU6050_TestConnection_QMC5883L>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f083 0301 	eor.w	r3, r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <MPU6050_Config+0x4e>

    	LOG((uint8_t *) "QMC5883L Magnetometer not detected.\r\n\n", LOG_ERROR);
 80019c4:	2103      	movs	r1, #3
 80019c6:	4818      	ldr	r0, [pc, #96]	; (8001a28 <MPU6050_Config+0xa8>)
 80019c8:	f000 f9b8 	bl	8001d3c <LOG>
 80019cc:	e003      	b.n	80019d6 <MPU6050_Config+0x56>
    	// return -1; TODO
    } else {

    	LOG((uint8_t *) "QMC5883L Magnetometer detected.\r\n\n", LOG_INFORMATION);
 80019ce:	2100      	movs	r1, #0
 80019d0:	4816      	ldr	r0, [pc, #88]	; (8001a2c <MPU6050_Config+0xac>)
 80019d2:	f000 f9b3 	bl	8001d3c <LOG>
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hmpu6050);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff62 	bl	80018a0 <QMC5883L_Configure>

	/* Test BMP180 barometer connection */
    if(!MPU6050_TestConnection_BMP180(hmpu6050)) {
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff47 	bl	8001870 <MPU6050_TestConnection_BMP180>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f083 0301 	eor.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <MPU6050_Config+0x78>

    	LOG((uint8_t *) "BMP180 barometer not detected.\r\n\n", LOG_ERROR);
 80019ee:	2103      	movs	r1, #3
 80019f0:	480f      	ldr	r0, [pc, #60]	; (8001a30 <MPU6050_Config+0xb0>)
 80019f2:	f000 f9a3 	bl	8001d3c <LOG>
 80019f6:	e003      	b.n	8001a00 <MPU6050_Config+0x80>
    	// return -1; TODO
    } else {

    	LOG((uint8_t *) "BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
 80019f8:	2100      	movs	r1, #0
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <MPU6050_Config+0xb4>)
 80019fc:	f000 f99e 	bl	8001d3c <LOG>
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hmpu6050);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff79 	bl	80018f8 <BMP180_Configure>

    /* Disable Bypass */
	MPU6050_DisableBypassMode(hmpu6050);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fef0 	bl	80017ec <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hmpu6050);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff feae 	bl	800176e <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hmpu6050);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff feff 	bl	8001816 <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer */
    MPU6050_Configure_QMC5883l(hmpu6050);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff81 	bl	8001920 <MPU6050_Configure_QMC5883l>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	0800aaf4 	.word	0x0800aaf4
 8001a2c:	0800ab1c 	.word	0x0800ab1c
 8001a30:	0800ab40 	.word	0x0800ab40
 8001a34:	0800ab64 	.word	0x0800ab64

08001a38 <MPU6050_ReadRegister>:

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	72fb      	strb	r3, [r7, #11]
 8001a46:	4613      	mov	r3, r2
 8001a48:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8001a4a:	7aba      	ldrb	r2, [r7, #10]
 8001a4c:	7af9      	ldrb	r1, [r7, #11]
 8001a4e:	7e3b      	ldrb	r3, [r7, #24]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f7ff fd86 	bl	8001566 <I2C_Read>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	72fb      	strb	r3, [r7, #11]
 8001a70:	4613      	mov	r3, r2
 8001a72:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8001a74:	7aba      	ldrb	r2, [r7, #10]
 8001a76:	7af9      	ldrb	r1, [r7, #11]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f7ff fd9f 	bl	80015be <I2C_Write>
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	72fb      	strb	r3, [r7, #11]
 8001a96:	4613      	mov	r3, r2
 8001a98:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 8001a9a:	f107 0317 	add.w	r3, r7, #23
 8001a9e:	7aba      	ldrb	r2, [r7, #10]
 8001aa0:	7af9      	ldrb	r1, [r7, #11]
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	9000      	str	r0, [sp, #0]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff ffc6 	bl	8001a38 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8001aac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	75bb      	strb	r3, [r7, #22]
 8001ac0:	e00a      	b.n	8001ad8 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	b25a      	sxtb	r2, r3
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8001ad8:	f107 0316 	add.w	r3, r7, #22
 8001adc:	7aba      	ldrb	r2, [r7, #10]
 8001ade:	7af9      	ldrb	r1, [r7, #11]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f7ff ffbe 	bl	8001a62 <MPU6050_WriteRegister>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <MPU6050_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_Init(I2C_HandleTypeDef * hi2c) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <MPU6050_Init+0x12>
        return NULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e034      	b.n	8001b6c <MPU6050_Init+0x7c>
    }

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MPU6050_Init+0x84>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d101      	bne.n	8001b0e <MPU6050_Init+0x1e>
        return NULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e02e      	b.n	8001b6c <MPU6050_Init+0x7c>
    }

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_InstanceInit(hi2c);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fd80 	bl	8001614 <MPU6050_InstanceInit>
 8001b14:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d022      	beq.n	8001b62 <MPU6050_Init+0x72>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hmpu6050)) {
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7ff fd04 	bl	800152a <I2C_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00e      	beq.n	8001b46 <MPU6050_Init+0x56>

            /* Initialization was successful */
        	LOG((uint8_t *) "MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4813      	ldr	r0, [pc, #76]	; (8001b78 <MPU6050_Init+0x88>)
 8001b2c:	f000 f906 	bl	8001d3c <LOG>

            /* Configure device */
            MPU6050_Config(hmpu6050);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff ff25 	bl	8001980 <MPU6050_Config>

            instancesNumber++;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MPU6050_Init+0x84>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <MPU6050_Init+0x84>)
 8001b40:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	e012      	b.n	8001b6c <MPU6050_Init+0x7c>
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
            vPortFree(hmpu6050);
#else
            /* Free up dynamic allocated memory */
            free(hmpu6050->buffer);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f008 f868 	bl	8009c20 <free>
            free(hmpu6050);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f008 f865 	bl	8009c20 <free>
#endif

            LOG((uint8_t *) "MPU6050 IMU not detected.\r\n\n", LOG_ERROR);
 8001b56:	2103      	movs	r1, #3
 8001b58:	4808      	ldr	r0, [pc, #32]	; (8001b7c <MPU6050_Init+0x8c>)
 8001b5a:	f000 f8ef 	bl	8001d3c <LOG>
            return NULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e004      	b.n	8001b6c <MPU6050_Init+0x7c>
        }
    } else {

        /* Instance couldn't be created */
    	LOG((uint8_t *) "MPU6050 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
 8001b62:	2103      	movs	r1, #3
 8001b64:	4806      	ldr	r0, [pc, #24]	; (8001b80 <MPU6050_Init+0x90>)
 8001b66:	f000 f8e9 	bl	8001d3c <LOG>
        return NULL;
 8001b6a:	2300      	movs	r3, #0
    }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000274 	.word	0x20000274
 8001b78:	0800ab84 	.word	0x0800ab84
 8001b7c:	0800aba0 	.word	0x0800aba0
 8001b80:	0800abc0 	.word	0x0800abc0

08001b84 <MPU6050_ReadMagnetometer>:
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
}

void MPU6050_ReadMagnetometer(MPU6050_HandleTypeDef_t * hmpu6050, magnetometerValues_t * magnetometerValues) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hmpu6050 && NULL != magnetometerValues) {
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d051      	beq.n	8001c3c <MPU6050_ReadMagnetometer+0xb8>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d04e      	beq.n	8001c3c <MPU6050_ReadMagnetometer+0xb8>

		/* Read magnetometer in axis X */
		MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6858      	ldr	r0, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7a19      	ldrb	r1, [r3, #8]
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	2202      	movs	r2, #2
 8001bac:	9200      	str	r2, [sp, #0]
 8001bae:	2249      	movs	r2, #73	; 0x49
 8001bb0:	f7ff ff42 	bl	8001a38 <MPU6050_ReadRegister>
		magnetometerValues->magnetometerX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8001bb4:	7b7b      	ldrb	r3, [r7, #13]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	7b3b      	ldrb	r3, [r7, #12]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	801a      	strh	r2, [r3, #0]

		/* Read magnetometer in axis Y */
		MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6858      	ldr	r0, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7a19      	ldrb	r1, [r3, #8]
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	2202      	movs	r2, #2
 8001be0:	9200      	str	r2, [sp, #0]
 8001be2:	224b      	movs	r2, #75	; 0x4b
 8001be4:	f7ff ff28 	bl	8001a38 <MPU6050_ReadRegister>
		magnetometerValues->magnetometerY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8001be8:	7b7b      	ldrb	r3, [r7, #13]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	7b3b      	ldrb	r3, [r7, #12]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	805a      	strh	r2, [r3, #2]

		/* Read magnetometer in axis Z */
		MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6858      	ldr	r0, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7a19      	ldrb	r1, [r3, #8]
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2202      	movs	r2, #2
 8001c14:	9200      	str	r2, [sp, #0]
 8001c16:	224d      	movs	r2, #77	; 0x4d
 8001c18:	f7ff ff0e 	bl	8001a38 <MPU6050_ReadRegister>
		magnetometerValues->magnetometerZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8001c1c:	7b7b      	ldrb	r3, [r7, #13]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	7b3b      	ldrb	r3, [r7, #12]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c30:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	809a      	strh	r2, [r3, #4]
 8001c3a:	e009      	b.n	8001c50 <MPU6050_ReadMagnetometer+0xcc>

	} else {
		/* Wrong parameters */
		magnetometerValues->magnetometerX = 0;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	801a      	strh	r2, [r3, #0]
		magnetometerValues->magnetometerY = 0;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	805a      	strh	r2, [r3, #2]
		magnetometerValues->magnetometerZ = 0;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	809a      	strh	r2, [r3, #4]
	}
}
 8001c4e:	bf00      	nop
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <MPU6050_ReadMagnetometerHeading>:

int16_t MPU6050_ReadMagnetometerHeading(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

	/* Allocate dynamic memory for the magnetometerValues_t structure */
#ifdef USE_FREERTOS
    magnetometerValues_t * magnetometerValues = pvPortmalloc(sizeof(magnetometerValues_t));
#else
    magnetometerValues_t * magnetometerValues = malloc(sizeof(magnetometerValues_t));
 8001c60:	2006      	movs	r0, #6
 8001c62:	f007 ffd5 	bl	8009c10 <malloc>
 8001c66:	4603      	mov	r3, r0
 8001c68:	60bb      	str	r3, [r7, #8]

    /* Declare variable for compass heading */
	float heading;

    /* Check parameters */
    if (NULL != hmpu6050) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d038      	beq.n	8001ce2 <MPU6050_ReadMagnetometerHeading+0x8a>

    	MPU6050_ReadMagnetometer(hmpu6050, magnetometerValues);
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ff86 	bl	8001b84 <MPU6050_ReadMagnetometer>

    	/* Calculate heading */
    	heading = atan2(magnetometerValues->magnetometerY, magnetometerValues->magnetometerX) * RADIANS_TO_DEGREES_CONST;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc58 	bl	8000534 <__aeabi_i2d>
 8001c84:	4604      	mov	r4, r0
 8001c86:	460d      	mov	r5, r1
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc50 	bl	8000534 <__aeabi_i2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	ec43 2b11 	vmov	d1, r2, r3
 8001c9c:	ec45 4b10 	vmov	d0, r4, r5
 8001ca0:	f008 fc79 	bl	800a596 <atan2>
 8001ca4:	ec51 0b10 	vmov	r0, r1, d0
 8001ca8:	a319      	add	r3, pc, #100	; (adr r3, 8001d10 <MPU6050_ReadMagnetometerHeading+0xb8>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fcab 	bl	8000608 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff3f 	bl	8000b3c <__aeabi_d2f>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	60fb      	str	r3, [r7, #12]

    	/* Check if heading is within 0 and 360 degrees */
    	if(heading < 0) {
 8001cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d50a      	bpl.n	8001ce6 <MPU6050_ReadMagnetometerHeading+0x8e>
    		heading += 360;
 8001cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001d08 <MPU6050_ReadMagnetometerHeading+0xb0>
 8001cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cdc:	edc7 7a03 	vstr	s15, [r7, #12]
 8001ce0:	e001      	b.n	8001ce6 <MPU6050_ReadMagnetometerHeading+0x8e>
    	}

    } else {

    	heading = -1;
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <MPU6050_ReadMagnetometerHeading+0xb4>)
 8001ce4:	60fb      	str	r3, [r7, #12]

	/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
    vPortFree(magnetometerValues);
#else
    free(magnetometerValues);
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	f007 ff9a 	bl	8009c20 <free>
#endif

	return heading;
 8001cec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf4:	ee17 3a90 	vmov	r3, s15
 8001cf8:	b21b      	sxth	r3, r3
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bdb0      	pop	{r4, r5, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	f3af 8000 	nop.w
 8001d08:	43b40000 	.word	0x43b40000
 8001d0c:	bf800000 	.word	0xbf800000
 8001d10:	1a63c1f8 	.word	0x1a63c1f8
 8001d14:	404ca5dc 	.word	0x404ca5dc

08001d18 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

    CDC_Transmit_FS(string, strlen((const char *)string));
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7fe fa5d 	bl	80001e0 <strlen>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f007 fb1d 	bl	800936c <CDC_Transmit_FS>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
int8_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b090      	sub	sp, #64	; 0x40
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]

    /* Check parameters */
    if (NULL == message) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <LOG+0x18>
        return -1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d52:	e049      	b.n	8001de8 <LOG+0xac>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d902      	bls.n	8001d60 <LOG+0x24>
        return -1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d5e:	e043      	b.n	8001de8 <LOG+0xac>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	222e      	movs	r2, #46	; 0x2e
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f008 f82b 	bl	8009dc8 <memset>

    if (LOG_INFORMATION == logType) {
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d108      	bne.n	8001d8a <LOG+0x4e>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <LOG+0xb4>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f008 f828 	bl	8009dd8 <strcat>
 8001d88:	e022      	b.n	8001dd0 <LOG+0x94>
    } else if (LOG_DEBUGGING == logType) {
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <LOG+0x66>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <LOG+0xb8>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f008 f81c 	bl	8009dd8 <strcat>
 8001da0:	e016      	b.n	8001dd0 <LOG+0x94>
    } else if (LOG_WARNING == logType) {
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d108      	bne.n	8001dba <LOG+0x7e>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <LOG+0xbc>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f008 f810 	bl	8009dd8 <strcat>
 8001db8:	e00a      	b.n	8001dd0 <LOG+0x94>
    } else if (LOG_ERROR == logType) {
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d107      	bne.n	8001dd0 <LOG+0x94>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <LOG+0xc0>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f008 f804 	bl	8009dd8 <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f007 fffe 	bl	8009dd8 <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff99 	bl	8001d18 <USB_Write>

    return 0;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3740      	adds	r7, #64	; 0x40
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000004 	.word	0x20000004
 8001df4:	20000008 	.word	0x20000008
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000010 	.word	0x20000010

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <HAL_Init+0x40>)
 8001e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_Init+0x40>)
 8001e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x40>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 f94f 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff f9ea 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f967 	bl	8002136 <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e80:	f000 f92f 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000018 	.word	0x20000018
 8001ea0:	20000014 	.word	0x20000014

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000018 	.word	0x20000018
 8001ec8:	20000278 	.word	0x20000278

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000278 	.word	0x20000278

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000018 	.word	0x20000018

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <__NVIC_EnableIRQ+0x38>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff29 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff3e 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff8e 	bl	8002020 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5d 	bl	8001fcc <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff31 	bl	8001f90 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa2 	bl	8002088 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff feb6 	bl	8001ecc <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e099      	b.n	80022a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218c:	e00f      	b.n	80021ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800218e:	f7ff fe9d 	bl	8001ecc <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b05      	cmp	r3, #5
 800219a:	d908      	bls.n	80021ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2203      	movs	r2, #3
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e078      	b.n	80022a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e8      	bne.n	800218e <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <HAL_DMA_Init+0x158>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2b04      	cmp	r3, #4
 8002206:	d107      	bne.n	8002218 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	4313      	orrs	r3, r2
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f023 0307 	bic.w	r3, r3, #7
 800222e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b04      	cmp	r3, #4
 8002240:	d117      	bne.n	8002272 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f85f 	bl	8002318 <DMA_CheckFifoParam>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e016      	b.n	80022a0 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f816 	bl	80022ac <DMA_CalcBaseAndBitshift>
 8002280:	4603      	mov	r3, r0
 8002282:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	223f      	movs	r2, #63	; 0x3f
 800228a:	409a      	lsls	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	f010803f 	.word	0xf010803f

080022ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3b10      	subs	r3, #16
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <DMA_CalcBaseAndBitshift+0x64>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <DMA_CalcBaseAndBitshift+0x68>)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d909      	bls.n	80022ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	1d1a      	adds	r2, r3, #4
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	659a      	str	r2, [r3, #88]	; 0x58
 80022ec:	e007      	b.n	80022fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	aaaaaaab 	.word	0xaaaaaaab
 8002314:	0800ac88 	.word	0x0800ac88

08002318 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d11f      	bne.n	8002372 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d856      	bhi.n	80023e6 <DMA_CheckFifoParam+0xce>
 8002338:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <DMA_CheckFifoParam+0x28>)
 800233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233e:	bf00      	nop
 8002340:	08002351 	.word	0x08002351
 8002344:	08002363 	.word	0x08002363
 8002348:	08002351 	.word	0x08002351
 800234c:	080023e7 	.word	0x080023e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d046      	beq.n	80023ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002360:	e043      	b.n	80023ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800236a:	d140      	bne.n	80023ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002370:	e03d      	b.n	80023ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237a:	d121      	bne.n	80023c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d837      	bhi.n	80023f2 <DMA_CheckFifoParam+0xda>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <DMA_CheckFifoParam+0x70>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	08002399 	.word	0x08002399
 800238c:	0800239f 	.word	0x0800239f
 8002390:	08002399 	.word	0x08002399
 8002394:	080023b1 	.word	0x080023b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
      break;
 800239c:	e030      	b.n	8002400 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d025      	beq.n	80023f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ae:	e022      	b.n	80023f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023b8:	d11f      	bne.n	80023fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023be:	e01c      	b.n	80023fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d903      	bls.n	80023ce <DMA_CheckFifoParam+0xb6>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d003      	beq.n	80023d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023cc:	e018      	b.n	8002400 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
      break;
 80023d2:	e015      	b.n	8002400 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      break;
 80023e4:	e00b      	b.n	80023fe <DMA_CheckFifoParam+0xe6>
      break;
 80023e6:	bf00      	nop
 80023e8:	e00a      	b.n	8002400 <DMA_CheckFifoParam+0xe8>
      break;
 80023ea:	bf00      	nop
 80023ec:	e008      	b.n	8002400 <DMA_CheckFifoParam+0xe8>
      break;
 80023ee:	bf00      	nop
 80023f0:	e006      	b.n	8002400 <DMA_CheckFifoParam+0xe8>
      break;
 80023f2:	bf00      	nop
 80023f4:	e004      	b.n	8002400 <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
 80023f8:	e002      	b.n	8002400 <DMA_CheckFifoParam+0xe8>
      break;
 80023fa:	bf00      	nop
 80023fc:	e000      	b.n	8002400 <DMA_CheckFifoParam+0xe8>
      break;
 80023fe:	bf00      	nop
    }
  }

  return status;
 8002400:	7bfb      	ldrb	r3, [r7, #15]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e159      	b.n	80026e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	f040 8148 	bne.w	80026da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d005      	beq.n	8002462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	2b02      	cmp	r3, #2
 8002460:	d130      	bne.n	80024c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 0201 	and.w	r2, r3, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d017      	beq.n	8002500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d123      	bne.n	8002554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a2 	beq.w	80026da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	; 0x44
 80025a6:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b2:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_GPIO_Init+0x2ec>)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a49      	ldr	r2, [pc, #292]	; (8002700 <HAL_GPIO_Init+0x2f0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d019      	beq.n	8002612 <HAL_GPIO_Init+0x202>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a48      	ldr	r2, [pc, #288]	; (8002704 <HAL_GPIO_Init+0x2f4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0x1fe>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a47      	ldr	r2, [pc, #284]	; (8002708 <HAL_GPIO_Init+0x2f8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_GPIO_Init+0x1fa>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a46      	ldr	r2, [pc, #280]	; (800270c <HAL_GPIO_Init+0x2fc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x1f6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a45      	ldr	r2, [pc, #276]	; (8002710 <HAL_GPIO_Init+0x300>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_GPIO_Init+0x1f2>
 80025fe:	2304      	movs	r3, #4
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002602:	2307      	movs	r3, #7
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x204>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x204>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	; (80026fc <HAL_GPIO_Init+0x2ec>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b38      	ldr	r3, [pc, #224]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a2f      	ldr	r2, [pc, #188]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_GPIO_Init+0x304>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026aa:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f aea2 	bls.w	800242c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40013c00 	.word	0x40013c00

08002718 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e12b      	b.n	8002982 <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe fd8c 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276a:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800277a:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 800277c:	f002 fe38 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8002780:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a81      	ldr	r2, [pc, #516]	; (800298c <HAL_I2C_Init+0x274>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d807      	bhi.n	800279c <HAL_I2C_Init+0x84>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a80      	ldr	r2, [pc, #512]	; (8002990 <HAL_I2C_Init+0x278>)
 8002790:	4293      	cmp	r3, r2
 8002792:	bf94      	ite	ls
 8002794:	2301      	movls	r3, #1
 8002796:	2300      	movhi	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e006      	b.n	80027aa <HAL_I2C_Init+0x92>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a7d      	ldr	r2, [pc, #500]	; (8002994 <HAL_I2C_Init+0x27c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	bf94      	ite	ls
 80027a4:	2301      	movls	r3, #1
 80027a6:	2300      	movhi	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0e7      	b.n	8002982 <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a78      	ldr	r2, [pc, #480]	; (8002998 <HAL_I2C_Init+0x280>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0c9b      	lsrs	r3, r3, #18
 80027bc:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a6a      	ldr	r2, [pc, #424]	; (800298c <HAL_I2C_Init+0x274>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d802      	bhi.n	80027ec <HAL_I2C_Init+0xd4>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3301      	adds	r3, #1
 80027ea:	e009      	b.n	8002800 <HAL_I2C_Init+0xe8>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4a69      	ldr	r2, [pc, #420]	; (800299c <HAL_I2C_Init+0x284>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	3301      	adds	r3, #1
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	430b      	orrs	r3, r1
 8002806:	6213      	str	r3, [r2, #32]

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002812:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	495c      	ldr	r1, [pc, #368]	; (800298c <HAL_I2C_Init+0x274>)
 800281c:	428b      	cmp	r3, r1
 800281e:	d819      	bhi.n	8002854 <HAL_I2C_Init+0x13c>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1e59      	subs	r1, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fbb1 f3f3 	udiv	r3, r1, r3
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002834:	400b      	ands	r3, r1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_I2C_Init+0x138>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1e59      	subs	r1, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fbb1 f3f3 	udiv	r3, r1, r3
 8002848:	3301      	adds	r3, #1
 800284a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284e:	e051      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 8002850:	2304      	movs	r3, #4
 8002852:	e04f      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d111      	bne.n	8002880 <HAL_I2C_Init+0x168>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	440b      	add	r3, r1
 800286a:	fbb0 f3f3 	udiv	r3, r0, r3
 800286e:	3301      	adds	r3, #1
 8002870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e012      	b.n	80028a6 <HAL_I2C_Init+0x18e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x196>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e022      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10e      	bne.n	80028d4 <HAL_I2C_Init+0x1bc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e58      	subs	r0, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	440b      	add	r3, r1
 80028c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d2:	e00f      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1e58      	subs	r0, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	0099      	lsls	r1, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	6809      	ldr	r1, [r1, #0]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61cb      	str	r3, [r1, #28]

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002922:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6911      	ldr	r1, [r2, #16]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68d2      	ldr	r2, [r2, #12]
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	430b      	orrs	r3, r1
 8002936:	6093      	str	r3, [r2, #8]

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	60da      	str	r2, [r3, #12]

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	000186a0 	.word	0x000186a0
 8002990:	001e847f 	.word	0x001e847f
 8002994:	003d08ff 	.word	0x003d08ff
 8002998:	431bde83 	.word	0x431bde83
 800299c:	10624dd3 	.word	0x10624dd3

080029a0 <HAL_I2C_Mem_Write>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	4608      	mov	r0, r1
 80029aa:	4611      	mov	r1, r2
 80029ac:	461a      	mov	r2, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	817b      	strh	r3, [r7, #10]
 80029b2:	460b      	mov	r3, r1
 80029b4:	813b      	strh	r3, [r7, #8]
 80029b6:	4613      	mov	r3, r2
 80029b8:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 80029ba:	f7ff fa87 	bl	8001ecc <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	f040 80d9 	bne.w	8002b80 <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2319      	movs	r3, #25
 80029d4:	2201      	movs	r2, #1
 80029d6:	496d      	ldr	r1, [pc, #436]	; (8002b8c <HAL_I2C_Mem_Write+0x1ec>)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fc7f 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x48>
            return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0cc      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Mem_Write+0x56>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0c5      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d007      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2221      	movs	r2, #33	; 0x21
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a4d      	ldr	r2, [pc, #308]	; (8002b90 <HAL_I2C_Mem_Write+0x1f0>)
 8002a5c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8002a5e:	88f8      	ldrh	r0, [r7, #6]
 8002a60:	893a      	ldrh	r2, [r7, #8]
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fab6 	bl	8002fe0 <I2C_RequestMemoryWrite>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d052      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x180>
            return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e081      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fd00 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d107      	bne.n	8002aa6 <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e06b      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

            /* Update counter */
            hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
            hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d11b      	bne.n	8002b20 <HAL_I2C_Mem_Write+0x180>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1aa      	bne.n	8002a7e <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fcec 	bl	800350a <I2C_WaitOnBTFFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e016      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
    }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	00100002 	.word	0x00100002
 8002b90:	ffff0000 	.word	0xffff0000

08002b94 <HAL_I2C_Mem_Read>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8002bae:	f7ff f98d 	bl	8001ecc <HAL_GetTick>
 8002bb2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 8208 	bne.w	8002fd2 <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2319      	movs	r3, #25
 8002bc8:	2201      	movs	r2, #1
 8002bca:	497b      	ldr	r1, [pc, #492]	; (8002db8 <HAL_I2C_Mem_Read+0x224>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fb85 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x48>
            return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e1fb      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Mem_Read+0x56>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e1f4      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d007      	beq.n	8002c10 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2222      	movs	r2, #34	; 0x22
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	; (8002dbc <HAL_I2C_Mem_Read+0x228>)
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8002c52:	88f8      	ldrh	r0, [r7, #6]
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4603      	mov	r3, r0
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fa52 	bl	800310c <I2C_RequestMemoryRead>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Mem_Read+0xde>
            return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e1b0      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d113      	bne.n	8002ca2 <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e184      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e164      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d11b      	bne.n	8002d22 <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf8:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d08:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	e144      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8002d38:	e138      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	f200 80f1 	bhi.w	8002f26 <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d123      	bne.n	8002d94 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fc1b 	bl	800358c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e139      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d92:	e10b      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d14e      	bne.n	8002e3a <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	2200      	movs	r2, #0
 8002da4:	4906      	ldr	r1, [pc, #24]	; (8002dc0 <HAL_I2C_Mem_Read+0x22c>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fa98 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x230>
                        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e10e      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
 8002db6:	bf00      	nop
 8002db8:	00100002 	.word	0x00100002
 8002dbc:	ffff0000 	.word	0xffff0000
 8002dc0:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e38:	e0b8      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	2200      	movs	r2, #0
 8002e42:	4966      	ldr	r1, [pc, #408]	; (8002fdc <HAL_I2C_Mem_Read+0x448>)
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fa49 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_I2C_Mem_Read+0x2c0>
                        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0bf      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e62:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	494f      	ldr	r1, [pc, #316]	; (8002fdc <HAL_I2C_Mem_Read+0x448>)
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fa1b 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Mem_Read+0x31c>
                        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e091      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f24:	e042      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fb2e 	bl	800358c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e04c      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d118      	bne.n	8002fac <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f aec2 	bne.w	8002d3a <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 8002fd2:	2302      	movs	r3, #2
    }
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3728      	adds	r7, #40	; 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	00010004 	.word	0x00010004

08002fe0 <I2C_RequestMemoryWrite>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	813b      	strh	r3, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003008:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2200      	movs	r2, #0
 8003012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f960 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003030:	d103      	bne.n	800303a <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e05f      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800304c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	492d      	ldr	r1, [pc, #180]	; (8003108 <I2C_RequestMemoryWrite+0x128>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f998 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <I2C_RequestMemoryWrite+0x84>
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e04c      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800307a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa02 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e02b      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	611a      	str	r2, [r3, #16]
 80030b6:	e021      	b.n	80030fc <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030b8:	893b      	ldrh	r3, [r7, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	b29b      	uxth	r3, r3
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f9dc 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e005      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	00010002 	.word	0x00010002

0800310c <I2C_RequestMemoryRead>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	4608      	mov	r0, r1
 8003116:	4611      	mov	r1, r2
 8003118:	461a      	mov	r2, r3
 800311a:	4603      	mov	r3, r0
 800311c:	817b      	strh	r3, [r7, #10]
 800311e:	460b      	mov	r3, r1
 8003120:	813b      	strh	r3, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2200      	movs	r2, #0
 800314e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8c2 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800316c:	d103      	bne.n	8003176 <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0aa      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003188:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	4952      	ldr	r1, [pc, #328]	; (80032d8 <I2C_RequestMemoryRead+0x1cc>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8fa 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <I2C_RequestMemoryRead+0x94>
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e097      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f964 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d107      	bne.n	80031de <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e076      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031e8:	893b      	ldrh	r3, [r7, #8]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	611a      	str	r2, [r3, #16]
 80031f2:	e021      	b.n	8003238 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031f4:	893b      	ldrh	r3, [r7, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f93e 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003228:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e050      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	6a39      	ldr	r1, [r7, #32]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f923 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e035      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003272:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	2200      	movs	r2, #0
 800327c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f82b 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d103      	bne.n	80032a4 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e013      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032a8:	897b      	ldrh	r3, [r7, #10]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	4906      	ldr	r1, [pc, #24]	; (80032d8 <I2C_RequestMemoryRead+0x1cc>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f863 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_RequestMemoryRead+0x1c2>
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	00010002 	.word	0x00010002

080032dc <I2C_WaitOnFlagUntilTimeout>:
 * @param  Status The new Flag status (SET or RESET).
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80032ec:	e025      	b.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f4:	d021      	beq.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80032f6:	f7fe fde9 	bl	8001ecc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e023      	b.n	8003382 <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10d      	bne.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	e00c      	b.n	800337a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	43da      	mvns	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	429a      	cmp	r2, r3
 800337e:	d0b6      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Flag specifies the I2C flag to check.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart) {
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8003398:	e051      	b.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a8:	d123      	bne.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b8:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c2:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0204 	orr.w	r2, r3, #4
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e046      	b.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f8:	d021      	beq.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80033fa:	f7fe fd67 	bl	8001ecc <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d116      	bne.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e020      	b.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d10c      	bne.n	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf14      	ite	ne
 800345a:	2301      	movne	r3, #1
 800345c:	2300      	moveq	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	e00b      	b.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	43da      	mvns	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d18d      	bne.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_WaitOnTXEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8003494:	e02d      	b.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8ce 	bl	8003638 <I2C_IsAcknowledgeFailed>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e02d      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80034ae:	f7fe fd0d 	bl	8001ecc <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e007      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d1ca      	bne.n	8003496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <I2C_WaitOnBTFFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8003516:	e02d      	b.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f88d 	bl	8003638 <I2C_IsAcknowledgeFailed>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e02d      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800352e:	d021      	beq.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8003530:	f7fe fccc 	bl	8001ecc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d1ca      	bne.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_WaitOnRXNEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8003598:	e042      	b.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d119      	bne.n	80035dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0210 	mvn.w	r2, #16
 80035b0:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e029      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80035dc:	f7fe fc76 	bl	8001ecc <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d302      	bcc.n	80035f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d1b5      	bne.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	d11b      	bne.n	8003688 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003658:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003698:	b08f      	sub	sp, #60	; 0x3c
 800369a:	af0a      	add	r7, sp, #40	; 0x28
 800369c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e10f      	b.n	80038c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f005 ff9a 	bl	80095fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2203      	movs	r2, #3
 80036cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 fa81 	bl	8005bee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	687e      	ldr	r6, [r7, #4]
 80036f4:	466d      	mov	r5, sp
 80036f6:	f106 0410 	add.w	r4, r6, #16
 80036fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003702:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003706:	e885 0003 	stmia.w	r5, {r0, r1}
 800370a:	1d33      	adds	r3, r6, #4
 800370c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800370e:	6838      	ldr	r0, [r7, #0]
 8003710:	f002 f958 	bl	80059c4 <USB_CoreInit>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0d0      	b.n	80038c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f002 fa6f 	bl	8005c10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e04a      	b.n	80037ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	333d      	adds	r3, #61	; 0x3d
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	333c      	adds	r3, #60	; 0x3c
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	b298      	uxth	r0, r3
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	3344      	adds	r3, #68	; 0x44
 8003774:	4602      	mov	r2, r0
 8003776:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3340      	adds	r3, #64	; 0x40
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3348      	adds	r3, #72	; 0x48
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	334c      	adds	r3, #76	; 0x4c
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	3354      	adds	r3, #84	; 0x54
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	3301      	adds	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d3af      	bcc.n	8003738 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
 80037dc:	e044      	b.n	8003868 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	3301      	adds	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d3b5      	bcc.n	80037de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	687e      	ldr	r6, [r7, #4]
 800387a:	466d      	mov	r5, sp
 800387c:	f106 0410 	add.w	r4, r6, #16
 8003880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003888:	e894 0003 	ldmia.w	r4, {r0, r1}
 800388c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003890:	1d33      	adds	r3, r6, #4
 8003892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003894:	6838      	ldr	r0, [r7, #0]
 8003896:	f002 fa07 	bl	8005ca8 <USB_DevInit>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e00d      	b.n	80038c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 fb56 	bl	8006f72 <USB_DevDisconnect>

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_PCD_Start+0x1c>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e020      	b.n	800392e <HAL_PCD_Start+0x5e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d109      	bne.n	8003910 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003900:	2b01      	cmp	r3, #1
 8003902:	d005      	beq.n	8003910 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f002 f959 	bl	8005bcc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fb06 	bl	8006f30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003936:	b590      	push	{r4, r7, lr}
 8003938:	b08d      	sub	sp, #52	; 0x34
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f003 fbc4 	bl	80070da <USB_GetMode>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 848a 	bne.w	800426e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f003 fb28 	bl	8006fb4 <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8480 	beq.w	800426c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f003 fb15 	bl	8006fb4 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b02      	cmp	r3, #2
 8003992:	d107      	bne.n	80039a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f002 0202 	and.w	r2, r2, #2
 80039a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f003 fb03 	bl	8006fb4 <USB_ReadInterrupts>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d161      	bne.n	8003a7c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0210 	bic.w	r2, r2, #16
 80039c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f003 020f 	and.w	r2, r3, #15
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	3304      	adds	r3, #4
 80039e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	0c5b      	lsrs	r3, r3, #17
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d124      	bne.n	8003a3e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d035      	beq.n	8003a6c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	6a38      	ldr	r0, [r7, #32]
 8003a14:	f003 f93a 	bl	8006c8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a24:	441a      	add	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	6a1a      	ldr	r2, [r3, #32]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a36:	441a      	add	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	621a      	str	r2, [r3, #32]
 8003a3c:	e016      	b.n	8003a6c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	0c5b      	lsrs	r3, r3, #17
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	2b06      	cmp	r3, #6
 8003a48:	d110      	bne.n	8003a6c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a50:	2208      	movs	r2, #8
 8003a52:	4619      	mov	r1, r3
 8003a54:	6a38      	ldr	r0, [r7, #32]
 8003a56:	f003 f919 	bl	8006c8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	6a1a      	ldr	r2, [r3, #32]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a66:	441a      	add	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0210 	orr.w	r2, r2, #16
 8003a7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 fa97 	bl	8006fb4 <USB_ReadInterrupts>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a90:	f040 80a7 	bne.w	8003be2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f003 fa9c 	bl	8006fda <USB_ReadDevAllOutEpInterrupt>
 8003aa2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003aa4:	e099      	b.n	8003bda <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 808e 	beq.w	8003bce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f003 fac0 	bl	8007042 <USB_ReadDevOutEPInterrupt>
 8003ac2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00c      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	461a      	mov	r2, r3
 8003adc:	2301      	movs	r3, #1
 8003ade:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fec2 	bl	800486c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afe:	461a      	mov	r2, r3
 8003b00:	2308      	movs	r3, #8
 8003b02:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 ff98 	bl	8004a3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	461a      	mov	r2, r3
 8003b24:	2310      	movs	r3, #16
 8003b26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d030      	beq.n	8003b94 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3a:	2b80      	cmp	r3, #128	; 0x80
 8003b3c:	d109      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b50:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4413      	add	r3, r2
 8003b64:	3304      	adds	r3, #4
 8003b66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	78db      	ldrb	r3, [r3, #3]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d108      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2200      	movs	r2, #0
 8003b74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f005 fe39 	bl	80097f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2302      	movs	r3, #2
 8003b92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	461a      	mov	r2, r3
 8003bac:	2320      	movs	r3, #32
 8003bae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bcc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f af62 	bne.w	8003aa6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 f9e4 	bl	8006fb4 <USB_ReadInterrupts>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bf6:	f040 80db 	bne.w	8003db0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 fa05 	bl	800700e <USB_ReadDevAllInEpInterrupt>
 8003c04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c0a:	e0cd      	b.n	8003da8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80c2 	beq.w	8003d9c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 fa2b 	bl	800707e <USB_ReadDevInEPInterrupt>
 8003c28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d057      	beq.n	8003ce4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69f9      	ldr	r1, [r7, #28]
 8003c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c54:	4013      	ands	r3, r2
 8003c56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	461a      	mov	r2, r3
 8003c66:	2301      	movs	r3, #1
 8003c68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d132      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	334c      	adds	r3, #76	; 0x4c
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4403      	add	r3, r0
 8003c92:	3348      	adds	r3, #72	; 0x48
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4419      	add	r1, r3
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4403      	add	r3, r0
 8003ca6:	334c      	adds	r3, #76	; 0x4c
 8003ca8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d113      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x3a2>
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3354      	adds	r3, #84	; 0x54
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d108      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	f003 fa32 	bl	800713c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f005 fd0d 	bl	80096fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	461a      	mov	r2, r3
 8003d18:	2310      	movs	r3, #16
 8003d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d32:	461a      	mov	r2, r3
 8003d34:	2340      	movs	r3, #64	; 0x40
 8003d36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d023      	beq.n	8003d8a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d44:	6a38      	ldr	r0, [r7, #32]
 8003d46:	f002 f913 	bl	8005f70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	3338      	adds	r3, #56	; 0x38
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	78db      	ldrb	r3, [r3, #3]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d108      	bne.n	8003d78 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f005 fd50 	bl	8009818 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	461a      	mov	r2, r3
 8003d86:	2302      	movs	r3, #2
 8003d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fcdb 	bl	8004752 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	3301      	adds	r3, #1
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f47f af2e 	bne.w	8003c0c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f003 f8fd 	bl	8006fb4 <USB_ReadInterrupts>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc4:	d122      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d108      	bne.n	8003df6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dec:	2100      	movs	r1, #0
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fec2 	bl	8004b78 <HAL_PCDEx_LPM_Callback>
 8003df4:	e002      	b.n	8003dfc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f005 fcee 	bl	80097d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f003 f8cf 	bl	8006fb4 <USB_ReadInterrupts>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e20:	d112      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f005 fcaa 	bl	800978c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e46:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 f8b1 	bl	8006fb4 <USB_ReadInterrupts>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	f040 80b7 	bne.w	8003fce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2110      	movs	r1, #16
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 f878 	bl	8005f70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e80:	2300      	movs	r3, #0
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e84:	e046      	b.n	8003f14 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	461a      	mov	r2, r3
 8003e94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ecc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ede:	0151      	lsls	r1, r2, #5
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	440a      	add	r2, r1
 8003ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efe:	0151      	lsls	r1, r2, #5
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	440a      	add	r2, r1
 8003f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	3301      	adds	r3, #1
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d3b3      	bcc.n	8003e86 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4a:	f043 030b 	orr.w	r3, r3, #11
 8003f4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f60:	f043 030b 	orr.w	r3, r3, #11
 8003f64:	6453      	str	r3, [r2, #68]	; 0x44
 8003f66:	e015      	b.n	8003f94 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f8e:	f043 030b 	orr.w	r3, r3, #11
 8003f92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fa6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f003 f8bf 	bl	800713c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f002 ffee 	bl	8006fb4 <USB_ReadInterrupts>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d124      	bne.n	800402e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f003 f884 	bl	80070f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f002 f839 	bl	800606a <USB_GetDevSpeed>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681c      	ldr	r4, [r3, #0]
 8004004:	f001 f9e8 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 8004008:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	4620      	mov	r0, r4
 8004014:	f001 fd38 	bl	8005a88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f005 fb98 	bl	800974e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800402c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f002 ffbe 	bl	8006fb4 <USB_ReadInterrupts>
 8004038:	4603      	mov	r3, r0
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b08      	cmp	r3, #8
 8004040:	d10a      	bne.n	8004058 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f005 fb75 	bl	8009732 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f002 0208 	and.w	r2, r2, #8
 8004056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f002 ffa9 	bl	8006fb4 <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004068:	2b80      	cmp	r3, #128	; 0x80
 800406a:	d122      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004078:	2301      	movs	r3, #1
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
 800407c:	e014      	b.n	80040a8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fb27 	bl	80046f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	3301      	adds	r3, #1
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3e5      	bcc.n	800407e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f002 ff7c 	bl	8006fb4 <USB_ReadInterrupts>
 80040bc:	4603      	mov	r3, r0
 80040be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c6:	d13b      	bne.n	8004140 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040c8:	2301      	movs	r3, #1
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	e02b      	b.n	8004126 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	3340      	adds	r3, #64	; 0x40
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d115      	bne.n	8004120 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da12      	bge.n	8004120 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	333f      	adds	r3, #63	; 0x3f
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004116:	b2db      	uxtb	r3, r3
 8004118:	4619      	mov	r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fae8 	bl	80046f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	3301      	adds	r3, #1
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	429a      	cmp	r2, r3
 800412e:	d3ce      	bcc.n	80040ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800413e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f002 ff35 	bl	8006fb4 <USB_ReadInterrupts>
 800414a:	4603      	mov	r3, r0
 800414c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004154:	d155      	bne.n	8004202 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004156:	2301      	movs	r3, #1
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	e045      	b.n	80041e8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d12e      	bne.n	80041e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004184:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004186:	2b00      	cmp	r3, #0
 8004188:	da2b      	bge.n	80041e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004196:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800419a:	429a      	cmp	r2, r3
 800419c:	d121      	bne.n	80041e2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041de:	6053      	str	r3, [r2, #4]
            break;
 80041e0:	e007      	b.n	80041f2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	3301      	adds	r3, #1
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d3b4      	bcc.n	800415c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f002 fed4 	bl	8006fb4 <USB_ReadInterrupts>
 800420c:	4603      	mov	r3, r0
 800420e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004216:	d10a      	bne.n	800422e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f005 fb0f 	bl	800983c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800422c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f002 febe 	bl	8006fb4 <USB_ReadInterrupts>
 8004238:	4603      	mov	r3, r0
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d115      	bne.n	800426e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f005 faff 	bl	8009858 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	e000      	b.n	800426e <HAL_PCD_IRQHandler+0x938>
      return;
 800426c:	bf00      	nop
    }
  }
}
 800426e:	3734      	adds	r7, #52	; 0x34
 8004270:	46bd      	mov	sp, r7
 8004272:	bd90      	pop	{r4, r7, pc}

08004274 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_PCD_SetAddress+0x1a>
 800428a:	2302      	movs	r3, #2
 800428c:	e013      	b.n	80042b6 <HAL_PCD_SetAddress+0x42>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f002 fe1c 	bl	8006ee4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	4608      	mov	r0, r1
 80042c8:	4611      	mov	r1, r2
 80042ca:	461a      	mov	r2, r3
 80042cc:	4603      	mov	r3, r0
 80042ce:	70fb      	strb	r3, [r7, #3]
 80042d0:	460b      	mov	r3, r1
 80042d2:	803b      	strh	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	da0f      	bge.n	8004304 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	f003 020f 	and.w	r2, r3, #15
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	3338      	adds	r3, #56	; 0x38
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	3304      	adds	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	705a      	strb	r2, [r3, #1]
 8004302:	e00f      	b.n	8004324 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	f003 020f 	and.w	r2, r3, #15
 800430a:	4613      	mov	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	3304      	adds	r3, #4
 800431c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	b2da      	uxtb	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004330:	883a      	ldrh	r2, [r7, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	78ba      	ldrb	r2, [r7, #2]
 800433a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d004      	beq.n	800434e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800434e:	78bb      	ldrb	r3, [r7, #2]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d102      	bne.n	800435a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_PCD_EP_Open+0xaa>
 8004364:	2302      	movs	r3, #2
 8004366:	e00e      	b.n	8004386 <HAL_PCD_EP_Open+0xc8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68f9      	ldr	r1, [r7, #12]
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fe9c 	bl	80060b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004384:	7afb      	ldrb	r3, [r7, #11]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800439a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da0f      	bge.n	80043c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 020f 	and.w	r2, r3, #15
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	3338      	adds	r3, #56	; 0x38
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	705a      	strb	r2, [r3, #1]
 80043c0:	e00f      	b.n	80043e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	f003 020f 	and.w	r2, r3, #15
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	3304      	adds	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_PCD_EP_Close+0x6e>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e00e      	b.n	800441a <HAL_PCD_EP_Close+0x8c>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68f9      	ldr	r1, [r7, #12]
 800440a:	4618      	mov	r0, r3
 800440c:	f001 feda 	bl	80061c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	460b      	mov	r3, r1
 8004430:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004432:	7afb      	ldrb	r3, [r7, #11]
 8004434:	f003 020f 	and.w	r2, r3, #15
 8004438:	4613      	mov	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	3304      	adds	r3, #4
 800444a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2200      	movs	r2, #0
 800445c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004464:	7afb      	ldrb	r3, [r7, #11]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	b2da      	uxtb	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d102      	bne.n	800447e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800447e:	7afb      	ldrb	r3, [r7, #11]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	6979      	ldr	r1, [r7, #20]
 8004496:	f002 f9b9 	bl	800680c <USB_EP0StartXfer>
 800449a:	e008      	b.n	80044ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	6979      	ldr	r1, [r7, #20]
 80044aa:	f001 ff67 	bl	800637c <USB_EPStartXfer>
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	f003 020f 	and.w	r2, r3, #15
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80044da:	681b      	ldr	r3, [r3, #0]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	460b      	mov	r3, r1
 80044f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	3338      	adds	r3, #56	; 0x38
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	3304      	adds	r3, #4
 800450e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2200      	movs	r2, #0
 8004520:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2201      	movs	r2, #1
 8004526:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004528:	7afb      	ldrb	r3, [r7, #11]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	b2da      	uxtb	r2, r3
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004542:	7afb      	ldrb	r3, [r7, #11]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	6979      	ldr	r1, [r7, #20]
 800455a:	f002 f957 	bl	800680c <USB_EP0StartXfer>
 800455e:	e008      	b.n	8004572 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	6979      	ldr	r1, [r7, #20]
 800456e:	f001 ff05 	bl	800637c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	f003 020f 	and.w	r2, r3, #15
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d901      	bls.n	800459a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e050      	b.n	800463c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800459a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	da0f      	bge.n	80045c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f003 020f 	and.w	r2, r3, #15
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	3338      	adds	r3, #56	; 0x38
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	3304      	adds	r3, #4
 80045b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	705a      	strb	r2, [r3, #1]
 80045c0:	e00d      	b.n	80045de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4413      	add	r3, r2
 80045d4:	3304      	adds	r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_PCD_EP_SetStall+0x82>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e01e      	b.n	800463c <HAL_PCD_EP_SetStall+0xc0>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	4618      	mov	r0, r3
 800460e:	f002 fb95 	bl	8006d3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	b2d9      	uxtb	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800462c:	461a      	mov	r2, r3
 800462e:	f002 fd85 	bl	800713c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	f003 020f 	and.w	r2, r3, #15
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	429a      	cmp	r2, r3
 800465c:	d901      	bls.n	8004662 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e042      	b.n	80046e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004666:	2b00      	cmp	r3, #0
 8004668:	da0f      	bge.n	800468a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800466a:	78fb      	ldrb	r3, [r7, #3]
 800466c:	f003 020f 	and.w	r2, r3, #15
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	3338      	adds	r3, #56	; 0x38
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	3304      	adds	r3, #4
 8004680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	705a      	strb	r2, [r3, #1]
 8004688:	e00f      	b.n	80046aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	f003 020f 	and.w	r2, r3, #15
 8004690:	4613      	mov	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	4413      	add	r3, r2
 80046a0:	3304      	adds	r3, #4
 80046a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_PCD_EP_ClrStall+0x86>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e00e      	b.n	80046e8 <HAL_PCD_EP_ClrStall+0xa4>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	4618      	mov	r0, r3
 80046da:	f002 fb9d 	bl	8006e18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004700:	2b00      	cmp	r3, #0
 8004702:	da0c      	bge.n	800471e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	f003 020f 	and.w	r2, r3, #15
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	3338      	adds	r3, #56	; 0x38
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	4413      	add	r3, r2
 8004718:	3304      	adds	r3, #4
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e00c      	b.n	8004738 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 020f 	and.w	r2, r3, #15
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	3304      	adds	r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68f9      	ldr	r1, [r7, #12]
 800473e:	4618      	mov	r0, r3
 8004740:	f002 f9bc 	bl	8006abc <USB_EPStopXfer>
 8004744:	4603      	mov	r3, r0
 8004746:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004748:	7afb      	ldrb	r3, [r7, #11]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b08a      	sub	sp, #40	; 0x28
 8004756:	af02      	add	r7, sp, #8
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	3338      	adds	r3, #56	; 0x38
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	3304      	adds	r3, #4
 8004778:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	429a      	cmp	r2, r3
 8004784:	d901      	bls.n	800478a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e06c      	b.n	8004864 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	429a      	cmp	r2, r3
 800479e:	d902      	bls.n	80047a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	3303      	adds	r3, #3
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047ae:	e02b      	b.n	8004808 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d902      	bls.n	80047cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	3303      	adds	r3, #3
 80047d0:	089b      	lsrs	r3, r3, #2
 80047d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6919      	ldr	r1, [r3, #16]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4603      	mov	r3, r0
 80047ea:	6978      	ldr	r0, [r7, #20]
 80047ec:	f002 fa10 	bl	8006c10 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	441a      	add	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	441a      	add	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	429a      	cmp	r2, r3
 800481c:	d809      	bhi.n	8004832 <PCD_WriteEmptyTxFifo+0xe0>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004826:	429a      	cmp	r2, r3
 8004828:	d203      	bcs.n	8004832 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1be      	bne.n	80047b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	429a      	cmp	r2, r3
 800483c:	d811      	bhi.n	8004862 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	2201      	movs	r2, #1
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	43db      	mvns	r3, r3
 8004858:	6939      	ldr	r1, [r7, #16]
 800485a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485e:	4013      	ands	r3, r2
 8004860:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	333c      	adds	r3, #60	; 0x3c
 8004884:	3304      	adds	r3, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d17b      	bne.n	800499a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d015      	beq.n	80048d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4a61      	ldr	r2, [pc, #388]	; (8004a34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	f240 80b9 	bls.w	8004a28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80b3 	beq.w	8004a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ce:	461a      	mov	r2, r3
 80048d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d4:	6093      	str	r3, [r2, #8]
 80048d6:	e0a7      	b.n	8004a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	461a      	mov	r2, r3
 80048f0:	2320      	movs	r3, #32
 80048f2:	6093      	str	r3, [r2, #8]
 80048f4:	e098      	b.n	8004a28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 8093 	bne.w	8004a28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	4a4b      	ldr	r2, [pc, #300]	; (8004a34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d90f      	bls.n	800492a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	461a      	mov	r2, r3
 8004922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004926:	6093      	str	r3, [r2, #8]
 8004928:	e07e      	b.n	8004a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	3304      	adds	r3, #4
 800493e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	0159      	lsls	r1, r3, #5
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	440b      	add	r3, r1
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d114      	bne.n	800498c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004974:	461a      	mov	r2, r3
 8004976:	2101      	movs	r1, #1
 8004978:	f002 fbe0 	bl	800713c <USB_EP0_OutStart>
 800497c:	e006      	b.n	800498c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f004 fe98 	bl	80096c8 <HAL_PCD_DataOutStageCallback>
 8004998:	e046      	b.n	8004a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d124      	bne.n	80049ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b8:	461a      	mov	r2, r3
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	6093      	str	r3, [r2, #8]
 80049c0:	e032      	b.n	8004a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	461a      	mov	r2, r3
 80049da:	2320      	movs	r3, #32
 80049dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f004 fe6f 	bl	80096c8 <HAL_PCD_DataOutStageCallback>
 80049ea:	e01d      	b.n	8004a28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d114      	bne.n	8004a1c <PCD_EP_OutXfrComplete_int+0x1b0>
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d108      	bne.n	8004a1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a14:	461a      	mov	r2, r3
 8004a16:	2100      	movs	r1, #0
 8004a18:	f002 fb90 	bl	800713c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f004 fe50 	bl	80096c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	4f54300a 	.word	0x4f54300a
 8004a38:	4f54310a 	.word	0x4f54310a

08004a3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	333c      	adds	r3, #60	; 0x3c
 8004a54:	3304      	adds	r3, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d90e      	bls.n	8004a90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d009      	beq.n	8004a90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f004 fe07 	bl	80096a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d90c      	bls.n	8004ab8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d108      	bne.n	8004ab8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	f002 fb42 	bl	800713c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	4f54300a 	.word	0x4f54300a

08004ac8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d107      	bne.n	8004af6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ae6:	883b      	ldrh	r3, [r7, #0]
 8004ae8:	0419      	lsls	r1, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
 8004af4:	e028      	b.n	8004b48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4413      	add	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
 8004b08:	e00d      	b.n	8004b26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	3340      	adds	r3, #64	; 0x40
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	3301      	adds	r3, #1
 8004b24:	73fb      	strb	r3, [r7, #15]
 8004b26:	7bfa      	ldrb	r2, [r7, #15]
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d3ec      	bcc.n	8004b0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b30:	883b      	ldrh	r3, [r7, #0]
 8004b32:	0418      	lsls	r0, r3, #16
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	4302      	orrs	r2, r0
 8004b40:	3340      	adds	r3, #64	; 0x40
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	887a      	ldrh	r2, [r7, #2]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e267      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d075      	beq.n	8004c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bae:	4b88      	ldr	r3, [pc, #544]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bba:	4b85      	ldr	r3, [pc, #532]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d112      	bne.n	8004bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc6:	4b82      	ldr	r3, [pc, #520]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd2:	d10b      	bne.n	8004bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	4b7e      	ldr	r3, [pc, #504]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d05b      	beq.n	8004c98 <HAL_RCC_OscConfig+0x108>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d157      	bne.n	8004c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e242      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf4:	d106      	bne.n	8004c04 <HAL_RCC_OscConfig+0x74>
 8004bf6:	4b76      	ldr	r3, [pc, #472]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a75      	ldr	r2, [pc, #468]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e01d      	b.n	8004c40 <HAL_RCC_OscConfig+0xb0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c0c:	d10c      	bne.n	8004c28 <HAL_RCC_OscConfig+0x98>
 8004c0e:	4b70      	ldr	r3, [pc, #448]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6f      	ldr	r2, [pc, #444]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6c      	ldr	r2, [pc, #432]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e00b      	b.n	8004c40 <HAL_RCC_OscConfig+0xb0>
 8004c28:	4b69      	ldr	r3, [pc, #420]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b66      	ldr	r3, [pc, #408]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a65      	ldr	r2, [pc, #404]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d013      	beq.n	8004c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fd f940 	bl	8001ecc <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fd f93c 	bl	8001ecc <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e207      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	4b5b      	ldr	r3, [pc, #364]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0xc0>
 8004c6e:	e014      	b.n	8004c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c70:	f7fd f92c 	bl	8001ecc <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c78:	f7fd f928 	bl	8001ecc <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	; 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e1f3      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8a:	4b51      	ldr	r3, [pc, #324]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0xe8>
 8004c96:	e000      	b.n	8004c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d063      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ca6:	4b4a      	ldr	r3, [pc, #296]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb2:	4b47      	ldr	r3, [pc, #284]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d11c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cbe:	4b44      	ldr	r3, [pc, #272]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d116      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cca:	4b41      	ldr	r3, [pc, #260]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x152>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d001      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e1c7      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce2:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4937      	ldr	r1, [pc, #220]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf6:	e03a      	b.n	8004d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d00:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <HAL_RCC_OscConfig+0x244>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fd f8e1 	bl	8001ecc <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d0e:	f7fd f8dd 	bl	8001ecc <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e1a8      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d20:	4b2b      	ldr	r3, [pc, #172]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2c:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4925      	ldr	r1, [pc, #148]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	600b      	str	r3, [r1, #0]
 8004d40:	e015      	b.n	8004d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCC_OscConfig+0x244>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fd f8c0 	bl	8001ecc <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d50:	f7fd f8bc 	bl	8001ecc <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e187      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d036      	beq.n	8004de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d016      	beq.n	8004db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <HAL_RCC_OscConfig+0x248>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d88:	f7fd f8a0 	bl	8001ecc <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d90:	f7fd f89c 	bl	8001ecc <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e167      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da2:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x200>
 8004dae:	e01b      	b.n	8004de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_OscConfig+0x248>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db6:	f7fd f889 	bl	8001ecc <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	e00e      	b.n	8004ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dbe:	f7fd f885 	bl	8001ecc <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d907      	bls.n	8004ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e150      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	42470000 	.word	0x42470000
 8004dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ddc:	4b88      	ldr	r3, [pc, #544]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ea      	bne.n	8004dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8097 	beq.w	8004f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfa:	4b81      	ldr	r3, [pc, #516]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10f      	bne.n	8004e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	4b7d      	ldr	r3, [pc, #500]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	4a7c      	ldr	r2, [pc, #496]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e14:	6413      	str	r3, [r2, #64]	; 0x40
 8004e16:	4b7a      	ldr	r3, [pc, #488]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	60bb      	str	r3, [r7, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e26:	4b77      	ldr	r3, [pc, #476]	; (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d118      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e32:	4b74      	ldr	r3, [pc, #464]	; (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a73      	ldr	r2, [pc, #460]	; (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3e:	f7fd f845 	bl	8001ecc <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e46:	f7fd f841 	bl	8001ecc <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e10c      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e58:	4b6a      	ldr	r3, [pc, #424]	; (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCC_OscConfig+0x2ea>
 8004e6c:	4b64      	ldr	r3, [pc, #400]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	4a63      	ldr	r2, [pc, #396]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	6713      	str	r3, [r2, #112]	; 0x70
 8004e78:	e01c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x324>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	d10c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x30c>
 8004e82:	4b5f      	ldr	r3, [pc, #380]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4a5e      	ldr	r2, [pc, #376]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8e:	4b5c      	ldr	r3, [pc, #368]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a5b      	ldr	r2, [pc, #364]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	e00b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x324>
 8004e9c:	4b58      	ldr	r3, [pc, #352]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	4a57      	ldr	r2, [pc, #348]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	f023 0301 	bic.w	r3, r3, #1
 8004ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea8:	4b55      	ldr	r3, [pc, #340]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	4a54      	ldr	r2, [pc, #336]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004eae:	f023 0304 	bic.w	r3, r3, #4
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d015      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebc:	f7fd f806 	bl	8001ecc <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec4:	f7fd f802 	bl	8001ecc <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0cb      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eda:	4b49      	ldr	r3, [pc, #292]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0ee      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x334>
 8004ee6:	e014      	b.n	8004f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee8:	f7fc fff0 	bl	8001ecc <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fc ffec 	bl	8001ecc <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0b5      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f06:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1ee      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d105      	bne.n	8004f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f18:	4b39      	ldr	r3, [pc, #228]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	4a38      	ldr	r2, [pc, #224]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80a1 	beq.w	8005070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f2e:	4b34      	ldr	r3, [pc, #208]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d05c      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d141      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f42:	4b31      	ldr	r3, [pc, #196]	; (8005008 <HAL_RCC_OscConfig+0x478>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fc ffc0 	bl	8001ecc <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f50:	f7fc ffbc 	bl	8001ecc <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e087      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f62:	4b27      	ldr	r3, [pc, #156]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	061b      	lsls	r3, r3, #24
 8004f92:	491b      	ldr	r1, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x478>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fc ff95 	bl	8001ecc <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fc ff91 	bl	8001ecc <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e05c      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x416>
 8004fc4:	e054      	b.n	8005070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCC_OscConfig+0x478>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fc ff7e 	bl	8001ecc <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fc ff7a 	bl	8001ecc <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e045      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x444>
 8004ff2:	e03d      	b.n	8005070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e038      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000
 8005008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <HAL_RCC_OscConfig+0x4ec>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d028      	beq.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d121      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d11a      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	4293      	cmp	r3, r2
 8005046:	d111      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d107      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800

08005080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0cc      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005094:	4b68      	ldr	r3, [pc, #416]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d90c      	bls.n	80050bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a2:	4b65      	ldr	r3, [pc, #404]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050aa:	4b63      	ldr	r3, [pc, #396]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d001      	beq.n	80050bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0b8      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d020      	beq.n	800510a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d4:	4b59      	ldr	r3, [pc, #356]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4a58      	ldr	r2, [pc, #352]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050ec:	4b53      	ldr	r3, [pc, #332]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4a52      	ldr	r2, [pc, #328]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f8:	4b50      	ldr	r3, [pc, #320]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	494d      	ldr	r1, [pc, #308]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d044      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d107      	bne.n	800512e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511e:	4b47      	ldr	r3, [pc, #284]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d119      	bne.n	800515e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e07f      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d003      	beq.n	800513e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513a:	2b03      	cmp	r3, #3
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513e:	4b3f      	ldr	r3, [pc, #252]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e06f      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514e:	4b3b      	ldr	r3, [pc, #236]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e067      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f023 0203 	bic.w	r2, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4934      	ldr	r1, [pc, #208]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	4313      	orrs	r3, r2
 800516e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005170:	f7fc feac 	bl	8001ecc <HAL_GetTick>
 8005174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005176:	e00a      	b.n	800518e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005178:	f7fc fea8 	bl	8001ecc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	; 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e04f      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518e:	4b2b      	ldr	r3, [pc, #172]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 020c 	and.w	r2, r3, #12
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	429a      	cmp	r2, r3
 800519e:	d1eb      	bne.n	8005178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a0:	4b25      	ldr	r3, [pc, #148]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d20c      	bcs.n	80051c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b22      	ldr	r3, [pc, #136]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e032      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d4:	4b19      	ldr	r3, [pc, #100]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4916      	ldr	r1, [pc, #88]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	490e      	ldr	r1, [pc, #56]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005206:	f000 f821 	bl	800524c <HAL_RCC_GetSysClockFreq>
 800520a:	4602      	mov	r2, r0
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	490a      	ldr	r1, [pc, #40]	; (8005240 <HAL_RCC_ClockConfig+0x1c0>)
 8005218:	5ccb      	ldrb	r3, [r1, r3]
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	4a09      	ldr	r2, [pc, #36]	; (8005244 <HAL_RCC_ClockConfig+0x1c4>)
 8005220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <HAL_RCC_ClockConfig+0x1c8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fc fe0c 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40023c00 	.word	0x40023c00
 800523c:	40023800 	.word	0x40023800
 8005240:	0800ac70 	.word	0x0800ac70
 8005244:	20000000 	.word	0x20000000
 8005248:	20000014 	.word	0x20000014

0800524c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800524c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005250:	b090      	sub	sp, #64	; 0x40
 8005252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
 8005258:	2300      	movs	r3, #0
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800525c:	2300      	movs	r3, #0
 800525e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005264:	4b59      	ldr	r3, [pc, #356]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b08      	cmp	r3, #8
 800526e:	d00d      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x40>
 8005270:	2b08      	cmp	r3, #8
 8005272:	f200 80a1 	bhi.w	80053b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x34>
 800527a:	2b04      	cmp	r3, #4
 800527c:	d003      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x3a>
 800527e:	e09b      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005280:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005284:	e09b      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005286:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005288:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800528a:	e098      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800528c:	4b4f      	ldr	r3, [pc, #316]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005296:	4b4d      	ldr	r3, [pc, #308]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d028      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a2:	4b4a      	ldr	r3, [pc, #296]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	2200      	movs	r2, #0
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	627a      	str	r2, [r7, #36]	; 0x24
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052b4:	2100      	movs	r1, #0
 80052b6:	4b47      	ldr	r3, [pc, #284]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80052b8:	fb03 f201 	mul.w	r2, r3, r1
 80052bc:	2300      	movs	r3, #0
 80052be:	fb00 f303 	mul.w	r3, r0, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	4a43      	ldr	r2, [pc, #268]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80052c6:	fba0 1202 	umull	r1, r2, r0, r2
 80052ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052cc:	460a      	mov	r2, r1
 80052ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80052d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d2:	4413      	add	r3, r2
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	2200      	movs	r2, #0
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	61fa      	str	r2, [r7, #28]
 80052de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052e6:	f7fb fc79 	bl	8000bdc <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4613      	mov	r3, r2
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f2:	e053      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f4:	4b35      	ldr	r3, [pc, #212]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	099b      	lsrs	r3, r3, #6
 80052fa:	2200      	movs	r2, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	617a      	str	r2, [r7, #20]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005306:	f04f 0b00 	mov.w	fp, #0
 800530a:	4652      	mov	r2, sl
 800530c:	465b      	mov	r3, fp
 800530e:	f04f 0000 	mov.w	r0, #0
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	0159      	lsls	r1, r3, #5
 8005318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800531c:	0150      	lsls	r0, r2, #5
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	ebb2 080a 	subs.w	r8, r2, sl
 8005326:	eb63 090b 	sbc.w	r9, r3, fp
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005336:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800533a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800533e:	ebb2 0408 	subs.w	r4, r2, r8
 8005342:	eb63 0509 	sbc.w	r5, r3, r9
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	00eb      	lsls	r3, r5, #3
 8005350:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005354:	00e2      	lsls	r2, r4, #3
 8005356:	4614      	mov	r4, r2
 8005358:	461d      	mov	r5, r3
 800535a:	eb14 030a 	adds.w	r3, r4, sl
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	eb45 030b 	adc.w	r3, r5, fp
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005372:	4629      	mov	r1, r5
 8005374:	028b      	lsls	r3, r1, #10
 8005376:	4621      	mov	r1, r4
 8005378:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800537c:	4621      	mov	r1, r4
 800537e:	028a      	lsls	r2, r1, #10
 8005380:	4610      	mov	r0, r2
 8005382:	4619      	mov	r1, r3
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	2200      	movs	r2, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	60fa      	str	r2, [r7, #12]
 800538c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005390:	f7fb fc24 	bl	8000bdc <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	3301      	adds	r3, #1
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80053ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053b6:	e002      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80053ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3740      	adds	r7, #64	; 0x40
 80053c4:	46bd      	mov	sp, r7
 80053c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800
 80053d0:	00f42400 	.word	0x00f42400
 80053d4:	017d7840 	.word	0x017d7840

080053d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <HAL_RCC_GetHCLKFreq+0x14>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000000 	.word	0x20000000

080053f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053f4:	f7ff fff0 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 80053f8:	4602      	mov	r2, r0
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	0a9b      	lsrs	r3, r3, #10
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	4903      	ldr	r1, [pc, #12]	; (8005414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005406:	5ccb      	ldrb	r3, [r1, r3]
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40023800 	.word	0x40023800
 8005414:	0800ac80 	.word	0x0800ac80

08005418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800541c:	f7ff ffdc 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0b5b      	lsrs	r3, r3, #13
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4903      	ldr	r1, [pc, #12]	; (800543c <HAL_RCC_GetPCLK2Freq+0x24>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40023800 	.word	0x40023800
 800543c:	0800ac80 	.word	0x0800ac80

08005440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e03f      	b.n	80054d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb ff40 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f829 	bl	80054dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b0c0      	sub	sp, #256	; 0x100
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f8:	68d9      	ldr	r1, [r3, #12]
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	ea40 0301 	orr.w	r3, r0, r1
 8005504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	431a      	orrs	r2, r3
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	431a      	orrs	r2, r3
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005534:	f021 010c 	bic.w	r1, r1, #12
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005542:	430b      	orrs	r3, r1
 8005544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005556:	6999      	ldr	r1, [r3, #24]
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	ea40 0301 	orr.w	r3, r0, r1
 8005562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b8f      	ldr	r3, [pc, #572]	; (80057a8 <UART_SetConfig+0x2cc>)
 800556c:	429a      	cmp	r2, r3
 800556e:	d005      	beq.n	800557c <UART_SetConfig+0xa0>
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b8d      	ldr	r3, [pc, #564]	; (80057ac <UART_SetConfig+0x2d0>)
 8005578:	429a      	cmp	r2, r3
 800557a:	d104      	bne.n	8005586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800557c:	f7ff ff4c 	bl	8005418 <HAL_RCC_GetPCLK2Freq>
 8005580:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005584:	e003      	b.n	800558e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005586:	f7ff ff33 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 800558a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005598:	f040 810c 	bne.w	80057b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800559c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055ae:	4622      	mov	r2, r4
 80055b0:	462b      	mov	r3, r5
 80055b2:	1891      	adds	r1, r2, r2
 80055b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80055b6:	415b      	adcs	r3, r3
 80055b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055be:	4621      	mov	r1, r4
 80055c0:	eb12 0801 	adds.w	r8, r2, r1
 80055c4:	4629      	mov	r1, r5
 80055c6:	eb43 0901 	adc.w	r9, r3, r1
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055de:	4690      	mov	r8, r2
 80055e0:	4699      	mov	r9, r3
 80055e2:	4623      	mov	r3, r4
 80055e4:	eb18 0303 	adds.w	r3, r8, r3
 80055e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055ec:	462b      	mov	r3, r5
 80055ee:	eb49 0303 	adc.w	r3, r9, r3
 80055f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005602:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800560a:	460b      	mov	r3, r1
 800560c:	18db      	adds	r3, r3, r3
 800560e:	653b      	str	r3, [r7, #80]	; 0x50
 8005610:	4613      	mov	r3, r2
 8005612:	eb42 0303 	adc.w	r3, r2, r3
 8005616:	657b      	str	r3, [r7, #84]	; 0x54
 8005618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800561c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005620:	f7fb fadc 	bl	8000bdc <__aeabi_uldivmod>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4b61      	ldr	r3, [pc, #388]	; (80057b0 <UART_SetConfig+0x2d4>)
 800562a:	fba3 2302 	umull	r2, r3, r3, r2
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	011c      	lsls	r4, r3, #4
 8005632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800563c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	1891      	adds	r1, r2, r2
 800564a:	64b9      	str	r1, [r7, #72]	; 0x48
 800564c:	415b      	adcs	r3, r3
 800564e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005654:	4641      	mov	r1, r8
 8005656:	eb12 0a01 	adds.w	sl, r2, r1
 800565a:	4649      	mov	r1, r9
 800565c:	eb43 0b01 	adc.w	fp, r3, r1
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800566c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005674:	4692      	mov	sl, r2
 8005676:	469b      	mov	fp, r3
 8005678:	4643      	mov	r3, r8
 800567a:	eb1a 0303 	adds.w	r3, sl, r3
 800567e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005682:	464b      	mov	r3, r9
 8005684:	eb4b 0303 	adc.w	r3, fp, r3
 8005688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005698:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800569c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056a0:	460b      	mov	r3, r1
 80056a2:	18db      	adds	r3, r3, r3
 80056a4:	643b      	str	r3, [r7, #64]	; 0x40
 80056a6:	4613      	mov	r3, r2
 80056a8:	eb42 0303 	adc.w	r3, r2, r3
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
 80056ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056b6:	f7fb fa91 	bl	8000bdc <__aeabi_uldivmod>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4611      	mov	r1, r2
 80056c0:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <UART_SetConfig+0x2d4>)
 80056c2:	fba3 2301 	umull	r2, r3, r3, r1
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	2264      	movs	r2, #100	; 0x64
 80056ca:	fb02 f303 	mul.w	r3, r2, r3
 80056ce:	1acb      	subs	r3, r1, r3
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056d6:	4b36      	ldr	r3, [pc, #216]	; (80057b0 <UART_SetConfig+0x2d4>)
 80056d8:	fba3 2302 	umull	r2, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056e4:	441c      	add	r4, r3
 80056e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005700:	415b      	adcs	r3, r3
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005708:	4641      	mov	r1, r8
 800570a:	1851      	adds	r1, r2, r1
 800570c:	6339      	str	r1, [r7, #48]	; 0x30
 800570e:	4649      	mov	r1, r9
 8005710:	414b      	adcs	r3, r1
 8005712:	637b      	str	r3, [r7, #52]	; 0x34
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005720:	4659      	mov	r1, fp
 8005722:	00cb      	lsls	r3, r1, #3
 8005724:	4651      	mov	r1, sl
 8005726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800572a:	4651      	mov	r1, sl
 800572c:	00ca      	lsls	r2, r1, #3
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	4603      	mov	r3, r0
 8005734:	4642      	mov	r2, r8
 8005736:	189b      	adds	r3, r3, r2
 8005738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800573c:	464b      	mov	r3, r9
 800573e:	460a      	mov	r2, r1
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005754:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800575c:	460b      	mov	r3, r1
 800575e:	18db      	adds	r3, r3, r3
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28
 8005762:	4613      	mov	r3, r2
 8005764:	eb42 0303 	adc.w	r3, r2, r3
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800576e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005772:	f7fb fa33 	bl	8000bdc <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <UART_SetConfig+0x2d4>)
 800577c:	fba3 1302 	umull	r1, r3, r3, r2
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	2164      	movs	r1, #100	; 0x64
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	3332      	adds	r3, #50	; 0x32
 800578e:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <UART_SetConfig+0x2d4>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	f003 0207 	and.w	r2, r3, #7
 800579a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4422      	add	r2, r4
 80057a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057a4:	e106      	b.n	80059b4 <UART_SetConfig+0x4d8>
 80057a6:	bf00      	nop
 80057a8:	40011000 	.word	0x40011000
 80057ac:	40011400 	.word	0x40011400
 80057b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057c6:	4642      	mov	r2, r8
 80057c8:	464b      	mov	r3, r9
 80057ca:	1891      	adds	r1, r2, r2
 80057cc:	6239      	str	r1, [r7, #32]
 80057ce:	415b      	adcs	r3, r3
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
 80057d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057d6:	4641      	mov	r1, r8
 80057d8:	1854      	adds	r4, r2, r1
 80057da:	4649      	mov	r1, r9
 80057dc:	eb43 0501 	adc.w	r5, r3, r1
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	00eb      	lsls	r3, r5, #3
 80057ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ee:	00e2      	lsls	r2, r4, #3
 80057f0:	4614      	mov	r4, r2
 80057f2:	461d      	mov	r5, r3
 80057f4:	4643      	mov	r3, r8
 80057f6:	18e3      	adds	r3, r4, r3
 80057f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057fc:	464b      	mov	r3, r9
 80057fe:	eb45 0303 	adc.w	r3, r5, r3
 8005802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005822:	4629      	mov	r1, r5
 8005824:	008b      	lsls	r3, r1, #2
 8005826:	4621      	mov	r1, r4
 8005828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800582c:	4621      	mov	r1, r4
 800582e:	008a      	lsls	r2, r1, #2
 8005830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005834:	f7fb f9d2 	bl	8000bdc <__aeabi_uldivmod>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4b60      	ldr	r3, [pc, #384]	; (80059c0 <UART_SetConfig+0x4e4>)
 800583e:	fba3 2302 	umull	r2, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	011c      	lsls	r4, r3, #4
 8005846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800584a:	2200      	movs	r2, #0
 800584c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	1891      	adds	r1, r2, r2
 800585e:	61b9      	str	r1, [r7, #24]
 8005860:	415b      	adcs	r3, r3
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005868:	4641      	mov	r1, r8
 800586a:	1851      	adds	r1, r2, r1
 800586c:	6139      	str	r1, [r7, #16]
 800586e:	4649      	mov	r1, r9
 8005870:	414b      	adcs	r3, r1
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005880:	4659      	mov	r1, fp
 8005882:	00cb      	lsls	r3, r1, #3
 8005884:	4651      	mov	r1, sl
 8005886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588a:	4651      	mov	r1, sl
 800588c:	00ca      	lsls	r2, r1, #3
 800588e:	4610      	mov	r0, r2
 8005890:	4619      	mov	r1, r3
 8005892:	4603      	mov	r3, r0
 8005894:	4642      	mov	r2, r8
 8005896:	189b      	adds	r3, r3, r2
 8005898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800589c:	464b      	mov	r3, r9
 800589e:	460a      	mov	r2, r1
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80058b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058c0:	4649      	mov	r1, r9
 80058c2:	008b      	lsls	r3, r1, #2
 80058c4:	4641      	mov	r1, r8
 80058c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ca:	4641      	mov	r1, r8
 80058cc:	008a      	lsls	r2, r1, #2
 80058ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058d2:	f7fb f983 	bl	8000bdc <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	4b38      	ldr	r3, [pc, #224]	; (80059c0 <UART_SetConfig+0x4e4>)
 80058de:	fba3 2301 	umull	r2, r3, r3, r1
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	2264      	movs	r2, #100	; 0x64
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	1acb      	subs	r3, r1, r3
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	3332      	adds	r3, #50	; 0x32
 80058f0:	4a33      	ldr	r2, [pc, #204]	; (80059c0 <UART_SetConfig+0x4e4>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058fc:	441c      	add	r4, r3
 80058fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005902:	2200      	movs	r2, #0
 8005904:	673b      	str	r3, [r7, #112]	; 0x70
 8005906:	677a      	str	r2, [r7, #116]	; 0x74
 8005908:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800590c:	4642      	mov	r2, r8
 800590e:	464b      	mov	r3, r9
 8005910:	1891      	adds	r1, r2, r2
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	415b      	adcs	r3, r3
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800591c:	4641      	mov	r1, r8
 800591e:	1851      	adds	r1, r2, r1
 8005920:	6039      	str	r1, [r7, #0]
 8005922:	4649      	mov	r1, r9
 8005924:	414b      	adcs	r3, r1
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005934:	4659      	mov	r1, fp
 8005936:	00cb      	lsls	r3, r1, #3
 8005938:	4651      	mov	r1, sl
 800593a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800593e:	4651      	mov	r1, sl
 8005940:	00ca      	lsls	r2, r1, #3
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	4603      	mov	r3, r0
 8005948:	4642      	mov	r2, r8
 800594a:	189b      	adds	r3, r3, r2
 800594c:	66bb      	str	r3, [r7, #104]	; 0x68
 800594e:	464b      	mov	r3, r9
 8005950:	460a      	mov	r2, r1
 8005952:	eb42 0303 	adc.w	r3, r2, r3
 8005956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	663b      	str	r3, [r7, #96]	; 0x60
 8005962:	667a      	str	r2, [r7, #100]	; 0x64
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005970:	4649      	mov	r1, r9
 8005972:	008b      	lsls	r3, r1, #2
 8005974:	4641      	mov	r1, r8
 8005976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800597a:	4641      	mov	r1, r8
 800597c:	008a      	lsls	r2, r1, #2
 800597e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005982:	f7fb f92b 	bl	8000bdc <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <UART_SetConfig+0x4e4>)
 800598c:	fba3 1302 	umull	r1, r3, r3, r2
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	2164      	movs	r1, #100	; 0x64
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	3332      	adds	r3, #50	; 0x32
 800599e:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <UART_SetConfig+0x4e4>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	f003 020f 	and.w	r2, r3, #15
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4422      	add	r2, r4
 80059b2:	609a      	str	r2, [r3, #8]
}
 80059b4:	bf00      	nop
 80059b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059ba:	46bd      	mov	sp, r7
 80059bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c0:	51eb851f 	.word	0x51eb851f

080059c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059c4:	b084      	sub	sp, #16
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	f107 001c 	add.w	r0, r7, #28
 80059d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d122      	bne.n	8005a22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d105      	bne.n	8005a16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f001 fbee 	bl	80071f8 <USB_CoreReset>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	e01a      	b.n	8005a58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fbe2 	bl	80071f8 <USB_CoreReset>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
 8005a4a:	e005      	b.n	8005a58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10b      	bne.n	8005a76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f043 0206 	orr.w	r2, r3, #6
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f043 0220 	orr.w	r2, r3, #32
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a82:	b004      	add	sp, #16
 8005a84:	4770      	bx	lr
	...

08005a88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	4613      	mov	r3, r2
 8005a94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d165      	bne.n	8005b68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4a41      	ldr	r2, [pc, #260]	; (8005ba4 <USB_SetTurnaroundTime+0x11c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d906      	bls.n	8005ab2 <USB_SetTurnaroundTime+0x2a>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4a40      	ldr	r2, [pc, #256]	; (8005ba8 <USB_SetTurnaroundTime+0x120>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d202      	bcs.n	8005ab2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005aac:	230f      	movs	r3, #15
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e062      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4a3c      	ldr	r2, [pc, #240]	; (8005ba8 <USB_SetTurnaroundTime+0x120>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d306      	bcc.n	8005ac8 <USB_SetTurnaroundTime+0x40>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4a3b      	ldr	r2, [pc, #236]	; (8005bac <USB_SetTurnaroundTime+0x124>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d202      	bcs.n	8005ac8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ac2:	230e      	movs	r3, #14
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	e057      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4a38      	ldr	r2, [pc, #224]	; (8005bac <USB_SetTurnaroundTime+0x124>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d306      	bcc.n	8005ade <USB_SetTurnaroundTime+0x56>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <USB_SetTurnaroundTime+0x128>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d202      	bcs.n	8005ade <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ad8:	230d      	movs	r3, #13
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e04c      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4a33      	ldr	r2, [pc, #204]	; (8005bb0 <USB_SetTurnaroundTime+0x128>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d306      	bcc.n	8005af4 <USB_SetTurnaroundTime+0x6c>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4a32      	ldr	r2, [pc, #200]	; (8005bb4 <USB_SetTurnaroundTime+0x12c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d802      	bhi.n	8005af4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005aee:	230c      	movs	r3, #12
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e041      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4a2f      	ldr	r2, [pc, #188]	; (8005bb4 <USB_SetTurnaroundTime+0x12c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d906      	bls.n	8005b0a <USB_SetTurnaroundTime+0x82>
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4a2e      	ldr	r2, [pc, #184]	; (8005bb8 <USB_SetTurnaroundTime+0x130>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d802      	bhi.n	8005b0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b04:	230b      	movs	r3, #11
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	e036      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4a2a      	ldr	r2, [pc, #168]	; (8005bb8 <USB_SetTurnaroundTime+0x130>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d906      	bls.n	8005b20 <USB_SetTurnaroundTime+0x98>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4a29      	ldr	r2, [pc, #164]	; (8005bbc <USB_SetTurnaroundTime+0x134>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d802      	bhi.n	8005b20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b1a:	230a      	movs	r3, #10
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	e02b      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <USB_SetTurnaroundTime+0x134>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d906      	bls.n	8005b36 <USB_SetTurnaroundTime+0xae>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4a25      	ldr	r2, [pc, #148]	; (8005bc0 <USB_SetTurnaroundTime+0x138>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d202      	bcs.n	8005b36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b30:	2309      	movs	r3, #9
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e020      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <USB_SetTurnaroundTime+0x138>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d306      	bcc.n	8005b4c <USB_SetTurnaroundTime+0xc4>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4a20      	ldr	r2, [pc, #128]	; (8005bc4 <USB_SetTurnaroundTime+0x13c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d802      	bhi.n	8005b4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b46:	2308      	movs	r3, #8
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e015      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4a1d      	ldr	r2, [pc, #116]	; (8005bc4 <USB_SetTurnaroundTime+0x13c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d906      	bls.n	8005b62 <USB_SetTurnaroundTime+0xda>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <USB_SetTurnaroundTime+0x140>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d202      	bcs.n	8005b62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b5c:	2307      	movs	r3, #7
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e00a      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b62:	2306      	movs	r3, #6
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e007      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b6e:	2309      	movs	r3, #9
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	e001      	b.n	8005b78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b74:	2309      	movs	r3, #9
 8005b76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	029b      	lsls	r3, r3, #10
 8005b8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	00d8acbf 	.word	0x00d8acbf
 8005ba8:	00e4e1c0 	.word	0x00e4e1c0
 8005bac:	00f42400 	.word	0x00f42400
 8005bb0:	01067380 	.word	0x01067380
 8005bb4:	011a499f 	.word	0x011a499f
 8005bb8:	01312cff 	.word	0x01312cff
 8005bbc:	014ca43f 	.word	0x014ca43f
 8005bc0:	016e3600 	.word	0x016e3600
 8005bc4:	01a6ab1f 	.word	0x01a6ab1f
 8005bc8:	01e84800 	.word	0x01e84800

08005bcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f043 0201 	orr.w	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f023 0201 	bic.w	r2, r3, #1
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d115      	bne.n	8005c5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c3e:	2001      	movs	r0, #1
 8005c40:	f7fc f950 	bl	8001ee4 <HAL_Delay>
      ms++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 fa45 	bl	80070da <USB_GetMode>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d01e      	beq.n	8005c94 <USB_SetCurrentMode+0x84>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b31      	cmp	r3, #49	; 0x31
 8005c5a:	d9f0      	bls.n	8005c3e <USB_SetCurrentMode+0x2e>
 8005c5c:	e01a      	b.n	8005c94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d115      	bne.n	8005c90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c70:	2001      	movs	r0, #1
 8005c72:	f7fc f937 	bl	8001ee4 <HAL_Delay>
      ms++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fa2c 	bl	80070da <USB_GetMode>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <USB_SetCurrentMode+0x84>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b31      	cmp	r3, #49	; 0x31
 8005c8c:	d9f0      	bls.n	8005c70 <USB_SetCurrentMode+0x60>
 8005c8e:	e001      	b.n	8005c94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e005      	b.n	8005ca0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b32      	cmp	r3, #50	; 0x32
 8005c98:	d101      	bne.n	8005c9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ca8:	b084      	sub	sp, #16
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	e009      	b.n	8005cdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3340      	adds	r3, #64	; 0x40
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b0e      	cmp	r3, #14
 8005ce0:	d9f2      	bls.n	8005cc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d11c      	bne.n	8005d22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf6:	f043 0302 	orr.w	r3, r3, #2
 8005cfa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
 8005d20:	e00b      	b.n	8005d3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d40:	461a      	mov	r2, r3
 8005d42:	2300      	movs	r3, #0
 8005d44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	461a      	mov	r2, r3
 8005d56:	680b      	ldr	r3, [r1, #0]
 8005d58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10c      	bne.n	8005d7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d66:	2100      	movs	r1, #0
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f965 	bl	8006038 <USB_SetDevSpeed>
 8005d6e:	e008      	b.n	8005d82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d70:	2101      	movs	r1, #1
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f960 	bl	8006038 <USB_SetDevSpeed>
 8005d78:	e003      	b.n	8005d82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d7a:	2103      	movs	r1, #3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f95b 	bl	8006038 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d82:	2110      	movs	r1, #16
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8f3 	bl	8005f70 <USB_FlushTxFifo>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f91f 	bl	8005fd8 <USB_FlushRxFifo>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	461a      	mov	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e043      	b.n	8005e56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de4:	d118      	bne.n	8005e18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	e013      	b.n	8005e2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e008      	b.n	8005e2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	461a      	mov	r2, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e36:	461a      	mov	r2, r3
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	3301      	adds	r3, #1
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d3b7      	bcc.n	8005dce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e5e:	2300      	movs	r3, #0
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	e043      	b.n	8005eec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e7a:	d118      	bne.n	8005eae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e013      	b.n	8005ec0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	e008      	b.n	8005ec0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	461a      	mov	r2, r3
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2300      	movs	r3, #0
 8005ed0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ee4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d3b7      	bcc.n	8005e64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f043 0210 	orr.w	r2, r3, #16
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <USB_DevInit+0x2c4>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f043 0208 	orr.w	r2, r3, #8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d107      	bne.n	8005f5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f54:	f043 0304 	orr.w	r3, r3, #4
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f68:	b004      	add	sp, #16
 8005f6a:	4770      	bx	lr
 8005f6c:	803c3800 	.word	0x803c3800

08005f70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3301      	adds	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <USB_FlushTxFifo+0x64>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d901      	bls.n	8005f90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e01b      	b.n	8005fc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	daf2      	bge.n	8005f7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	019b      	lsls	r3, r3, #6
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a08      	ldr	r2, [pc, #32]	; (8005fd4 <USB_FlushTxFifo+0x64>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e006      	b.n	8005fc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d0f0      	beq.n	8005fa8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	00030d40 	.word	0x00030d40

08005fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4a11      	ldr	r2, [pc, #68]	; (8006034 <USB_FlushRxFifo+0x5c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d901      	bls.n	8005ff6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e018      	b.n	8006028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	daf2      	bge.n	8005fe4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2210      	movs	r2, #16
 8006006:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4a08      	ldr	r2, [pc, #32]	; (8006034 <USB_FlushRxFifo+0x5c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d901      	bls.n	800601a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e006      	b.n	8006028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0310 	and.w	r3, r3, #16
 8006022:	2b10      	cmp	r3, #16
 8006024:	d0f0      	beq.n	8006008 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	00030d40 	.word	0x00030d40

08006038 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006058:	4313      	orrs	r3, r2
 800605a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800606a:	b480      	push	{r7}
 800606c:	b087      	sub	sp, #28
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 0306 	and.w	r3, r3, #6
 8006082:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800608a:	2300      	movs	r3, #0
 800608c:	75fb      	strb	r3, [r7, #23]
 800608e:	e00a      	b.n	80060a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d002      	beq.n	800609c <USB_GetDevSpeed+0x32>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b06      	cmp	r3, #6
 800609a:	d102      	bne.n	80060a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800609c:	2302      	movs	r3, #2
 800609e:	75fb      	strb	r3, [r7, #23]
 80060a0:	e001      	b.n	80060a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80060a2:	230f      	movs	r3, #15
 80060a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d13a      	bne.n	8006146 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	2101      	movs	r1, #1
 80060e2:	fa01 f303 	lsl.w	r3, r1, r3
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	68f9      	ldr	r1, [r7, #12]
 80060ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d155      	bne.n	80061b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	791b      	ldrb	r3, [r3, #4]
 8006122:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006124:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	059b      	lsls	r3, r3, #22
 800612a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800612c:	4313      	orrs	r3, r2
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e036      	b.n	80061b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	2101      	movs	r1, #1
 8006158:	fa01 f303 	lsl.w	r3, r1, r3
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006164:	4313      	orrs	r3, r2
 8006166:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d11a      	bne.n	80061b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	791b      	ldrb	r3, [r3, #4]
 8006198:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800619a:	430b      	orrs	r3, r1
 800619c:	4313      	orrs	r3, r2
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d161      	bne.n	80062a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f6:	d11f      	bne.n	8006238 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006212:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006216:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006236:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	2101      	movs	r1, #1
 800624a:	fa01 f303 	lsl.w	r3, r1, r3
 800624e:	b29b      	uxth	r3, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	68f9      	ldr	r1, [r7, #12]
 8006254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006258:	4013      	ands	r3, r2
 800625a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	2101      	movs	r1, #1
 800626e:	fa01 f303 	lsl.w	r3, r1, r3
 8006272:	b29b      	uxth	r3, r3
 8006274:	43db      	mvns	r3, r3
 8006276:	68f9      	ldr	r1, [r7, #12]
 8006278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800627c:	4013      	ands	r3, r2
 800627e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	0159      	lsls	r1, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	440b      	add	r3, r1
 8006296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629a:	4619      	mov	r1, r3
 800629c:	4b35      	ldr	r3, [pc, #212]	; (8006374 <USB_DeactivateEndpoint+0x1b0>)
 800629e:	4013      	ands	r3, r2
 80062a0:	600b      	str	r3, [r1, #0]
 80062a2:	e060      	b.n	8006366 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ba:	d11f      	bne.n	80062fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	2101      	movs	r1, #1
 800630e:	fa01 f303 	lsl.w	r3, r1, r3
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	43db      	mvns	r3, r3
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800631c:	4013      	ands	r3, r2
 800631e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	2101      	movs	r1, #1
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	041b      	lsls	r3, r3, #16
 8006338:	43db      	mvns	r3, r3
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006340:	4013      	ands	r3, r2
 8006342:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	0159      	lsls	r1, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	440b      	add	r3, r1
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	4619      	mov	r1, r3
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <USB_DeactivateEndpoint+0x1b4>)
 8006362:	4013      	ands	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	ec337800 	.word	0xec337800
 8006378:	eff37800 	.word	0xeff37800

0800637c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af02      	add	r7, sp, #8
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b01      	cmp	r3, #1
 800639a:	f040 815c 	bne.w	8006656 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d132      	bne.n	800640c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006404:	0cdb      	lsrs	r3, r3, #19
 8006406:	04db      	lsls	r3, r3, #19
 8006408:	6113      	str	r3, [r2, #16]
 800640a:	e074      	b.n	80064f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	440a      	add	r2, r1
 8006422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006426:	0cdb      	lsrs	r3, r3, #19
 8006428:	04db      	lsls	r3, r3, #19
 800642a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006446:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800644a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800644e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6999      	ldr	r1, [r3, #24]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	440b      	add	r3, r1
 8006468:	1e59      	subs	r1, r3, #1
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006472:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006474:	4b9d      	ldr	r3, [pc, #628]	; (80066ec <USB_EPStartXfer+0x370>)
 8006476:	400b      	ands	r3, r1
 8006478:	69b9      	ldr	r1, [r7, #24]
 800647a:	0148      	lsls	r0, r1, #5
 800647c:	69f9      	ldr	r1, [r7, #28]
 800647e:	4401      	add	r1, r0
 8006480:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006484:	4313      	orrs	r3, r2
 8006486:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800649e:	69b9      	ldr	r1, [r7, #24]
 80064a0:	0148      	lsls	r0, r1, #5
 80064a2:	69f9      	ldr	r1, [r7, #28]
 80064a4:	4401      	add	r1, r0
 80064a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064aa:	4313      	orrs	r3, r2
 80064ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	791b      	ldrb	r3, [r3, #4]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d11f      	bne.n	80064f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80064d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d14b      	bne.n	8006594 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006510:	461a      	mov	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	791b      	ldrb	r3, [r3, #4]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d128      	bne.n	8006572 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652c:	2b00      	cmp	r3, #0
 800652e:	d110      	bne.n	8006552 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	440a      	add	r2, r1
 8006546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	e00f      	b.n	8006572 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006570:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e133      	b.n	80067fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	791b      	ldrb	r3, [r3, #4]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d015      	beq.n	80065e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 811b 	beq.w	80067fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	2101      	movs	r1, #1
 80065d8:	fa01 f303 	lsl.w	r3, r1, r3
 80065dc:	69f9      	ldr	r1, [r7, #28]
 80065de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065e2:	4313      	orrs	r3, r2
 80065e4:	634b      	str	r3, [r1, #52]	; 0x34
 80065e6:	e109      	b.n	80067fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d110      	bne.n	800661a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	440a      	add	r2, r1
 800660e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006612:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e00f      	b.n	800663a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006638:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6919      	ldr	r1, [r3, #16]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	b298      	uxth	r0, r3
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	4603      	mov	r3, r0
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fade 	bl	8006c10 <USB_WritePacket>
 8006654:	e0d2      	b.n	80067fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	69fa      	ldr	r2, [r7, #28]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006670:	0cdb      	lsrs	r3, r3, #19
 8006672:	04db      	lsls	r3, r3, #19
 8006674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006694:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006698:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d126      	bne.n	80066f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066b8:	69b9      	ldr	r1, [r7, #24]
 80066ba:	0148      	lsls	r0, r1, #5
 80066bc:	69f9      	ldr	r1, [r7, #28]
 80066be:	4401      	add	r1, r0
 80066c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066c4:	4313      	orrs	r3, r2
 80066c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066e6:	6113      	str	r3, [r2, #16]
 80066e8:	e03a      	b.n	8006760 <USB_EPStartXfer+0x3e4>
 80066ea:	bf00      	nop
 80066ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4413      	add	r3, r2
 80066fa:	1e5a      	subs	r2, r3, #1
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	8afa      	ldrh	r2, [r7, #22]
 800670c:	fb03 f202 	mul.w	r2, r3, r2
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	8afb      	ldrh	r3, [r7, #22]
 8006724:	04d9      	lsls	r1, r3, #19
 8006726:	4b38      	ldr	r3, [pc, #224]	; (8006808 <USB_EPStartXfer+0x48c>)
 8006728:	400b      	ands	r3, r1
 800672a:	69b9      	ldr	r1, [r7, #24]
 800672c:	0148      	lsls	r0, r1, #5
 800672e:	69f9      	ldr	r1, [r7, #28]
 8006730:	4401      	add	r1, r0
 8006732:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006736:	4313      	orrs	r3, r2
 8006738:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	0148      	lsls	r0, r1, #5
 8006754:	69f9      	ldr	r1, [r7, #28]
 8006756:	4401      	add	r1, r0
 8006758:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800675c:	4313      	orrs	r3, r2
 800675e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d10d      	bne.n	8006782 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	6919      	ldr	r1, [r3, #16]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	460a      	mov	r2, r1
 8006780:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	791b      	ldrb	r3, [r3, #4]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d128      	bne.n	80067dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006796:	2b00      	cmp	r3, #0
 8006798:	d110      	bne.n	80067bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	0151      	lsls	r1, r2, #5
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	440a      	add	r2, r1
 80067b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	e00f      	b.n	80067dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	1ff80000 	.word	0x1ff80000

0800680c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b01      	cmp	r3, #1
 800682a:	f040 80ce 	bne.w	80069ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d132      	bne.n	800689c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006894:	0cdb      	lsrs	r3, r3, #19
 8006896:	04db      	lsls	r3, r3, #19
 8006898:	6113      	str	r3, [r2, #16]
 800689a:	e04e      	b.n	800693a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b6:	0cdb      	lsrs	r3, r3, #19
 80068b8:	04db      	lsls	r3, r3, #19
 80068ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	699a      	ldr	r2, [r3, #24]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d903      	bls.n	80068f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006912:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800692a:	6939      	ldr	r1, [r7, #16]
 800692c:	0148      	lsls	r0, r1, #5
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	4401      	add	r1, r0
 8006932:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006936:	4313      	orrs	r3, r2
 8006938:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d11e      	bne.n	800697e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d009      	beq.n	800695c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	461a      	mov	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	e097      	b.n	8006aae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006998:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800699c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8083 	beq.w	8006aae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	2101      	movs	r1, #1
 80069ba:	fa01 f303 	lsl.w	r3, r1, r3
 80069be:	6979      	ldr	r1, [r7, #20]
 80069c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c4:	4313      	orrs	r3, r2
 80069c6:	634b      	str	r3, [r1, #52]	; 0x34
 80069c8:	e071      	b.n	8006aae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e4:	0cdb      	lsrs	r3, r3, #19
 80069e6:	04db      	lsls	r3, r3, #19
 80069e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a5c:	6939      	ldr	r1, [r7, #16]
 8006a5e:	0148      	lsls	r0, r1, #5
 8006a60:	6979      	ldr	r1, [r7, #20]
 8006a62:	4401      	add	r1, r0
 8006a64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d10d      	bne.n	8006a8e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6919      	ldr	r1, [r3, #16]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	460a      	mov	r2, r1
 8006a8c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006aac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d14a      	bne.n	8006b70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af2:	f040 8086 	bne.w	8006c02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	7812      	ldrb	r2, [r2, #0]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3301      	adds	r3, #1
 8006b42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d902      	bls.n	8006b54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]
          break;
 8006b52:	e056      	b.n	8006c02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b6c:	d0e7      	beq.n	8006b3e <USB_EPStopXfer+0x82>
 8006b6e:	e048      	b.n	8006c02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b88:	d13b      	bne.n	8006c02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	7812      	ldrb	r2, [r2, #0]
 8006b9e:	0151      	lsls	r1, r2, #5
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	440a      	add	r2, r1
 8006ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	7812      	ldrb	r2, [r2, #0]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f242 7210 	movw	r2, #10000	; 0x2710
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d902      	bls.n	8006be8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
          break;
 8006be6:	e00c      	b.n	8006c02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c00:	d0e7      	beq.n	8006bd2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b089      	sub	sp, #36	; 0x24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	460b      	mov	r3, r1
 8006c20:	71fb      	strb	r3, [r7, #7]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d123      	bne.n	8006c7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c36:	88bb      	ldrh	r3, [r7, #4]
 8006c38:	3303      	adds	r3, #3
 8006c3a:	089b      	lsrs	r3, r3, #2
 8006c3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	e018      	b.n	8006c76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c44:	79fb      	ldrb	r3, [r7, #7]
 8006c46:	031a      	lsls	r2, r3, #12
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c50:	461a      	mov	r2, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	3301      	adds	r3, #1
 8006c62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	3301      	adds	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	3301      	adds	r3, #1
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d3e2      	bcc.n	8006c44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3724      	adds	r7, #36	; 0x24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b08b      	sub	sp, #44	; 0x2c
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	089b      	lsrs	r3, r3, #2
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	623b      	str	r3, [r7, #32]
 8006cb6:	e014      	b.n	8006ce2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	3301      	adds	r3, #1
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	3301      	adds	r3, #1
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d3e6      	bcc.n	8006cb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006cea:	8bfb      	ldrh	r3, [r7, #30]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01e      	beq.n	8006d2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f107 0310 	add.w	r3, r7, #16
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	701a      	strb	r2, [r3, #0]
      i++;
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	3301      	adds	r3, #1
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d22:	8bfb      	ldrh	r3, [r7, #30]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d28:	8bfb      	ldrh	r3, [r7, #30]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1ea      	bne.n	8006d04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	372c      	adds	r7, #44	; 0x2c
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	785b      	ldrb	r3, [r3, #1]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d12c      	bne.n	8006db2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	db12      	blt.n	8006d90 <USB_EPSetStall+0x54>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00f      	beq.n	8006d90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006daa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	e02b      	b.n	8006e0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	db12      	blt.n	8006dea <USB_EPSetStall+0xae>
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00f      	beq.n	8006dea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	0151      	lsls	r1, r2, #5
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	440a      	add	r2, r1
 8006de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006de8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d128      	bne.n	8006e86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	0151      	lsls	r1, r2, #5
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	440a      	add	r2, r1
 8006e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	791b      	ldrb	r3, [r3, #4]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d003      	beq.n	8006e64 <USB_EPClearStall+0x4c>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	791b      	ldrb	r3, [r3, #4]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d138      	bne.n	8006ed6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e027      	b.n	8006ed6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ea4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d003      	beq.n	8006eb6 <USB_EPClearStall+0x9e>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	791b      	ldrb	r3, [r3, #4]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d10f      	bne.n	8006ed6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f18:	68f9      	ldr	r1, [r7, #12]
 8006f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f5e:	f023 0302 	bic.w	r3, r3, #2
 8006f62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f8c:	f023 0303 	bic.w	r3, r3, #3
 8006f90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa0:	f043 0302 	orr.w	r3, r3, #2
 8006fa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	0c1b      	lsrs	r3, r3, #16
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	4013      	ands	r3, r2
 8007030:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	b29b      	uxth	r3, r3
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	460b      	mov	r3, r1
 800704c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4013      	ands	r3, r2
 800706e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007070:	68bb      	ldr	r3, [r7, #8]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800707e:	b480      	push	{r7}
 8007080:	b087      	sub	sp, #28
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	460b      	mov	r3, r1
 8007088:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80070a2:	78fb      	ldrb	r3, [r7, #3]
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	fa22 f303 	lsr.w	r3, r2, r3
 80070ae:	01db      	lsls	r3, r3, #7
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4013      	ands	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070cc:	68bb      	ldr	r3, [r7, #8]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0301 	and.w	r3, r3, #1
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007110:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007114:	f023 0307 	bic.w	r3, r3, #7
 8007118:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800712c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	460b      	mov	r3, r1
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	333c      	adds	r3, #60	; 0x3c
 8007152:	3304      	adds	r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4a26      	ldr	r2, [pc, #152]	; (80071f4 <USB_EP0_OutStart+0xb8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d90a      	bls.n	8007176 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800716c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007170:	d101      	bne.n	8007176 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	e037      	b.n	80071e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717c:	461a      	mov	r2, r3
 800717e:	2300      	movs	r3, #0
 8007180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007190:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a4:	f043 0318 	orr.w	r3, r3, #24
 80071a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80071bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80071be:	7afb      	ldrb	r3, [r7, #11]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10f      	bne.n	80071e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80071e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	4f54300a 	.word	0x4f54300a

080071f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a13      	ldr	r2, [pc, #76]	; (800725c <USB_CoreReset+0x64>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d901      	bls.n	8007216 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e01b      	b.n	800724e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	daf2      	bge.n	8007204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f043 0201 	orr.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3301      	adds	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a09      	ldr	r2, [pc, #36]	; (800725c <USB_CoreReset+0x64>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d901      	bls.n	8007240 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e006      	b.n	800724e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	d0f0      	beq.n	800722e <USB_CoreReset+0x36>

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	00030d40 	.word	0x00030d40

08007260 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800726c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007270:	f002 fc8a 	bl	8009b88 <USBD_static_malloc>
 8007274:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d109      	bne.n	8007290 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	32b0      	adds	r2, #176	; 0xb0
 8007286:	2100      	movs	r1, #0
 8007288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800728c:	2302      	movs	r3, #2
 800728e:	e0d4      	b.n	800743a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007290:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007294:	2100      	movs	r1, #0
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f002 fd96 	bl	8009dc8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	32b0      	adds	r2, #176	; 0xb0
 80072a6:	68f9      	ldr	r1, [r7, #12]
 80072a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	32b0      	adds	r2, #176	; 0xb0
 80072b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	7c1b      	ldrb	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d138      	bne.n	800733a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072c8:	4b5e      	ldr	r3, [pc, #376]	; (8007444 <USBD_CDC_Init+0x1e4>)
 80072ca:	7819      	ldrb	r1, [r3, #0]
 80072cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072d0:	2202      	movs	r2, #2
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f002 fb35 	bl	8009942 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072d8:	4b5a      	ldr	r3, [pc, #360]	; (8007444 <USBD_CDC_Init+0x1e4>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 020f 	and.w	r2, r3, #15
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	3324      	adds	r3, #36	; 0x24
 80072ee:	2201      	movs	r2, #1
 80072f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072f2:	4b55      	ldr	r3, [pc, #340]	; (8007448 <USBD_CDC_Init+0x1e8>)
 80072f4:	7819      	ldrb	r1, [r3, #0]
 80072f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072fa:	2202      	movs	r2, #2
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f002 fb20 	bl	8009942 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007302:	4b51      	ldr	r3, [pc, #324]	; (8007448 <USBD_CDC_Init+0x1e8>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	f003 020f 	and.w	r2, r3, #15
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800731a:	2201      	movs	r2, #1
 800731c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800731e:	4b4b      	ldr	r3, [pc, #300]	; (800744c <USBD_CDC_Init+0x1ec>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	f003 020f 	and.w	r2, r3, #15
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	3326      	adds	r3, #38	; 0x26
 8007334:	2210      	movs	r2, #16
 8007336:	801a      	strh	r2, [r3, #0]
 8007338:	e035      	b.n	80073a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800733a:	4b42      	ldr	r3, [pc, #264]	; (8007444 <USBD_CDC_Init+0x1e4>)
 800733c:	7819      	ldrb	r1, [r3, #0]
 800733e:	2340      	movs	r3, #64	; 0x40
 8007340:	2202      	movs	r2, #2
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f002 fafd 	bl	8009942 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007348:	4b3e      	ldr	r3, [pc, #248]	; (8007444 <USBD_CDC_Init+0x1e4>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f003 020f 	and.w	r2, r3, #15
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	3324      	adds	r3, #36	; 0x24
 800735e:	2201      	movs	r2, #1
 8007360:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007362:	4b39      	ldr	r3, [pc, #228]	; (8007448 <USBD_CDC_Init+0x1e8>)
 8007364:	7819      	ldrb	r1, [r3, #0]
 8007366:	2340      	movs	r3, #64	; 0x40
 8007368:	2202      	movs	r2, #2
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f002 fae9 	bl	8009942 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007370:	4b35      	ldr	r3, [pc, #212]	; (8007448 <USBD_CDC_Init+0x1e8>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007388:	2201      	movs	r2, #1
 800738a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800738c:	4b2f      	ldr	r3, [pc, #188]	; (800744c <USBD_CDC_Init+0x1ec>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f003 020f 	and.w	r2, r3, #15
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	3326      	adds	r3, #38	; 0x26
 80073a2:	2210      	movs	r2, #16
 80073a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073a6:	4b29      	ldr	r3, [pc, #164]	; (800744c <USBD_CDC_Init+0x1ec>)
 80073a8:	7819      	ldrb	r1, [r3, #0]
 80073aa:	2308      	movs	r3, #8
 80073ac:	2203      	movs	r2, #3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f002 fac7 	bl	8009942 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80073b4:	4b25      	ldr	r3, [pc, #148]	; (800744c <USBD_CDC_Init+0x1ec>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f003 020f 	and.w	r2, r3, #15
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	3324      	adds	r3, #36	; 0x24
 80073ca:	2201      	movs	r2, #1
 80073cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	33b0      	adds	r3, #176	; 0xb0
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007404:	2302      	movs	r3, #2
 8007406:	e018      	b.n	800743a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	7c1b      	ldrb	r3, [r3, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007410:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <USBD_CDC_Init+0x1e8>)
 8007412:	7819      	ldrb	r1, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800741a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f002 fb7e 	bl	8009b20 <USBD_LL_PrepareReceive>
 8007424:	e008      	b.n	8007438 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <USBD_CDC_Init+0x1e8>)
 8007428:	7819      	ldrb	r1, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007430:	2340      	movs	r3, #64	; 0x40
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f002 fb74 	bl	8009b20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	200000a3 	.word	0x200000a3
 8007448:	200000a4 	.word	0x200000a4
 800744c:	200000a5 	.word	0x200000a5

08007450 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800745c:	4b3a      	ldr	r3, [pc, #232]	; (8007548 <USBD_CDC_DeInit+0xf8>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f002 fa93 	bl	800998e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007468:	4b37      	ldr	r3, [pc, #220]	; (8007548 <USBD_CDC_DeInit+0xf8>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	f003 020f 	and.w	r2, r3, #15
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	3324      	adds	r3, #36	; 0x24
 800747e:	2200      	movs	r2, #0
 8007480:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007482:	4b32      	ldr	r3, [pc, #200]	; (800754c <USBD_CDC_DeInit+0xfc>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f002 fa80 	bl	800998e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800748e:	4b2f      	ldr	r3, [pc, #188]	; (800754c <USBD_CDC_DeInit+0xfc>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 020f 	and.w	r2, r3, #15
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074a6:	2200      	movs	r2, #0
 80074a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80074aa:	4b29      	ldr	r3, [pc, #164]	; (8007550 <USBD_CDC_DeInit+0x100>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f002 fa6c 	bl	800998e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80074b6:	4b26      	ldr	r3, [pc, #152]	; (8007550 <USBD_CDC_DeInit+0x100>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 020f 	and.w	r2, r3, #15
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	3324      	adds	r3, #36	; 0x24
 80074cc:	2200      	movs	r2, #0
 80074ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80074d0:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <USBD_CDC_DeInit+0x100>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	f003 020f 	and.w	r2, r3, #15
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	3326      	adds	r3, #38	; 0x26
 80074e6:	2200      	movs	r2, #0
 80074e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	32b0      	adds	r2, #176	; 0xb0
 80074f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01f      	beq.n	800753c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	33b0      	adds	r3, #176	; 0xb0
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	32b0      	adds	r2, #176	; 0xb0
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	4618      	mov	r0, r3
 8007520:	f002 fb40 	bl	8009ba4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	32b0      	adds	r2, #176	; 0xb0
 800752e:	2100      	movs	r1, #0
 8007530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	200000a3 	.word	0x200000a3
 800754c:	200000a4 	.word	0x200000a4
 8007550:	200000a5 	.word	0x200000a5

08007554 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	32b0      	adds	r2, #176	; 0xb0
 8007568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	e0bf      	b.n	8007704 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800758c:	2b00      	cmp	r3, #0
 800758e:	d050      	beq.n	8007632 <USBD_CDC_Setup+0xde>
 8007590:	2b20      	cmp	r3, #32
 8007592:	f040 80af 	bne.w	80076f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d03a      	beq.n	8007614 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b25b      	sxtb	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	da1b      	bge.n	80075e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	33b0      	adds	r3, #176	; 0xb0
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80075be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	88d2      	ldrh	r2, [r2, #6]
 80075c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	88db      	ldrh	r3, [r3, #6]
 80075ca:	2b07      	cmp	r3, #7
 80075cc:	bf28      	it	cs
 80075ce:	2307      	movcs	r3, #7
 80075d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	89fa      	ldrh	r2, [r7, #14]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 fd89 	bl	80090f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80075de:	e090      	b.n	8007702 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	785a      	ldrb	r2, [r3, #1]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	88db      	ldrh	r3, [r3, #6]
 80075ee:	2b3f      	cmp	r3, #63	; 0x3f
 80075f0:	d803      	bhi.n	80075fa <USBD_CDC_Setup+0xa6>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	88db      	ldrh	r3, [r3, #6]
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	e000      	b.n	80075fc <USBD_CDC_Setup+0xa8>
 80075fa:	2240      	movs	r2, #64	; 0x40
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007602:	6939      	ldr	r1, [r7, #16]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800760a:	461a      	mov	r2, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 fd9b 	bl	8009148 <USBD_CtlPrepareRx>
      break;
 8007612:	e076      	b.n	8007702 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	33b0      	adds	r3, #176	; 0xb0
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	7850      	ldrb	r0, [r2, #1]
 800762a:	2200      	movs	r2, #0
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	4798      	blx	r3
      break;
 8007630:	e067      	b.n	8007702 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	2b0b      	cmp	r3, #11
 8007638:	d851      	bhi.n	80076de <USBD_CDC_Setup+0x18a>
 800763a:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <USBD_CDC_Setup+0xec>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007671 	.word	0x08007671
 8007644:	080076ed 	.word	0x080076ed
 8007648:	080076df 	.word	0x080076df
 800764c:	080076df 	.word	0x080076df
 8007650:	080076df 	.word	0x080076df
 8007654:	080076df 	.word	0x080076df
 8007658:	080076df 	.word	0x080076df
 800765c:	080076df 	.word	0x080076df
 8007660:	080076df 	.word	0x080076df
 8007664:	080076df 	.word	0x080076df
 8007668:	0800769b 	.word	0x0800769b
 800766c:	080076c5 	.word	0x080076c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b03      	cmp	r3, #3
 800767a:	d107      	bne.n	800768c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800767c:	f107 030a 	add.w	r3, r7, #10
 8007680:	2202      	movs	r2, #2
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 fd33 	bl	80090f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800768a:	e032      	b.n	80076f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fcbd 	bl	800900e <USBD_CtlError>
            ret = USBD_FAIL;
 8007694:	2303      	movs	r3, #3
 8007696:	75fb      	strb	r3, [r7, #23]
          break;
 8007698:	e02b      	b.n	80076f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d107      	bne.n	80076b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80076a6:	f107 030d 	add.w	r3, r7, #13
 80076aa:	2201      	movs	r2, #1
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fd1e 	bl	80090f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076b4:	e01d      	b.n	80076f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 fca8 	bl	800900e <USBD_CtlError>
            ret = USBD_FAIL;
 80076be:	2303      	movs	r3, #3
 80076c0:	75fb      	strb	r3, [r7, #23]
          break;
 80076c2:	e016      	b.n	80076f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d00f      	beq.n	80076f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fc9b 	bl	800900e <USBD_CtlError>
            ret = USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076dc:	e008      	b.n	80076f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fc94 	bl	800900e <USBD_CtlError>
          ret = USBD_FAIL;
 80076e6:	2303      	movs	r3, #3
 80076e8:	75fb      	strb	r3, [r7, #23]
          break;
 80076ea:	e002      	b.n	80076f2 <USBD_CDC_Setup+0x19e>
          break;
 80076ec:	bf00      	nop
 80076ee:	e008      	b.n	8007702 <USBD_CDC_Setup+0x1ae>
          break;
 80076f0:	bf00      	nop
      }
      break;
 80076f2:	e006      	b.n	8007702 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 fc89 	bl	800900e <USBD_CtlError>
      ret = USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007700:	bf00      	nop
  }

  return (uint8_t)ret;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800771e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	32b0      	adds	r2, #176	; 0xb0
 800772a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007732:	2303      	movs	r3, #3
 8007734:	e065      	b.n	8007802 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	32b0      	adds	r2, #176	; 0xb0
 8007740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007744:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	f003 020f 	and.w	r2, r3, #15
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	3318      	adds	r3, #24
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d02f      	beq.n	80077c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	f003 020f 	and.w	r2, r3, #15
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	3318      	adds	r3, #24
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	f003 010f 	and.w	r1, r3, #15
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	460b      	mov	r3, r1
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	440b      	add	r3, r1
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4403      	add	r3, r0
 8007788:	3348      	adds	r3, #72	; 0x48
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007790:	fb01 f303 	mul.w	r3, r1, r3
 8007794:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007796:	2b00      	cmp	r3, #0
 8007798:	d112      	bne.n	80077c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	f003 020f 	and.w	r2, r3, #15
 80077a0:	6879      	ldr	r1, [r7, #4]
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	3318      	adds	r3, #24
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077b2:	78f9      	ldrb	r1, [r7, #3]
 80077b4:	2300      	movs	r3, #0
 80077b6:	2200      	movs	r2, #0
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f002 f990 	bl	8009ade <USBD_LL_Transmit>
 80077be:	e01f      	b.n	8007800 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	33b0      	adds	r3, #176	; 0xb0
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d010      	beq.n	8007800 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	33b0      	adds	r3, #176	; 0xb0
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80077fc:	78fa      	ldrb	r2, [r7, #3]
 80077fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	32b0      	adds	r2, #176	; 0xb0
 8007820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007824:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	32b0      	adds	r2, #176	; 0xb0
 8007830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007838:	2303      	movs	r3, #3
 800783a:	e01a      	b.n	8007872 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 f98e 	bl	8009b62 <USBD_LL_GetRxDataSize>
 8007846:	4602      	mov	r2, r0
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	33b0      	adds	r3, #176	; 0xb0
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800786c:	4611      	mov	r1, r2
 800786e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	32b0      	adds	r2, #176	; 0xb0
 800788c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007890:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	e025      	b.n	80078e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	33b0      	adds	r3, #176	; 0xb0
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01a      	beq.n	80078e6 <USBD_CDC_EP0_RxReady+0x6c>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078b6:	2bff      	cmp	r3, #255	; 0xff
 80078b8:	d015      	beq.n	80078e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	33b0      	adds	r3, #176	; 0xb0
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80078d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078da:	b292      	uxth	r2, r2
 80078dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	22ff      	movs	r2, #255	; 0xff
 80078e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078f8:	2182      	movs	r1, #130	; 0x82
 80078fa:	4818      	ldr	r0, [pc, #96]	; (800795c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078fc:	f000 fd4f 	bl	800839e <USBD_GetEpDesc>
 8007900:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007902:	2101      	movs	r1, #1
 8007904:	4815      	ldr	r0, [pc, #84]	; (800795c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007906:	f000 fd4a 	bl	800839e <USBD_GetEpDesc>
 800790a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800790c:	2181      	movs	r1, #129	; 0x81
 800790e:	4813      	ldr	r0, [pc, #76]	; (800795c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007910:	f000 fd45 	bl	800839e <USBD_GetEpDesc>
 8007914:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2210      	movs	r2, #16
 8007920:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d006      	beq.n	8007936 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2200      	movs	r2, #0
 800792c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007930:	711a      	strb	r2, [r3, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d006      	beq.n	800794a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007944:	711a      	strb	r2, [r3, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2243      	movs	r2, #67	; 0x43
 800794e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000060 	.word	0x20000060

08007960 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007968:	2182      	movs	r1, #130	; 0x82
 800796a:	4818      	ldr	r0, [pc, #96]	; (80079cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800796c:	f000 fd17 	bl	800839e <USBD_GetEpDesc>
 8007970:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007972:	2101      	movs	r1, #1
 8007974:	4815      	ldr	r0, [pc, #84]	; (80079cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007976:	f000 fd12 	bl	800839e <USBD_GetEpDesc>
 800797a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800797c:	2181      	movs	r1, #129	; 0x81
 800797e:	4813      	ldr	r0, [pc, #76]	; (80079cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007980:	f000 fd0d 	bl	800839e <USBD_GetEpDesc>
 8007984:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2210      	movs	r2, #16
 8007990:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2200      	movs	r2, #0
 800799c:	711a      	strb	r2, [r3, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f042 0202 	orr.w	r2, r2, #2
 80079a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	711a      	strb	r2, [r3, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f042 0202 	orr.w	r2, r2, #2
 80079b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2243      	movs	r2, #67	; 0x43
 80079be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079c0:	4b02      	ldr	r3, [pc, #8]	; (80079cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000060 	.word	0x20000060

080079d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079d8:	2182      	movs	r1, #130	; 0x82
 80079da:	4818      	ldr	r0, [pc, #96]	; (8007a3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079dc:	f000 fcdf 	bl	800839e <USBD_GetEpDesc>
 80079e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079e2:	2101      	movs	r1, #1
 80079e4:	4815      	ldr	r0, [pc, #84]	; (8007a3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079e6:	f000 fcda 	bl	800839e <USBD_GetEpDesc>
 80079ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079ec:	2181      	movs	r1, #129	; 0x81
 80079ee:	4813      	ldr	r0, [pc, #76]	; (8007a3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079f0:	f000 fcd5 	bl	800839e <USBD_GetEpDesc>
 80079f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2210      	movs	r2, #16
 8007a00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d006      	beq.n	8007a16 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a10:	711a      	strb	r2, [r3, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d006      	beq.n	8007a2a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a24:	711a      	strb	r2, [r3, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2243      	movs	r2, #67	; 0x43
 8007a2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a30:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000060 	.word	0x20000060

08007a40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	220a      	movs	r2, #10
 8007a4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a4e:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	2000001c 	.word	0x2000001c

08007a60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e009      	b.n	8007a88 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	33b0      	adds	r3, #176	; 0xb0
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	32b0      	adds	r2, #176	; 0xb0
 8007aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e008      	b.n	8007acc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	371c      	adds	r7, #28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	32b0      	adds	r2, #176	; 0xb0
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e004      	b.n	8007b06 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	32b0      	adds	r2, #176	; 0xb0
 8007b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	32b0      	adds	r2, #176	; 0xb0
 8007b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e025      	b.n	8007b92 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11f      	bne.n	8007b90 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007b58:	4b10      	ldr	r3, [pc, #64]	; (8007b9c <USBD_CDC_TransmitPacket+0x88>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 020f 	and.w	r2, r3, #15
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4403      	add	r3, r0
 8007b72:	3318      	adds	r3, #24
 8007b74:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007b76:	4b09      	ldr	r3, [pc, #36]	; (8007b9c <USBD_CDC_TransmitPacket+0x88>)
 8007b78:	7819      	ldrb	r1, [r3, #0]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 ffa9 	bl	8009ade <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200000a3 	.word	0x200000a3

08007ba0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	32b0      	adds	r2, #176	; 0xb0
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	32b0      	adds	r2, #176	; 0xb0
 8007bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e018      	b.n	8007c00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	7c1b      	ldrb	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <USBD_CDC_ReceivePacket+0x68>)
 8007bd8:	7819      	ldrb	r1, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 ff9b 	bl	8009b20 <USBD_LL_PrepareReceive>
 8007bea:	e008      	b.n	8007bfe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <USBD_CDC_ReceivePacket+0x68>)
 8007bee:	7819      	ldrb	r1, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bf6:	2340      	movs	r3, #64	; 0x40
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 ff91 	bl	8009b20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	200000a4 	.word	0x200000a4

08007c0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	4613      	mov	r3, r2
 8007c18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e01f      	b.n	8007c64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	79fa      	ldrb	r2, [r7, #7]
 8007c56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f001 fe0b 	bl	8009874 <USBD_LL_Init>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e025      	b.n	8007cd0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	32ae      	adds	r2, #174	; 0xae
 8007c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00f      	beq.n	8007cc0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	32ae      	adds	r2, #174	; 0xae
 8007caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	f107 020e 	add.w	r2, r7, #14
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	4602      	mov	r2, r0
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 fe13 	bl	800990c <USBD_LL_Start>
 8007ce6:	4603      	mov	r3, r0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d009      	beq.n	8007d34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	78fa      	ldrb	r2, [r7, #3]
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	4798      	blx	r3
 8007d30:	4603      	mov	r3, r0
 8007d32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	460b      	mov	r3, r1
 8007d48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	78fa      	ldrb	r2, [r7, #3]
 8007d58:	4611      	mov	r1, r2
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d64:	2303      	movs	r3, #3
 8007d66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 f908 	bl	8008f9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d98:	461a      	mov	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007da6:	f003 031f 	and.w	r3, r3, #31
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d01a      	beq.n	8007de4 <USBD_LL_SetupStage+0x72>
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d822      	bhi.n	8007df8 <USBD_LL_SetupStage+0x86>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <USBD_LL_SetupStage+0x4a>
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d00a      	beq.n	8007dd0 <USBD_LL_SetupStage+0x5e>
 8007dba:	e01d      	b.n	8007df8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fb5f 	bl	8008488 <USBD_StdDevReq>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8007dce:	e020      	b.n	8007e12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fbc7 	bl	800856c <USBD_StdItfReq>
 8007dde:	4603      	mov	r3, r0
 8007de0:	73fb      	strb	r3, [r7, #15]
      break;
 8007de2:	e016      	b.n	8007e12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fc29 	bl	8008644 <USBD_StdEPReq>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]
      break;
 8007df6:	e00c      	b.n	8007e12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fde0 	bl	80099cc <USBD_LL_StallEP>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e10:	bf00      	nop
  }

  return ret;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	460b      	mov	r3, r1
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007e2e:	7afb      	ldrb	r3, [r7, #11]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d16e      	bne.n	8007f12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	f040 8098 	bne.w	8007f78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d913      	bls.n	8007e7c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	1ad2      	subs	r2, r2, r3
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	bf28      	it	cs
 8007e6e:	4613      	movcs	r3, r2
 8007e70:	461a      	mov	r2, r3
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f001 f984 	bl	8009182 <USBD_CtlContinueRx>
 8007e7a:	e07d      	b.n	8007f78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d014      	beq.n	8007eb4 <USBD_LL_DataOutStage+0x98>
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d81d      	bhi.n	8007eca <USBD_LL_DataOutStage+0xae>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <USBD_LL_DataOutStage+0x7c>
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d003      	beq.n	8007e9e <USBD_LL_DataOutStage+0x82>
 8007e96:	e018      	b.n	8007eca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	75bb      	strb	r3, [r7, #22]
            break;
 8007e9c:	e018      	b.n	8007ed0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 fa5e 	bl	800836a <USBD_CoreFindIF>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75bb      	strb	r3, [r7, #22]
            break;
 8007eb2:	e00d      	b.n	8007ed0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 fa60 	bl	8008384 <USBD_CoreFindEP>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	75bb      	strb	r3, [r7, #22]
            break;
 8007ec8:	e002      	b.n	8007ed0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75bb      	strb	r3, [r7, #22]
            break;
 8007ece:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ed0:	7dbb      	ldrb	r3, [r7, #22]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d119      	bne.n	8007f0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d113      	bne.n	8007f0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007ee2:	7dba      	ldrb	r2, [r7, #22]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	32ae      	adds	r2, #174	; 0xae
 8007ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00b      	beq.n	8007f0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007ef2:	7dba      	ldrb	r2, [r7, #22]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007efa:	7dba      	ldrb	r2, [r7, #22]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	32ae      	adds	r2, #174	; 0xae
 8007f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f001 f94a 	bl	80091a4 <USBD_CtlSendStatus>
 8007f10:	e032      	b.n	8007f78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fa31 	bl	8008384 <USBD_CoreFindEP>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f26:	7dbb      	ldrb	r3, [r7, #22]
 8007f28:	2bff      	cmp	r3, #255	; 0xff
 8007f2a:	d025      	beq.n	8007f78 <USBD_LL_DataOutStage+0x15c>
 8007f2c:	7dbb      	ldrb	r3, [r7, #22]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d122      	bne.n	8007f78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d117      	bne.n	8007f6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007f3e:	7dba      	ldrb	r2, [r7, #22]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	32ae      	adds	r2, #174	; 0xae
 8007f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00f      	beq.n	8007f6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007f4e:	7dba      	ldrb	r2, [r7, #22]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007f56:	7dba      	ldrb	r2, [r7, #22]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	32ae      	adds	r2, #174	; 0xae
 8007f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	7afa      	ldrb	r2, [r7, #11]
 8007f64:	4611      	mov	r1, r2
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	e000      	b.n	8007f7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b086      	sub	sp, #24
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	607a      	str	r2, [r7, #4]
 8007f8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f90:	7afb      	ldrb	r3, [r7, #11]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d16f      	bne.n	8008076 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d15a      	bne.n	800805c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d914      	bls.n	8007fdc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	1ad2      	subs	r2, r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f001 f8ac 	bl	8009126 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f001 fda3 	bl	8009b20 <USBD_LL_PrepareReceive>
 8007fda:	e03f      	b.n	800805c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d11c      	bne.n	8008022 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d316      	bcc.n	8008022 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d20f      	bcs.n	8008022 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008002:	2200      	movs	r2, #0
 8008004:	2100      	movs	r1, #0
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f001 f88d 	bl	8009126 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008014:	2300      	movs	r3, #0
 8008016:	2200      	movs	r2, #0
 8008018:	2100      	movs	r1, #0
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f001 fd80 	bl	8009b20 <USBD_LL_PrepareReceive>
 8008020:	e01c      	b.n	800805c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d10f      	bne.n	800804e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800804e:	2180      	movs	r1, #128	; 0x80
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f001 fcbb 	bl	80099cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f001 f8b7 	bl	80091ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d03a      	beq.n	80080dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff fe42 	bl	8007cf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008074:	e032      	b.n	80080dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008076:	7afb      	ldrb	r3, [r7, #11]
 8008078:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800807c:	b2db      	uxtb	r3, r3
 800807e:	4619      	mov	r1, r3
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f97f 	bl	8008384 <USBD_CoreFindEP>
 8008086:	4603      	mov	r3, r0
 8008088:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	2bff      	cmp	r3, #255	; 0xff
 800808e:	d025      	beq.n	80080dc <USBD_LL_DataInStage+0x15a>
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d122      	bne.n	80080dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d11c      	bne.n	80080dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80080a2:	7dfa      	ldrb	r2, [r7, #23]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	32ae      	adds	r2, #174	; 0xae
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d014      	beq.n	80080dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80080b2:	7dfa      	ldrb	r2, [r7, #23]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80080ba:	7dfa      	ldrb	r2, [r7, #23]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	32ae      	adds	r2, #174	; 0xae
 80080c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	7afa      	ldrb	r2, [r7, #11]
 80080c8:	4611      	mov	r1, r2
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	4798      	blx	r3
 80080ce:	4603      	mov	r3, r0
 80080d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80080d2:	7dbb      	ldrb	r3, [r7, #22]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80080d8:	7dbb      	ldrb	r3, [r7, #22]
 80080da:	e000      	b.n	80080de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d014      	beq.n	800814c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00e      	beq.n	800814c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	6852      	ldr	r2, [r2, #4]
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	4611      	mov	r1, r2
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800814c:	2340      	movs	r3, #64	; 0x40
 800814e:	2200      	movs	r2, #0
 8008150:	2100      	movs	r1, #0
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 fbf5 	bl	8009942 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2240      	movs	r2, #64	; 0x40
 8008164:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008168:	2340      	movs	r3, #64	; 0x40
 800816a:	2200      	movs	r2, #0
 800816c:	2180      	movs	r1, #128	; 0x80
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fbe7 	bl	8009942 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2240      	movs	r2, #64	; 0x40
 800817e:	621a      	str	r2, [r3, #32]

  return ret;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2204      	movs	r2, #4
 80081c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d106      	bne.n	80081f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b03      	cmp	r3, #3
 8008218:	d110      	bne.n	800823c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d005      	beq.n	800823c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	32ae      	adds	r2, #174	; 0xae
 800825c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008264:	2303      	movs	r3, #3
 8008266:	e01c      	b.n	80082a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b03      	cmp	r3, #3
 8008272:	d115      	bne.n	80082a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	32ae      	adds	r2, #174	; 0xae
 800827e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	32ae      	adds	r2, #174	; 0xae
 8008292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	78fa      	ldrb	r2, [r7, #3]
 800829a:	4611      	mov	r1, r2
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	32ae      	adds	r2, #174	; 0xae
 80082c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e01c      	b.n	8008306 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d115      	bne.n	8008304 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	32ae      	adds	r2, #174	; 0xae
 80082e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	32ae      	adds	r2, #174	; 0xae
 80082f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	78fa      	ldrb	r2, [r7, #3]
 80082fe:	4611      	mov	r1, r2
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00e      	beq.n	8008360 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	6852      	ldr	r2, [r2, #4]
 800834e:	b2d2      	uxtb	r2, r2
 8008350:	4611      	mov	r1, r2
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800835c:	2303      	movs	r3, #3
 800835e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008376:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008390:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b086      	sub	sp, #24
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	885b      	ldrh	r3, [r3, #2]
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d920      	bls.n	8008408 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80083ce:	e013      	b.n	80083f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80083d0:	f107 030a 	add.w	r3, r7, #10
 80083d4:	4619      	mov	r1, r3
 80083d6:	6978      	ldr	r0, [r7, #20]
 80083d8:	f000 f81b 	bl	8008412 <USBD_GetNextDesc>
 80083dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d108      	bne.n	80083f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	789b      	ldrb	r3, [r3, #2]
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d008      	beq.n	8008406 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80083f4:	2300      	movs	r3, #0
 80083f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	885b      	ldrh	r3, [r3, #2]
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	897b      	ldrh	r3, [r7, #10]
 8008400:	429a      	cmp	r2, r3
 8008402:	d8e5      	bhi.n	80083d0 <USBD_GetEpDesc+0x32>
 8008404:	e000      	b.n	8008408 <USBD_GetEpDesc+0x6a>
          break;
 8008406:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008408:	693b      	ldr	r3, [r7, #16]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	881a      	ldrh	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	4413      	add	r3, r2
 800842c:	b29a      	uxth	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4413      	add	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800843e:	68fb      	ldr	r3, [r7, #12]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	3301      	adds	r3, #1
 8008462:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800846a:	8a3b      	ldrh	r3, [r7, #16]
 800846c:	021b      	lsls	r3, r3, #8
 800846e:	b21a      	sxth	r2, r3
 8008470:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008474:	4313      	orrs	r3, r2
 8008476:	b21b      	sxth	r3, r3
 8008478:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800847a:	89fb      	ldrh	r3, [r7, #14]
}
 800847c:	4618      	mov	r0, r3
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800849e:	2b40      	cmp	r3, #64	; 0x40
 80084a0:	d005      	beq.n	80084ae <USBD_StdDevReq+0x26>
 80084a2:	2b40      	cmp	r3, #64	; 0x40
 80084a4:	d857      	bhi.n	8008556 <USBD_StdDevReq+0xce>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00f      	beq.n	80084ca <USBD_StdDevReq+0x42>
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d153      	bne.n	8008556 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	32ae      	adds	r2, #174	; 0xae
 80084b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	4798      	blx	r3
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
      break;
 80084c8:	e04a      	b.n	8008560 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	d83b      	bhi.n	800854a <USBD_StdDevReq+0xc2>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <USBD_StdDevReq+0x50>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	08008541 	.word	0x08008541
 80084e0:	0800854b 	.word	0x0800854b
 80084e4:	08008537 	.word	0x08008537
 80084e8:	0800854b 	.word	0x0800854b
 80084ec:	0800850b 	.word	0x0800850b
 80084f0:	08008501 	.word	0x08008501
 80084f4:	0800854b 	.word	0x0800854b
 80084f8:	08008523 	.word	0x08008523
 80084fc:	08008515 	.word	0x08008515
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa3c 	bl	8008980 <USBD_GetDescriptor>
          break;
 8008508:	e024      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fba1 	bl	8008c54 <USBD_SetAddress>
          break;
 8008512:	e01f      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fbe0 	bl	8008cdc <USBD_SetConfig>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]
          break;
 8008520:	e018      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fc83 	bl	8008e30 <USBD_GetConfig>
          break;
 800852a:	e013      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fcb4 	bl	8008e9c <USBD_GetStatus>
          break;
 8008534:	e00e      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fce3 	bl	8008f04 <USBD_SetFeature>
          break;
 800853e:	e009      	b.n	8008554 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fd07 	bl	8008f56 <USBD_ClrFeature>
          break;
 8008548:	e004      	b.n	8008554 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fd5e 	bl	800900e <USBD_CtlError>
          break;
 8008552:	bf00      	nop
      }
      break;
 8008554:	e004      	b.n	8008560 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fd58 	bl	800900e <USBD_CtlError>
      break;
 800855e:	bf00      	nop
  }

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop

0800856c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008582:	2b40      	cmp	r3, #64	; 0x40
 8008584:	d005      	beq.n	8008592 <USBD_StdItfReq+0x26>
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	d852      	bhi.n	8008630 <USBD_StdItfReq+0xc4>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <USBD_StdItfReq+0x26>
 800858e:	2b20      	cmp	r3, #32
 8008590:	d14e      	bne.n	8008630 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008598:	b2db      	uxtb	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	2b02      	cmp	r3, #2
 800859e:	d840      	bhi.n	8008622 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	889b      	ldrh	r3, [r3, #4]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d836      	bhi.n	8008618 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	889b      	ldrh	r3, [r3, #4]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff fed9 	bl	800836a <USBD_CoreFindIF>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2bff      	cmp	r3, #255	; 0xff
 80085c0:	d01d      	beq.n	80085fe <USBD_StdItfReq+0x92>
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d11a      	bne.n	80085fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80085c8:	7bba      	ldrb	r2, [r7, #14]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	32ae      	adds	r2, #174	; 0xae
 80085ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00f      	beq.n	80085f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80085d8:	7bba      	ldrb	r2, [r7, #14]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085e0:	7bba      	ldrb	r2, [r7, #14]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	32ae      	adds	r2, #174	; 0xae
 80085e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085f6:	e004      	b.n	8008602 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80085f8:	2303      	movs	r3, #3
 80085fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085fc:	e001      	b.n	8008602 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80085fe:	2303      	movs	r3, #3
 8008600:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	88db      	ldrh	r3, [r3, #6]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d110      	bne.n	800862c <USBD_StdItfReq+0xc0>
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10d      	bne.n	800862c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fdc7 	bl	80091a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008616:	e009      	b.n	800862c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fcf7 	bl	800900e <USBD_CtlError>
          break;
 8008620:	e004      	b.n	800862c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fcf2 	bl	800900e <USBD_CtlError>
          break;
 800862a:	e000      	b.n	800862e <USBD_StdItfReq+0xc2>
          break;
 800862c:	bf00      	nop
      }
      break;
 800862e:	e004      	b.n	800863a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fceb 	bl	800900e <USBD_CtlError>
      break;
 8008638:	bf00      	nop
  }

  return ret;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	889b      	ldrh	r3, [r3, #4]
 8008656:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008660:	2b40      	cmp	r3, #64	; 0x40
 8008662:	d007      	beq.n	8008674 <USBD_StdEPReq+0x30>
 8008664:	2b40      	cmp	r3, #64	; 0x40
 8008666:	f200 817f 	bhi.w	8008968 <USBD_StdEPReq+0x324>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d02a      	beq.n	80086c4 <USBD_StdEPReq+0x80>
 800866e:	2b20      	cmp	r3, #32
 8008670:	f040 817a 	bne.w	8008968 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff fe83 	bl	8008384 <USBD_CoreFindEP>
 800867e:	4603      	mov	r3, r0
 8008680:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008682:	7b7b      	ldrb	r3, [r7, #13]
 8008684:	2bff      	cmp	r3, #255	; 0xff
 8008686:	f000 8174 	beq.w	8008972 <USBD_StdEPReq+0x32e>
 800868a:	7b7b      	ldrb	r3, [r7, #13]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f040 8170 	bne.w	8008972 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008692:	7b7a      	ldrb	r2, [r7, #13]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800869a:	7b7a      	ldrb	r2, [r7, #13]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	32ae      	adds	r2, #174	; 0xae
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 8163 	beq.w	8008972 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80086ac:	7b7a      	ldrb	r2, [r7, #13]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	32ae      	adds	r2, #174	; 0xae
 80086b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086c2:	e156      	b.n	8008972 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	785b      	ldrb	r3, [r3, #1]
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d008      	beq.n	80086de <USBD_StdEPReq+0x9a>
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	f300 8145 	bgt.w	800895c <USBD_StdEPReq+0x318>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 809b 	beq.w	800880e <USBD_StdEPReq+0x1ca>
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d03c      	beq.n	8008756 <USBD_StdEPReq+0x112>
 80086dc:	e13e      	b.n	800895c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d002      	beq.n	80086f0 <USBD_StdEPReq+0xac>
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d016      	beq.n	800871c <USBD_StdEPReq+0xd8>
 80086ee:	e02c      	b.n	800874a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00d      	beq.n	8008712 <USBD_StdEPReq+0xce>
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b80      	cmp	r3, #128	; 0x80
 80086fa:	d00a      	beq.n	8008712 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 f963 	bl	80099cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008706:	2180      	movs	r1, #128	; 0x80
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 f95f 	bl	80099cc <USBD_LL_StallEP>
 800870e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008710:	e020      	b.n	8008754 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fc7a 	bl	800900e <USBD_CtlError>
              break;
 800871a:	e01b      	b.n	8008754 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	885b      	ldrh	r3, [r3, #2]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10e      	bne.n	8008742 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <USBD_StdEPReq+0xfe>
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b80      	cmp	r3, #128	; 0x80
 800872e:	d008      	beq.n	8008742 <USBD_StdEPReq+0xfe>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	88db      	ldrh	r3, [r3, #6]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 f945 	bl	80099cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fd2e 	bl	80091a4 <USBD_CtlSendStatus>

              break;
 8008748:	e004      	b.n	8008754 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fc5e 	bl	800900e <USBD_CtlError>
              break;
 8008752:	bf00      	nop
          }
          break;
 8008754:	e107      	b.n	8008966 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d002      	beq.n	8008768 <USBD_StdEPReq+0x124>
 8008762:	2b03      	cmp	r3, #3
 8008764:	d016      	beq.n	8008794 <USBD_StdEPReq+0x150>
 8008766:	e04b      	b.n	8008800 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00d      	beq.n	800878a <USBD_StdEPReq+0x146>
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b80      	cmp	r3, #128	; 0x80
 8008772:	d00a      	beq.n	800878a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 f927 	bl	80099cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800877e:	2180      	movs	r1, #128	; 0x80
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 f923 	bl	80099cc <USBD_LL_StallEP>
 8008786:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008788:	e040      	b.n	800880c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fc3e 	bl	800900e <USBD_CtlError>
              break;
 8008792:	e03b      	b.n	800880c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	885b      	ldrh	r3, [r3, #2]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d136      	bne.n	800880a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d004      	beq.n	80087b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f92d 	bl	8009a0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fcf7 	bl	80091a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fde2 	bl	8008384 <USBD_CoreFindEP>
 80087c0:	4603      	mov	r3, r0
 80087c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087c4:	7b7b      	ldrb	r3, [r7, #13]
 80087c6:	2bff      	cmp	r3, #255	; 0xff
 80087c8:	d01f      	beq.n	800880a <USBD_StdEPReq+0x1c6>
 80087ca:	7b7b      	ldrb	r3, [r7, #13]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d11c      	bne.n	800880a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80087d0:	7b7a      	ldrb	r2, [r7, #13]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80087d8:	7b7a      	ldrb	r2, [r7, #13]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	32ae      	adds	r2, #174	; 0xae
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d010      	beq.n	800880a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80087e8:	7b7a      	ldrb	r2, [r7, #13]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	32ae      	adds	r2, #174	; 0xae
 80087ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80087fe:	e004      	b.n	800880a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fc03 	bl	800900e <USBD_CtlError>
              break;
 8008808:	e000      	b.n	800880c <USBD_StdEPReq+0x1c8>
              break;
 800880a:	bf00      	nop
          }
          break;
 800880c:	e0ab      	b.n	8008966 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d002      	beq.n	8008820 <USBD_StdEPReq+0x1dc>
 800881a:	2b03      	cmp	r3, #3
 800881c:	d032      	beq.n	8008884 <USBD_StdEPReq+0x240>
 800881e:	e097      	b.n	8008950 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <USBD_StdEPReq+0x1f2>
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b80      	cmp	r3, #128	; 0x80
 800882a:	d004      	beq.n	8008836 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fbed 	bl	800900e <USBD_CtlError>
                break;
 8008834:	e091      	b.n	800895a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883a:	2b00      	cmp	r3, #0
 800883c:	da0b      	bge.n	8008856 <USBD_StdEPReq+0x212>
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	3310      	adds	r3, #16
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	3304      	adds	r3, #4
 8008854:	e00b      	b.n	800886e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	4413      	add	r3, r2
 800886c:	3304      	adds	r3, #4
 800886e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2202      	movs	r2, #2
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fc37 	bl	80090f0 <USBD_CtlSendData>
              break;
 8008882:	e06a      	b.n	800895a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008888:	2b00      	cmp	r3, #0
 800888a:	da11      	bge.n	80088b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	f003 020f 	and.w	r2, r3, #15
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	3324      	adds	r3, #36	; 0x24
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d117      	bne.n	80088d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fbb0 	bl	800900e <USBD_CtlError>
                  break;
 80088ae:	e054      	b.n	800895a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	f003 020f 	and.w	r2, r3, #15
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fb9d 	bl	800900e <USBD_CtlError>
                  break;
 80088d4:	e041      	b.n	800895a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	da0b      	bge.n	80088f6 <USBD_StdEPReq+0x2b2>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	3310      	adds	r3, #16
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	4413      	add	r3, r2
 80088f2:	3304      	adds	r3, #4
 80088f4:	e00b      	b.n	800890e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	3304      	adds	r3, #4
 800890e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <USBD_StdEPReq+0x2d8>
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b80      	cmp	r3, #128	; 0x80
 800891a:	d103      	bne.n	8008924 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	e00e      	b.n	8008942 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 f88d 	bl	8009a48 <USBD_LL_IsStallEP>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2201      	movs	r2, #1
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e002      	b.n	8008942 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2202      	movs	r2, #2
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fbd1 	bl	80090f0 <USBD_CtlSendData>
              break;
 800894e:	e004      	b.n	800895a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fb5b 	bl	800900e <USBD_CtlError>
              break;
 8008958:	bf00      	nop
          }
          break;
 800895a:	e004      	b.n	8008966 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fb55 	bl	800900e <USBD_CtlError>
          break;
 8008964:	bf00      	nop
      }
      break;
 8008966:	e005      	b.n	8008974 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fb4f 	bl	800900e <USBD_CtlError>
      break;
 8008970:	e000      	b.n	8008974 <USBD_StdEPReq+0x330>
      break;
 8008972:	bf00      	nop
  }

  return ret;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	885b      	ldrh	r3, [r3, #2]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	2b06      	cmp	r3, #6
 80089a2:	f200 8128 	bhi.w	8008bf6 <USBD_GetDescriptor+0x276>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <USBD_GetDescriptor+0x2c>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089e1 	.word	0x080089e1
 80089b4:	08008a21 	.word	0x08008a21
 80089b8:	08008bf7 	.word	0x08008bf7
 80089bc:	08008bf7 	.word	0x08008bf7
 80089c0:	08008b97 	.word	0x08008b97
 80089c4:	08008bc3 	.word	0x08008bc3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	7c12      	ldrb	r2, [r2, #16]
 80089d4:	f107 0108 	add.w	r1, r7, #8
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	60f8      	str	r0, [r7, #12]
      break;
 80089de:	e112      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7c1b      	ldrb	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10d      	bne.n	8008a04 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	f107 0208 	add.w	r2, r7, #8
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3301      	adds	r3, #1
 80089fe:	2202      	movs	r2, #2
 8008a00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a02:	e100      	b.n	8008c06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	f107 0208 	add.w	r2, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	701a      	strb	r2, [r3, #0]
      break;
 8008a1e:	e0f2      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	885b      	ldrh	r3, [r3, #2]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	f200 80ac 	bhi.w	8008b84 <USBD_GetDescriptor+0x204>
 8008a2c:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <USBD_GetDescriptor+0xb4>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a4d 	.word	0x08008a4d
 8008a38:	08008a81 	.word	0x08008a81
 8008a3c:	08008ab5 	.word	0x08008ab5
 8008a40:	08008ae9 	.word	0x08008ae9
 8008a44:	08008b1d 	.word	0x08008b1d
 8008a48:	08008b51 	.word	0x08008b51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	f107 0108 	add.w	r1, r7, #8
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6e:	e091      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 facb 	bl	800900e <USBD_CtlError>
            err++;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7e:	e089      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	7c12      	ldrb	r2, [r2, #16]
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa2:	e077      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fab1 	bl	800900e <USBD_CtlError>
            err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab2:	e06f      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	7c12      	ldrb	r2, [r2, #16]
 8008acc:	f107 0108 	add.w	r1, r7, #8
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
 8008ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ad6:	e05d      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa97 	bl	800900e <USBD_CtlError>
            err++;
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ae6:	e055      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	7c12      	ldrb	r2, [r2, #16]
 8008b00:	f107 0108 	add.w	r1, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b0a:	e043      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa7d 	bl	800900e <USBD_CtlError>
            err++;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	3301      	adds	r3, #1
 8008b18:	72fb      	strb	r3, [r7, #11]
          break;
 8008b1a:	e03b      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	7c12      	ldrb	r2, [r2, #16]
 8008b34:	f107 0108 	add.w	r1, r7, #8
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3e:	e029      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa63 	bl	800900e <USBD_CtlError>
            err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b4e:	e021      	b.n	8008b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b72:	e00f      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa49 	bl	800900e <USBD_CtlError>
            err++;
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	72fb      	strb	r3, [r7, #11]
          break;
 8008b82:	e007      	b.n	8008b94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa41 	bl	800900e <USBD_CtlError>
          err++;
 8008b8c:	7afb      	ldrb	r3, [r7, #11]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b92:	bf00      	nop
      }
      break;
 8008b94:	e037      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7c1b      	ldrb	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba6:	f107 0208 	add.w	r2, r7, #8
 8008baa:	4610      	mov	r0, r2
 8008bac:	4798      	blx	r3
 8008bae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bb0:	e029      	b.n	8008c06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa2a 	bl	800900e <USBD_CtlError>
        err++;
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc0:	e021      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7c1b      	ldrb	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10d      	bne.n	8008be6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	f107 0208 	add.w	r2, r7, #8
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	4798      	blx	r3
 8008bda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3301      	adds	r3, #1
 8008be0:	2207      	movs	r2, #7
 8008be2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008be4:	e00f      	b.n	8008c06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa10 	bl	800900e <USBD_CtlError>
        err++;
 8008bee:	7afb      	ldrb	r3, [r7, #11]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8008bf4:	e007      	b.n	8008c06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fa08 	bl	800900e <USBD_CtlError>
      err++;
 8008bfe:	7afb      	ldrb	r3, [r7, #11]
 8008c00:	3301      	adds	r3, #1
 8008c02:	72fb      	strb	r3, [r7, #11]
      break;
 8008c04:	bf00      	nop
  }

  if (err != 0U)
 8008c06:	7afb      	ldrb	r3, [r7, #11]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d11e      	bne.n	8008c4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	88db      	ldrh	r3, [r3, #6]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d016      	beq.n	8008c42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008c14:	893b      	ldrh	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00e      	beq.n	8008c38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	88da      	ldrh	r2, [r3, #6]
 8008c1e:	893b      	ldrh	r3, [r7, #8]
 8008c20:	4293      	cmp	r3, r2
 8008c22:	bf28      	it	cs
 8008c24:	4613      	movcs	r3, r2
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c2a:	893b      	ldrh	r3, [r7, #8]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa5d 	bl	80090f0 <USBD_CtlSendData>
 8008c36:	e009      	b.n	8008c4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9e7 	bl	800900e <USBD_CtlError>
 8008c40:	e004      	b.n	8008c4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 faae 	bl	80091a4 <USBD_CtlSendStatus>
 8008c48:	e000      	b.n	8008c4c <USBD_GetDescriptor+0x2cc>
    return;
 8008c4a:	bf00      	nop
  }
}
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop

08008c54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	889b      	ldrh	r3, [r3, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d131      	bne.n	8008cca <USBD_SetAddress+0x76>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d12d      	bne.n	8008cca <USBD_SetAddress+0x76>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	2b7f      	cmp	r3, #127	; 0x7f
 8008c74:	d829      	bhi.n	8008cca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	885b      	ldrh	r3, [r3, #2]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d104      	bne.n	8008c98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f9bc 	bl	800900e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c96:	e01d      	b.n	8008cd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7bfa      	ldrb	r2, [r7, #15]
 8008c9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fefb 	bl	8009aa0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa7a 	bl	80091a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d004      	beq.n	8008cc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbe:	e009      	b.n	8008cd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc8:	e004      	b.n	8008cd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f99e 	bl	800900e <USBD_CtlError>
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	885b      	ldrh	r3, [r3, #2]
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	4b4e      	ldr	r3, [pc, #312]	; (8008e2c <USBD_SetConfig+0x150>)
 8008cf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cf4:	4b4d      	ldr	r3, [pc, #308]	; (8008e2c <USBD_SetConfig+0x150>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d905      	bls.n	8008d08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f985 	bl	800900e <USBD_CtlError>
    return USBD_FAIL;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e08c      	b.n	8008e22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d002      	beq.n	8008d1a <USBD_SetConfig+0x3e>
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d029      	beq.n	8008d6c <USBD_SetConfig+0x90>
 8008d18:	e075      	b.n	8008e06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d1a:	4b44      	ldr	r3, [pc, #272]	; (8008e2c <USBD_SetConfig+0x150>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d020      	beq.n	8008d64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008d22:	4b42      	ldr	r3, [pc, #264]	; (8008e2c <USBD_SetConfig+0x150>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d2c:	4b3f      	ldr	r3, [pc, #252]	; (8008e2c <USBD_SetConfig+0x150>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7fe ffe7 	bl	8007d06 <USBD_SetClassConfig>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d008      	beq.n	8008d54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f962 	bl	800900e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d52:	e065      	b.n	8008e20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fa25 	bl	80091a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d62:	e05d      	b.n	8008e20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fa1d 	bl	80091a4 <USBD_CtlSendStatus>
      break;
 8008d6a:	e059      	b.n	8008e20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d6c:	4b2f      	ldr	r3, [pc, #188]	; (8008e2c <USBD_SetConfig+0x150>)
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d112      	bne.n	8008d9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d7c:	4b2b      	ldr	r3, [pc, #172]	; (8008e2c <USBD_SetConfig+0x150>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d86:	4b29      	ldr	r3, [pc, #164]	; (8008e2c <USBD_SetConfig+0x150>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7fe ffd6 	bl	8007d3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa06 	bl	80091a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d98:	e042      	b.n	8008e20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d9a:	4b24      	ldr	r3, [pc, #144]	; (8008e2c <USBD_SetConfig+0x150>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d02a      	beq.n	8008dfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7fe ffc4 	bl	8007d3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008db6:	4b1d      	ldr	r3, [pc, #116]	; (8008e2c <USBD_SetConfig+0x150>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dc0:	4b1a      	ldr	r3, [pc, #104]	; (8008e2c <USBD_SetConfig+0x150>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7fe ff9d 	bl	8007d06 <USBD_SetClassConfig>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00f      	beq.n	8008df6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f918 	bl	800900e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7fe ffa9 	bl	8007d3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008df4:	e014      	b.n	8008e20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f9d4 	bl	80091a4 <USBD_CtlSendStatus>
      break;
 8008dfc:	e010      	b.n	8008e20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f9d0 	bl	80091a4 <USBD_CtlSendStatus>
      break;
 8008e04:	e00c      	b.n	8008e20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f900 	bl	800900e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <USBD_SetConfig+0x150>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7fe ff92 	bl	8007d3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1e:	bf00      	nop
  }

  return ret;
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	2000027c 	.word	0x2000027c

08008e30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	88db      	ldrh	r3, [r3, #6]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d004      	beq.n	8008e4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f8e2 	bl	800900e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e4a:	e023      	b.n	8008e94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	dc02      	bgt.n	8008e5e <USBD_GetConfig+0x2e>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dc03      	bgt.n	8008e64 <USBD_GetConfig+0x34>
 8008e5c:	e015      	b.n	8008e8a <USBD_GetConfig+0x5a>
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d00b      	beq.n	8008e7a <USBD_GetConfig+0x4a>
 8008e62:	e012      	b.n	8008e8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f93c 	bl	80090f0 <USBD_CtlSendData>
        break;
 8008e78:	e00c      	b.n	8008e94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f934 	bl	80090f0 <USBD_CtlSendData>
        break;
 8008e88:	e004      	b.n	8008e94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f8be 	bl	800900e <USBD_CtlError>
        break;
 8008e92:	bf00      	nop
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d81e      	bhi.n	8008ef2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	88db      	ldrh	r3, [r3, #6]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d004      	beq.n	8008ec6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f8a5 	bl	800900e <USBD_CtlError>
        break;
 8008ec4:	e01a      	b.n	8008efc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d005      	beq.n	8008ee2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f043 0202 	orr.w	r2, r3, #2
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	330c      	adds	r3, #12
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f900 	bl	80090f0 <USBD_CtlSendData>
      break;
 8008ef0:	e004      	b.n	8008efc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f88a 	bl	800900e <USBD_CtlError>
      break;
 8008efa:	bf00      	nop
  }
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	885b      	ldrh	r3, [r3, #2]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d107      	bne.n	8008f26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f940 	bl	80091a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008f24:	e013      	b.n	8008f4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	885b      	ldrh	r3, [r3, #2]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d10b      	bne.n	8008f46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	889b      	ldrh	r3, [r3, #4]
 8008f32:	0a1b      	lsrs	r3, r3, #8
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f930 	bl	80091a4 <USBD_CtlSendStatus>
}
 8008f44:	e003      	b.n	8008f4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f860 	bl	800900e <USBD_CtlError>
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d80b      	bhi.n	8008f86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	885b      	ldrh	r3, [r3, #2]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d10c      	bne.n	8008f90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f910 	bl	80091a4 <USBD_CtlSendStatus>
      }
      break;
 8008f84:	e004      	b.n	8008f90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f840 	bl	800900e <USBD_CtlError>
      break;
 8008f8e:	e000      	b.n	8008f92 <USBD_ClrFeature+0x3c>
      break;
 8008f90:	bf00      	nop
  }
}
 8008f92:	bf00      	nop
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	781a      	ldrb	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	781a      	ldrb	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff fa41 	bl	800844c <SWAPBYTE>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff fa34 	bl	800844c <SWAPBYTE>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f7ff fa27 	bl	800844c <SWAPBYTE>
 8008ffe:	4603      	mov	r3, r0
 8009000:	461a      	mov	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	80da      	strh	r2, [r3, #6]
}
 8009006:	bf00      	nop
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009018:	2180      	movs	r1, #128	; 0x80
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fcd6 	bl	80099cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009020:	2100      	movs	r1, #0
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fcd2 	bl	80099cc <USBD_LL_StallEP>
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d036      	beq.n	80090b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800904a:	6938      	ldr	r0, [r7, #16]
 800904c:	f000 f836 	bl	80090bc <USBD_GetLen>
 8009050:	4603      	mov	r3, r0
 8009052:	3301      	adds	r3, #1
 8009054:	b29b      	uxth	r3, r3
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	4413      	add	r3, r2
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	7812      	ldrb	r2, [r2, #0]
 8009068:	701a      	strb	r2, [r3, #0]
  idx++;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	3301      	adds	r3, #1
 800906e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	4413      	add	r3, r2
 8009076:	2203      	movs	r2, #3
 8009078:	701a      	strb	r2, [r3, #0]
  idx++;
 800907a:	7dfb      	ldrb	r3, [r7, #23]
 800907c:	3301      	adds	r3, #1
 800907e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009080:	e013      	b.n	80090aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	4413      	add	r3, r2
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	7812      	ldrb	r2, [r2, #0]
 800908c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	3301      	adds	r3, #1
 8009092:	613b      	str	r3, [r7, #16]
    idx++;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	3301      	adds	r3, #1
 8009098:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	4413      	add	r3, r2
 80090a0:	2200      	movs	r2, #0
 80090a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
 80090a6:	3301      	adds	r3, #1
 80090a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e7      	bne.n	8009082 <USBD_GetString+0x52>
 80090b2:	e000      	b.n	80090b6 <USBD_GetString+0x86>
    return;
 80090b4:	bf00      	nop
  }
}
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80090cc:	e005      	b.n	80090da <USBD_GetLen+0x1e>
  {
    len++;
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	3301      	adds	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	3301      	adds	r3, #1
 80090d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1f5      	bne.n	80090ce <USBD_GetLen+0x12>
  }

  return len;
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2202      	movs	r2, #2
 8009100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	2100      	movs	r1, #0
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 fce1 	bl	8009ade <USBD_LL_Transmit>

  return USBD_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	2100      	movs	r1, #0
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 fcd0 	bl	8009ade <USBD_LL_Transmit>

  return USBD_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2203      	movs	r2, #3
 8009158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	2100      	movs	r1, #0
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 fcd4 	bl	8009b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	60f8      	str	r0, [r7, #12]
 800918a:	60b9      	str	r1, [r7, #8]
 800918c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	2100      	movs	r1, #0
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 fcc3 	bl	8009b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2204      	movs	r2, #4
 80091b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091b4:	2300      	movs	r3, #0
 80091b6:	2200      	movs	r2, #0
 80091b8:	2100      	movs	r1, #0
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fc8f 	bl	8009ade <USBD_LL_Transmit>

  return USBD_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2205      	movs	r2, #5
 80091d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091da:	2300      	movs	r3, #0
 80091dc:	2200      	movs	r2, #0
 80091de:	2100      	movs	r1, #0
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fc9d 	bl	8009b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80091f4:	2200      	movs	r2, #0
 80091f6:	4912      	ldr	r1, [pc, #72]	; (8009240 <MX_USB_DEVICE_Init+0x50>)
 80091f8:	4812      	ldr	r0, [pc, #72]	; (8009244 <MX_USB_DEVICE_Init+0x54>)
 80091fa:	f7fe fd07 	bl	8007c0c <USBD_Init>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009204:	f7f7 fffa 	bl	80011fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009208:	490f      	ldr	r1, [pc, #60]	; (8009248 <MX_USB_DEVICE_Init+0x58>)
 800920a:	480e      	ldr	r0, [pc, #56]	; (8009244 <MX_USB_DEVICE_Init+0x54>)
 800920c:	f7fe fd2e 	bl	8007c6c <USBD_RegisterClass>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009216:	f7f7 fff1 	bl	80011fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800921a:	490c      	ldr	r1, [pc, #48]	; (800924c <MX_USB_DEVICE_Init+0x5c>)
 800921c:	4809      	ldr	r0, [pc, #36]	; (8009244 <MX_USB_DEVICE_Init+0x54>)
 800921e:	f7fe fc1f 	bl	8007a60 <USBD_CDC_RegisterInterface>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009228:	f7f7 ffe8 	bl	80011fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800922c:	4805      	ldr	r0, [pc, #20]	; (8009244 <MX_USB_DEVICE_Init+0x54>)
 800922e:	f7fe fd53 	bl	8007cd8 <USBD_Start>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009238:	f7f7 ffe0 	bl	80011fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800923c:	bf00      	nop
 800923e:	bd80      	pop	{r7, pc}
 8009240:	200000bc 	.word	0x200000bc
 8009244:	20000280 	.word	0x20000280
 8009248:	20000028 	.word	0x20000028
 800924c:	200000a8 	.word	0x200000a8

08009250 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009254:	2200      	movs	r2, #0
 8009256:	4905      	ldr	r1, [pc, #20]	; (800926c <CDC_Init_FS+0x1c>)
 8009258:	4805      	ldr	r0, [pc, #20]	; (8009270 <CDC_Init_FS+0x20>)
 800925a:	f7fe fc1b 	bl	8007a94 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800925e:	4905      	ldr	r1, [pc, #20]	; (8009274 <CDC_Init_FS+0x24>)
 8009260:	4803      	ldr	r0, [pc, #12]	; (8009270 <CDC_Init_FS+0x20>)
 8009262:	f7fe fc39 	bl	8007ad8 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8009266:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009268:	4618      	mov	r0, r3
 800926a:	bd80      	pop	{r7, pc}
 800926c:	2000095c 	.word	0x2000095c
 8009270:	20000280 	.word	0x20000280
 8009274:	2000055c 	.word	0x2000055c

08009278 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800927c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800927e:	4618      	mov	r0, r3
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	71fb      	strb	r3, [r7, #7]
 8009294:	4613      	mov	r3, r2
 8009296:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	2b23      	cmp	r3, #35	; 0x23
 800929c:	d84a      	bhi.n	8009334 <CDC_Control_FS+0xac>
 800929e:	a201      	add	r2, pc, #4	; (adr r2, 80092a4 <CDC_Control_FS+0x1c>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	08009335 	.word	0x08009335
 80092a8:	08009335 	.word	0x08009335
 80092ac:	08009335 	.word	0x08009335
 80092b0:	08009335 	.word	0x08009335
 80092b4:	08009335 	.word	0x08009335
 80092b8:	08009335 	.word	0x08009335
 80092bc:	08009335 	.word	0x08009335
 80092c0:	08009335 	.word	0x08009335
 80092c4:	08009335 	.word	0x08009335
 80092c8:	08009335 	.word	0x08009335
 80092cc:	08009335 	.word	0x08009335
 80092d0:	08009335 	.word	0x08009335
 80092d4:	08009335 	.word	0x08009335
 80092d8:	08009335 	.word	0x08009335
 80092dc:	08009335 	.word	0x08009335
 80092e0:	08009335 	.word	0x08009335
 80092e4:	08009335 	.word	0x08009335
 80092e8:	08009335 	.word	0x08009335
 80092ec:	08009335 	.word	0x08009335
 80092f0:	08009335 	.word	0x08009335
 80092f4:	08009335 	.word	0x08009335
 80092f8:	08009335 	.word	0x08009335
 80092fc:	08009335 	.word	0x08009335
 8009300:	08009335 	.word	0x08009335
 8009304:	08009335 	.word	0x08009335
 8009308:	08009335 	.word	0x08009335
 800930c:	08009335 	.word	0x08009335
 8009310:	08009335 	.word	0x08009335
 8009314:	08009335 	.word	0x08009335
 8009318:	08009335 	.word	0x08009335
 800931c:	08009335 	.word	0x08009335
 8009320:	08009335 	.word	0x08009335
 8009324:	08009335 	.word	0x08009335
 8009328:	08009335 	.word	0x08009335
 800932c:	08009335 	.word	0x08009335
 8009330:	08009335 	.word	0x08009335
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8009334:	bf00      	nop
    }

    return (USBD_OK);
 8009336:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	4805      	ldr	r0, [pc, #20]	; (8009368 <CDC_Receive_FS+0x24>)
 8009352:	f7fe fbc1 	bl	8007ad8 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009356:	4804      	ldr	r0, [pc, #16]	; (8009368 <CDC_Receive_FS+0x24>)
 8009358:	f7fe fc22 	bl	8007ba0 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800935c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20000280 	.word	0x20000280

0800936c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800937c:	4b0d      	ldr	r3, [pc, #52]	; (80093b4 <CDC_Transmit_FS+0x48>)
 800937e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009382:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800938e:	2301      	movs	r3, #1
 8009390:	e00b      	b.n	80093aa <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009392:	887b      	ldrh	r3, [r7, #2]
 8009394:	461a      	mov	r2, r3
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	4806      	ldr	r0, [pc, #24]	; (80093b4 <CDC_Transmit_FS+0x48>)
 800939a:	f7fe fb7b 	bl	8007a94 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800939e:	4805      	ldr	r0, [pc, #20]	; (80093b4 <CDC_Transmit_FS+0x48>)
 80093a0:	f7fe fbb8 	bl	8007b14 <USBD_CDC_TransmitPacket>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000280 	.word	0x20000280

080093b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4613      	mov	r3, r2
 80093c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80093ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
	...

080093dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2212      	movs	r2, #18
 80093ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093ee:	4b03      	ldr	r3, [pc, #12]	; (80093fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	200000d8 	.word	0x200000d8

08009400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	6039      	str	r1, [r7, #0]
 800940a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2204      	movs	r2, #4
 8009410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009412:	4b03      	ldr	r3, [pc, #12]	; (8009420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009414:	4618      	mov	r0, r3
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	200000ec 	.word	0x200000ec

08009424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	6039      	str	r1, [r7, #0]
 800942e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009430:	79fb      	ldrb	r3, [r7, #7]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d105      	bne.n	8009442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	4907      	ldr	r1, [pc, #28]	; (8009458 <USBD_FS_ProductStrDescriptor+0x34>)
 800943a:	4808      	ldr	r0, [pc, #32]	; (800945c <USBD_FS_ProductStrDescriptor+0x38>)
 800943c:	f7ff fdf8 	bl	8009030 <USBD_GetString>
 8009440:	e004      	b.n	800944c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	4904      	ldr	r1, [pc, #16]	; (8009458 <USBD_FS_ProductStrDescriptor+0x34>)
 8009446:	4805      	ldr	r0, [pc, #20]	; (800945c <USBD_FS_ProductStrDescriptor+0x38>)
 8009448:	f7ff fdf2 	bl	8009030 <USBD_GetString>
  }
  return USBD_StrDesc;
 800944c:	4b02      	ldr	r3, [pc, #8]	; (8009458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20000d5c 	.word	0x20000d5c
 800945c:	0800ac28 	.word	0x0800ac28

08009460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	4904      	ldr	r1, [pc, #16]	; (8009480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009470:	4804      	ldr	r0, [pc, #16]	; (8009484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009472:	f7ff fddd 	bl	8009030 <USBD_GetString>
  return USBD_StrDesc;
 8009476:	4b02      	ldr	r3, [pc, #8]	; (8009480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20000d5c 	.word	0x20000d5c
 8009484:	0800ac40 	.word	0x0800ac40

08009488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	6039      	str	r1, [r7, #0]
 8009492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	221a      	movs	r2, #26
 8009498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800949a:	f000 f843 	bl	8009524 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800949e:	4b02      	ldr	r3, [pc, #8]	; (80094a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	200000f0 	.word	0x200000f0

080094ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	6039      	str	r1, [r7, #0]
 80094b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d105      	bne.n	80094ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	4907      	ldr	r1, [pc, #28]	; (80094e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094c2:	4808      	ldr	r0, [pc, #32]	; (80094e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094c4:	f7ff fdb4 	bl	8009030 <USBD_GetString>
 80094c8:	e004      	b.n	80094d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	4904      	ldr	r1, [pc, #16]	; (80094e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094ce:	4805      	ldr	r0, [pc, #20]	; (80094e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094d0:	f7ff fdae 	bl	8009030 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094d4:	4b02      	ldr	r3, [pc, #8]	; (80094e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20000d5c 	.word	0x20000d5c
 80094e4:	0800ac54 	.word	0x0800ac54

080094e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	6039      	str	r1, [r7, #0]
 80094f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d105      	bne.n	8009506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	4907      	ldr	r1, [pc, #28]	; (800951c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094fe:	4808      	ldr	r0, [pc, #32]	; (8009520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009500:	f7ff fd96 	bl	8009030 <USBD_GetString>
 8009504:	e004      	b.n	8009510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	4904      	ldr	r1, [pc, #16]	; (800951c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800950a:	4805      	ldr	r0, [pc, #20]	; (8009520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800950c:	f7ff fd90 	bl	8009030 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009510:	4b02      	ldr	r3, [pc, #8]	; (800951c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20000d5c 	.word	0x20000d5c
 8009520:	0800ac60 	.word	0x0800ac60

08009524 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <Get_SerialNum+0x44>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009530:	4b0e      	ldr	r3, [pc, #56]	; (800956c <Get_SerialNum+0x48>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009536:	4b0e      	ldr	r3, [pc, #56]	; (8009570 <Get_SerialNum+0x4c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4413      	add	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d009      	beq.n	800955e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800954a:	2208      	movs	r2, #8
 800954c:	4909      	ldr	r1, [pc, #36]	; (8009574 <Get_SerialNum+0x50>)
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 f814 	bl	800957c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009554:	2204      	movs	r2, #4
 8009556:	4908      	ldr	r1, [pc, #32]	; (8009578 <Get_SerialNum+0x54>)
 8009558:	68b8      	ldr	r0, [r7, #8]
 800955a:	f000 f80f 	bl	800957c <IntToUnicode>
  }
}
 800955e:	bf00      	nop
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	1fff7a10 	.word	0x1fff7a10
 800956c:	1fff7a14 	.word	0x1fff7a14
 8009570:	1fff7a18 	.word	0x1fff7a18
 8009574:	200000f2 	.word	0x200000f2
 8009578:	20000102 	.word	0x20000102

0800957c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800958e:	2300      	movs	r3, #0
 8009590:	75fb      	strb	r3, [r7, #23]
 8009592:	e027      	b.n	80095e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	0f1b      	lsrs	r3, r3, #28
 8009598:	2b09      	cmp	r3, #9
 800959a:	d80b      	bhi.n	80095b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	0f1b      	lsrs	r3, r3, #28
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	005b      	lsls	r3, r3, #1
 80095a6:	4619      	mov	r1, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	440b      	add	r3, r1
 80095ac:	3230      	adds	r2, #48	; 0x30
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	e00a      	b.n	80095ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	0f1b      	lsrs	r3, r3, #28
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	4619      	mov	r1, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	440b      	add	r3, r1
 80095c4:	3237      	adds	r2, #55	; 0x37
 80095c6:	b2d2      	uxtb	r2, r2
 80095c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	3301      	adds	r3, #1
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	4413      	add	r3, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095de:	7dfb      	ldrb	r3, [r7, #23]
 80095e0:	3301      	adds	r3, #1
 80095e2:	75fb      	strb	r3, [r7, #23]
 80095e4:	7dfa      	ldrb	r2, [r7, #23]
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d3d3      	bcc.n	8009594 <IntToUnicode+0x18>
  }
}
 80095ec:	bf00      	nop
 80095ee:	bf00      	nop
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
	...

080095fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08a      	sub	sp, #40	; 0x28
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009604:	f107 0314 	add.w	r3, r7, #20
 8009608:	2200      	movs	r2, #0
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	605a      	str	r2, [r3, #4]
 800960e:	609a      	str	r2, [r3, #8]
 8009610:	60da      	str	r2, [r3, #12]
 8009612:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800961c:	d13a      	bne.n	8009694 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800961e:	2300      	movs	r3, #0
 8009620:	613b      	str	r3, [r7, #16]
 8009622:	4b1e      	ldr	r3, [pc, #120]	; (800969c <HAL_PCD_MspInit+0xa0>)
 8009624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009626:	4a1d      	ldr	r2, [pc, #116]	; (800969c <HAL_PCD_MspInit+0xa0>)
 8009628:	f043 0301 	orr.w	r3, r3, #1
 800962c:	6313      	str	r3, [r2, #48]	; 0x30
 800962e:	4b1b      	ldr	r3, [pc, #108]	; (800969c <HAL_PCD_MspInit+0xa0>)
 8009630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800963a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800963e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009640:	2302      	movs	r3, #2
 8009642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009644:	2300      	movs	r3, #0
 8009646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009648:	2303      	movs	r3, #3
 800964a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800964c:	230a      	movs	r3, #10
 800964e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009650:	f107 0314 	add.w	r3, r7, #20
 8009654:	4619      	mov	r1, r3
 8009656:	4812      	ldr	r0, [pc, #72]	; (80096a0 <HAL_PCD_MspInit+0xa4>)
 8009658:	f7f8 feda 	bl	8002410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <HAL_PCD_MspInit+0xa0>)
 800965e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009660:	4a0e      	ldr	r2, [pc, #56]	; (800969c <HAL_PCD_MspInit+0xa0>)
 8009662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009666:	6353      	str	r3, [r2, #52]	; 0x34
 8009668:	2300      	movs	r3, #0
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	4b0b      	ldr	r3, [pc, #44]	; (800969c <HAL_PCD_MspInit+0xa0>)
 800966e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009670:	4a0a      	ldr	r2, [pc, #40]	; (800969c <HAL_PCD_MspInit+0xa0>)
 8009672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009676:	6453      	str	r3, [r2, #68]	; 0x44
 8009678:	4b08      	ldr	r3, [pc, #32]	; (800969c <HAL_PCD_MspInit+0xa0>)
 800967a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009684:	2200      	movs	r2, #0
 8009686:	2100      	movs	r1, #0
 8009688:	2043      	movs	r0, #67	; 0x43
 800968a:	f7f8 fd2a 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800968e:	2043      	movs	r0, #67	; 0x43
 8009690:	f7f8 fd43 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009694:	bf00      	nop
 8009696:	3728      	adds	r7, #40	; 0x28
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	40023800 	.word	0x40023800
 80096a0:	40020000 	.word	0x40020000

080096a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fe fb59 	bl	8007d72 <USBD_LL_SetupStage>
}
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80096da:	78fa      	ldrb	r2, [r7, #3]
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	4613      	mov	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	4619      	mov	r1, r3
 80096f2:	f7fe fb93 	bl	8007e1c <USBD_LL_DataOutStage>
}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009710:	78fa      	ldrb	r2, [r7, #3]
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	4613      	mov	r3, r2
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	4413      	add	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	440b      	add	r3, r1
 800971e:	334c      	adds	r3, #76	; 0x4c
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	4619      	mov	r1, r3
 8009726:	f7fe fc2c 	bl	8007f82 <USBD_LL_DataInStage>
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fd60 	bl	8008206 <USBD_LL_SOF>
}
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009756:	2301      	movs	r3, #1
 8009758:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d001      	beq.n	8009766 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009762:	f7f7 fd4b 	bl	80011fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800976c:	7bfa      	ldrb	r2, [r7, #15]
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7fe fd0a 	bl	800818a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe fcb2 	bl	80080e6 <USBD_LL_Reset>
}
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe fd05 	bl	80081aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	6812      	ldr	r2, [r2, #0]
 80097ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097b2:	f043 0301 	orr.w	r3, r3, #1
 80097b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d005      	beq.n	80097cc <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097c0:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <HAL_PCD_SuspendCallback+0x48>)
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	4a03      	ldr	r2, [pc, #12]	; (80097d4 <HAL_PCD_SuspendCallback+0x48>)
 80097c6:	f043 0306 	orr.w	r3, r3, #6
 80097ca:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 80097cc:	bf00      	nop
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	e000ed00 	.word	0xe000ed00

080097d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fcf5 	bl	80081d6 <USBD_LL_Resume>
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009806:	78fa      	ldrb	r2, [r7, #3]
 8009808:	4611      	mov	r1, r2
 800980a:	4618      	mov	r0, r3
 800980c:	f7fe fd4d 	bl	80082aa <USBD_LL_IsoOUTIncomplete>
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800982a:	78fa      	ldrb	r2, [r7, #3]
 800982c:	4611      	mov	r1, r2
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe fd09 	bl	8008246 <USBD_LL_IsoINIncomplete>
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe fd5f 	bl	800830e <USBD_LL_DevConnected>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fd5c 	bl	8008324 <USBD_LL_DevDisconnected>
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d13c      	bne.n	80098fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009884:	4a20      	ldr	r2, [pc, #128]	; (8009908 <USBD_LL_Init+0x94>)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a1e      	ldr	r2, [pc, #120]	; (8009908 <USBD_LL_Init+0x94>)
 8009890:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009894:	4b1c      	ldr	r3, [pc, #112]	; (8009908 <USBD_LL_Init+0x94>)
 8009896:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800989a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800989c:	4b1a      	ldr	r3, [pc, #104]	; (8009908 <USBD_LL_Init+0x94>)
 800989e:	2204      	movs	r2, #4
 80098a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80098a2:	4b19      	ldr	r3, [pc, #100]	; (8009908 <USBD_LL_Init+0x94>)
 80098a4:	2202      	movs	r2, #2
 80098a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80098a8:	4b17      	ldr	r3, [pc, #92]	; (8009908 <USBD_LL_Init+0x94>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098ae:	4b16      	ldr	r3, [pc, #88]	; (8009908 <USBD_LL_Init+0x94>)
 80098b0:	2202      	movs	r2, #2
 80098b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80098b4:	4b14      	ldr	r3, [pc, #80]	; (8009908 <USBD_LL_Init+0x94>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80098ba:	4b13      	ldr	r3, [pc, #76]	; (8009908 <USBD_LL_Init+0x94>)
 80098bc:	2200      	movs	r2, #0
 80098be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80098c0:	4b11      	ldr	r3, [pc, #68]	; (8009908 <USBD_LL_Init+0x94>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80098c6:	4b10      	ldr	r3, [pc, #64]	; (8009908 <USBD_LL_Init+0x94>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80098cc:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <USBD_LL_Init+0x94>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80098d2:	480d      	ldr	r0, [pc, #52]	; (8009908 <USBD_LL_Init+0x94>)
 80098d4:	f7f9 fedf 	bl	8003696 <HAL_PCD_Init>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80098de:	f7f7 fc8d 	bl	80011fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80098e2:	2180      	movs	r1, #128	; 0x80
 80098e4:	4808      	ldr	r0, [pc, #32]	; (8009908 <USBD_LL_Init+0x94>)
 80098e6:	f7fb f936 	bl	8004b56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80098ea:	2240      	movs	r2, #64	; 0x40
 80098ec:	2100      	movs	r1, #0
 80098ee:	4806      	ldr	r0, [pc, #24]	; (8009908 <USBD_LL_Init+0x94>)
 80098f0:	f7fb f8ea 	bl	8004ac8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80098f4:	2280      	movs	r2, #128	; 0x80
 80098f6:	2101      	movs	r1, #1
 80098f8:	4803      	ldr	r0, [pc, #12]	; (8009908 <USBD_LL_Init+0x94>)
 80098fa:	f7fb f8e5 	bl	8004ac8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	20000f5c 	.word	0x20000f5c

0800990c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009922:	4618      	mov	r0, r3
 8009924:	f7f9 ffd4 	bl	80038d0 <HAL_PCD_Start>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	4618      	mov	r0, r3
 8009930:	f000 f942 	bl	8009bb8 <USBD_Get_USB_Status>
 8009934:	4603      	mov	r3, r0
 8009936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009938:	7bbb      	ldrb	r3, [r7, #14]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	4608      	mov	r0, r1
 800994c:	4611      	mov	r1, r2
 800994e:	461a      	mov	r2, r3
 8009950:	4603      	mov	r3, r0
 8009952:	70fb      	strb	r3, [r7, #3]
 8009954:	460b      	mov	r3, r1
 8009956:	70bb      	strb	r3, [r7, #2]
 8009958:	4613      	mov	r3, r2
 800995a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800996a:	78bb      	ldrb	r3, [r7, #2]
 800996c:	883a      	ldrh	r2, [r7, #0]
 800996e:	78f9      	ldrb	r1, [r7, #3]
 8009970:	f7fa fca5 	bl	80042be <HAL_PCD_EP_Open>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	4618      	mov	r0, r3
 800997c:	f000 f91c 	bl	8009bb8 <USBD_Get_USB_Status>
 8009980:	4603      	mov	r3, r0
 8009982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009984:	7bbb      	ldrb	r3, [r7, #14]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099a8:	78fa      	ldrb	r2, [r7, #3]
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fa fcee 	bl	800438e <HAL_PCD_EP_Close>
 80099b2:	4603      	mov	r3, r0
 80099b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 f8fd 	bl	8009bb8 <USBD_Get_USB_Status>
 80099be:	4603      	mov	r3, r0
 80099c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099e6:	78fa      	ldrb	r2, [r7, #3]
 80099e8:	4611      	mov	r1, r2
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fa fdc6 	bl	800457c <HAL_PCD_EP_SetStall>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 f8de 	bl	8009bb8 <USBD_Get_USB_Status>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a24:	78fa      	ldrb	r2, [r7, #3]
 8009a26:	4611      	mov	r1, r2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fa fe0b 	bl	8004644 <HAL_PCD_EP_ClrStall>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 f8bf 	bl	8009bb8 <USBD_Get_USB_Status>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da0b      	bge.n	8009a7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	440b      	add	r3, r1
 8009a76:	333e      	adds	r3, #62	; 0x3e
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	e00b      	b.n	8009a94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a82:	68f9      	ldr	r1, [r7, #12]
 8009a84:	4613      	mov	r3, r2
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	440b      	add	r3, r1
 8009a8e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009a92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009aba:	78fa      	ldrb	r2, [r7, #3]
 8009abc:	4611      	mov	r1, r2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fa fbd8 	bl	8004274 <HAL_PCD_SetAddress>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 f874 	bl	8009bb8 <USBD_Get_USB_Status>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b086      	sub	sp, #24
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	603b      	str	r3, [r7, #0]
 8009aea:	460b      	mov	r3, r1
 8009aec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009afc:	7af9      	ldrb	r1, [r7, #11]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	f7fa fcf1 	bl	80044e8 <HAL_PCD_EP_Transmit>
 8009b06:	4603      	mov	r3, r0
 8009b08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 f853 	bl	8009bb8 <USBD_Get_USB_Status>
 8009b12:	4603      	mov	r3, r0
 8009b14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b16:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	607a      	str	r2, [r7, #4]
 8009b2a:	603b      	str	r3, [r7, #0]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b3e:	7af9      	ldrb	r1, [r7, #11]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	f7fa fc6d 	bl	8004422 <HAL_PCD_EP_Receive>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 f832 	bl	8009bb8 <USBD_Get_USB_Status>
 8009b54:	4603      	mov	r3, r0
 8009b56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b58:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b082      	sub	sp, #8
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b74:	78fa      	ldrb	r2, [r7, #3]
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fa fc9d 	bl	80044b8 <HAL_PCD_EP_GetRxCount>
 8009b7e:	4603      	mov	r3, r0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b90:	4b03      	ldr	r3, [pc, #12]	; (8009ba0 <USBD_static_malloc+0x18>)
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	20001468 	.word	0x20001468

08009ba4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]

}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d817      	bhi.n	8009bfc <USBD_Get_USB_Status+0x44>
 8009bcc:	a201      	add	r2, pc, #4	; (adr r2, 8009bd4 <USBD_Get_USB_Status+0x1c>)
 8009bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd2:	bf00      	nop
 8009bd4:	08009be5 	.word	0x08009be5
 8009bd8:	08009beb 	.word	0x08009beb
 8009bdc:	08009bf1 	.word	0x08009bf1
 8009be0:	08009bf7 	.word	0x08009bf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	73fb      	strb	r3, [r7, #15]
    break;
 8009be8:	e00b      	b.n	8009c02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bea:	2303      	movs	r3, #3
 8009bec:	73fb      	strb	r3, [r7, #15]
    break;
 8009bee:	e008      	b.n	8009c02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf4:	e005      	b.n	8009c02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bfa:	e002      	b.n	8009c02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009c00:	bf00      	nop
  }
  return usb_status;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <malloc>:
 8009c10:	4b02      	ldr	r3, [pc, #8]	; (8009c1c <malloc+0xc>)
 8009c12:	4601      	mov	r1, r0
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	f000 b82b 	b.w	8009c70 <_malloc_r>
 8009c1a:	bf00      	nop
 8009c1c:	20000158 	.word	0x20000158

08009c20 <free>:
 8009c20:	4b02      	ldr	r3, [pc, #8]	; (8009c2c <free+0xc>)
 8009c22:	4601      	mov	r1, r0
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	f000 b923 	b.w	8009e70 <_free_r>
 8009c2a:	bf00      	nop
 8009c2c:	20000158 	.word	0x20000158

08009c30 <sbrk_aligned>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	4e0e      	ldr	r6, [pc, #56]	; (8009c6c <sbrk_aligned+0x3c>)
 8009c34:	460c      	mov	r4, r1
 8009c36:	6831      	ldr	r1, [r6, #0]
 8009c38:	4605      	mov	r5, r0
 8009c3a:	b911      	cbnz	r1, 8009c42 <sbrk_aligned+0x12>
 8009c3c:	f000 f8dc 	bl	8009df8 <_sbrk_r>
 8009c40:	6030      	str	r0, [r6, #0]
 8009c42:	4621      	mov	r1, r4
 8009c44:	4628      	mov	r0, r5
 8009c46:	f000 f8d7 	bl	8009df8 <_sbrk_r>
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	d00a      	beq.n	8009c64 <sbrk_aligned+0x34>
 8009c4e:	1cc4      	adds	r4, r0, #3
 8009c50:	f024 0403 	bic.w	r4, r4, #3
 8009c54:	42a0      	cmp	r0, r4
 8009c56:	d007      	beq.n	8009c68 <sbrk_aligned+0x38>
 8009c58:	1a21      	subs	r1, r4, r0
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f000 f8cc 	bl	8009df8 <_sbrk_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d101      	bne.n	8009c68 <sbrk_aligned+0x38>
 8009c64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	2000168c 	.word	0x2000168c

08009c70 <_malloc_r>:
 8009c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c74:	1ccd      	adds	r5, r1, #3
 8009c76:	f025 0503 	bic.w	r5, r5, #3
 8009c7a:	3508      	adds	r5, #8
 8009c7c:	2d0c      	cmp	r5, #12
 8009c7e:	bf38      	it	cc
 8009c80:	250c      	movcc	r5, #12
 8009c82:	2d00      	cmp	r5, #0
 8009c84:	4607      	mov	r7, r0
 8009c86:	db01      	blt.n	8009c8c <_malloc_r+0x1c>
 8009c88:	42a9      	cmp	r1, r5
 8009c8a:	d905      	bls.n	8009c98 <_malloc_r+0x28>
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	2600      	movs	r6, #0
 8009c92:	4630      	mov	r0, r6
 8009c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d6c <_malloc_r+0xfc>
 8009c9c:	f000 f868 	bl	8009d70 <__malloc_lock>
 8009ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ca4:	461c      	mov	r4, r3
 8009ca6:	bb5c      	cbnz	r4, 8009d00 <_malloc_r+0x90>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4638      	mov	r0, r7
 8009cac:	f7ff ffc0 	bl	8009c30 <sbrk_aligned>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	d155      	bne.n	8009d62 <_malloc_r+0xf2>
 8009cb6:	f8d8 4000 	ldr.w	r4, [r8]
 8009cba:	4626      	mov	r6, r4
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	d145      	bne.n	8009d4c <_malloc_r+0xdc>
 8009cc0:	2c00      	cmp	r4, #0
 8009cc2:	d048      	beq.n	8009d56 <_malloc_r+0xe6>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4638      	mov	r0, r7
 8009cca:	eb04 0903 	add.w	r9, r4, r3
 8009cce:	f000 f893 	bl	8009df8 <_sbrk_r>
 8009cd2:	4581      	cmp	r9, r0
 8009cd4:	d13f      	bne.n	8009d56 <_malloc_r+0xe6>
 8009cd6:	6821      	ldr	r1, [r4, #0]
 8009cd8:	1a6d      	subs	r5, r5, r1
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4638      	mov	r0, r7
 8009cde:	f7ff ffa7 	bl	8009c30 <sbrk_aligned>
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d037      	beq.n	8009d56 <_malloc_r+0xe6>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	442b      	add	r3, r5
 8009cea:	6023      	str	r3, [r4, #0]
 8009cec:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d038      	beq.n	8009d66 <_malloc_r+0xf6>
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	42a2      	cmp	r2, r4
 8009cf8:	d12b      	bne.n	8009d52 <_malloc_r+0xe2>
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	605a      	str	r2, [r3, #4]
 8009cfe:	e00f      	b.n	8009d20 <_malloc_r+0xb0>
 8009d00:	6822      	ldr	r2, [r4, #0]
 8009d02:	1b52      	subs	r2, r2, r5
 8009d04:	d41f      	bmi.n	8009d46 <_malloc_r+0xd6>
 8009d06:	2a0b      	cmp	r2, #11
 8009d08:	d917      	bls.n	8009d3a <_malloc_r+0xca>
 8009d0a:	1961      	adds	r1, r4, r5
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	6025      	str	r5, [r4, #0]
 8009d10:	bf18      	it	ne
 8009d12:	6059      	strne	r1, [r3, #4]
 8009d14:	6863      	ldr	r3, [r4, #4]
 8009d16:	bf08      	it	eq
 8009d18:	f8c8 1000 	streq.w	r1, [r8]
 8009d1c:	5162      	str	r2, [r4, r5]
 8009d1e:	604b      	str	r3, [r1, #4]
 8009d20:	4638      	mov	r0, r7
 8009d22:	f104 060b 	add.w	r6, r4, #11
 8009d26:	f000 f829 	bl	8009d7c <__malloc_unlock>
 8009d2a:	f026 0607 	bic.w	r6, r6, #7
 8009d2e:	1d23      	adds	r3, r4, #4
 8009d30:	1af2      	subs	r2, r6, r3
 8009d32:	d0ae      	beq.n	8009c92 <_malloc_r+0x22>
 8009d34:	1b9b      	subs	r3, r3, r6
 8009d36:	50a3      	str	r3, [r4, r2]
 8009d38:	e7ab      	b.n	8009c92 <_malloc_r+0x22>
 8009d3a:	42a3      	cmp	r3, r4
 8009d3c:	6862      	ldr	r2, [r4, #4]
 8009d3e:	d1dd      	bne.n	8009cfc <_malloc_r+0x8c>
 8009d40:	f8c8 2000 	str.w	r2, [r8]
 8009d44:	e7ec      	b.n	8009d20 <_malloc_r+0xb0>
 8009d46:	4623      	mov	r3, r4
 8009d48:	6864      	ldr	r4, [r4, #4]
 8009d4a:	e7ac      	b.n	8009ca6 <_malloc_r+0x36>
 8009d4c:	4634      	mov	r4, r6
 8009d4e:	6876      	ldr	r6, [r6, #4]
 8009d50:	e7b4      	b.n	8009cbc <_malloc_r+0x4c>
 8009d52:	4613      	mov	r3, r2
 8009d54:	e7cc      	b.n	8009cf0 <_malloc_r+0x80>
 8009d56:	230c      	movs	r3, #12
 8009d58:	603b      	str	r3, [r7, #0]
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	f000 f80e 	bl	8009d7c <__malloc_unlock>
 8009d60:	e797      	b.n	8009c92 <_malloc_r+0x22>
 8009d62:	6025      	str	r5, [r4, #0]
 8009d64:	e7dc      	b.n	8009d20 <_malloc_r+0xb0>
 8009d66:	605b      	str	r3, [r3, #4]
 8009d68:	deff      	udf	#255	; 0xff
 8009d6a:	bf00      	nop
 8009d6c:	20001688 	.word	0x20001688

08009d70 <__malloc_lock>:
 8009d70:	4801      	ldr	r0, [pc, #4]	; (8009d78 <__malloc_lock+0x8>)
 8009d72:	f000 b87b 	b.w	8009e6c <__retarget_lock_acquire_recursive>
 8009d76:	bf00      	nop
 8009d78:	200017cc 	.word	0x200017cc

08009d7c <__malloc_unlock>:
 8009d7c:	4801      	ldr	r0, [pc, #4]	; (8009d84 <__malloc_unlock+0x8>)
 8009d7e:	f000 b876 	b.w	8009e6e <__retarget_lock_release_recursive>
 8009d82:	bf00      	nop
 8009d84:	200017cc 	.word	0x200017cc

08009d88 <siprintf>:
 8009d88:	b40e      	push	{r1, r2, r3}
 8009d8a:	b500      	push	{lr}
 8009d8c:	b09c      	sub	sp, #112	; 0x70
 8009d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8009d90:	9002      	str	r0, [sp, #8]
 8009d92:	9006      	str	r0, [sp, #24]
 8009d94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d98:	4809      	ldr	r0, [pc, #36]	; (8009dc0 <siprintf+0x38>)
 8009d9a:	9107      	str	r1, [sp, #28]
 8009d9c:	9104      	str	r1, [sp, #16]
 8009d9e:	4909      	ldr	r1, [pc, #36]	; (8009dc4 <siprintf+0x3c>)
 8009da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da4:	9105      	str	r1, [sp, #20]
 8009da6:	6800      	ldr	r0, [r0, #0]
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	a902      	add	r1, sp, #8
 8009dac:	f000 f906 	bl	8009fbc <_svfiprintf_r>
 8009db0:	9b02      	ldr	r3, [sp, #8]
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]
 8009db6:	b01c      	add	sp, #112	; 0x70
 8009db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dbc:	b003      	add	sp, #12
 8009dbe:	4770      	bx	lr
 8009dc0:	20000158 	.word	0x20000158
 8009dc4:	ffff0208 	.word	0xffff0208

08009dc8 <memset>:
 8009dc8:	4402      	add	r2, r0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d100      	bne.n	8009dd2 <memset+0xa>
 8009dd0:	4770      	bx	lr
 8009dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009dd6:	e7f9      	b.n	8009dcc <memset+0x4>

08009dd8 <strcat>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	4602      	mov	r2, r0
 8009ddc:	7814      	ldrb	r4, [r2, #0]
 8009dde:	4613      	mov	r3, r2
 8009de0:	3201      	adds	r2, #1
 8009de2:	2c00      	cmp	r4, #0
 8009de4:	d1fa      	bne.n	8009ddc <strcat+0x4>
 8009de6:	3b01      	subs	r3, #1
 8009de8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	d1f9      	bne.n	8009de8 <strcat+0x10>
 8009df4:	bd10      	pop	{r4, pc}
	...

08009df8 <_sbrk_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d06      	ldr	r5, [pc, #24]	; (8009e14 <_sbrk_r+0x1c>)
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	f7f7 fb20 	bl	8001448 <_sbrk>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_sbrk_r+0x1a>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_sbrk_r+0x1a>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	200017c8 	.word	0x200017c8

08009e18 <__errno>:
 8009e18:	4b01      	ldr	r3, [pc, #4]	; (8009e20 <__errno+0x8>)
 8009e1a:	6818      	ldr	r0, [r3, #0]
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	20000158 	.word	0x20000158

08009e24 <__libc_init_array>:
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	4d0d      	ldr	r5, [pc, #52]	; (8009e5c <__libc_init_array+0x38>)
 8009e28:	4c0d      	ldr	r4, [pc, #52]	; (8009e60 <__libc_init_array+0x3c>)
 8009e2a:	1b64      	subs	r4, r4, r5
 8009e2c:	10a4      	asrs	r4, r4, #2
 8009e2e:	2600      	movs	r6, #0
 8009e30:	42a6      	cmp	r6, r4
 8009e32:	d109      	bne.n	8009e48 <__libc_init_array+0x24>
 8009e34:	4d0b      	ldr	r5, [pc, #44]	; (8009e64 <__libc_init_array+0x40>)
 8009e36:	4c0c      	ldr	r4, [pc, #48]	; (8009e68 <__libc_init_array+0x44>)
 8009e38:	f000 fe24 	bl	800aa84 <_init>
 8009e3c:	1b64      	subs	r4, r4, r5
 8009e3e:	10a4      	asrs	r4, r4, #2
 8009e40:	2600      	movs	r6, #0
 8009e42:	42a6      	cmp	r6, r4
 8009e44:	d105      	bne.n	8009e52 <__libc_init_array+0x2e>
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4c:	4798      	blx	r3
 8009e4e:	3601      	adds	r6, #1
 8009e50:	e7ee      	b.n	8009e30 <__libc_init_array+0xc>
 8009e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e56:	4798      	blx	r3
 8009e58:	3601      	adds	r6, #1
 8009e5a:	e7f2      	b.n	8009e42 <__libc_init_array+0x1e>
 8009e5c:	0800ad40 	.word	0x0800ad40
 8009e60:	0800ad40 	.word	0x0800ad40
 8009e64:	0800ad40 	.word	0x0800ad40
 8009e68:	0800ad44 	.word	0x0800ad44

08009e6c <__retarget_lock_acquire_recursive>:
 8009e6c:	4770      	bx	lr

08009e6e <__retarget_lock_release_recursive>:
 8009e6e:	4770      	bx	lr

08009e70 <_free_r>:
 8009e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e72:	2900      	cmp	r1, #0
 8009e74:	d044      	beq.n	8009f00 <_free_r+0x90>
 8009e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7a:	9001      	str	r0, [sp, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e82:	bfb8      	it	lt
 8009e84:	18e4      	addlt	r4, r4, r3
 8009e86:	f7ff ff73 	bl	8009d70 <__malloc_lock>
 8009e8a:	4a1e      	ldr	r2, [pc, #120]	; (8009f04 <_free_r+0x94>)
 8009e8c:	9801      	ldr	r0, [sp, #4]
 8009e8e:	6813      	ldr	r3, [r2, #0]
 8009e90:	b933      	cbnz	r3, 8009ea0 <_free_r+0x30>
 8009e92:	6063      	str	r3, [r4, #4]
 8009e94:	6014      	str	r4, [r2, #0]
 8009e96:	b003      	add	sp, #12
 8009e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e9c:	f7ff bf6e 	b.w	8009d7c <__malloc_unlock>
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	d908      	bls.n	8009eb6 <_free_r+0x46>
 8009ea4:	6825      	ldr	r5, [r4, #0]
 8009ea6:	1961      	adds	r1, r4, r5
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	bf01      	itttt	eq
 8009eac:	6819      	ldreq	r1, [r3, #0]
 8009eae:	685b      	ldreq	r3, [r3, #4]
 8009eb0:	1949      	addeq	r1, r1, r5
 8009eb2:	6021      	streq	r1, [r4, #0]
 8009eb4:	e7ed      	b.n	8009e92 <_free_r+0x22>
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	b10b      	cbz	r3, 8009ec0 <_free_r+0x50>
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	d9fa      	bls.n	8009eb6 <_free_r+0x46>
 8009ec0:	6811      	ldr	r1, [r2, #0]
 8009ec2:	1855      	adds	r5, r2, r1
 8009ec4:	42a5      	cmp	r5, r4
 8009ec6:	d10b      	bne.n	8009ee0 <_free_r+0x70>
 8009ec8:	6824      	ldr	r4, [r4, #0]
 8009eca:	4421      	add	r1, r4
 8009ecc:	1854      	adds	r4, r2, r1
 8009ece:	42a3      	cmp	r3, r4
 8009ed0:	6011      	str	r1, [r2, #0]
 8009ed2:	d1e0      	bne.n	8009e96 <_free_r+0x26>
 8009ed4:	681c      	ldr	r4, [r3, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	6053      	str	r3, [r2, #4]
 8009eda:	440c      	add	r4, r1
 8009edc:	6014      	str	r4, [r2, #0]
 8009ede:	e7da      	b.n	8009e96 <_free_r+0x26>
 8009ee0:	d902      	bls.n	8009ee8 <_free_r+0x78>
 8009ee2:	230c      	movs	r3, #12
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	e7d6      	b.n	8009e96 <_free_r+0x26>
 8009ee8:	6825      	ldr	r5, [r4, #0]
 8009eea:	1961      	adds	r1, r4, r5
 8009eec:	428b      	cmp	r3, r1
 8009eee:	bf04      	itt	eq
 8009ef0:	6819      	ldreq	r1, [r3, #0]
 8009ef2:	685b      	ldreq	r3, [r3, #4]
 8009ef4:	6063      	str	r3, [r4, #4]
 8009ef6:	bf04      	itt	eq
 8009ef8:	1949      	addeq	r1, r1, r5
 8009efa:	6021      	streq	r1, [r4, #0]
 8009efc:	6054      	str	r4, [r2, #4]
 8009efe:	e7ca      	b.n	8009e96 <_free_r+0x26>
 8009f00:	b003      	add	sp, #12
 8009f02:	bd30      	pop	{r4, r5, pc}
 8009f04:	20001688 	.word	0x20001688

08009f08 <__ssputs_r>:
 8009f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f0c:	688e      	ldr	r6, [r1, #8]
 8009f0e:	461f      	mov	r7, r3
 8009f10:	42be      	cmp	r6, r7
 8009f12:	680b      	ldr	r3, [r1, #0]
 8009f14:	4682      	mov	sl, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	4690      	mov	r8, r2
 8009f1a:	d82c      	bhi.n	8009f76 <__ssputs_r+0x6e>
 8009f1c:	898a      	ldrh	r2, [r1, #12]
 8009f1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f22:	d026      	beq.n	8009f72 <__ssputs_r+0x6a>
 8009f24:	6965      	ldr	r5, [r4, #20]
 8009f26:	6909      	ldr	r1, [r1, #16]
 8009f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f2c:	eba3 0901 	sub.w	r9, r3, r1
 8009f30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f34:	1c7b      	adds	r3, r7, #1
 8009f36:	444b      	add	r3, r9
 8009f38:	106d      	asrs	r5, r5, #1
 8009f3a:	429d      	cmp	r5, r3
 8009f3c:	bf38      	it	cc
 8009f3e:	461d      	movcc	r5, r3
 8009f40:	0553      	lsls	r3, r2, #21
 8009f42:	d527      	bpl.n	8009f94 <__ssputs_r+0x8c>
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7ff fe93 	bl	8009c70 <_malloc_r>
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	b360      	cbz	r0, 8009fa8 <__ssputs_r+0xa0>
 8009f4e:	6921      	ldr	r1, [r4, #16]
 8009f50:	464a      	mov	r2, r9
 8009f52:	f000 fadb 	bl	800a50c <memcpy>
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	6126      	str	r6, [r4, #16]
 8009f64:	6165      	str	r5, [r4, #20]
 8009f66:	444e      	add	r6, r9
 8009f68:	eba5 0509 	sub.w	r5, r5, r9
 8009f6c:	6026      	str	r6, [r4, #0]
 8009f6e:	60a5      	str	r5, [r4, #8]
 8009f70:	463e      	mov	r6, r7
 8009f72:	42be      	cmp	r6, r7
 8009f74:	d900      	bls.n	8009f78 <__ssputs_r+0x70>
 8009f76:	463e      	mov	r6, r7
 8009f78:	6820      	ldr	r0, [r4, #0]
 8009f7a:	4632      	mov	r2, r6
 8009f7c:	4641      	mov	r1, r8
 8009f7e:	f000 faab 	bl	800a4d8 <memmove>
 8009f82:	68a3      	ldr	r3, [r4, #8]
 8009f84:	1b9b      	subs	r3, r3, r6
 8009f86:	60a3      	str	r3, [r4, #8]
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	4433      	add	r3, r6
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	2000      	movs	r0, #0
 8009f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f94:	462a      	mov	r2, r5
 8009f96:	f000 fac7 	bl	800a528 <_realloc_r>
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d1e0      	bne.n	8009f62 <__ssputs_r+0x5a>
 8009fa0:	6921      	ldr	r1, [r4, #16]
 8009fa2:	4650      	mov	r0, sl
 8009fa4:	f7ff ff64 	bl	8009e70 <_free_r>
 8009fa8:	230c      	movs	r3, #12
 8009faa:	f8ca 3000 	str.w	r3, [sl]
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fba:	e7e9      	b.n	8009f90 <__ssputs_r+0x88>

08009fbc <_svfiprintf_r>:
 8009fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc0:	4698      	mov	r8, r3
 8009fc2:	898b      	ldrh	r3, [r1, #12]
 8009fc4:	061b      	lsls	r3, r3, #24
 8009fc6:	b09d      	sub	sp, #116	; 0x74
 8009fc8:	4607      	mov	r7, r0
 8009fca:	460d      	mov	r5, r1
 8009fcc:	4614      	mov	r4, r2
 8009fce:	d50e      	bpl.n	8009fee <_svfiprintf_r+0x32>
 8009fd0:	690b      	ldr	r3, [r1, #16]
 8009fd2:	b963      	cbnz	r3, 8009fee <_svfiprintf_r+0x32>
 8009fd4:	2140      	movs	r1, #64	; 0x40
 8009fd6:	f7ff fe4b 	bl	8009c70 <_malloc_r>
 8009fda:	6028      	str	r0, [r5, #0]
 8009fdc:	6128      	str	r0, [r5, #16]
 8009fde:	b920      	cbnz	r0, 8009fea <_svfiprintf_r+0x2e>
 8009fe0:	230c      	movs	r3, #12
 8009fe2:	603b      	str	r3, [r7, #0]
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fe8:	e0d0      	b.n	800a18c <_svfiprintf_r+0x1d0>
 8009fea:	2340      	movs	r3, #64	; 0x40
 8009fec:	616b      	str	r3, [r5, #20]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff2:	2320      	movs	r3, #32
 8009ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ffc:	2330      	movs	r3, #48	; 0x30
 8009ffe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a1a4 <_svfiprintf_r+0x1e8>
 800a002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a006:	f04f 0901 	mov.w	r9, #1
 800a00a:	4623      	mov	r3, r4
 800a00c:	469a      	mov	sl, r3
 800a00e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a012:	b10a      	cbz	r2, 800a018 <_svfiprintf_r+0x5c>
 800a014:	2a25      	cmp	r2, #37	; 0x25
 800a016:	d1f9      	bne.n	800a00c <_svfiprintf_r+0x50>
 800a018:	ebba 0b04 	subs.w	fp, sl, r4
 800a01c:	d00b      	beq.n	800a036 <_svfiprintf_r+0x7a>
 800a01e:	465b      	mov	r3, fp
 800a020:	4622      	mov	r2, r4
 800a022:	4629      	mov	r1, r5
 800a024:	4638      	mov	r0, r7
 800a026:	f7ff ff6f 	bl	8009f08 <__ssputs_r>
 800a02a:	3001      	adds	r0, #1
 800a02c:	f000 80a9 	beq.w	800a182 <_svfiprintf_r+0x1c6>
 800a030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a032:	445a      	add	r2, fp
 800a034:	9209      	str	r2, [sp, #36]	; 0x24
 800a036:	f89a 3000 	ldrb.w	r3, [sl]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 80a1 	beq.w	800a182 <_svfiprintf_r+0x1c6>
 800a040:	2300      	movs	r3, #0
 800a042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a04a:	f10a 0a01 	add.w	sl, sl, #1
 800a04e:	9304      	str	r3, [sp, #16]
 800a050:	9307      	str	r3, [sp, #28]
 800a052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a056:	931a      	str	r3, [sp, #104]	; 0x68
 800a058:	4654      	mov	r4, sl
 800a05a:	2205      	movs	r2, #5
 800a05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a060:	4850      	ldr	r0, [pc, #320]	; (800a1a4 <_svfiprintf_r+0x1e8>)
 800a062:	f7f6 f8c5 	bl	80001f0 <memchr>
 800a066:	9a04      	ldr	r2, [sp, #16]
 800a068:	b9d8      	cbnz	r0, 800a0a2 <_svfiprintf_r+0xe6>
 800a06a:	06d0      	lsls	r0, r2, #27
 800a06c:	bf44      	itt	mi
 800a06e:	2320      	movmi	r3, #32
 800a070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a074:	0711      	lsls	r1, r2, #28
 800a076:	bf44      	itt	mi
 800a078:	232b      	movmi	r3, #43	; 0x2b
 800a07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a07e:	f89a 3000 	ldrb.w	r3, [sl]
 800a082:	2b2a      	cmp	r3, #42	; 0x2a
 800a084:	d015      	beq.n	800a0b2 <_svfiprintf_r+0xf6>
 800a086:	9a07      	ldr	r2, [sp, #28]
 800a088:	4654      	mov	r4, sl
 800a08a:	2000      	movs	r0, #0
 800a08c:	f04f 0c0a 	mov.w	ip, #10
 800a090:	4621      	mov	r1, r4
 800a092:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a096:	3b30      	subs	r3, #48	; 0x30
 800a098:	2b09      	cmp	r3, #9
 800a09a:	d94d      	bls.n	800a138 <_svfiprintf_r+0x17c>
 800a09c:	b1b0      	cbz	r0, 800a0cc <_svfiprintf_r+0x110>
 800a09e:	9207      	str	r2, [sp, #28]
 800a0a0:	e014      	b.n	800a0cc <_svfiprintf_r+0x110>
 800a0a2:	eba0 0308 	sub.w	r3, r0, r8
 800a0a6:	fa09 f303 	lsl.w	r3, r9, r3
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	9304      	str	r3, [sp, #16]
 800a0ae:	46a2      	mov	sl, r4
 800a0b0:	e7d2      	b.n	800a058 <_svfiprintf_r+0x9c>
 800a0b2:	9b03      	ldr	r3, [sp, #12]
 800a0b4:	1d19      	adds	r1, r3, #4
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	9103      	str	r1, [sp, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bfbb      	ittet	lt
 800a0be:	425b      	neglt	r3, r3
 800a0c0:	f042 0202 	orrlt.w	r2, r2, #2
 800a0c4:	9307      	strge	r3, [sp, #28]
 800a0c6:	9307      	strlt	r3, [sp, #28]
 800a0c8:	bfb8      	it	lt
 800a0ca:	9204      	strlt	r2, [sp, #16]
 800a0cc:	7823      	ldrb	r3, [r4, #0]
 800a0ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a0d0:	d10c      	bne.n	800a0ec <_svfiprintf_r+0x130>
 800a0d2:	7863      	ldrb	r3, [r4, #1]
 800a0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d6:	d134      	bne.n	800a142 <_svfiprintf_r+0x186>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	1d1a      	adds	r2, r3, #4
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	9203      	str	r2, [sp, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfb8      	it	lt
 800a0e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0e8:	3402      	adds	r4, #2
 800a0ea:	9305      	str	r3, [sp, #20]
 800a0ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a1b4 <_svfiprintf_r+0x1f8>
 800a0f0:	7821      	ldrb	r1, [r4, #0]
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	4650      	mov	r0, sl
 800a0f6:	f7f6 f87b 	bl	80001f0 <memchr>
 800a0fa:	b138      	cbz	r0, 800a10c <_svfiprintf_r+0x150>
 800a0fc:	9b04      	ldr	r3, [sp, #16]
 800a0fe:	eba0 000a 	sub.w	r0, r0, sl
 800a102:	2240      	movs	r2, #64	; 0x40
 800a104:	4082      	lsls	r2, r0
 800a106:	4313      	orrs	r3, r2
 800a108:	3401      	adds	r4, #1
 800a10a:	9304      	str	r3, [sp, #16]
 800a10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a110:	4825      	ldr	r0, [pc, #148]	; (800a1a8 <_svfiprintf_r+0x1ec>)
 800a112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a116:	2206      	movs	r2, #6
 800a118:	f7f6 f86a 	bl	80001f0 <memchr>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d038      	beq.n	800a192 <_svfiprintf_r+0x1d6>
 800a120:	4b22      	ldr	r3, [pc, #136]	; (800a1ac <_svfiprintf_r+0x1f0>)
 800a122:	bb1b      	cbnz	r3, 800a16c <_svfiprintf_r+0x1b0>
 800a124:	9b03      	ldr	r3, [sp, #12]
 800a126:	3307      	adds	r3, #7
 800a128:	f023 0307 	bic.w	r3, r3, #7
 800a12c:	3308      	adds	r3, #8
 800a12e:	9303      	str	r3, [sp, #12]
 800a130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a132:	4433      	add	r3, r6
 800a134:	9309      	str	r3, [sp, #36]	; 0x24
 800a136:	e768      	b.n	800a00a <_svfiprintf_r+0x4e>
 800a138:	fb0c 3202 	mla	r2, ip, r2, r3
 800a13c:	460c      	mov	r4, r1
 800a13e:	2001      	movs	r0, #1
 800a140:	e7a6      	b.n	800a090 <_svfiprintf_r+0xd4>
 800a142:	2300      	movs	r3, #0
 800a144:	3401      	adds	r4, #1
 800a146:	9305      	str	r3, [sp, #20]
 800a148:	4619      	mov	r1, r3
 800a14a:	f04f 0c0a 	mov.w	ip, #10
 800a14e:	4620      	mov	r0, r4
 800a150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a154:	3a30      	subs	r2, #48	; 0x30
 800a156:	2a09      	cmp	r2, #9
 800a158:	d903      	bls.n	800a162 <_svfiprintf_r+0x1a6>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0c6      	beq.n	800a0ec <_svfiprintf_r+0x130>
 800a15e:	9105      	str	r1, [sp, #20]
 800a160:	e7c4      	b.n	800a0ec <_svfiprintf_r+0x130>
 800a162:	fb0c 2101 	mla	r1, ip, r1, r2
 800a166:	4604      	mov	r4, r0
 800a168:	2301      	movs	r3, #1
 800a16a:	e7f0      	b.n	800a14e <_svfiprintf_r+0x192>
 800a16c:	ab03      	add	r3, sp, #12
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	462a      	mov	r2, r5
 800a172:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <_svfiprintf_r+0x1f4>)
 800a174:	a904      	add	r1, sp, #16
 800a176:	4638      	mov	r0, r7
 800a178:	f3af 8000 	nop.w
 800a17c:	1c42      	adds	r2, r0, #1
 800a17e:	4606      	mov	r6, r0
 800a180:	d1d6      	bne.n	800a130 <_svfiprintf_r+0x174>
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	065b      	lsls	r3, r3, #25
 800a186:	f53f af2d 	bmi.w	8009fe4 <_svfiprintf_r+0x28>
 800a18a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a18c:	b01d      	add	sp, #116	; 0x74
 800a18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a192:	ab03      	add	r3, sp, #12
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	462a      	mov	r2, r5
 800a198:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <_svfiprintf_r+0x1f4>)
 800a19a:	a904      	add	r1, sp, #16
 800a19c:	4638      	mov	r0, r7
 800a19e:	f000 f879 	bl	800a294 <_printf_i>
 800a1a2:	e7eb      	b.n	800a17c <_svfiprintf_r+0x1c0>
 800a1a4:	0800ac90 	.word	0x0800ac90
 800a1a8:	0800ac9a 	.word	0x0800ac9a
 800a1ac:	00000000 	.word	0x00000000
 800a1b0:	08009f09 	.word	0x08009f09
 800a1b4:	0800ac96 	.word	0x0800ac96

0800a1b8 <_printf_common>:
 800a1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1bc:	4616      	mov	r6, r2
 800a1be:	4699      	mov	r9, r3
 800a1c0:	688a      	ldr	r2, [r1, #8]
 800a1c2:	690b      	ldr	r3, [r1, #16]
 800a1c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	bfb8      	it	lt
 800a1cc:	4613      	movlt	r3, r2
 800a1ce:	6033      	str	r3, [r6, #0]
 800a1d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	b10a      	cbz	r2, 800a1de <_printf_common+0x26>
 800a1da:	3301      	adds	r3, #1
 800a1dc:	6033      	str	r3, [r6, #0]
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	0699      	lsls	r1, r3, #26
 800a1e2:	bf42      	ittt	mi
 800a1e4:	6833      	ldrmi	r3, [r6, #0]
 800a1e6:	3302      	addmi	r3, #2
 800a1e8:	6033      	strmi	r3, [r6, #0]
 800a1ea:	6825      	ldr	r5, [r4, #0]
 800a1ec:	f015 0506 	ands.w	r5, r5, #6
 800a1f0:	d106      	bne.n	800a200 <_printf_common+0x48>
 800a1f2:	f104 0a19 	add.w	sl, r4, #25
 800a1f6:	68e3      	ldr	r3, [r4, #12]
 800a1f8:	6832      	ldr	r2, [r6, #0]
 800a1fa:	1a9b      	subs	r3, r3, r2
 800a1fc:	42ab      	cmp	r3, r5
 800a1fe:	dc26      	bgt.n	800a24e <_printf_common+0x96>
 800a200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a204:	1e13      	subs	r3, r2, #0
 800a206:	6822      	ldr	r2, [r4, #0]
 800a208:	bf18      	it	ne
 800a20a:	2301      	movne	r3, #1
 800a20c:	0692      	lsls	r2, r2, #26
 800a20e:	d42b      	bmi.n	800a268 <_printf_common+0xb0>
 800a210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a214:	4649      	mov	r1, r9
 800a216:	4638      	mov	r0, r7
 800a218:	47c0      	blx	r8
 800a21a:	3001      	adds	r0, #1
 800a21c:	d01e      	beq.n	800a25c <_printf_common+0xa4>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	6922      	ldr	r2, [r4, #16]
 800a222:	f003 0306 	and.w	r3, r3, #6
 800a226:	2b04      	cmp	r3, #4
 800a228:	bf02      	ittt	eq
 800a22a:	68e5      	ldreq	r5, [r4, #12]
 800a22c:	6833      	ldreq	r3, [r6, #0]
 800a22e:	1aed      	subeq	r5, r5, r3
 800a230:	68a3      	ldr	r3, [r4, #8]
 800a232:	bf0c      	ite	eq
 800a234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a238:	2500      	movne	r5, #0
 800a23a:	4293      	cmp	r3, r2
 800a23c:	bfc4      	itt	gt
 800a23e:	1a9b      	subgt	r3, r3, r2
 800a240:	18ed      	addgt	r5, r5, r3
 800a242:	2600      	movs	r6, #0
 800a244:	341a      	adds	r4, #26
 800a246:	42b5      	cmp	r5, r6
 800a248:	d11a      	bne.n	800a280 <_printf_common+0xc8>
 800a24a:	2000      	movs	r0, #0
 800a24c:	e008      	b.n	800a260 <_printf_common+0xa8>
 800a24e:	2301      	movs	r3, #1
 800a250:	4652      	mov	r2, sl
 800a252:	4649      	mov	r1, r9
 800a254:	4638      	mov	r0, r7
 800a256:	47c0      	blx	r8
 800a258:	3001      	adds	r0, #1
 800a25a:	d103      	bne.n	800a264 <_printf_common+0xac>
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a264:	3501      	adds	r5, #1
 800a266:	e7c6      	b.n	800a1f6 <_printf_common+0x3e>
 800a268:	18e1      	adds	r1, r4, r3
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	2030      	movs	r0, #48	; 0x30
 800a26e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a272:	4422      	add	r2, r4
 800a274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a27c:	3302      	adds	r3, #2
 800a27e:	e7c7      	b.n	800a210 <_printf_common+0x58>
 800a280:	2301      	movs	r3, #1
 800a282:	4622      	mov	r2, r4
 800a284:	4649      	mov	r1, r9
 800a286:	4638      	mov	r0, r7
 800a288:	47c0      	blx	r8
 800a28a:	3001      	adds	r0, #1
 800a28c:	d0e6      	beq.n	800a25c <_printf_common+0xa4>
 800a28e:	3601      	adds	r6, #1
 800a290:	e7d9      	b.n	800a246 <_printf_common+0x8e>
	...

0800a294 <_printf_i>:
 800a294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a298:	7e0f      	ldrb	r7, [r1, #24]
 800a29a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a29c:	2f78      	cmp	r7, #120	; 0x78
 800a29e:	4691      	mov	r9, r2
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	469a      	mov	sl, r3
 800a2a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2aa:	d807      	bhi.n	800a2bc <_printf_i+0x28>
 800a2ac:	2f62      	cmp	r7, #98	; 0x62
 800a2ae:	d80a      	bhi.n	800a2c6 <_printf_i+0x32>
 800a2b0:	2f00      	cmp	r7, #0
 800a2b2:	f000 80d4 	beq.w	800a45e <_printf_i+0x1ca>
 800a2b6:	2f58      	cmp	r7, #88	; 0x58
 800a2b8:	f000 80c0 	beq.w	800a43c <_printf_i+0x1a8>
 800a2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2c4:	e03a      	b.n	800a33c <_printf_i+0xa8>
 800a2c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2ca:	2b15      	cmp	r3, #21
 800a2cc:	d8f6      	bhi.n	800a2bc <_printf_i+0x28>
 800a2ce:	a101      	add	r1, pc, #4	; (adr r1, 800a2d4 <_printf_i+0x40>)
 800a2d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2d4:	0800a32d 	.word	0x0800a32d
 800a2d8:	0800a341 	.word	0x0800a341
 800a2dc:	0800a2bd 	.word	0x0800a2bd
 800a2e0:	0800a2bd 	.word	0x0800a2bd
 800a2e4:	0800a2bd 	.word	0x0800a2bd
 800a2e8:	0800a2bd 	.word	0x0800a2bd
 800a2ec:	0800a341 	.word	0x0800a341
 800a2f0:	0800a2bd 	.word	0x0800a2bd
 800a2f4:	0800a2bd 	.word	0x0800a2bd
 800a2f8:	0800a2bd 	.word	0x0800a2bd
 800a2fc:	0800a2bd 	.word	0x0800a2bd
 800a300:	0800a445 	.word	0x0800a445
 800a304:	0800a36d 	.word	0x0800a36d
 800a308:	0800a3ff 	.word	0x0800a3ff
 800a30c:	0800a2bd 	.word	0x0800a2bd
 800a310:	0800a2bd 	.word	0x0800a2bd
 800a314:	0800a467 	.word	0x0800a467
 800a318:	0800a2bd 	.word	0x0800a2bd
 800a31c:	0800a36d 	.word	0x0800a36d
 800a320:	0800a2bd 	.word	0x0800a2bd
 800a324:	0800a2bd 	.word	0x0800a2bd
 800a328:	0800a407 	.word	0x0800a407
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	1d1a      	adds	r2, r3, #4
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	602a      	str	r2, [r5, #0]
 800a334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a33c:	2301      	movs	r3, #1
 800a33e:	e09f      	b.n	800a480 <_printf_i+0x1ec>
 800a340:	6820      	ldr	r0, [r4, #0]
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	0607      	lsls	r7, r0, #24
 800a346:	f103 0104 	add.w	r1, r3, #4
 800a34a:	6029      	str	r1, [r5, #0]
 800a34c:	d501      	bpl.n	800a352 <_printf_i+0xbe>
 800a34e:	681e      	ldr	r6, [r3, #0]
 800a350:	e003      	b.n	800a35a <_printf_i+0xc6>
 800a352:	0646      	lsls	r6, r0, #25
 800a354:	d5fb      	bpl.n	800a34e <_printf_i+0xba>
 800a356:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	da03      	bge.n	800a366 <_printf_i+0xd2>
 800a35e:	232d      	movs	r3, #45	; 0x2d
 800a360:	4276      	negs	r6, r6
 800a362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a366:	485a      	ldr	r0, [pc, #360]	; (800a4d0 <_printf_i+0x23c>)
 800a368:	230a      	movs	r3, #10
 800a36a:	e012      	b.n	800a392 <_printf_i+0xfe>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	6820      	ldr	r0, [r4, #0]
 800a370:	1d19      	adds	r1, r3, #4
 800a372:	6029      	str	r1, [r5, #0]
 800a374:	0605      	lsls	r5, r0, #24
 800a376:	d501      	bpl.n	800a37c <_printf_i+0xe8>
 800a378:	681e      	ldr	r6, [r3, #0]
 800a37a:	e002      	b.n	800a382 <_printf_i+0xee>
 800a37c:	0641      	lsls	r1, r0, #25
 800a37e:	d5fb      	bpl.n	800a378 <_printf_i+0xe4>
 800a380:	881e      	ldrh	r6, [r3, #0]
 800a382:	4853      	ldr	r0, [pc, #332]	; (800a4d0 <_printf_i+0x23c>)
 800a384:	2f6f      	cmp	r7, #111	; 0x6f
 800a386:	bf0c      	ite	eq
 800a388:	2308      	moveq	r3, #8
 800a38a:	230a      	movne	r3, #10
 800a38c:	2100      	movs	r1, #0
 800a38e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a392:	6865      	ldr	r5, [r4, #4]
 800a394:	60a5      	str	r5, [r4, #8]
 800a396:	2d00      	cmp	r5, #0
 800a398:	bfa2      	ittt	ge
 800a39a:	6821      	ldrge	r1, [r4, #0]
 800a39c:	f021 0104 	bicge.w	r1, r1, #4
 800a3a0:	6021      	strge	r1, [r4, #0]
 800a3a2:	b90e      	cbnz	r6, 800a3a8 <_printf_i+0x114>
 800a3a4:	2d00      	cmp	r5, #0
 800a3a6:	d04b      	beq.n	800a440 <_printf_i+0x1ac>
 800a3a8:	4615      	mov	r5, r2
 800a3aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3ae:	fb03 6711 	mls	r7, r3, r1, r6
 800a3b2:	5dc7      	ldrb	r7, [r0, r7]
 800a3b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3b8:	4637      	mov	r7, r6
 800a3ba:	42bb      	cmp	r3, r7
 800a3bc:	460e      	mov	r6, r1
 800a3be:	d9f4      	bls.n	800a3aa <_printf_i+0x116>
 800a3c0:	2b08      	cmp	r3, #8
 800a3c2:	d10b      	bne.n	800a3dc <_printf_i+0x148>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	07de      	lsls	r6, r3, #31
 800a3c8:	d508      	bpl.n	800a3dc <_printf_i+0x148>
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	6861      	ldr	r1, [r4, #4]
 800a3ce:	4299      	cmp	r1, r3
 800a3d0:	bfde      	ittt	le
 800a3d2:	2330      	movle	r3, #48	; 0x30
 800a3d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a3dc:	1b52      	subs	r2, r2, r5
 800a3de:	6122      	str	r2, [r4, #16]
 800a3e0:	f8cd a000 	str.w	sl, [sp]
 800a3e4:	464b      	mov	r3, r9
 800a3e6:	aa03      	add	r2, sp, #12
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	f7ff fee4 	bl	800a1b8 <_printf_common>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d14a      	bne.n	800a48a <_printf_i+0x1f6>
 800a3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3f8:	b004      	add	sp, #16
 800a3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	f043 0320 	orr.w	r3, r3, #32
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	4833      	ldr	r0, [pc, #204]	; (800a4d4 <_printf_i+0x240>)
 800a408:	2778      	movs	r7, #120	; 0x78
 800a40a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	6829      	ldr	r1, [r5, #0]
 800a412:	061f      	lsls	r7, r3, #24
 800a414:	f851 6b04 	ldr.w	r6, [r1], #4
 800a418:	d402      	bmi.n	800a420 <_printf_i+0x18c>
 800a41a:	065f      	lsls	r7, r3, #25
 800a41c:	bf48      	it	mi
 800a41e:	b2b6      	uxthmi	r6, r6
 800a420:	07df      	lsls	r7, r3, #31
 800a422:	bf48      	it	mi
 800a424:	f043 0320 	orrmi.w	r3, r3, #32
 800a428:	6029      	str	r1, [r5, #0]
 800a42a:	bf48      	it	mi
 800a42c:	6023      	strmi	r3, [r4, #0]
 800a42e:	b91e      	cbnz	r6, 800a438 <_printf_i+0x1a4>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	f023 0320 	bic.w	r3, r3, #32
 800a436:	6023      	str	r3, [r4, #0]
 800a438:	2310      	movs	r3, #16
 800a43a:	e7a7      	b.n	800a38c <_printf_i+0xf8>
 800a43c:	4824      	ldr	r0, [pc, #144]	; (800a4d0 <_printf_i+0x23c>)
 800a43e:	e7e4      	b.n	800a40a <_printf_i+0x176>
 800a440:	4615      	mov	r5, r2
 800a442:	e7bd      	b.n	800a3c0 <_printf_i+0x12c>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	6826      	ldr	r6, [r4, #0]
 800a448:	6961      	ldr	r1, [r4, #20]
 800a44a:	1d18      	adds	r0, r3, #4
 800a44c:	6028      	str	r0, [r5, #0]
 800a44e:	0635      	lsls	r5, r6, #24
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	d501      	bpl.n	800a458 <_printf_i+0x1c4>
 800a454:	6019      	str	r1, [r3, #0]
 800a456:	e002      	b.n	800a45e <_printf_i+0x1ca>
 800a458:	0670      	lsls	r0, r6, #25
 800a45a:	d5fb      	bpl.n	800a454 <_printf_i+0x1c0>
 800a45c:	8019      	strh	r1, [r3, #0]
 800a45e:	2300      	movs	r3, #0
 800a460:	6123      	str	r3, [r4, #16]
 800a462:	4615      	mov	r5, r2
 800a464:	e7bc      	b.n	800a3e0 <_printf_i+0x14c>
 800a466:	682b      	ldr	r3, [r5, #0]
 800a468:	1d1a      	adds	r2, r3, #4
 800a46a:	602a      	str	r2, [r5, #0]
 800a46c:	681d      	ldr	r5, [r3, #0]
 800a46e:	6862      	ldr	r2, [r4, #4]
 800a470:	2100      	movs	r1, #0
 800a472:	4628      	mov	r0, r5
 800a474:	f7f5 febc 	bl	80001f0 <memchr>
 800a478:	b108      	cbz	r0, 800a47e <_printf_i+0x1ea>
 800a47a:	1b40      	subs	r0, r0, r5
 800a47c:	6060      	str	r0, [r4, #4]
 800a47e:	6863      	ldr	r3, [r4, #4]
 800a480:	6123      	str	r3, [r4, #16]
 800a482:	2300      	movs	r3, #0
 800a484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a488:	e7aa      	b.n	800a3e0 <_printf_i+0x14c>
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	462a      	mov	r2, r5
 800a48e:	4649      	mov	r1, r9
 800a490:	4640      	mov	r0, r8
 800a492:	47d0      	blx	sl
 800a494:	3001      	adds	r0, #1
 800a496:	d0ad      	beq.n	800a3f4 <_printf_i+0x160>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	079b      	lsls	r3, r3, #30
 800a49c:	d413      	bmi.n	800a4c6 <_printf_i+0x232>
 800a49e:	68e0      	ldr	r0, [r4, #12]
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	4298      	cmp	r0, r3
 800a4a4:	bfb8      	it	lt
 800a4a6:	4618      	movlt	r0, r3
 800a4a8:	e7a6      	b.n	800a3f8 <_printf_i+0x164>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	47d0      	blx	sl
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d09d      	beq.n	800a3f4 <_printf_i+0x160>
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	68e3      	ldr	r3, [r4, #12]
 800a4bc:	9903      	ldr	r1, [sp, #12]
 800a4be:	1a5b      	subs	r3, r3, r1
 800a4c0:	42ab      	cmp	r3, r5
 800a4c2:	dcf2      	bgt.n	800a4aa <_printf_i+0x216>
 800a4c4:	e7eb      	b.n	800a49e <_printf_i+0x20a>
 800a4c6:	2500      	movs	r5, #0
 800a4c8:	f104 0619 	add.w	r6, r4, #25
 800a4cc:	e7f5      	b.n	800a4ba <_printf_i+0x226>
 800a4ce:	bf00      	nop
 800a4d0:	0800aca1 	.word	0x0800aca1
 800a4d4:	0800acb2 	.word	0x0800acb2

0800a4d8 <memmove>:
 800a4d8:	4288      	cmp	r0, r1
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	eb01 0402 	add.w	r4, r1, r2
 800a4e0:	d902      	bls.n	800a4e8 <memmove+0x10>
 800a4e2:	4284      	cmp	r4, r0
 800a4e4:	4623      	mov	r3, r4
 800a4e6:	d807      	bhi.n	800a4f8 <memmove+0x20>
 800a4e8:	1e43      	subs	r3, r0, #1
 800a4ea:	42a1      	cmp	r1, r4
 800a4ec:	d008      	beq.n	800a500 <memmove+0x28>
 800a4ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4f6:	e7f8      	b.n	800a4ea <memmove+0x12>
 800a4f8:	4402      	add	r2, r0
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	428a      	cmp	r2, r1
 800a4fe:	d100      	bne.n	800a502 <memmove+0x2a>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a50a:	e7f7      	b.n	800a4fc <memmove+0x24>

0800a50c <memcpy>:
 800a50c:	440a      	add	r2, r1
 800a50e:	4291      	cmp	r1, r2
 800a510:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a514:	d100      	bne.n	800a518 <memcpy+0xc>
 800a516:	4770      	bx	lr
 800a518:	b510      	push	{r4, lr}
 800a51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a51e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a522:	4291      	cmp	r1, r2
 800a524:	d1f9      	bne.n	800a51a <memcpy+0xe>
 800a526:	bd10      	pop	{r4, pc}

0800a528 <_realloc_r>:
 800a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52c:	4680      	mov	r8, r0
 800a52e:	4614      	mov	r4, r2
 800a530:	460e      	mov	r6, r1
 800a532:	b921      	cbnz	r1, 800a53e <_realloc_r+0x16>
 800a534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a538:	4611      	mov	r1, r2
 800a53a:	f7ff bb99 	b.w	8009c70 <_malloc_r>
 800a53e:	b92a      	cbnz	r2, 800a54c <_realloc_r+0x24>
 800a540:	f7ff fc96 	bl	8009e70 <_free_r>
 800a544:	4625      	mov	r5, r4
 800a546:	4628      	mov	r0, r5
 800a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a54c:	f000 f81b 	bl	800a586 <_malloc_usable_size_r>
 800a550:	4284      	cmp	r4, r0
 800a552:	4607      	mov	r7, r0
 800a554:	d802      	bhi.n	800a55c <_realloc_r+0x34>
 800a556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a55a:	d812      	bhi.n	800a582 <_realloc_r+0x5a>
 800a55c:	4621      	mov	r1, r4
 800a55e:	4640      	mov	r0, r8
 800a560:	f7ff fb86 	bl	8009c70 <_malloc_r>
 800a564:	4605      	mov	r5, r0
 800a566:	2800      	cmp	r0, #0
 800a568:	d0ed      	beq.n	800a546 <_realloc_r+0x1e>
 800a56a:	42bc      	cmp	r4, r7
 800a56c:	4622      	mov	r2, r4
 800a56e:	4631      	mov	r1, r6
 800a570:	bf28      	it	cs
 800a572:	463a      	movcs	r2, r7
 800a574:	f7ff ffca 	bl	800a50c <memcpy>
 800a578:	4631      	mov	r1, r6
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7ff fc78 	bl	8009e70 <_free_r>
 800a580:	e7e1      	b.n	800a546 <_realloc_r+0x1e>
 800a582:	4635      	mov	r5, r6
 800a584:	e7df      	b.n	800a546 <_realloc_r+0x1e>

0800a586 <_malloc_usable_size_r>:
 800a586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a58a:	1f18      	subs	r0, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bfbc      	itt	lt
 800a590:	580b      	ldrlt	r3, [r1, r0]
 800a592:	18c0      	addlt	r0, r0, r3
 800a594:	4770      	bx	lr

0800a596 <atan2>:
 800a596:	f000 b803 	b.w	800a5a0 <__ieee754_atan2>
 800a59a:	0000      	movs	r0, r0
 800a59c:	0000      	movs	r0, r0
	...

0800a5a0 <__ieee754_atan2>:
 800a5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5a4:	ec57 6b11 	vmov	r6, r7, d1
 800a5a8:	4273      	negs	r3, r6
 800a5aa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800a728 <__ieee754_atan2+0x188>
 800a5ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a5b2:	4333      	orrs	r3, r6
 800a5b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a5b8:	4543      	cmp	r3, r8
 800a5ba:	ec51 0b10 	vmov	r0, r1, d0
 800a5be:	ee11 5a10 	vmov	r5, s2
 800a5c2:	d80a      	bhi.n	800a5da <__ieee754_atan2+0x3a>
 800a5c4:	4244      	negs	r4, r0
 800a5c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5ca:	4304      	orrs	r4, r0
 800a5cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a5d0:	4544      	cmp	r4, r8
 800a5d2:	ee10 9a10 	vmov	r9, s0
 800a5d6:	468e      	mov	lr, r1
 800a5d8:	d907      	bls.n	800a5ea <__ieee754_atan2+0x4a>
 800a5da:	4632      	mov	r2, r6
 800a5dc:	463b      	mov	r3, r7
 800a5de:	f7f5 fe5d 	bl	800029c <__adddf3>
 800a5e2:	ec41 0b10 	vmov	d0, r0, r1
 800a5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a5ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a5f2:	4334      	orrs	r4, r6
 800a5f4:	d103      	bne.n	800a5fe <__ieee754_atan2+0x5e>
 800a5f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5fa:	f000 b899 	b.w	800a730 <atan>
 800a5fe:	17bc      	asrs	r4, r7, #30
 800a600:	f004 0402 	and.w	r4, r4, #2
 800a604:	ea53 0909 	orrs.w	r9, r3, r9
 800a608:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a60c:	d107      	bne.n	800a61e <__ieee754_atan2+0x7e>
 800a60e:	2c02      	cmp	r4, #2
 800a610:	d05f      	beq.n	800a6d2 <__ieee754_atan2+0x132>
 800a612:	2c03      	cmp	r4, #3
 800a614:	d1e5      	bne.n	800a5e2 <__ieee754_atan2+0x42>
 800a616:	a140      	add	r1, pc, #256	; (adr r1, 800a718 <__ieee754_atan2+0x178>)
 800a618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a61c:	e7e1      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a61e:	4315      	orrs	r5, r2
 800a620:	d106      	bne.n	800a630 <__ieee754_atan2+0x90>
 800a622:	f1be 0f00 	cmp.w	lr, #0
 800a626:	da5f      	bge.n	800a6e8 <__ieee754_atan2+0x148>
 800a628:	a13d      	add	r1, pc, #244	; (adr r1, 800a720 <__ieee754_atan2+0x180>)
 800a62a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a62e:	e7d8      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a630:	4542      	cmp	r2, r8
 800a632:	d10f      	bne.n	800a654 <__ieee754_atan2+0xb4>
 800a634:	4293      	cmp	r3, r2
 800a636:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a63a:	d107      	bne.n	800a64c <__ieee754_atan2+0xac>
 800a63c:	2c02      	cmp	r4, #2
 800a63e:	d84c      	bhi.n	800a6da <__ieee754_atan2+0x13a>
 800a640:	4b33      	ldr	r3, [pc, #204]	; (800a710 <__ieee754_atan2+0x170>)
 800a642:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a64a:	e7ca      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a64c:	2c02      	cmp	r4, #2
 800a64e:	d848      	bhi.n	800a6e2 <__ieee754_atan2+0x142>
 800a650:	4b30      	ldr	r3, [pc, #192]	; (800a714 <__ieee754_atan2+0x174>)
 800a652:	e7f6      	b.n	800a642 <__ieee754_atan2+0xa2>
 800a654:	4543      	cmp	r3, r8
 800a656:	d0e4      	beq.n	800a622 <__ieee754_atan2+0x82>
 800a658:	1a9b      	subs	r3, r3, r2
 800a65a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a65e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a662:	da1e      	bge.n	800a6a2 <__ieee754_atan2+0x102>
 800a664:	2f00      	cmp	r7, #0
 800a666:	da01      	bge.n	800a66c <__ieee754_atan2+0xcc>
 800a668:	323c      	adds	r2, #60	; 0x3c
 800a66a:	db1e      	blt.n	800a6aa <__ieee754_atan2+0x10a>
 800a66c:	4632      	mov	r2, r6
 800a66e:	463b      	mov	r3, r7
 800a670:	f7f6 f8f4 	bl	800085c <__aeabi_ddiv>
 800a674:	ec41 0b10 	vmov	d0, r0, r1
 800a678:	f000 f9fa 	bl	800aa70 <fabs>
 800a67c:	f000 f858 	bl	800a730 <atan>
 800a680:	ec51 0b10 	vmov	r0, r1, d0
 800a684:	2c01      	cmp	r4, #1
 800a686:	d013      	beq.n	800a6b0 <__ieee754_atan2+0x110>
 800a688:	2c02      	cmp	r4, #2
 800a68a:	d015      	beq.n	800a6b8 <__ieee754_atan2+0x118>
 800a68c:	2c00      	cmp	r4, #0
 800a68e:	d0a8      	beq.n	800a5e2 <__ieee754_atan2+0x42>
 800a690:	a317      	add	r3, pc, #92	; (adr r3, 800a6f0 <__ieee754_atan2+0x150>)
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	f7f5 fdff 	bl	8000298 <__aeabi_dsub>
 800a69a:	a317      	add	r3, pc, #92	; (adr r3, 800a6f8 <__ieee754_atan2+0x158>)
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	e014      	b.n	800a6cc <__ieee754_atan2+0x12c>
 800a6a2:	a117      	add	r1, pc, #92	; (adr r1, 800a700 <__ieee754_atan2+0x160>)
 800a6a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6a8:	e7ec      	b.n	800a684 <__ieee754_atan2+0xe4>
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	e7e9      	b.n	800a684 <__ieee754_atan2+0xe4>
 800a6b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	e794      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a6b8:	a30d      	add	r3, pc, #52	; (adr r3, 800a6f0 <__ieee754_atan2+0x150>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 fdeb 	bl	8000298 <__aeabi_dsub>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	a10c      	add	r1, pc, #48	; (adr r1, 800a6f8 <__ieee754_atan2+0x158>)
 800a6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6cc:	f7f5 fde4 	bl	8000298 <__aeabi_dsub>
 800a6d0:	e787      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a6d2:	a109      	add	r1, pc, #36	; (adr r1, 800a6f8 <__ieee754_atan2+0x158>)
 800a6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6d8:	e783      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a6da:	a10b      	add	r1, pc, #44	; (adr r1, 800a708 <__ieee754_atan2+0x168>)
 800a6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6e0:	e77f      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	e77c      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a6e8:	a105      	add	r1, pc, #20	; (adr r1, 800a700 <__ieee754_atan2+0x160>)
 800a6ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ee:	e778      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a6f0:	33145c07 	.word	0x33145c07
 800a6f4:	3ca1a626 	.word	0x3ca1a626
 800a6f8:	54442d18 	.word	0x54442d18
 800a6fc:	400921fb 	.word	0x400921fb
 800a700:	54442d18 	.word	0x54442d18
 800a704:	3ff921fb 	.word	0x3ff921fb
 800a708:	54442d18 	.word	0x54442d18
 800a70c:	3fe921fb 	.word	0x3fe921fb
 800a710:	0800acc8 	.word	0x0800acc8
 800a714:	0800ace0 	.word	0x0800ace0
 800a718:	54442d18 	.word	0x54442d18
 800a71c:	c00921fb 	.word	0xc00921fb
 800a720:	54442d18 	.word	0x54442d18
 800a724:	bff921fb 	.word	0xbff921fb
 800a728:	7ff00000 	.word	0x7ff00000
 800a72c:	00000000 	.word	0x00000000

0800a730 <atan>:
 800a730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	ec55 4b10 	vmov	r4, r5, d0
 800a738:	4bc3      	ldr	r3, [pc, #780]	; (800aa48 <atan+0x318>)
 800a73a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a73e:	429e      	cmp	r6, r3
 800a740:	46ab      	mov	fp, r5
 800a742:	dd18      	ble.n	800a776 <atan+0x46>
 800a744:	4bc1      	ldr	r3, [pc, #772]	; (800aa4c <atan+0x31c>)
 800a746:	429e      	cmp	r6, r3
 800a748:	dc01      	bgt.n	800a74e <atan+0x1e>
 800a74a:	d109      	bne.n	800a760 <atan+0x30>
 800a74c:	b144      	cbz	r4, 800a760 <atan+0x30>
 800a74e:	4622      	mov	r2, r4
 800a750:	462b      	mov	r3, r5
 800a752:	4620      	mov	r0, r4
 800a754:	4629      	mov	r1, r5
 800a756:	f7f5 fda1 	bl	800029c <__adddf3>
 800a75a:	4604      	mov	r4, r0
 800a75c:	460d      	mov	r5, r1
 800a75e:	e006      	b.n	800a76e <atan+0x3e>
 800a760:	f1bb 0f00 	cmp.w	fp, #0
 800a764:	f300 8131 	bgt.w	800a9ca <atan+0x29a>
 800a768:	a59b      	add	r5, pc, #620	; (adr r5, 800a9d8 <atan+0x2a8>)
 800a76a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a76e:	ec45 4b10 	vmov	d0, r4, r5
 800a772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a776:	4bb6      	ldr	r3, [pc, #728]	; (800aa50 <atan+0x320>)
 800a778:	429e      	cmp	r6, r3
 800a77a:	dc14      	bgt.n	800a7a6 <atan+0x76>
 800a77c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a780:	429e      	cmp	r6, r3
 800a782:	dc0d      	bgt.n	800a7a0 <atan+0x70>
 800a784:	a396      	add	r3, pc, #600	; (adr r3, 800a9e0 <atan+0x2b0>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	ee10 0a10 	vmov	r0, s0
 800a78e:	4629      	mov	r1, r5
 800a790:	f7f5 fd84 	bl	800029c <__adddf3>
 800a794:	4baf      	ldr	r3, [pc, #700]	; (800aa54 <atan+0x324>)
 800a796:	2200      	movs	r2, #0
 800a798:	f7f6 f9c6 	bl	8000b28 <__aeabi_dcmpgt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d1e6      	bne.n	800a76e <atan+0x3e>
 800a7a0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a7a4:	e02b      	b.n	800a7fe <atan+0xce>
 800a7a6:	f000 f963 	bl	800aa70 <fabs>
 800a7aa:	4bab      	ldr	r3, [pc, #684]	; (800aa58 <atan+0x328>)
 800a7ac:	429e      	cmp	r6, r3
 800a7ae:	ec55 4b10 	vmov	r4, r5, d0
 800a7b2:	f300 80bf 	bgt.w	800a934 <atan+0x204>
 800a7b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a7ba:	429e      	cmp	r6, r3
 800a7bc:	f300 80a0 	bgt.w	800a900 <atan+0x1d0>
 800a7c0:	ee10 2a10 	vmov	r2, s0
 800a7c4:	ee10 0a10 	vmov	r0, s0
 800a7c8:	462b      	mov	r3, r5
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	f7f5 fd66 	bl	800029c <__adddf3>
 800a7d0:	4ba0      	ldr	r3, [pc, #640]	; (800aa54 <atan+0x324>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f7f5 fd60 	bl	8000298 <__aeabi_dsub>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	4606      	mov	r6, r0
 800a7dc:	460f      	mov	r7, r1
 800a7de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	f7f5 fd59 	bl	800029c <__adddf3>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	f7f6 f833 	bl	800085c <__aeabi_ddiv>
 800a7f6:	f04f 0a00 	mov.w	sl, #0
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	460d      	mov	r5, r1
 800a7fe:	4622      	mov	r2, r4
 800a800:	462b      	mov	r3, r5
 800a802:	4620      	mov	r0, r4
 800a804:	4629      	mov	r1, r5
 800a806:	f7f5 feff 	bl	8000608 <__aeabi_dmul>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4680      	mov	r8, r0
 800a810:	4689      	mov	r9, r1
 800a812:	f7f5 fef9 	bl	8000608 <__aeabi_dmul>
 800a816:	a374      	add	r3, pc, #464	; (adr r3, 800a9e8 <atan+0x2b8>)
 800a818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81c:	4606      	mov	r6, r0
 800a81e:	460f      	mov	r7, r1
 800a820:	f7f5 fef2 	bl	8000608 <__aeabi_dmul>
 800a824:	a372      	add	r3, pc, #456	; (adr r3, 800a9f0 <atan+0x2c0>)
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f7f5 fd37 	bl	800029c <__adddf3>
 800a82e:	4632      	mov	r2, r6
 800a830:	463b      	mov	r3, r7
 800a832:	f7f5 fee9 	bl	8000608 <__aeabi_dmul>
 800a836:	a370      	add	r3, pc, #448	; (adr r3, 800a9f8 <atan+0x2c8>)
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	f7f5 fd2e 	bl	800029c <__adddf3>
 800a840:	4632      	mov	r2, r6
 800a842:	463b      	mov	r3, r7
 800a844:	f7f5 fee0 	bl	8000608 <__aeabi_dmul>
 800a848:	a36d      	add	r3, pc, #436	; (adr r3, 800aa00 <atan+0x2d0>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f7f5 fd25 	bl	800029c <__adddf3>
 800a852:	4632      	mov	r2, r6
 800a854:	463b      	mov	r3, r7
 800a856:	f7f5 fed7 	bl	8000608 <__aeabi_dmul>
 800a85a:	a36b      	add	r3, pc, #428	; (adr r3, 800aa08 <atan+0x2d8>)
 800a85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a860:	f7f5 fd1c 	bl	800029c <__adddf3>
 800a864:	4632      	mov	r2, r6
 800a866:	463b      	mov	r3, r7
 800a868:	f7f5 fece 	bl	8000608 <__aeabi_dmul>
 800a86c:	a368      	add	r3, pc, #416	; (adr r3, 800aa10 <atan+0x2e0>)
 800a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a872:	f7f5 fd13 	bl	800029c <__adddf3>
 800a876:	4642      	mov	r2, r8
 800a878:	464b      	mov	r3, r9
 800a87a:	f7f5 fec5 	bl	8000608 <__aeabi_dmul>
 800a87e:	a366      	add	r3, pc, #408	; (adr r3, 800aa18 <atan+0x2e8>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	4630      	mov	r0, r6
 800a88a:	4639      	mov	r1, r7
 800a88c:	f7f5 febc 	bl	8000608 <__aeabi_dmul>
 800a890:	a363      	add	r3, pc, #396	; (adr r3, 800aa20 <atan+0x2f0>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f5 fcff 	bl	8000298 <__aeabi_dsub>
 800a89a:	4632      	mov	r2, r6
 800a89c:	463b      	mov	r3, r7
 800a89e:	f7f5 feb3 	bl	8000608 <__aeabi_dmul>
 800a8a2:	a361      	add	r3, pc, #388	; (adr r3, 800aa28 <atan+0x2f8>)
 800a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a8:	f7f5 fcf6 	bl	8000298 <__aeabi_dsub>
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	f7f5 feaa 	bl	8000608 <__aeabi_dmul>
 800a8b4:	a35e      	add	r3, pc, #376	; (adr r3, 800aa30 <atan+0x300>)
 800a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ba:	f7f5 fced 	bl	8000298 <__aeabi_dsub>
 800a8be:	4632      	mov	r2, r6
 800a8c0:	463b      	mov	r3, r7
 800a8c2:	f7f5 fea1 	bl	8000608 <__aeabi_dmul>
 800a8c6:	a35c      	add	r3, pc, #368	; (adr r3, 800aa38 <atan+0x308>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	f7f5 fce4 	bl	8000298 <__aeabi_dsub>
 800a8d0:	4632      	mov	r2, r6
 800a8d2:	463b      	mov	r3, r7
 800a8d4:	f7f5 fe98 	bl	8000608 <__aeabi_dmul>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4640      	mov	r0, r8
 800a8de:	4649      	mov	r1, r9
 800a8e0:	f7f5 fcdc 	bl	800029c <__adddf3>
 800a8e4:	4622      	mov	r2, r4
 800a8e6:	462b      	mov	r3, r5
 800a8e8:	f7f5 fe8e 	bl	8000608 <__aeabi_dmul>
 800a8ec:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	d14b      	bne.n	800a98e <atan+0x25e>
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	f7f5 fccd 	bl	8000298 <__aeabi_dsub>
 800a8fe:	e72c      	b.n	800a75a <atan+0x2a>
 800a900:	ee10 0a10 	vmov	r0, s0
 800a904:	4b53      	ldr	r3, [pc, #332]	; (800aa54 <atan+0x324>)
 800a906:	2200      	movs	r2, #0
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f5 fcc5 	bl	8000298 <__aeabi_dsub>
 800a90e:	4b51      	ldr	r3, [pc, #324]	; (800aa54 <atan+0x324>)
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	2200      	movs	r2, #0
 800a916:	4620      	mov	r0, r4
 800a918:	4629      	mov	r1, r5
 800a91a:	f7f5 fcbf 	bl	800029c <__adddf3>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4630      	mov	r0, r6
 800a924:	4639      	mov	r1, r7
 800a926:	f7f5 ff99 	bl	800085c <__aeabi_ddiv>
 800a92a:	f04f 0a01 	mov.w	sl, #1
 800a92e:	4604      	mov	r4, r0
 800a930:	460d      	mov	r5, r1
 800a932:	e764      	b.n	800a7fe <atan+0xce>
 800a934:	4b49      	ldr	r3, [pc, #292]	; (800aa5c <atan+0x32c>)
 800a936:	429e      	cmp	r6, r3
 800a938:	da1d      	bge.n	800a976 <atan+0x246>
 800a93a:	ee10 0a10 	vmov	r0, s0
 800a93e:	4b48      	ldr	r3, [pc, #288]	; (800aa60 <atan+0x330>)
 800a940:	2200      	movs	r2, #0
 800a942:	4629      	mov	r1, r5
 800a944:	f7f5 fca8 	bl	8000298 <__aeabi_dsub>
 800a948:	4b45      	ldr	r3, [pc, #276]	; (800aa60 <atan+0x330>)
 800a94a:	4606      	mov	r6, r0
 800a94c:	460f      	mov	r7, r1
 800a94e:	2200      	movs	r2, #0
 800a950:	4620      	mov	r0, r4
 800a952:	4629      	mov	r1, r5
 800a954:	f7f5 fe58 	bl	8000608 <__aeabi_dmul>
 800a958:	4b3e      	ldr	r3, [pc, #248]	; (800aa54 <atan+0x324>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	f7f5 fc9e 	bl	800029c <__adddf3>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4630      	mov	r0, r6
 800a966:	4639      	mov	r1, r7
 800a968:	f7f5 ff78 	bl	800085c <__aeabi_ddiv>
 800a96c:	f04f 0a02 	mov.w	sl, #2
 800a970:	4604      	mov	r4, r0
 800a972:	460d      	mov	r5, r1
 800a974:	e743      	b.n	800a7fe <atan+0xce>
 800a976:	462b      	mov	r3, r5
 800a978:	ee10 2a10 	vmov	r2, s0
 800a97c:	4939      	ldr	r1, [pc, #228]	; (800aa64 <atan+0x334>)
 800a97e:	2000      	movs	r0, #0
 800a980:	f7f5 ff6c 	bl	800085c <__aeabi_ddiv>
 800a984:	f04f 0a03 	mov.w	sl, #3
 800a988:	4604      	mov	r4, r0
 800a98a:	460d      	mov	r5, r1
 800a98c:	e737      	b.n	800a7fe <atan+0xce>
 800a98e:	4b36      	ldr	r3, [pc, #216]	; (800aa68 <atan+0x338>)
 800a990:	4e36      	ldr	r6, [pc, #216]	; (800aa6c <atan+0x33c>)
 800a992:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	f7f5 fc7d 	bl	8000298 <__aeabi_dsub>
 800a99e:	4622      	mov	r2, r4
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	f7f5 fc79 	bl	8000298 <__aeabi_dsub>
 800a9a6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a9b2:	f7f5 fc71 	bl	8000298 <__aeabi_dsub>
 800a9b6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	460d      	mov	r5, r1
 800a9be:	f6bf aed6 	bge.w	800a76e <atan+0x3e>
 800a9c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9c6:	461d      	mov	r5, r3
 800a9c8:	e6d1      	b.n	800a76e <atan+0x3e>
 800a9ca:	a51d      	add	r5, pc, #116	; (adr r5, 800aa40 <atan+0x310>)
 800a9cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a9d0:	e6cd      	b.n	800a76e <atan+0x3e>
 800a9d2:	bf00      	nop
 800a9d4:	f3af 8000 	nop.w
 800a9d8:	54442d18 	.word	0x54442d18
 800a9dc:	bff921fb 	.word	0xbff921fb
 800a9e0:	8800759c 	.word	0x8800759c
 800a9e4:	7e37e43c 	.word	0x7e37e43c
 800a9e8:	e322da11 	.word	0xe322da11
 800a9ec:	3f90ad3a 	.word	0x3f90ad3a
 800a9f0:	24760deb 	.word	0x24760deb
 800a9f4:	3fa97b4b 	.word	0x3fa97b4b
 800a9f8:	a0d03d51 	.word	0xa0d03d51
 800a9fc:	3fb10d66 	.word	0x3fb10d66
 800aa00:	c54c206e 	.word	0xc54c206e
 800aa04:	3fb745cd 	.word	0x3fb745cd
 800aa08:	920083ff 	.word	0x920083ff
 800aa0c:	3fc24924 	.word	0x3fc24924
 800aa10:	5555550d 	.word	0x5555550d
 800aa14:	3fd55555 	.word	0x3fd55555
 800aa18:	2c6a6c2f 	.word	0x2c6a6c2f
 800aa1c:	bfa2b444 	.word	0xbfa2b444
 800aa20:	52defd9a 	.word	0x52defd9a
 800aa24:	3fadde2d 	.word	0x3fadde2d
 800aa28:	af749a6d 	.word	0xaf749a6d
 800aa2c:	3fb3b0f2 	.word	0x3fb3b0f2
 800aa30:	fe231671 	.word	0xfe231671
 800aa34:	3fbc71c6 	.word	0x3fbc71c6
 800aa38:	9998ebc4 	.word	0x9998ebc4
 800aa3c:	3fc99999 	.word	0x3fc99999
 800aa40:	54442d18 	.word	0x54442d18
 800aa44:	3ff921fb 	.word	0x3ff921fb
 800aa48:	440fffff 	.word	0x440fffff
 800aa4c:	7ff00000 	.word	0x7ff00000
 800aa50:	3fdbffff 	.word	0x3fdbffff
 800aa54:	3ff00000 	.word	0x3ff00000
 800aa58:	3ff2ffff 	.word	0x3ff2ffff
 800aa5c:	40038000 	.word	0x40038000
 800aa60:	3ff80000 	.word	0x3ff80000
 800aa64:	bff00000 	.word	0xbff00000
 800aa68:	0800ad18 	.word	0x0800ad18
 800aa6c:	0800acf8 	.word	0x0800acf8

0800aa70 <fabs>:
 800aa70:	ec51 0b10 	vmov	r0, r1, d0
 800aa74:	ee10 2a10 	vmov	r2, s0
 800aa78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa7c:	ec43 2b10 	vmov	d0, r2, r3
 800aa80:	4770      	bx	lr
	...

0800aa84 <_init>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	bf00      	nop
 800aa88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8a:	bc08      	pop	{r3}
 800aa8c:	469e      	mov	lr, r3
 800aa8e:	4770      	bx	lr

0800aa90 <_fini>:
 800aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa92:	bf00      	nop
 800aa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa96:	bc08      	pop	{r3}
 800aa98:	469e      	mov	lr, r3
 800aa9a:	4770      	bx	lr
