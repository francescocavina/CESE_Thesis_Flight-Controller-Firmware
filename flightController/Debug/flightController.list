
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dbc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd8  08007fd8  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fe0  08007fe0  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08007fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d0  2000014c  08008134  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000171c  08008134  0002171c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011675  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003212  00000000  00000000  00031834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00034a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b03  00000000  00000000  000358e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019034  00000000  00000000  000363eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017122  00000000  00000000  0004f41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd0e  00000000  00000000  00066541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e9c  00000000  00000000  000f2250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000f60ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000014c 	.word	0x2000014c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007f38 	.word	0x08007f38

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000150 	.word	0x20000150
 80001d0:	08007f38 	.word	0x08007f38

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80004d6:	f000 fae1 	bl	8000a9c <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80004da:	f000 f82f 	bl	800053c <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80004de:	f000 f897 	bl	8000610 <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 80004e2:	f006 fecd 	bl	8007280 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */
    char str[17] = "Initialized\r\n";
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <main+0x64>)
 80004e8:	463c      	mov	r4, r7
 80004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ec:	c407      	stmia	r4!, {r0, r1, r2}
 80004ee:	8023      	strh	r3, [r4, #0]
 80004f0:	f107 030e 	add.w	r3, r7, #14
 80004f4:	2100      	movs	r1, #0
 80004f6:	460a      	mov	r2, r1
 80004f8:	801a      	strh	r2, [r3, #0]
 80004fa:	460a      	mov	r2, r1
 80004fc:	709a      	strb	r2, [r3, #2]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    while (1) {
        MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_IMU_Init();
 80004fe:	f000 faa5 	bl	8000a4c <MPU6050_IMU_Init>
 8000502:	6178      	str	r0, [r7, #20]
        // str[12] = hmpu6050->instance + 48;
        HAL_Delay(1000);
 8000504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000508:	f000 fb3a 	bl	8000b80 <HAL_Delay>

        if (hmpu6050->instance == 1 || hmpu6050->instance == 2) {
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d003      	beq.n	800051c <main+0x4c>
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d105      	bne.n	8000528 <main+0x58>
            CDC_Transmit_FS(str, 17);
 800051c:	463b      	mov	r3, r7
 800051e:	2111      	movs	r1, #17
 8000520:	4618      	mov	r0, r3
 8000522:	f006 ff6b 	bl	80073fc <CDC_Transmit_FS>
 8000526:	e003      	b.n	8000530 <main+0x60>
        } else {
            CDC_Transmit_FS((char *)"Not initialized\r\n", 18);
 8000528:	2112      	movs	r1, #18
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x68>)
 800052c:	f006 ff66 	bl	80073fc <CDC_Transmit_FS>
    while (1) {
 8000530:	e7e5      	b.n	80004fe <main+0x2e>
 8000532:	bf00      	nop
 8000534:	08007f64 	.word	0x08007f64
 8000538:	08007f50 	.word	0x08007f50

0800053c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 fc64 	bl	8007e18 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SystemClock_Config+0xd0>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 80005b0:	230f      	movs	r3, #15
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 80005b4:	2390      	movs	r3, #144	; 0x90
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 80005bc:	2305      	movs	r3, #5
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fe01 	bl	80031cc <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
        Error_Handler();
 80005d0:	f000 f854 	bl	800067c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 f863 	bl	80036bc <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
        Error_Handler();
 80005fc:	f000 f83e 	bl	800067c <Error_Handler>
    }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_GPIO_Init+0x68>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_GPIO_Init+0x68>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_GPIO_Init+0x68>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_GPIO_Init+0x68>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <MX_GPIO_Init+0x68>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_GPIO_Init+0x68>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_GPIO_Init+0x68>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <MX_GPIO_Init+0x68>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_GPIO_Init+0x68>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
	...

0800068c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <HAL_MspInit+0x4c>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a0:	6453      	str	r3, [r2, #68]	; 0x44
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_MspInit+0x4c>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	6413      	str	r3, [r2, #64]	; 0x40
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a19      	ldr	r2, [pc, #100]	; (8000760 <HAL_I2C_MspInit+0x84>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d12b      	bne.n	8000756 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800071a:	23c0      	movs	r3, #192	; 0xc0
 800071c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800071e:	2312      	movs	r3, #18
 8000720:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800072a:	2304      	movs	r3, #4
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <HAL_I2C_MspInit+0x8c>)
 8000736:	f000 fb59 	bl	8000dec <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_I2C_MspInit+0x88>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40005400 	.word	0x40005400
 8000764:	40023800 	.word	0x40023800
 8000768:	40020400 	.word	0x40020400

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f9c2 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <OTG_FS_IRQHandler+0x10>)
 80007c6:	f001 fbd3 	bl	8001f70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000ea8 	.word	0x20000ea8

080007d4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <_sbrk+0x5c>)
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <_sbrk+0x60>)
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <_sbrk+0x64>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <_sbrk+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	d207      	bcs.n	8000814 <_sbrk+0x40>
        errno = ENOMEM;
 8000804:	f007 fb20 	bl	8007e48 <__errno>
 8000808:	4603      	mov	r3, r0
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000812:	e009      	b.n	8000828 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <_sbrk+0x64>)
 8000824:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20010000 	.word	0x20010000
 8000834:	00000400 	.word	0x00000400
 8000838:	20000168 	.word	0x20000168
 800083c:	20001720 	.word	0x20001720

08000840 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SystemInit+0x20>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <SystemInit+0x20>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800089c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000880:	4c0b      	ldr	r4, [pc, #44]	; (80008b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800088e:	f7ff ffd7 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f007 fadf 	bl	8007e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fe1b 	bl	80004d0 <main>
  bx  lr
 800089a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800089c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80008a8:	08007fe8 	.word	0x08007fe8
  ldr r2, =_sbss
 80008ac:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80008b0:	2000171c 	.word	0x2000171c

080008b4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC_IRQHandler>
	...

080008b8 <MX_I2C_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t MX_I2C_Init(I2C_HandleTypeDef * hi2c) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
    /* BEGIN MODIFY 1*/
    hi2c->Instance = I2C1;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <MX_I2C_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
    hi2c->Init.ClockSpeed = 400000;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_I2C_Init+0x60>)
 80008ca:	605a      	str	r2, [r3, #4]
    hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    hi2c->Init.OwnAddress1 = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
    hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008de:	611a      	str	r2, [r3, #16]
    hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
    hi2c->Init.OwnAddress2 = 0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
    hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
    hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
    /* END MODIFY 1 */

    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Init(hi2c)) {
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 fbfb 	bl	80010f4 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C_Init+0x50>
        /* END MODIFY 2 */
        return false;
 8000904:	2300      	movs	r3, #0
 8000906:	e000      	b.n	800090a <MX_I2C_Init+0x52>
    }

    return true;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40005400 	.word	0x40005400
 8000918:	00061a80 	.word	0x00061a80

0800091c <i2c_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
bool_t i2c_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
    uint8_t who_am_I_value;

    /* Set I2C_HandleTypeDef to MPU6050 instance */
    if (hmpu6050->instance == 1) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d103      	bne.n	8000934 <i2c_Init+0x18>

        hmpu6050->hi2c = &hi2c;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <i2c_Init+0x60>)
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	e005      	b.n	8000940 <i2c_Init+0x24>
    } else if (hmpu6050->instance == 2) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d101      	bne.n	8000940 <i2c_Init+0x24>
        // TODO
        return true;
 800093c:	2301      	movs	r3, #1
 800093e:	e019      	b.n	8000974 <i2c_Init+0x58>
    }

    /* Initialize I2C */
    if (!MX_I2C_Init(hmpu6050->hi2c)) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffb7 	bl	80008b8 <MX_I2C_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	f083 0301 	eor.w	r3, r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <i2c_Init+0x3e>
        /* I2C initialization was unsuccessful */
        return false;
 8000956:	2300      	movs	r3, #0
 8000958:	e00c      	b.n	8000974 <i2c_Init+0x58>
    }

    /* Read IMU device ID */
    i2c_Read(hmpu6050, MPU_6050_REG_WHO_AM_I_MPU6050, &who_am_I_value, 1);
 800095a:	f107 020f 	add.w	r2, r7, #15
 800095e:	2301      	movs	r3, #1
 8000960:	2175      	movs	r1, #117	; 0x75
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f80c 	bl	8000980 <i2c_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_VALUE_WHO_AM_I) {
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b68      	cmp	r3, #104	; 0x68
 800096c:	d101      	bne.n	8000972 <i2c_Init+0x56>
        /* Right IMU device ID */
        return true;
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <i2c_Init+0x58>
    } else {
        /* Wrong IMU device ID */
        return false;
 8000972:	2300      	movs	r3, #0
    }
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000016c 	.word	0x2000016c

08000980 <i2c_Read>:

void i2c_Read(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af04      	add	r7, sp, #16
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	461a      	mov	r2, r3
 800098c:	460b      	mov	r3, r1
 800098e:	72fb      	strb	r3, [r7, #11]
 8000990:	4613      	mov	r3, r2
 8000992:	72bb      	strb	r3, [r7, #10]

    /* Read IMU data by passing a data register */
    HAL_I2C_Mem_Read(hmpu6050->hi2c, hmpu6050->address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	6858      	ldr	r0, [r3, #4]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	7a1b      	ldrb	r3, [r3, #8]
 800099c:	b299      	uxth	r1, r3
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	7abb      	ldrb	r3, [r7, #10]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	2464      	movs	r4, #100	; 0x64
 80009a8:	9402      	str	r4, [sp, #8]
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	f000 fce3 	bl	800137c <HAL_I2C_Mem_Read>
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd90      	pop	{r4, r7, pc}
	...

080009c0 <MPU6050_IMU_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_IMU_InstanceInit() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MPU6050_IMU_InstanceInit+0x88>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d101      	bne.n	80009d2 <MPU6050_IMU_InstanceInit+0x12>
        return NULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e035      	b.n	8000a3e <MPU6050_IMU_InstanceInit+0x7e>

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvortMalloc(sizeof(1));
#else
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 80009d2:	2014      	movs	r0, #20
 80009d4:	f007 f964 	bl	8007ca0 <malloc>
 80009d8:	4603      	mov	r3, r0
 80009da:	607b      	str	r3, [r7, #4]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
 80009dc:	2004      	movs	r0, #4
 80009de:	f007 f95f 	bl	8007ca0 <malloc>
 80009e2:	4603      	mov	r3, r0
 80009e4:	603b      	str	r3, [r7, #0]
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <MPU6050_IMU_InstanceInit+0x32>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10c      	bne.n	8000a0c <MPU6050_IMU_InstanceInit+0x4c>
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
        vPortFree(hmpu6050);
#else
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
        free(hmpu6050->buffer);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f007 f957 	bl	8007cb0 <free>
        free(hmpu6050);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f007 f954 	bl	8007cb0 <free>
#endif
        return NULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e018      	b.n	8000a3e <MPU6050_IMU_InstanceInit+0x7e>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MPU6050_IMU_InstanceInit+0x88>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d106      	bne.n	8000a22 <MPU6050_IMU_InstanceInit+0x62>
            hmpu6050->instance = 1;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_I2C_ADDR1;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	22d0      	movs	r2, #208	; 0xd0
 8000a1e:	721a      	strb	r2, [r3, #8]
 8000a20:	e009      	b.n	8000a36 <MPU6050_IMU_InstanceInit+0x76>
        } else if (instancesNumber == 1) {
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MPU6050_IMU_InstanceInit+0x88>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d105      	bne.n	8000a36 <MPU6050_IMU_InstanceInit+0x76>
            hmpu6050->instance = 2;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_I2C_ADDR2;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	22d1      	movs	r2, #209	; 0xd1
 8000a34:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->buffer = buffer;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200001c0 	.word	0x200001c0

08000a4c <MPU6050_IMU_Init>:

	i2c_Write(hmpu6050, reg, data, dataSize);
}

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_IMU_Init() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_IMU_InstanceInit();
 8000a52:	f7ff ffb5 	bl	80009c0 <MPU6050_IMU_InstanceInit>
 8000a56:	6078      	str	r0, [r7, #4]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d017      	beq.n	8000a8e <MPU6050_IMU_Init+0x42>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (i2c_Init(hmpu6050)) {
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ff5c 	bl	800091c <i2c_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d007      	beq.n	8000a7a <MPU6050_IMU_Init+0x2e>

            /* Initialization was successful */
        	/* Configure device */
        	//MPU6050_IMU_Config(hmpu6050);

            instancesNumber++;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MPU6050_IMU_Init+0x4c>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MPU6050_IMU_Init+0x4c>)
 8000a74:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	e00a      	b.n	8000a90 <MPU6050_IMU_Init+0x44>
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
            vPortFree(hmpu6050);
#else
            /* Free up dynamic allocated memory */
            free(hmpu6050->buffer);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 f916 	bl	8007cb0 <free>
            free(hmpu6050);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f007 f913 	bl	8007cb0 <free>
#endif

            return NULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <MPU6050_IMU_Init+0x44>
        }
    } else {

        /* Instance couldn't be created */
        return NULL;
 8000a8e:	2300      	movs	r3, #0
    }
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200001c0 	.word	0x200001c0

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_Init+0x40>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_Init+0x40>)
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x40>)
 8000abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f94f 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	200f      	movs	r0, #15
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fddc 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f967 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b1c:	f000 f92f 	bl	8000d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	200001c4 	.word	0x200001c4

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200001c4 	.word	0x200001c4

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_Delay+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d48:	f7ff ff8e 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff29 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff3e 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff8e 	bl	8000cbc <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff31 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffa2 	bl	8000d24 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e159      	b.n	80010bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8148 	bne.w	80010b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80a2 	beq.w	80010b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b54      	ldr	r3, [pc, #336]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a49      	ldr	r2, [pc, #292]	; (80010dc <HAL_GPIO_Init+0x2f0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x202>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2f4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x1fe>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_GPIO_Init+0x2f8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x1fa>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <HAL_GPIO_Init+0x2fc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x1f6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_GPIO_Init+0x300>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x1f2>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4935      	ldr	r1, [pc, #212]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001086:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_GPIO_Init+0x304>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f aea2 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e12b      	b.n	800135e <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fade 	bl	80006dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2224      	movs	r2, #36	; 0x24
 8001124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001146:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001156:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8001158:	f002 fc68 	bl	8003a2c <HAL_RCC_GetPCLK1Freq>
 800115c:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a81      	ldr	r2, [pc, #516]	; (8001368 <HAL_I2C_Init+0x274>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d807      	bhi.n	8001178 <HAL_I2C_Init+0x84>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a80      	ldr	r2, [pc, #512]	; (800136c <HAL_I2C_Init+0x278>)
 800116c:	4293      	cmp	r3, r2
 800116e:	bf94      	ite	ls
 8001170:	2301      	movls	r3, #1
 8001172:	2300      	movhi	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	e006      	b.n	8001186 <HAL_I2C_Init+0x92>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4a7d      	ldr	r2, [pc, #500]	; (8001370 <HAL_I2C_Init+0x27c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	bf94      	ite	ls
 8001180:	2301      	movls	r3, #1
 8001182:	2300      	movhi	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0e7      	b.n	800135e <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4a78      	ldr	r2, [pc, #480]	; (8001374 <HAL_I2C_Init+0x280>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9b      	lsrs	r3, r3, #18
 8001198:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a6a      	ldr	r2, [pc, #424]	; (8001368 <HAL_I2C_Init+0x274>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d802      	bhi.n	80011c8 <HAL_I2C_Init+0xd4>
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3301      	adds	r3, #1
 80011c6:	e009      	b.n	80011dc <HAL_I2C_Init+0xe8>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a69      	ldr	r2, [pc, #420]	; (8001378 <HAL_I2C_Init+0x284>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	3301      	adds	r3, #1
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6213      	str	r3, [r2, #32]
               I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	495c      	ldr	r1, [pc, #368]	; (8001368 <HAL_I2C_Init+0x274>)
 80011f8:	428b      	cmp	r3, r1
 80011fa:	d819      	bhi.n	8001230 <HAL_I2C_Init+0x13c>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	1e59      	subs	r1, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fbb1 f3f3 	udiv	r3, r1, r3
 800120a:	1c59      	adds	r1, r3, #1
 800120c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001210:	400b      	ands	r3, r1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00a      	beq.n	800122c <HAL_I2C_Init+0x138>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1e59      	subs	r1, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fbb1 f3f3 	udiv	r3, r1, r3
 8001224:	3301      	adds	r3, #1
 8001226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122a:	e051      	b.n	80012d0 <HAL_I2C_Init+0x1dc>
 800122c:	2304      	movs	r3, #4
 800122e:	e04f      	b.n	80012d0 <HAL_I2C_Init+0x1dc>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d111      	bne.n	800125c <HAL_I2C_Init+0x168>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1e58      	subs	r0, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6859      	ldr	r1, [r3, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	440b      	add	r3, r1
 8001246:	fbb0 f3f3 	udiv	r3, r0, r3
 800124a:	3301      	adds	r3, #1
 800124c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf0c      	ite	eq
 8001254:	2301      	moveq	r3, #1
 8001256:	2300      	movne	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	e012      	b.n	8001282 <HAL_I2C_Init+0x18e>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1e58      	subs	r0, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	0099      	lsls	r1, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001272:	3301      	adds	r3, #1
 8001274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf0c      	ite	eq
 800127c:	2301      	moveq	r3, #1
 800127e:	2300      	movne	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Init+0x196>
 8001286:	2301      	movs	r3, #1
 8001288:	e022      	b.n	80012d0 <HAL_I2C_Init+0x1dc>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <HAL_I2C_Init+0x1bc>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1e58      	subs	r0, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6859      	ldr	r1, [r3, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	440b      	add	r3, r1
 80012a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a4:	3301      	adds	r3, #1
 80012a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ae:	e00f      	b.n	80012d0 <HAL_I2C_Init+0x1dc>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e58      	subs	r0, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	0099      	lsls	r1, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c6:	3301      	adds	r3, #1
 80012c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	6809      	ldr	r1, [r1, #0]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61cb      	str	r3, [r1, #28]
               I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
               (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6911      	ldr	r1, [r2, #16]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68d2      	ldr	r2, [r2, #12]
 800130a:	4311      	orrs	r1, r2
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	430b      	orrs	r3, r1
 8001312:	6093      	str	r3, [r2, #8]
               (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
               (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	60da      	str	r2, [r3, #12]
               (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0201 	orr.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2220      	movs	r2, #32
 800134a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	000186a0 	.word	0x000186a0
 800136c:	001e847f 	.word	0x001e847f
 8001370:	003d08ff 	.word	0x003d08ff
 8001374:	431bde83 	.word	0x431bde83
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <HAL_I2C_Mem_Read>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                   uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                   uint16_t Size, uint32_t Timeout) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	; 0x30
 8001380:	af02      	add	r7, sp, #8
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4603      	mov	r3, r0
 800138c:	817b      	strh	r3, [r7, #10]
 800138e:	460b      	mov	r3, r1
 8001390:	813b      	strh	r3, [r7, #8]
 8001392:	4613      	mov	r3, r2
 8001394:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8001396:	f7ff fbe7 	bl	8000b68 <HAL_GetTick>
 800139a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b20      	cmp	r3, #32
 80013a6:	f040 8208 	bne.w	80017ba <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2319      	movs	r3, #25
 80013b0:	2201      	movs	r2, #1
 80013b2:	497b      	ldr	r1, [pc, #492]	; (80015a0 <HAL_I2C_Mem_Read+0x224>)
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 faef 	bl	8001998 <I2C_WaitOnFlagUntilTimeout>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_I2C_Mem_Read+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 80013c0:	2302      	movs	r3, #2
 80013c2:	e1fb      	b.n	80017bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_I2C_Mem_Read+0x56>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e1f4      	b.n	80017bc <HAL_I2C_Mem_Read+0x440>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d007      	beq.n	80013f8 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001406:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2222      	movs	r2, #34	; 0x22
 800140c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001428:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142e:	b29a      	uxth	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4a5b      	ldr	r2, [pc, #364]	; (80015a4 <HAL_I2C_Mem_Read+0x228>)
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 800143a:	88f8      	ldrh	r0, [r7, #6]
 800143c:	893a      	ldrh	r2, [r7, #8]
 800143e:	8979      	ldrh	r1, [r7, #10]
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4603      	mov	r3, r0
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f9bc 	bl	80017c8 <I2C_RequestMemoryRead>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Mem_Read+0xde>
            HAL_OK) {
            return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e1b0      	b.n	80017bc <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145e:	2b00      	cmp	r3, #0
 8001460:	d113      	bne.n	800148a <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	623b      	str	r3, [r7, #32]
 8001476:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e184      	b.n	8001794 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148e:	2b01      	cmp	r3, #1
 8001490:	d11b      	bne.n	80014ca <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014a0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e164      	b.n	8001794 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d11b      	bne.n	800150a <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e0:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014f0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	e144      	b.n	8001794 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8001520:	e138      	b.n	8001794 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001526:	2b03      	cmp	r3, #3
 8001528:	f200 80f1 	bhi.w	800170e <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	2b01      	cmp	r3, #1
 8001532:	d123      	bne.n	800157c <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 fb44 	bl	8001bc6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e139      	b.n	80017bc <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001564:	3b01      	subs	r3, #1
 8001566:	b29a      	uxth	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001570:	b29b      	uxth	r3, r3
 8001572:	3b01      	subs	r3, #1
 8001574:	b29a      	uxth	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	855a      	strh	r2, [r3, #42]	; 0x2a
 800157a:	e10b      	b.n	8001794 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001580:	2b02      	cmp	r3, #2
 8001582:	d14e      	bne.n	8001622 <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800158a:	2200      	movs	r2, #0
 800158c:	4906      	ldr	r1, [pc, #24]	; (80015a8 <HAL_I2C_Mem_Read+0x22c>)
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f000 fa02 	bl	8001998 <I2C_WaitOnFlagUntilTimeout>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <HAL_I2C_Mem_Read+0x230>
                        HAL_OK) {
                        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e10e      	b.n	80017bc <HAL_I2C_Mem_Read+0x440>
 800159e:	bf00      	nop
 80015a0:	00100002 	.word	0x00100002
 80015a4:	ffff0000 	.word	0xffff0000
 80015a8:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ba:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d8:	3b01      	subs	r3, #1
 80015da:	b29a      	uxth	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160a:	3b01      	subs	r3, #1
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001620:	e0b8      	b.n	8001794 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001628:	2200      	movs	r2, #0
 800162a:	4966      	ldr	r1, [pc, #408]	; (80017c4 <HAL_I2C_Mem_Read+0x448>)
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 f9b3 	bl	8001998 <I2C_WaitOnFlagUntilTimeout>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_I2C_Mem_Read+0x2c0>
                        HAL_OK) {
                        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0bf      	b.n	80017bc <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800164a:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	3b01      	subs	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001674:	b29b      	uxth	r3, r3
 8001676:	3b01      	subs	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001684:	2200      	movs	r2, #0
 8001686:	494f      	ldr	r1, [pc, #316]	; (80017c4 <HAL_I2C_Mem_Read+0x448>)
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f985 	bl	8001998 <I2C_WaitOnFlagUntilTimeout>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_I2C_Mem_Read+0x31c>
                        HAL_OK) {
                        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e091      	b.n	80017bc <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a6:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800170c:	e042      	b.n	8001794 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800170e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 fa57 	bl	8001bc6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e04c      	b.n	80017bc <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	3b01      	subs	r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b04      	cmp	r3, #4
 8001760:	d118      	bne.n	8001794 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177e:	3b01      	subs	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178a:	b29b      	uxth	r3, r3
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f aec2 	bne.w	8001522 <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 80017ba:	2302      	movs	r3, #2
    }
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	00010004 	.word	0x00010004

080017c8 <I2C_RequestMemoryRead>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize,
                                               uint32_t Timeout, uint32_t Tickstart) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	817b      	strh	r3, [r7, #10]
 80017da:	460b      	mov	r3, r1
 80017dc:	813b      	strh	r3, [r7, #8]
 80017de:	4613      	mov	r3, r2
 80017e0:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017f0:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001800:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	2200      	movs	r2, #0
 800180a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f8c2 	bl	8001998 <I2C_WaitOnFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00d      	beq.n	8001836 <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001828:	d103      	bne.n	8001832 <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e0aa      	b.n	800198c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001836:	897b      	ldrh	r3, [r7, #10]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001844:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	6a3a      	ldr	r2, [r7, #32]
 800184a:	4952      	ldr	r1, [pc, #328]	; (8001994 <I2C_RequestMemoryRead+0x1cc>)
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 f8fa 	bl	8001a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <I2C_RequestMemoryRead+0x94>
        HAL_OK) {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e097      	b.n	800198c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8001872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001874:	6a39      	ldr	r1, [r7, #32]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f964 	bl	8001b44 <I2C_WaitOnTXEFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00d      	beq.n	800189e <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2b04      	cmp	r3, #4
 8001888:	d107      	bne.n	800189a <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001898:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e076      	b.n	800198c <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018a4:	893b      	ldrh	r3, [r7, #8]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	611a      	str	r2, [r3, #16]
 80018ae:	e021      	b.n	80018f4 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018b0:	893b      	ldrh	r3, [r7, #8]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80018be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c0:	6a39      	ldr	r1, [r7, #32]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f93e 	bl	8001b44 <I2C_WaitOnTXEFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00d      	beq.n	80018ea <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d107      	bne.n	80018e6 <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e4:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e050      	b.n	800198c <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018ea:	893b      	ldrh	r3, [r7, #8]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	6a39      	ldr	r1, [r7, #32]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f923 	bl	8001b44 <I2C_WaitOnTXEFlagUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00d      	beq.n	8001920 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	2b04      	cmp	r3, #4
 800190a:	d107      	bne.n	800191c <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e035      	b.n	800198c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800192e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	2200      	movs	r2, #0
 8001938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f82b 	bl	8001998 <I2C_WaitOnFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00d      	beq.n	8001964 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001956:	d103      	bne.n	8001960 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e013      	b.n	800198c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001964:	897b      	ldrh	r3, [r7, #10]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	b2da      	uxtb	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	6a3a      	ldr	r2, [r7, #32]
 8001978:	4906      	ldr	r1, [pc, #24]	; (8001994 <I2C_RequestMemoryRead+0x1cc>)
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f863 	bl	8001a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <I2C_RequestMemoryRead+0x1c2>
        HAL_OK) {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	00010002 	.word	0x00010002

08001998 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag,
                                                    FlagStatus Status, uint32_t Timeout,
                                                    uint32_t Tickstart) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80019a8:	e025      	b.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019b0:	d021      	beq.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80019b2:	f7ff f8d9 	bl	8000b68 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d302      	bcc.n	80019c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d116      	bne.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f043 0220 	orr.w	r2, r3, #32
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e023      	b.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d10d      	bne.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf0c      	ite	eq
 8001a12:	2301      	moveq	r3, #1
 8001a14:	2300      	movne	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	e00c      	b.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4013      	ands	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d0b6      	beq.n	80019aa <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c,
                                                                 uint32_t Flag, uint32_t Timeout,
                                                                 uint32_t Tickstart) {
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8001a54:	e051      	b.n	8001afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d123      	bne.n	8001aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a74:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a7e:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f043 0204 	orr.w	r2, r3, #4
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e046      	b.n	8001b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab4:	d021      	beq.n	8001afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8001ab6:	f7ff f857 	bl	8000b68 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d302      	bcc.n	8001acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d116      	bne.n	8001afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f043 0220 	orr.w	r2, r3, #32
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e020      	b.n	8001b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d10c      	bne.n	8001b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf14      	ite	ne
 8001b16:	2301      	movne	r3, #1
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	e00b      	b.n	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	43da      	mvns	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d18d      	bne.n	8001a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8001b50:	e02d      	b.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f88d 	bl	8001c72 <I2C_IsAcknowledgeFailed>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e02d      	b.n	8001bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b68:	d021      	beq.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8001b6a:	f7fe fffd 	bl	8000b68 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d302      	bcc.n	8001b80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d116      	bne.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f043 0220 	orr.w	r2, r3, #32
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e007      	b.n	8001bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb8:	2b80      	cmp	r3, #128	; 0x80
 8001bba:	d1ca      	bne.n	8001b52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart) {
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8001bd2:	e042      	b.n	8001c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d119      	bne.n	8001c16 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f06f 0210 	mvn.w	r2, #16
 8001bea:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e029      	b.n	8001c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8001c16:	f7fe ffa7 	bl	8000b68 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d302      	bcc.n	8001c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d116      	bne.n	8001c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e007      	b.n	8001c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d1b5      	bne.n	8001bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c88:	d11b      	bne.n	8001cc2 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c92:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f043 0204 	orr.w	r2, r3, #4
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	b08f      	sub	sp, #60	; 0x3c
 8001cd4:	af0a      	add	r7, sp, #40	; 0x28
 8001cd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e10f      	b.n	8001f02 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d106      	bne.n	8001d02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f005 fcc5 	bl	800768c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2203      	movs	r2, #3
 8001d06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 ffac 	bl	8003c7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	687e      	ldr	r6, [r7, #4]
 8001d2e:	466d      	mov	r5, sp
 8001d30:	f106 0410 	add.w	r4, r6, #16
 8001d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d40:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d44:	1d33      	adds	r3, r6, #4
 8001d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	f001 fe83 	bl	8003a54 <USB_CoreInit>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0d0      	b.n	8001f02 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 ff9a 	bl	8003ca0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e04a      	b.n	8001e08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	333d      	adds	r3, #61	; 0x3d
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	333c      	adds	r3, #60	; 0x3c
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	b298      	uxth	r0, r3
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	3344      	adds	r3, #68	; 0x44
 8001dae:	4602      	mov	r2, r0
 8001db0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3340      	adds	r3, #64	; 0x40
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3348      	adds	r3, #72	; 0x48
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	334c      	adds	r3, #76	; 0x4c
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3354      	adds	r3, #84	; 0x54
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	3301      	adds	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d3af      	bcc.n	8001d72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e044      	b.n	8001ea2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d3b5      	bcc.n	8001e18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	687e      	ldr	r6, [r7, #4]
 8001eb4:	466d      	mov	r5, sp
 8001eb6:	f106 0410 	add.w	r4, r6, #16
 8001eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eca:	1d33      	adds	r3, r6, #4
 8001ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ece:	6838      	ldr	r0, [r7, #0]
 8001ed0:	f001 ff32 	bl	8003d38 <USB_DevInit>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00d      	b.n	8001f02 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 f881 	bl	8005002 <USB_DevDisconnect>

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_PCD_Start+0x1c>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e020      	b.n	8001f68 <HAL_PCD_Start+0x5e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d109      	bne.n	8001f4a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d005      	beq.n	8001f4a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 fe84 	bl	8003c5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 f831 	bl	8004fc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b08d      	sub	sp, #52	; 0x34
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 f8ef 	bl	800516a <USB_GetMode>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 848a 	bne.w	80028a8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 f853 	bl	8005044 <USB_ReadInterrupts>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8480 	beq.w	80028a6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 f840 	bl	8005044 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d107      	bne.n	8001fde <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f002 0202 	and.w	r2, r2, #2
 8001fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 f82e 	bl	8005044 <USB_ReadInterrupts>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b10      	cmp	r3, #16
 8001ff0:	d161      	bne.n	80020b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0210 	bic.w	r2, r2, #16
 8002000:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	3304      	adds	r3, #4
 8002020:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	0c5b      	lsrs	r3, r3, #17
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	2b02      	cmp	r3, #2
 800202c:	d124      	bne.n	8002078 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d035      	beq.n	80020a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	6a38      	ldr	r0, [r7, #32]
 800204e:	f002 fe65 	bl	8004d1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205e:	441a      	add	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002070:	441a      	add	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	621a      	str	r2, [r3, #32]
 8002076:	e016      	b.n	80020a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	0c5b      	lsrs	r3, r3, #17
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	2b06      	cmp	r3, #6
 8002082:	d110      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800208a:	2208      	movs	r2, #8
 800208c:	4619      	mov	r1, r3
 800208e:	6a38      	ldr	r0, [r7, #32]
 8002090:	f002 fe44 	bl	8004d1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a0:	441a      	add	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699a      	ldr	r2, [r3, #24]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0210 	orr.w	r2, r2, #16
 80020b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 ffc2 	bl	8005044 <USB_ReadInterrupts>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ca:	f040 80a7 	bne.w	800221c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 ffc7 	bl	800506a <USB_ReadDevAllOutEpInterrupt>
 80020dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020de:	e099      	b.n	8002214 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 808e 	beq.w	8002208 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 ffeb 	bl	80050d2 <USB_ReadDevOutEPInterrupt>
 80020fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00c      	beq.n	8002122 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002114:	461a      	mov	r2, r3
 8002116:	2301      	movs	r3, #1
 8002118:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800211a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fec3 	bl	8002ea8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00c      	beq.n	8002146 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002138:	461a      	mov	r2, r3
 800213a:	2308      	movs	r3, #8
 800213c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800213e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 ff99 	bl	8003078 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215c:	461a      	mov	r2, r3
 800215e:	2310      	movs	r3, #16
 8002160:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d030      	beq.n	80021ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d109      	bne.n	800218c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800218c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	3304      	adds	r3, #4
 80021a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	78db      	ldrb	r3, [r3, #3]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d108      	bne.n	80021bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4619      	mov	r1, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f005 fb64 	bl	8007884 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c8:	461a      	mov	r2, r3
 80021ca:	2302      	movs	r3, #2
 80021cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e4:	461a      	mov	r2, r3
 80021e6:	2320      	movs	r3, #32
 80021e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002206:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	3301      	adds	r3, #1
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	2b00      	cmp	r3, #0
 8002218:	f47f af62 	bne.w	80020e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f002 ff0f 	bl	8005044 <USB_ReadInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002230:	f040 80db 	bne.w	80023ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f002 ff30 	bl	800509e <USB_ReadDevAllInEpInterrupt>
 800223e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002244:	e0cd      	b.n	80023e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80c2 	beq.w	80023d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f002 ff56 	bl	800510e <USB_ReadDevInEPInterrupt>
 8002262:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d057      	beq.n	800231e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	2201      	movs	r2, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43db      	mvns	r3, r3
 8002288:	69f9      	ldr	r1, [r7, #28]
 800228a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800228e:	4013      	ands	r3, r2
 8002290:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229e:	461a      	mov	r2, r3
 80022a0:	2301      	movs	r3, #1
 80022a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d132      	bne.n	8002312 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	334c      	adds	r3, #76	; 0x4c
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4403      	add	r3, r0
 80022cc:	3348      	adds	r3, #72	; 0x48
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4419      	add	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4403      	add	r3, r0
 80022e0:	334c      	adds	r3, #76	; 0x4c
 80022e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d113      	bne.n	8002312 <HAL_PCD_IRQHandler+0x3a2>
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3354      	adds	r3, #84	; 0x54
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d108      	bne.n	8002312 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800230a:	461a      	mov	r2, r3
 800230c:	2101      	movs	r1, #1
 800230e:	f002 ff5d 	bl	80051cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	b2db      	uxtb	r3, r3
 8002316:	4619      	mov	r1, r3
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f005 fa38 	bl	800778e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002334:	461a      	mov	r2, r3
 8002336:	2308      	movs	r3, #8
 8002338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002350:	461a      	mov	r2, r3
 8002352:	2310      	movs	r3, #16
 8002354:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236c:	461a      	mov	r2, r3
 800236e:	2340      	movs	r3, #64	; 0x40
 8002370:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d023      	beq.n	80023c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800237c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800237e:	6a38      	ldr	r0, [r7, #32]
 8002380:	f001 fe3e 	bl	8004000 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	3338      	adds	r3, #56	; 0x38
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	3304      	adds	r3, #4
 8002396:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	78db      	ldrb	r3, [r3, #3]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d108      	bne.n	80023b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2200      	movs	r2, #0
 80023a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f005 fa7b 	bl	80078a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023be:	461a      	mov	r2, r3
 80023c0:	2302      	movs	r3, #2
 80023c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fcdb 	bl	8002d8c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	3301      	adds	r3, #1
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f af2e 	bne.w	8002246 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fe28 	bl	8005044 <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023fe:	d122      	bne.n	8002446 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002426:	2100      	movs	r1, #0
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fec3 	bl	80031b4 <HAL_PCDEx_LPM_Callback>
 800242e:	e002      	b.n	8002436 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f005 fa19 	bl	8007868 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f002 fdfa 	bl	8005044 <USB_ReadInterrupts>
 8002450:	4603      	mov	r3, r0
 8002452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800245a:	d112      	bne.n	8002482 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d102      	bne.n	8002472 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f005 f9d5 	bl	800781c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002480:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f002 fddc 	bl	8005044 <USB_ReadInterrupts>
 800248c:	4603      	mov	r3, r0
 800248e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002496:	f040 80b7 	bne.w	8002608 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2110      	movs	r1, #16
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fda3 	bl	8004000 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024be:	e046      	b.n	800254e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024cc:	461a      	mov	r2, r3
 80024ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e4:	0151      	lsls	r1, r2, #5
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	440a      	add	r2, r1
 80024ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002500:	461a      	mov	r2, r3
 8002502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002506:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	440a      	add	r2, r1
 800251e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002522:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002526:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002538:	0151      	lsls	r1, r2, #5
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	440a      	add	r2, r1
 800253e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002546:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	3301      	adds	r3, #1
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002554:	429a      	cmp	r2, r3
 8002556:	d3b3      	bcc.n	80024c0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002566:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800256a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	2b00      	cmp	r3, #0
 8002572:	d016      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002584:	f043 030b 	orr.w	r3, r3, #11
 8002588:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259a:	f043 030b 	orr.w	r3, r3, #11
 800259e:	6453      	str	r3, [r2, #68]	; 0x44
 80025a0:	e015      	b.n	80025ce <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c8:	f043 030b 	orr.w	r3, r3, #11
 80025cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025f2:	461a      	mov	r2, r3
 80025f4:	f002 fdea 	bl	80051cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f002 fd19 	bl	8005044 <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261c:	d124      	bne.n	8002668 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 fdaf 	bl	8005186 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fd64 	bl	80040fa <USB_GetDevSpeed>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681c      	ldr	r4, [r3, #0]
 800263e:	f001 f9e9 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8002642:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	4620      	mov	r0, r4
 800264e:	f001 fa63 	bl	8003b18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f005 f8c3 	bl	80077de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002666:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fce9 	bl	8005044 <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b08      	cmp	r3, #8
 800267a:	d10a      	bne.n	8002692 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f005 f8a0 	bl	80077c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f002 0208 	and.w	r2, r2, #8
 8002690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fcd4 	bl	8005044 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b80      	cmp	r3, #128	; 0x80
 80026a4:	d122      	bne.n	80026ec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
 80026b6:	e014      	b.n	80026e2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d105      	bne.n	80026dc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fb27 	bl	8002d2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	3301      	adds	r3, #1
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3e5      	bcc.n	80026b8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fca7 	bl	8005044 <USB_ReadInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002700:	d13b      	bne.n	800277a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002702:	2301      	movs	r3, #1
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	e02b      	b.n	8002760 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	3340      	adds	r3, #64	; 0x40
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d115      	bne.n	800275a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800272e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	da12      	bge.n	800275a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	333f      	adds	r3, #63	; 0x3f
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002750:	b2db      	uxtb	r3, r3
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fae8 	bl	8002d2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	3301      	adds	r3, #1
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	429a      	cmp	r2, r3
 8002768:	d3ce      	bcc.n	8002708 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fc60 	bl	8005044 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800278e:	d155      	bne.n	800283c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002790:	2301      	movs	r3, #1
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e045      	b.n	8002822 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d12e      	bne.n	800281c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	da2b      	bge.n	800281c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d121      	bne.n	800281c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002818:	6053      	str	r3, [r2, #4]
            break;
 800281a:	e007      	b.n	800282c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	3301      	adds	r3, #1
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	429a      	cmp	r2, r3
 800282a:	d3b4      	bcc.n	8002796 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800283a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f002 fbff 	bl	8005044 <USB_ReadInterrupts>
 8002846:	4603      	mov	r3, r0
 8002848:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800284c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002850:	d10a      	bne.n	8002868 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f005 f83a 	bl	80078cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fbe9 	bl	8005044 <USB_ReadInterrupts>
 8002872:	4603      	mov	r3, r0
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b04      	cmp	r3, #4
 800287a:	d115      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f005 f82a 	bl	80078e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	e000      	b.n	80028a8 <HAL_PCD_IRQHandler+0x938>
      return;
 80028a6:	bf00      	nop
    }
  }
}
 80028a8:	3734      	adds	r7, #52	; 0x34
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd90      	pop	{r4, r7, pc}

080028ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_PCD_SetAddress+0x1a>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e013      	b.n	80028f0 <HAL_PCD_SetAddress+0x42>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fb47 	bl	8004f74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	70fb      	strb	r3, [r7, #3]
 800290a:	460b      	mov	r3, r1
 800290c:	803b      	strh	r3, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291a:	2b00      	cmp	r3, #0
 800291c:	da0f      	bge.n	800293e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	3338      	adds	r3, #56	; 0x38
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	705a      	strb	r2, [r3, #1]
 800293c:	e00f      	b.n	800295e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	f003 020f 	and.w	r2, r3, #15
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	4413      	add	r3, r2
 8002954:	3304      	adds	r3, #4
 8002956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800296a:	883a      	ldrh	r2, [r7, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	78ba      	ldrb	r2, [r7, #2]
 8002974:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002988:	78bb      	ldrb	r3, [r7, #2]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d102      	bne.n	8002994 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_PCD_EP_Open+0xaa>
 800299e:	2302      	movs	r3, #2
 80029a0:	e00e      	b.n	80029c0 <HAL_PCD_EP_Open+0xc8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68f9      	ldr	r1, [r7, #12]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 fbc7 	bl	8004144 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029be:	7afb      	ldrb	r3, [r7, #11]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da0f      	bge.n	80029fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	f003 020f 	and.w	r2, r3, #15
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	3338      	adds	r3, #56	; 0x38
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	3304      	adds	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	705a      	strb	r2, [r3, #1]
 80029fa:	e00f      	b.n	8002a1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 020f 	and.w	r2, r3, #15
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	3304      	adds	r3, #4
 8002a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_PCD_EP_Close+0x6e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e00e      	b.n	8002a54 <HAL_PCD_EP_Close+0x8c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 fc05 	bl	8004254 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	f003 020f 	and.w	r2, r3, #15
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4413      	add	r3, r2
 8002a82:	3304      	adds	r3, #4
 8002a84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9e:	7afb      	ldrb	r3, [r7, #11]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ab8:	7afb      	ldrb	r3, [r7, #11]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	6979      	ldr	r1, [r7, #20]
 8002ad0:	f001 fee4 	bl	800489c <USB_EP0StartXfer>
 8002ad4:	e008      	b.n	8002ae8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6979      	ldr	r1, [r7, #20]
 8002ae4:	f001 fc92 	bl	800440c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b14:	681b      	ldr	r3, [r3, #0]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b32:	7afb      	ldrb	r3, [r7, #11]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	3338      	adds	r3, #56	; 0x38
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	6979      	ldr	r1, [r7, #20]
 8002b94:	f001 fe82 	bl	800489c <USB_EP0StartXfer>
 8002b98:	e008      	b.n	8002bac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6979      	ldr	r1, [r7, #20]
 8002ba8:	f001 fc30 	bl	800440c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d901      	bls.n	8002bd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e050      	b.n	8002c76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da0f      	bge.n	8002bfc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	3338      	adds	r3, #56	; 0x38
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	705a      	strb	r2, [r3, #1]
 8002bfa:	e00d      	b.n	8002c18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3304      	adds	r3, #4
 8002c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_PCD_EP_SetStall+0x82>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e01e      	b.n	8002c76 <HAL_PCD_EP_SetStall+0xc0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68f9      	ldr	r1, [r7, #12]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 f8c0 	bl	8004dcc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	b2d9      	uxtb	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c66:	461a      	mov	r2, r3
 8002c68:	f002 fab0 	bl	80051cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d901      	bls.n	8002c9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e042      	b.n	8002d22 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da0f      	bge.n	8002cc4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	3338      	adds	r3, #56	; 0x38
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3304      	adds	r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
 8002cc2:	e00f      	b.n	8002ce4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 020f 	and.w	r2, r3, #15
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	3304      	adds	r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_PCD_EP_ClrStall+0x86>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e00e      	b.n	8002d22 <HAL_PCD_EP_ClrStall+0xa4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68f9      	ldr	r1, [r7, #12]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f002 f8c8 	bl	8004ea8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da0c      	bge.n	8002d58 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	3338      	adds	r3, #56	; 0x38
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	3304      	adds	r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e00c      	b.n	8002d72 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 020f 	and.w	r2, r3, #15
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3304      	adds	r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 fee7 	bl	8004b4c <USB_EPStopXfer>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d82:	7afb      	ldrb	r3, [r7, #11]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	3338      	adds	r3, #56	; 0x38
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	3304      	adds	r3, #4
 8002db2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d901      	bls.n	8002dc4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e06c      	b.n	8002e9e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d902      	bls.n	8002de0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	3303      	adds	r3, #3
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de8:	e02b      	b.n	8002e42 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d902      	bls.n	8002e06 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3303      	adds	r3, #3
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6919      	ldr	r1, [r3, #16]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	4603      	mov	r3, r0
 8002e24:	6978      	ldr	r0, [r7, #20]
 8002e26:	f001 ff3b 	bl	8004ca0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	441a      	add	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d809      	bhi.n	8002e6c <PCD_WriteEmptyTxFifo+0xe0>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d203      	bcs.n	8002e6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1be      	bne.n	8002dea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d811      	bhi.n	8002e9c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	2201      	movs	r2, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	6939      	ldr	r1, [r7, #16]
 8002e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e98:	4013      	ands	r3, r2
 8002e9a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	333c      	adds	r3, #60	; 0x3c
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d17b      	bne.n	8002fd6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d015      	beq.n	8002f14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	4a61      	ldr	r2, [pc, #388]	; (8003070 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	f240 80b9 	bls.w	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80b3 	beq.w	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f10:	6093      	str	r3, [r2, #8]
 8002f12:	e0a7      	b.n	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	6093      	str	r3, [r2, #8]
 8002f30:	e098      	b.n	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 8093 	bne.w	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d90f      	bls.n	8002f66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f62:	6093      	str	r3, [r2, #8]
 8002f64:	e07e      	b.n	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	0159      	lsls	r1, r3, #5
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	1ad2      	subs	r2, r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d114      	bne.n	8002fc8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	f002 f90a 	bl	80051cc <USB_EP0_OutStart>
 8002fb8:	e006      	b.n	8002fc8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	441a      	add	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f004 fbc2 	bl	8007758 <HAL_PCD_DataOutStageCallback>
 8002fd4:	e046      	b.n	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	4a26      	ldr	r2, [pc, #152]	; (8003074 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d124      	bne.n	8003028 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffa:	6093      	str	r3, [r2, #8]
 8002ffc:	e032      	b.n	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003014:	461a      	mov	r2, r3
 8003016:	2320      	movs	r3, #32
 8003018:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f004 fb99 	bl	8007758 <HAL_PCD_DataOutStageCallback>
 8003026:	e01d      	b.n	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d114      	bne.n	8003058 <PCD_EP_OutXfrComplete_int+0x1b0>
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d108      	bne.n	8003058 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003050:	461a      	mov	r2, r3
 8003052:	2100      	movs	r1, #0
 8003054:	f002 f8ba 	bl	80051cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f004 fb7a 	bl	8007758 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	4f54300a 	.word	0x4f54300a
 8003074:	4f54310a 	.word	0x4f54310a

08003078 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	333c      	adds	r3, #60	; 0x3c
 8003090:	3304      	adds	r3, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a15      	ldr	r2, [pc, #84]	; (8003100 <PCD_EP_OutSetupPacket_int+0x88>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d90e      	bls.n	80030cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d009      	beq.n	80030cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c4:	461a      	mov	r2, r3
 80030c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f004 fb31 	bl	8007734 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <PCD_EP_OutSetupPacket_int+0x88>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d90c      	bls.n	80030f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d108      	bne.n	80030f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030ec:	461a      	mov	r2, r3
 80030ee:	2101      	movs	r1, #1
 80030f0:	f002 f86c 	bl	80051cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	4f54300a 	.word	0x4f54300a

08003104 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
 8003110:	4613      	mov	r3, r2
 8003112:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003122:	883b      	ldrh	r3, [r7, #0]
 8003124:	0419      	lsls	r1, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	430a      	orrs	r2, r1
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
 8003130:	e028      	b.n	8003184 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	e00d      	b.n	8003162 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	3340      	adds	r3, #64	; 0x40
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	3301      	adds	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	3b01      	subs	r3, #1
 8003168:	429a      	cmp	r2, r3
 800316a:	d3ec      	bcc.n	8003146 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800316c:	883b      	ldrh	r3, [r7, #0]
 800316e:	0418      	lsls	r0, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	3b01      	subs	r3, #1
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	4302      	orrs	r2, r0
 800317c:	3340      	adds	r3, #64	; 0x40
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e267      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d075      	beq.n	80032d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ea:	4b88      	ldr	r3, [pc, #544]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d00c      	beq.n	8003210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b85      	ldr	r3, [pc, #532]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d112      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003202:	4b82      	ldr	r3, [pc, #520]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320e:	d10b      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	4b7e      	ldr	r3, [pc, #504]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d05b      	beq.n	80032d4 <HAL_RCC_OscConfig+0x108>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d157      	bne.n	80032d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e242      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d106      	bne.n	8003240 <HAL_RCC_OscConfig+0x74>
 8003232:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a75      	ldr	r2, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x98>
 800324a:	4b70      	ldr	r3, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6f      	ldr	r2, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6c      	ldr	r2, [pc, #432]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003264:	4b69      	ldr	r3, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a68      	ldr	r2, [pc, #416]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b66      	ldr	r3, [pc, #408]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a65      	ldr	r2, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fd fc70 	bl	8000b68 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328c:	f7fd fc6c 	bl	8000b68 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e207      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b5b      	ldr	r3, [pc, #364]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xc0>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fd fc5c 	bl	8000b68 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fd fc58 	bl	8000b68 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1f3      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	4b51      	ldr	r3, [pc, #324]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0xe8>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e2:	4b4a      	ldr	r3, [pc, #296]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d11c      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b44      	ldr	r3, [pc, #272]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e1c7      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4937      	ldr	r1, [pc, #220]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	e03a      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333c:	4b34      	ldr	r3, [pc, #208]	; (8003410 <HAL_RCC_OscConfig+0x244>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fd fc11 	bl	8000b68 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334a:	f7fd fc0d 	bl	8000b68 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1a8      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4925      	ldr	r1, [pc, #148]	; (800340c <HAL_RCC_OscConfig+0x240>)
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
 800337c:	e015      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_RCC_OscConfig+0x244>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd fbf0 	bl	8000b68 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338c:	f7fd fbec 	bl	8000b68 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e187      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d036      	beq.n	8003424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_RCC_OscConfig+0x248>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fd fbd0 	bl	8000b68 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033cc:	f7fd fbcc 	bl	8000b68 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e167      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_OscConfig+0x240>)
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x200>
 80033ea:	e01b      	b.n	8003424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_OscConfig+0x248>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f2:	f7fd fbb9 	bl	8000b68 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	e00e      	b.n	8003418 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fa:	f7fd fbb5 	bl	8000b68 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d907      	bls.n	8003418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e150      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
 800340c:	40023800 	.word	0x40023800
 8003410:	42470000 	.word	0x42470000
 8003414:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	4b88      	ldr	r3, [pc, #544]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800341a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ea      	bne.n	80033fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8097 	beq.w	8003560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b81      	ldr	r3, [pc, #516]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10f      	bne.n	8003462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	4b7d      	ldr	r3, [pc, #500]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a7c      	ldr	r2, [pc, #496]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b7a      	ldr	r3, [pc, #488]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b77      	ldr	r3, [pc, #476]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d118      	bne.n	80034a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346e:	4b74      	ldr	r3, [pc, #464]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a73      	ldr	r2, [pc, #460]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347a:	f7fd fb75 	bl	8000b68 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7fd fb71 	bl	8000b68 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e10c      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_OscConfig+0x474>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2ea>
 80034a8:	4b64      	ldr	r3, [pc, #400]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4a63      	ldr	r2, [pc, #396]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70
 80034b4:	e01c      	b.n	80034f0 <HAL_RCC_OscConfig+0x324>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x30c>
 80034be:	4b5f      	ldr	r3, [pc, #380]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a5e      	ldr	r2, [pc, #376]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	4b5c      	ldr	r3, [pc, #368]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a5b      	ldr	r2, [pc, #364]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0x324>
 80034d8:	4b58      	ldr	r3, [pc, #352]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a57      	ldr	r2, [pc, #348]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	4b55      	ldr	r3, [pc, #340]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a54      	ldr	r2, [pc, #336]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80034ea:	f023 0304 	bic.w	r3, r3, #4
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fd fb36 	bl	8000b68 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fd fb32 	bl	8000b68 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0cb      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003516:	4b49      	ldr	r3, [pc, #292]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0ee      	beq.n	8003500 <HAL_RCC_OscConfig+0x334>
 8003522:	e014      	b.n	800354e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7fd fb20 	bl	8000b68 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	e00a      	b.n	8003542 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7fd fb1c 	bl	8000b68 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e0b5      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ee      	bne.n	800352c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003554:	4b39      	ldr	r3, [pc, #228]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	4a38      	ldr	r2, [pc, #224]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800355a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80a1 	beq.w	80036ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800356a:	4b34      	ldr	r3, [pc, #208]	; (800363c <HAL_RCC_OscConfig+0x470>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b08      	cmp	r3, #8
 8003574:	d05c      	beq.n	8003630 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d141      	bne.n	8003602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b31      	ldr	r3, [pc, #196]	; (8003644 <HAL_RCC_OscConfig+0x478>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fd faf0 	bl	8000b68 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358c:	f7fd faec 	bl	8000b68 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e087      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	3b01      	subs	r3, #1
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	491b      	ldr	r1, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x478>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fd fac5 	bl	8000b68 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fd fac1 	bl	8000b68 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e05c      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_OscConfig+0x470>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x416>
 8003600:	e054      	b.n	80036ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCC_OscConfig+0x478>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fd faae 	bl	8000b68 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003610:	f7fd faaa 	bl	8000b68 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e045      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x470>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x444>
 800362e:	e03d      	b.n	80036ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e038      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
 800363c:	40023800 	.word	0x40023800
 8003640:	40007000 	.word	0x40007000
 8003644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d028      	beq.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d121      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d11a      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003680:	4293      	cmp	r3, r2
 8003682:	d111      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	3b01      	subs	r3, #1
 8003692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0cc      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b68      	ldr	r3, [pc, #416]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d90c      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b65      	ldr	r3, [pc, #404]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b63      	ldr	r3, [pc, #396]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0b8      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d020      	beq.n	8003746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003710:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a58      	ldr	r2, [pc, #352]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800371a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003728:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a52      	ldr	r2, [pc, #328]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003734:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	494d      	ldr	r1, [pc, #308]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d044      	beq.n	80037dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d119      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e07f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d003      	beq.n	800377a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003776:	2b03      	cmp	r3, #3
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377a:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e067      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379a:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f023 0203 	bic.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4934      	ldr	r1, [pc, #208]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ac:	f7fd f9dc 	bl	8000b68 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b4:	f7fd f9d8 	bl	8000b68 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e04f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 020c 	and.w	r2, r3, #12
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1eb      	bne.n	80037b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d20c      	bcs.n	8003804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e032      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4916      	ldr	r1, [pc, #88]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	490e      	ldr	r1, [pc, #56]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003842:	f000 f821 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 8003846:	4602      	mov	r2, r0
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	490a      	ldr	r1, [pc, #40]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	5ccb      	ldrb	r3, [r1, r3]
 8003856:	fa22 f303 	lsr.w	r3, r2, r3
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd f93c 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023c00 	.word	0x40023c00
 8003878:	40023800 	.word	0x40023800
 800387c:	08007fc0 	.word	0x08007fc0
 8003880:	20000000 	.word	0x20000000
 8003884:	20000004 	.word	0x20000004

08003888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800388c:	b090      	sub	sp, #64	; 0x40
 800388e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
 8003894:	2300      	movs	r3, #0
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003898:	2300      	movs	r3, #0
 800389a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a0:	4b59      	ldr	r3, [pc, #356]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d00d      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x40>
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	f200 80a1 	bhi.w	80039f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x34>
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d003      	beq.n	80038c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ba:	e09b      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038c0:	e09b      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038c2:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c6:	e098      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c8:	4b4f      	ldr	r3, [pc, #316]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d2:	4b4d      	ldr	r3, [pc, #308]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d028      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038de:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	2200      	movs	r2, #0
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	627a      	str	r2, [r7, #36]	; 0x24
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038f0:	2100      	movs	r1, #0
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f4:	fb03 f201 	mul.w	r2, r3, r1
 80038f8:	2300      	movs	r3, #0
 80038fa:	fb00 f303 	mul.w	r3, r0, r3
 80038fe:	4413      	add	r3, r2
 8003900:	4a43      	ldr	r2, [pc, #268]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003902:	fba0 1202 	umull	r1, r2, r0, r2
 8003906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003908:	460a      	mov	r2, r1
 800390a:	62ba      	str	r2, [r7, #40]	; 0x28
 800390c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800390e:	4413      	add	r3, r2
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003914:	2200      	movs	r2, #0
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	61fa      	str	r2, [r7, #28]
 800391a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800391e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003922:	f7fc fc57 	bl	80001d4 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4613      	mov	r3, r2
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392e:	e053      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	2200      	movs	r2, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	617a      	str	r2, [r7, #20]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003942:	f04f 0b00 	mov.w	fp, #0
 8003946:	4652      	mov	r2, sl
 8003948:	465b      	mov	r3, fp
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	0159      	lsls	r1, r3, #5
 8003954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003958:	0150      	lsls	r0, r2, #5
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	ebb2 080a 	subs.w	r8, r2, sl
 8003962:	eb63 090b 	sbc.w	r9, r3, fp
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003972:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003976:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800397a:	ebb2 0408 	subs.w	r4, r2, r8
 800397e:	eb63 0509 	sbc.w	r5, r3, r9
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	00eb      	lsls	r3, r5, #3
 800398c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003990:	00e2      	lsls	r2, r4, #3
 8003992:	4614      	mov	r4, r2
 8003994:	461d      	mov	r5, r3
 8003996:	eb14 030a 	adds.w	r3, r4, sl
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	eb45 030b 	adc.w	r3, r5, fp
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ae:	4629      	mov	r1, r5
 80039b0:	028b      	lsls	r3, r1, #10
 80039b2:	4621      	mov	r1, r4
 80039b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039b8:	4621      	mov	r1, r4
 80039ba:	028a      	lsls	r2, r1, #10
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	2200      	movs	r2, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039cc:	f7fc fc02 	bl	80001d4 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4613      	mov	r3, r2
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	3301      	adds	r3, #1
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039f2:	e002      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80039f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3740      	adds	r7, #64	; 0x40
 8003a00:	46bd      	mov	sp, r7
 8003a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	00f42400 	.word	0x00f42400
 8003a10:	017d7840 	.word	0x017d7840

08003a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a18:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000000 	.word	0x20000000

08003a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a30:	f7ff fff0 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0a9b      	lsrs	r3, r3, #10
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	08007fd0 	.word	0x08007fd0

08003a54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a54:	b084      	sub	sp, #16
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	f107 001c 	add.w	r0, r7, #28
 8003a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d122      	bne.n	8003ab2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d105      	bne.n	8003aa6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f001 fbee 	bl	8005288 <USB_CoreReset>
 8003aac:	4603      	mov	r3, r0
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e01a      	b.n	8003ae8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f001 fbe2 	bl	8005288 <USB_CoreReset>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8003ada:	e005      	b.n	8003ae8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d10b      	bne.n	8003b06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f043 0206 	orr.w	r2, r3, #6
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b12:	b004      	add	sp, #16
 8003b14:	4770      	bx	lr
	...

08003b18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d165      	bne.n	8003bf8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4a41      	ldr	r2, [pc, #260]	; (8003c34 <USB_SetTurnaroundTime+0x11c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d906      	bls.n	8003b42 <USB_SetTurnaroundTime+0x2a>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4a40      	ldr	r2, [pc, #256]	; (8003c38 <USB_SetTurnaroundTime+0x120>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d202      	bcs.n	8003b42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	e062      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4a3c      	ldr	r2, [pc, #240]	; (8003c38 <USB_SetTurnaroundTime+0x120>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d306      	bcc.n	8003b58 <USB_SetTurnaroundTime+0x40>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a3b      	ldr	r2, [pc, #236]	; (8003c3c <USB_SetTurnaroundTime+0x124>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d202      	bcs.n	8003b58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b52:	230e      	movs	r3, #14
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e057      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4a38      	ldr	r2, [pc, #224]	; (8003c3c <USB_SetTurnaroundTime+0x124>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d306      	bcc.n	8003b6e <USB_SetTurnaroundTime+0x56>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <USB_SetTurnaroundTime+0x128>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d202      	bcs.n	8003b6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b68:	230d      	movs	r3, #13
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e04c      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4a33      	ldr	r2, [pc, #204]	; (8003c40 <USB_SetTurnaroundTime+0x128>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d306      	bcc.n	8003b84 <USB_SetTurnaroundTime+0x6c>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4a32      	ldr	r2, [pc, #200]	; (8003c44 <USB_SetTurnaroundTime+0x12c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d802      	bhi.n	8003b84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b7e:	230c      	movs	r3, #12
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e041      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4a2f      	ldr	r2, [pc, #188]	; (8003c44 <USB_SetTurnaroundTime+0x12c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d906      	bls.n	8003b9a <USB_SetTurnaroundTime+0x82>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4a2e      	ldr	r2, [pc, #184]	; (8003c48 <USB_SetTurnaroundTime+0x130>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d802      	bhi.n	8003b9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b94:	230b      	movs	r3, #11
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e036      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4a2a      	ldr	r2, [pc, #168]	; (8003c48 <USB_SetTurnaroundTime+0x130>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d906      	bls.n	8003bb0 <USB_SetTurnaroundTime+0x98>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a29      	ldr	r2, [pc, #164]	; (8003c4c <USB_SetTurnaroundTime+0x134>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d802      	bhi.n	8003bb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003baa:	230a      	movs	r3, #10
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e02b      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <USB_SetTurnaroundTime+0x134>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d906      	bls.n	8003bc6 <USB_SetTurnaroundTime+0xae>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4a25      	ldr	r2, [pc, #148]	; (8003c50 <USB_SetTurnaroundTime+0x138>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d202      	bcs.n	8003bc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003bc0:	2309      	movs	r3, #9
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e020      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <USB_SetTurnaroundTime+0x138>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d306      	bcc.n	8003bdc <USB_SetTurnaroundTime+0xc4>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <USB_SetTurnaroundTime+0x13c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d802      	bhi.n	8003bdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e015      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <USB_SetTurnaroundTime+0x13c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d906      	bls.n	8003bf2 <USB_SetTurnaroundTime+0xda>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <USB_SetTurnaroundTime+0x140>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d202      	bcs.n	8003bf2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bec:	2307      	movs	r3, #7
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e00a      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003bf2:	2306      	movs	r3, #6
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e007      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003bfe:	2309      	movs	r3, #9
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e001      	b.n	8003c08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c04:	2309      	movs	r3, #9
 8003c06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	029b      	lsls	r3, r3, #10
 8003c1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	00d8acbf 	.word	0x00d8acbf
 8003c38:	00e4e1c0 	.word	0x00e4e1c0
 8003c3c:	00f42400 	.word	0x00f42400
 8003c40:	01067380 	.word	0x01067380
 8003c44:	011a499f 	.word	0x011a499f
 8003c48:	01312cff 	.word	0x01312cff
 8003c4c:	014ca43f 	.word	0x014ca43f
 8003c50:	016e3600 	.word	0x016e3600
 8003c54:	01a6ab1f 	.word	0x01a6ab1f
 8003c58:	01e84800 	.word	0x01e84800

08003c5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f043 0201 	orr.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f023 0201 	bic.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d115      	bne.n	8003cee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f7fc ff56 	bl	8000b80 <HAL_Delay>
      ms++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f001 fa45 	bl	800516a <USB_GetMode>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d01e      	beq.n	8003d24 <USB_SetCurrentMode+0x84>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b31      	cmp	r3, #49	; 0x31
 8003cea:	d9f0      	bls.n	8003cce <USB_SetCurrentMode+0x2e>
 8003cec:	e01a      	b.n	8003d24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d115      	bne.n	8003d20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d00:	2001      	movs	r0, #1
 8003d02:	f7fc ff3d 	bl	8000b80 <HAL_Delay>
      ms++;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f001 fa2c 	bl	800516a <USB_GetMode>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <USB_SetCurrentMode+0x84>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b31      	cmp	r3, #49	; 0x31
 8003d1c:	d9f0      	bls.n	8003d00 <USB_SetCurrentMode+0x60>
 8003d1e:	e001      	b.n	8003d24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e005      	b.n	8003d30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b32      	cmp	r3, #50	; 0x32
 8003d28:	d101      	bne.n	8003d2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d38:	b084      	sub	sp, #16
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	e009      	b.n	8003d6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3340      	adds	r3, #64	; 0x40
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	2200      	movs	r2, #0
 8003d64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b0e      	cmp	r3, #14
 8003d70:	d9f2      	bls.n	8003d58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11c      	bne.n	8003db2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
 8003db0:	e00b      	b.n	8003dca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de4:	461a      	mov	r2, r3
 8003de6:	680b      	ldr	r3, [r1, #0]
 8003de8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d10c      	bne.n	8003e0a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003df6:	2100      	movs	r1, #0
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f965 	bl	80040c8 <USB_SetDevSpeed>
 8003dfe:	e008      	b.n	8003e12 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e00:	2101      	movs	r1, #1
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f960 	bl	80040c8 <USB_SetDevSpeed>
 8003e08:	e003      	b.n	8003e12 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f95b 	bl	80040c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e12:	2110      	movs	r1, #16
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f8f3 	bl	8004000 <USB_FlushTxFifo>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f91f 	bl	8004068 <USB_FlushRxFifo>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e46:	461a      	mov	r2, r3
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	461a      	mov	r2, r3
 8003e54:	2300      	movs	r3, #0
 8003e56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	e043      	b.n	8003ee6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e74:	d118      	bne.n	8003ea8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e013      	b.n	8003eba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e008      	b.n	8003eba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d3b7      	bcc.n	8003e5e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e043      	b.n	8003f7c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f0a:	d118      	bne.n	8003f3e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e013      	b.n	8003f50 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	461a      	mov	r2, r3
 8003f36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e008      	b.n	8003f50 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2300      	movs	r3, #0
 8003f60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d3b7      	bcc.n	8003ef4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003fa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f043 0210 	orr.w	r2, r3, #16
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <USB_DevInit+0x2c4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f043 0208 	orr.w	r2, r3, #8
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fe4:	f043 0304 	orr.w	r3, r3, #4
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ff8:	b004      	add	sp, #16
 8003ffa:	4770      	bx	lr
 8003ffc:	803c3800 	.word	0x803c3800

08004000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3301      	adds	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a13      	ldr	r2, [pc, #76]	; (8004064 <USB_FlushTxFifo+0x64>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e01b      	b.n	8004058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	daf2      	bge.n	800400e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	019b      	lsls	r3, r3, #6
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3301      	adds	r3, #1
 800403c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a08      	ldr	r2, [pc, #32]	; (8004064 <USB_FlushTxFifo+0x64>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e006      	b.n	8004058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b20      	cmp	r3, #32
 8004054:	d0f0      	beq.n	8004038 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	00030d40 	.word	0x00030d40

08004068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <USB_FlushRxFifo+0x5c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e018      	b.n	80040b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	daf2      	bge.n	8004074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2210      	movs	r2, #16
 8004096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <USB_FlushRxFifo+0x5c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e006      	b.n	80040b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d0f0      	beq.n	8004098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	00030d40 	.word	0x00030d40

080040c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	68f9      	ldr	r1, [r7, #12]
 80040e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b087      	sub	sp, #28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0306 	and.w	r3, r3, #6
 8004112:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800411a:	2300      	movs	r3, #0
 800411c:	75fb      	strb	r3, [r7, #23]
 800411e:	e00a      	b.n	8004136 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d002      	beq.n	800412c <USB_GetDevSpeed+0x32>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b06      	cmp	r3, #6
 800412a:	d102      	bne.n	8004132 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800412c:	2302      	movs	r3, #2
 800412e:	75fb      	strb	r3, [r7, #23]
 8004130:	e001      	b.n	8004136 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004132:	230f      	movs	r3, #15
 8004134:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
}
 8004138:	4618      	mov	r0, r3
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d13a      	bne.n	80041d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	2101      	movs	r1, #1
 8004172:	fa01 f303 	lsl.w	r3, r1, r3
 8004176:	b29b      	uxth	r3, r3
 8004178:	68f9      	ldr	r1, [r7, #12]
 800417a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800417e:	4313      	orrs	r3, r2
 8004180:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d155      	bne.n	8004244 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	059b      	lsls	r3, r3, #22
 80041ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041bc:	4313      	orrs	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	e036      	b.n	8004244 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	2101      	movs	r1, #1
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	68f9      	ldr	r1, [r7, #12]
 80041f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d11a      	bne.n	8004244 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	791b      	ldrb	r3, [r3, #4]
 8004228:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800422a:	430b      	orrs	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	440a      	add	r2, r1
 8004236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800423a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d161      	bne.n	8004334 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004286:	d11f      	bne.n	80042c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	440a      	add	r2, r1
 800429e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	b29b      	uxth	r3, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e8:	4013      	ands	r3, r2
 80042ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	2101      	movs	r1, #1
 80042fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004302:	b29b      	uxth	r3, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800430c:	4013      	ands	r3, r2
 800430e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	0159      	lsls	r1, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	440b      	add	r3, r1
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	4619      	mov	r1, r3
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <USB_DeactivateEndpoint+0x1b0>)
 800432e:	4013      	ands	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
 8004332:	e060      	b.n	80043f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800434a:	d11f      	bne.n	800438c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	0151      	lsls	r1, r2, #5
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	440a      	add	r2, r1
 8004362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004366:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800436a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	0151      	lsls	r1, r2, #5
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	440a      	add	r2, r1
 8004382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800438a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	2101      	movs	r1, #1
 800439e:	fa01 f303 	lsl.w	r3, r1, r3
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	43db      	mvns	r3, r3
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ac:	4013      	ands	r3, r2
 80043ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	2101      	movs	r1, #1
 80043c2:	fa01 f303 	lsl.w	r3, r1, r3
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	43db      	mvns	r3, r3
 80043ca:	68f9      	ldr	r1, [r7, #12]
 80043cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043d0:	4013      	ands	r3, r2
 80043d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	0159      	lsls	r1, r3, #5
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	440b      	add	r3, r1
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	4619      	mov	r1, r3
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <USB_DeactivateEndpoint+0x1b4>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	ec337800 	.word	0xec337800
 8004408:	eff37800 	.word	0xeff37800

0800440c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	2b01      	cmp	r3, #1
 800442a:	f040 815c 	bne.w	80046e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d132      	bne.n	800449c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004450:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004454:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004458:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004494:	0cdb      	lsrs	r3, r3, #19
 8004496:	04db      	lsls	r3, r3, #19
 8004498:	6113      	str	r3, [r2, #16]
 800449a:	e074      	b.n	8004586 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b6:	0cdb      	lsrs	r3, r3, #19
 80044b8:	04db      	lsls	r3, r3, #19
 80044ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6999      	ldr	r1, [r3, #24]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	440b      	add	r3, r1
 80044f8:	1e59      	subs	r1, r3, #1
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004502:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004504:	4b9d      	ldr	r3, [pc, #628]	; (800477c <USB_EPStartXfer+0x370>)
 8004506:	400b      	ands	r3, r1
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	0148      	lsls	r0, r1, #5
 800450c:	69f9      	ldr	r1, [r7, #28]
 800450e:	4401      	add	r1, r0
 8004510:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004514:	4313      	orrs	r3, r2
 8004516:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452e:	69b9      	ldr	r1, [r7, #24]
 8004530:	0148      	lsls	r0, r1, #5
 8004532:	69f9      	ldr	r1, [r7, #28]
 8004534:	4401      	add	r1, r0
 8004536:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800453a:	4313      	orrs	r3, r2
 800453c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	791b      	ldrb	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d11f      	bne.n	8004586 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004560:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004564:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004584:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d14b      	bne.n	8004624 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a0:	461a      	mov	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	791b      	ldrb	r3, [r3, #4]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d128      	bne.n	8004602 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d110      	bne.n	80045e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	0151      	lsls	r1, r2, #5
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	440a      	add	r2, r1
 80045d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	e00f      	b.n	8004602 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004600:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e133      	b.n	800488c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004642:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	791b      	ldrb	r3, [r3, #4]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d015      	beq.n	8004678 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 811b 	beq.w	800488c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	2101      	movs	r1, #1
 8004668:	fa01 f303 	lsl.w	r3, r1, r3
 800466c:	69f9      	ldr	r1, [r7, #28]
 800466e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004672:	4313      	orrs	r3, r2
 8004674:	634b      	str	r3, [r1, #52]	; 0x34
 8004676:	e109      	b.n	800488c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d110      	bne.n	80046aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e00f      	b.n	80046ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6919      	ldr	r1, [r3, #16]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781a      	ldrb	r2, [r3, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	b298      	uxth	r0, r3
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	4603      	mov	r3, r0
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 fade 	bl	8004ca0 <USB_WritePacket>
 80046e4:	e0d2      	b.n	800488c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004700:	0cdb      	lsrs	r3, r3, #19
 8004702:	04db      	lsls	r3, r3, #19
 8004704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004720:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004724:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004728:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d126      	bne.n	8004780 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004748:	69b9      	ldr	r1, [r7, #24]
 800474a:	0148      	lsls	r0, r1, #5
 800474c:	69f9      	ldr	r1, [r7, #28]
 800474e:	4401      	add	r1, r0
 8004750:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004754:	4313      	orrs	r3, r2
 8004756:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	440a      	add	r2, r1
 800476e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004772:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004776:	6113      	str	r3, [r2, #16]
 8004778:	e03a      	b.n	80047f0 <USB_EPStartXfer+0x3e4>
 800477a:	bf00      	nop
 800477c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4413      	add	r3, r2
 800478a:	1e5a      	subs	r2, r3, #1
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	8afa      	ldrh	r2, [r7, #22]
 800479c:	fb03 f202 	mul.w	r2, r3, r2
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	8afb      	ldrh	r3, [r7, #22]
 80047b4:	04d9      	lsls	r1, r3, #19
 80047b6:	4b38      	ldr	r3, [pc, #224]	; (8004898 <USB_EPStartXfer+0x48c>)
 80047b8:	400b      	ands	r3, r1
 80047ba:	69b9      	ldr	r1, [r7, #24]
 80047bc:	0148      	lsls	r0, r1, #5
 80047be:	69f9      	ldr	r1, [r7, #28]
 80047c0:	4401      	add	r1, r0
 80047c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047c6:	4313      	orrs	r3, r2
 80047c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e0:	69b9      	ldr	r1, [r7, #24]
 80047e2:	0148      	lsls	r0, r1, #5
 80047e4:	69f9      	ldr	r1, [r7, #28]
 80047e6:	4401      	add	r1, r0
 80047e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047ec:	4313      	orrs	r3, r2
 80047ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10d      	bne.n	8004812 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6919      	ldr	r1, [r3, #16]
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	460a      	mov	r2, r1
 8004810:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	791b      	ldrb	r3, [r3, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d128      	bne.n	800486c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d110      	bne.n	800484c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004844:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e00f      	b.n	800486c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	440a      	add	r2, r1
 8004862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	440a      	add	r2, r1
 8004882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004886:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800488a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	1ff80000 	.word	0x1ff80000

0800489c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	f040 80ce 	bne.w	8004a5a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d132      	bne.n	800492c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004908:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	440a      	add	r2, r1
 8004920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004924:	0cdb      	lsrs	r3, r3, #19
 8004926:	04db      	lsls	r3, r3, #19
 8004928:	6113      	str	r3, [r2, #16]
 800492a:	e04e      	b.n	80049ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	440a      	add	r2, r1
 8004942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004946:	0cdb      	lsrs	r3, r3, #19
 8004948:	04db      	lsls	r3, r3, #19
 800494a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004966:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800496a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800496e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	429a      	cmp	r2, r3
 800497a:	d903      	bls.n	8004984 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	440a      	add	r2, r1
 800499a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ba:	6939      	ldr	r1, [r7, #16]
 80049bc:	0148      	lsls	r0, r1, #5
 80049be:	6979      	ldr	r1, [r7, #20]
 80049c0:	4401      	add	r1, r0
 80049c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049c6:	4313      	orrs	r3, r2
 80049c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d11e      	bne.n	8004a0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	461a      	mov	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	e097      	b.n	8004b3e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8083 	beq.w	8004b3e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	6979      	ldr	r1, [r7, #20]
 8004a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a54:	4313      	orrs	r3, r2
 8004a56:	634b      	str	r3, [r1, #52]	; 0x34
 8004a58:	e071      	b.n	8004b3e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	0151      	lsls	r1, r2, #5
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	440a      	add	r2, r1
 8004a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a74:	0cdb      	lsrs	r3, r3, #19
 8004a76:	04db      	lsls	r3, r3, #19
 8004a78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aec:	6939      	ldr	r1, [r7, #16]
 8004aee:	0148      	lsls	r0, r1, #5
 8004af0:	6979      	ldr	r1, [r7, #20]
 8004af2:	4401      	add	r1, r0
 8004af4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004af8:	4313      	orrs	r3, r2
 8004afa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d10d      	bne.n	8004b1e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	460a      	mov	r2, r1
 8004b1c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d14a      	bne.n	8004c00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b82:	f040 8086 	bne.w	8004c92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	7812      	ldrb	r2, [r2, #0]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ba8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	7812      	ldrb	r2, [r2, #0]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d902      	bls.n	8004be4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	75fb      	strb	r3, [r7, #23]
          break;
 8004be2:	e056      	b.n	8004c92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfc:	d0e7      	beq.n	8004bce <USB_EPStopXfer+0x82>
 8004bfe:	e048      	b.n	8004c92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c18:	d13b      	bne.n	8004c92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3301      	adds	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d902      	bls.n	8004c78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	75fb      	strb	r3, [r7, #23]
          break;
 8004c76:	e00c      	b.n	8004c92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c90:	d0e7      	beq.n	8004c62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	460b      	mov	r3, r1
 8004cb0:	71fb      	strb	r3, [r7, #7]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d123      	bne.n	8004d0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cc6:	88bb      	ldrh	r3, [r7, #4]
 8004cc8:	3303      	adds	r3, #3
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	e018      	b.n	8004d06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	031a      	lsls	r2, r3, #12
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3301      	adds	r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	3301      	adds	r3, #1
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d3e2      	bcc.n	8004cd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3724      	adds	r7, #36	; 0x24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b08b      	sub	sp, #44	; 0x2c
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	089b      	lsrs	r3, r3, #2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	e014      	b.n	8004d72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	3301      	adds	r3, #1
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	3301      	adds	r3, #1
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	3301      	adds	r3, #1
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	6a3a      	ldr	r2, [r7, #32]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3e6      	bcc.n	8004d48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d7a:	8bfb      	ldrh	r3, [r7, #30]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01e      	beq.n	8004dbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	701a      	strb	r2, [r3, #0]
      i++;
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	3301      	adds	r3, #1
 8004daa:	623b      	str	r3, [r7, #32]
      pDest++;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	3301      	adds	r3, #1
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004db2:	8bfb      	ldrh	r3, [r7, #30]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004db8:	8bfb      	ldrh	r3, [r7, #30]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ea      	bne.n	8004d94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	372c      	adds	r7, #44	; 0x2c
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d12c      	bne.n	8004e42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	db12      	blt.n	8004e20 <USB_EPSetStall+0x54>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00f      	beq.n	8004e20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	e02b      	b.n	8004e9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	db12      	blt.n	8004e7a <USB_EPSetStall+0xae>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00f      	beq.n	8004e7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d128      	bne.n	8004f16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ee2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	791b      	ldrb	r3, [r3, #4]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d003      	beq.n	8004ef4 <USB_EPClearStall+0x4c>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	791b      	ldrb	r3, [r3, #4]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d138      	bne.n	8004f66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	e027      	b.n	8004f66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	791b      	ldrb	r3, [r3, #4]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d003      	beq.n	8004f46 <USB_EPClearStall+0x9e>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	791b      	ldrb	r3, [r3, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d10f      	bne.n	8004f66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004fa8:	68f9      	ldr	r1, [r7, #12]
 8004faa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fee:	f023 0302 	bic.w	r3, r3, #2
 8004ff2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800501c:	f023 0303 	bic.w	r3, r3, #3
 8005020:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005030:	f043 0302 	orr.w	r3, r3, #2
 8005034:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4013      	ands	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800505c:	68fb      	ldr	r3, [r7, #12]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	4013      	ands	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	0c1b      	lsrs	r3, r3, #16
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	b29b      	uxth	r3, r3
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	460b      	mov	r3, r1
 80050dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005100:	68bb      	ldr	r3, [r7, #8]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800510e:	b480      	push	{r7}
 8005110:	b087      	sub	sp, #28
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	01db      	lsls	r3, r3, #7
 8005140:	b2db      	uxtb	r3, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4013      	ands	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800515c:	68bb      	ldr	r3, [r7, #8]
}
 800515e:	4618      	mov	r0, r3
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f003 0301 	and.w	r3, r3, #1
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051a4:	f023 0307 	bic.w	r3, r3, #7
 80051a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	460b      	mov	r3, r1
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	333c      	adds	r3, #60	; 0x3c
 80051e2:	3304      	adds	r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4a26      	ldr	r2, [pc, #152]	; (8005284 <USB_EP0_OutStart+0xb8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d90a      	bls.n	8005206 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005200:	d101      	bne.n	8005206 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e037      	b.n	8005276 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	461a      	mov	r2, r3
 800520e:	2300      	movs	r3, #0
 8005210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005224:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005234:	f043 0318 	orr.w	r3, r3, #24
 8005238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005248:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800524c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800524e:	7afb      	ldrb	r3, [r7, #11]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d10f      	bne.n	8005274 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	461a      	mov	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005272:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	4f54300a 	.word	0x4f54300a

08005288 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4a13      	ldr	r2, [pc, #76]	; (80052ec <USB_CoreReset+0x64>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e01b      	b.n	80052de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	daf2      	bge.n	8005294 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f043 0201 	orr.w	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3301      	adds	r3, #1
 80052c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a09      	ldr	r2, [pc, #36]	; (80052ec <USB_CoreReset+0x64>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e006      	b.n	80052de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d0f0      	beq.n	80052be <USB_CoreReset+0x36>

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	00030d40 	.word	0x00030d40

080052f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005300:	f002 fc8a 	bl	8007c18 <USBD_static_malloc>
 8005304:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	32b0      	adds	r2, #176	; 0xb0
 8005316:	2100      	movs	r1, #0
 8005318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800531c:	2302      	movs	r3, #2
 800531e:	e0d4      	b.n	80054ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005320:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005324:	2100      	movs	r1, #0
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f002 fd76 	bl	8007e18 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	32b0      	adds	r2, #176	; 0xb0
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	32b0      	adds	r2, #176	; 0xb0
 8005346:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7c1b      	ldrb	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d138      	bne.n	80053ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005358:	4b5e      	ldr	r3, [pc, #376]	; (80054d4 <USBD_CDC_Init+0x1e4>)
 800535a:	7819      	ldrb	r1, [r3, #0]
 800535c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005360:	2202      	movs	r2, #2
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f002 fb35 	bl	80079d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005368:	4b5a      	ldr	r3, [pc, #360]	; (80054d4 <USBD_CDC_Init+0x1e4>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	f003 020f 	and.w	r2, r3, #15
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	3324      	adds	r3, #36	; 0x24
 800537e:	2201      	movs	r2, #1
 8005380:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005382:	4b55      	ldr	r3, [pc, #340]	; (80054d8 <USBD_CDC_Init+0x1e8>)
 8005384:	7819      	ldrb	r1, [r3, #0]
 8005386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800538a:	2202      	movs	r2, #2
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f002 fb20 	bl	80079d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005392:	4b51      	ldr	r3, [pc, #324]	; (80054d8 <USBD_CDC_Init+0x1e8>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f003 020f 	and.w	r2, r3, #15
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80053aa:	2201      	movs	r2, #1
 80053ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80053ae:	4b4b      	ldr	r3, [pc, #300]	; (80054dc <USBD_CDC_Init+0x1ec>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f003 020f 	and.w	r2, r3, #15
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	3326      	adds	r3, #38	; 0x26
 80053c4:	2210      	movs	r2, #16
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	e035      	b.n	8005436 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053ca:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <USBD_CDC_Init+0x1e4>)
 80053cc:	7819      	ldrb	r1, [r3, #0]
 80053ce:	2340      	movs	r3, #64	; 0x40
 80053d0:	2202      	movs	r2, #2
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f002 fafd 	bl	80079d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053d8:	4b3e      	ldr	r3, [pc, #248]	; (80054d4 <USBD_CDC_Init+0x1e4>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	3324      	adds	r3, #36	; 0x24
 80053ee:	2201      	movs	r2, #1
 80053f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80053f2:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <USBD_CDC_Init+0x1e8>)
 80053f4:	7819      	ldrb	r1, [r3, #0]
 80053f6:	2340      	movs	r3, #64	; 0x40
 80053f8:	2202      	movs	r2, #2
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f002 fae9 	bl	80079d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005400:	4b35      	ldr	r3, [pc, #212]	; (80054d8 <USBD_CDC_Init+0x1e8>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	f003 020f 	and.w	r2, r3, #15
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005418:	2201      	movs	r2, #1
 800541a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800541c:	4b2f      	ldr	r3, [pc, #188]	; (80054dc <USBD_CDC_Init+0x1ec>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	f003 020f 	and.w	r2, r3, #15
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	3326      	adds	r3, #38	; 0x26
 8005432:	2210      	movs	r2, #16
 8005434:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005436:	4b29      	ldr	r3, [pc, #164]	; (80054dc <USBD_CDC_Init+0x1ec>)
 8005438:	7819      	ldrb	r1, [r3, #0]
 800543a:	2308      	movs	r3, #8
 800543c:	2203      	movs	r2, #3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f002 fac7 	bl	80079d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005444:	4b25      	ldr	r3, [pc, #148]	; (80054dc <USBD_CDC_Init+0x1ec>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 020f 	and.w	r2, r3, #15
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	3324      	adds	r3, #36	; 0x24
 800545a:	2201      	movs	r2, #1
 800545c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	33b0      	adds	r3, #176	; 0xb0
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005494:	2302      	movs	r3, #2
 8005496:	e018      	b.n	80054ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	7c1b      	ldrb	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054a0:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <USBD_CDC_Init+0x1e8>)
 80054a2:	7819      	ldrb	r1, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f002 fb7e 	bl	8007bb0 <USBD_LL_PrepareReceive>
 80054b4:	e008      	b.n	80054c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054b6:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <USBD_CDC_Init+0x1e8>)
 80054b8:	7819      	ldrb	r1, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054c0:	2340      	movs	r3, #64	; 0x40
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f002 fb74 	bl	8007bb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000093 	.word	0x20000093
 80054d8:	20000094 	.word	0x20000094
 80054dc:	20000095 	.word	0x20000095

080054e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80054ec:	4b3a      	ldr	r3, [pc, #232]	; (80055d8 <USBD_CDC_DeInit+0xf8>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f002 fa93 	bl	8007a1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80054f8:	4b37      	ldr	r3, [pc, #220]	; (80055d8 <USBD_CDC_DeInit+0xf8>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	3324      	adds	r3, #36	; 0x24
 800550e:	2200      	movs	r2, #0
 8005510:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005512:	4b32      	ldr	r3, [pc, #200]	; (80055dc <USBD_CDC_DeInit+0xfc>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f002 fa80 	bl	8007a1e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800551e:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <USBD_CDC_DeInit+0xfc>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f003 020f 	and.w	r2, r3, #15
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005536:	2200      	movs	r2, #0
 8005538:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800553a:	4b29      	ldr	r3, [pc, #164]	; (80055e0 <USBD_CDC_DeInit+0x100>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f002 fa6c 	bl	8007a1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005546:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <USBD_CDC_DeInit+0x100>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	f003 020f 	and.w	r2, r3, #15
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	3324      	adds	r3, #36	; 0x24
 800555c:	2200      	movs	r2, #0
 800555e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005560:	4b1f      	ldr	r3, [pc, #124]	; (80055e0 <USBD_CDC_DeInit+0x100>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 020f 	and.w	r2, r3, #15
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3326      	adds	r3, #38	; 0x26
 8005576:	2200      	movs	r2, #0
 8005578:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	32b0      	adds	r2, #176	; 0xb0
 8005584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01f      	beq.n	80055cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	33b0      	adds	r3, #176	; 0xb0
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	32b0      	adds	r2, #176	; 0xb0
 80055aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f002 fb40 	bl	8007c34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	32b0      	adds	r2, #176	; 0xb0
 80055be:	2100      	movs	r1, #0
 80055c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000093 	.word	0x20000093
 80055dc:	20000094 	.word	0x20000094
 80055e0:	20000095 	.word	0x20000095

080055e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	32b0      	adds	r2, #176	; 0xb0
 80055f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005610:	2303      	movs	r3, #3
 8005612:	e0bf      	b.n	8005794 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800561c:	2b00      	cmp	r3, #0
 800561e:	d050      	beq.n	80056c2 <USBD_CDC_Setup+0xde>
 8005620:	2b20      	cmp	r3, #32
 8005622:	f040 80af 	bne.w	8005784 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	88db      	ldrh	r3, [r3, #6]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d03a      	beq.n	80056a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b25b      	sxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	da1b      	bge.n	8005670 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	33b0      	adds	r3, #176	; 0xb0
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800564e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	88d2      	ldrh	r2, [r2, #6]
 8005654:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	88db      	ldrh	r3, [r3, #6]
 800565a:	2b07      	cmp	r3, #7
 800565c:	bf28      	it	cs
 800565e:	2307      	movcs	r3, #7
 8005660:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	89fa      	ldrh	r2, [r7, #14]
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 fd89 	bl	8007180 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800566e:	e090      	b.n	8005792 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	785a      	ldrb	r2, [r3, #1]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	88db      	ldrh	r3, [r3, #6]
 800567e:	2b3f      	cmp	r3, #63	; 0x3f
 8005680:	d803      	bhi.n	800568a <USBD_CDC_Setup+0xa6>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	88db      	ldrh	r3, [r3, #6]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	e000      	b.n	800568c <USBD_CDC_Setup+0xa8>
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005692:	6939      	ldr	r1, [r7, #16]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800569a:	461a      	mov	r2, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 fd9b 	bl	80071d8 <USBD_CtlPrepareRx>
      break;
 80056a2:	e076      	b.n	8005792 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	33b0      	adds	r3, #176	; 0xb0
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	7850      	ldrb	r0, [r2, #1]
 80056ba:	2200      	movs	r2, #0
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	4798      	blx	r3
      break;
 80056c0:	e067      	b.n	8005792 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	2b0b      	cmp	r3, #11
 80056c8:	d851      	bhi.n	800576e <USBD_CDC_Setup+0x18a>
 80056ca:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <USBD_CDC_Setup+0xec>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	08005701 	.word	0x08005701
 80056d4:	0800577d 	.word	0x0800577d
 80056d8:	0800576f 	.word	0x0800576f
 80056dc:	0800576f 	.word	0x0800576f
 80056e0:	0800576f 	.word	0x0800576f
 80056e4:	0800576f 	.word	0x0800576f
 80056e8:	0800576f 	.word	0x0800576f
 80056ec:	0800576f 	.word	0x0800576f
 80056f0:	0800576f 	.word	0x0800576f
 80056f4:	0800576f 	.word	0x0800576f
 80056f8:	0800572b 	.word	0x0800572b
 80056fc:	08005755 	.word	0x08005755
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b03      	cmp	r3, #3
 800570a:	d107      	bne.n	800571c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800570c:	f107 030a 	add.w	r3, r7, #10
 8005710:	2202      	movs	r2, #2
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fd33 	bl	8007180 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800571a:	e032      	b.n	8005782 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f001 fcbd 	bl	800709e <USBD_CtlError>
            ret = USBD_FAIL;
 8005724:	2303      	movs	r3, #3
 8005726:	75fb      	strb	r3, [r7, #23]
          break;
 8005728:	e02b      	b.n	8005782 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b03      	cmp	r3, #3
 8005734:	d107      	bne.n	8005746 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005736:	f107 030d 	add.w	r3, r7, #13
 800573a:	2201      	movs	r2, #1
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f001 fd1e 	bl	8007180 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005744:	e01d      	b.n	8005782 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 fca8 	bl	800709e <USBD_CtlError>
            ret = USBD_FAIL;
 800574e:	2303      	movs	r3, #3
 8005750:	75fb      	strb	r3, [r7, #23]
          break;
 8005752:	e016      	b.n	8005782 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b03      	cmp	r3, #3
 800575e:	d00f      	beq.n	8005780 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fc9b 	bl	800709e <USBD_CtlError>
            ret = USBD_FAIL;
 8005768:	2303      	movs	r3, #3
 800576a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800576c:	e008      	b.n	8005780 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fc94 	bl	800709e <USBD_CtlError>
          ret = USBD_FAIL;
 8005776:	2303      	movs	r3, #3
 8005778:	75fb      	strb	r3, [r7, #23]
          break;
 800577a:	e002      	b.n	8005782 <USBD_CDC_Setup+0x19e>
          break;
 800577c:	bf00      	nop
 800577e:	e008      	b.n	8005792 <USBD_CDC_Setup+0x1ae>
          break;
 8005780:	bf00      	nop
      }
      break;
 8005782:	e006      	b.n	8005792 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fc89 	bl	800709e <USBD_CtlError>
      ret = USBD_FAIL;
 800578c:	2303      	movs	r3, #3
 800578e:	75fb      	strb	r3, [r7, #23]
      break;
 8005790:	bf00      	nop
  }

  return (uint8_t)ret;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80057ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	32b0      	adds	r2, #176	; 0xb0
 80057ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e065      	b.n	8005892 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	32b0      	adds	r2, #176	; 0xb0
 80057d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 020f 	and.w	r2, r3, #15
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	3318      	adds	r3, #24
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02f      	beq.n	8005850 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	f003 020f 	and.w	r2, r3, #15
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	3318      	adds	r3, #24
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	f003 010f 	and.w	r1, r3, #15
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	460b      	mov	r3, r1
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	440b      	add	r3, r1
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4403      	add	r3, r0
 8005818:	3348      	adds	r3, #72	; 0x48
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005826:	2b00      	cmp	r3, #0
 8005828:	d112      	bne.n	8005850 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	f003 020f 	and.w	r2, r3, #15
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	3318      	adds	r3, #24
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005842:	78f9      	ldrb	r1, [r7, #3]
 8005844:	2300      	movs	r3, #0
 8005846:	2200      	movs	r2, #0
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f002 f990 	bl	8007b6e <USBD_LL_Transmit>
 800584e:	e01f      	b.n	8005890 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	33b0      	adds	r3, #176	; 0xb0
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d010      	beq.n	8005890 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	33b0      	adds	r3, #176	; 0xb0
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	32b0      	adds	r2, #176	; 0xb0
 80058b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	32b0      	adds	r2, #176	; 0xb0
 80058c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e01a      	b.n	8005902 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f002 f98e 	bl	8007bf2 <USBD_LL_GetRxDataSize>
 80058d6:	4602      	mov	r2, r0
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	33b0      	adds	r3, #176	; 0xb0
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058fc:	4611      	mov	r1, r2
 80058fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	32b0      	adds	r2, #176	; 0xb0
 800591c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005920:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005928:	2303      	movs	r3, #3
 800592a:	e025      	b.n	8005978 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	33b0      	adds	r3, #176	; 0xb0
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01a      	beq.n	8005976 <USBD_CDC_EP0_RxReady+0x6c>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005946:	2bff      	cmp	r3, #255	; 0xff
 8005948:	d015      	beq.n	8005976 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	33b0      	adds	r3, #176	; 0xb0
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005962:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800596a:	b292      	uxth	r2, r2
 800596c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005988:	2182      	movs	r1, #130	; 0x82
 800598a:	4818      	ldr	r0, [pc, #96]	; (80059ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800598c:	f000 fd4f 	bl	800642e <USBD_GetEpDesc>
 8005990:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005992:	2101      	movs	r1, #1
 8005994:	4815      	ldr	r0, [pc, #84]	; (80059ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005996:	f000 fd4a 	bl	800642e <USBD_GetEpDesc>
 800599a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800599c:	2181      	movs	r1, #129	; 0x81
 800599e:	4813      	ldr	r0, [pc, #76]	; (80059ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80059a0:	f000 fd45 	bl	800642e <USBD_GetEpDesc>
 80059a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2210      	movs	r2, #16
 80059b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d006      	beq.n	80059c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059c0:	711a      	strb	r2, [r3, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d006      	beq.n	80059da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d4:	711a      	strb	r2, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2243      	movs	r2, #67	; 0x43
 80059de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059e0:	4b02      	ldr	r3, [pc, #8]	; (80059ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000050 	.word	0x20000050

080059f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059f8:	2182      	movs	r1, #130	; 0x82
 80059fa:	4818      	ldr	r0, [pc, #96]	; (8005a5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059fc:	f000 fd17 	bl	800642e <USBD_GetEpDesc>
 8005a00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a02:	2101      	movs	r1, #1
 8005a04:	4815      	ldr	r0, [pc, #84]	; (8005a5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a06:	f000 fd12 	bl	800642e <USBD_GetEpDesc>
 8005a0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a0c:	2181      	movs	r1, #129	; 0x81
 8005a0e:	4813      	ldr	r0, [pc, #76]	; (8005a5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a10:	f000 fd0d 	bl	800642e <USBD_GetEpDesc>
 8005a14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2210      	movs	r2, #16
 8005a20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d006      	beq.n	8005a36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	711a      	strb	r2, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f042 0202 	orr.w	r2, r2, #2
 8005a34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	711a      	strb	r2, [r3, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f042 0202 	orr.w	r2, r2, #2
 8005a48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2243      	movs	r2, #67	; 0x43
 8005a4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a50:	4b02      	ldr	r3, [pc, #8]	; (8005a5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000050 	.word	0x20000050

08005a60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a68:	2182      	movs	r1, #130	; 0x82
 8005a6a:	4818      	ldr	r0, [pc, #96]	; (8005acc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a6c:	f000 fcdf 	bl	800642e <USBD_GetEpDesc>
 8005a70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a72:	2101      	movs	r1, #1
 8005a74:	4815      	ldr	r0, [pc, #84]	; (8005acc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a76:	f000 fcda 	bl	800642e <USBD_GetEpDesc>
 8005a7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a7c:	2181      	movs	r1, #129	; 0x81
 8005a7e:	4813      	ldr	r0, [pc, #76]	; (8005acc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a80:	f000 fcd5 	bl	800642e <USBD_GetEpDesc>
 8005a84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d006      	beq.n	8005aa6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa0:	711a      	strb	r2, [r3, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d006      	beq.n	8005aba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab4:	711a      	strb	r2, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2243      	movs	r2, #67	; 0x43
 8005abe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ac0:	4b02      	ldr	r3, [pc, #8]	; (8005acc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000050 	.word	0x20000050

08005ad0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	220a      	movs	r2, #10
 8005adc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ade:	4b03      	ldr	r3, [pc, #12]	; (8005aec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	2000000c 	.word	0x2000000c

08005af0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e009      	b.n	8005b18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	33b0      	adds	r3, #176	; 0xb0
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	32b0      	adds	r2, #176	; 0xb0
 8005b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e008      	b.n	8005b5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	32b0      	adds	r2, #176	; 0xb0
 8005b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e004      	b.n	8005b96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	32b0      	adds	r2, #176	; 0xb0
 8005bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	32b0      	adds	r2, #176	; 0xb0
 8005bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e025      	b.n	8005c22 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d11f      	bne.n	8005c20 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005be8:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <USBD_CDC_TransmitPacket+0x88>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f003 020f 	and.w	r2, r3, #15
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4403      	add	r3, r0
 8005c02:	3318      	adds	r3, #24
 8005c04:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005c06:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <USBD_CDC_TransmitPacket+0x88>)
 8005c08:	7819      	ldrb	r1, [r3, #0]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 ffa9 	bl	8007b6e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000093 	.word	0x20000093

08005c30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	32b0      	adds	r2, #176	; 0xb0
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	32b0      	adds	r2, #176	; 0xb0
 8005c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e018      	b.n	8005c90 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	7c1b      	ldrb	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <USBD_CDC_ReceivePacket+0x68>)
 8005c68:	7819      	ldrb	r1, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 ff9b 	bl	8007bb0 <USBD_LL_PrepareReceive>
 8005c7a:	e008      	b.n	8005c8e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <USBD_CDC_ReceivePacket+0x68>)
 8005c7e:	7819      	ldrb	r1, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c86:	2340      	movs	r3, #64	; 0x40
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 ff91 	bl	8007bb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000094 	.word	0x20000094

08005c9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e01f      	b.n	8005cf4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	79fa      	ldrb	r2, [r7, #7]
 8005ce6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f001 fe0b 	bl	8007904 <USBD_LL_Init>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e025      	b.n	8005d60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	32ae      	adds	r2, #174	; 0xae
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00f      	beq.n	8005d50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	32ae      	adds	r2, #174	; 0xae
 8005d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	f107 020e 	add.w	r2, r7, #14
 8005d44:	4610      	mov	r0, r2
 8005d46:	4798      	blx	r3
 8005d48:	4602      	mov	r2, r0
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 fe13 	bl	800799c <USBD_LL_Start>
 8005d76:	4603      	mov	r3, r0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	78fa      	ldrb	r2, [r7, #3]
 8005dba:	4611      	mov	r1, r2
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	4611      	mov	r1, r2
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005df4:	2303      	movs	r3, #3
 8005df6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 f908 	bl	800702a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e28:	461a      	mov	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d01a      	beq.n	8005e74 <USBD_LL_SetupStage+0x72>
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d822      	bhi.n	8005e88 <USBD_LL_SetupStage+0x86>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <USBD_LL_SetupStage+0x4a>
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d00a      	beq.n	8005e60 <USBD_LL_SetupStage+0x5e>
 8005e4a:	e01d      	b.n	8005e88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fb5f 	bl	8006518 <USBD_StdDevReq>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5e:	e020      	b.n	8005ea2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fbc7 	bl	80065fc <USBD_StdItfReq>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
      break;
 8005e72:	e016      	b.n	8005ea2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fc29 	bl	80066d4 <USBD_StdEPReq>
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]
      break;
 8005e86:	e00c      	b.n	8005ea2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 fde0 	bl	8007a5c <USBD_LL_StallEP>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea0:	bf00      	nop
  }

  return ret;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005ebe:	7afb      	ldrb	r3, [r7, #11]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d16e      	bne.n	8005fa2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005eca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	f040 8098 	bne.w	8006008 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d913      	bls.n	8005f0c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	1ad2      	subs	r2, r2, r3
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	4293      	cmp	r3, r2
 8005efc:	bf28      	it	cs
 8005efe:	4613      	movcs	r3, r2
 8005f00:	461a      	mov	r2, r3
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f001 f984 	bl	8007212 <USBD_CtlContinueRx>
 8005f0a:	e07d      	b.n	8006008 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d014      	beq.n	8005f44 <USBD_LL_DataOutStage+0x98>
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d81d      	bhi.n	8005f5a <USBD_LL_DataOutStage+0xae>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <USBD_LL_DataOutStage+0x7c>
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d003      	beq.n	8005f2e <USBD_LL_DataOutStage+0x82>
 8005f26:	e018      	b.n	8005f5a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	75bb      	strb	r3, [r7, #22]
            break;
 8005f2c:	e018      	b.n	8005f60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	4619      	mov	r1, r3
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fa5e 	bl	80063fa <USBD_CoreFindIF>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	75bb      	strb	r3, [r7, #22]
            break;
 8005f42:	e00d      	b.n	8005f60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fa60 	bl	8006414 <USBD_CoreFindEP>
 8005f54:	4603      	mov	r3, r0
 8005f56:	75bb      	strb	r3, [r7, #22]
            break;
 8005f58:	e002      	b.n	8005f60 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f5e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f60:	7dbb      	ldrb	r3, [r7, #22]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d119      	bne.n	8005f9a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d113      	bne.n	8005f9a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f72:	7dba      	ldrb	r2, [r7, #22]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	32ae      	adds	r2, #174	; 0xae
 8005f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005f82:	7dba      	ldrb	r2, [r7, #22]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005f8a:	7dba      	ldrb	r2, [r7, #22]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	32ae      	adds	r2, #174	; 0xae
 8005f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f001 f94a 	bl	8007234 <USBD_CtlSendStatus>
 8005fa0:	e032      	b.n	8006008 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
 8005fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	4619      	mov	r1, r3
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fa31 	bl	8006414 <USBD_CoreFindEP>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fb6:	7dbb      	ldrb	r3, [r7, #22]
 8005fb8:	2bff      	cmp	r3, #255	; 0xff
 8005fba:	d025      	beq.n	8006008 <USBD_LL_DataOutStage+0x15c>
 8005fbc:	7dbb      	ldrb	r3, [r7, #22]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d122      	bne.n	8006008 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d117      	bne.n	8005ffe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005fce:	7dba      	ldrb	r2, [r7, #22]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	32ae      	adds	r2, #174	; 0xae
 8005fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00f      	beq.n	8005ffe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005fde:	7dba      	ldrb	r2, [r7, #22]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005fe6:	7dba      	ldrb	r2, [r7, #22]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	32ae      	adds	r2, #174	; 0xae
 8005fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	7afa      	ldrb	r2, [r7, #11]
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	4798      	blx	r3
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	e000      	b.n	800600a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b086      	sub	sp, #24
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	460b      	mov	r3, r1
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006020:	7afb      	ldrb	r3, [r7, #11]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d16f      	bne.n	8006106 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3314      	adds	r3, #20
 800602a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006032:	2b02      	cmp	r3, #2
 8006034:	d15a      	bne.n	80060ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	429a      	cmp	r2, r3
 8006040:	d914      	bls.n	800606c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	1ad2      	subs	r2, r2, r3
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	461a      	mov	r2, r3
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f001 f8ac 	bl	80071b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800605e:	2300      	movs	r3, #0
 8006060:	2200      	movs	r2, #0
 8006062:	2100      	movs	r1, #0
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f001 fda3 	bl	8007bb0 <USBD_LL_PrepareReceive>
 800606a:	e03f      	b.n	80060ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	429a      	cmp	r2, r3
 8006076:	d11c      	bne.n	80060b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006080:	429a      	cmp	r2, r3
 8006082:	d316      	bcc.n	80060b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800608e:	429a      	cmp	r2, r3
 8006090:	d20f      	bcs.n	80060b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006092:	2200      	movs	r2, #0
 8006094:	2100      	movs	r1, #0
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f001 f88d 	bl	80071b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060a4:	2300      	movs	r3, #0
 80060a6:	2200      	movs	r2, #0
 80060a8:	2100      	movs	r1, #0
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f001 fd80 	bl	8007bb0 <USBD_LL_PrepareReceive>
 80060b0:	e01c      	b.n	80060ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d10f      	bne.n	80060de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060de:	2180      	movs	r1, #128	; 0x80
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f001 fcbb 	bl	8007a5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f001 f8b7 	bl	800725a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d03a      	beq.n	800616c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff fe42 	bl	8005d80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006104:	e032      	b.n	800616c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006106:	7afb      	ldrb	r3, [r7, #11]
 8006108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800610c:	b2db      	uxtb	r3, r3
 800610e:	4619      	mov	r1, r3
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f97f 	bl	8006414 <USBD_CoreFindEP>
 8006116:	4603      	mov	r3, r0
 8006118:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	2bff      	cmp	r3, #255	; 0xff
 800611e:	d025      	beq.n	800616c <USBD_LL_DataInStage+0x15a>
 8006120:	7dfb      	ldrb	r3, [r7, #23]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d122      	bne.n	800616c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b03      	cmp	r3, #3
 8006130:	d11c      	bne.n	800616c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006132:	7dfa      	ldrb	r2, [r7, #23]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	32ae      	adds	r2, #174	; 0xae
 8006138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d014      	beq.n	800616c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006142:	7dfa      	ldrb	r2, [r7, #23]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800614a:	7dfa      	ldrb	r2, [r7, #23]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	32ae      	adds	r2, #174	; 0xae
 8006150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	7afa      	ldrb	r2, [r7, #11]
 8006158:	4611      	mov	r1, r2
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	4798      	blx	r3
 800615e:	4603      	mov	r3, r0
 8006160:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006162:	7dbb      	ldrb	r3, [r7, #22]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006168:	7dbb      	ldrb	r3, [r7, #22]
 800616a:	e000      	b.n	800616e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d014      	beq.n	80061dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00e      	beq.n	80061dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6852      	ldr	r2, [r2, #4]
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	4611      	mov	r1, r2
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80061d8:	2303      	movs	r3, #3
 80061da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fbf5 	bl	80079d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2240      	movs	r2, #64	; 0x40
 80061f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061f8:	2340      	movs	r3, #64	; 0x40
 80061fa:	2200      	movs	r2, #0
 80061fc:	2180      	movs	r1, #128	; 0x80
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fbe7 	bl	80079d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2240      	movs	r2, #64	; 0x40
 800620e:	621a      	str	r2, [r3, #32]

  return ret;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006248:	b2da      	uxtb	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2204      	movs	r2, #4
 8006254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b04      	cmp	r3, #4
 8006278:	d106      	bne.n	8006288 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006280:	b2da      	uxtb	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d110      	bne.n	80062cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	32ae      	adds	r2, #174	; 0xae
 80062ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e01c      	b.n	8006332 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b03      	cmp	r3, #3
 8006302:	d115      	bne.n	8006330 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	32ae      	adds	r2, #174	; 0xae
 800630e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	32ae      	adds	r2, #174	; 0xae
 8006322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	4611      	mov	r1, r2
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	32ae      	adds	r2, #174	; 0xae
 8006350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006358:	2303      	movs	r3, #3
 800635a:	e01c      	b.n	8006396 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b03      	cmp	r3, #3
 8006366:	d115      	bne.n	8006394 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	32ae      	adds	r2, #174	; 0xae
 8006372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	32ae      	adds	r2, #174	; 0xae
 8006386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	4611      	mov	r1, r2
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00e      	beq.n	80063f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6852      	ldr	r2, [r2, #4]
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	4611      	mov	r1, r2
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80063ec:	2303      	movs	r3, #3
 80063ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006406:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006420:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	885b      	ldrh	r3, [r3, #2]
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	429a      	cmp	r2, r3
 8006454:	d920      	bls.n	8006498 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800645e:	e013      	b.n	8006488 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006460:	f107 030a 	add.w	r3, r7, #10
 8006464:	4619      	mov	r1, r3
 8006466:	6978      	ldr	r0, [r7, #20]
 8006468:	f000 f81b 	bl	80064a2 <USBD_GetNextDesc>
 800646c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	785b      	ldrb	r3, [r3, #1]
 8006472:	2b05      	cmp	r3, #5
 8006474:	d108      	bne.n	8006488 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	789b      	ldrb	r3, [r3, #2]
 800647e:	78fa      	ldrb	r2, [r7, #3]
 8006480:	429a      	cmp	r2, r3
 8006482:	d008      	beq.n	8006496 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	885b      	ldrh	r3, [r3, #2]
 800648c:	b29a      	uxth	r2, r3
 800648e:	897b      	ldrh	r3, [r7, #10]
 8006490:	429a      	cmp	r2, r3
 8006492:	d8e5      	bhi.n	8006460 <USBD_GetEpDesc+0x32>
 8006494:	e000      	b.n	8006498 <USBD_GetEpDesc+0x6a>
          break;
 8006496:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006498:	693b      	ldr	r3, [r7, #16]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	881a      	ldrh	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	4413      	add	r3, r2
 80064bc:	b29a      	uxth	r2, r3
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4413      	add	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80064ce:	68fb      	ldr	r3, [r7, #12]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	3301      	adds	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064fa:	8a3b      	ldrh	r3, [r7, #16]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	b21a      	sxth	r2, r3
 8006500:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006504:	4313      	orrs	r3, r2
 8006506:	b21b      	sxth	r3, r3
 8006508:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800650a:	89fb      	ldrh	r3, [r7, #14]
}
 800650c:	4618      	mov	r0, r3
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d005      	beq.n	800653e <USBD_StdDevReq+0x26>
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	d857      	bhi.n	80065e6 <USBD_StdDevReq+0xce>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00f      	beq.n	800655a <USBD_StdDevReq+0x42>
 800653a:	2b20      	cmp	r3, #32
 800653c:	d153      	bne.n	80065e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	32ae      	adds	r2, #174	; 0xae
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	4798      	blx	r3
 8006554:	4603      	mov	r3, r0
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e04a      	b.n	80065f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	785b      	ldrb	r3, [r3, #1]
 800655e:	2b09      	cmp	r3, #9
 8006560:	d83b      	bhi.n	80065da <USBD_StdDevReq+0xc2>
 8006562:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <USBD_StdDevReq+0x50>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	080065bd 	.word	0x080065bd
 800656c:	080065d1 	.word	0x080065d1
 8006570:	080065db 	.word	0x080065db
 8006574:	080065c7 	.word	0x080065c7
 8006578:	080065db 	.word	0x080065db
 800657c:	0800659b 	.word	0x0800659b
 8006580:	08006591 	.word	0x08006591
 8006584:	080065db 	.word	0x080065db
 8006588:	080065b3 	.word	0x080065b3
 800658c:	080065a5 	.word	0x080065a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa3c 	bl	8006a10 <USBD_GetDescriptor>
          break;
 8006598:	e024      	b.n	80065e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fba1 	bl	8006ce4 <USBD_SetAddress>
          break;
 80065a2:	e01f      	b.n	80065e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fbe0 	bl	8006d6c <USBD_SetConfig>
 80065ac:	4603      	mov	r3, r0
 80065ae:	73fb      	strb	r3, [r7, #15]
          break;
 80065b0:	e018      	b.n	80065e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fc83 	bl	8006ec0 <USBD_GetConfig>
          break;
 80065ba:	e013      	b.n	80065e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fcb4 	bl	8006f2c <USBD_GetStatus>
          break;
 80065c4:	e00e      	b.n	80065e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fce3 	bl	8006f94 <USBD_SetFeature>
          break;
 80065ce:	e009      	b.n	80065e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fd07 	bl	8006fe6 <USBD_ClrFeature>
          break;
 80065d8:	e004      	b.n	80065e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fd5e 	bl	800709e <USBD_CtlError>
          break;
 80065e2:	bf00      	nop
      }
      break;
 80065e4:	e004      	b.n	80065f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fd58 	bl	800709e <USBD_CtlError>
      break;
 80065ee:	bf00      	nop
  }

  return ret;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop

080065fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006612:	2b40      	cmp	r3, #64	; 0x40
 8006614:	d005      	beq.n	8006622 <USBD_StdItfReq+0x26>
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d852      	bhi.n	80066c0 <USBD_StdItfReq+0xc4>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <USBD_StdItfReq+0x26>
 800661e:	2b20      	cmp	r3, #32
 8006620:	d14e      	bne.n	80066c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006628:	b2db      	uxtb	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	2b02      	cmp	r3, #2
 800662e:	d840      	bhi.n	80066b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	889b      	ldrh	r3, [r3, #4]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b01      	cmp	r3, #1
 8006638:	d836      	bhi.n	80066a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	889b      	ldrh	r3, [r3, #4]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff fed9 	bl	80063fa <USBD_CoreFindIF>
 8006648:	4603      	mov	r3, r0
 800664a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	2bff      	cmp	r3, #255	; 0xff
 8006650:	d01d      	beq.n	800668e <USBD_StdItfReq+0x92>
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d11a      	bne.n	800668e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006658:	7bba      	ldrb	r2, [r7, #14]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	32ae      	adds	r2, #174	; 0xae
 800665e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00f      	beq.n	8006688 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006668:	7bba      	ldrb	r2, [r7, #14]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006670:	7bba      	ldrb	r2, [r7, #14]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	32ae      	adds	r2, #174	; 0xae
 8006676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
 8006682:	4603      	mov	r3, r0
 8006684:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006686:	e004      	b.n	8006692 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006688:	2303      	movs	r3, #3
 800668a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800668c:	e001      	b.n	8006692 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800668e:	2303      	movs	r3, #3
 8006690:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	88db      	ldrh	r3, [r3, #6]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d110      	bne.n	80066bc <USBD_StdItfReq+0xc0>
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10d      	bne.n	80066bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fdc7 	bl	8007234 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066a6:	e009      	b.n	80066bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fcf7 	bl	800709e <USBD_CtlError>
          break;
 80066b0:	e004      	b.n	80066bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fcf2 	bl	800709e <USBD_CtlError>
          break;
 80066ba:	e000      	b.n	80066be <USBD_StdItfReq+0xc2>
          break;
 80066bc:	bf00      	nop
      }
      break;
 80066be:	e004      	b.n	80066ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fceb 	bl	800709e <USBD_CtlError>
      break;
 80066c8:	bf00      	nop
  }

  return ret;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	889b      	ldrh	r3, [r3, #4]
 80066e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066f0:	2b40      	cmp	r3, #64	; 0x40
 80066f2:	d007      	beq.n	8006704 <USBD_StdEPReq+0x30>
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	f200 817f 	bhi.w	80069f8 <USBD_StdEPReq+0x324>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d02a      	beq.n	8006754 <USBD_StdEPReq+0x80>
 80066fe:	2b20      	cmp	r3, #32
 8006700:	f040 817a 	bne.w	80069f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff fe83 	bl	8006414 <USBD_CoreFindEP>
 800670e:	4603      	mov	r3, r0
 8006710:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006712:	7b7b      	ldrb	r3, [r7, #13]
 8006714:	2bff      	cmp	r3, #255	; 0xff
 8006716:	f000 8174 	beq.w	8006a02 <USBD_StdEPReq+0x32e>
 800671a:	7b7b      	ldrb	r3, [r7, #13]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 8170 	bne.w	8006a02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006722:	7b7a      	ldrb	r2, [r7, #13]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800672a:	7b7a      	ldrb	r2, [r7, #13]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	32ae      	adds	r2, #174	; 0xae
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 8163 	beq.w	8006a02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800673c:	7b7a      	ldrb	r2, [r7, #13]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	32ae      	adds	r2, #174	; 0xae
 8006742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
 800674e:	4603      	mov	r3, r0
 8006750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006752:	e156      	b.n	8006a02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	2b03      	cmp	r3, #3
 800675a:	d008      	beq.n	800676e <USBD_StdEPReq+0x9a>
 800675c:	2b03      	cmp	r3, #3
 800675e:	f300 8145 	bgt.w	80069ec <USBD_StdEPReq+0x318>
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 809b 	beq.w	800689e <USBD_StdEPReq+0x1ca>
 8006768:	2b01      	cmp	r3, #1
 800676a:	d03c      	beq.n	80067e6 <USBD_StdEPReq+0x112>
 800676c:	e13e      	b.n	80069ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d002      	beq.n	8006780 <USBD_StdEPReq+0xac>
 800677a:	2b03      	cmp	r3, #3
 800677c:	d016      	beq.n	80067ac <USBD_StdEPReq+0xd8>
 800677e:	e02c      	b.n	80067da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00d      	beq.n	80067a2 <USBD_StdEPReq+0xce>
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	2b80      	cmp	r3, #128	; 0x80
 800678a:	d00a      	beq.n	80067a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 f963 	bl	8007a5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006796:	2180      	movs	r1, #128	; 0x80
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 f95f 	bl	8007a5c <USBD_LL_StallEP>
 800679e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067a0:	e020      	b.n	80067e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fc7a 	bl	800709e <USBD_CtlError>
              break;
 80067aa:	e01b      	b.n	80067e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	885b      	ldrh	r3, [r3, #2]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10e      	bne.n	80067d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00b      	beq.n	80067d2 <USBD_StdEPReq+0xfe>
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d008      	beq.n	80067d2 <USBD_StdEPReq+0xfe>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	88db      	ldrh	r3, [r3, #6]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 f945 	bl	8007a5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fd2e 	bl	8007234 <USBD_CtlSendStatus>

              break;
 80067d8:	e004      	b.n	80067e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fc5e 	bl	800709e <USBD_CtlError>
              break;
 80067e2:	bf00      	nop
          }
          break;
 80067e4:	e107      	b.n	80069f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d002      	beq.n	80067f8 <USBD_StdEPReq+0x124>
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d016      	beq.n	8006824 <USBD_StdEPReq+0x150>
 80067f6:	e04b      	b.n	8006890 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00d      	beq.n	800681a <USBD_StdEPReq+0x146>
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	2b80      	cmp	r3, #128	; 0x80
 8006802:	d00a      	beq.n	800681a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 f927 	bl	8007a5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800680e:	2180      	movs	r1, #128	; 0x80
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 f923 	bl	8007a5c <USBD_LL_StallEP>
 8006816:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006818:	e040      	b.n	800689c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fc3e 	bl	800709e <USBD_CtlError>
              break;
 8006822:	e03b      	b.n	800689c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	885b      	ldrh	r3, [r3, #2]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d136      	bne.n	800689a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006832:	2b00      	cmp	r3, #0
 8006834:	d004      	beq.n	8006840 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 f92d 	bl	8007a9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fcf7 	bl	8007234 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff fde2 	bl	8006414 <USBD_CoreFindEP>
 8006850:	4603      	mov	r3, r0
 8006852:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006854:	7b7b      	ldrb	r3, [r7, #13]
 8006856:	2bff      	cmp	r3, #255	; 0xff
 8006858:	d01f      	beq.n	800689a <USBD_StdEPReq+0x1c6>
 800685a:	7b7b      	ldrb	r3, [r7, #13]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d11c      	bne.n	800689a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006860:	7b7a      	ldrb	r2, [r7, #13]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006868:	7b7a      	ldrb	r2, [r7, #13]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	; 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d010      	beq.n	800689a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006878:	7b7a      	ldrb	r2, [r7, #13]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	32ae      	adds	r2, #174	; 0xae
 800687e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
 800688a:	4603      	mov	r3, r0
 800688c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800688e:	e004      	b.n	800689a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fc03 	bl	800709e <USBD_CtlError>
              break;
 8006898:	e000      	b.n	800689c <USBD_StdEPReq+0x1c8>
              break;
 800689a:	bf00      	nop
          }
          break;
 800689c:	e0ab      	b.n	80069f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d002      	beq.n	80068b0 <USBD_StdEPReq+0x1dc>
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d032      	beq.n	8006914 <USBD_StdEPReq+0x240>
 80068ae:	e097      	b.n	80069e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <USBD_StdEPReq+0x1f2>
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	2b80      	cmp	r3, #128	; 0x80
 80068ba:	d004      	beq.n	80068c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fbed 	bl	800709e <USBD_CtlError>
                break;
 80068c4:	e091      	b.n	80069ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	da0b      	bge.n	80068e6 <USBD_StdEPReq+0x212>
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	3310      	adds	r3, #16
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	3304      	adds	r3, #4
 80068e4:	e00b      	b.n	80068fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4413      	add	r3, r2
 80068fc:	3304      	adds	r3, #4
 80068fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2202      	movs	r2, #2
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fc37 	bl	8007180 <USBD_CtlSendData>
              break;
 8006912:	e06a      	b.n	80069ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006918:	2b00      	cmp	r3, #0
 800691a:	da11      	bge.n	8006940 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	f003 020f 	and.w	r2, r3, #15
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	440b      	add	r3, r1
 800692e:	3324      	adds	r3, #36	; 0x24
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d117      	bne.n	8006966 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fbb0 	bl	800709e <USBD_CtlError>
                  break;
 800693e:	e054      	b.n	80069ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	f003 020f 	and.w	r2, r3, #15
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fb9d 	bl	800709e <USBD_CtlError>
                  break;
 8006964:	e041      	b.n	80069ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800696a:	2b00      	cmp	r3, #0
 800696c:	da0b      	bge.n	8006986 <USBD_StdEPReq+0x2b2>
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	3310      	adds	r3, #16
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	3304      	adds	r3, #4
 8006984:	e00b      	b.n	800699e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	4413      	add	r3, r2
 800699c:	3304      	adds	r3, #4
 800699e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <USBD_StdEPReq+0x2d8>
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	d103      	bne.n	80069b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	e00e      	b.n	80069d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 f88d 	bl	8007ad8 <USBD_LL_IsStallEP>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2201      	movs	r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	e002      	b.n	80069d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2202      	movs	r2, #2
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fbd1 	bl	8007180 <USBD_CtlSendData>
              break;
 80069de:	e004      	b.n	80069ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fb5b 	bl	800709e <USBD_CtlError>
              break;
 80069e8:	bf00      	nop
          }
          break;
 80069ea:	e004      	b.n	80069f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb55 	bl	800709e <USBD_CtlError>
          break;
 80069f4:	bf00      	nop
      }
      break;
 80069f6:	e005      	b.n	8006a04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fb4f 	bl	800709e <USBD_CtlError>
      break;
 8006a00:	e000      	b.n	8006a04 <USBD_StdEPReq+0x330>
      break;
 8006a02:	bf00      	nop
  }

  return ret;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	885b      	ldrh	r3, [r3, #2]
 8006a2a:	0a1b      	lsrs	r3, r3, #8
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	2b06      	cmp	r3, #6
 8006a32:	f200 8128 	bhi.w	8006c86 <USBD_GetDescriptor+0x276>
 8006a36:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <USBD_GetDescriptor+0x2c>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	08006a71 	.word	0x08006a71
 8006a44:	08006ab1 	.word	0x08006ab1
 8006a48:	08006c87 	.word	0x08006c87
 8006a4c:	08006c87 	.word	0x08006c87
 8006a50:	08006c27 	.word	0x08006c27
 8006a54:	08006c53 	.word	0x08006c53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	7c12      	ldrb	r2, [r2, #16]
 8006a64:	f107 0108 	add.w	r1, r7, #8
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
 8006a6c:	60f8      	str	r0, [r7, #12]
      break;
 8006a6e:	e112      	b.n	8006c96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7c1b      	ldrb	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10d      	bne.n	8006a94 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a80:	f107 0208 	add.w	r2, r7, #8
 8006a84:	4610      	mov	r0, r2
 8006a86:	4798      	blx	r3
 8006a88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	2202      	movs	r2, #2
 8006a90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a92:	e100      	b.n	8006c96 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	f107 0208 	add.w	r2, r7, #8
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
 8006aa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	2202      	movs	r2, #2
 8006aac:	701a      	strb	r2, [r3, #0]
      break;
 8006aae:	e0f2      	b.n	8006c96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	885b      	ldrh	r3, [r3, #2]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	f200 80ac 	bhi.w	8006c14 <USBD_GetDescriptor+0x204>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <USBD_GetDescriptor+0xb4>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006add 	.word	0x08006add
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b45 	.word	0x08006b45
 8006ad0:	08006b79 	.word	0x08006b79
 8006ad4:	08006bad 	.word	0x08006bad
 8006ad8:	08006be1 	.word	0x08006be1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	f107 0108 	add.w	r1, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006afe:	e091      	b.n	8006c24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 facb 	bl	800709e <USBD_CtlError>
            err++;
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b0e:	e089      	b.n	8006c24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	7c12      	ldrb	r2, [r2, #16]
 8006b28:	f107 0108 	add.w	r1, r7, #8
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
 8006b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b32:	e077      	b.n	8006c24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fab1 	bl	800709e <USBD_CtlError>
            err++;
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	72fb      	strb	r3, [r7, #11]
          break;
 8006b42:	e06f      	b.n	8006c24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00b      	beq.n	8006b68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	7c12      	ldrb	r2, [r2, #16]
 8006b5c:	f107 0108 	add.w	r1, r7, #8
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
 8006b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b66:	e05d      	b.n	8006c24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa97 	bl	800709e <USBD_CtlError>
            err++;
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	3301      	adds	r3, #1
 8006b74:	72fb      	strb	r3, [r7, #11]
          break;
 8006b76:	e055      	b.n	8006c24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	7c12      	ldrb	r2, [r2, #16]
 8006b90:	f107 0108 	add.w	r1, r7, #8
 8006b94:	4610      	mov	r0, r2
 8006b96:	4798      	blx	r3
 8006b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b9a:	e043      	b.n	8006c24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa7d 	bl	800709e <USBD_CtlError>
            err++;
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8006baa:	e03b      	b.n	8006c24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7c12      	ldrb	r2, [r2, #16]
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4798      	blx	r3
 8006bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bce:	e029      	b.n	8006c24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa63 	bl	800709e <USBD_CtlError>
            err++;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bde:	e021      	b.n	8006c24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	7c12      	ldrb	r2, [r2, #16]
 8006bf8:	f107 0108 	add.w	r1, r7, #8
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c02:	e00f      	b.n	8006c24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa49 	bl	800709e <USBD_CtlError>
            err++;
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	72fb      	strb	r3, [r7, #11]
          break;
 8006c12:	e007      	b.n	8006c24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa41 	bl	800709e <USBD_CtlError>
          err++;
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c22:	bf00      	nop
      }
      break;
 8006c24:	e037      	b.n	8006c96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7c1b      	ldrb	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d109      	bne.n	8006c42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c36:	f107 0208 	add.w	r2, r7, #8
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	4798      	blx	r3
 8006c3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c40:	e029      	b.n	8006c96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fa2a 	bl	800709e <USBD_CtlError>
        err++;
 8006c4a:	7afb      	ldrb	r3, [r7, #11]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c50:	e021      	b.n	8006c96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	7c1b      	ldrb	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10d      	bne.n	8006c76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	f107 0208 	add.w	r2, r7, #8
 8006c66:	4610      	mov	r0, r2
 8006c68:	4798      	blx	r3
 8006c6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	2207      	movs	r2, #7
 8006c72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c74:	e00f      	b.n	8006c96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fa10 	bl	800709e <USBD_CtlError>
        err++;
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	3301      	adds	r3, #1
 8006c82:	72fb      	strb	r3, [r7, #11]
      break;
 8006c84:	e007      	b.n	8006c96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fa08 	bl	800709e <USBD_CtlError>
      err++;
 8006c8e:	7afb      	ldrb	r3, [r7, #11]
 8006c90:	3301      	adds	r3, #1
 8006c92:	72fb      	strb	r3, [r7, #11]
      break;
 8006c94:	bf00      	nop
  }

  if (err != 0U)
 8006c96:	7afb      	ldrb	r3, [r7, #11]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11e      	bne.n	8006cda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	88db      	ldrh	r3, [r3, #6]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d016      	beq.n	8006cd2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ca4:	893b      	ldrh	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00e      	beq.n	8006cc8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	88da      	ldrh	r2, [r3, #6]
 8006cae:	893b      	ldrh	r3, [r7, #8]
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	bf28      	it	cs
 8006cb4:	4613      	movcs	r3, r2
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cba:	893b      	ldrh	r3, [r7, #8]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fa5d 	bl	8007180 <USBD_CtlSendData>
 8006cc6:	e009      	b.n	8006cdc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f9e7 	bl	800709e <USBD_CtlError>
 8006cd0:	e004      	b.n	8006cdc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 faae 	bl	8007234 <USBD_CtlSendStatus>
 8006cd8:	e000      	b.n	8006cdc <USBD_GetDescriptor+0x2cc>
    return;
 8006cda:	bf00      	nop
  }
}
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop

08006ce4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	889b      	ldrh	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d131      	bne.n	8006d5a <USBD_SetAddress+0x76>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	88db      	ldrh	r3, [r3, #6]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d12d      	bne.n	8006d5a <USBD_SetAddress+0x76>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	885b      	ldrh	r3, [r3, #2]
 8006d02:	2b7f      	cmp	r3, #127	; 0x7f
 8006d04:	d829      	bhi.n	8006d5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	885b      	ldrh	r3, [r3, #2]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d104      	bne.n	8006d28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f9bc 	bl	800709e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d26:	e01d      	b.n	8006d64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7bfa      	ldrb	r2, [r7, #15]
 8006d2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fefb 	bl	8007b30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa7a 	bl	8007234 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	e009      	b.n	8006d64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d58:	e004      	b.n	8006d64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f99e 	bl	800709e <USBD_CtlError>
  }
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	885b      	ldrh	r3, [r3, #2]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	4b4e      	ldr	r3, [pc, #312]	; (8006ebc <USBD_SetConfig+0x150>)
 8006d82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d84:	4b4d      	ldr	r3, [pc, #308]	; (8006ebc <USBD_SetConfig+0x150>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d905      	bls.n	8006d98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f985 	bl	800709e <USBD_CtlError>
    return USBD_FAIL;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e08c      	b.n	8006eb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d002      	beq.n	8006daa <USBD_SetConfig+0x3e>
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d029      	beq.n	8006dfc <USBD_SetConfig+0x90>
 8006da8:	e075      	b.n	8006e96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006daa:	4b44      	ldr	r3, [pc, #272]	; (8006ebc <USBD_SetConfig+0x150>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d020      	beq.n	8006df4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006db2:	4b42      	ldr	r3, [pc, #264]	; (8006ebc <USBD_SetConfig+0x150>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dbc:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <USBD_SetConfig+0x150>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fe ffe7 	bl	8005d96 <USBD_SetClassConfig>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f962 	bl	800709e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006de2:	e065      	b.n	8006eb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fa25 	bl	8007234 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2203      	movs	r2, #3
 8006dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006df2:	e05d      	b.n	8006eb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fa1d 	bl	8007234 <USBD_CtlSendStatus>
      break;
 8006dfa:	e059      	b.n	8006eb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006dfc:	4b2f      	ldr	r3, [pc, #188]	; (8006ebc <USBD_SetConfig+0x150>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d112      	bne.n	8006e2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	; (8006ebc <USBD_SetConfig+0x150>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e16:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <USBD_SetConfig+0x150>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7fe ffd6 	bl	8005dce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa06 	bl	8007234 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e28:	e042      	b.n	8006eb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e2a:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <USBD_SetConfig+0x150>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d02a      	beq.n	8006e8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fe ffc4 	bl	8005dce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e46:	4b1d      	ldr	r3, [pc, #116]	; (8006ebc <USBD_SetConfig+0x150>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e50:	4b1a      	ldr	r3, [pc, #104]	; (8006ebc <USBD_SetConfig+0x150>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fe ff9d 	bl	8005d96 <USBD_SetClassConfig>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00f      	beq.n	8006e86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f918 	bl	800709e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fe ffa9 	bl	8005dce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e84:	e014      	b.n	8006eb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f9d4 	bl	8007234 <USBD_CtlSendStatus>
      break;
 8006e8c:	e010      	b.n	8006eb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f9d0 	bl	8007234 <USBD_CtlSendStatus>
      break;
 8006e94:	e00c      	b.n	8006eb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f900 	bl	800709e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e9e:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <USBD_SetConfig+0x150>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fe ff92 	bl	8005dce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	73fb      	strb	r3, [r7, #15]
      break;
 8006eae:	bf00      	nop
  }

  return ret;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	200001c8 	.word	0x200001c8

08006ec0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	88db      	ldrh	r3, [r3, #6]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d004      	beq.n	8006edc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f8e2 	bl	800709e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006eda:	e023      	b.n	8006f24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	dc02      	bgt.n	8006eee <USBD_GetConfig+0x2e>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	dc03      	bgt.n	8006ef4 <USBD_GetConfig+0x34>
 8006eec:	e015      	b.n	8006f1a <USBD_GetConfig+0x5a>
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d00b      	beq.n	8006f0a <USBD_GetConfig+0x4a>
 8006ef2:	e012      	b.n	8006f1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3308      	adds	r3, #8
 8006efe:	2201      	movs	r2, #1
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f93c 	bl	8007180 <USBD_CtlSendData>
        break;
 8006f08:	e00c      	b.n	8006f24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	2201      	movs	r2, #1
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f934 	bl	8007180 <USBD_CtlSendData>
        break;
 8006f18:	e004      	b.n	8006f24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f8be 	bl	800709e <USBD_CtlError>
        break;
 8006f22:	bf00      	nop
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d81e      	bhi.n	8006f82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	88db      	ldrh	r3, [r3, #6]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d004      	beq.n	8006f56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f8a5 	bl	800709e <USBD_CtlError>
        break;
 8006f54:	e01a      	b.n	8006f8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f043 0202 	orr.w	r2, r3, #2
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	330c      	adds	r3, #12
 8006f76:	2202      	movs	r2, #2
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f900 	bl	8007180 <USBD_CtlSendData>
      break;
 8006f80:	e004      	b.n	8006f8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f88a 	bl	800709e <USBD_CtlError>
      break;
 8006f8a:	bf00      	nop
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	885b      	ldrh	r3, [r3, #2]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d107      	bne.n	8006fb6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f940 	bl	8007234 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006fb4:	e013      	b.n	8006fde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	885b      	ldrh	r3, [r3, #2]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d10b      	bne.n	8006fd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	889b      	ldrh	r3, [r3, #4]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f930 	bl	8007234 <USBD_CtlSendStatus>
}
 8006fd4:	e003      	b.n	8006fde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f860 	bl	800709e <USBD_CtlError>
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d80b      	bhi.n	8007016 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	885b      	ldrh	r3, [r3, #2]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d10c      	bne.n	8007020 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f910 	bl	8007234 <USBD_CtlSendStatus>
      }
      break;
 8007014:	e004      	b.n	8007020 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f840 	bl	800709e <USBD_CtlError>
      break;
 800701e:	e000      	b.n	8007022 <USBD_ClrFeature+0x3c>
      break;
 8007020:	bf00      	nop
  }
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3301      	adds	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	781a      	ldrb	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f7ff fa41 	bl	80064dc <SWAPBYTE>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f7ff fa34 	bl	80064dc <SWAPBYTE>
 8007074:	4603      	mov	r3, r0
 8007076:	461a      	mov	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3301      	adds	r3, #1
 8007080:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3301      	adds	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff fa27 	bl	80064dc <SWAPBYTE>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	80da      	strh	r2, [r3, #6]
}
 8007096:	bf00      	nop
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80070a8:	2180      	movs	r1, #128	; 0x80
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fcd6 	bl	8007a5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80070b0:	2100      	movs	r1, #0
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fcd2 	bl	8007a5c <USBD_LL_StallEP>
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d036      	beq.n	8007144 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070da:	6938      	ldr	r0, [r7, #16]
 80070dc:	f000 f836 	bl	800714c <USBD_GetLen>
 80070e0:	4603      	mov	r3, r0
 80070e2:	3301      	adds	r3, #1
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	4413      	add	r3, r2
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	3301      	adds	r3, #1
 80070fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	4413      	add	r3, r2
 8007106:	2203      	movs	r2, #3
 8007108:	701a      	strb	r2, [r3, #0]
  idx++;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	3301      	adds	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007110:	e013      	b.n	800713a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	4413      	add	r3, r2
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	7812      	ldrb	r2, [r2, #0]
 800711c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	3301      	adds	r3, #1
 8007122:	613b      	str	r3, [r7, #16]
    idx++;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	3301      	adds	r3, #1
 8007128:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	4413      	add	r3, r2
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]
    idx++;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
 8007136:	3301      	adds	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e7      	bne.n	8007112 <USBD_GetString+0x52>
 8007142:	e000      	b.n	8007146 <USBD_GetString+0x86>
    return;
 8007144:	bf00      	nop
  }
}
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800715c:	e005      	b.n	800716a <USBD_GetLen+0x1e>
  {
    len++;
 800715e:	7bfb      	ldrb	r3, [r7, #15]
 8007160:	3301      	adds	r3, #1
 8007162:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	3301      	adds	r3, #1
 8007168:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f5      	bne.n	800715e <USBD_GetLen+0x12>
  }

  return len;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2202      	movs	r2, #2
 8007190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	2100      	movs	r1, #0
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 fce1 	bl	8007b6e <USBD_LL_Transmit>

  return USBD_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	2100      	movs	r1, #0
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 fcd0 	bl	8007b6e <USBD_LL_Transmit>

  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2203      	movs	r2, #3
 80071e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	2100      	movs	r1, #0
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fcd4 	bl	8007bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	2100      	movs	r1, #0
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 fcc3 	bl	8007bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2204      	movs	r2, #4
 8007240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007244:	2300      	movs	r3, #0
 8007246:	2200      	movs	r2, #0
 8007248:	2100      	movs	r1, #0
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fc8f 	bl	8007b6e <USBD_LL_Transmit>

  return USBD_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2205      	movs	r2, #5
 8007266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800726a:	2300      	movs	r3, #0
 800726c:	2200      	movs	r2, #0
 800726e:	2100      	movs	r1, #0
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc9d 	bl	8007bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007284:	2200      	movs	r2, #0
 8007286:	4912      	ldr	r1, [pc, #72]	; (80072d0 <MX_USB_DEVICE_Init+0x50>)
 8007288:	4812      	ldr	r0, [pc, #72]	; (80072d4 <MX_USB_DEVICE_Init+0x54>)
 800728a:	f7fe fd07 	bl	8005c9c <USBD_Init>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007294:	f7f9 f9f2 	bl	800067c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007298:	490f      	ldr	r1, [pc, #60]	; (80072d8 <MX_USB_DEVICE_Init+0x58>)
 800729a:	480e      	ldr	r0, [pc, #56]	; (80072d4 <MX_USB_DEVICE_Init+0x54>)
 800729c:	f7fe fd2e 	bl	8005cfc <USBD_RegisterClass>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80072a6:	f7f9 f9e9 	bl	800067c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80072aa:	490c      	ldr	r1, [pc, #48]	; (80072dc <MX_USB_DEVICE_Init+0x5c>)
 80072ac:	4809      	ldr	r0, [pc, #36]	; (80072d4 <MX_USB_DEVICE_Init+0x54>)
 80072ae:	f7fe fc1f 	bl	8005af0 <USBD_CDC_RegisterInterface>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80072b8:	f7f9 f9e0 	bl	800067c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072bc:	4805      	ldr	r0, [pc, #20]	; (80072d4 <MX_USB_DEVICE_Init+0x54>)
 80072be:	f7fe fd53 	bl	8005d68 <USBD_Start>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80072c8:	f7f9 f9d8 	bl	800067c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072cc:	bf00      	nop
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	200000ac 	.word	0x200000ac
 80072d4:	200001cc 	.word	0x200001cc
 80072d8:	20000018 	.word	0x20000018
 80072dc:	20000098 	.word	0x20000098

080072e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072e4:	2200      	movs	r2, #0
 80072e6:	4905      	ldr	r1, [pc, #20]	; (80072fc <CDC_Init_FS+0x1c>)
 80072e8:	4805      	ldr	r0, [pc, #20]	; (8007300 <CDC_Init_FS+0x20>)
 80072ea:	f7fe fc1b 	bl	8005b24 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80072ee:	4905      	ldr	r1, [pc, #20]	; (8007304 <CDC_Init_FS+0x24>)
 80072f0:	4803      	ldr	r0, [pc, #12]	; (8007300 <CDC_Init_FS+0x20>)
 80072f2:	f7fe fc39 	bl	8005b68 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 80072f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	200008a8 	.word	0x200008a8
 8007300:	200001cc 	.word	0x200001cc
 8007304:	200004a8 	.word	0x200004a8

08007308 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800730c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800730e:	4618      	mov	r0, r3
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	6039      	str	r1, [r7, #0]
 8007322:	71fb      	strb	r3, [r7, #7]
 8007324:	4613      	mov	r3, r2
 8007326:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	2b23      	cmp	r3, #35	; 0x23
 800732c:	d84a      	bhi.n	80073c4 <CDC_Control_FS+0xac>
 800732e:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <CDC_Control_FS+0x1c>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	080073c5 	.word	0x080073c5
 8007338:	080073c5 	.word	0x080073c5
 800733c:	080073c5 	.word	0x080073c5
 8007340:	080073c5 	.word	0x080073c5
 8007344:	080073c5 	.word	0x080073c5
 8007348:	080073c5 	.word	0x080073c5
 800734c:	080073c5 	.word	0x080073c5
 8007350:	080073c5 	.word	0x080073c5
 8007354:	080073c5 	.word	0x080073c5
 8007358:	080073c5 	.word	0x080073c5
 800735c:	080073c5 	.word	0x080073c5
 8007360:	080073c5 	.word	0x080073c5
 8007364:	080073c5 	.word	0x080073c5
 8007368:	080073c5 	.word	0x080073c5
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073c5 	.word	0x080073c5
 8007374:	080073c5 	.word	0x080073c5
 8007378:	080073c5 	.word	0x080073c5
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073c5 	.word	0x080073c5
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073c5 	.word	0x080073c5
 800738c:	080073c5 	.word	0x080073c5
 8007390:	080073c5 	.word	0x080073c5
 8007394:	080073c5 	.word	0x080073c5
 8007398:	080073c5 	.word	0x080073c5
 800739c:	080073c5 	.word	0x080073c5
 80073a0:	080073c5 	.word	0x080073c5
 80073a4:	080073c5 	.word	0x080073c5
 80073a8:	080073c5 	.word	0x080073c5
 80073ac:	080073c5 	.word	0x080073c5
 80073b0:	080073c5 	.word	0x080073c5
 80073b4:	080073c5 	.word	0x080073c5
 80073b8:	080073c5 	.word	0x080073c5
 80073bc:	080073c5 	.word	0x080073c5
 80073c0:	080073c5 	.word	0x080073c5
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 80073c4:	bf00      	nop
    }

    return (USBD_OK);
 80073c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	4805      	ldr	r0, [pc, #20]	; (80073f8 <CDC_Receive_FS+0x24>)
 80073e2:	f7fe fbc1 	bl	8005b68 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80073e6:	4804      	ldr	r0, [pc, #16]	; (80073f8 <CDC_Receive_FS+0x24>)
 80073e8:	f7fe fc22 	bl	8005c30 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 80073ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	200001cc 	.word	0x200001cc

080073fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800740c:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <CDC_Transmit_FS+0x48>)
 800740e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007412:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800741e:	2301      	movs	r3, #1
 8007420:	e00b      	b.n	800743a <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007422:	887b      	ldrh	r3, [r7, #2]
 8007424:	461a      	mov	r2, r3
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4806      	ldr	r0, [pc, #24]	; (8007444 <CDC_Transmit_FS+0x48>)
 800742a:	f7fe fb7b 	bl	8005b24 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800742e:	4805      	ldr	r0, [pc, #20]	; (8007444 <CDC_Transmit_FS+0x48>)
 8007430:	f7fe fbb8 	bl	8005ba4 <USBD_CDC_TransmitPacket>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	200001cc 	.word	0x200001cc

08007448 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800745a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800745e:	4618      	mov	r0, r3
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	6039      	str	r1, [r7, #0]
 8007476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2212      	movs	r2, #18
 800747c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800747e:	4b03      	ldr	r3, [pc, #12]	; (800748c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	200000c8 	.word	0x200000c8

08007490 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	6039      	str	r1, [r7, #0]
 800749a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2204      	movs	r2, #4
 80074a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80074a2:	4b03      	ldr	r3, [pc, #12]	; (80074b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	200000dc 	.word	0x200000dc

080074b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4603      	mov	r3, r0
 80074bc:	6039      	str	r1, [r7, #0]
 80074be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	4907      	ldr	r1, [pc, #28]	; (80074e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80074ca:	4808      	ldr	r0, [pc, #32]	; (80074ec <USBD_FS_ProductStrDescriptor+0x38>)
 80074cc:	f7ff fdf8 	bl	80070c0 <USBD_GetString>
 80074d0:	e004      	b.n	80074dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	4904      	ldr	r1, [pc, #16]	; (80074e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80074d6:	4805      	ldr	r0, [pc, #20]	; (80074ec <USBD_FS_ProductStrDescriptor+0x38>)
 80074d8:	f7ff fdf2 	bl	80070c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074dc:	4b02      	ldr	r3, [pc, #8]	; (80074e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000ca8 	.word	0x20000ca8
 80074ec:	08007f78 	.word	0x08007f78

080074f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	6039      	str	r1, [r7, #0]
 80074fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	4904      	ldr	r1, [pc, #16]	; (8007510 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007500:	4804      	ldr	r0, [pc, #16]	; (8007514 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007502:	f7ff fddd 	bl	80070c0 <USBD_GetString>
  return USBD_StrDesc;
 8007506:	4b02      	ldr	r3, [pc, #8]	; (8007510 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000ca8 	.word	0x20000ca8
 8007514:	08007f90 	.word	0x08007f90

08007518 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	6039      	str	r1, [r7, #0]
 8007522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	221a      	movs	r2, #26
 8007528:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800752a:	f000 f843 	bl	80075b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800752e:	4b02      	ldr	r3, [pc, #8]	; (8007538 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	200000e0 	.word	0x200000e0

0800753c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007548:	79fb      	ldrb	r3, [r7, #7]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d105      	bne.n	800755a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	4907      	ldr	r1, [pc, #28]	; (8007570 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007552:	4808      	ldr	r0, [pc, #32]	; (8007574 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007554:	f7ff fdb4 	bl	80070c0 <USBD_GetString>
 8007558:	e004      	b.n	8007564 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	4904      	ldr	r1, [pc, #16]	; (8007570 <USBD_FS_ConfigStrDescriptor+0x34>)
 800755e:	4805      	ldr	r0, [pc, #20]	; (8007574 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007560:	f7ff fdae 	bl	80070c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000ca8 	.word	0x20000ca8
 8007574:	08007fa4 	.word	0x08007fa4

08007578 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	6039      	str	r1, [r7, #0]
 8007582:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	4907      	ldr	r1, [pc, #28]	; (80075ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800758e:	4808      	ldr	r0, [pc, #32]	; (80075b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007590:	f7ff fd96 	bl	80070c0 <USBD_GetString>
 8007594:	e004      	b.n	80075a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	4904      	ldr	r1, [pc, #16]	; (80075ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800759a:	4805      	ldr	r0, [pc, #20]	; (80075b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800759c:	f7ff fd90 	bl	80070c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075a0:	4b02      	ldr	r3, [pc, #8]	; (80075ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000ca8 	.word	0x20000ca8
 80075b0:	08007fb0 	.word	0x08007fb0

080075b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80075ba:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <Get_SerialNum+0x44>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <Get_SerialNum+0x48>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80075c6:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <Get_SerialNum+0x4c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4413      	add	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d009      	beq.n	80075ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80075da:	2208      	movs	r2, #8
 80075dc:	4909      	ldr	r1, [pc, #36]	; (8007604 <Get_SerialNum+0x50>)
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f814 	bl	800760c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80075e4:	2204      	movs	r2, #4
 80075e6:	4908      	ldr	r1, [pc, #32]	; (8007608 <Get_SerialNum+0x54>)
 80075e8:	68b8      	ldr	r0, [r7, #8]
 80075ea:	f000 f80f 	bl	800760c <IntToUnicode>
  }
}
 80075ee:	bf00      	nop
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	1fff7a10 	.word	0x1fff7a10
 80075fc:	1fff7a14 	.word	0x1fff7a14
 8007600:	1fff7a18 	.word	0x1fff7a18
 8007604:	200000e2 	.word	0x200000e2
 8007608:	200000f2 	.word	0x200000f2

0800760c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800761e:	2300      	movs	r3, #0
 8007620:	75fb      	strb	r3, [r7, #23]
 8007622:	e027      	b.n	8007674 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	0f1b      	lsrs	r3, r3, #28
 8007628:	2b09      	cmp	r3, #9
 800762a:	d80b      	bhi.n	8007644 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	0f1b      	lsrs	r3, r3, #28
 8007630:	b2da      	uxtb	r2, r3
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	4619      	mov	r1, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	440b      	add	r3, r1
 800763c:	3230      	adds	r2, #48	; 0x30
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	e00a      	b.n	800765a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	0f1b      	lsrs	r3, r3, #28
 8007648:	b2da      	uxtb	r2, r3
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	4619      	mov	r1, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	440b      	add	r3, r1
 8007654:	3237      	adds	r2, #55	; 0x37
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	3301      	adds	r3, #1
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	4413      	add	r3, r2
 800766a:	2200      	movs	r2, #0
 800766c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	3301      	adds	r3, #1
 8007672:	75fb      	strb	r3, [r7, #23]
 8007674:	7dfa      	ldrb	r2, [r7, #23]
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	429a      	cmp	r2, r3
 800767a:	d3d3      	bcc.n	8007624 <IntToUnicode+0x18>
  }
}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
	...

0800768c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	; 0x28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007694:	f107 0314 	add.w	r3, r7, #20
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	609a      	str	r2, [r3, #8]
 80076a0:	60da      	str	r2, [r3, #12]
 80076a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076ac:	d13a      	bne.n	8007724 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	4b1e      	ldr	r3, [pc, #120]	; (800772c <HAL_PCD_MspInit+0xa0>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	4a1d      	ldr	r2, [pc, #116]	; (800772c <HAL_PCD_MspInit+0xa0>)
 80076b8:	f043 0301 	orr.w	r3, r3, #1
 80076bc:	6313      	str	r3, [r2, #48]	; 0x30
 80076be:	4b1b      	ldr	r3, [pc, #108]	; (800772c <HAL_PCD_MspInit+0xa0>)
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80076ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80076ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076d0:	2302      	movs	r3, #2
 80076d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076d8:	2303      	movs	r3, #3
 80076da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80076dc:	230a      	movs	r3, #10
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076e0:	f107 0314 	add.w	r3, r7, #20
 80076e4:	4619      	mov	r1, r3
 80076e6:	4812      	ldr	r0, [pc, #72]	; (8007730 <HAL_PCD_MspInit+0xa4>)
 80076e8:	f7f9 fb80 	bl	8000dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <HAL_PCD_MspInit+0xa0>)
 80076ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f0:	4a0e      	ldr	r2, [pc, #56]	; (800772c <HAL_PCD_MspInit+0xa0>)
 80076f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f6:	6353      	str	r3, [r2, #52]	; 0x34
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	4b0b      	ldr	r3, [pc, #44]	; (800772c <HAL_PCD_MspInit+0xa0>)
 80076fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007700:	4a0a      	ldr	r2, [pc, #40]	; (800772c <HAL_PCD_MspInit+0xa0>)
 8007702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007706:	6453      	str	r3, [r2, #68]	; 0x44
 8007708:	4b08      	ldr	r3, [pc, #32]	; (800772c <HAL_PCD_MspInit+0xa0>)
 800770a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007714:	2200      	movs	r2, #0
 8007716:	2100      	movs	r1, #0
 8007718:	2043      	movs	r0, #67	; 0x43
 800771a:	f7f9 fb30 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800771e:	2043      	movs	r0, #67	; 0x43
 8007720:	f7f9 fb49 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007724:	bf00      	nop
 8007726:	3728      	adds	r7, #40	; 0x28
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	40023800 	.word	0x40023800
 8007730:	40020000 	.word	0x40020000

08007734 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f7fe fb59 	bl	8005e02 <USBD_LL_SetupStage>
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800776a:	78fa      	ldrb	r2, [r7, #3]
 800776c:	6879      	ldr	r1, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	4619      	mov	r1, r3
 8007782:	f7fe fb93 	bl	8005eac <USBD_LL_DataOutStage>
}
 8007786:	bf00      	nop
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80077a0:	78fa      	ldrb	r2, [r7, #3]
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	4613      	mov	r3, r2
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	334c      	adds	r3, #76	; 0x4c
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	4619      	mov	r1, r3
 80077b6:	f7fe fc2c 	bl	8006012 <USBD_LL_DataInStage>
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fd60 	bl	8006296 <USBD_LL_SOF>
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077e6:	2301      	movs	r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d001      	beq.n	80077f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80077f2:	f7f8 ff43 	bl	800067c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077fc:	7bfa      	ldrb	r2, [r7, #15]
 80077fe:	4611      	mov	r1, r2
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe fd0a 	bl	800621a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe fcb2 	bl	8006176 <USBD_LL_Reset>
}
 8007812:	bf00      	nop
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fd05 	bl	800623a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007842:	f043 0301 	orr.w	r3, r3, #1
 8007846:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d005      	beq.n	800785c <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007850:	4b04      	ldr	r3, [pc, #16]	; (8007864 <HAL_PCD_SuspendCallback+0x48>)
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	4a03      	ldr	r2, [pc, #12]	; (8007864 <HAL_PCD_SuspendCallback+0x48>)
 8007856:	f043 0306 	orr.w	r3, r3, #6
 800785a:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800785c:	bf00      	nop
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	e000ed00 	.word	0xe000ed00

08007868 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe fcf5 	bl	8006266 <USBD_LL_Resume>
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007896:	78fa      	ldrb	r2, [r7, #3]
 8007898:	4611      	mov	r1, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fd4d 	bl	800633a <USBD_LL_IsoOUTIncomplete>
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	4611      	mov	r1, r2
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fd09 	bl	80062d6 <USBD_LL_IsoINIncomplete>
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fd5f 	bl	800639e <USBD_LL_DevConnected>
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe fd5c 	bl	80063b4 <USBD_LL_DevDisconnected>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d13c      	bne.n	800798e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007914:	4a20      	ldr	r2, [pc, #128]	; (8007998 <USBD_LL_Init+0x94>)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <USBD_LL_Init+0x94>)
 8007920:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007924:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <USBD_LL_Init+0x94>)
 8007926:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800792a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <USBD_LL_Init+0x94>)
 800792e:	2204      	movs	r2, #4
 8007930:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007932:	4b19      	ldr	r3, [pc, #100]	; (8007998 <USBD_LL_Init+0x94>)
 8007934:	2202      	movs	r2, #2
 8007936:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007938:	4b17      	ldr	r3, [pc, #92]	; (8007998 <USBD_LL_Init+0x94>)
 800793a:	2200      	movs	r2, #0
 800793c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800793e:	4b16      	ldr	r3, [pc, #88]	; (8007998 <USBD_LL_Init+0x94>)
 8007940:	2202      	movs	r2, #2
 8007942:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007944:	4b14      	ldr	r3, [pc, #80]	; (8007998 <USBD_LL_Init+0x94>)
 8007946:	2200      	movs	r2, #0
 8007948:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800794a:	4b13      	ldr	r3, [pc, #76]	; (8007998 <USBD_LL_Init+0x94>)
 800794c:	2200      	movs	r2, #0
 800794e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <USBD_LL_Init+0x94>)
 8007952:	2200      	movs	r2, #0
 8007954:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007956:	4b10      	ldr	r3, [pc, #64]	; (8007998 <USBD_LL_Init+0x94>)
 8007958:	2200      	movs	r2, #0
 800795a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800795c:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <USBD_LL_Init+0x94>)
 800795e:	2200      	movs	r2, #0
 8007960:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007962:	480d      	ldr	r0, [pc, #52]	; (8007998 <USBD_LL_Init+0x94>)
 8007964:	f7fa f9b4 	bl	8001cd0 <HAL_PCD_Init>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800796e:	f7f8 fe85 	bl	800067c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007972:	2180      	movs	r1, #128	; 0x80
 8007974:	4808      	ldr	r0, [pc, #32]	; (8007998 <USBD_LL_Init+0x94>)
 8007976:	f7fb fc0c 	bl	8003192 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800797a:	2240      	movs	r2, #64	; 0x40
 800797c:	2100      	movs	r1, #0
 800797e:	4806      	ldr	r0, [pc, #24]	; (8007998 <USBD_LL_Init+0x94>)
 8007980:	f7fb fbc0 	bl	8003104 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007984:	2280      	movs	r2, #128	; 0x80
 8007986:	2101      	movs	r1, #1
 8007988:	4803      	ldr	r0, [pc, #12]	; (8007998 <USBD_LL_Init+0x94>)
 800798a:	f7fb fbbb 	bl	8003104 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	20000ea8 	.word	0x20000ea8

0800799c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fa faa9 	bl	8001f0a <HAL_PCD_Start>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f942 	bl	8007c48 <USBD_Get_USB_Status>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	4608      	mov	r0, r1
 80079dc:	4611      	mov	r1, r2
 80079de:	461a      	mov	r2, r3
 80079e0:	4603      	mov	r3, r0
 80079e2:	70fb      	strb	r3, [r7, #3]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70bb      	strb	r3, [r7, #2]
 80079e8:	4613      	mov	r3, r2
 80079ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80079fa:	78bb      	ldrb	r3, [r7, #2]
 80079fc:	883a      	ldrh	r2, [r7, #0]
 80079fe:	78f9      	ldrb	r1, [r7, #3]
 8007a00:	f7fa ff7a 	bl	80028f8 <HAL_PCD_EP_Open>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f91c 	bl	8007c48 <USBD_Get_USB_Status>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fa ffc3 	bl	80029c8 <HAL_PCD_EP_Close>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 f8fd 	bl	8007c48 <USBD_Get_USB_Status>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fb f89b 	bl	8002bb6 <HAL_PCD_EP_SetStall>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f8de 	bl	8007c48 <USBD_Get_USB_Status>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fb f8e0 	bl	8002c7e <HAL_PCD_EP_ClrStall>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 f8bf 	bl	8007c48 <USBD_Get_USB_Status>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007aea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da0b      	bge.n	8007b0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	4613      	mov	r3, r2
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	440b      	add	r3, r1
 8007b06:	333e      	adds	r3, #62	; 0x3e
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	e00b      	b.n	8007b24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b12:	68f9      	ldr	r1, [r7, #12]
 8007b14:	4613      	mov	r3, r2
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	4413      	add	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	440b      	add	r3, r1
 8007b1e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007b22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b4a:	78fa      	ldrb	r2, [r7, #3]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fa fead 	bl	80028ae <HAL_PCD_SetAddress>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 f874 	bl	8007c48 <USBD_Get_USB_Status>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b086      	sub	sp, #24
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b8c:	7af9      	ldrb	r1, [r7, #11]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	f7fa ffc6 	bl	8002b22 <HAL_PCD_EP_Transmit>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 f853 	bl	8007c48 <USBD_Get_USB_Status>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ba6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	607a      	str	r2, [r7, #4]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007bce:	7af9      	ldrb	r1, [r7, #11]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	f7fa ff42 	bl	8002a5c <HAL_PCD_EP_Receive>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f832 	bl	8007c48 <USBD_Get_USB_Status>
 8007be4:	4603      	mov	r3, r0
 8007be6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007be8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c04:	78fa      	ldrb	r2, [r7, #3]
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fa ff72 	bl	8002af2 <HAL_PCD_EP_GetRxCount>
 8007c0e:	4603      	mov	r3, r0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c20:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <USBD_static_malloc+0x18>)
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	200013b4 	.word	0x200013b4

08007c34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]

}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d817      	bhi.n	8007c8c <USBD_Get_USB_Status+0x44>
 8007c5c:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <USBD_Get_USB_Status+0x1c>)
 8007c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c62:	bf00      	nop
 8007c64:	08007c75 	.word	0x08007c75
 8007c68:	08007c7b 	.word	0x08007c7b
 8007c6c:	08007c81 	.word	0x08007c81
 8007c70:	08007c87 	.word	0x08007c87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
    break;
 8007c78:	e00b      	b.n	8007c92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c7e:	e008      	b.n	8007c92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c80:	2301      	movs	r3, #1
 8007c82:	73fb      	strb	r3, [r7, #15]
    break;
 8007c84:	e005      	b.n	8007c92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c86:	2303      	movs	r3, #3
 8007c88:	73fb      	strb	r3, [r7, #15]
    break;
 8007c8a:	e002      	b.n	8007c92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c90:	bf00      	nop
  }
  return usb_status;
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <malloc>:
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <malloc+0xc>)
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	f000 b82b 	b.w	8007d00 <_malloc_r>
 8007caa:	bf00      	nop
 8007cac:	20000148 	.word	0x20000148

08007cb0 <free>:
 8007cb0:	4b02      	ldr	r3, [pc, #8]	; (8007cbc <free+0xc>)
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	f000 b8f3 	b.w	8007ea0 <_free_r>
 8007cba:	bf00      	nop
 8007cbc:	20000148 	.word	0x20000148

08007cc0 <sbrk_aligned>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	4e0e      	ldr	r6, [pc, #56]	; (8007cfc <sbrk_aligned+0x3c>)
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	6831      	ldr	r1, [r6, #0]
 8007cc8:	4605      	mov	r5, r0
 8007cca:	b911      	cbnz	r1, 8007cd2 <sbrk_aligned+0x12>
 8007ccc:	f000 f8ac 	bl	8007e28 <_sbrk_r>
 8007cd0:	6030      	str	r0, [r6, #0]
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f000 f8a7 	bl	8007e28 <_sbrk_r>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	d00a      	beq.n	8007cf4 <sbrk_aligned+0x34>
 8007cde:	1cc4      	adds	r4, r0, #3
 8007ce0:	f024 0403 	bic.w	r4, r4, #3
 8007ce4:	42a0      	cmp	r0, r4
 8007ce6:	d007      	beq.n	8007cf8 <sbrk_aligned+0x38>
 8007ce8:	1a21      	subs	r1, r4, r0
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 f89c 	bl	8007e28 <_sbrk_r>
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d101      	bne.n	8007cf8 <sbrk_aligned+0x38>
 8007cf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	200015d8 	.word	0x200015d8

08007d00 <_malloc_r>:
 8007d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d04:	1ccd      	adds	r5, r1, #3
 8007d06:	f025 0503 	bic.w	r5, r5, #3
 8007d0a:	3508      	adds	r5, #8
 8007d0c:	2d0c      	cmp	r5, #12
 8007d0e:	bf38      	it	cc
 8007d10:	250c      	movcc	r5, #12
 8007d12:	2d00      	cmp	r5, #0
 8007d14:	4607      	mov	r7, r0
 8007d16:	db01      	blt.n	8007d1c <_malloc_r+0x1c>
 8007d18:	42a9      	cmp	r1, r5
 8007d1a:	d905      	bls.n	8007d28 <_malloc_r+0x28>
 8007d1c:	230c      	movs	r3, #12
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	2600      	movs	r6, #0
 8007d22:	4630      	mov	r0, r6
 8007d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007dfc <_malloc_r+0xfc>
 8007d2c:	f000 f868 	bl	8007e00 <__malloc_lock>
 8007d30:	f8d8 3000 	ldr.w	r3, [r8]
 8007d34:	461c      	mov	r4, r3
 8007d36:	bb5c      	cbnz	r4, 8007d90 <_malloc_r+0x90>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f7ff ffc0 	bl	8007cc0 <sbrk_aligned>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	4604      	mov	r4, r0
 8007d44:	d155      	bne.n	8007df2 <_malloc_r+0xf2>
 8007d46:	f8d8 4000 	ldr.w	r4, [r8]
 8007d4a:	4626      	mov	r6, r4
 8007d4c:	2e00      	cmp	r6, #0
 8007d4e:	d145      	bne.n	8007ddc <_malloc_r+0xdc>
 8007d50:	2c00      	cmp	r4, #0
 8007d52:	d048      	beq.n	8007de6 <_malloc_r+0xe6>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	4631      	mov	r1, r6
 8007d58:	4638      	mov	r0, r7
 8007d5a:	eb04 0903 	add.w	r9, r4, r3
 8007d5e:	f000 f863 	bl	8007e28 <_sbrk_r>
 8007d62:	4581      	cmp	r9, r0
 8007d64:	d13f      	bne.n	8007de6 <_malloc_r+0xe6>
 8007d66:	6821      	ldr	r1, [r4, #0]
 8007d68:	1a6d      	subs	r5, r5, r1
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	f7ff ffa7 	bl	8007cc0 <sbrk_aligned>
 8007d72:	3001      	adds	r0, #1
 8007d74:	d037      	beq.n	8007de6 <_malloc_r+0xe6>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	442b      	add	r3, r5
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d038      	beq.n	8007df6 <_malloc_r+0xf6>
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	42a2      	cmp	r2, r4
 8007d88:	d12b      	bne.n	8007de2 <_malloc_r+0xe2>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	605a      	str	r2, [r3, #4]
 8007d8e:	e00f      	b.n	8007db0 <_malloc_r+0xb0>
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	1b52      	subs	r2, r2, r5
 8007d94:	d41f      	bmi.n	8007dd6 <_malloc_r+0xd6>
 8007d96:	2a0b      	cmp	r2, #11
 8007d98:	d917      	bls.n	8007dca <_malloc_r+0xca>
 8007d9a:	1961      	adds	r1, r4, r5
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	6025      	str	r5, [r4, #0]
 8007da0:	bf18      	it	ne
 8007da2:	6059      	strne	r1, [r3, #4]
 8007da4:	6863      	ldr	r3, [r4, #4]
 8007da6:	bf08      	it	eq
 8007da8:	f8c8 1000 	streq.w	r1, [r8]
 8007dac:	5162      	str	r2, [r4, r5]
 8007dae:	604b      	str	r3, [r1, #4]
 8007db0:	4638      	mov	r0, r7
 8007db2:	f104 060b 	add.w	r6, r4, #11
 8007db6:	f000 f829 	bl	8007e0c <__malloc_unlock>
 8007dba:	f026 0607 	bic.w	r6, r6, #7
 8007dbe:	1d23      	adds	r3, r4, #4
 8007dc0:	1af2      	subs	r2, r6, r3
 8007dc2:	d0ae      	beq.n	8007d22 <_malloc_r+0x22>
 8007dc4:	1b9b      	subs	r3, r3, r6
 8007dc6:	50a3      	str	r3, [r4, r2]
 8007dc8:	e7ab      	b.n	8007d22 <_malloc_r+0x22>
 8007dca:	42a3      	cmp	r3, r4
 8007dcc:	6862      	ldr	r2, [r4, #4]
 8007dce:	d1dd      	bne.n	8007d8c <_malloc_r+0x8c>
 8007dd0:	f8c8 2000 	str.w	r2, [r8]
 8007dd4:	e7ec      	b.n	8007db0 <_malloc_r+0xb0>
 8007dd6:	4623      	mov	r3, r4
 8007dd8:	6864      	ldr	r4, [r4, #4]
 8007dda:	e7ac      	b.n	8007d36 <_malloc_r+0x36>
 8007ddc:	4634      	mov	r4, r6
 8007dde:	6876      	ldr	r6, [r6, #4]
 8007de0:	e7b4      	b.n	8007d4c <_malloc_r+0x4c>
 8007de2:	4613      	mov	r3, r2
 8007de4:	e7cc      	b.n	8007d80 <_malloc_r+0x80>
 8007de6:	230c      	movs	r3, #12
 8007de8:	603b      	str	r3, [r7, #0]
 8007dea:	4638      	mov	r0, r7
 8007dec:	f000 f80e 	bl	8007e0c <__malloc_unlock>
 8007df0:	e797      	b.n	8007d22 <_malloc_r+0x22>
 8007df2:	6025      	str	r5, [r4, #0]
 8007df4:	e7dc      	b.n	8007db0 <_malloc_r+0xb0>
 8007df6:	605b      	str	r3, [r3, #4]
 8007df8:	deff      	udf	#255	; 0xff
 8007dfa:	bf00      	nop
 8007dfc:	200015d4 	.word	0x200015d4

08007e00 <__malloc_lock>:
 8007e00:	4801      	ldr	r0, [pc, #4]	; (8007e08 <__malloc_lock+0x8>)
 8007e02:	f000 b84b 	b.w	8007e9c <__retarget_lock_acquire_recursive>
 8007e06:	bf00      	nop
 8007e08:	20001718 	.word	0x20001718

08007e0c <__malloc_unlock>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	; (8007e14 <__malloc_unlock+0x8>)
 8007e0e:	f000 b846 	b.w	8007e9e <__retarget_lock_release_recursive>
 8007e12:	bf00      	nop
 8007e14:	20001718 	.word	0x20001718

08007e18 <memset>:
 8007e18:	4402      	add	r2, r0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d100      	bne.n	8007e22 <memset+0xa>
 8007e20:	4770      	bx	lr
 8007e22:	f803 1b01 	strb.w	r1, [r3], #1
 8007e26:	e7f9      	b.n	8007e1c <memset+0x4>

08007e28 <_sbrk_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4d06      	ldr	r5, [pc, #24]	; (8007e44 <_sbrk_r+0x1c>)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	602b      	str	r3, [r5, #0]
 8007e34:	f7f8 fcce 	bl	80007d4 <_sbrk>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_sbrk_r+0x1a>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_sbrk_r+0x1a>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20001714 	.word	0x20001714

08007e48 <__errno>:
 8007e48:	4b01      	ldr	r3, [pc, #4]	; (8007e50 <__errno+0x8>)
 8007e4a:	6818      	ldr	r0, [r3, #0]
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	20000148 	.word	0x20000148

08007e54 <__libc_init_array>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	4d0d      	ldr	r5, [pc, #52]	; (8007e8c <__libc_init_array+0x38>)
 8007e58:	4c0d      	ldr	r4, [pc, #52]	; (8007e90 <__libc_init_array+0x3c>)
 8007e5a:	1b64      	subs	r4, r4, r5
 8007e5c:	10a4      	asrs	r4, r4, #2
 8007e5e:	2600      	movs	r6, #0
 8007e60:	42a6      	cmp	r6, r4
 8007e62:	d109      	bne.n	8007e78 <__libc_init_array+0x24>
 8007e64:	4d0b      	ldr	r5, [pc, #44]	; (8007e94 <__libc_init_array+0x40>)
 8007e66:	4c0c      	ldr	r4, [pc, #48]	; (8007e98 <__libc_init_array+0x44>)
 8007e68:	f000 f866 	bl	8007f38 <_init>
 8007e6c:	1b64      	subs	r4, r4, r5
 8007e6e:	10a4      	asrs	r4, r4, #2
 8007e70:	2600      	movs	r6, #0
 8007e72:	42a6      	cmp	r6, r4
 8007e74:	d105      	bne.n	8007e82 <__libc_init_array+0x2e>
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7c:	4798      	blx	r3
 8007e7e:	3601      	adds	r6, #1
 8007e80:	e7ee      	b.n	8007e60 <__libc_init_array+0xc>
 8007e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e86:	4798      	blx	r3
 8007e88:	3601      	adds	r6, #1
 8007e8a:	e7f2      	b.n	8007e72 <__libc_init_array+0x1e>
 8007e8c:	08007fe0 	.word	0x08007fe0
 8007e90:	08007fe0 	.word	0x08007fe0
 8007e94:	08007fe0 	.word	0x08007fe0
 8007e98:	08007fe4 	.word	0x08007fe4

08007e9c <__retarget_lock_acquire_recursive>:
 8007e9c:	4770      	bx	lr

08007e9e <__retarget_lock_release_recursive>:
 8007e9e:	4770      	bx	lr

08007ea0 <_free_r>:
 8007ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	d044      	beq.n	8007f30 <_free_r+0x90>
 8007ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eaa:	9001      	str	r0, [sp, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f1a1 0404 	sub.w	r4, r1, #4
 8007eb2:	bfb8      	it	lt
 8007eb4:	18e4      	addlt	r4, r4, r3
 8007eb6:	f7ff ffa3 	bl	8007e00 <__malloc_lock>
 8007eba:	4a1e      	ldr	r2, [pc, #120]	; (8007f34 <_free_r+0x94>)
 8007ebc:	9801      	ldr	r0, [sp, #4]
 8007ebe:	6813      	ldr	r3, [r2, #0]
 8007ec0:	b933      	cbnz	r3, 8007ed0 <_free_r+0x30>
 8007ec2:	6063      	str	r3, [r4, #4]
 8007ec4:	6014      	str	r4, [r2, #0]
 8007ec6:	b003      	add	sp, #12
 8007ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ecc:	f7ff bf9e 	b.w	8007e0c <__malloc_unlock>
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	d908      	bls.n	8007ee6 <_free_r+0x46>
 8007ed4:	6825      	ldr	r5, [r4, #0]
 8007ed6:	1961      	adds	r1, r4, r5
 8007ed8:	428b      	cmp	r3, r1
 8007eda:	bf01      	itttt	eq
 8007edc:	6819      	ldreq	r1, [r3, #0]
 8007ede:	685b      	ldreq	r3, [r3, #4]
 8007ee0:	1949      	addeq	r1, r1, r5
 8007ee2:	6021      	streq	r1, [r4, #0]
 8007ee4:	e7ed      	b.n	8007ec2 <_free_r+0x22>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b10b      	cbz	r3, 8007ef0 <_free_r+0x50>
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d9fa      	bls.n	8007ee6 <_free_r+0x46>
 8007ef0:	6811      	ldr	r1, [r2, #0]
 8007ef2:	1855      	adds	r5, r2, r1
 8007ef4:	42a5      	cmp	r5, r4
 8007ef6:	d10b      	bne.n	8007f10 <_free_r+0x70>
 8007ef8:	6824      	ldr	r4, [r4, #0]
 8007efa:	4421      	add	r1, r4
 8007efc:	1854      	adds	r4, r2, r1
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6011      	str	r1, [r2, #0]
 8007f02:	d1e0      	bne.n	8007ec6 <_free_r+0x26>
 8007f04:	681c      	ldr	r4, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	6053      	str	r3, [r2, #4]
 8007f0a:	440c      	add	r4, r1
 8007f0c:	6014      	str	r4, [r2, #0]
 8007f0e:	e7da      	b.n	8007ec6 <_free_r+0x26>
 8007f10:	d902      	bls.n	8007f18 <_free_r+0x78>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	e7d6      	b.n	8007ec6 <_free_r+0x26>
 8007f18:	6825      	ldr	r5, [r4, #0]
 8007f1a:	1961      	adds	r1, r4, r5
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	bf04      	itt	eq
 8007f20:	6819      	ldreq	r1, [r3, #0]
 8007f22:	685b      	ldreq	r3, [r3, #4]
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	bf04      	itt	eq
 8007f28:	1949      	addeq	r1, r1, r5
 8007f2a:	6021      	streq	r1, [r4, #0]
 8007f2c:	6054      	str	r4, [r2, #4]
 8007f2e:	e7ca      	b.n	8007ec6 <_free_r+0x26>
 8007f30:	b003      	add	sp, #12
 8007f32:	bd30      	pop	{r4, r5, pc}
 8007f34:	200015d4 	.word	0x200015d4

08007f38 <_init>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr

08007f44 <_fini>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr
