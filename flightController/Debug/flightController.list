
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a19c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800a33c  0800a33c  0001a33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a454  0800a454  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a454  0800a454  0001a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a45c  0800a45c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a45c  0800a45c  0001a45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055dc  20000160  0800a5c4  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000573c  0800a5c4  0002573c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c80  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004469  00000000  00000000  00037e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0003c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9e  00000000  00000000  0003d620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa39  00000000  00000000  0003e4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193e1  00000000  00000000  00058ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091c2e  00000000  00000000  000722d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052e4  00000000  00000000  00103f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001091ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a324 	.word	0x0800a324

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800a324 	.word	0x0800a324

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <FlightController_HeartbeatLight>:
/* Tasks Handle */
static TaskHandle_t FlightController_Init_Handle = NULL;
static TaskHandle_t FlightController_HeartbeatLight_Handle = NULL;

/* --- Private function implementation --------------------------------------------------------- */
void FlightController_HeartbeatLight() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0

	uint8_t ledState = GPIO_PIN_RESET;
 8000592:	2300      	movs	r3, #0
 8000594:	71fb      	strb	r3, [r7, #7]
	const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_DELAY);
 8000596:	23c8      	movs	r3, #200	; 0xc8
 8000598:	603b      	str	r3, [r7, #0]

	while(1) {

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	461a      	mov	r2, r3
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <FlightController_HeartbeatLight+0x34>)
 80005a4:	f001 f9c0 	bl	8001928 <HAL_GPIO_WritePin>

		if (ledState == GPIO_PIN_RESET) {
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d102      	bne.n	80005b4 <FlightController_HeartbeatLight+0x28>

			ledState = GPIO_PIN_SET;
 80005ae:	2301      	movs	r3, #1
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e001      	b.n	80005b8 <FlightController_HeartbeatLight+0x2c>
		} else {

			ledState = GPIO_PIN_RESET;
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
		}

		vTaskDelay(xDelay);
 80005b8:	6838      	ldr	r0, [r7, #0]
 80005ba:	f007 fd4d 	bl	8008058 <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 80005be:	e7ec      	b.n	800059a <FlightController_HeartbeatLight+0xe>
 80005c0:	40020800 	.word	0x40020800

080005c4 <FlightController_Init>:
	}
}

void FlightController_Init() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0

	/* Radio Control Demo */
	static IBUS_HandleTypeDef_t * rc_controller;
	uint8_t channel = CHANNEL_1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	77fb      	strb	r3, [r7, #31]
	static uint16_t channelValue;
	uint8_t str[20];

	rc_controller = FSA8S_Init(&huart2);
 80005ce:	4814      	ldr	r0, [pc, #80]	; (8000620 <FlightController_Init+0x5c>)
 80005d0:	f000 fc04 	bl	8000ddc <FSA8S_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <FlightController_Init+0x60>)
 80005d8:	6013      	str	r3, [r2, #0]

	const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80005da:	2332      	movs	r3, #50	; 0x32
 80005dc:	61bb      	str	r3, [r7, #24]

	while(1) {

		//LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);

        channelValue = FSA8S_ReadChannel(rc_controller, channel);
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <FlightController_Init+0x60>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	7ffa      	ldrb	r2, [r7, #31]
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fc52 	bl	8000e90 <FSA8S_ReadChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <FlightController_Init+0x64>)
 80005f2:	801a      	strh	r2, [r3, #0]
        sprintf((char *)str, (const char *)"Channel %d: %d\r\n", channel, channelValue);
 80005f4:	7ffa      	ldrb	r2, [r7, #31]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <FlightController_Init+0x64>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	1d38      	adds	r0, r7, #4
 80005fc:	490b      	ldr	r1, [pc, #44]	; (800062c <FlightController_Init+0x68>)
 80005fe:	f009 fa99 	bl	8009b34 <siprintf>
        CDC_Transmit_FS(str, strlen((const char *)str));
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fdeb 	bl	80001e0 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f008 fd80 	bl	8009118 <CDC_Transmit_FS>

		vTaskDelay(xDelay);
 8000618:	69b8      	ldr	r0, [r7, #24]
 800061a:	f007 fd1d 	bl	8008058 <vTaskDelay>
        channelValue = FSA8S_ReadChannel(rc_controller, channel);
 800061e:	e7de      	b.n	80005de <FlightController_Init+0x1a>
 8000620:	200003e0 	.word	0x200003e0
 8000624:	20000184 	.word	0x20000184
 8000628:	20000188 	.word	0x20000188
 800062c:	0800a33c 	.word	0x0800a33c

08000630 <FreeRTOS_CreateTasks>:
	}
}


/* --- Public function implementation ---------------------------------------------------------- */
void FreeRTOS_CreateTasks() {
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af02      	add	r7, sp, #8

	BaseType_t ret;

	/* Task 1: FlightController_HeartbeatLight */
	ret = xTaskCreate(FlightController_HeartbeatLight,
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <FreeRTOS_CreateTasks+0x88>)
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2301      	movs	r3, #1
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000644:	491d      	ldr	r1, [pc, #116]	; (80006bc <FreeRTOS_CreateTasks+0x8c>)
 8000646:	481e      	ldr	r0, [pc, #120]	; (80006c0 <FreeRTOS_CreateTasks+0x90>)
 8000648:	f007 fb40 	bl	8007ccc <xTaskCreate>
 800064c:	60f8      	str	r0, [r7, #12]
					  NULL,
					  (tskIDLE_PRIORITY + 1UL),
					  &FlightController_HeartbeatLight_Handle);

	/* Check the task was created successfully. */
	configASSERT(ret == pdPASS);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00a      	beq.n	800066a <FreeRTOS_CreateTasks+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000666:	bf00      	nop
 8000668:	e7fe      	b.n	8000668 <FreeRTOS_CreateTasks+0x38>

	/* Task 2: FlightController_Init */
	ret = xTaskCreate(FlightController_Init,
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <FreeRTOS_CreateTasks+0x94>)
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2300      	movs	r3, #0
 8000674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000678:	4913      	ldr	r1, [pc, #76]	; (80006c8 <FreeRTOS_CreateTasks+0x98>)
 800067a:	4814      	ldr	r0, [pc, #80]	; (80006cc <FreeRTOS_CreateTasks+0x9c>)
 800067c:	f007 fb26 	bl	8007ccc <xTaskCreate>
 8000680:	60f8      	str	r0, [r7, #12]
					  NULL,
					  (tskIDLE_PRIORITY + 1UL),
					  &FlightController_Init_Handle);

	/* Check the task was created successfully. */
	configASSERT(ret == pdPASS);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d00a      	beq.n	800069e <FreeRTOS_CreateTasks+0x6e>
	__asm volatile
 8000688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068c:	f383 8811 	msr	BASEPRI, r3
 8000690:	f3bf 8f6f 	isb	sy
 8000694:	f3bf 8f4f 	dsb	sy
 8000698:	607b      	str	r3, [r7, #4]
}
 800069a:	bf00      	nop
 800069c:	e7fe      	b.n	800069c <FreeRTOS_CreateTasks+0x6c>

	if(FlightController_Init_Handle == NULL) {
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <FreeRTOS_CreateTasks+0x94>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d104      	bne.n	80006b0 <FreeRTOS_CreateTasks+0x80>
		vTaskDelete(FlightController_Init_Handle);
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <FreeRTOS_CreateTasks+0x94>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 fc44 	bl	8007f38 <vTaskDelete>
	}
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000180 	.word	0x20000180
 80006bc:	0800a350 	.word	0x0800a350
 80006c0:	0800058d 	.word	0x0800058d
 80006c4:	2000017c 	.word	0x2000017c
 80006c8:	0800a370 	.word	0x0800a370
 80006cc:	080005c5 	.word	0x080005c5

080006d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <vApplicationGetIdleTaskMemory+0x2c>)
 80006e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <vApplicationGetIdleTaskMemory+0x30>)
 80006e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	2000018c 	.word	0x2000018c
 8000700:	200001e0 	.word	0x200001e0

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b5b0      	push	{r4, r5, r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070a:	f000 fbfb 	bl	8000f04 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 f821 	bl	8000754 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f000 f8cd 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000716:	f000 f8b1 	bl	800087c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800071a:	f000 f885 	bl	8000828 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	FreeRTOS_CreateTasks();
 800071e:	f7ff ff87 	bl	8000630 <FreeRTOS_CreateTasks>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <main+0x48>)
 8000724:	1d3c      	adds	r4, r7, #4
 8000726:	461d      	mov	r5, r3
 8000728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f007 f956 	bl	80079ea <osThreadCreate>
 800073e:	4603      	mov	r3, r0
 8000740:	4a03      	ldr	r2, [pc, #12]	; (8000750 <main+0x4c>)
 8000742:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000744:	f007 f94a 	bl	80079dc <osKernelStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//flightController_App();
	while(1) {
 8000748:	e7fe      	b.n	8000748 <main+0x44>
 800074a:	bf00      	nop
 800074c:	0800a394 	.word	0x0800a394
 8000750:	20000484 	.word	0x20000484

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	; 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f009 fa06 	bl	8009b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a27      	ldr	r2, [pc, #156]	; (8000820 <SystemClock_Config+0xcc>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a0:	4a20      	ldr	r2, [pc, #128]	; (8000824 <SystemClock_Config+0xd0>)
 80007a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007c8:	2319      	movs	r3, #25
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007cc:	2390      	movs	r3, #144	; 0x90
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007d4:	2303      	movs	r3, #3
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fb39 	bl	8002e54 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007e8:	f000 f8be 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2102      	movs	r1, #2
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fd9b 	bl	8003344 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000814:	f000 f8a8 	bl	8000968 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3750      	adds	r7, #80	; 0x50
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_USART2_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800084e:	2204      	movs	r2, #4
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000860:	f002 ff50 	bl	8003704 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086a:	f000 f87d 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200003e0 	.word	0x200003e0
 8000878:	40004400 	.word	0x40004400

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_DMA_Init+0x30>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <MX_DMA_Init+0x30>)
 800088c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_DMA_Init+0x30>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_GPIO_Init+0x9c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a1f      	ldr	r2, [pc, #124]	; (800094c <MX_GPIO_Init+0x9c>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_GPIO_Init+0x9c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_GPIO_Init+0x9c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_GPIO_Init+0x9c>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_GPIO_Init+0x9c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x9c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <MX_GPIO_Init+0x9c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0x9c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0xa0>)
 8000922:	f001 f801 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0xa0>)
 8000940:	f000 fe6e 	bl	8001620 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020800 	.word	0x40020800

08000954 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800095c:	f008 fb1e 	bl	8008f9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f007 f88e 	bl	8007a82 <osDelay>
 8000966:	e7fb      	b.n	8000960 <StartDefaultTask+0xc>

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_MspInit+0x54>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <HAL_MspInit+0x54>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x54>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_MspInit+0x54>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_MspInit+0x54>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_MspInit+0x54>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	210f      	movs	r1, #15
 80009ba:	f06f 0001 	mvn.w	r0, #1
 80009be:	f000 fc12 	bl	80011e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a30      	ldr	r2, [pc, #192]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d15a      	bne.n	8000aa8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <HAL_UART_MspInit+0xe4>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a2e      	ldr	r2, [pc, #184]	; (8000ab4 <HAL_UART_MspInit+0xe4>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <HAL_UART_MspInit+0xe4>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <HAL_UART_MspInit+0xe4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <HAL_UART_MspInit+0xe4>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_UART_MspInit+0xe4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <HAL_UART_MspInit+0xe8>)
 8000a46:	f000 fdeb 	bl	8001620 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <HAL_UART_MspInit+0xf0>)
 8000a4e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a56:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000a8e:	f000 fbe1 	bl	8001254 <HAL_DMA_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a98:	f7ff ff66 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_UART_MspInit+0xec>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	20000424 	.word	0x20000424
 8000ac0:	40026088 	.word	0x40026088

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 fa58 	bl	8000fa8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000af8:	f007 fdd6 	bl	80086a8 <xTaskGetSchedulerState>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d001      	beq.n	8000b06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b02:	f008 f811 	bl	8008b28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <OTG_FS_IRQHandler+0x10>)
 8000b12:	f001 f872 	bl	8001bfa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20004ec8 	.word	0x20004ec8

08000b20 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
        errno = ENOMEM;
 8000b50:	f009 f828 	bl	8009ba4 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20010000 	.word	0x20010000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	20000488 	.word	0x20000488
 8000b88:	20005740 	.word	0x20005740

08000b8c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bda:	f7ff ffd7 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f008 ffe7 	bl	8009bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fd8f 	bl	8000704 <main>
  bx  lr
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000bf4:	0800a464 	.word	0x0800a464
  ldr r2, =_sbss
 8000bf8:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000bfc:	2000573c 	.word	0x2000573c

08000c00 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>

08000c02 <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <IBUS_Init+0x12>
        return false;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e00f      	b.n	8000c34 <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6859      	ldr	r1, [r3, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7a1b      	ldrb	r3, [r3, #8]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	f002 fdbb 	bl	800379e <HAL_UART_Receive_DMA>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <FSA8S_CheckFirstBytes+0x12>
        return false;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e00d      	b.n	8000c6a <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b20      	cmp	r3, #32
 8000c56:	d107      	bne.n	8000c68 <FSA8S_CheckFirstBytes+0x2c>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b40      	cmp	r3, #64	; 0x40
 8000c62:	d101      	bne.n	8000c68 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e000      	b.n	8000c6a <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8000c68:	2300      	movs	r3, #0
    }
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 8000c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c82:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <FSA8S_Checksum+0x18>
        return false;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e02c      	b.n	8000ce8 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum =
        (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7a1b      	ldrb	r3, [r3, #8]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6859      	ldr	r1, [r3, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7a1b      	ldrb	r3, [r3, #8]
 8000ca8:	3b02      	subs	r3, #2
 8000caa:	440b      	add	r3, r1
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b21b      	sxth	r3, r3
    sentChecksum =
 8000cb4:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	737b      	strb	r3, [r7, #13]
 8000cba:	e00b      	b.n	8000cd4 <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	7b7b      	ldrb	r3, [r7, #13]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	89fa      	ldrh	r2, [r7, #14]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8000cce:	7b7b      	ldrb	r3, [r7, #13]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	737b      	strb	r3, [r7, #13]
 8000cd4:	7b7b      	ldrb	r3, [r7, #13]
 8000cd6:	2b1d      	cmp	r3, #29
 8000cd8:	d9f0      	bls.n	8000cbc <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8000cda:	897a      	ldrh	r2, [r7, #10]
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d101      	bne.n	8000ce6 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 8000ce6:	2300      	movs	r3, #0
    }
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d062      	beq.n	8000dc8 <FSA8S_AmendData+0xd4>

        /* Amend data */
        for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000d02:	2302      	movs	r3, #2
 8000d04:	737b      	strb	r3, [r7, #13]
 8000d06:	e059      	b.n	8000dbc <FSA8S_AmendData+0xc8>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue =
                ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	7b7b      	ldrb	r3, [r7, #13]
 8000d12:	3301      	adds	r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6859      	ldr	r1, [r3, #4]
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	440b      	add	r3, r1
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	7b7b      	ldrb	r3, [r7, #13]
 8000d30:	3b02      	subs	r3, #2
 8000d32:	0fd9      	lsrs	r1, r3, #31
 8000d34:	440b      	add	r3, r1
 8000d36:	105b      	asrs	r3, r3, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <FSA8S_AmendData+0xe0>)
 8000d3c:	5c5b      	ldrb	r3, [r3, r1]
 8000d3e:	b29b      	uxth	r3, r3
            channelValue =
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) &&
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d4a:	d308      	bcc.n	8000d5e <FSA8S_AmendData+0x6a>
 8000d4c:	89fb      	ldrh	r3, [r7, #14]
 8000d4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d52:	d804      	bhi.n	8000d5e <FSA8S_AmendData+0x6a>
                (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8000d54:	89fb      	ldrh	r3, [r7, #14]
 8000d56:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000d5a:	81fb      	strh	r3, [r7, #14]
 8000d5c:	e001      	b.n	8000d62 <FSA8S_AmendData+0x6e>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] =
                channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] *
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d6c:	7b7b      	ldrb	r3, [r7, #13]
 8000d6e:	3b02      	subs	r3, #2
 8000d70:	0fda      	lsrs	r2, r3, #31
 8000d72:	4413      	add	r3, r2
 8000d74:	105b      	asrs	r3, r3, #1
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <FSA8S_AmendData+0xe0>)
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d84:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000dd8 <FSA8S_AmendData+0xe4>
 8000d88:	ee77 6aa6 	vadd.f32	s13, s15, s13
                                                                  ((float)IBUS_CHANNEL_MAX_VALUE /
                                                                   IBUS_CHANNEL_MIN_RAW_VALUE))) /
 8000d8c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8000dd8 <FSA8S_AmendData+0xe4>
 8000d90:	eec6 7a86 	vdiv.f32	s15, s13, s12
                channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] *
 8000d94:	ee67 7a27 	vmul.f32	s15, s14, s15
            hibus->data[(i - 2) / 2] =
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	7b7b      	ldrb	r3, [r7, #13]
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	0fd9      	lsrs	r1, r3, #31
 8000da2:	440b      	add	r3, r1
 8000da4:	105b      	asrs	r3, r3, #1
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dae:	ee17 2a90 	vmov	r2, s15
 8000db2:	b292      	uxth	r2, r2
 8000db4:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000db6:	7b7b      	ldrb	r3, [r7, #13]
 8000db8:	3302      	adds	r3, #2
 8000dba:	737b      	strb	r3, [r7, #13]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7a1b      	ldrb	r3, [r3, #8]
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	7b7b      	ldrb	r3, [r7, #13]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dc9f      	bgt.n	8000d08 <FSA8S_AmendData+0x14>
                                IBUS_CHANNEL_MIN_RAW_VALUE);
        }
    }
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	447a0000 	.word	0x447a0000

08000ddc <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <FSA8S_Init+0x12>
        return NULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e049      	b.n	8000e82 <FSA8S_Init+0xa6>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <FSA8S_Init+0xb0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <FSA8S_Init+0x1e>
        return NULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e043      	b.n	8000e82 <FSA8S_Init+0xa6>
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(IBUS_HandleTypeDef_t));
    uint8_t * buffer = pvortMalloc(sizeof(IBUS_BUFFER_LENGTH));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    IBUS_HandleTypeDef_t * hibus = malloc(sizeof(IBUS_HandleTypeDef_t));
 8000dfa:	2014      	movs	r0, #20
 8000dfc:	f008 fdde 	bl	80099bc <malloc>
 8000e00:	4603      	mov	r3, r0
 8000e02:	617b      	str	r3, [r7, #20]
    uint8_t * buffer = malloc(sizeof(IBUS_BUFFER_LENGTH));
 8000e04:	2004      	movs	r0, #4
 8000e06:	f008 fdd9 	bl	80099bc <malloc>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	613b      	str	r3, [r7, #16]
    uint16_t * data = malloc(sizeof(uint16_t));
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f008 fdd4 	bl	80099bc <malloc>
 8000e14:	4603      	mov	r3, r0
 8000e16:	60fb      	str	r3, [r7, #12]
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00f      	beq.n	8000e3e <FSA8S_Init+0x62>
        hibus->huart = huart;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	220e      	movs	r2, #14
 8000e3a:	741a      	strb	r2, [r3, #16]
 8000e3c:	e00a      	b.n	8000e54 <FSA8S_Init+0x78>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f008 fdbf 	bl	80099cc <free>
        free(hibus);
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f008 fdbc 	bl	80099cc <free>
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8000e54:	6978      	ldr	r0, [r7, #20]
 8000e56:	f7ff fed4 	bl	8000c02 <IBUS_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <FSA8S_Init+0x8e>
        /* Initialization was successful */
        alreadyInitialized = true;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <FSA8S_Init+0xb0>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
        return hibus;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	e00b      	b.n	8000e82 <FSA8S_Init+0xa6>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f008 fda9 	bl	80099cc <free>
        free(hibus);
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f008 fda6 	bl	80099cc <free>
#endif
        return NULL;
 8000e80:	2300      	movs	r3, #0
    }
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000048c 	.word	0x2000048c

08000e90 <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e029      	b.n	8000efa <FSA8S_ReadChannel+0x6a>
    }
    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <FSA8S_ReadChannel+0x22>
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	2b0e      	cmp	r3, #14
 8000eb0:	d901      	bls.n	8000eb6 <FSA8S_ReadChannel+0x26>
        return IBUS_CHANNEL_VALUE_NULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e021      	b.n	8000efa <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8000eb6:	bf00      	nop
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff febf 	bl	8000c3c <FSA8S_CheckFirstBytes>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f083 0301 	eor.w	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f6      	bne.n	8000eb8 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fed3 	bl	8000c76 <FSA8S_Checksum>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f083 0301 	eor.w	r3, r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8000edc:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8000ede:	e7ea      	b.n	8000eb6 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 8000ee0:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff06 	bl	8000cf4 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	881b      	ldrh	r3, [r3, #0]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f94f 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	200f      	movs	r0, #15
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fd1e 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f967 	bl	800123a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f84:	f000 f92f 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000018 	.word	0x20000018
 8000fa4:	20000014 	.word	0x20000014

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000018 	.word	0x20000018
 8000fcc:	20000490 	.word	0x20000490

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000490 	.word	0x20000490

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000018 	.word	0x20000018

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff feb6 	bl	8000fd0 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e099      	b.n	80013a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2202      	movs	r2, #2
 8001274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001290:	e00f      	b.n	80012b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001292:	f7ff fe9d 	bl	8000fd0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b05      	cmp	r3, #5
 800129e:	d908      	bls.n	80012b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2220      	movs	r2, #32
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e078      	b.n	80013a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e8      	bne.n	8001292 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_DMA_Init+0x158>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4313      	orrs	r3, r2
 8001302:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	2b04      	cmp	r3, #4
 800130a:	d107      	bne.n	800131c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4313      	orrs	r3, r2
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f023 0307 	bic.w	r3, r3, #7
 8001332:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	4313      	orrs	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	2b04      	cmp	r3, #4
 8001344:	d117      	bne.n	8001376 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00e      	beq.n	8001376 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f8e5 	bl	8001528 <DMA_CheckFifoParam>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e016      	b.n	80013a4 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f89c 	bl	80014bc <DMA_CalcBaseAndBitshift>
 8001384:	4603      	mov	r3, r0
 8001386:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	223f      	movs	r2, #63	; 0x3f
 800138e:	409a      	lsls	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	f010803f 	.word	0xf010803f

080013b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_DMA_Start_IT+0x26>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e040      	b.n	8001458 <HAL_DMA_Start_IT+0xa8>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d12f      	bne.n	800144a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f82e 	bl	8001460 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	223f      	movs	r2, #63	; 0x3f
 800140a:	409a      	lsls	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0216 	orr.w	r2, r2, #22
 800141e:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0208 	orr.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e005      	b.n	8001456 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8001452:	2302      	movs	r3, #2
 8001454:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001456:	7dfb      	ldrb	r3, [r7, #23]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800147c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b40      	cmp	r3, #64	; 0x40
 800148c:	d108      	bne.n	80014a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800149e:	e007      	b.n	80014b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3b10      	subs	r3, #16
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <DMA_CalcBaseAndBitshift+0x64>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014d6:	4a13      	ldr	r2, [pc, #76]	; (8001524 <DMA_CalcBaseAndBitshift+0x68>)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d909      	bls.n	80014fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	1d1a      	adds	r2, r3, #4
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	659a      	str	r2, [r3, #88]	; 0x58
 80014fc:	e007      	b.n	800150e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	aaaaaaab 	.word	0xaaaaaaab
 8001524:	0800a418 	.word	0x0800a418

08001528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d11f      	bne.n	8001582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d856      	bhi.n	80015f6 <DMA_CheckFifoParam+0xce>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <DMA_CheckFifoParam+0x28>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001561 	.word	0x08001561
 8001554:	08001573 	.word	0x08001573
 8001558:	08001561 	.word	0x08001561
 800155c:	080015f7 	.word	0x080015f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d046      	beq.n	80015fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001570:	e043      	b.n	80015fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800157a:	d140      	bne.n	80015fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001580:	e03d      	b.n	80015fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800158a:	d121      	bne.n	80015d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d837      	bhi.n	8001602 <DMA_CheckFifoParam+0xda>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <DMA_CheckFifoParam+0x70>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015a9 	.word	0x080015a9
 800159c:	080015af 	.word	0x080015af
 80015a0:	080015a9 	.word	0x080015a9
 80015a4:	080015c1 	.word	0x080015c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
      break;
 80015ac:	e030      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d025      	beq.n	8001606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015be:	e022      	b.n	8001606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015c8:	d11f      	bne.n	800160a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ce:	e01c      	b.n	800160a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d903      	bls.n	80015de <DMA_CheckFifoParam+0xb6>
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d003      	beq.n	80015e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015dc:	e018      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
      break;
 80015e2:	e015      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00e      	beq.n	800160e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
      break;
 80015f4:	e00b      	b.n	800160e <DMA_CheckFifoParam+0xe6>
      break;
 80015f6:	bf00      	nop
 80015f8:	e00a      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 80015fa:	bf00      	nop
 80015fc:	e008      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 80015fe:	bf00      	nop
 8001600:	e006      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 8001602:	bf00      	nop
 8001604:	e004      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 8001606:	bf00      	nop
 8001608:	e002      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 800160a:	bf00      	nop
 800160c:	e000      	b.n	8001610 <DMA_CheckFifoParam+0xe8>
      break;
 800160e:	bf00      	nop
    }
  }

  return status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e159      	b.n	80018f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8148 	bne.w	80018ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d005      	beq.n	8001672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	2b02      	cmp	r3, #2
 8001670:	d130      	bne.n	80016d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 0201 	and.w	r2, r3, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d017      	beq.n	8001710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d123      	bne.n	8001764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	08da      	lsrs	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	69b9      	ldr	r1, [r7, #24]
 8001760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0203 	and.w	r2, r3, #3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80a2 	beq.w	80018ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b57      	ldr	r3, [pc, #348]	; (8001908 <HAL_GPIO_Init+0x2e8>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a56      	ldr	r2, [pc, #344]	; (8001908 <HAL_GPIO_Init+0x2e8>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b54      	ldr	r3, [pc, #336]	; (8001908 <HAL_GPIO_Init+0x2e8>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c2:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_GPIO_Init+0x2ec>)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a49      	ldr	r2, [pc, #292]	; (8001910 <HAL_GPIO_Init+0x2f0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0x202>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a48      	ldr	r2, [pc, #288]	; (8001914 <HAL_GPIO_Init+0x2f4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0x1fe>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a47      	ldr	r2, [pc, #284]	; (8001918 <HAL_GPIO_Init+0x2f8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x1fa>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a46      	ldr	r2, [pc, #280]	; (800191c <HAL_GPIO_Init+0x2fc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x1f6>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a45      	ldr	r2, [pc, #276]	; (8001920 <HAL_GPIO_Init+0x300>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x1f2>
 800180e:	2304      	movs	r3, #4
 8001810:	e008      	b.n	8001824 <HAL_GPIO_Init+0x204>
 8001812:	2307      	movs	r3, #7
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x204>
 8001816:	2303      	movs	r3, #3
 8001818:	e004      	b.n	8001824 <HAL_GPIO_Init+0x204>
 800181a:	2302      	movs	r3, #2
 800181c:	e002      	b.n	8001824 <HAL_GPIO_Init+0x204>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x204>
 8001822:	2300      	movs	r3, #0
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	f002 0203 	and.w	r2, r2, #3
 800182a:	0092      	lsls	r2, r2, #2
 800182c:	4093      	lsls	r3, r2
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001834:	4935      	ldr	r1, [pc, #212]	; (800190c <HAL_GPIO_Init+0x2ec>)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001866:	4a2f      	ldr	r2, [pc, #188]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_GPIO_Init+0x304>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001890:	4a24      	ldr	r2, [pc, #144]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ba:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	f67f aea2 	bls.w	800163c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40020800 	.word	0x40020800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40021000 	.word	0x40021000
 8001924:	40013c00 	.word	0x40013c00

08001928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
 8001934:	4613      	mov	r3, r2
 8001936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001938:	787b      	ldrb	r3, [r7, #1]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001944:	e003      	b.n	800194e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	619a      	str	r2, [r3, #24]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800195a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195c:	b08f      	sub	sp, #60	; 0x3c
 800195e:	af0a      	add	r7, sp, #40	; 0x28
 8001960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e10f      	b.n	8001b8c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f007 fd0e 	bl	80093a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2203      	movs	r2, #3
 8001990:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fcfd 	bl	80043aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	687e      	ldr	r6, [r7, #4]
 80019b8:	466d      	mov	r5, sp
 80019ba:	f106 0410 	add.w	r4, r6, #16
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ce:	1d33      	adds	r3, r6, #4
 80019d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d2:	6838      	ldr	r0, [r7, #0]
 80019d4:	f002 fbd4 	bl	8004180 <USB_CoreInit>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0d0      	b.n	8001b8c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fceb 	bl	80043cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
 80019fa:	e04a      	b.n	8001a92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	333d      	adds	r3, #61	; 0x3d
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	333c      	adds	r3, #60	; 0x3c
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	b298      	uxth	r0, r3
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	3344      	adds	r3, #68	; 0x44
 8001a38:	4602      	mov	r2, r0
 8001a3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3340      	adds	r3, #64	; 0x40
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3348      	adds	r3, #72	; 0x48
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	334c      	adds	r3, #76	; 0x4c
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3354      	adds	r3, #84	; 0x54
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3af      	bcc.n	80019fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e044      	b.n	8001b2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d3b5      	bcc.n	8001aa2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	687e      	ldr	r6, [r7, #4]
 8001b3e:	466d      	mov	r5, sp
 8001b40:	f106 0410 	add.w	r4, r6, #16
 8001b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b50:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b54:	1d33      	adds	r3, r6, #4
 8001b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f002 fc83 	bl	8004464 <USB_DevInit>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e00d      	b.n	8001b8c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 fdd2 	bl	800572e <USB_DevDisconnect>

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_PCD_Start+0x1c>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e020      	b.n	8001bf2 <HAL_PCD_Start+0x5e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d109      	bne.n	8001bd4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d005      	beq.n	8001bd4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fbd5 	bl	8004388 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fd82 	bl	80056ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bfa:	b590      	push	{r4, r7, lr}
 8001bfc:	b08d      	sub	sp, #52	; 0x34
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fe40 	bl	8005896 <USB_GetMode>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f040 848a 	bne.w	8002532 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fda4 	bl	8005770 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8480 	beq.w	8002530 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 fd91 	bl	8005770 <USB_ReadInterrupts>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d107      	bne.n	8001c68 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f002 0202 	and.w	r2, r2, #2
 8001c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fd7f 	bl	8005770 <USB_ReadInterrupts>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d161      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0210 	bic.w	r2, r2, #16
 8001c8a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f003 020f 	and.w	r2, r3, #15
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3304      	adds	r3, #4
 8001caa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	0c5b      	lsrs	r3, r3, #17
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d124      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d035      	beq.n	8001d30 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6a38      	ldr	r0, [r7, #32]
 8001cd8:	f003 fbb6 	bl	8005448 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ce8:	441a      	add	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfa:	441a      	add	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	621a      	str	r2, [r3, #32]
 8001d00:	e016      	b.n	8001d30 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	0c5b      	lsrs	r3, r3, #17
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d110      	bne.n	8001d30 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d14:	2208      	movs	r2, #8
 8001d16:	4619      	mov	r1, r3
 8001d18:	6a38      	ldr	r0, [r7, #32]
 8001d1a:	f003 fb95 	bl	8005448 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d2a:	441a      	add	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0210 	orr.w	r2, r2, #16
 8001d3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fd13 	bl	8005770 <USB_ReadInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d54:	f040 80a7 	bne.w	8001ea6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fd18 	bl	8005796 <USB_ReadDevAllOutEpInterrupt>
 8001d66:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d68:	e099      	b.n	8001e9e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 808e 	beq.w	8001e92 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fd3c 	bl	80057fe <USB_ReadDevOutEPInterrupt>
 8001d86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2301      	movs	r3, #1
 8001da2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fec2 	bl	8002b30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 ff98 	bl	8002d00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de6:	461a      	mov	r2, r3
 8001de8:	2310      	movs	r3, #16
 8001dea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d030      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d109      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e14:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	3304      	adds	r3, #4
 8001e2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	78db      	ldrb	r3, [r3, #3]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2200      	movs	r2, #0
 8001e38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f007 fbad 	bl	80095a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e52:	461a      	mov	r2, r3
 8001e54:	2302      	movs	r3, #2
 8001e56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2320      	movs	r3, #32
 8001e72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	3301      	adds	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f47f af62 	bne.w	8001d6a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fc60 	bl	8005770 <USB_ReadInterrupts>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001eba:	f040 80db 	bne.w	8002074 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fc81 	bl	80057ca <USB_ReadDevAllInEpInterrupt>
 8001ec8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ece:	e0cd      	b.n	800206c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80c2 	beq.w	8002060 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 fca7 	bl	800583a <USB_ReadDevInEPInterrupt>
 8001eec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d057      	beq.n	8001fa8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	2201      	movs	r2, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69f9      	ldr	r1, [r7, #28]
 8001f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f18:	4013      	ands	r3, r2
 8001f1a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d132      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	334c      	adds	r3, #76	; 0x4c
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4403      	add	r3, r0
 8001f56:	3348      	adds	r3, #72	; 0x48
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4419      	add	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4403      	add	r3, r0
 8001f6a:	334c      	adds	r3, #76	; 0x4c
 8001f6c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d113      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x3a2>
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	3354      	adds	r3, #84	; 0x54
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d108      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f94:	461a      	mov	r2, r3
 8001f96:	2101      	movs	r1, #1
 8001f98:	f003 fcae 	bl	80058f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f007 fa81 	bl	80094aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2310      	movs	r3, #16
 8001fde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d023      	beq.n	800204e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002008:	6a38      	ldr	r0, [r7, #32]
 800200a:	f002 fb8f 	bl	800472c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3338      	adds	r3, #56	; 0x38
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	3304      	adds	r3, #4
 8002020:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	78db      	ldrb	r3, [r3, #3]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d108      	bne.n	800203c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	b2db      	uxtb	r3, r3
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f007 fac4 	bl	80095c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002048:	461a      	mov	r2, r3
 800204a:	2302      	movs	r3, #2
 800204c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fcdb 	bl	8002a16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	3301      	adds	r3, #1
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	f47f af2e 	bne.w	8001ed0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f003 fb79 	bl	8005770 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002088:	d122      	bne.n	80020d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d108      	bne.n	80020ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020b0:	2100      	movs	r1, #0
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fec2 	bl	8002e3c <HAL_PCDEx_LPM_Callback>
 80020b8:	e002      	b.n	80020c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f007 fa62 	bl	8009584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 fb4b 	bl	8005770 <USB_ReadInterrupts>
 80020da:	4603      	mov	r3, r0
 80020dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e4:	d112      	bne.n	800210c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d102      	bne.n	80020fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f007 fa1e 	bl	8009538 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800210a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 fb2d 	bl	8005770 <USB_ReadInterrupts>
 8002116:	4603      	mov	r3, r0
 8002118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002120:	f040 80b7 	bne.w	8002292 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2110      	movs	r1, #16
 800213e:	4618      	mov	r0, r3
 8002140:	f002 faf4 	bl	800472c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002148:	e046      	b.n	80021d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002156:	461a      	mov	r2, r3
 8002158:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800215c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216e:	0151      	lsls	r1, r2, #5
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	440a      	add	r2, r1
 8002174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002178:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800217c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218a:	461a      	mov	r2, r3
 800218c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002190:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a2:	0151      	lsls	r1, r2, #5
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	440a      	add	r2, r1
 80021a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c2:	0151      	lsls	r1, r2, #5
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	440a      	add	r2, r1
 80021c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	3301      	adds	r3, #1
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021de:	429a      	cmp	r2, r3
 80021e0:	d3b3      	bcc.n	800214a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80021f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d016      	beq.n	800222c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800220e:	f043 030b 	orr.w	r3, r3, #11
 8002212:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002224:	f043 030b 	orr.w	r3, r3, #11
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	e015      	b.n	8002258 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800223a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800223e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002242:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002252:	f043 030b 	orr.w	r3, r3, #11
 8002256:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002266:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800226a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800227c:	461a      	mov	r2, r3
 800227e:	f003 fb3b 	bl	80058f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f003 fa6a 	bl	8005770 <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a6:	d124      	bne.n	80022f2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fb00 	bl	80058b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 fab5 	bl	8004826 <USB_GetDevSpeed>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681c      	ldr	r4, [r3, #0]
 80022c8:	f001 f9e8 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80022cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4620      	mov	r0, r4
 80022d8:	f001 ffb4 	bl	8004244 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f007 f90c 	bl	80094fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80022f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fa3a 	bl	8005770 <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b08      	cmp	r3, #8
 8002304:	d10a      	bne.n	800231c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f007 f8e9 	bl	80094de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f002 0208 	and.w	r2, r2, #8
 800231a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fa25 	bl	8005770 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d122      	bne.n	8002376 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
 8002340:	e014      	b.n	800236c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fb27 	bl	80029b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3301      	adds	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002372:	429a      	cmp	r2, r3
 8002374:	d3e5      	bcc.n	8002342 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f003 f9f8 	bl	8005770 <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238a:	d13b      	bne.n	8002404 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800238c:	2301      	movs	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	e02b      	b.n	80023ea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3340      	adds	r3, #64	; 0x40
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d115      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	da12      	bge.n	80023e4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	333f      	adds	r3, #63	; 0x3f
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fae8 	bl	80029b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	3301      	adds	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3ce      	bcc.n	8002392 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 f9b1 	bl	8005770 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002418:	d155      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800241a:	2301      	movs	r3, #1
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	e045      	b.n	80024ac <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d12e      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002448:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800244a:	2b00      	cmp	r3, #0
 800244c:	da2b      	bge.n	80024a6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800245a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800245e:	429a      	cmp	r2, r3
 8002460:	d121      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024a2:	6053      	str	r3, [r2, #4]
            break;
 80024a4:	e007      	b.n	80024b6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	3301      	adds	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d3b4      	bcc.n	8002420 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 f950 	bl	8005770 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024da:	d10a      	bne.n	80024f2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f007 f883 	bl	80095e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 f93a 	bl	8005770 <USB_ReadInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d115      	bne.n	8002532 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f007 f873 	bl	8009604 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	e000      	b.n	8002532 <HAL_PCD_IRQHandler+0x938>
      return;
 8002530:	bf00      	nop
    }
  }
}
 8002532:	3734      	adds	r7, #52	; 0x34
 8002534:	46bd      	mov	sp, r7
 8002536:	bd90      	pop	{r4, r7, pc}

08002538 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_PCD_SetAddress+0x1a>
 800254e:	2302      	movs	r3, #2
 8002550:	e013      	b.n	800257a <HAL_PCD_SetAddress+0x42>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f003 f898 	bl	80056a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	4608      	mov	r0, r1
 800258c:	4611      	mov	r1, r2
 800258e:	461a      	mov	r2, r3
 8002590:	4603      	mov	r3, r0
 8002592:	70fb      	strb	r3, [r7, #3]
 8002594:	460b      	mov	r3, r1
 8002596:	803b      	strh	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da0f      	bge.n	80025c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 020f 	and.w	r2, r3, #15
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	3338      	adds	r3, #56	; 0x38
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	705a      	strb	r2, [r3, #1]
 80025c6:	e00f      	b.n	80025e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 020f 	and.w	r2, r3, #15
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	3304      	adds	r3, #4
 80025e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025f4:	883a      	ldrh	r2, [r7, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	78ba      	ldrb	r2, [r7, #2]
 80025fe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	785b      	ldrb	r3, [r3, #1]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002612:	78bb      	ldrb	r3, [r7, #2]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d102      	bne.n	800261e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_PCD_EP_Open+0xaa>
 8002628:	2302      	movs	r3, #2
 800262a:	e00e      	b.n	800264a <HAL_PCD_EP_Open+0xc8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	4618      	mov	r0, r3
 800263c:	f002 f918 	bl	8004870 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002648:	7afb      	ldrb	r3, [r7, #11]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800265e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002662:	2b00      	cmp	r3, #0
 8002664:	da0f      	bge.n	8002686 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	f003 020f 	and.w	r2, r3, #15
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3338      	adds	r3, #56	; 0x38
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	705a      	strb	r2, [r3, #1]
 8002684:	e00f      	b.n	80026a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	3304      	adds	r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_PCD_EP_Close+0x6e>
 80026bc:	2302      	movs	r3, #2
 80026be:	e00e      	b.n	80026de <HAL_PCD_EP_Close+0x8c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 f956 	bl	8004980 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	460b      	mov	r3, r1
 80026f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f6:	7afb      	ldrb	r3, [r7, #11]
 80026f8:	f003 020f 	and.w	r2, r3, #15
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	3304      	adds	r3, #4
 800270e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2200      	movs	r2, #0
 8002720:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	b2da      	uxtb	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d102      	bne.n	8002742 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	6979      	ldr	r1, [r7, #20]
 800275a:	f002 fc35 	bl	8004fc8 <USB_EP0StartXfer>
 800275e:	e008      	b.n	8002772 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	6979      	ldr	r1, [r7, #20]
 800276e:	f002 f9e3 	bl	8004b38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	f003 020f 	and.w	r2, r3, #15
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	460b      	mov	r3, r1
 80027ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027bc:	7afb      	ldrb	r3, [r7, #11]
 80027be:	f003 020f 	and.w	r2, r3, #15
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	3338      	adds	r3, #56	; 0x38
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	3304      	adds	r3, #4
 80027d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2200      	movs	r2, #0
 80027e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2201      	movs	r2, #1
 80027ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ec:	7afb      	ldrb	r3, [r7, #11]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d102      	bne.n	8002806 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002806:	7afb      	ldrb	r3, [r7, #11]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	6979      	ldr	r1, [r7, #20]
 800281e:	f002 fbd3 	bl	8004fc8 <USB_EP0StartXfer>
 8002822:	e008      	b.n	8002836 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	6979      	ldr	r1, [r7, #20]
 8002832:	f002 f981 	bl	8004b38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	f003 020f 	and.w	r2, r3, #15
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	d901      	bls.n	800285e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e050      	b.n	8002900 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800285e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002862:	2b00      	cmp	r3, #0
 8002864:	da0f      	bge.n	8002886 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	3338      	adds	r3, #56	; 0x38
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	3304      	adds	r3, #4
 800287c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	705a      	strb	r2, [r3, #1]
 8002884:	e00d      	b.n	80028a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	3304      	adds	r3, #4
 800289a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_PCD_EP_SetStall+0x82>
 80028be:	2302      	movs	r3, #2
 80028c0:	e01e      	b.n	8002900 <HAL_PCD_EP_SetStall+0xc0>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68f9      	ldr	r1, [r7, #12]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 fe11 	bl	80054f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	b2d9      	uxtb	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028f0:	461a      	mov	r2, r3
 80028f2:	f003 f801 	bl	80058f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	f003 020f 	and.w	r2, r3, #15
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	d901      	bls.n	8002926 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e042      	b.n	80029ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002926:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800292a:	2b00      	cmp	r3, #0
 800292c:	da0f      	bge.n	800294e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	f003 020f 	and.w	r2, r3, #15
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	3338      	adds	r3, #56	; 0x38
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	3304      	adds	r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	705a      	strb	r2, [r3, #1]
 800294c:	e00f      	b.n	800296e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 020f 	and.w	r2, r3, #15
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	3304      	adds	r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	b2da      	uxtb	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_PCD_EP_ClrStall+0x86>
 800298a:	2302      	movs	r3, #2
 800298c:	e00e      	b.n	80029ac <HAL_PCD_EP_ClrStall+0xa4>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	4618      	mov	r0, r3
 800299e:	f002 fe19 	bl	80055d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	da0c      	bge.n	80029e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 020f 	and.w	r2, r3, #15
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	3338      	adds	r3, #56	; 0x38
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	3304      	adds	r3, #4
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	e00c      	b.n	80029fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fc38 	bl	8005278 <USB_EPStopXfer>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b08a      	sub	sp, #40	; 0x28
 8002a1a:	af02      	add	r7, sp, #8
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	3338      	adds	r3, #56	; 0x38
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a1a      	ldr	r2, [r3, #32]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d901      	bls.n	8002a4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06c      	b.n	8002b28 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d902      	bls.n	8002a6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3303      	adds	r3, #3
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a72:	e02b      	b.n	8002acc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d902      	bls.n	8002a90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	3303      	adds	r3, #3
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6919      	ldr	r1, [r3, #16]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	4603      	mov	r3, r0
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f002 fc8c 	bl	80053cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	441a      	add	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	441a      	add	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d809      	bhi.n	8002af6 <PCD_WriteEmptyTxFifo+0xe0>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a1a      	ldr	r2, [r3, #32]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d203      	bcs.n	8002af6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1be      	bne.n	8002a74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d811      	bhi.n	8002b26 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	2201      	movs	r2, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	6939      	ldr	r1, [r7, #16]
 8002b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b22:	4013      	ands	r3, r2
 8002b24:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	333c      	adds	r3, #60	; 0x3c
 8002b48:	3304      	adds	r3, #4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d17b      	bne.n	8002c5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	4a61      	ldr	r2, [pc, #388]	; (8002cf8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	f240 80b9 	bls.w	8002cec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80b3 	beq.w	8002cec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b92:	461a      	mov	r2, r3
 8002b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b98:	6093      	str	r3, [r2, #8]
 8002b9a:	e0a7      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	6093      	str	r3, [r2, #8]
 8002bb8:	e098      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 8093 	bne.w	8002cec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	4a4b      	ldr	r2, [pc, #300]	; (8002cf8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d90f      	bls.n	8002bee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be4:	461a      	mov	r2, r3
 8002be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bea:	6093      	str	r3, [r2, #8]
 8002bec:	e07e      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	3304      	adds	r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	0159      	lsls	r1, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	440b      	add	r3, r1
 8002c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d114      	bne.n	8002c50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	f002 fe5c 	bl	80058f8 <USB_EP0_OutStart>
 8002c40:	e006      	b.n	8002c50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	441a      	add	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f006 fc0c 	bl	8009474 <HAL_PCD_DataOutStageCallback>
 8002c5c:	e046      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d124      	bne.n	8002cb0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c82:	6093      	str	r3, [r2, #8]
 8002c84:	e032      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f006 fbe3 	bl	8009474 <HAL_PCD_DataOutStageCallback>
 8002cae:	e01d      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d114      	bne.n	8002ce0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d108      	bne.n	8002ce0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2100      	movs	r1, #0
 8002cdc:	f002 fe0c 	bl	80058f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f006 fbc4 	bl	8009474 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	4f54300a 	.word	0x4f54300a
 8002cfc:	4f54310a 	.word	0x4f54310a

08002d00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	333c      	adds	r3, #60	; 0x3c
 8002d18:	3304      	adds	r3, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d90e      	bls.n	8002d54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f006 fb7b 	bl	8009450 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d90c      	bls.n	8002d7c <PCD_EP_OutSetupPacket_int+0x7c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d108      	bne.n	8002d7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d74:	461a      	mov	r2, r3
 8002d76:	2101      	movs	r1, #1
 8002d78:	f002 fdbe 	bl	80058f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	4f54300a 	.word	0x4f54300a

08002d8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002daa:	883b      	ldrh	r3, [r7, #0]
 8002dac:	0419      	lsls	r1, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
 8002db8:	e028      	b.n	8002e0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]
 8002dcc:	e00d      	b.n	8002dea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	3340      	adds	r3, #64	; 0x40
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4413      	add	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	3301      	adds	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d3ec      	bcc.n	8002dce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002df4:	883b      	ldrh	r3, [r7, #0]
 8002df6:	0418      	lsls	r0, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6819      	ldr	r1, [r3, #0]
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	4302      	orrs	r2, r0
 8002e04:	3340      	adds	r3, #64	; 0x40
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e267      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d075      	beq.n	8002f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e72:	4b88      	ldr	r3, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d00c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4b85      	ldr	r3, [pc, #532]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d112      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4b82      	ldr	r3, [pc, #520]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	4b7e      	ldr	r3, [pc, #504]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05b      	beq.n	8002f5c <HAL_RCC_OscConfig+0x108>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d157      	bne.n	8002f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e242      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x74>
 8002eba:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a75      	ldr	r2, [pc, #468]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e01d      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x98>
 8002ed2:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6f      	ldr	r2, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6c      	ldr	r2, [pc, #432]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002eec:	4b69      	ldr	r3, [pc, #420]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a68      	ldr	r2, [pc, #416]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f860 	bl	8000fd0 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe f85c 	bl	8000fd0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e207      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b5b      	ldr	r3, [pc, #364]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0xc0>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe f84c 	bl	8000fd0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f848 	bl	8000fd0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1f3      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	4b51      	ldr	r3, [pc, #324]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0xe8>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d063      	beq.n	8003032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d11c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b44      	ldr	r3, [pc, #272]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d116      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e1c7      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4937      	ldr	r1, [pc, #220]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	e03a      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc4:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_OscConfig+0x244>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe f801 	bl	8000fd0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fd fffd 	bl	8000fd0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1a8      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4925      	ldr	r1, [pc, #148]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x244>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fd ffe0 	bl	8000fd0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003014:	f7fd ffdc 	bl	8000fd0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e187      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d036      	beq.n	80030ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_RCC_OscConfig+0x248>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fd ffc0 	bl	8000fd0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003054:	f7fd ffbc 	bl	8000fd0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e167      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8003068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x200>
 8003072:	e01b      	b.n	80030ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_OscConfig+0x248>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fd ffa9 	bl	8000fd0 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	e00e      	b.n	80030a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003082:	f7fd ffa5 	bl	8000fd0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d907      	bls.n	80030a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e150      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
 8003094:	40023800 	.word	0x40023800
 8003098:	42470000 	.word	0x42470000
 800309c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ea      	bne.n	8003082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8097 	beq.w	80031e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4b7d      	ldr	r3, [pc, #500]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a7c      	ldr	r2, [pc, #496]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b7a      	ldr	r3, [pc, #488]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b77      	ldr	r3, [pc, #476]	; (80032c8 <HAL_RCC_OscConfig+0x474>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d118      	bne.n	8003128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f6:	4b74      	ldr	r3, [pc, #464]	; (80032c8 <HAL_RCC_OscConfig+0x474>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a73      	ldr	r2, [pc, #460]	; (80032c8 <HAL_RCC_OscConfig+0x474>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7fd ff65 	bl	8000fd0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310a:	f7fd ff61 	bl	8000fd0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e10c      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCC_OscConfig+0x474>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d106      	bne.n	800313e <HAL_RCC_OscConfig+0x2ea>
 8003130:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a63      	ldr	r2, [pc, #396]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	e01c      	b.n	8003178 <HAL_RCC_OscConfig+0x324>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b05      	cmp	r3, #5
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0x30c>
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	4a5e      	ldr	r2, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 800314c:	f043 0304 	orr.w	r3, r3, #4
 8003150:	6713      	str	r3, [r2, #112]	; 0x70
 8003152:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a5b      	ldr	r2, [pc, #364]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0x324>
 8003160:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
 800316c:	4b55      	ldr	r3, [pc, #340]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003172:	f023 0304 	bic.w	r3, r3, #4
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d015      	beq.n	80031ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fd ff26 	bl	8000fd0 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7fd ff22 	bl	8000fd0 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0cb      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0ee      	beq.n	8003188 <HAL_RCC_OscConfig+0x334>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ac:	f7fd ff10 	bl	8000fd0 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fd ff0c 	bl	8000fd0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0b5      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ee      	bne.n	80031b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031dc:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a1 	beq.w	8003334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f2:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d05c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d141      	bne.n	800328a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_RCC_OscConfig+0x478>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fd fee0 	bl	8000fd0 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fd fedc 	bl	8000fd0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e087      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	3b01      	subs	r3, #1
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	491b      	ldr	r1, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x478>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fd feb5 	bl	8000fd0 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326a:	f7fd feb1 	bl	8000fd0 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e05c      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x416>
 8003288:	e054      	b.n	8003334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_RCC_OscConfig+0x478>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fd fe9e 	bl	8000fd0 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fd fe9a 	bl	8000fd0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e045      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x444>
 80032b6:	e03d      	b.n	8003334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e038      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000
 80032cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x4ec>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d028      	beq.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d121      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d11a      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003300:	4013      	ands	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	4293      	cmp	r3, r2
 800330a:	d111      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	3b01      	subs	r3, #1
 800331a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023800 	.word	0x40023800

08003344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0cc      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b68      	ldr	r3, [pc, #416]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d90c      	bls.n	8003380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b65      	ldr	r3, [pc, #404]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a52      	ldr	r2, [pc, #328]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	494d      	ldr	r1, [pc, #308]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d044      	beq.n	8003464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d119      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b3f      	ldr	r3, [pc, #252]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e06f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e067      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b37      	ldr	r3, [pc, #220]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4934      	ldr	r1, [pc, #208]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003434:	f7fd fdcc 	bl	8000fd0 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fd fdc8 	bl	8000fd0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e04f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 020c 	and.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d1eb      	bne.n	800343c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003464:	4b25      	ldr	r3, [pc, #148]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d20c      	bcs.n	800348c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4916      	ldr	r1, [pc, #88]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ca:	f000 f821 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	490a      	ldr	r1, [pc, #40]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fd2c 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00
 8003500:	40023800 	.word	0x40023800
 8003504:	0800a400 	.word	0x0800a400
 8003508:	20000000 	.word	0x20000000
 800350c:	20000014 	.word	0x20000014

08003510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003514:	b090      	sub	sp, #64	; 0x40
 8003516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
 800351c:	2300      	movs	r3, #0
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003520:	2300      	movs	r3, #0
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003528:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d00d      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x40>
 8003534:	2b08      	cmp	r3, #8
 8003536:	f200 80a1 	bhi.w	800367c <HAL_RCC_GetSysClockFreq+0x16c>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x34>
 800353e:	2b04      	cmp	r3, #4
 8003540:	d003      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x3a>
 8003542:	e09b      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_GetSysClockFreq+0x184>)
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003548:	e09b      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354a:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_GetSysClockFreq+0x188>)
 800354c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800354e:	e098      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355a:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d028      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	2200      	movs	r2, #0
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	627a      	str	r2, [r7, #36]	; 0x24
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003578:	2100      	movs	r1, #0
 800357a:	4b47      	ldr	r3, [pc, #284]	; (8003698 <HAL_RCC_GetSysClockFreq+0x188>)
 800357c:	fb03 f201 	mul.w	r2, r3, r1
 8003580:	2300      	movs	r3, #0
 8003582:	fb00 f303 	mul.w	r3, r0, r3
 8003586:	4413      	add	r3, r2
 8003588:	4a43      	ldr	r2, [pc, #268]	; (8003698 <HAL_RCC_GetSysClockFreq+0x188>)
 800358a:	fba0 1202 	umull	r1, r2, r0, r2
 800358e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003590:	460a      	mov	r2, r1
 8003592:	62ba      	str	r2, [r7, #40]	; 0x28
 8003594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003596:	4413      	add	r3, r2
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	2200      	movs	r2, #0
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	61fa      	str	r2, [r7, #28]
 80035a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035aa:	f7fc fe71 	bl	8000290 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4613      	mov	r3, r2
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b6:	e053      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b8:	4b35      	ldr	r3, [pc, #212]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	2200      	movs	r2, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	617a      	str	r2, [r7, #20]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ca:	f04f 0b00 	mov.w	fp, #0
 80035ce:	4652      	mov	r2, sl
 80035d0:	465b      	mov	r3, fp
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	0159      	lsls	r1, r3, #5
 80035dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e0:	0150      	lsls	r0, r2, #5
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	ebb2 080a 	subs.w	r8, r2, sl
 80035ea:	eb63 090b 	sbc.w	r9, r3, fp
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003602:	ebb2 0408 	subs.w	r4, r2, r8
 8003606:	eb63 0509 	sbc.w	r5, r3, r9
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	00eb      	lsls	r3, r5, #3
 8003614:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003618:	00e2      	lsls	r2, r4, #3
 800361a:	4614      	mov	r4, r2
 800361c:	461d      	mov	r5, r3
 800361e:	eb14 030a 	adds.w	r3, r4, sl
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	eb45 030b 	adc.w	r3, r5, fp
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003636:	4629      	mov	r1, r5
 8003638:	028b      	lsls	r3, r1, #10
 800363a:	4621      	mov	r1, r4
 800363c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003640:	4621      	mov	r1, r4
 8003642:	028a      	lsls	r2, r1, #10
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364a:	2200      	movs	r2, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	60fa      	str	r2, [r7, #12]
 8003650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003654:	f7fc fe1c 	bl	8000290 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetSysClockFreq+0x184>)
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003684:	4618      	mov	r0, r3
 8003686:	3740      	adds	r7, #64	; 0x40
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	00f42400 	.word	0x00f42400
 8003698:	017d7840 	.word	0x017d7840

0800369c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000000 	.word	0x20000000

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b8:	f7ff fff0 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	0800a410 	.word	0x0800a410

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036e0:	f7ff ffdc 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0b5b      	lsrs	r3, r3, #13
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	0800a410 	.word	0x0800a410

08003704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e03f      	b.n	8003796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd f950 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	; 0x24
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 faa5 	bl	8003c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800375c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800376c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800377c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	4613      	mov	r3, r2
 80037aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d11d      	bne.n	80037f4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_UART_Receive_DMA+0x26>
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e016      	b.n	80037f6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Receive_DMA+0x38>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e00f      	b.n	80037f6 <HAL_UART_Receive_DMA+0x58>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	461a      	mov	r2, r3
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f92a 	bl	8003a44 <UART_Start_Receive_DMA>
 80037f0:	4603      	mov	r3, r0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	460b      	mov	r3, r1
 8003844:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b09c      	sub	sp, #112	; 0x70
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d172      	bne.n	8003954 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800386e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003870:	2200      	movs	r2, #0
 8003872:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800388a:	66bb      	str	r3, [r7, #104]	; 0x68
 800388c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003894:	65ba      	str	r2, [r7, #88]	; 0x58
 8003896:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800389a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e5      	bne.n	8003874 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	667b      	str	r3, [r7, #100]	; 0x64
 80038c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80038c8:	647a      	str	r2, [r7, #68]	; 0x44
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	623b      	str	r3, [r7, #32]
   return(result);
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f2:	663b      	str	r3, [r7, #96]	; 0x60
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3314      	adds	r3, #20
 80038fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038fc:	633a      	str	r2, [r7, #48]	; 0x30
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e5      	bne.n	80038dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	2b01      	cmp	r3, #1
 800391e:	d119      	bne.n	8003954 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0310 	bic.w	r3, r3, #16
 8003936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003940:	61fa      	str	r2, [r7, #28]
 8003942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	69b9      	ldr	r1, [r7, #24]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	617b      	str	r3, [r7, #20]
   return(result);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e5      	bne.n	8003920 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	2b01      	cmp	r3, #1
 800395a:	d106      	bne.n	800396a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800395c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003960:	4619      	mov	r1, r3
 8003962:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003964:	f7ff ff69 	bl	800383a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003968:	e002      	b.n	8003970 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800396a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800396c:	f7ff ff47 	bl	80037fe <HAL_UART_RxCpltCallback>
}
 8003970:	bf00      	nop
 8003972:	3770      	adds	r7, #112	; 0x70
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	2b01      	cmp	r3, #1
 800398c:	d108      	bne.n	80039a0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	b29b      	uxth	r3, r3
 8003996:	4619      	mov	r1, r3
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff ff4e 	bl	800383a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800399e:	e002      	b.n	80039a6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff ff36 	bl	8003812 <HAL_UART_RxHalfCpltCallback>
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	bf0c      	ite	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	2300      	movne	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b21      	cmp	r3, #33	; 0x21
 80039e0:	d108      	bne.n	80039f4 <UART_DMAError+0x46>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80039ee:	68b8      	ldr	r0, [r7, #8]
 80039f0:	f000 f8c6 	bl	8003b80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b22      	cmp	r3, #34	; 0x22
 8003a14:	d108      	bne.n	8003a28 <UART_DMAError+0x7a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003a22:	68b8      	ldr	r0, [r7, #8]
 8003a24:	f000 f8d4 	bl	8003bd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f043 0210 	orr.w	r2, r3, #16
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a34:	68b8      	ldr	r0, [r7, #8]
 8003a36:	f7ff fef6 	bl	8003826 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b098      	sub	sp, #96	; 0x60
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2222      	movs	r2, #34	; 0x22
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <UART_Start_Receive_DMA+0x130>)
 8003a72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <UART_Start_Receive_DMA+0x134>)
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	4a3e      	ldr	r2, [pc, #248]	; (8003b7c <UART_Start_Receive_DMA+0x138>)
 8003a82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	2200      	movs	r2, #0
 8003a8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a8c:	f107 0308 	add.w	r3, r7, #8
 8003a90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	f7fd fc84 	bl	80013b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d019      	beq.n	8003b02 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003af0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e5      	bne.n	8003ace <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3314      	adds	r3, #20
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	657b      	str	r3, [r7, #84]	; 0x54
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3314      	adds	r3, #20
 8003b20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b22:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e5      	bne.n	8003b02 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3314      	adds	r3, #20
 8003b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	617b      	str	r3, [r7, #20]
   return(result);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3314      	adds	r3, #20
 8003b54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b56:	627a      	str	r2, [r7, #36]	; 0x24
 8003b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6a39      	ldr	r1, [r7, #32]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e5      	bne.n	8003b36 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3760      	adds	r7, #96	; 0x60
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	08003853 	.word	0x08003853
 8003b78:	08003979 	.word	0x08003979
 8003b7c:	080039af 	.word	0x080039af

08003b80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	61ba      	str	r2, [r7, #24]
 8003baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6979      	ldr	r1, [r7, #20]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e5      	bne.n	8003b88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003bc4:	bf00      	nop
 8003bc6:	3724      	adds	r7, #36	; 0x24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b095      	sub	sp, #84	; 0x54
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bf8:	643a      	str	r2, [r7, #64]	; 0x40
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e5      	bne.n	8003bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e5      	bne.n	8003c0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d119      	bne.n	8003c7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f023 0310 	bic.w	r3, r3, #16
 8003c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c68:	61ba      	str	r2, [r7, #24]
 8003c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6979      	ldr	r1, [r7, #20]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	613b      	str	r3, [r7, #16]
   return(result);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e5      	bne.n	8003c48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c8a:	bf00      	nop
 8003c8c:	3754      	adds	r7, #84	; 0x54
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c9c:	b0c0      	sub	sp, #256	; 0x100
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	68d9      	ldr	r1, [r3, #12]
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	ea40 0301 	orr.w	r3, r0, r1
 8003cc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cf0:	f021 010c 	bic.w	r1, r1, #12
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	6999      	ldr	r1, [r3, #24]
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	ea40 0301 	orr.w	r3, r0, r1
 8003d1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b8f      	ldr	r3, [pc, #572]	; (8003f64 <UART_SetConfig+0x2cc>)
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d005      	beq.n	8003d38 <UART_SetConfig+0xa0>
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b8d      	ldr	r3, [pc, #564]	; (8003f68 <UART_SetConfig+0x2d0>)
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d104      	bne.n	8003d42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7ff fcd0 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8003d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d40:	e003      	b.n	8003d4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d42:	f7ff fcb7 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8003d46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d54:	f040 810c 	bne.w	8003f70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	1891      	adds	r1, r2, r2
 8003d70:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d72:	415b      	adcs	r3, r3
 8003d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	eb12 0801 	adds.w	r8, r2, r1
 8003d80:	4629      	mov	r1, r5
 8003d82:	eb43 0901 	adc.w	r9, r3, r1
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d9a:	4690      	mov	r8, r2
 8003d9c:	4699      	mov	r9, r3
 8003d9e:	4623      	mov	r3, r4
 8003da0:	eb18 0303 	adds.w	r3, r8, r3
 8003da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003da8:	462b      	mov	r3, r5
 8003daa:	eb49 0303 	adc.w	r3, r9, r3
 8003dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	18db      	adds	r3, r3, r3
 8003dca:	653b      	str	r3, [r7, #80]	; 0x50
 8003dcc:	4613      	mov	r3, r2
 8003dce:	eb42 0303 	adc.w	r3, r2, r3
 8003dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ddc:	f7fc fa58 	bl	8000290 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003de6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	011c      	lsls	r4, r3, #4
 8003dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003df8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e10:	4641      	mov	r1, r8
 8003e12:	eb12 0a01 	adds.w	sl, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb43 0b01 	adc.w	fp, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e30:	4692      	mov	sl, r2
 8003e32:	469b      	mov	fp, r3
 8003e34:	4643      	mov	r3, r8
 8003e36:	eb1a 0303 	adds.w	r3, sl, r3
 8003e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	eb4b 0303 	adc.w	r3, fp, r3
 8003e44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	18db      	adds	r3, r3, r3
 8003e60:	643b      	str	r3, [r7, #64]	; 0x40
 8003e62:	4613      	mov	r3, r2
 8003e64:	eb42 0303 	adc.w	r3, r2, r3
 8003e68:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e72:	f7fc fa0d 	bl	8000290 <__aeabi_uldivmod>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	2264      	movs	r2, #100	; 0x64
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	1acb      	subs	r3, r1, r3
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e92:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003e94:	fba3 2302 	umull	r2, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ea0:	441c      	add	r4, r3
 8003ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003eb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	1891      	adds	r1, r2, r2
 8003eba:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ebc:	415b      	adcs	r3, r3
 8003ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	1851      	adds	r1, r2, r1
 8003ec8:	6339      	str	r1, [r7, #48]	; 0x30
 8003eca:	4649      	mov	r1, r9
 8003ecc:	414b      	adcs	r3, r1
 8003ece:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003edc:	4659      	mov	r1, fp
 8003ede:	00cb      	lsls	r3, r1, #3
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	00ca      	lsls	r2, r1, #3
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef8:	464b      	mov	r3, r9
 8003efa:	460a      	mov	r2, r1
 8003efc:	eb42 0303 	adc.w	r3, r2, r3
 8003f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f18:	460b      	mov	r3, r1
 8003f1a:	18db      	adds	r3, r3, r3
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1e:	4613      	mov	r3, r2
 8003f20:	eb42 0303 	adc.w	r3, r2, r3
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f2e:	f7fc f9af 	bl	8000290 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	; 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	3332      	adds	r3, #50	; 0x32
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <UART_SetConfig+0x2d4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 0207 	and.w	r2, r3, #7
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4422      	add	r2, r4
 8003f5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f60:	e106      	b.n	8004170 <UART_SetConfig+0x4d8>
 8003f62:	bf00      	nop
 8003f64:	40011000 	.word	0x40011000
 8003f68:	40011400 	.word	0x40011400
 8003f6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f82:	4642      	mov	r2, r8
 8003f84:	464b      	mov	r3, r9
 8003f86:	1891      	adds	r1, r2, r2
 8003f88:	6239      	str	r1, [r7, #32]
 8003f8a:	415b      	adcs	r3, r3
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f92:	4641      	mov	r1, r8
 8003f94:	1854      	adds	r4, r2, r1
 8003f96:	4649      	mov	r1, r9
 8003f98:	eb43 0501 	adc.w	r5, r3, r1
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	00eb      	lsls	r3, r5, #3
 8003fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003faa:	00e2      	lsls	r2, r4, #3
 8003fac:	4614      	mov	r4, r2
 8003fae:	461d      	mov	r5, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	18e3      	adds	r3, r4, r3
 8003fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fb8:	464b      	mov	r3, r9
 8003fba:	eb45 0303 	adc.w	r3, r5, r3
 8003fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fde:	4629      	mov	r1, r5
 8003fe0:	008b      	lsls	r3, r1, #2
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe8:	4621      	mov	r1, r4
 8003fea:	008a      	lsls	r2, r1, #2
 8003fec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ff0:	f7fc f94e 	bl	8000290 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4b60      	ldr	r3, [pc, #384]	; (800417c <UART_SetConfig+0x4e4>)
 8003ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	011c      	lsls	r4, r3, #4
 8004002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800400c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004010:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	1891      	adds	r1, r2, r2
 800401a:	61b9      	str	r1, [r7, #24]
 800401c:	415b      	adcs	r3, r3
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004024:	4641      	mov	r1, r8
 8004026:	1851      	adds	r1, r2, r1
 8004028:	6139      	str	r1, [r7, #16]
 800402a:	4649      	mov	r1, r9
 800402c:	414b      	adcs	r3, r1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800403c:	4659      	mov	r1, fp
 800403e:	00cb      	lsls	r3, r1, #3
 8004040:	4651      	mov	r1, sl
 8004042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004046:	4651      	mov	r1, sl
 8004048:	00ca      	lsls	r2, r1, #3
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	4603      	mov	r3, r0
 8004050:	4642      	mov	r2, r8
 8004052:	189b      	adds	r3, r3, r2
 8004054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004058:	464b      	mov	r3, r9
 800405a:	460a      	mov	r2, r1
 800405c:	eb42 0303 	adc.w	r3, r2, r3
 8004060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	67bb      	str	r3, [r7, #120]	; 0x78
 800406e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800407c:	4649      	mov	r1, r9
 800407e:	008b      	lsls	r3, r1, #2
 8004080:	4641      	mov	r1, r8
 8004082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004086:	4641      	mov	r1, r8
 8004088:	008a      	lsls	r2, r1, #2
 800408a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800408e:	f7fc f8ff 	bl	8000290 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4611      	mov	r1, r2
 8004098:	4b38      	ldr	r3, [pc, #224]	; (800417c <UART_SetConfig+0x4e4>)
 800409a:	fba3 2301 	umull	r2, r3, r3, r1
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2264      	movs	r2, #100	; 0x64
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	1acb      	subs	r3, r1, r3
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	3332      	adds	r3, #50	; 0x32
 80040ac:	4a33      	ldr	r2, [pc, #204]	; (800417c <UART_SetConfig+0x4e4>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b8:	441c      	add	r4, r3
 80040ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040be:	2200      	movs	r2, #0
 80040c0:	673b      	str	r3, [r7, #112]	; 0x70
 80040c2:	677a      	str	r2, [r7, #116]	; 0x74
 80040c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	415b      	adcs	r3, r3
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d8:	4641      	mov	r1, r8
 80040da:	1851      	adds	r1, r2, r1
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	4649      	mov	r1, r9
 80040e0:	414b      	adcs	r3, r1
 80040e2:	607b      	str	r3, [r7, #4]
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040f0:	4659      	mov	r1, fp
 80040f2:	00cb      	lsls	r3, r1, #3
 80040f4:	4651      	mov	r1, sl
 80040f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fa:	4651      	mov	r1, sl
 80040fc:	00ca      	lsls	r2, r1, #3
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	4603      	mov	r3, r0
 8004104:	4642      	mov	r2, r8
 8004106:	189b      	adds	r3, r3, r2
 8004108:	66bb      	str	r3, [r7, #104]	; 0x68
 800410a:	464b      	mov	r3, r9
 800410c:	460a      	mov	r2, r1
 800410e:	eb42 0303 	adc.w	r3, r2, r3
 8004112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	663b      	str	r3, [r7, #96]	; 0x60
 800411e:	667a      	str	r2, [r7, #100]	; 0x64
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800412c:	4649      	mov	r1, r9
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	4641      	mov	r1, r8
 8004132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004136:	4641      	mov	r1, r8
 8004138:	008a      	lsls	r2, r1, #2
 800413a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800413e:	f7fc f8a7 	bl	8000290 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <UART_SetConfig+0x4e4>)
 8004148:	fba3 1302 	umull	r1, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2164      	movs	r1, #100	; 0x64
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	3332      	adds	r3, #50	; 0x32
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <UART_SetConfig+0x4e4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4422      	add	r2, r4
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004176:	46bd      	mov	sp, r7
 8004178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800417c:	51eb851f 	.word	0x51eb851f

08004180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004180:	b084      	sub	sp, #16
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	f107 001c 	add.w	r0, r7, #28
 800418e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	2b01      	cmp	r3, #1
 8004196:	d122      	bne.n	80041de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d105      	bne.n	80041d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f001 fbee 	bl	80059b4 <USB_CoreReset>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	e01a      	b.n	8004214 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f001 fbe2 	bl	80059b4 <USB_CoreReset>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	639a      	str	r2, [r3, #56]	; 0x38
 8004206:	e005      	b.n	8004214 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	2b01      	cmp	r3, #1
 8004218:	d10b      	bne.n	8004232 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f043 0206 	orr.w	r2, r3, #6
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800423e:	b004      	add	sp, #16
 8004240:	4770      	bx	lr
	...

08004244 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d165      	bne.n	8004324 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a41      	ldr	r2, [pc, #260]	; (8004360 <USB_SetTurnaroundTime+0x11c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d906      	bls.n	800426e <USB_SetTurnaroundTime+0x2a>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4a40      	ldr	r2, [pc, #256]	; (8004364 <USB_SetTurnaroundTime+0x120>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d202      	bcs.n	800426e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004268:	230f      	movs	r3, #15
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e062      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4a3c      	ldr	r2, [pc, #240]	; (8004364 <USB_SetTurnaroundTime+0x120>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d306      	bcc.n	8004284 <USB_SetTurnaroundTime+0x40>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4a3b      	ldr	r2, [pc, #236]	; (8004368 <USB_SetTurnaroundTime+0x124>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d202      	bcs.n	8004284 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800427e:	230e      	movs	r3, #14
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e057      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a38      	ldr	r2, [pc, #224]	; (8004368 <USB_SetTurnaroundTime+0x124>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d306      	bcc.n	800429a <USB_SetTurnaroundTime+0x56>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a37      	ldr	r2, [pc, #220]	; (800436c <USB_SetTurnaroundTime+0x128>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d202      	bcs.n	800429a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004294:	230d      	movs	r3, #13
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e04c      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4a33      	ldr	r2, [pc, #204]	; (800436c <USB_SetTurnaroundTime+0x128>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d306      	bcc.n	80042b0 <USB_SetTurnaroundTime+0x6c>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4a32      	ldr	r2, [pc, #200]	; (8004370 <USB_SetTurnaroundTime+0x12c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d802      	bhi.n	80042b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042aa:	230c      	movs	r3, #12
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e041      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4a2f      	ldr	r2, [pc, #188]	; (8004370 <USB_SetTurnaroundTime+0x12c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d906      	bls.n	80042c6 <USB_SetTurnaroundTime+0x82>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4a2e      	ldr	r2, [pc, #184]	; (8004374 <USB_SetTurnaroundTime+0x130>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d802      	bhi.n	80042c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042c0:	230b      	movs	r3, #11
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e036      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <USB_SetTurnaroundTime+0x130>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d906      	bls.n	80042dc <USB_SetTurnaroundTime+0x98>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4a29      	ldr	r2, [pc, #164]	; (8004378 <USB_SetTurnaroundTime+0x134>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d802      	bhi.n	80042dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042d6:	230a      	movs	r3, #10
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e02b      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4a26      	ldr	r2, [pc, #152]	; (8004378 <USB_SetTurnaroundTime+0x134>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d906      	bls.n	80042f2 <USB_SetTurnaroundTime+0xae>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4a25      	ldr	r2, [pc, #148]	; (800437c <USB_SetTurnaroundTime+0x138>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d202      	bcs.n	80042f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80042ec:	2309      	movs	r3, #9
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e020      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4a21      	ldr	r2, [pc, #132]	; (800437c <USB_SetTurnaroundTime+0x138>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d306      	bcc.n	8004308 <USB_SetTurnaroundTime+0xc4>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4a20      	ldr	r2, [pc, #128]	; (8004380 <USB_SetTurnaroundTime+0x13c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d802      	bhi.n	8004308 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004302:	2308      	movs	r3, #8
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e015      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a1d      	ldr	r2, [pc, #116]	; (8004380 <USB_SetTurnaroundTime+0x13c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d906      	bls.n	800431e <USB_SetTurnaroundTime+0xda>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <USB_SetTurnaroundTime+0x140>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d202      	bcs.n	800431e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004318:	2307      	movs	r3, #7
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	e00a      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800431e:	2306      	movs	r3, #6
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e007      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800432a:	2309      	movs	r3, #9
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	e001      	b.n	8004334 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004330:	2309      	movs	r3, #9
 8004332:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	029b      	lsls	r3, r3, #10
 8004348:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800434c:	431a      	orrs	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	00d8acbf 	.word	0x00d8acbf
 8004364:	00e4e1c0 	.word	0x00e4e1c0
 8004368:	00f42400 	.word	0x00f42400
 800436c:	01067380 	.word	0x01067380
 8004370:	011a499f 	.word	0x011a499f
 8004374:	01312cff 	.word	0x01312cff
 8004378:	014ca43f 	.word	0x014ca43f
 800437c:	016e3600 	.word	0x016e3600
 8004380:	01a6ab1f 	.word	0x01a6ab1f
 8004384:	01e84800 	.word	0x01e84800

08004388 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 0201 	bic.w	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d115      	bne.n	800441a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043fa:	2001      	movs	r0, #1
 80043fc:	f7fc fdf4 	bl	8000fe8 <HAL_Delay>
      ms++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f001 fa45 	bl	8005896 <USB_GetMode>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d01e      	beq.n	8004450 <USB_SetCurrentMode+0x84>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b31      	cmp	r3, #49	; 0x31
 8004416:	d9f0      	bls.n	80043fa <USB_SetCurrentMode+0x2e>
 8004418:	e01a      	b.n	8004450 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d115      	bne.n	800444c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800442c:	2001      	movs	r0, #1
 800442e:	f7fc fddb 	bl	8000fe8 <HAL_Delay>
      ms++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3301      	adds	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f001 fa2c 	bl	8005896 <USB_GetMode>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <USB_SetCurrentMode+0x84>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b31      	cmp	r3, #49	; 0x31
 8004448:	d9f0      	bls.n	800442c <USB_SetCurrentMode+0x60>
 800444a:	e001      	b.n	8004450 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e005      	b.n	800445c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b32      	cmp	r3, #50	; 0x32
 8004454:	d101      	bne.n	800445a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004464:	b084      	sub	sp, #16
 8004466:	b580      	push	{r7, lr}
 8004468:	b086      	sub	sp, #24
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	e009      	b.n	8004498 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3340      	adds	r3, #64	; 0x40
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	2200      	movs	r2, #0
 8004490:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	3301      	adds	r3, #1
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b0e      	cmp	r3, #14
 800449c:	d9f2      	bls.n	8004484 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800449e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11c      	bne.n	80044de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b2:	f043 0302 	orr.w	r3, r3, #2
 80044b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
 80044dc:	e00b      	b.n	80044f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044fc:	461a      	mov	r2, r3
 80044fe:	2300      	movs	r3, #0
 8004500:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004508:	4619      	mov	r1, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004510:	461a      	mov	r2, r3
 8004512:	680b      	ldr	r3, [r1, #0]
 8004514:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	2b01      	cmp	r3, #1
 800451a:	d10c      	bne.n	8004536 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d104      	bne.n	800452c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004522:	2100      	movs	r1, #0
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f965 	bl	80047f4 <USB_SetDevSpeed>
 800452a:	e008      	b.n	800453e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800452c:	2101      	movs	r1, #1
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f960 	bl	80047f4 <USB_SetDevSpeed>
 8004534:	e003      	b.n	800453e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004536:	2103      	movs	r1, #3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f95b 	bl	80047f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800453e:	2110      	movs	r1, #16
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8f3 	bl	800472c <USB_FlushTxFifo>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f91f 	bl	8004794 <USB_FlushRxFifo>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	461a      	mov	r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	e043      	b.n	8004612 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800459c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a0:	d118      	bne.n	80045d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	461a      	mov	r2, r3
 80045b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	e013      	b.n	80045e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	461a      	mov	r2, r3
 80045cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e008      	b.n	80045e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	461a      	mov	r2, r3
 80045e2:	2300      	movs	r3, #0
 80045e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	461a      	mov	r2, r3
 8004606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800460a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	3301      	adds	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	429a      	cmp	r2, r3
 8004618:	d3b7      	bcc.n	800458a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	e043      	b.n	80046a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004636:	d118      	bne.n	800466a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464a:	461a      	mov	r2, r3
 800464c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e013      	b.n	800467c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004660:	461a      	mov	r2, r3
 8004662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	e008      	b.n	800467c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	461a      	mov	r2, r3
 8004678:	2300      	movs	r3, #0
 800467a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	461a      	mov	r2, r3
 800468a:	2300      	movs	r3, #0
 800468c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3301      	adds	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d3b7      	bcc.n	8004620 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d105      	bne.n	80046e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f043 0210 	orr.w	r2, r3, #16
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <USB_DevInit+0x2c4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f043 0208 	orr.w	r2, r3, #8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d107      	bne.n	8004718 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004710:	f043 0304 	orr.w	r3, r3, #4
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004718:	7dfb      	ldrb	r3, [r7, #23]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004724:	b004      	add	sp, #16
 8004726:	4770      	bx	lr
 8004728:	803c3800 	.word	0x803c3800

0800472c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3301      	adds	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a13      	ldr	r2, [pc, #76]	; (8004790 <USB_FlushTxFifo+0x64>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e01b      	b.n	8004784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	daf2      	bge.n	800473a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	019b      	lsls	r3, r3, #6
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3301      	adds	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a08      	ldr	r2, [pc, #32]	; (8004790 <USB_FlushTxFifo+0x64>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e006      	b.n	8004784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b20      	cmp	r3, #32
 8004780:	d0f0      	beq.n	8004764 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	00030d40 	.word	0x00030d40

08004794 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <USB_FlushRxFifo+0x5c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e018      	b.n	80047e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	daf2      	bge.n	80047a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2210      	movs	r2, #16
 80047c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3301      	adds	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4a08      	ldr	r2, [pc, #32]	; (80047f0 <USB_FlushRxFifo+0x5c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e006      	b.n	80047e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b10      	cmp	r3, #16
 80047e0:	d0f0      	beq.n	80047c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	00030d40 	.word	0x00030d40

080047f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	68f9      	ldr	r1, [r7, #12]
 8004810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004814:	4313      	orrs	r3, r2
 8004816:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004826:	b480      	push	{r7}
 8004828:	b087      	sub	sp, #28
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
 800484a:	e00a      	b.n	8004862 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d002      	beq.n	8004858 <USB_GetDevSpeed+0x32>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b06      	cmp	r3, #6
 8004856:	d102      	bne.n	800485e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004858:	2302      	movs	r3, #2
 800485a:	75fb      	strb	r3, [r7, #23]
 800485c:	e001      	b.n	8004862 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800485e:	230f      	movs	r3, #15
 8004860:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004862:	7dfb      	ldrb	r3, [r7, #23]
}
 8004864:	4618      	mov	r0, r3
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d13a      	bne.n	8004902 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	2101      	movs	r1, #1
 800489e:	fa01 f303 	lsl.w	r3, r1, r3
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	68f9      	ldr	r1, [r7, #12]
 80048a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d155      	bne.n	8004970 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	791b      	ldrb	r3, [r3, #4]
 80048de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	059b      	lsls	r3, r3, #22
 80048e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048e8:	4313      	orrs	r3, r2
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	e036      	b.n	8004970 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004920:	4313      	orrs	r3, r2
 8004922:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11a      	bne.n	8004970 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	791b      	ldrb	r3, [r3, #4]
 8004954:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004956:	430b      	orrs	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d161      	bne.n	8004a60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b2:	d11f      	bne.n	80049f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	2101      	movs	r1, #1
 8004a06:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	68f9      	ldr	r1, [r7, #12]
 8004a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a14:	4013      	ands	r3, r2
 8004a16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1e:	69da      	ldr	r2, [r3, #28]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	43db      	mvns	r3, r3
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a38:	4013      	ands	r3, r2
 8004a3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	0159      	lsls	r1, r3, #5
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	440b      	add	r3, r1
 8004a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a56:	4619      	mov	r1, r3
 8004a58:	4b35      	ldr	r3, [pc, #212]	; (8004b30 <USB_DeactivateEndpoint+0x1b0>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]
 8004a5e:	e060      	b.n	8004b22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a76:	d11f      	bne.n	8004ab8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	2101      	movs	r1, #1
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ad8:	4013      	ands	r3, r2
 8004ada:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	2101      	movs	r1, #1
 8004aee:	fa01 f303 	lsl.w	r3, r1, r3
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	43db      	mvns	r3, r3
 8004af6:	68f9      	ldr	r1, [r7, #12]
 8004af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004afc:	4013      	ands	r3, r2
 8004afe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	0159      	lsls	r1, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	440b      	add	r3, r1
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <USB_DeactivateEndpoint+0x1b4>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	ec337800 	.word	0xec337800
 8004b34:	eff37800 	.word	0xeff37800

08004b38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	f040 815c 	bne.w	8004e12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d132      	bne.n	8004bc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ba4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc0:	0cdb      	lsrs	r3, r3, #19
 8004bc2:	04db      	lsls	r3, r3, #19
 8004bc4:	6113      	str	r3, [r2, #16]
 8004bc6:	e074      	b.n	8004cb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be2:	0cdb      	lsrs	r3, r3, #19
 8004be4:	04db      	lsls	r3, r3, #19
 8004be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6999      	ldr	r1, [r3, #24]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	440b      	add	r3, r1
 8004c24:	1e59      	subs	r1, r3, #1
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c30:	4b9d      	ldr	r3, [pc, #628]	; (8004ea8 <USB_EPStartXfer+0x370>)
 8004c32:	400b      	ands	r3, r1
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	0148      	lsls	r0, r1, #5
 8004c38:	69f9      	ldr	r1, [r7, #28]
 8004c3a:	4401      	add	r1, r0
 8004c3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c40:	4313      	orrs	r3, r2
 8004c42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5a:	69b9      	ldr	r1, [r7, #24]
 8004c5c:	0148      	lsls	r0, r1, #5
 8004c5e:	69f9      	ldr	r1, [r7, #28]
 8004c60:	4401      	add	r1, r0
 8004c62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c66:	4313      	orrs	r3, r2
 8004c68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	791b      	ldrb	r3, [r3, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d11f      	bne.n	8004cb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d14b      	bne.n	8004d50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d009      	beq.n	8004cd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	791b      	ldrb	r3, [r3, #4]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d128      	bne.n	8004d2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d110      	bne.n	8004d0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e00f      	b.n	8004d2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e133      	b.n	8004fb8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	791b      	ldrb	r3, [r3, #4]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d015      	beq.n	8004da4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 811b 	beq.w	8004fb8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	2101      	movs	r1, #1
 8004d94:	fa01 f303 	lsl.w	r3, r1, r3
 8004d98:	69f9      	ldr	r1, [r7, #28]
 8004d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	634b      	str	r3, [r1, #52]	; 0x34
 8004da2:	e109      	b.n	8004fb8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d110      	bne.n	8004dd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e00f      	b.n	8004df6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6919      	ldr	r1, [r3, #16]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	b298      	uxth	r0, r3
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	4603      	mov	r3, r0
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fade 	bl	80053cc <USB_WritePacket>
 8004e10:	e0d2      	b.n	8004fb8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2c:	0cdb      	lsrs	r3, r3, #19
 8004e2e:	04db      	lsls	r3, r3, #19
 8004e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d126      	bne.n	8004eac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e74:	69b9      	ldr	r1, [r7, #24]
 8004e76:	0148      	lsls	r0, r1, #5
 8004e78:	69f9      	ldr	r1, [r7, #28]
 8004e7a:	4401      	add	r1, r0
 8004e7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e80:	4313      	orrs	r3, r2
 8004e82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ea2:	6113      	str	r3, [r2, #16]
 8004ea4:	e03a      	b.n	8004f1c <USB_EPStartXfer+0x3e4>
 8004ea6:	bf00      	nop
 8004ea8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	1e5a      	subs	r2, r3, #1
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	8afa      	ldrh	r2, [r7, #22]
 8004ec8:	fb03 f202 	mul.w	r2, r3, r2
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	8afb      	ldrh	r3, [r7, #22]
 8004ee0:	04d9      	lsls	r1, r3, #19
 8004ee2:	4b38      	ldr	r3, [pc, #224]	; (8004fc4 <USB_EPStartXfer+0x48c>)
 8004ee4:	400b      	ands	r3, r1
 8004ee6:	69b9      	ldr	r1, [r7, #24]
 8004ee8:	0148      	lsls	r0, r1, #5
 8004eea:	69f9      	ldr	r1, [r7, #28]
 8004eec:	4401      	add	r1, r0
 8004eee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	0148      	lsls	r0, r1, #5
 8004f10:	69f9      	ldr	r1, [r7, #28]
 8004f12:	4401      	add	r1, r0
 8004f14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10d      	bne.n	8004f3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6919      	ldr	r1, [r3, #16]
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	791b      	ldrb	r3, [r3, #4]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d128      	bne.n	8004f98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d110      	bne.n	8004f78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e00f      	b.n	8004f98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	1ff80000 	.word	0x1ff80000

08004fc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	f040 80ce 	bne.w	8005186 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d132      	bne.n	8005058 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005010:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	0cdb      	lsrs	r3, r3, #19
 8005052:	04db      	lsls	r3, r3, #19
 8005054:	6113      	str	r3, [r2, #16]
 8005056:	e04e      	b.n	80050f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005072:	0cdb      	lsrs	r3, r3, #19
 8005074:	04db      	lsls	r3, r3, #19
 8005076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005092:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005096:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800509a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d903      	bls.n	80050b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e6:	6939      	ldr	r1, [r7, #16]
 80050e8:	0148      	lsls	r0, r1, #5
 80050ea:	6979      	ldr	r1, [r7, #20]
 80050ec:	4401      	add	r1, r0
 80050ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050f2:	4313      	orrs	r3, r2
 80050f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d11e      	bne.n	800513a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e097      	b.n	800526a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005154:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005158:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8083 	beq.w	800526a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	2101      	movs	r1, #1
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	6979      	ldr	r1, [r7, #20]
 800517c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005180:	4313      	orrs	r3, r2
 8005182:	634b      	str	r3, [r1, #52]	; 0x34
 8005184:	e071      	b.n	800526a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	440a      	add	r2, r1
 800519c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a0:	0cdb      	lsrs	r3, r3, #19
 80051a2:	04db      	lsls	r3, r3, #19
 80051a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005200:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005218:	6939      	ldr	r1, [r7, #16]
 800521a:	0148      	lsls	r0, r1, #5
 800521c:	6979      	ldr	r1, [r7, #20]
 800521e:	4401      	add	r1, r0
 8005220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005224:	4313      	orrs	r3, r2
 8005226:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10d      	bne.n	800524a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6919      	ldr	r1, [r3, #16]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	460a      	mov	r2, r1
 8005248:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005264:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005268:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d14a      	bne.n	800532c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ae:	f040 8086 	bne.w	80053be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	7812      	ldrb	r2, [r2, #0]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	7812      	ldrb	r2, [r2, #0]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f242 7210 	movw	r2, #10000	; 0x2710
 8005306:	4293      	cmp	r3, r2
 8005308:	d902      	bls.n	8005310 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	75fb      	strb	r3, [r7, #23]
          break;
 800530e:	e056      	b.n	80053be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005328:	d0e7      	beq.n	80052fa <USB_EPStopXfer+0x82>
 800532a:	e048      	b.n	80053be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005344:	d13b      	bne.n	80053be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005368:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	7812      	ldrb	r2, [r2, #0]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	440a      	add	r2, r1
 8005384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800538c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3301      	adds	r3, #1
 8005392:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f242 7210 	movw	r2, #10000	; 0x2710
 800539a:	4293      	cmp	r3, r2
 800539c:	d902      	bls.n	80053a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	75fb      	strb	r3, [r7, #23]
          break;
 80053a2:	e00c      	b.n	80053be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053bc:	d0e7      	beq.n	800538e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b089      	sub	sp, #36	; 0x24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	4611      	mov	r1, r2
 80053d8:	461a      	mov	r2, r3
 80053da:	460b      	mov	r3, r1
 80053dc:	71fb      	strb	r3, [r7, #7]
 80053de:	4613      	mov	r3, r2
 80053e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d123      	bne.n	800543a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053f2:	88bb      	ldrh	r3, [r7, #4]
 80053f4:	3303      	adds	r3, #3
 80053f6:	089b      	lsrs	r3, r3, #2
 80053f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e018      	b.n	8005432 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	031a      	lsls	r2, r3, #12
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	4413      	add	r3, r2
 8005408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540c:	461a      	mov	r2, r3
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	3301      	adds	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	3301      	adds	r3, #1
 800541e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	3301      	adds	r3, #1
 8005424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3301      	adds	r3, #1
 800542a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	3301      	adds	r3, #1
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	429a      	cmp	r2, r3
 8005438:	d3e2      	bcc.n	8005400 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3724      	adds	r7, #36	; 0x24
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005448:	b480      	push	{r7}
 800544a:	b08b      	sub	sp, #44	; 0x2c
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	089b      	lsrs	r3, r3, #2
 8005462:	b29b      	uxth	r3, r3
 8005464:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800546e:	2300      	movs	r3, #0
 8005470:	623b      	str	r3, [r7, #32]
 8005472:	e014      	b.n	800549e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	3301      	adds	r3, #1
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	3301      	adds	r3, #1
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	3301      	adds	r3, #1
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	3301      	adds	r3, #1
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	3301      	adds	r3, #1
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	6a3a      	ldr	r2, [r7, #32]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d3e6      	bcc.n	8005474 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054a6:	8bfb      	ldrh	r3, [r7, #30]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01e      	beq.n	80054ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b6:	461a      	mov	r2, r3
 80054b8:	f107 0310 	add.w	r3, r7, #16
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	fa22 f303 	lsr.w	r3, r2, r3
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	701a      	strb	r2, [r3, #0]
      i++;
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	3301      	adds	r3, #1
 80054d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	3301      	adds	r3, #1
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054de:	8bfb      	ldrh	r3, [r7, #30]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054e4:	8bfb      	ldrh	r3, [r7, #30]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1ea      	bne.n	80054c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	372c      	adds	r7, #44	; 0x2c
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d12c      	bne.n	800556e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	db12      	blt.n	800554c <USB_EPSetStall+0x54>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00f      	beq.n	800554c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800554a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e02b      	b.n	80055c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	db12      	blt.n	80055a6 <USB_EPSetStall+0xae>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00f      	beq.n	80055a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d128      	bne.n	8005642 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	440a      	add	r2, r1
 8005606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800560e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	791b      	ldrb	r3, [r3, #4]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d003      	beq.n	8005620 <USB_EPClearStall+0x4c>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	791b      	ldrb	r3, [r3, #4]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d138      	bne.n	8005692 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	e027      	b.n	8005692 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005660:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	791b      	ldrb	r3, [r3, #4]
 8005666:	2b03      	cmp	r3, #3
 8005668:	d003      	beq.n	8005672 <USB_EPClearStall+0x9e>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	791b      	ldrb	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d10f      	bne.n	8005692 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005690:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056da:	4313      	orrs	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571a:	f023 0302 	bic.w	r3, r3, #2
 800571e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005748:	f023 0303 	bic.w	r3, r3, #3
 800574c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4013      	ands	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005788:	68fb      	ldr	r3, [r7, #12]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	4013      	ands	r3, r2
 80057b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	0c1b      	lsrs	r3, r3, #16
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	b29b      	uxth	r3, r3
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057fe:	b480      	push	{r7}
 8005800:	b085      	sub	sp, #20
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800582c:	68bb      	ldr	r3, [r7, #8]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800583a:	b480      	push	{r7}
 800583c:	b087      	sub	sp, #28
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	fa22 f303 	lsr.w	r3, r2, r3
 800586a:	01db      	lsls	r3, r3, #7
 800586c:	b2db      	uxtb	r3, r3
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4013      	ands	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005888:	68bb      	ldr	r3, [r7, #8]
}
 800588a:	4618      	mov	r0, r3
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0301 	and.w	r3, r3, #1
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058d0:	f023 0307 	bic.w	r3, r3, #7
 80058d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	460b      	mov	r3, r1
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	333c      	adds	r3, #60	; 0x3c
 800590e:	3304      	adds	r3, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4a26      	ldr	r2, [pc, #152]	; (80059b0 <USB_EP0_OutStart+0xb8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d90a      	bls.n	8005932 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800592c:	d101      	bne.n	8005932 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e037      	b.n	80059a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	461a      	mov	r2, r3
 800593a:	2300      	movs	r3, #0
 800593c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005960:	f043 0318 	orr.w	r3, r3, #24
 8005964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005974:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005978:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800597a:	7afb      	ldrb	r3, [r7, #11]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d10f      	bne.n	80059a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	461a      	mov	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800599e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	4f54300a 	.word	0x4f54300a

080059b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <USB_CoreReset+0x64>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d901      	bls.n	80059d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e01b      	b.n	8005a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	daf2      	bge.n	80059c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f043 0201 	orr.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <USB_CoreReset+0x64>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e006      	b.n	8005a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d0f0      	beq.n	80059ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	00030d40 	.word	0x00030d40

08005a1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a2c:	f003 ff82 	bl	8009934 <USBD_static_malloc>
 8005a30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d109      	bne.n	8005a4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	32b0      	adds	r2, #176	; 0xb0
 8005a42:	2100      	movs	r1, #0
 8005a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e0d4      	b.n	8005bf6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005a4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005a50:	2100      	movs	r1, #0
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f004 f88e 	bl	8009b74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	32b0      	adds	r2, #176	; 0xb0
 8005a62:	68f9      	ldr	r1, [r7, #12]
 8005a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	32b0      	adds	r2, #176	; 0xb0
 8005a72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	7c1b      	ldrb	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d138      	bne.n	8005af6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a84:	4b5e      	ldr	r3, [pc, #376]	; (8005c00 <USBD_CDC_Init+0x1e4>)
 8005a86:	7819      	ldrb	r1, [r3, #0]
 8005a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f003 fe2d 	bl	80096ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a94:	4b5a      	ldr	r3, [pc, #360]	; (8005c00 <USBD_CDC_Init+0x1e4>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3324      	adds	r3, #36	; 0x24
 8005aaa:	2201      	movs	r2, #1
 8005aac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005aae:	4b55      	ldr	r3, [pc, #340]	; (8005c04 <USBD_CDC_Init+0x1e8>)
 8005ab0:	7819      	ldrb	r1, [r3, #0]
 8005ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f003 fe18 	bl	80096ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005abe:	4b51      	ldr	r3, [pc, #324]	; (8005c04 <USBD_CDC_Init+0x1e8>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f003 020f 	and.w	r2, r3, #15
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ada:	4b4b      	ldr	r3, [pc, #300]	; (8005c08 <USBD_CDC_Init+0x1ec>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	f003 020f 	and.w	r2, r3, #15
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	3326      	adds	r3, #38	; 0x26
 8005af0:	2210      	movs	r2, #16
 8005af2:	801a      	strh	r2, [r3, #0]
 8005af4:	e035      	b.n	8005b62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005af6:	4b42      	ldr	r3, [pc, #264]	; (8005c00 <USBD_CDC_Init+0x1e4>)
 8005af8:	7819      	ldrb	r1, [r3, #0]
 8005afa:	2340      	movs	r3, #64	; 0x40
 8005afc:	2202      	movs	r2, #2
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f003 fdf5 	bl	80096ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005b04:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <USBD_CDC_Init+0x1e4>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	f003 020f 	and.w	r2, r3, #15
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	3324      	adds	r3, #36	; 0x24
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005b1e:	4b39      	ldr	r3, [pc, #228]	; (8005c04 <USBD_CDC_Init+0x1e8>)
 8005b20:	7819      	ldrb	r1, [r3, #0]
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	2202      	movs	r2, #2
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f003 fde1 	bl	80096ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005b2c:	4b35      	ldr	r3, [pc, #212]	; (8005c04 <USBD_CDC_Init+0x1e8>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 020f 	and.w	r2, r3, #15
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b44:	2201      	movs	r2, #1
 8005b46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b48:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <USBD_CDC_Init+0x1ec>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f003 020f 	and.w	r2, r3, #15
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3326      	adds	r3, #38	; 0x26
 8005b5e:	2210      	movs	r2, #16
 8005b60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b62:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <USBD_CDC_Init+0x1ec>)
 8005b64:	7819      	ldrb	r1, [r3, #0]
 8005b66:	2308      	movs	r3, #8
 8005b68:	2203      	movs	r2, #3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f003 fdbf 	bl	80096ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005b70:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <USBD_CDC_Init+0x1ec>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	3324      	adds	r3, #36	; 0x24
 8005b86:	2201      	movs	r2, #1
 8005b88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	33b0      	adds	r3, #176	; 0xb0
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e018      	b.n	8005bf6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7c1b      	ldrb	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <USBD_CDC_Init+0x1e8>)
 8005bce:	7819      	ldrb	r1, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f003 fe76 	bl	80098cc <USBD_LL_PrepareReceive>
 8005be0:	e008      	b.n	8005bf4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005be2:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <USBD_CDC_Init+0x1e8>)
 8005be4:	7819      	ldrb	r1, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bec:	2340      	movs	r3, #64	; 0x40
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f003 fe6c 	bl	80098cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	200000a3 	.word	0x200000a3
 8005c04:	200000a4 	.word	0x200000a4
 8005c08:	200000a5 	.word	0x200000a5

08005c0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005c18:	4b3a      	ldr	r3, [pc, #232]	; (8005d04 <USBD_CDC_DeInit+0xf8>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f003 fd8b 	bl	800973a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005c24:	4b37      	ldr	r3, [pc, #220]	; (8005d04 <USBD_CDC_DeInit+0xf8>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 020f 	and.w	r2, r3, #15
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	3324      	adds	r3, #36	; 0x24
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005c3e:	4b32      	ldr	r3, [pc, #200]	; (8005d08 <USBD_CDC_DeInit+0xfc>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f003 fd78 	bl	800973a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <USBD_CDC_DeInit+0xfc>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	f003 020f 	and.w	r2, r3, #15
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c62:	2200      	movs	r2, #0
 8005c64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005c66:	4b29      	ldr	r3, [pc, #164]	; (8005d0c <USBD_CDC_DeInit+0x100>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f003 fd64 	bl	800973a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005c72:	4b26      	ldr	r3, [pc, #152]	; (8005d0c <USBD_CDC_DeInit+0x100>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 020f 	and.w	r2, r3, #15
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	3324      	adds	r3, #36	; 0x24
 8005c88:	2200      	movs	r2, #0
 8005c8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005c8c:	4b1f      	ldr	r3, [pc, #124]	; (8005d0c <USBD_CDC_DeInit+0x100>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f003 020f 	and.w	r2, r3, #15
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3326      	adds	r3, #38	; 0x26
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	32b0      	adds	r2, #176	; 0xb0
 8005cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01f      	beq.n	8005cf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	33b0      	adds	r3, #176	; 0xb0
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	32b0      	adds	r2, #176	; 0xb0
 8005cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f003 fe38 	bl	8009950 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	32b0      	adds	r2, #176	; 0xb0
 8005cea:	2100      	movs	r1, #0
 8005cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	200000a3 	.word	0x200000a3
 8005d08:	200000a4 	.word	0x200000a4
 8005d0c:	200000a5 	.word	0x200000a5

08005d10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	32b0      	adds	r2, #176	; 0xb0
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e0bf      	b.n	8005ec0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d050      	beq.n	8005dee <USBD_CDC_Setup+0xde>
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	f040 80af 	bne.w	8005eb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	88db      	ldrh	r3, [r3, #6]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d03a      	beq.n	8005dd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	b25b      	sxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	da1b      	bge.n	8005d9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	33b0      	adds	r3, #176	; 0xb0
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005d7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	88d2      	ldrh	r2, [r2, #6]
 8005d80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	88db      	ldrh	r3, [r3, #6]
 8005d86:	2b07      	cmp	r3, #7
 8005d88:	bf28      	it	cs
 8005d8a:	2307      	movcs	r3, #7
 8005d8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	89fa      	ldrh	r2, [r7, #14]
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 fd89 	bl	80078ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005d9a:	e090      	b.n	8005ebe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	785a      	ldrb	r2, [r3, #1]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	88db      	ldrh	r3, [r3, #6]
 8005daa:	2b3f      	cmp	r3, #63	; 0x3f
 8005dac:	d803      	bhi.n	8005db6 <USBD_CDC_Setup+0xa6>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	88db      	ldrh	r3, [r3, #6]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	e000      	b.n	8005db8 <USBD_CDC_Setup+0xa8>
 8005db6:	2240      	movs	r2, #64	; 0x40
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005dbe:	6939      	ldr	r1, [r7, #16]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 fd9b 	bl	8007904 <USBD_CtlPrepareRx>
      break;
 8005dce:	e076      	b.n	8005ebe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	33b0      	adds	r3, #176	; 0xb0
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	7850      	ldrb	r0, [r2, #1]
 8005de6:	2200      	movs	r2, #0
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	4798      	blx	r3
      break;
 8005dec:	e067      	b.n	8005ebe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b0b      	cmp	r3, #11
 8005df4:	d851      	bhi.n	8005e9a <USBD_CDC_Setup+0x18a>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <USBD_CDC_Setup+0xec>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e2d 	.word	0x08005e2d
 8005e00:	08005ea9 	.word	0x08005ea9
 8005e04:	08005e9b 	.word	0x08005e9b
 8005e08:	08005e9b 	.word	0x08005e9b
 8005e0c:	08005e9b 	.word	0x08005e9b
 8005e10:	08005e9b 	.word	0x08005e9b
 8005e14:	08005e9b 	.word	0x08005e9b
 8005e18:	08005e9b 	.word	0x08005e9b
 8005e1c:	08005e9b 	.word	0x08005e9b
 8005e20:	08005e9b 	.word	0x08005e9b
 8005e24:	08005e57 	.word	0x08005e57
 8005e28:	08005e81 	.word	0x08005e81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d107      	bne.n	8005e48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e38:	f107 030a 	add.w	r3, r7, #10
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 fd33 	bl	80078ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e46:	e032      	b.n	8005eae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fcbd 	bl	80077ca <USBD_CtlError>
            ret = USBD_FAIL;
 8005e50:	2303      	movs	r3, #3
 8005e52:	75fb      	strb	r3, [r7, #23]
          break;
 8005e54:	e02b      	b.n	8005eae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d107      	bne.n	8005e72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e62:	f107 030d 	add.w	r3, r7, #13
 8005e66:	2201      	movs	r2, #1
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 fd1e 	bl	80078ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e70:	e01d      	b.n	8005eae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 fca8 	bl	80077ca <USBD_CtlError>
            ret = USBD_FAIL;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e7e:	e016      	b.n	8005eae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d00f      	beq.n	8005eac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f001 fc9b 	bl	80077ca <USBD_CtlError>
            ret = USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e98:	e008      	b.n	8005eac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 fc94 	bl	80077ca <USBD_CtlError>
          ret = USBD_FAIL;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ea6:	e002      	b.n	8005eae <USBD_CDC_Setup+0x19e>
          break;
 8005ea8:	bf00      	nop
 8005eaa:	e008      	b.n	8005ebe <USBD_CDC_Setup+0x1ae>
          break;
 8005eac:	bf00      	nop
      }
      break;
 8005eae:	e006      	b.n	8005ebe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 fc89 	bl	80077ca <USBD_CtlError>
      ret = USBD_FAIL;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	75fb      	strb	r3, [r7, #23]
      break;
 8005ebc:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005eda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	32b0      	adds	r2, #176	; 0xb0
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e065      	b.n	8005fbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	32b0      	adds	r2, #176	; 0xb0
 8005efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	f003 020f 	and.w	r2, r3, #15
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3318      	adds	r3, #24
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d02f      	beq.n	8005f7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	f003 020f 	and.w	r2, r3, #15
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	3318      	adds	r3, #24
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	f003 010f 	and.w	r1, r3, #15
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	440b      	add	r3, r1
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4403      	add	r3, r0
 8005f44:	3348      	adds	r3, #72	; 0x48
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d112      	bne.n	8005f7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	f003 020f 	and.w	r2, r3, #15
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	3318      	adds	r3, #24
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f6e:	78f9      	ldrb	r1, [r7, #3]
 8005f70:	2300      	movs	r3, #0
 8005f72:	2200      	movs	r2, #0
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f003 fc88 	bl	800988a <USBD_LL_Transmit>
 8005f7a:	e01f      	b.n	8005fbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	33b0      	adds	r3, #176	; 0xb0
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d010      	beq.n	8005fbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	33b0      	adds	r3, #176	; 0xb0
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005fb8:	78fa      	ldrb	r2, [r7, #3]
 8005fba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	32b0      	adds	r2, #176	; 0xb0
 8005fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	32b0      	adds	r2, #176	; 0xb0
 8005fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e01a      	b.n	800602e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f003 fc86 	bl	800990e <USBD_LL_GetRxDataSize>
 8006002:	4602      	mov	r2, r0
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	33b0      	adds	r3, #176	; 0xb0
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006028:	4611      	mov	r1, r2
 800602a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	32b0      	adds	r2, #176	; 0xb0
 8006048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006054:	2303      	movs	r3, #3
 8006056:	e025      	b.n	80060a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	33b0      	adds	r3, #176	; 0xb0
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01a      	beq.n	80060a2 <USBD_CDC_EP0_RxReady+0x6c>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006072:	2bff      	cmp	r3, #255	; 0xff
 8006074:	d015      	beq.n	80060a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	33b0      	adds	r3, #176	; 0xb0
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800608e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006096:	b292      	uxth	r2, r2
 8006098:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	22ff      	movs	r2, #255	; 0xff
 800609e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060b4:	2182      	movs	r1, #130	; 0x82
 80060b6:	4818      	ldr	r0, [pc, #96]	; (8006118 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060b8:	f000 fd4f 	bl	8006b5a <USBD_GetEpDesc>
 80060bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060be:	2101      	movs	r1, #1
 80060c0:	4815      	ldr	r0, [pc, #84]	; (8006118 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060c2:	f000 fd4a 	bl	8006b5a <USBD_GetEpDesc>
 80060c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060c8:	2181      	movs	r1, #129	; 0x81
 80060ca:	4813      	ldr	r0, [pc, #76]	; (8006118 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060cc:	f000 fd45 	bl	8006b5a <USBD_GetEpDesc>
 80060d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2210      	movs	r2, #16
 80060dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d006      	beq.n	80060f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ec:	711a      	strb	r2, [r3, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d006      	beq.n	8006106 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006100:	711a      	strb	r2, [r3, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2243      	movs	r2, #67	; 0x43
 800610a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000060 	.word	0x20000060

0800611c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006124:	2182      	movs	r1, #130	; 0x82
 8006126:	4818      	ldr	r0, [pc, #96]	; (8006188 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006128:	f000 fd17 	bl	8006b5a <USBD_GetEpDesc>
 800612c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800612e:	2101      	movs	r1, #1
 8006130:	4815      	ldr	r0, [pc, #84]	; (8006188 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006132:	f000 fd12 	bl	8006b5a <USBD_GetEpDesc>
 8006136:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006138:	2181      	movs	r1, #129	; 0x81
 800613a:	4813      	ldr	r0, [pc, #76]	; (8006188 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800613c:	f000 fd0d 	bl	8006b5a <USBD_GetEpDesc>
 8006140:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2210      	movs	r2, #16
 800614c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d006      	beq.n	8006162 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2200      	movs	r2, #0
 8006158:	711a      	strb	r2, [r3, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f042 0202 	orr.w	r2, r2, #2
 8006160:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d006      	beq.n	8006176 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	711a      	strb	r2, [r3, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f042 0202 	orr.w	r2, r2, #2
 8006174:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2243      	movs	r2, #67	; 0x43
 800617a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800617c:	4b02      	ldr	r3, [pc, #8]	; (8006188 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000060 	.word	0x20000060

0800618c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006194:	2182      	movs	r1, #130	; 0x82
 8006196:	4818      	ldr	r0, [pc, #96]	; (80061f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006198:	f000 fcdf 	bl	8006b5a <USBD_GetEpDesc>
 800619c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800619e:	2101      	movs	r1, #1
 80061a0:	4815      	ldr	r0, [pc, #84]	; (80061f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061a2:	f000 fcda 	bl	8006b5a <USBD_GetEpDesc>
 80061a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80061a8:	2181      	movs	r1, #129	; 0x81
 80061aa:	4813      	ldr	r0, [pc, #76]	; (80061f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80061ac:	f000 fcd5 	bl	8006b5a <USBD_GetEpDesc>
 80061b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2210      	movs	r2, #16
 80061bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d006      	beq.n	80061d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061cc:	711a      	strb	r2, [r3, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d006      	beq.n	80061e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e0:	711a      	strb	r2, [r3, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2243      	movs	r2, #67	; 0x43
 80061ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80061ec:	4b02      	ldr	r3, [pc, #8]	; (80061f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000060 	.word	0x20000060

080061fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	220a      	movs	r2, #10
 8006208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800620a:	4b03      	ldr	r3, [pc, #12]	; (8006218 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	2000001c 	.word	0x2000001c

0800621c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800622c:	2303      	movs	r3, #3
 800622e:	e009      	b.n	8006244 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	33b0      	adds	r3, #176	; 0xb0
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	32b0      	adds	r2, #176	; 0xb0
 8006266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006272:	2303      	movs	r3, #3
 8006274:	e008      	b.n	8006288 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	32b0      	adds	r2, #176	; 0xb0
 80062a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e004      	b.n	80062c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	32b0      	adds	r2, #176	; 0xb0
 80062e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	32b0      	adds	r2, #176	; 0xb0
 80062f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80062fe:	2303      	movs	r3, #3
 8006300:	e025      	b.n	800634e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11f      	bne.n	800634c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2201      	movs	r2, #1
 8006310:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <USBD_CDC_TransmitPacket+0x88>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	f003 020f 	and.w	r2, r3, #15
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4403      	add	r3, r0
 800632e:	3318      	adds	r3, #24
 8006330:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006332:	4b09      	ldr	r3, [pc, #36]	; (8006358 <USBD_CDC_TransmitPacket+0x88>)
 8006334:	7819      	ldrb	r1, [r3, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f003 faa1 	bl	800988a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	200000a3 	.word	0x200000a3

0800635c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	32b0      	adds	r2, #176	; 0xb0
 800636e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006372:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	32b0      	adds	r2, #176	; 0xb0
 800637e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006386:	2303      	movs	r3, #3
 8006388:	e018      	b.n	80063bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7c1b      	ldrb	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006392:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <USBD_CDC_ReceivePacket+0x68>)
 8006394:	7819      	ldrb	r1, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800639c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f003 fa93 	bl	80098cc <USBD_LL_PrepareReceive>
 80063a6:	e008      	b.n	80063ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <USBD_CDC_ReceivePacket+0x68>)
 80063aa:	7819      	ldrb	r1, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063b2:	2340      	movs	r3, #64	; 0x40
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f003 fa89 	bl	80098cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	200000a4 	.word	0x200000a4

080063c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e01f      	b.n	8006420 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	79fa      	ldrb	r2, [r7, #7]
 8006412:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f003 f903 	bl	8009620 <USBD_LL_Init>
 800641a:	4603      	mov	r3, r0
 800641c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e025      	b.n	800648c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	32ae      	adds	r2, #174	; 0xae
 8006452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00f      	beq.n	800647c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	32ae      	adds	r2, #174	; 0xae
 8006466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	f107 020e 	add.w	r2, r7, #14
 8006470:	4610      	mov	r0, r2
 8006472:	4798      	blx	r3
 8006474:	4602      	mov	r2, r0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f003 f90b 	bl	80096b8 <USBD_LL_Start>
 80064a2:	4603      	mov	r3, r0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d009      	beq.n	80064f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	78fa      	ldrb	r2, [r7, #3]
 80064e6:	4611      	mov	r1, r2
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	4798      	blx	r3
 80064ec:	4603      	mov	r3, r0
 80064ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	78fa      	ldrb	r2, [r7, #3]
 8006514:	4611      	mov	r1, r2
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006520:	2303      	movs	r3, #3
 8006522:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f001 f908 	bl	8007756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006554:	461a      	mov	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2b02      	cmp	r3, #2
 8006568:	d01a      	beq.n	80065a0 <USBD_LL_SetupStage+0x72>
 800656a:	2b02      	cmp	r3, #2
 800656c:	d822      	bhi.n	80065b4 <USBD_LL_SetupStage+0x86>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <USBD_LL_SetupStage+0x4a>
 8006572:	2b01      	cmp	r3, #1
 8006574:	d00a      	beq.n	800658c <USBD_LL_SetupStage+0x5e>
 8006576:	e01d      	b.n	80065b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fb5f 	bl	8006c44 <USBD_StdDevReq>
 8006586:	4603      	mov	r3, r0
 8006588:	73fb      	strb	r3, [r7, #15]
      break;
 800658a:	e020      	b.n	80065ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fbc7 	bl	8006d28 <USBD_StdItfReq>
 800659a:	4603      	mov	r3, r0
 800659c:	73fb      	strb	r3, [r7, #15]
      break;
 800659e:	e016      	b.n	80065ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fc29 	bl	8006e00 <USBD_StdEPReq>
 80065ae:	4603      	mov	r3, r0
 80065b0:	73fb      	strb	r3, [r7, #15]
      break;
 80065b2:	e00c      	b.n	80065ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f003 f8d8 	bl	8009778 <USBD_LL_StallEP>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73fb      	strb	r3, [r7, #15]
      break;
 80065cc:	bf00      	nop
  }

  return ret;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	460b      	mov	r3, r1
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80065ea:	7afb      	ldrb	r3, [r7, #11]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d16e      	bne.n	80066ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065fe:	2b03      	cmp	r3, #3
 8006600:	f040 8098 	bne.w	8006734 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	429a      	cmp	r2, r3
 800660e:	d913      	bls.n	8006638 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	1ad2      	subs	r2, r2, r3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	4293      	cmp	r3, r2
 8006628:	bf28      	it	cs
 800662a:	4613      	movcs	r3, r2
 800662c:	461a      	mov	r2, r3
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f001 f984 	bl	800793e <USBD_CtlContinueRx>
 8006636:	e07d      	b.n	8006734 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800663e:	f003 031f 	and.w	r3, r3, #31
 8006642:	2b02      	cmp	r3, #2
 8006644:	d014      	beq.n	8006670 <USBD_LL_DataOutStage+0x98>
 8006646:	2b02      	cmp	r3, #2
 8006648:	d81d      	bhi.n	8006686 <USBD_LL_DataOutStage+0xae>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <USBD_LL_DataOutStage+0x7c>
 800664e:	2b01      	cmp	r3, #1
 8006650:	d003      	beq.n	800665a <USBD_LL_DataOutStage+0x82>
 8006652:	e018      	b.n	8006686 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	75bb      	strb	r3, [r7, #22]
            break;
 8006658:	e018      	b.n	800668c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006660:	b2db      	uxtb	r3, r3
 8006662:	4619      	mov	r1, r3
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fa5e 	bl	8006b26 <USBD_CoreFindIF>
 800666a:	4603      	mov	r3, r0
 800666c:	75bb      	strb	r3, [r7, #22]
            break;
 800666e:	e00d      	b.n	800668c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006676:	b2db      	uxtb	r3, r3
 8006678:	4619      	mov	r1, r3
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fa60 	bl	8006b40 <USBD_CoreFindEP>
 8006680:	4603      	mov	r3, r0
 8006682:	75bb      	strb	r3, [r7, #22]
            break;
 8006684:	e002      	b.n	800668c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	75bb      	strb	r3, [r7, #22]
            break;
 800668a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800668c:	7dbb      	ldrb	r3, [r7, #22]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d119      	bne.n	80066c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b03      	cmp	r3, #3
 800669c:	d113      	bne.n	80066c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800669e:	7dba      	ldrb	r2, [r7, #22]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	32ae      	adds	r2, #174	; 0xae
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80066ae:	7dba      	ldrb	r2, [r7, #22]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80066b6:	7dba      	ldrb	r2, [r7, #22]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	32ae      	adds	r2, #174	; 0xae
 80066bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f001 f94a 	bl	8007960 <USBD_CtlSendStatus>
 80066cc:	e032      	b.n	8006734 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80066ce:	7afb      	ldrb	r3, [r7, #11]
 80066d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	4619      	mov	r1, r3
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fa31 	bl	8006b40 <USBD_CoreFindEP>
 80066de:	4603      	mov	r3, r0
 80066e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066e2:	7dbb      	ldrb	r3, [r7, #22]
 80066e4:	2bff      	cmp	r3, #255	; 0xff
 80066e6:	d025      	beq.n	8006734 <USBD_LL_DataOutStage+0x15c>
 80066e8:	7dbb      	ldrb	r3, [r7, #22]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d122      	bne.n	8006734 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d117      	bne.n	800672a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80066fa:	7dba      	ldrb	r2, [r7, #22]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	32ae      	adds	r2, #174	; 0xae
 8006700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00f      	beq.n	800672a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800670a:	7dba      	ldrb	r2, [r7, #22]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006712:	7dba      	ldrb	r2, [r7, #22]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	32ae      	adds	r2, #174	; 0xae
 8006718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	7afa      	ldrb	r2, [r7, #11]
 8006720:	4611      	mov	r1, r2
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	4798      	blx	r3
 8006726:	4603      	mov	r3, r0
 8006728:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	e000      	b.n	8006736 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	460b      	mov	r3, r1
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d16f      	bne.n	8006832 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3314      	adds	r3, #20
 8006756:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800675e:	2b02      	cmp	r3, #2
 8006760:	d15a      	bne.n	8006818 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	429a      	cmp	r2, r3
 800676c:	d914      	bls.n	8006798 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	461a      	mov	r2, r3
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f001 f8ac 	bl	80078e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800678a:	2300      	movs	r3, #0
 800678c:	2200      	movs	r2, #0
 800678e:	2100      	movs	r1, #0
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f003 f89b 	bl	80098cc <USBD_LL_PrepareReceive>
 8006796:	e03f      	b.n	8006818 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d11c      	bne.n	80067de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d316      	bcc.n	80067de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d20f      	bcs.n	80067de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067be:	2200      	movs	r2, #0
 80067c0:	2100      	movs	r1, #0
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f001 f88d 	bl	80078e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067d0:	2300      	movs	r3, #0
 80067d2:	2200      	movs	r2, #0
 80067d4:	2100      	movs	r1, #0
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f003 f878 	bl	80098cc <USBD_LL_PrepareReceive>
 80067dc:	e01c      	b.n	8006818 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d10f      	bne.n	800680a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f002 ffb3 	bl	8009778 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f001 f8b7 	bl	8007986 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d03a      	beq.n	8006898 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7ff fe42 	bl	80064ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006830:	e032      	b.n	8006898 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006832:	7afb      	ldrb	r3, [r7, #11]
 8006834:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006838:	b2db      	uxtb	r3, r3
 800683a:	4619      	mov	r1, r3
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f97f 	bl	8006b40 <USBD_CoreFindEP>
 8006842:	4603      	mov	r3, r0
 8006844:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	2bff      	cmp	r3, #255	; 0xff
 800684a:	d025      	beq.n	8006898 <USBD_LL_DataInStage+0x15a>
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d122      	bne.n	8006898 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b03      	cmp	r3, #3
 800685c:	d11c      	bne.n	8006898 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800685e:	7dfa      	ldrb	r2, [r7, #23]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	32ae      	adds	r2, #174	; 0xae
 8006864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d014      	beq.n	8006898 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800686e:	7dfa      	ldrb	r2, [r7, #23]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006876:	7dfa      	ldrb	r2, [r7, #23]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	32ae      	adds	r2, #174	; 0xae
 800687c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	7afa      	ldrb	r2, [r7, #11]
 8006884:	4611      	mov	r1, r2
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	4798      	blx	r3
 800688a:	4603      	mov	r3, r0
 800688c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800688e:	7dbb      	ldrb	r3, [r7, #22]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006894:	7dbb      	ldrb	r3, [r7, #22]
 8006896:	e000      	b.n	800689a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d014      	beq.n	8006908 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00e      	beq.n	8006908 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6852      	ldr	r2, [r2, #4]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	4611      	mov	r1, r2
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006904:	2303      	movs	r3, #3
 8006906:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006908:	2340      	movs	r3, #64	; 0x40
 800690a:	2200      	movs	r2, #0
 800690c:	2100      	movs	r1, #0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f002 feed 	bl	80096ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2240      	movs	r2, #64	; 0x40
 8006920:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006924:	2340      	movs	r3, #64	; 0x40
 8006926:	2200      	movs	r2, #0
 8006928:	2180      	movs	r1, #128	; 0x80
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f002 fedf 	bl	80096ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2240      	movs	r2, #64	; 0x40
 800693a:	621a      	str	r2, [r3, #32]

  return ret;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	78fa      	ldrb	r2, [r7, #3]
 8006956:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006974:	b2da      	uxtb	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2204      	movs	r2, #4
 8006980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d106      	bne.n	80069b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d110      	bne.n	80069f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	32ae      	adds	r2, #174	; 0xae
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e01c      	b.n	8006a5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d115      	bne.n	8006a5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	32ae      	adds	r2, #174	; 0xae
 8006a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	32ae      	adds	r2, #174	; 0xae
 8006a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	78fa      	ldrb	r2, [r7, #3]
 8006a56:	4611      	mov	r1, r2
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	32ae      	adds	r2, #174	; 0xae
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e01c      	b.n	8006ac2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d115      	bne.n	8006ac0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	32ae      	adds	r2, #174	; 0xae
 8006a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	32ae      	adds	r2, #174	; 0xae
 8006ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	78fa      	ldrb	r2, [r7, #3]
 8006aba:	4611      	mov	r1, r2
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00e      	beq.n	8006b1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6852      	ldr	r2, [r2, #4]
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b086      	sub	sp, #24
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	460b      	mov	r3, r1
 8006b64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	885b      	ldrh	r3, [r3, #2]
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d920      	bls.n	8006bc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b8a:	e013      	b.n	8006bb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b8c:	f107 030a 	add.w	r3, r7, #10
 8006b90:	4619      	mov	r1, r3
 8006b92:	6978      	ldr	r0, [r7, #20]
 8006b94:	f000 f81b 	bl	8006bce <USBD_GetNextDesc>
 8006b98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	785b      	ldrb	r3, [r3, #1]
 8006b9e:	2b05      	cmp	r3, #5
 8006ba0:	d108      	bne.n	8006bb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	789b      	ldrb	r3, [r3, #2]
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d008      	beq.n	8006bc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	885b      	ldrh	r3, [r3, #2]
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	897b      	ldrh	r3, [r7, #10]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d8e5      	bhi.n	8006b8c <USBD_GetEpDesc+0x32>
 8006bc0:	e000      	b.n	8006bc4 <USBD_GetEpDesc+0x6a>
          break;
 8006bc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006bc4:	693b      	ldr	r3, [r7, #16]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	881a      	ldrh	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	4413      	add	r3, r2
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c26:	8a3b      	ldrh	r3, [r7, #16]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	b21a      	sxth	r2, r3
 8006c2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	b21b      	sxth	r3, r3
 8006c34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c36:	89fb      	ldrh	r3, [r7, #14]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5a:	2b40      	cmp	r3, #64	; 0x40
 8006c5c:	d005      	beq.n	8006c6a <USBD_StdDevReq+0x26>
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d857      	bhi.n	8006d12 <USBD_StdDevReq+0xce>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00f      	beq.n	8006c86 <USBD_StdDevReq+0x42>
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d153      	bne.n	8006d12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	32ae      	adds	r2, #174	; 0xae
 8006c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4798      	blx	r3
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
      break;
 8006c84:	e04a      	b.n	8006d1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	d83b      	bhi.n	8006d06 <USBD_StdDevReq+0xc2>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <USBD_StdDevReq+0x50>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006cfd 	.word	0x08006cfd
 8006c9c:	08006d07 	.word	0x08006d07
 8006ca0:	08006cf3 	.word	0x08006cf3
 8006ca4:	08006d07 	.word	0x08006d07
 8006ca8:	08006cc7 	.word	0x08006cc7
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006d07 	.word	0x08006d07
 8006cb4:	08006cdf 	.word	0x08006cdf
 8006cb8:	08006cd1 	.word	0x08006cd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa3c 	bl	800713c <USBD_GetDescriptor>
          break;
 8006cc4:	e024      	b.n	8006d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fba1 	bl	8007410 <USBD_SetAddress>
          break;
 8006cce:	e01f      	b.n	8006d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fbe0 	bl	8007498 <USBD_SetConfig>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	73fb      	strb	r3, [r7, #15]
          break;
 8006cdc:	e018      	b.n	8006d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fc83 	bl	80075ec <USBD_GetConfig>
          break;
 8006ce6:	e013      	b.n	8006d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fcb4 	bl	8007658 <USBD_GetStatus>
          break;
 8006cf0:	e00e      	b.n	8006d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fce3 	bl	80076c0 <USBD_SetFeature>
          break;
 8006cfa:	e009      	b.n	8006d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fd07 	bl	8007712 <USBD_ClrFeature>
          break;
 8006d04:	e004      	b.n	8006d10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fd5e 	bl	80077ca <USBD_CtlError>
          break;
 8006d0e:	bf00      	nop
      }
      break;
 8006d10:	e004      	b.n	8006d1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fd58 	bl	80077ca <USBD_CtlError>
      break;
 8006d1a:	bf00      	nop
  }

  return ret;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop

08006d28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d005      	beq.n	8006d4e <USBD_StdItfReq+0x26>
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d852      	bhi.n	8006dec <USBD_StdItfReq+0xc4>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <USBD_StdItfReq+0x26>
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d14e      	bne.n	8006dec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d840      	bhi.n	8006dde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	889b      	ldrh	r3, [r3, #4]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d836      	bhi.n	8006dd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	889b      	ldrh	r3, [r3, #4]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff fed9 	bl	8006b26 <USBD_CoreFindIF>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	2bff      	cmp	r3, #255	; 0xff
 8006d7c:	d01d      	beq.n	8006dba <USBD_StdItfReq+0x92>
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d11a      	bne.n	8006dba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d84:	7bba      	ldrb	r2, [r7, #14]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	32ae      	adds	r2, #174	; 0xae
 8006d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00f      	beq.n	8006db4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d94:	7bba      	ldrb	r2, [r7, #14]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d9c:	7bba      	ldrb	r2, [r7, #14]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	32ae      	adds	r2, #174	; 0xae
 8006da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006db2:	e004      	b.n	8006dbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006db8:	e001      	b.n	8006dbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	88db      	ldrh	r3, [r3, #6]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d110      	bne.n	8006de8 <USBD_StdItfReq+0xc0>
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10d      	bne.n	8006de8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fdc7 	bl	8007960 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006dd2:	e009      	b.n	8006de8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fcf7 	bl	80077ca <USBD_CtlError>
          break;
 8006ddc:	e004      	b.n	8006de8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fcf2 	bl	80077ca <USBD_CtlError>
          break;
 8006de6:	e000      	b.n	8006dea <USBD_StdItfReq+0xc2>
          break;
 8006de8:	bf00      	nop
      }
      break;
 8006dea:	e004      	b.n	8006df6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fceb 	bl	80077ca <USBD_CtlError>
      break;
 8006df4:	bf00      	nop
  }

  return ret;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	889b      	ldrh	r3, [r3, #4]
 8006e12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d007      	beq.n	8006e30 <USBD_StdEPReq+0x30>
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	f200 817f 	bhi.w	8007124 <USBD_StdEPReq+0x324>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d02a      	beq.n	8006e80 <USBD_StdEPReq+0x80>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	f040 817a 	bne.w	8007124 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fe83 	bl	8006b40 <USBD_CoreFindEP>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e3e:	7b7b      	ldrb	r3, [r7, #13]
 8006e40:	2bff      	cmp	r3, #255	; 0xff
 8006e42:	f000 8174 	beq.w	800712e <USBD_StdEPReq+0x32e>
 8006e46:	7b7b      	ldrb	r3, [r7, #13]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f040 8170 	bne.w	800712e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006e4e:	7b7a      	ldrb	r2, [r7, #13]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006e56:	7b7a      	ldrb	r2, [r7, #13]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	32ae      	adds	r2, #174	; 0xae
 8006e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8163 	beq.w	800712e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006e68:	7b7a      	ldrb	r2, [r7, #13]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	32ae      	adds	r2, #174	; 0xae
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e7e:	e156      	b.n	800712e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	785b      	ldrb	r3, [r3, #1]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d008      	beq.n	8006e9a <USBD_StdEPReq+0x9a>
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	f300 8145 	bgt.w	8007118 <USBD_StdEPReq+0x318>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 809b 	beq.w	8006fca <USBD_StdEPReq+0x1ca>
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d03c      	beq.n	8006f12 <USBD_StdEPReq+0x112>
 8006e98:	e13e      	b.n	8007118 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d002      	beq.n	8006eac <USBD_StdEPReq+0xac>
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d016      	beq.n	8006ed8 <USBD_StdEPReq+0xd8>
 8006eaa:	e02c      	b.n	8006f06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00d      	beq.n	8006ece <USBD_StdEPReq+0xce>
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	2b80      	cmp	r3, #128	; 0x80
 8006eb6:	d00a      	beq.n	8006ece <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f002 fc5b 	bl	8009778 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ec2:	2180      	movs	r1, #128	; 0x80
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f002 fc57 	bl	8009778 <USBD_LL_StallEP>
 8006eca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ecc:	e020      	b.n	8006f10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fc7a 	bl	80077ca <USBD_CtlError>
              break;
 8006ed6:	e01b      	b.n	8006f10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	885b      	ldrh	r3, [r3, #2]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10e      	bne.n	8006efe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <USBD_StdEPReq+0xfe>
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	2b80      	cmp	r3, #128	; 0x80
 8006eea:	d008      	beq.n	8006efe <USBD_StdEPReq+0xfe>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	88db      	ldrh	r3, [r3, #6]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f002 fc3d 	bl	8009778 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fd2e 	bl	8007960 <USBD_CtlSendStatus>

              break;
 8006f04:	e004      	b.n	8006f10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fc5e 	bl	80077ca <USBD_CtlError>
              break;
 8006f0e:	bf00      	nop
          }
          break;
 8006f10:	e107      	b.n	8007122 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d002      	beq.n	8006f24 <USBD_StdEPReq+0x124>
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d016      	beq.n	8006f50 <USBD_StdEPReq+0x150>
 8006f22:	e04b      	b.n	8006fbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <USBD_StdEPReq+0x146>
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b80      	cmp	r3, #128	; 0x80
 8006f2e:	d00a      	beq.n	8006f46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f002 fc1f 	bl	8009778 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f3a:	2180      	movs	r1, #128	; 0x80
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f002 fc1b 	bl	8009778 <USBD_LL_StallEP>
 8006f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f44:	e040      	b.n	8006fc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fc3e 	bl	80077ca <USBD_CtlError>
              break;
 8006f4e:	e03b      	b.n	8006fc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	885b      	ldrh	r3, [r3, #2]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d136      	bne.n	8006fc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f002 fc25 	bl	80097b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fcf7 	bl	8007960 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff fde2 	bl	8006b40 <USBD_CoreFindEP>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f80:	7b7b      	ldrb	r3, [r7, #13]
 8006f82:	2bff      	cmp	r3, #255	; 0xff
 8006f84:	d01f      	beq.n	8006fc6 <USBD_StdEPReq+0x1c6>
 8006f86:	7b7b      	ldrb	r3, [r7, #13]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d11c      	bne.n	8006fc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f8c:	7b7a      	ldrb	r2, [r7, #13]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f94:	7b7a      	ldrb	r2, [r7, #13]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	32ae      	adds	r2, #174	; 0xae
 8006f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d010      	beq.n	8006fc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006fa4:	7b7a      	ldrb	r2, [r7, #13]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	32ae      	adds	r2, #174	; 0xae
 8006faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	4798      	blx	r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006fba:	e004      	b.n	8006fc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fc03 	bl	80077ca <USBD_CtlError>
              break;
 8006fc4:	e000      	b.n	8006fc8 <USBD_StdEPReq+0x1c8>
              break;
 8006fc6:	bf00      	nop
          }
          break;
 8006fc8:	e0ab      	b.n	8007122 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d002      	beq.n	8006fdc <USBD_StdEPReq+0x1dc>
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d032      	beq.n	8007040 <USBD_StdEPReq+0x240>
 8006fda:	e097      	b.n	800710c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d007      	beq.n	8006ff2 <USBD_StdEPReq+0x1f2>
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b80      	cmp	r3, #128	; 0x80
 8006fe6:	d004      	beq.n	8006ff2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fbed 	bl	80077ca <USBD_CtlError>
                break;
 8006ff0:	e091      	b.n	8007116 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da0b      	bge.n	8007012 <USBD_StdEPReq+0x212>
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	3310      	adds	r3, #16
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4413      	add	r3, r2
 800700e:	3304      	adds	r3, #4
 8007010:	e00b      	b.n	800702a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007018:	4613      	mov	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	4413      	add	r3, r2
 8007028:	3304      	adds	r3, #4
 800702a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2202      	movs	r2, #2
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fc37 	bl	80078ac <USBD_CtlSendData>
              break;
 800703e:	e06a      	b.n	8007116 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007044:	2b00      	cmp	r3, #0
 8007046:	da11      	bge.n	800706c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	f003 020f 	and.w	r2, r3, #15
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	3324      	adds	r3, #36	; 0x24
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d117      	bne.n	8007092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fbb0 	bl	80077ca <USBD_CtlError>
                  break;
 800706a:	e054      	b.n	8007116 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	f003 020f 	and.w	r2, r3, #15
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fb9d 	bl	80077ca <USBD_CtlError>
                  break;
 8007090:	e041      	b.n	8007116 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007096:	2b00      	cmp	r3, #0
 8007098:	da0b      	bge.n	80070b2 <USBD_StdEPReq+0x2b2>
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	3310      	adds	r3, #16
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	4413      	add	r3, r2
 80070ae:	3304      	adds	r3, #4
 80070b0:	e00b      	b.n	80070ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	4413      	add	r3, r2
 80070c8:	3304      	adds	r3, #4
 80070ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <USBD_StdEPReq+0x2d8>
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b80      	cmp	r3, #128	; 0x80
 80070d6:	d103      	bne.n	80070e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	e00e      	b.n	80070fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f002 fb85 	bl	80097f4 <USBD_LL_IsStallEP>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2201      	movs	r2, #1
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e002      	b.n	80070fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2202      	movs	r2, #2
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fbd1 	bl	80078ac <USBD_CtlSendData>
              break;
 800710a:	e004      	b.n	8007116 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fb5b 	bl	80077ca <USBD_CtlError>
              break;
 8007114:	bf00      	nop
          }
          break;
 8007116:	e004      	b.n	8007122 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fb55 	bl	80077ca <USBD_CtlError>
          break;
 8007120:	bf00      	nop
      }
      break;
 8007122:	e005      	b.n	8007130 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fb4f 	bl	80077ca <USBD_CtlError>
      break;
 800712c:	e000      	b.n	8007130 <USBD_StdEPReq+0x330>
      break;
 800712e:	bf00      	nop
  }

  return ret;
 8007130:	7bfb      	ldrb	r3, [r7, #15]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	885b      	ldrh	r3, [r3, #2]
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	b29b      	uxth	r3, r3
 800715a:	3b01      	subs	r3, #1
 800715c:	2b06      	cmp	r3, #6
 800715e:	f200 8128 	bhi.w	80073b2 <USBD_GetDescriptor+0x276>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <USBD_GetDescriptor+0x2c>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	08007185 	.word	0x08007185
 800716c:	0800719d 	.word	0x0800719d
 8007170:	080071dd 	.word	0x080071dd
 8007174:	080073b3 	.word	0x080073b3
 8007178:	080073b3 	.word	0x080073b3
 800717c:	08007353 	.word	0x08007353
 8007180:	0800737f 	.word	0x0800737f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	7c12      	ldrb	r2, [r2, #16]
 8007190:	f107 0108 	add.w	r1, r7, #8
 8007194:	4610      	mov	r0, r2
 8007196:	4798      	blx	r3
 8007198:	60f8      	str	r0, [r7, #12]
      break;
 800719a:	e112      	b.n	80073c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	7c1b      	ldrb	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10d      	bne.n	80071c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	f107 0208 	add.w	r2, r7, #8
 80071b0:	4610      	mov	r0, r2
 80071b2:	4798      	blx	r3
 80071b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	2202      	movs	r2, #2
 80071bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071be:	e100      	b.n	80073c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	f107 0208 	add.w	r2, r7, #8
 80071cc:	4610      	mov	r0, r2
 80071ce:	4798      	blx	r3
 80071d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3301      	adds	r3, #1
 80071d6:	2202      	movs	r2, #2
 80071d8:	701a      	strb	r2, [r3, #0]
      break;
 80071da:	e0f2      	b.n	80073c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	885b      	ldrh	r3, [r3, #2]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	f200 80ac 	bhi.w	8007340 <USBD_GetDescriptor+0x204>
 80071e8:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <USBD_GetDescriptor+0xb4>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007209 	.word	0x08007209
 80071f4:	0800723d 	.word	0x0800723d
 80071f8:	08007271 	.word	0x08007271
 80071fc:	080072a5 	.word	0x080072a5
 8007200:	080072d9 	.word	0x080072d9
 8007204:	0800730d 	.word	0x0800730d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	7c12      	ldrb	r2, [r2, #16]
 8007220:	f107 0108 	add.w	r1, r7, #8
 8007224:	4610      	mov	r0, r2
 8007226:	4798      	blx	r3
 8007228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800722a:	e091      	b.n	8007350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 facb 	bl	80077ca <USBD_CtlError>
            err++;
 8007234:	7afb      	ldrb	r3, [r7, #11]
 8007236:	3301      	adds	r3, #1
 8007238:	72fb      	strb	r3, [r7, #11]
          break;
 800723a:	e089      	b.n	8007350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00b      	beq.n	8007260 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	7c12      	ldrb	r2, [r2, #16]
 8007254:	f107 0108 	add.w	r1, r7, #8
 8007258:	4610      	mov	r0, r2
 800725a:	4798      	blx	r3
 800725c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800725e:	e077      	b.n	8007350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fab1 	bl	80077ca <USBD_CtlError>
            err++;
 8007268:	7afb      	ldrb	r3, [r7, #11]
 800726a:	3301      	adds	r3, #1
 800726c:	72fb      	strb	r3, [r7, #11]
          break;
 800726e:	e06f      	b.n	8007350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00b      	beq.n	8007294 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	7c12      	ldrb	r2, [r2, #16]
 8007288:	f107 0108 	add.w	r1, r7, #8
 800728c:	4610      	mov	r0, r2
 800728e:	4798      	blx	r3
 8007290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007292:	e05d      	b.n	8007350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fa97 	bl	80077ca <USBD_CtlError>
            err++;
 800729c:	7afb      	ldrb	r3, [r7, #11]
 800729e:	3301      	adds	r3, #1
 80072a0:	72fb      	strb	r3, [r7, #11]
          break;
 80072a2:	e055      	b.n	8007350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	7c12      	ldrb	r2, [r2, #16]
 80072bc:	f107 0108 	add.w	r1, r7, #8
 80072c0:	4610      	mov	r0, r2
 80072c2:	4798      	blx	r3
 80072c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072c6:	e043      	b.n	8007350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa7d 	bl	80077ca <USBD_CtlError>
            err++;
 80072d0:	7afb      	ldrb	r3, [r7, #11]
 80072d2:	3301      	adds	r3, #1
 80072d4:	72fb      	strb	r3, [r7, #11]
          break;
 80072d6:	e03b      	b.n	8007350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	7c12      	ldrb	r2, [r2, #16]
 80072f0:	f107 0108 	add.w	r1, r7, #8
 80072f4:	4610      	mov	r0, r2
 80072f6:	4798      	blx	r3
 80072f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072fa:	e029      	b.n	8007350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa63 	bl	80077ca <USBD_CtlError>
            err++;
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	3301      	adds	r3, #1
 8007308:	72fb      	strb	r3, [r7, #11]
          break;
 800730a:	e021      	b.n	8007350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	7c12      	ldrb	r2, [r2, #16]
 8007324:	f107 0108 	add.w	r1, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800732e:	e00f      	b.n	8007350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa49 	bl	80077ca <USBD_CtlError>
            err++;
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	3301      	adds	r3, #1
 800733c:	72fb      	strb	r3, [r7, #11]
          break;
 800733e:	e007      	b.n	8007350 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa41 	bl	80077ca <USBD_CtlError>
          err++;
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	3301      	adds	r3, #1
 800734c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800734e:	bf00      	nop
      }
      break;
 8007350:	e037      	b.n	80073c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7c1b      	ldrb	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d109      	bne.n	800736e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007362:	f107 0208 	add.w	r2, r7, #8
 8007366:	4610      	mov	r0, r2
 8007368:	4798      	blx	r3
 800736a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800736c:	e029      	b.n	80073c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa2a 	bl	80077ca <USBD_CtlError>
        err++;
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	3301      	adds	r3, #1
 800737a:	72fb      	strb	r3, [r7, #11]
      break;
 800737c:	e021      	b.n	80073c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	7c1b      	ldrb	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10d      	bne.n	80073a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	f107 0208 	add.w	r2, r7, #8
 8007392:	4610      	mov	r0, r2
 8007394:	4798      	blx	r3
 8007396:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	2207      	movs	r2, #7
 800739e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073a0:	e00f      	b.n	80073c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fa10 	bl	80077ca <USBD_CtlError>
        err++;
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	3301      	adds	r3, #1
 80073ae:	72fb      	strb	r3, [r7, #11]
      break;
 80073b0:	e007      	b.n	80073c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fa08 	bl	80077ca <USBD_CtlError>
      err++;
 80073ba:	7afb      	ldrb	r3, [r7, #11]
 80073bc:	3301      	adds	r3, #1
 80073be:	72fb      	strb	r3, [r7, #11]
      break;
 80073c0:	bf00      	nop
  }

  if (err != 0U)
 80073c2:	7afb      	ldrb	r3, [r7, #11]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d11e      	bne.n	8007406 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	88db      	ldrh	r3, [r3, #6]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d016      	beq.n	80073fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80073d0:	893b      	ldrh	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00e      	beq.n	80073f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	88da      	ldrh	r2, [r3, #6]
 80073da:	893b      	ldrh	r3, [r7, #8]
 80073dc:	4293      	cmp	r3, r2
 80073de:	bf28      	it	cs
 80073e0:	4613      	movcs	r3, r2
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073e6:	893b      	ldrh	r3, [r7, #8]
 80073e8:	461a      	mov	r2, r3
 80073ea:	68f9      	ldr	r1, [r7, #12]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fa5d 	bl	80078ac <USBD_CtlSendData>
 80073f2:	e009      	b.n	8007408 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f9e7 	bl	80077ca <USBD_CtlError>
 80073fc:	e004      	b.n	8007408 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 faae 	bl	8007960 <USBD_CtlSendStatus>
 8007404:	e000      	b.n	8007408 <USBD_GetDescriptor+0x2cc>
    return;
 8007406:	bf00      	nop
  }
}
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop

08007410 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	889b      	ldrh	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d131      	bne.n	8007486 <USBD_SetAddress+0x76>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	88db      	ldrh	r3, [r3, #6]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d12d      	bne.n	8007486 <USBD_SetAddress+0x76>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	885b      	ldrh	r3, [r3, #2]
 800742e:	2b7f      	cmp	r3, #127	; 0x7f
 8007430:	d829      	bhi.n	8007486 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	885b      	ldrh	r3, [r3, #2]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b03      	cmp	r3, #3
 8007448:	d104      	bne.n	8007454 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f9bc 	bl	80077ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007452:	e01d      	b.n	8007490 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7bfa      	ldrb	r2, [r7, #15]
 8007458:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f002 f9f3 	bl	800984c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa7a 	bl	8007960 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d004      	beq.n	800747c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2202      	movs	r2, #2
 8007476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747a:	e009      	b.n	8007490 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007484:	e004      	b.n	8007490 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f99e 	bl	80077ca <USBD_CtlError>
  }
}
 800748e:	bf00      	nop
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	885b      	ldrh	r3, [r3, #2]
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	4b4e      	ldr	r3, [pc, #312]	; (80075e8 <USBD_SetConfig+0x150>)
 80074ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074b0:	4b4d      	ldr	r3, [pc, #308]	; (80075e8 <USBD_SetConfig+0x150>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d905      	bls.n	80074c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f985 	bl	80077ca <USBD_CtlError>
    return USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e08c      	b.n	80075de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d002      	beq.n	80074d6 <USBD_SetConfig+0x3e>
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d029      	beq.n	8007528 <USBD_SetConfig+0x90>
 80074d4:	e075      	b.n	80075c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80074d6:	4b44      	ldr	r3, [pc, #272]	; (80075e8 <USBD_SetConfig+0x150>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d020      	beq.n	8007520 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80074de:	4b42      	ldr	r3, [pc, #264]	; (80075e8 <USBD_SetConfig+0x150>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074e8:	4b3f      	ldr	r3, [pc, #252]	; (80075e8 <USBD_SetConfig+0x150>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fe ffe7 	bl	80064c2 <USBD_SetClassConfig>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d008      	beq.n	8007510 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f962 	bl	80077ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2202      	movs	r2, #2
 800750a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800750e:	e065      	b.n	80075dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fa25 	bl	8007960 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2203      	movs	r2, #3
 800751a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800751e:	e05d      	b.n	80075dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fa1d 	bl	8007960 <USBD_CtlSendStatus>
      break;
 8007526:	e059      	b.n	80075dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007528:	4b2f      	ldr	r3, [pc, #188]	; (80075e8 <USBD_SetConfig+0x150>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d112      	bne.n	8007556 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007538:	4b2b      	ldr	r3, [pc, #172]	; (80075e8 <USBD_SetConfig+0x150>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007542:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <USBD_SetConfig+0x150>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fe ffd6 	bl	80064fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa06 	bl	8007960 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007554:	e042      	b.n	80075dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007556:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <USBD_SetConfig+0x150>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d02a      	beq.n	80075ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7fe ffc4 	bl	80064fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007572:	4b1d      	ldr	r3, [pc, #116]	; (80075e8 <USBD_SetConfig+0x150>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800757c:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <USBD_SetConfig+0x150>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fe ff9d 	bl	80064c2 <USBD_SetClassConfig>
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00f      	beq.n	80075b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f918 	bl	80077ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fe ffa9 	bl	80064fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075b0:	e014      	b.n	80075dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9d4 	bl	8007960 <USBD_CtlSendStatus>
      break;
 80075b8:	e010      	b.n	80075dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9d0 	bl	8007960 <USBD_CtlSendStatus>
      break;
 80075c0:	e00c      	b.n	80075dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f900 	bl	80077ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075ca:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <USBD_SetConfig+0x150>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7fe ff92 	bl	80064fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80075d6:	2303      	movs	r3, #3
 80075d8:	73fb      	strb	r3, [r7, #15]
      break;
 80075da:	bf00      	nop
  }

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000494 	.word	0x20000494

080075ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	88db      	ldrh	r3, [r3, #6]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d004      	beq.n	8007608 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f8e2 	bl	80077ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007606:	e023      	b.n	8007650 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	dc02      	bgt.n	800761a <USBD_GetConfig+0x2e>
 8007614:	2b00      	cmp	r3, #0
 8007616:	dc03      	bgt.n	8007620 <USBD_GetConfig+0x34>
 8007618:	e015      	b.n	8007646 <USBD_GetConfig+0x5a>
 800761a:	2b03      	cmp	r3, #3
 800761c:	d00b      	beq.n	8007636 <USBD_GetConfig+0x4a>
 800761e:	e012      	b.n	8007646 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3308      	adds	r3, #8
 800762a:	2201      	movs	r2, #1
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f93c 	bl	80078ac <USBD_CtlSendData>
        break;
 8007634:	e00c      	b.n	8007650 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3304      	adds	r3, #4
 800763a:	2201      	movs	r2, #1
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f934 	bl	80078ac <USBD_CtlSendData>
        break;
 8007644:	e004      	b.n	8007650 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f8be 	bl	80077ca <USBD_CtlError>
        break;
 800764e:	bf00      	nop
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007668:	b2db      	uxtb	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	2b02      	cmp	r3, #2
 800766e:	d81e      	bhi.n	80076ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	88db      	ldrh	r3, [r3, #6]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d004      	beq.n	8007682 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f8a5 	bl	80077ca <USBD_CtlError>
        break;
 8007680:	e01a      	b.n	80076b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f043 0202 	orr.w	r2, r3, #2
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	330c      	adds	r3, #12
 80076a2:	2202      	movs	r2, #2
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f900 	bl	80078ac <USBD_CtlSendData>
      break;
 80076ac:	e004      	b.n	80076b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f88a 	bl	80077ca <USBD_CtlError>
      break;
 80076b6:	bf00      	nop
  }
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	885b      	ldrh	r3, [r3, #2]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d107      	bne.n	80076e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f940 	bl	8007960 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80076e0:	e013      	b.n	800770a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	885b      	ldrh	r3, [r3, #2]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d10b      	bne.n	8007702 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	889b      	ldrh	r3, [r3, #4]
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f930 	bl	8007960 <USBD_CtlSendStatus>
}
 8007700:	e003      	b.n	800770a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f860 	bl	80077ca <USBD_CtlError>
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007722:	b2db      	uxtb	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	2b02      	cmp	r3, #2
 8007728:	d80b      	bhi.n	8007742 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	885b      	ldrh	r3, [r3, #2]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10c      	bne.n	800774c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f910 	bl	8007960 <USBD_CtlSendStatus>
      }
      break;
 8007740:	e004      	b.n	800774c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f840 	bl	80077ca <USBD_CtlError>
      break;
 800774a:	e000      	b.n	800774e <USBD_ClrFeature+0x3c>
      break;
 800774c:	bf00      	nop
  }
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	781a      	ldrb	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3301      	adds	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	781a      	ldrb	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fa41 	bl	8006c08 <SWAPBYTE>
 8007786:	4603      	mov	r3, r0
 8007788:	461a      	mov	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3301      	adds	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3301      	adds	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff fa34 	bl	8006c08 <SWAPBYTE>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3301      	adds	r3, #1
 80077ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff fa27 	bl	8006c08 <SWAPBYTE>
 80077ba:	4603      	mov	r3, r0
 80077bc:	461a      	mov	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	80da      	strh	r2, [r3, #6]
}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077d4:	2180      	movs	r1, #128	; 0x80
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 ffce 	bl	8009778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077dc:	2100      	movs	r1, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 ffca 	bl	8009778 <USBD_LL_StallEP>
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d036      	beq.n	8007870 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007806:	6938      	ldr	r0, [r7, #16]
 8007808:	f000 f836 	bl	8007878 <USBD_GetLen>
 800780c:	4603      	mov	r3, r0
 800780e:	3301      	adds	r3, #1
 8007810:	b29b      	uxth	r3, r3
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	4413      	add	r3, r2
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7812      	ldrb	r2, [r2, #0]
 8007824:	701a      	strb	r2, [r3, #0]
  idx++;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	3301      	adds	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4413      	add	r3, r2
 8007832:	2203      	movs	r2, #3
 8007834:	701a      	strb	r2, [r3, #0]
  idx++;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	3301      	adds	r3, #1
 800783a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800783c:	e013      	b.n	8007866 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	4413      	add	r3, r2
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	7812      	ldrb	r2, [r2, #0]
 8007848:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	3301      	adds	r3, #1
 800784e:	613b      	str	r3, [r7, #16]
    idx++;
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	3301      	adds	r3, #1
 8007854:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	4413      	add	r3, r2
 800785c:	2200      	movs	r2, #0
 800785e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	3301      	adds	r3, #1
 8007864:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e7      	bne.n	800783e <USBD_GetString+0x52>
 800786e:	e000      	b.n	8007872 <USBD_GetString+0x86>
    return;
 8007870:	bf00      	nop
  }
}
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007888:	e005      	b.n	8007896 <USBD_GetLen+0x1e>
  {
    len++;
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	3301      	adds	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	3301      	adds	r3, #1
 8007894:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f5      	bne.n	800788a <USBD_GetLen+0x12>
  }

  return len;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	2100      	movs	r1, #0
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f001 ffd9 	bl	800988a <USBD_LL_Transmit>

  return USBD_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	2100      	movs	r1, #0
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f001 ffc8 	bl	800988a <USBD_LL_Transmit>

  return USBD_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2203      	movs	r2, #3
 8007914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	2100      	movs	r1, #0
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f001 ffcc 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	2100      	movs	r1, #0
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f001 ffbb 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2204      	movs	r2, #4
 800796c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007970:	2300      	movs	r3, #0
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 ff87 	bl	800988a <USBD_LL_Transmit>

  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2205      	movs	r2, #5
 8007992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007996:	2300      	movs	r3, #0
 8007998:	2200      	movs	r2, #0
 800799a:	2100      	movs	r1, #0
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 ff95 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 80079ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079be:	2b84      	cmp	r3, #132	; 0x84
 80079c0:	d005      	beq.n	80079ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80079c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4413      	add	r3, r2
 80079ca:	3303      	adds	r3, #3
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 80079ce:	68fb      	ldr	r3, [r7, #12]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80079e0:	f000 fb6e 	bl	80080c0 <vTaskStartScheduler>

  return osOK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	bd80      	pop	{r7, pc}

080079ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80079ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ec:	b089      	sub	sp, #36	; 0x24
 80079ee:	af04      	add	r7, sp, #16
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d020      	beq.n	8007a3e <osThreadCreate+0x54>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01c      	beq.n	8007a3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685c      	ldr	r4, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691e      	ldr	r6, [r3, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff ffc8 	bl	80079ac <makeFreeRtosPriority>
 8007a1c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a26:	9202      	str	r2, [sp, #8]
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	9100      	str	r1, [sp, #0]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	4632      	mov	r2, r6
 8007a30:	4629      	mov	r1, r5
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 f8ed 	bl	8007c12 <xTaskCreateStatic>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e01c      	b.n	8007a78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685c      	ldr	r4, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a4a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff ffaa 	bl	80079ac <makeFreeRtosPriority>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	f107 030c 	add.w	r3, r7, #12
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	9200      	str	r2, [sp, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	4632      	mov	r2, r6
 8007a66:	4629      	mov	r1, r5
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 f92f 	bl	8007ccc <xTaskCreate>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d001      	beq.n	8007a78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e000      	b.n	8007a7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }
#endif

  return handle;
 8007a78:	68fb      	ldr	r3, [r7, #12]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <osDelay+0x16>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	e000      	b.n	8007a9a <osDelay+0x18>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fadc 	bl	8008058 <vTaskDelay>

  return osOK;
 8007aa0:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f103 0208 	add.w	r2, r3, #8
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ac2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f103 0208 	add.w	r2, r3, #8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f103 0208 	add.w	r2, r3, #8
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	601a      	str	r2, [r3, #0]
}
 8007b40:	bf00      	nop
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b62:	d103      	bne.n	8007b6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	e00c      	b.n	8007b86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	e002      	b.n	8007b7a <vListInsert+0x2e>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d2f6      	bcs.n	8007b74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]
}
 8007bb2:	bf00      	nop
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b085      	sub	sp, #20
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6892      	ldr	r2, [r2, #8]
 8007bd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6852      	ldr	r2, [r2, #4]
 8007bde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d103      	bne.n	8007bf2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689a      	ldr	r2, [r3, #8]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	1e5a      	subs	r2, r3, #1
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b08e      	sub	sp, #56	; 0x38
 8007c16:	af04      	add	r7, sp, #16
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	607a      	str	r2, [r7, #4]
 8007c1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10a      	bne.n	8007c3c <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	623b      	str	r3, [r7, #32]
}
 8007c38:	bf00      	nop
 8007c3a:	e7fe      	b.n	8007c3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10a      	bne.n	8007c58 <xTaskCreateStatic+0x46>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	61fb      	str	r3, [r7, #28]
}
 8007c54:	bf00      	nop
 8007c56:	e7fe      	b.n	8007c56 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c58:	2354      	movs	r3, #84	; 0x54
 8007c5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2b54      	cmp	r3, #84	; 0x54
 8007c60:	d00a      	beq.n	8007c78 <xTaskCreateStatic+0x66>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	61bb      	str	r3, [r7, #24]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01e      	beq.n	8007cbe <xTaskCreateStatic+0xac>
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01b      	beq.n	8007cbe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9303      	str	r3, [sp, #12]
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	9302      	str	r3, [sp, #8]
 8007ca0:	f107 0314 	add.w	r3, r7, #20
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f850 	bl	8007d56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cb8:	f000 f8d4 	bl	8007e64 <prvAddNewTaskToReadyList>
 8007cbc:	e001      	b.n	8007cc2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007cc2:	697b      	ldr	r3, [r7, #20]
	}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3728      	adds	r7, #40	; 0x28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08c      	sub	sp, #48	; 0x30
 8007cd0:	af04      	add	r7, sp, #16
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 ff71 	bl	8008bc8 <pvPortMalloc>
 8007ce6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00e      	beq.n	8007d0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007cee:	2054      	movs	r0, #84	; 0x54
 8007cf0:	f000 ff6a 	bl	8008bc8 <pvPortMalloc>
 8007cf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30
 8007d02:	e005      	b.n	8007d10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d04:	6978      	ldr	r0, [r7, #20]
 8007d06:	f001 f82b 	bl	8008d60 <vPortFree>
 8007d0a:	e001      	b.n	8007d10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d017      	beq.n	8007d46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d1e:	88fa      	ldrh	r2, [r7, #6]
 8007d20:	2300      	movs	r3, #0
 8007d22:	9303      	str	r3, [sp, #12]
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	9302      	str	r3, [sp, #8]
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68b9      	ldr	r1, [r7, #8]
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 f80e 	bl	8007d56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d3a:	69f8      	ldr	r0, [r7, #28]
 8007d3c:	f000 f892 	bl	8007e64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d40:	2301      	movs	r3, #1
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	e002      	b.n	8007d4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
	}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b088      	sub	sp, #32
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
 8007d62:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f023 0307 	bic.w	r3, r3, #7
 8007d7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00a      	beq.n	8007d9e <prvInitialiseNewTask+0x48>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	617b      	str	r3, [r7, #20]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01f      	beq.n	8007de4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007da4:	2300      	movs	r3, #0
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	e012      	b.n	8007dd0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	4413      	add	r3, r2
 8007db0:	7819      	ldrb	r1, [r3, #0]
 8007db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	3334      	adds	r3, #52	; 0x34
 8007dba:	460a      	mov	r2, r1
 8007dbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d006      	beq.n	8007dd8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b0f      	cmp	r3, #15
 8007dd4:	d9e9      	bls.n	8007daa <prvInitialiseNewTask+0x54>
 8007dd6:	e000      	b.n	8007dda <prvInitialiseNewTask+0x84>
			{
				break;
 8007dd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007de2:	e003      	b.n	8007dec <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	2b06      	cmp	r3, #6
 8007df0:	d901      	bls.n	8007df6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007df2:	2306      	movs	r3, #6
 8007df4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dfa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e00:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2200      	movs	r2, #0
 8007e06:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff fe6c 	bl	8007aea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	3318      	adds	r3, #24
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff fe67 	bl	8007aea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	f1c3 0207 	rsb	r2, r3, #7
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	2200      	movs	r2, #0
 8007e36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	69b8      	ldr	r0, [r7, #24]
 8007e46:	f000 fcb3 	bl	80087b0 <pxPortInitialiseStack>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e5c:	bf00      	nop
 8007e5e:	3720      	adds	r7, #32
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e6c:	f000 fdca 	bl	8008a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e70:	4b2a      	ldr	r3, [pc, #168]	; (8007f1c <prvAddNewTaskToReadyList+0xb8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	4a29      	ldr	r2, [pc, #164]	; (8007f1c <prvAddNewTaskToReadyList+0xb8>)
 8007e78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e7a:	4b29      	ldr	r3, [pc, #164]	; (8007f20 <prvAddNewTaskToReadyList+0xbc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e82:	4a27      	ldr	r2, [pc, #156]	; (8007f20 <prvAddNewTaskToReadyList+0xbc>)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e88:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <prvAddNewTaskToReadyList+0xb8>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d110      	bne.n	8007eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e90:	f000 fb4c 	bl	800852c <prvInitialiseTaskLists>
 8007e94:	e00d      	b.n	8007eb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e96:	4b23      	ldr	r3, [pc, #140]	; (8007f24 <prvAddNewTaskToReadyList+0xc0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e9e:	4b20      	ldr	r3, [pc, #128]	; (8007f20 <prvAddNewTaskToReadyList+0xbc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d802      	bhi.n	8007eb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007eac:	4a1c      	ldr	r2, [pc, #112]	; (8007f20 <prvAddNewTaskToReadyList+0xbc>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <prvAddNewTaskToReadyList+0xc4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	4a1b      	ldr	r2, [pc, #108]	; (8007f28 <prvAddNewTaskToReadyList+0xc4>)
 8007eba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	409a      	lsls	r2, r3
 8007ec4:	4b19      	ldr	r3, [pc, #100]	; (8007f2c <prvAddNewTaskToReadyList+0xc8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	4a18      	ldr	r2, [pc, #96]	; (8007f2c <prvAddNewTaskToReadyList+0xc8>)
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <prvAddNewTaskToReadyList+0xcc>)
 8007edc:	441a      	add	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f7ff fe0d 	bl	8007b04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007eea:	f000 fdbb 	bl	8008a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <prvAddNewTaskToReadyList+0xc0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00e      	beq.n	8007f14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ef6:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <prvAddNewTaskToReadyList+0xbc>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d207      	bcs.n	8007f14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <prvAddNewTaskToReadyList+0xd0>)
 8007f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20000598 	.word	0x20000598
 8007f20:	20000498 	.word	0x20000498
 8007f24:	200005a4 	.word	0x200005a4
 8007f28:	200005b4 	.word	0x200005b4
 8007f2c:	200005a0 	.word	0x200005a0
 8007f30:	2000049c 	.word	0x2000049c
 8007f34:	e000ed04 	.word	0xe000ed04

08007f38 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007f40:	f000 fd60 	bl	8008a04 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <vTaskDelete+0x18>
 8007f4a:	4b39      	ldr	r3, [pc, #228]	; (8008030 <vTaskDelete+0xf8>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	e000      	b.n	8007f52 <vTaskDelete+0x1a>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fe30 	bl	8007bbe <uxListRemove>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d115      	bne.n	8007f90 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f68:	4932      	ldr	r1, [pc, #200]	; (8008034 <vTaskDelete+0xfc>)
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <vTaskDelete+0x58>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	2201      	movs	r2, #1
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	43da      	mvns	r2, r3
 8007f86:	4b2c      	ldr	r3, [pc, #176]	; (8008038 <vTaskDelete+0x100>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	4a2a      	ldr	r2, [pc, #168]	; (8008038 <vTaskDelete+0x100>)
 8007f8e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d004      	beq.n	8007fa2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3318      	adds	r3, #24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff fe0e 	bl	8007bbe <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007fa2:	4b26      	ldr	r3, [pc, #152]	; (800803c <vTaskDelete+0x104>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	4a24      	ldr	r2, [pc, #144]	; (800803c <vTaskDelete+0x104>)
 8007faa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007fac:	4b20      	ldr	r3, [pc, #128]	; (8008030 <vTaskDelete+0xf8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d10b      	bne.n	8007fce <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4820      	ldr	r0, [pc, #128]	; (8008040 <vTaskDelete+0x108>)
 8007fbe:	f7ff fda1 	bl	8007b04 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007fc2:	4b20      	ldr	r3, [pc, #128]	; (8008044 <vTaskDelete+0x10c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	4a1e      	ldr	r2, [pc, #120]	; (8008044 <vTaskDelete+0x10c>)
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	e009      	b.n	8007fe2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007fce:	4b1e      	ldr	r3, [pc, #120]	; (8008048 <vTaskDelete+0x110>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	4a1c      	ldr	r2, [pc, #112]	; (8008048 <vTaskDelete+0x110>)
 8007fd6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 fb15 	bl	8008608 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007fde:	f000 fb43 	bl	8008668 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007fe2:	f000 fd3f 	bl	8008a64 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007fe6:	4b19      	ldr	r3, [pc, #100]	; (800804c <vTaskDelete+0x114>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01b      	beq.n	8008026 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8007fee:	4b10      	ldr	r3, [pc, #64]	; (8008030 <vTaskDelete+0xf8>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d116      	bne.n	8008026 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007ff8:	4b15      	ldr	r3, [pc, #84]	; (8008050 <vTaskDelete+0x118>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <vTaskDelete+0xde>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60bb      	str	r3, [r7, #8]
}
 8008012:	bf00      	nop
 8008014:	e7fe      	b.n	8008014 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <vTaskDelete+0x11c>)
 8008018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000498 	.word	0x20000498
 8008034:	2000049c 	.word	0x2000049c
 8008038:	200005a0 	.word	0x200005a0
 800803c:	200005b4 	.word	0x200005b4
 8008040:	2000056c 	.word	0x2000056c
 8008044:	20000580 	.word	0x20000580
 8008048:	20000598 	.word	0x20000598
 800804c:	200005a4 	.word	0x200005a4
 8008050:	200005c0 	.word	0x200005c0
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d017      	beq.n	800809a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <vTaskDelay+0x60>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <vTaskDelay+0x30>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	60bb      	str	r3, [r7, #8]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008088:	f000 f87a 	bl	8008180 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800808c:	2100      	movs	r1, #0
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fb28 	bl	80086e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008094:	f000 f882 	bl	800819c <xTaskResumeAll>
 8008098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d107      	bne.n	80080b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080a0:	4b06      	ldr	r3, [pc, #24]	; (80080bc <vTaskDelay+0x64>)
 80080a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	200005c0 	.word	0x200005c0
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08a      	sub	sp, #40	; 0x28
 80080c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080ce:	463a      	mov	r2, r7
 80080d0:	1d39      	adds	r1, r7, #4
 80080d2:	f107 0308 	add.w	r3, r7, #8
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7f8 fafa 	bl	80006d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	9202      	str	r2, [sp, #8]
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	2300      	movs	r3, #0
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	2300      	movs	r3, #0
 80080ec:	460a      	mov	r2, r1
 80080ee:	491e      	ldr	r1, [pc, #120]	; (8008168 <vTaskStartScheduler+0xa8>)
 80080f0:	481e      	ldr	r0, [pc, #120]	; (800816c <vTaskStartScheduler+0xac>)
 80080f2:	f7ff fd8e 	bl	8007c12 <xTaskCreateStatic>
 80080f6:	4603      	mov	r3, r0
 80080f8:	4a1d      	ldr	r2, [pc, #116]	; (8008170 <vTaskStartScheduler+0xb0>)
 80080fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080fc:	4b1c      	ldr	r3, [pc, #112]	; (8008170 <vTaskStartScheduler+0xb0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008104:	2301      	movs	r3, #1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e001      	b.n	800810e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d116      	bne.n	8008142 <vTaskStartScheduler+0x82>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	613b      	str	r3, [r7, #16]
}
 8008126:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008128:	4b12      	ldr	r3, [pc, #72]	; (8008174 <vTaskStartScheduler+0xb4>)
 800812a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800812e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008130:	4b11      	ldr	r3, [pc, #68]	; (8008178 <vTaskStartScheduler+0xb8>)
 8008132:	2201      	movs	r2, #1
 8008134:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008136:	4b11      	ldr	r3, [pc, #68]	; (800817c <vTaskStartScheduler+0xbc>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800813c:	f000 fbc0 	bl	80088c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008140:	e00e      	b.n	8008160 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008148:	d10a      	bne.n	8008160 <vTaskStartScheduler+0xa0>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	60fb      	str	r3, [r7, #12]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <vTaskStartScheduler+0x9e>
}
 8008160:	bf00      	nop
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	0800a3b0 	.word	0x0800a3b0
 800816c:	080084fd 	.word	0x080084fd
 8008170:	200005bc 	.word	0x200005bc
 8008174:	200005b8 	.word	0x200005b8
 8008178:	200005a4 	.word	0x200005a4
 800817c:	2000059c 	.word	0x2000059c

08008180 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008184:	4b04      	ldr	r3, [pc, #16]	; (8008198 <vTaskSuspendAll+0x18>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3301      	adds	r3, #1
 800818a:	4a03      	ldr	r2, [pc, #12]	; (8008198 <vTaskSuspendAll+0x18>)
 800818c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800818e:	bf00      	nop
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	200005c0 	.word	0x200005c0

0800819c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081aa:	4b41      	ldr	r3, [pc, #260]	; (80082b0 <xTaskResumeAll+0x114>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	603b      	str	r3, [r7, #0]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081c8:	f000 fc1c 	bl	8008a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081cc:	4b38      	ldr	r3, [pc, #224]	; (80082b0 <xTaskResumeAll+0x114>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	4a37      	ldr	r2, [pc, #220]	; (80082b0 <xTaskResumeAll+0x114>)
 80081d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081d6:	4b36      	ldr	r3, [pc, #216]	; (80082b0 <xTaskResumeAll+0x114>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d161      	bne.n	80082a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081de:	4b35      	ldr	r3, [pc, #212]	; (80082b4 <xTaskResumeAll+0x118>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d05d      	beq.n	80082a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081e6:	e02e      	b.n	8008246 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081e8:	4b33      	ldr	r3, [pc, #204]	; (80082b8 <xTaskResumeAll+0x11c>)
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3318      	adds	r3, #24
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff fce2 	bl	8007bbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff fcdd 	bl	8007bbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	2201      	movs	r2, #1
 800820a:	409a      	lsls	r2, r3
 800820c:	4b2b      	ldr	r3, [pc, #172]	; (80082bc <xTaskResumeAll+0x120>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4313      	orrs	r3, r2
 8008212:	4a2a      	ldr	r2, [pc, #168]	; (80082bc <xTaskResumeAll+0x120>)
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4a27      	ldr	r2, [pc, #156]	; (80082c0 <xTaskResumeAll+0x124>)
 8008224:	441a      	add	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3304      	adds	r3, #4
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7ff fc69 	bl	8007b04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008236:	4b23      	ldr	r3, [pc, #140]	; (80082c4 <xTaskResumeAll+0x128>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	429a      	cmp	r2, r3
 800823e:	d302      	bcc.n	8008246 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008240:	4b21      	ldr	r3, [pc, #132]	; (80082c8 <xTaskResumeAll+0x12c>)
 8008242:	2201      	movs	r2, #1
 8008244:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008246:	4b1c      	ldr	r3, [pc, #112]	; (80082b8 <xTaskResumeAll+0x11c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1cc      	bne.n	80081e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008254:	f000 fa08 	bl	8008668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008258:	4b1c      	ldr	r3, [pc, #112]	; (80082cc <xTaskResumeAll+0x130>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d010      	beq.n	8008286 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008264:	f000 f836 	bl	80082d4 <xTaskIncrementTick>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800826e:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <xTaskResumeAll+0x12c>)
 8008270:	2201      	movs	r2, #1
 8008272:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3b01      	subs	r3, #1
 8008278:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1f1      	bne.n	8008264 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008280:	4b12      	ldr	r3, [pc, #72]	; (80082cc <xTaskResumeAll+0x130>)
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008286:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <xTaskResumeAll+0x12c>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800828e:	2301      	movs	r3, #1
 8008290:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008292:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <xTaskResumeAll+0x134>)
 8008294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082a2:	f000 fbdf 	bl	8008a64 <vPortExitCritical>

	return xAlreadyYielded;
 80082a6:	68bb      	ldr	r3, [r7, #8]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	200005c0 	.word	0x200005c0
 80082b4:	20000598 	.word	0x20000598
 80082b8:	20000558 	.word	0x20000558
 80082bc:	200005a0 	.word	0x200005a0
 80082c0:	2000049c 	.word	0x2000049c
 80082c4:	20000498 	.word	0x20000498
 80082c8:	200005ac 	.word	0x200005ac
 80082cc:	200005a8 	.word	0x200005a8
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082de:	4b4e      	ldr	r3, [pc, #312]	; (8008418 <xTaskIncrementTick+0x144>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 808e 	bne.w	8008404 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082e8:	4b4c      	ldr	r3, [pc, #304]	; (800841c <xTaskIncrementTick+0x148>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082f0:	4a4a      	ldr	r2, [pc, #296]	; (800841c <xTaskIncrementTick+0x148>)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d120      	bne.n	800833e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80082fc:	4b48      	ldr	r3, [pc, #288]	; (8008420 <xTaskIncrementTick+0x14c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <xTaskIncrementTick+0x48>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	603b      	str	r3, [r7, #0]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xTaskIncrementTick+0x46>
 800831c:	4b40      	ldr	r3, [pc, #256]	; (8008420 <xTaskIncrementTick+0x14c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	4b40      	ldr	r3, [pc, #256]	; (8008424 <xTaskIncrementTick+0x150>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a3e      	ldr	r2, [pc, #248]	; (8008420 <xTaskIncrementTick+0x14c>)
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	4a3e      	ldr	r2, [pc, #248]	; (8008424 <xTaskIncrementTick+0x150>)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	4b3d      	ldr	r3, [pc, #244]	; (8008428 <xTaskIncrementTick+0x154>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3301      	adds	r3, #1
 8008336:	4a3c      	ldr	r2, [pc, #240]	; (8008428 <xTaskIncrementTick+0x154>)
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	f000 f995 	bl	8008668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800833e:	4b3b      	ldr	r3, [pc, #236]	; (800842c <xTaskIncrementTick+0x158>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	429a      	cmp	r2, r3
 8008346:	d348      	bcc.n	80083da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008348:	4b35      	ldr	r3, [pc, #212]	; (8008420 <xTaskIncrementTick+0x14c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d104      	bne.n	800835c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008352:	4b36      	ldr	r3, [pc, #216]	; (800842c <xTaskIncrementTick+0x158>)
 8008354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008358:	601a      	str	r2, [r3, #0]
					break;
 800835a:	e03e      	b.n	80083da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835c:	4b30      	ldr	r3, [pc, #192]	; (8008420 <xTaskIncrementTick+0x14c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d203      	bcs.n	800837c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008374:	4a2d      	ldr	r2, [pc, #180]	; (800842c <xTaskIncrementTick+0x158>)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800837a:	e02e      	b.n	80083da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	3304      	adds	r3, #4
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff fc1c 	bl	8007bbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	3318      	adds	r3, #24
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff fc13 	bl	8007bbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	2201      	movs	r2, #1
 800839e:	409a      	lsls	r2, r3
 80083a0:	4b23      	ldr	r3, [pc, #140]	; (8008430 <xTaskIncrementTick+0x15c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	4a22      	ldr	r2, [pc, #136]	; (8008430 <xTaskIncrementTick+0x15c>)
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4a1f      	ldr	r2, [pc, #124]	; (8008434 <xTaskIncrementTick+0x160>)
 80083b8:	441a      	add	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	3304      	adds	r3, #4
 80083be:	4619      	mov	r1, r3
 80083c0:	4610      	mov	r0, r2
 80083c2:	f7ff fb9f 	bl	8007b04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <xTaskIncrementTick+0x164>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d3b9      	bcc.n	8008348 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80083d4:	2301      	movs	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083d8:	e7b6      	b.n	8008348 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083da:	4b17      	ldr	r3, [pc, #92]	; (8008438 <xTaskIncrementTick+0x164>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e0:	4914      	ldr	r1, [pc, #80]	; (8008434 <xTaskIncrementTick+0x160>)
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d901      	bls.n	80083f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80083f2:	2301      	movs	r3, #1
 80083f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083f6:	4b11      	ldr	r3, [pc, #68]	; (800843c <xTaskIncrementTick+0x168>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80083fe:	2301      	movs	r3, #1
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	e004      	b.n	800840e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <xTaskIncrementTick+0x16c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3301      	adds	r3, #1
 800840a:	4a0d      	ldr	r2, [pc, #52]	; (8008440 <xTaskIncrementTick+0x16c>)
 800840c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800840e:	697b      	ldr	r3, [r7, #20]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	200005c0 	.word	0x200005c0
 800841c:	2000059c 	.word	0x2000059c
 8008420:	20000550 	.word	0x20000550
 8008424:	20000554 	.word	0x20000554
 8008428:	200005b0 	.word	0x200005b0
 800842c:	200005b8 	.word	0x200005b8
 8008430:	200005a0 	.word	0x200005a0
 8008434:	2000049c 	.word	0x2000049c
 8008438:	20000498 	.word	0x20000498
 800843c:	200005ac 	.word	0x200005ac
 8008440:	200005a8 	.word	0x200005a8

08008444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800844a:	4b27      	ldr	r3, [pc, #156]	; (80084e8 <vTaskSwitchContext+0xa4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008452:	4b26      	ldr	r3, [pc, #152]	; (80084ec <vTaskSwitchContext+0xa8>)
 8008454:	2201      	movs	r2, #1
 8008456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008458:	e03f      	b.n	80084da <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800845a:	4b24      	ldr	r3, [pc, #144]	; (80084ec <vTaskSwitchContext+0xa8>)
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008460:	4b23      	ldr	r3, [pc, #140]	; (80084f0 <vTaskSwitchContext+0xac>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	fab3 f383 	clz	r3, r3
 800846c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800846e:	7afb      	ldrb	r3, [r7, #11]
 8008470:	f1c3 031f 	rsb	r3, r3, #31
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	491f      	ldr	r1, [pc, #124]	; (80084f4 <vTaskSwitchContext+0xb0>)
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	607b      	str	r3, [r7, #4]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <vTaskSwitchContext+0x5a>
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4a12      	ldr	r2, [pc, #72]	; (80084f4 <vTaskSwitchContext+0xb0>)
 80084ac:	4413      	add	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	3308      	adds	r3, #8
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d104      	bne.n	80084d0 <vTaskSwitchContext+0x8c>
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	605a      	str	r2, [r3, #4]
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	4a08      	ldr	r2, [pc, #32]	; (80084f8 <vTaskSwitchContext+0xb4>)
 80084d8:	6013      	str	r3, [r2, #0]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	200005c0 	.word	0x200005c0
 80084ec:	200005ac 	.word	0x200005ac
 80084f0:	200005a0 	.word	0x200005a0
 80084f4:	2000049c 	.word	0x2000049c
 80084f8:	20000498 	.word	0x20000498

080084fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008504:	f000 f852 	bl	80085ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008508:	4b06      	ldr	r3, [pc, #24]	; (8008524 <prvIdleTask+0x28>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d9f9      	bls.n	8008504 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <prvIdleTask+0x2c>)
 8008512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008520:	e7f0      	b.n	8008504 <prvIdleTask+0x8>
 8008522:	bf00      	nop
 8008524:	2000049c 	.word	0x2000049c
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008532:	2300      	movs	r3, #0
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	e00c      	b.n	8008552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4a12      	ldr	r2, [pc, #72]	; (800858c <prvInitialiseTaskLists+0x60>)
 8008544:	4413      	add	r3, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff faaf 	bl	8007aaa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3301      	adds	r3, #1
 8008550:	607b      	str	r3, [r7, #4]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b06      	cmp	r3, #6
 8008556:	d9ef      	bls.n	8008538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008558:	480d      	ldr	r0, [pc, #52]	; (8008590 <prvInitialiseTaskLists+0x64>)
 800855a:	f7ff faa6 	bl	8007aaa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800855e:	480d      	ldr	r0, [pc, #52]	; (8008594 <prvInitialiseTaskLists+0x68>)
 8008560:	f7ff faa3 	bl	8007aaa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008564:	480c      	ldr	r0, [pc, #48]	; (8008598 <prvInitialiseTaskLists+0x6c>)
 8008566:	f7ff faa0 	bl	8007aaa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800856a:	480c      	ldr	r0, [pc, #48]	; (800859c <prvInitialiseTaskLists+0x70>)
 800856c:	f7ff fa9d 	bl	8007aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008570:	480b      	ldr	r0, [pc, #44]	; (80085a0 <prvInitialiseTaskLists+0x74>)
 8008572:	f7ff fa9a 	bl	8007aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008576:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <prvInitialiseTaskLists+0x78>)
 8008578:	4a05      	ldr	r2, [pc, #20]	; (8008590 <prvInitialiseTaskLists+0x64>)
 800857a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800857c:	4b0a      	ldr	r3, [pc, #40]	; (80085a8 <prvInitialiseTaskLists+0x7c>)
 800857e:	4a05      	ldr	r2, [pc, #20]	; (8008594 <prvInitialiseTaskLists+0x68>)
 8008580:	601a      	str	r2, [r3, #0]
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	2000049c 	.word	0x2000049c
 8008590:	20000528 	.word	0x20000528
 8008594:	2000053c 	.word	0x2000053c
 8008598:	20000558 	.word	0x20000558
 800859c:	2000056c 	.word	0x2000056c
 80085a0:	20000584 	.word	0x20000584
 80085a4:	20000550 	.word	0x20000550
 80085a8:	20000554 	.word	0x20000554

080085ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085b2:	e019      	b.n	80085e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085b4:	f000 fa26 	bl	8008a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b8:	4b10      	ldr	r3, [pc, #64]	; (80085fc <prvCheckTasksWaitingTermination+0x50>)
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3304      	adds	r3, #4
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fafa 	bl	8007bbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085ca:	4b0d      	ldr	r3, [pc, #52]	; (8008600 <prvCheckTasksWaitingTermination+0x54>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	4a0b      	ldr	r2, [pc, #44]	; (8008600 <prvCheckTasksWaitingTermination+0x54>)
 80085d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80085d4:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <prvCheckTasksWaitingTermination+0x58>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3b01      	subs	r3, #1
 80085da:	4a0a      	ldr	r2, [pc, #40]	; (8008604 <prvCheckTasksWaitingTermination+0x58>)
 80085dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80085de:	f000 fa41 	bl	8008a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f810 	bl	8008608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085e8:	4b06      	ldr	r3, [pc, #24]	; (8008604 <prvCheckTasksWaitingTermination+0x58>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e1      	bne.n	80085b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	2000056c 	.word	0x2000056c
 8008600:	20000598 	.word	0x20000598
 8008604:	20000580 	.word	0x20000580

08008608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008616:	2b00      	cmp	r3, #0
 8008618:	d108      	bne.n	800862c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fb9e 	bl	8008d60 <vPortFree>
				vPortFree( pxTCB );
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb9b 	bl	8008d60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800862a:	e018      	b.n	800865e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008632:	2b01      	cmp	r3, #1
 8008634:	d103      	bne.n	800863e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fb92 	bl	8008d60 <vPortFree>
	}
 800863c:	e00f      	b.n	800865e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008644:	2b02      	cmp	r3, #2
 8008646:	d00a      	beq.n	800865e <prvDeleteTCB+0x56>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	60fb      	str	r3, [r7, #12]
}
 800865a:	bf00      	nop
 800865c:	e7fe      	b.n	800865c <prvDeleteTCB+0x54>
	}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800866e:	4b0c      	ldr	r3, [pc, #48]	; (80086a0 <prvResetNextTaskUnblockTime+0x38>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d104      	bne.n	8008682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008678:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <prvResetNextTaskUnblockTime+0x3c>)
 800867a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800867e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008680:	e008      	b.n	8008694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008682:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <prvResetNextTaskUnblockTime+0x38>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	4a04      	ldr	r2, [pc, #16]	; (80086a4 <prvResetNextTaskUnblockTime+0x3c>)
 8008692:	6013      	str	r3, [r2, #0]
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	20000550 	.word	0x20000550
 80086a4:	200005b8 	.word	0x200005b8

080086a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086ae:	4b0b      	ldr	r3, [pc, #44]	; (80086dc <xTaskGetSchedulerState+0x34>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d102      	bne.n	80086bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80086b6:	2301      	movs	r3, #1
 80086b8:	607b      	str	r3, [r7, #4]
 80086ba:	e008      	b.n	80086ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086bc:	4b08      	ldr	r3, [pc, #32]	; (80086e0 <xTaskGetSchedulerState+0x38>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d102      	bne.n	80086ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80086c4:	2302      	movs	r3, #2
 80086c6:	607b      	str	r3, [r7, #4]
 80086c8:	e001      	b.n	80086ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80086ca:	2300      	movs	r3, #0
 80086cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80086ce:	687b      	ldr	r3, [r7, #4]
	}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	200005a4 	.word	0x200005a4
 80086e0:	200005c0 	.word	0x200005c0

080086e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086ee:	4b29      	ldr	r3, [pc, #164]	; (8008794 <prvAddCurrentTaskToDelayedList+0xb0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086f4:	4b28      	ldr	r3, [pc, #160]	; (8008798 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff fa5f 	bl	8007bbe <uxListRemove>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10b      	bne.n	800871e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008706:	4b24      	ldr	r3, [pc, #144]	; (8008798 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	2201      	movs	r2, #1
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	43da      	mvns	r2, r3
 8008714:	4b21      	ldr	r3, [pc, #132]	; (800879c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4013      	ands	r3, r2
 800871a:	4a20      	ldr	r2, [pc, #128]	; (800879c <prvAddCurrentTaskToDelayedList+0xb8>)
 800871c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008724:	d10a      	bne.n	800873c <prvAddCurrentTaskToDelayedList+0x58>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3304      	adds	r3, #4
 8008732:	4619      	mov	r1, r3
 8008734:	481a      	ldr	r0, [pc, #104]	; (80087a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008736:	f7ff f9e5 	bl	8007b04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800873a:	e026      	b.n	800878a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008744:	4b14      	ldr	r3, [pc, #80]	; (8008798 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	429a      	cmp	r2, r3
 8008752:	d209      	bcs.n	8008768 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	4b0f      	ldr	r3, [pc, #60]	; (8008798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3304      	adds	r3, #4
 800875e:	4619      	mov	r1, r3
 8008760:	4610      	mov	r0, r2
 8008762:	f7ff f9f3 	bl	8007b4c <vListInsert>
}
 8008766:	e010      	b.n	800878a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008768:	4b0f      	ldr	r3, [pc, #60]	; (80087a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3304      	adds	r3, #4
 8008772:	4619      	mov	r1, r3
 8008774:	4610      	mov	r0, r2
 8008776:	f7ff f9e9 	bl	8007b4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	429a      	cmp	r2, r3
 8008782:	d202      	bcs.n	800878a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008784:	4a09      	ldr	r2, [pc, #36]	; (80087ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	6013      	str	r3, [r2, #0]
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	2000059c 	.word	0x2000059c
 8008798:	20000498 	.word	0x20000498
 800879c:	200005a0 	.word	0x200005a0
 80087a0:	20000584 	.word	0x20000584
 80087a4:	20000554 	.word	0x20000554
 80087a8:	20000550 	.word	0x20000550
 80087ac:	200005b8 	.word	0x200005b8

080087b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3b04      	subs	r3, #4
 80087c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3b04      	subs	r3, #4
 80087ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f023 0201 	bic.w	r2, r3, #1
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3b04      	subs	r3, #4
 80087de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087e0:	4a0c      	ldr	r2, [pc, #48]	; (8008814 <pxPortInitialiseStack+0x64>)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3b14      	subs	r3, #20
 80087ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3b04      	subs	r3, #4
 80087f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f06f 0202 	mvn.w	r2, #2
 80087fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3b20      	subs	r3, #32
 8008804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008806:	68fb      	ldr	r3, [r7, #12]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	08008819 	.word	0x08008819

08008818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <prvTaskExitError+0x54>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800882a:	d00a      	beq.n	8008842 <prvTaskExitError+0x2a>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	60fb      	str	r3, [r7, #12]
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <prvTaskExitError+0x28>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	60bb      	str	r3, [r7, #8]
}
 8008854:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008856:	bf00      	nop
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0fc      	beq.n	8008858 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	200000a8 	.word	0x200000a8

08008870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <pxCurrentTCBConst2>)
 8008872:	6819      	ldr	r1, [r3, #0]
 8008874:	6808      	ldr	r0, [r1, #0]
 8008876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887a:	f380 8809 	msr	PSP, r0
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8811 	msr	BASEPRI, r0
 800888a:	4770      	bx	lr
 800888c:	f3af 8000 	nop.w

08008890 <pxCurrentTCBConst2>:
 8008890:	20000498 	.word	0x20000498
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop

08008898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008898:	4808      	ldr	r0, [pc, #32]	; (80088bc <prvPortStartFirstTask+0x24>)
 800889a:	6800      	ldr	r0, [r0, #0]
 800889c:	6800      	ldr	r0, [r0, #0]
 800889e:	f380 8808 	msr	MSP, r0
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8814 	msr	CONTROL, r0
 80088aa:	b662      	cpsie	i
 80088ac:	b661      	cpsie	f
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	df00      	svc	0
 80088b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088ba:	bf00      	nop
 80088bc:	e000ed08 	.word	0xe000ed08

080088c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088c6:	4b46      	ldr	r3, [pc, #280]	; (80089e0 <xPortStartScheduler+0x120>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a46      	ldr	r2, [pc, #280]	; (80089e4 <xPortStartScheduler+0x124>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d10a      	bne.n	80088e6 <xPortStartScheduler+0x26>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	613b      	str	r3, [r7, #16]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088e6:	4b3e      	ldr	r3, [pc, #248]	; (80089e0 <xPortStartScheduler+0x120>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a3f      	ldr	r2, [pc, #252]	; (80089e8 <xPortStartScheduler+0x128>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10a      	bne.n	8008906 <xPortStartScheduler+0x46>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	60fb      	str	r3, [r7, #12]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008906:	4b39      	ldr	r3, [pc, #228]	; (80089ec <xPortStartScheduler+0x12c>)
 8008908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	22ff      	movs	r2, #255	; 0xff
 8008916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008928:	b2da      	uxtb	r2, r3
 800892a:	4b31      	ldr	r3, [pc, #196]	; (80089f0 <xPortStartScheduler+0x130>)
 800892c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800892e:	4b31      	ldr	r3, [pc, #196]	; (80089f4 <xPortStartScheduler+0x134>)
 8008930:	2207      	movs	r2, #7
 8008932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008934:	e009      	b.n	800894a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008936:	4b2f      	ldr	r3, [pc, #188]	; (80089f4 <xPortStartScheduler+0x134>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3b01      	subs	r3, #1
 800893c:	4a2d      	ldr	r2, [pc, #180]	; (80089f4 <xPortStartScheduler+0x134>)
 800893e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008952:	2b80      	cmp	r3, #128	; 0x80
 8008954:	d0ef      	beq.n	8008936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008956:	4b27      	ldr	r3, [pc, #156]	; (80089f4 <xPortStartScheduler+0x134>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f1c3 0307 	rsb	r3, r3, #7
 800895e:	2b04      	cmp	r3, #4
 8008960:	d00a      	beq.n	8008978 <xPortStartScheduler+0xb8>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	60bb      	str	r3, [r7, #8]
}
 8008974:	bf00      	nop
 8008976:	e7fe      	b.n	8008976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008978:	4b1e      	ldr	r3, [pc, #120]	; (80089f4 <xPortStartScheduler+0x134>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	4a1d      	ldr	r2, [pc, #116]	; (80089f4 <xPortStartScheduler+0x134>)
 8008980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008982:	4b1c      	ldr	r3, [pc, #112]	; (80089f4 <xPortStartScheduler+0x134>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800898a:	4a1a      	ldr	r2, [pc, #104]	; (80089f4 <xPortStartScheduler+0x134>)
 800898c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	b2da      	uxtb	r2, r3
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008996:	4b18      	ldr	r3, [pc, #96]	; (80089f8 <xPortStartScheduler+0x138>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a17      	ldr	r2, [pc, #92]	; (80089f8 <xPortStartScheduler+0x138>)
 800899c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089a2:	4b15      	ldr	r3, [pc, #84]	; (80089f8 <xPortStartScheduler+0x138>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a14      	ldr	r2, [pc, #80]	; (80089f8 <xPortStartScheduler+0x138>)
 80089a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089ae:	f000 f8dd 	bl	8008b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089b2:	4b12      	ldr	r3, [pc, #72]	; (80089fc <xPortStartScheduler+0x13c>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089b8:	f000 f8fc 	bl	8008bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089bc:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <xPortStartScheduler+0x140>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a0f      	ldr	r2, [pc, #60]	; (8008a00 <xPortStartScheduler+0x140>)
 80089c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089c8:	f7ff ff66 	bl	8008898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089cc:	f7ff fd3a 	bl	8008444 <vTaskSwitchContext>
	prvTaskExitError();
 80089d0:	f7ff ff22 	bl	8008818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	e000ed00 	.word	0xe000ed00
 80089e4:	410fc271 	.word	0x410fc271
 80089e8:	410fc270 	.word	0x410fc270
 80089ec:	e000e400 	.word	0xe000e400
 80089f0:	200005c4 	.word	0x200005c4
 80089f4:	200005c8 	.word	0x200005c8
 80089f8:	e000ed20 	.word	0xe000ed20
 80089fc:	200000a8 	.word	0x200000a8
 8008a00:	e000ef34 	.word	0xe000ef34

08008a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	607b      	str	r3, [r7, #4]
}
 8008a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <vPortEnterCritical+0x58>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	4a0d      	ldr	r2, [pc, #52]	; (8008a5c <vPortEnterCritical+0x58>)
 8008a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <vPortEnterCritical+0x58>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d10f      	bne.n	8008a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a30:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <vPortEnterCritical+0x5c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	603b      	str	r3, [r7, #0]
}
 8008a4c:	bf00      	nop
 8008a4e:	e7fe      	b.n	8008a4e <vPortEnterCritical+0x4a>
	}
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	200000a8 	.word	0x200000a8
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a6a:	4b12      	ldr	r3, [pc, #72]	; (8008ab4 <vPortExitCritical+0x50>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <vPortExitCritical+0x24>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	607b      	str	r3, [r7, #4]
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <vPortExitCritical+0x50>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	4a09      	ldr	r2, [pc, #36]	; (8008ab4 <vPortExitCritical+0x50>)
 8008a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a92:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <vPortExitCritical+0x50>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d105      	bne.n	8008aa6 <vPortExitCritical+0x42>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	200000a8 	.word	0x200000a8
	...

08008ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ac0:	f3ef 8009 	mrs	r0, PSP
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <pxCurrentTCBConst>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	f01e 0f10 	tst.w	lr, #16
 8008ad0:	bf08      	it	eq
 8008ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ada:	6010      	str	r0, [r2, #0]
 8008adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ae4:	f380 8811 	msr	BASEPRI, r0
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f7ff fca8 	bl	8008444 <vTaskSwitchContext>
 8008af4:	f04f 0000 	mov.w	r0, #0
 8008af8:	f380 8811 	msr	BASEPRI, r0
 8008afc:	bc09      	pop	{r0, r3}
 8008afe:	6819      	ldr	r1, [r3, #0]
 8008b00:	6808      	ldr	r0, [r1, #0]
 8008b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b06:	f01e 0f10 	tst.w	lr, #16
 8008b0a:	bf08      	it	eq
 8008b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b10:	f380 8809 	msr	PSP, r0
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	f3af 8000 	nop.w

08008b20 <pxCurrentTCBConst>:
 8008b20:	20000498 	.word	0x20000498
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop

08008b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	607b      	str	r3, [r7, #4]
}
 8008b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b42:	f7ff fbc7 	bl	80082d4 <xTaskIncrementTick>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d003      	beq.n	8008b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b4c:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <xPortSysTickHandler+0x40>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	2300      	movs	r3, #0
 8008b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f383 8811 	msr	BASEPRI, r3
}
 8008b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b76:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <vPortSetupTimerInterrupt+0x38>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <vPortSetupTimerInterrupt+0x3c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <vPortSetupTimerInterrupt+0x40>)
 8008b82:	fba2 2303 	umull	r2, r3, r2, r3
 8008b86:	099b      	lsrs	r3, r3, #6
 8008b88:	4a09      	ldr	r2, [pc, #36]	; (8008bb0 <vPortSetupTimerInterrupt+0x44>)
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b8e:	4b04      	ldr	r3, [pc, #16]	; (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b90:	2207      	movs	r2, #7
 8008b92:	601a      	str	r2, [r3, #0]
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	e000e010 	.word	0xe000e010
 8008ba4:	e000e018 	.word	0xe000e018
 8008ba8:	20000000 	.word	0x20000000
 8008bac:	10624dd3 	.word	0x10624dd3
 8008bb0:	e000e014 	.word	0xe000e014

08008bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008bc4 <vPortEnableVFP+0x10>
 8008bb8:	6801      	ldr	r1, [r0, #0]
 8008bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bbe:	6001      	str	r1, [r0, #0]
 8008bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bc2:	bf00      	nop
 8008bc4:	e000ed88 	.word	0xe000ed88

08008bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08a      	sub	sp, #40	; 0x28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bd4:	f7ff fad4 	bl	8008180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bd8:	4b5b      	ldr	r3, [pc, #364]	; (8008d48 <pvPortMalloc+0x180>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008be0:	f000 f920 	bl	8008e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008be4:	4b59      	ldr	r3, [pc, #356]	; (8008d4c <pvPortMalloc+0x184>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4013      	ands	r3, r2
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f040 8093 	bne.w	8008d18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01d      	beq.n	8008c34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d014      	beq.n	8008c34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f023 0307 	bic.w	r3, r3, #7
 8008c10:	3308      	adds	r3, #8
 8008c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <pvPortMalloc+0x6c>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	617b      	str	r3, [r7, #20]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d06e      	beq.n	8008d18 <pvPortMalloc+0x150>
 8008c3a:	4b45      	ldr	r3, [pc, #276]	; (8008d50 <pvPortMalloc+0x188>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d869      	bhi.n	8008d18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c44:	4b43      	ldr	r3, [pc, #268]	; (8008d54 <pvPortMalloc+0x18c>)
 8008c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c48:	4b42      	ldr	r3, [pc, #264]	; (8008d54 <pvPortMalloc+0x18c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c4e:	e004      	b.n	8008c5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d903      	bls.n	8008c6c <pvPortMalloc+0xa4>
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1f1      	bne.n	8008c50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c6c:	4b36      	ldr	r3, [pc, #216]	; (8008d48 <pvPortMalloc+0x180>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d050      	beq.n	8008d18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	4413      	add	r3, r2
 8008c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	2308      	movs	r3, #8
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d91f      	bls.n	8008cd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <pvPortMalloc+0xf8>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	613b      	str	r3, [r7, #16]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	1ad2      	subs	r2, r2, r3
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cd2:	69b8      	ldr	r0, [r7, #24]
 8008cd4:	f000 f908 	bl	8008ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cd8:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <pvPortMalloc+0x188>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	4a1b      	ldr	r2, [pc, #108]	; (8008d50 <pvPortMalloc+0x188>)
 8008ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ce6:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <pvPortMalloc+0x188>)
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <pvPortMalloc+0x190>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d203      	bcs.n	8008cfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cf2:	4b17      	ldr	r3, [pc, #92]	; (8008d50 <pvPortMalloc+0x188>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a18      	ldr	r2, [pc, #96]	; (8008d58 <pvPortMalloc+0x190>)
 8008cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <pvPortMalloc+0x184>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d0e:	4b13      	ldr	r3, [pc, #76]	; (8008d5c <pvPortMalloc+0x194>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	4a11      	ldr	r2, [pc, #68]	; (8008d5c <pvPortMalloc+0x194>)
 8008d16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d18:	f7ff fa40 	bl	800819c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	f003 0307 	and.w	r3, r3, #7
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <pvPortMalloc+0x174>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60fb      	str	r3, [r7, #12]
}
 8008d38:	bf00      	nop
 8008d3a:	e7fe      	b.n	8008d3a <pvPortMalloc+0x172>
	return pvReturn;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3728      	adds	r7, #40	; 0x28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	200041d4 	.word	0x200041d4
 8008d4c:	200041e8 	.word	0x200041e8
 8008d50:	200041d8 	.word	0x200041d8
 8008d54:	200041cc 	.word	0x200041cc
 8008d58:	200041dc 	.word	0x200041dc
 8008d5c:	200041e0 	.word	0x200041e0

08008d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d04d      	beq.n	8008e0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d72:	2308      	movs	r3, #8
 8008d74:	425b      	negs	r3, r3
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	4413      	add	r3, r2
 8008d7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <vPortFree+0xb8>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10a      	bne.n	8008da4 <vPortFree+0x44>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	60fb      	str	r3, [r7, #12]
}
 8008da0:	bf00      	nop
 8008da2:	e7fe      	b.n	8008da2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00a      	beq.n	8008dc2 <vPortFree+0x62>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	60bb      	str	r3, [r7, #8]
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <vPortFree+0xb8>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01e      	beq.n	8008e0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11a      	bne.n	8008e0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <vPortFree+0xb8>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	43db      	mvns	r3, r3
 8008de2:	401a      	ands	r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008de8:	f7ff f9ca 	bl	8008180 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <vPortFree+0xbc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4413      	add	r3, r2
 8008df6:	4a09      	ldr	r2, [pc, #36]	; (8008e1c <vPortFree+0xbc>)
 8008df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008dfa:	6938      	ldr	r0, [r7, #16]
 8008dfc:	f000 f874 	bl	8008ee8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <vPortFree+0xc0>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3301      	adds	r3, #1
 8008e06:	4a06      	ldr	r2, [pc, #24]	; (8008e20 <vPortFree+0xc0>)
 8008e08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e0a:	f7ff f9c7 	bl	800819c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e0e:	bf00      	nop
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	200041e8 	.word	0x200041e8
 8008e1c:	200041d8 	.word	0x200041d8
 8008e20:	200041e4 	.word	0x200041e4

08008e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e30:	4b27      	ldr	r3, [pc, #156]	; (8008ed0 <prvHeapInit+0xac>)
 8008e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f003 0307 	and.w	r3, r3, #7
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00c      	beq.n	8008e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3307      	adds	r3, #7
 8008e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0307 	bic.w	r3, r3, #7
 8008e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	4a1f      	ldr	r2, [pc, #124]	; (8008ed0 <prvHeapInit+0xac>)
 8008e54:	4413      	add	r3, r2
 8008e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e5c:	4a1d      	ldr	r2, [pc, #116]	; (8008ed4 <prvHeapInit+0xb0>)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e62:	4b1c      	ldr	r3, [pc, #112]	; (8008ed4 <prvHeapInit+0xb0>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e70:	2208      	movs	r2, #8
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 0307 	bic.w	r3, r3, #7
 8008e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <prvHeapInit+0xb4>)
 8008e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e86:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <prvHeapInit+0xb4>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e8e:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <prvHeapInit+0xb4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	1ad2      	subs	r2, r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ea4:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <prvHeapInit+0xb4>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	4a0a      	ldr	r2, [pc, #40]	; (8008edc <prvHeapInit+0xb8>)
 8008eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4a09      	ldr	r2, [pc, #36]	; (8008ee0 <prvHeapInit+0xbc>)
 8008eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ebc:	4b09      	ldr	r3, [pc, #36]	; (8008ee4 <prvHeapInit+0xc0>)
 8008ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ec2:	601a      	str	r2, [r3, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	200005cc 	.word	0x200005cc
 8008ed4:	200041cc 	.word	0x200041cc
 8008ed8:	200041d4 	.word	0x200041d4
 8008edc:	200041dc 	.word	0x200041dc
 8008ee0:	200041d8 	.word	0x200041d8
 8008ee4:	200041e8 	.word	0x200041e8

08008ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ef0:	4b28      	ldr	r3, [pc, #160]	; (8008f94 <prvInsertBlockIntoFreeList+0xac>)
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	e002      	b.n	8008efc <prvInsertBlockIntoFreeList+0x14>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d8f7      	bhi.n	8008ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	4413      	add	r3, r2
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d108      	bne.n	8008f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	441a      	add	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	441a      	add	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d118      	bne.n	8008f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	4b15      	ldr	r3, [pc, #84]	; (8008f98 <prvInsertBlockIntoFreeList+0xb0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d00d      	beq.n	8008f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	441a      	add	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	e008      	b.n	8008f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f66:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <prvInsertBlockIntoFreeList+0xb0>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	e003      	b.n	8008f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d002      	beq.n	8008f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f86:	bf00      	nop
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	200041cc 	.word	0x200041cc
 8008f98:	200041d4 	.word	0x200041d4

08008f9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4912      	ldr	r1, [pc, #72]	; (8008fec <MX_USB_DEVICE_Init+0x50>)
 8008fa4:	4812      	ldr	r0, [pc, #72]	; (8008ff0 <MX_USB_DEVICE_Init+0x54>)
 8008fa6:	f7fd fa0f 	bl	80063c8 <USBD_Init>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fb0:	f7f7 fcda 	bl	8000968 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008fb4:	490f      	ldr	r1, [pc, #60]	; (8008ff4 <MX_USB_DEVICE_Init+0x58>)
 8008fb6:	480e      	ldr	r0, [pc, #56]	; (8008ff0 <MX_USB_DEVICE_Init+0x54>)
 8008fb8:	f7fd fa36 	bl	8006428 <USBD_RegisterClass>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008fc2:	f7f7 fcd1 	bl	8000968 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008fc6:	490c      	ldr	r1, [pc, #48]	; (8008ff8 <MX_USB_DEVICE_Init+0x5c>)
 8008fc8:	4809      	ldr	r0, [pc, #36]	; (8008ff0 <MX_USB_DEVICE_Init+0x54>)
 8008fca:	f7fd f927 	bl	800621c <USBD_CDC_RegisterInterface>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008fd4:	f7f7 fcc8 	bl	8000968 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008fd8:	4805      	ldr	r0, [pc, #20]	; (8008ff0 <MX_USB_DEVICE_Init+0x54>)
 8008fda:	f7fd fa5b 	bl	8006494 <USBD_Start>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008fe4:	f7f7 fcc0 	bl	8000968 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008fe8:	bf00      	nop
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	200000c0 	.word	0x200000c0
 8008ff0:	200041ec 	.word	0x200041ec
 8008ff4:	20000028 	.word	0x20000028
 8008ff8:	200000ac 	.word	0x200000ac

08008ffc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009000:	2200      	movs	r2, #0
 8009002:	4905      	ldr	r1, [pc, #20]	; (8009018 <CDC_Init_FS+0x1c>)
 8009004:	4805      	ldr	r0, [pc, #20]	; (800901c <CDC_Init_FS+0x20>)
 8009006:	f7fd f923 	bl	8006250 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800900a:	4905      	ldr	r1, [pc, #20]	; (8009020 <CDC_Init_FS+0x24>)
 800900c:	4803      	ldr	r0, [pc, #12]	; (800901c <CDC_Init_FS+0x20>)
 800900e:	f7fd f941 	bl	8006294 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009012:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009014:	4618      	mov	r0, r3
 8009016:	bd80      	pop	{r7, pc}
 8009018:	200048c8 	.word	0x200048c8
 800901c:	200041ec 	.word	0x200041ec
 8009020:	200044c8 	.word	0x200044c8

08009024 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009024:	b480      	push	{r7}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009028:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800902a:	4618      	mov	r0, r3
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	71fb      	strb	r3, [r7, #7]
 8009040:	4613      	mov	r3, r2
 8009042:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	2b23      	cmp	r3, #35	; 0x23
 8009048:	d84a      	bhi.n	80090e0 <CDC_Control_FS+0xac>
 800904a:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <CDC_Control_FS+0x1c>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	080090e1 	.word	0x080090e1
 8009054:	080090e1 	.word	0x080090e1
 8009058:	080090e1 	.word	0x080090e1
 800905c:	080090e1 	.word	0x080090e1
 8009060:	080090e1 	.word	0x080090e1
 8009064:	080090e1 	.word	0x080090e1
 8009068:	080090e1 	.word	0x080090e1
 800906c:	080090e1 	.word	0x080090e1
 8009070:	080090e1 	.word	0x080090e1
 8009074:	080090e1 	.word	0x080090e1
 8009078:	080090e1 	.word	0x080090e1
 800907c:	080090e1 	.word	0x080090e1
 8009080:	080090e1 	.word	0x080090e1
 8009084:	080090e1 	.word	0x080090e1
 8009088:	080090e1 	.word	0x080090e1
 800908c:	080090e1 	.word	0x080090e1
 8009090:	080090e1 	.word	0x080090e1
 8009094:	080090e1 	.word	0x080090e1
 8009098:	080090e1 	.word	0x080090e1
 800909c:	080090e1 	.word	0x080090e1
 80090a0:	080090e1 	.word	0x080090e1
 80090a4:	080090e1 	.word	0x080090e1
 80090a8:	080090e1 	.word	0x080090e1
 80090ac:	080090e1 	.word	0x080090e1
 80090b0:	080090e1 	.word	0x080090e1
 80090b4:	080090e1 	.word	0x080090e1
 80090b8:	080090e1 	.word	0x080090e1
 80090bc:	080090e1 	.word	0x080090e1
 80090c0:	080090e1 	.word	0x080090e1
 80090c4:	080090e1 	.word	0x080090e1
 80090c8:	080090e1 	.word	0x080090e1
 80090cc:	080090e1 	.word	0x080090e1
 80090d0:	080090e1 	.word	0x080090e1
 80090d4:	080090e1 	.word	0x080090e1
 80090d8:	080090e1 	.word	0x080090e1
 80090dc:	080090e1 	.word	0x080090e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80090e0:	bf00      	nop
  }

  return (USBD_OK);
 80090e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	4805      	ldr	r0, [pc, #20]	; (8009114 <CDC_Receive_FS+0x24>)
 80090fe:	f7fd f8c9 	bl	8006294 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009102:	4804      	ldr	r0, [pc, #16]	; (8009114 <CDC_Receive_FS+0x24>)
 8009104:	f7fd f92a 	bl	800635c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009108:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	200041ec 	.word	0x200041ec

08009118 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009128:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <CDC_Transmit_FS+0x48>)
 800912a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800912e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800913a:	2301      	movs	r3, #1
 800913c:	e00b      	b.n	8009156 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800913e:	887b      	ldrh	r3, [r7, #2]
 8009140:	461a      	mov	r2, r3
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	4806      	ldr	r0, [pc, #24]	; (8009160 <CDC_Transmit_FS+0x48>)
 8009146:	f7fd f883 	bl	8006250 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800914a:	4805      	ldr	r0, [pc, #20]	; (8009160 <CDC_Transmit_FS+0x48>)
 800914c:	f7fd f8c0 	bl	80062d0 <USBD_CDC_TransmitPacket>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	200041ec 	.word	0x200041ec

08009164 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	4613      	mov	r3, r2
 8009170:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800917a:	4618      	mov	r0, r3
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
	...

08009188 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	6039      	str	r1, [r7, #0]
 8009192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	2212      	movs	r2, #18
 8009198:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800919a:	4b03      	ldr	r3, [pc, #12]	; (80091a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	200000dc 	.word	0x200000dc

080091ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	6039      	str	r1, [r7, #0]
 80091b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	2204      	movs	r2, #4
 80091bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091be:	4b03      	ldr	r3, [pc, #12]	; (80091cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	200000f0 	.word	0x200000f0

080091d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	6039      	str	r1, [r7, #0]
 80091da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d105      	bne.n	80091ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	4907      	ldr	r1, [pc, #28]	; (8009204 <USBD_FS_ProductStrDescriptor+0x34>)
 80091e6:	4808      	ldr	r0, [pc, #32]	; (8009208 <USBD_FS_ProductStrDescriptor+0x38>)
 80091e8:	f7fe fb00 	bl	80077ec <USBD_GetString>
 80091ec:	e004      	b.n	80091f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	4904      	ldr	r1, [pc, #16]	; (8009204 <USBD_FS_ProductStrDescriptor+0x34>)
 80091f2:	4805      	ldr	r0, [pc, #20]	; (8009208 <USBD_FS_ProductStrDescriptor+0x38>)
 80091f4:	f7fe fafa 	bl	80077ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80091f8:	4b02      	ldr	r3, [pc, #8]	; (8009204 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20004cc8 	.word	0x20004cc8
 8009208:	0800a3b8 	.word	0x0800a3b8

0800920c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	4904      	ldr	r1, [pc, #16]	; (800922c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800921c:	4804      	ldr	r0, [pc, #16]	; (8009230 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800921e:	f7fe fae5 	bl	80077ec <USBD_GetString>
  return USBD_StrDesc;
 8009222:	4b02      	ldr	r3, [pc, #8]	; (800922c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20004cc8 	.word	0x20004cc8
 8009230:	0800a3d0 	.word	0x0800a3d0

08009234 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	221a      	movs	r2, #26
 8009244:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009246:	f000 f843 	bl	80092d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800924a:	4b02      	ldr	r3, [pc, #8]	; (8009254 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	200000f4 	.word	0x200000f4

08009258 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d105      	bne.n	8009276 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	4907      	ldr	r1, [pc, #28]	; (800928c <USBD_FS_ConfigStrDescriptor+0x34>)
 800926e:	4808      	ldr	r0, [pc, #32]	; (8009290 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009270:	f7fe fabc 	bl	80077ec <USBD_GetString>
 8009274:	e004      	b.n	8009280 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4904      	ldr	r1, [pc, #16]	; (800928c <USBD_FS_ConfigStrDescriptor+0x34>)
 800927a:	4805      	ldr	r0, [pc, #20]	; (8009290 <USBD_FS_ConfigStrDescriptor+0x38>)
 800927c:	f7fe fab6 	bl	80077ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8009280:	4b02      	ldr	r3, [pc, #8]	; (800928c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20004cc8 	.word	0x20004cc8
 8009290:	0800a3e4 	.word	0x0800a3e4

08009294 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d105      	bne.n	80092b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	4907      	ldr	r1, [pc, #28]	; (80092c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092aa:	4808      	ldr	r0, [pc, #32]	; (80092cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092ac:	f7fe fa9e 	bl	80077ec <USBD_GetString>
 80092b0:	e004      	b.n	80092bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	4904      	ldr	r1, [pc, #16]	; (80092c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092b6:	4805      	ldr	r0, [pc, #20]	; (80092cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092b8:	f7fe fa98 	bl	80077ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80092bc:	4b02      	ldr	r3, [pc, #8]	; (80092c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20004cc8 	.word	0x20004cc8
 80092cc:	0800a3f0 	.word	0x0800a3f0

080092d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092d6:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <Get_SerialNum+0x44>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092dc:	4b0e      	ldr	r3, [pc, #56]	; (8009318 <Get_SerialNum+0x48>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092e2:	4b0e      	ldr	r3, [pc, #56]	; (800931c <Get_SerialNum+0x4c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d009      	beq.n	800930a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092f6:	2208      	movs	r2, #8
 80092f8:	4909      	ldr	r1, [pc, #36]	; (8009320 <Get_SerialNum+0x50>)
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f814 	bl	8009328 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009300:	2204      	movs	r2, #4
 8009302:	4908      	ldr	r1, [pc, #32]	; (8009324 <Get_SerialNum+0x54>)
 8009304:	68b8      	ldr	r0, [r7, #8]
 8009306:	f000 f80f 	bl	8009328 <IntToUnicode>
  }
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	1fff7a10 	.word	0x1fff7a10
 8009318:	1fff7a14 	.word	0x1fff7a14
 800931c:	1fff7a18 	.word	0x1fff7a18
 8009320:	200000f6 	.word	0x200000f6
 8009324:	20000106 	.word	0x20000106

08009328 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	4613      	mov	r3, r2
 8009334:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800933a:	2300      	movs	r3, #0
 800933c:	75fb      	strb	r3, [r7, #23]
 800933e:	e027      	b.n	8009390 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	0f1b      	lsrs	r3, r3, #28
 8009344:	2b09      	cmp	r3, #9
 8009346:	d80b      	bhi.n	8009360 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	0f1b      	lsrs	r3, r3, #28
 800934c:	b2da      	uxtb	r2, r3
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	4619      	mov	r1, r3
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	440b      	add	r3, r1
 8009358:	3230      	adds	r2, #48	; 0x30
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e00a      	b.n	8009376 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	0f1b      	lsrs	r3, r3, #28
 8009364:	b2da      	uxtb	r2, r3
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	4619      	mov	r1, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	440b      	add	r3, r1
 8009370:	3237      	adds	r2, #55	; 0x37
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800937c:	7dfb      	ldrb	r3, [r7, #23]
 800937e:	005b      	lsls	r3, r3, #1
 8009380:	3301      	adds	r3, #1
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	4413      	add	r3, r2
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	3301      	adds	r3, #1
 800938e:	75fb      	strb	r3, [r7, #23]
 8009390:	7dfa      	ldrb	r2, [r7, #23]
 8009392:	79fb      	ldrb	r3, [r7, #7]
 8009394:	429a      	cmp	r2, r3
 8009396:	d3d3      	bcc.n	8009340 <IntToUnicode+0x18>
  }
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08a      	sub	sp, #40	; 0x28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093b0:	f107 0314 	add.w	r3, r7, #20
 80093b4:	2200      	movs	r2, #0
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	605a      	str	r2, [r3, #4]
 80093ba:	609a      	str	r2, [r3, #8]
 80093bc:	60da      	str	r2, [r3, #12]
 80093be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093c8:	d13a      	bne.n	8009440 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ca:	2300      	movs	r3, #0
 80093cc:	613b      	str	r3, [r7, #16]
 80093ce:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 80093d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d2:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 80093d4:	f043 0301 	orr.w	r3, r3, #1
 80093d8:	6313      	str	r3, [r2, #48]	; 0x30
 80093da:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80093e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80093ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ec:	2302      	movs	r3, #2
 80093ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093f4:	2303      	movs	r3, #3
 80093f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093f8:	230a      	movs	r3, #10
 80093fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093fc:	f107 0314 	add.w	r3, r7, #20
 8009400:	4619      	mov	r1, r3
 8009402:	4812      	ldr	r0, [pc, #72]	; (800944c <HAL_PCD_MspInit+0xa4>)
 8009404:	f7f8 f90c 	bl	8001620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009408:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 800940a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940c:	4a0e      	ldr	r2, [pc, #56]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 800940e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009412:	6353      	str	r3, [r2, #52]	; 0x34
 8009414:	2300      	movs	r3, #0
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	4b0b      	ldr	r3, [pc, #44]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 800941a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941c:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 800941e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009422:	6453      	str	r3, [r2, #68]	; 0x44
 8009424:	4b08      	ldr	r3, [pc, #32]	; (8009448 <HAL_PCD_MspInit+0xa0>)
 8009426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009430:	2200      	movs	r2, #0
 8009432:	2105      	movs	r1, #5
 8009434:	2043      	movs	r0, #67	; 0x43
 8009436:	f7f7 fed6 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800943a:	2043      	movs	r0, #67	; 0x43
 800943c:	f7f7 feef 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009440:	bf00      	nop
 8009442:	3728      	adds	r7, #40	; 0x28
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	40023800 	.word	0x40023800
 800944c:	40020000 	.word	0x40020000

08009450 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7fd f861 	bl	800652e <USBD_LL_SetupStage>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	4613      	mov	r3, r2
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	4619      	mov	r1, r3
 800949e:	f7fd f89b 	bl	80065d8 <USBD_LL_DataOutStage>
}
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	4613      	mov	r3, r2
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	334c      	adds	r3, #76	; 0x4c
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	4619      	mov	r1, r3
 80094d2:	f7fd f934 	bl	800673e <USBD_LL_DataInStage>
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fd fa68 	bl	80069c2 <USBD_LL_SOF>
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009502:	2301      	movs	r3, #1
 8009504:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d001      	beq.n	8009512 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800950e:	f7f7 fa2b 	bl	8000968 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009518:	7bfa      	ldrb	r2, [r7, #15]
 800951a:	4611      	mov	r1, r2
 800951c:	4618      	mov	r0, r3
 800951e:	f7fd fa12 	bl	8006946 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009528:	4618      	mov	r0, r3
 800952a:	f7fd f9ba 	bl	80068a2 <USBD_LL_Reset>
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009546:	4618      	mov	r0, r3
 8009548:	f7fd fa0d 	bl	8006966 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6812      	ldr	r2, [r2, #0]
 800955a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800955e:	f043 0301 	orr.w	r3, r3, #1
 8009562:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800956c:	4b04      	ldr	r3, [pc, #16]	; (8009580 <HAL_PCD_SuspendCallback+0x48>)
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	4a03      	ldr	r2, [pc, #12]	; (8009580 <HAL_PCD_SuspendCallback+0x48>)
 8009572:	f043 0306 	orr.w	r3, r3, #6
 8009576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	e000ed00 	.word	0xe000ed00

08009584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009592:	4618      	mov	r0, r3
 8009594:	f7fd f9fd 	bl	8006992 <USBD_LL_Resume>
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095b2:	78fa      	ldrb	r2, [r7, #3]
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fd fa55 	bl	8006a66 <USBD_LL_IsoOUTIncomplete>
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fd fa11 	bl	8006a02 <USBD_LL_IsoINIncomplete>
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fd fa67 	bl	8006aca <USBD_LL_DevConnected>
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009612:	4618      	mov	r0, r3
 8009614:	f7fd fa64 	bl	8006ae0 <USBD_LL_DevDisconnected>
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d13c      	bne.n	80096aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009630:	4a20      	ldr	r2, [pc, #128]	; (80096b4 <USBD_LL_Init+0x94>)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <USBD_LL_Init+0x94>)
 800963c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009640:	4b1c      	ldr	r3, [pc, #112]	; (80096b4 <USBD_LL_Init+0x94>)
 8009642:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009646:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009648:	4b1a      	ldr	r3, [pc, #104]	; (80096b4 <USBD_LL_Init+0x94>)
 800964a:	2204      	movs	r2, #4
 800964c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800964e:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <USBD_LL_Init+0x94>)
 8009650:	2202      	movs	r2, #2
 8009652:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009654:	4b17      	ldr	r3, [pc, #92]	; (80096b4 <USBD_LL_Init+0x94>)
 8009656:	2200      	movs	r2, #0
 8009658:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800965a:	4b16      	ldr	r3, [pc, #88]	; (80096b4 <USBD_LL_Init+0x94>)
 800965c:	2202      	movs	r2, #2
 800965e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009660:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <USBD_LL_Init+0x94>)
 8009662:	2200      	movs	r2, #0
 8009664:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009666:	4b13      	ldr	r3, [pc, #76]	; (80096b4 <USBD_LL_Init+0x94>)
 8009668:	2200      	movs	r2, #0
 800966a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800966c:	4b11      	ldr	r3, [pc, #68]	; (80096b4 <USBD_LL_Init+0x94>)
 800966e:	2200      	movs	r2, #0
 8009670:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009672:	4b10      	ldr	r3, [pc, #64]	; (80096b4 <USBD_LL_Init+0x94>)
 8009674:	2200      	movs	r2, #0
 8009676:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009678:	4b0e      	ldr	r3, [pc, #56]	; (80096b4 <USBD_LL_Init+0x94>)
 800967a:	2200      	movs	r2, #0
 800967c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800967e:	480d      	ldr	r0, [pc, #52]	; (80096b4 <USBD_LL_Init+0x94>)
 8009680:	f7f8 f96b 	bl	800195a <HAL_PCD_Init>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800968a:	f7f7 f96d 	bl	8000968 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800968e:	2180      	movs	r1, #128	; 0x80
 8009690:	4808      	ldr	r0, [pc, #32]	; (80096b4 <USBD_LL_Init+0x94>)
 8009692:	f7f9 fbc2 	bl	8002e1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009696:	2240      	movs	r2, #64	; 0x40
 8009698:	2100      	movs	r1, #0
 800969a:	4806      	ldr	r0, [pc, #24]	; (80096b4 <USBD_LL_Init+0x94>)
 800969c:	f7f9 fb76 	bl	8002d8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80096a0:	2280      	movs	r2, #128	; 0x80
 80096a2:	2101      	movs	r1, #1
 80096a4:	4803      	ldr	r0, [pc, #12]	; (80096b4 <USBD_LL_Init+0x94>)
 80096a6:	f7f9 fb71 	bl	8002d8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20004ec8 	.word	0x20004ec8

080096b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7f8 fa60 	bl	8001b94 <HAL_PCD_Start>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 f942 	bl	8009964 <USBD_Get_USB_Status>
 80096e0:	4603      	mov	r3, r0
 80096e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	4608      	mov	r0, r1
 80096f8:	4611      	mov	r1, r2
 80096fa:	461a      	mov	r2, r3
 80096fc:	4603      	mov	r3, r0
 80096fe:	70fb      	strb	r3, [r7, #3]
 8009700:	460b      	mov	r3, r1
 8009702:	70bb      	strb	r3, [r7, #2]
 8009704:	4613      	mov	r3, r2
 8009706:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009716:	78bb      	ldrb	r3, [r7, #2]
 8009718:	883a      	ldrh	r2, [r7, #0]
 800971a:	78f9      	ldrb	r1, [r7, #3]
 800971c:	f7f8 ff31 	bl	8002582 <HAL_PCD_EP_Open>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f91c 	bl	8009964 <USBD_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009730:	7bbb      	ldrb	r3, [r7, #14]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009754:	78fa      	ldrb	r2, [r7, #3]
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7f8 ff7a 	bl	8002652 <HAL_PCD_EP_Close>
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 f8fd 	bl	8009964 <USBD_Get_USB_Status>
 800976a:	4603      	mov	r3, r0
 800976c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800976e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009792:	78fa      	ldrb	r2, [r7, #3]
 8009794:	4611      	mov	r1, r2
 8009796:	4618      	mov	r0, r3
 8009798:	f7f9 f852 	bl	8002840 <HAL_PCD_EP_SetStall>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f8de 	bl	8009964 <USBD_Get_USB_Status>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097d0:	78fa      	ldrb	r2, [r7, #3]
 80097d2:	4611      	mov	r1, r2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7f9 f897 	bl	8002908 <HAL_PCD_EP_ClrStall>
 80097da:	4603      	mov	r3, r0
 80097dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 f8bf 	bl	8009964 <USBD_Get_USB_Status>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009806:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800980c:	2b00      	cmp	r3, #0
 800980e:	da0b      	bge.n	8009828 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009816:	68f9      	ldr	r1, [r7, #12]
 8009818:	4613      	mov	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	333e      	adds	r3, #62	; 0x3e
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	e00b      	b.n	8009840 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	4613      	mov	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800983e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009866:	78fa      	ldrb	r2, [r7, #3]
 8009868:	4611      	mov	r1, r2
 800986a:	4618      	mov	r0, r3
 800986c:	f7f8 fe64 	bl	8002538 <HAL_PCD_SetAddress>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	4618      	mov	r0, r3
 8009878:	f000 f874 	bl	8009964 <USBD_Get_USB_Status>
 800987c:	4603      	mov	r3, r0
 800987e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009880:	7bbb      	ldrb	r3, [r7, #14]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b086      	sub	sp, #24
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
 8009896:	460b      	mov	r3, r1
 8009898:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098a8:	7af9      	ldrb	r1, [r7, #11]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	f7f8 ff7d 	bl	80027ac <HAL_PCD_EP_Transmit>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 f853 	bl	8009964 <USBD_Get_USB_Status>
 80098be:	4603      	mov	r3, r0
 80098c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	460b      	mov	r3, r1
 80098da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098ea:	7af9      	ldrb	r1, [r7, #11]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	f7f8 fef9 	bl	80026e6 <HAL_PCD_EP_Receive>
 80098f4:	4603      	mov	r3, r0
 80098f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f832 	bl	8009964 <USBD_Get_USB_Status>
 8009900:	4603      	mov	r3, r0
 8009902:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009904:	7dbb      	ldrb	r3, [r7, #22]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009920:	78fa      	ldrb	r2, [r7, #3]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7f8 ff29 	bl	800277c <HAL_PCD_EP_GetRxCount>
 800992a:	4603      	mov	r3, r0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800993c:	4b03      	ldr	r3, [pc, #12]	; (800994c <USBD_static_malloc+0x18>)
}
 800993e:	4618      	mov	r0, r3
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	200053d4 	.word	0x200053d4

08009950 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]

}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	2b03      	cmp	r3, #3
 8009976:	d817      	bhi.n	80099a8 <USBD_Get_USB_Status+0x44>
 8009978:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <USBD_Get_USB_Status+0x1c>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	08009991 	.word	0x08009991
 8009984:	08009997 	.word	0x08009997
 8009988:	0800999d 	.word	0x0800999d
 800998c:	080099a3 	.word	0x080099a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
    break;
 8009994:	e00b      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009996:	2303      	movs	r3, #3
 8009998:	73fb      	strb	r3, [r7, #15]
    break;
 800999a:	e008      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800999c:	2301      	movs	r3, #1
 800999e:	73fb      	strb	r3, [r7, #15]
    break;
 80099a0:	e005      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099a2:	2303      	movs	r3, #3
 80099a4:	73fb      	strb	r3, [r7, #15]
    break;
 80099a6:	e002      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	73fb      	strb	r3, [r7, #15]
    break;
 80099ac:	bf00      	nop
  }
  return usb_status;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <malloc>:
 80099bc:	4b02      	ldr	r3, [pc, #8]	; (80099c8 <malloc+0xc>)
 80099be:	4601      	mov	r1, r0
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	f000 b82b 	b.w	8009a1c <_malloc_r>
 80099c6:	bf00      	nop
 80099c8:	2000015c 	.word	0x2000015c

080099cc <free>:
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <free+0xc>)
 80099ce:	4601      	mov	r1, r0
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	f000 b921 	b.w	8009c18 <_free_r>
 80099d6:	bf00      	nop
 80099d8:	2000015c 	.word	0x2000015c

080099dc <sbrk_aligned>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	4e0e      	ldr	r6, [pc, #56]	; (8009a18 <sbrk_aligned+0x3c>)
 80099e0:	460c      	mov	r4, r1
 80099e2:	6831      	ldr	r1, [r6, #0]
 80099e4:	4605      	mov	r5, r0
 80099e6:	b911      	cbnz	r1, 80099ee <sbrk_aligned+0x12>
 80099e8:	f000 f8cc 	bl	8009b84 <_sbrk_r>
 80099ec:	6030      	str	r0, [r6, #0]
 80099ee:	4621      	mov	r1, r4
 80099f0:	4628      	mov	r0, r5
 80099f2:	f000 f8c7 	bl	8009b84 <_sbrk_r>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d00a      	beq.n	8009a10 <sbrk_aligned+0x34>
 80099fa:	1cc4      	adds	r4, r0, #3
 80099fc:	f024 0403 	bic.w	r4, r4, #3
 8009a00:	42a0      	cmp	r0, r4
 8009a02:	d007      	beq.n	8009a14 <sbrk_aligned+0x38>
 8009a04:	1a21      	subs	r1, r4, r0
 8009a06:	4628      	mov	r0, r5
 8009a08:	f000 f8bc 	bl	8009b84 <_sbrk_r>
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d101      	bne.n	8009a14 <sbrk_aligned+0x38>
 8009a10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009a14:	4620      	mov	r0, r4
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	200055f8 	.word	0x200055f8

08009a1c <_malloc_r>:
 8009a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	1ccd      	adds	r5, r1, #3
 8009a22:	f025 0503 	bic.w	r5, r5, #3
 8009a26:	3508      	adds	r5, #8
 8009a28:	2d0c      	cmp	r5, #12
 8009a2a:	bf38      	it	cc
 8009a2c:	250c      	movcc	r5, #12
 8009a2e:	2d00      	cmp	r5, #0
 8009a30:	4607      	mov	r7, r0
 8009a32:	db01      	blt.n	8009a38 <_malloc_r+0x1c>
 8009a34:	42a9      	cmp	r1, r5
 8009a36:	d905      	bls.n	8009a44 <_malloc_r+0x28>
 8009a38:	230c      	movs	r3, #12
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	2600      	movs	r6, #0
 8009a3e:	4630      	mov	r0, r6
 8009a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b18 <_malloc_r+0xfc>
 8009a48:	f000 f868 	bl	8009b1c <__malloc_lock>
 8009a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a50:	461c      	mov	r4, r3
 8009a52:	bb5c      	cbnz	r4, 8009aac <_malloc_r+0x90>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4638      	mov	r0, r7
 8009a58:	f7ff ffc0 	bl	80099dc <sbrk_aligned>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	4604      	mov	r4, r0
 8009a60:	d155      	bne.n	8009b0e <_malloc_r+0xf2>
 8009a62:	f8d8 4000 	ldr.w	r4, [r8]
 8009a66:	4626      	mov	r6, r4
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	d145      	bne.n	8009af8 <_malloc_r+0xdc>
 8009a6c:	2c00      	cmp	r4, #0
 8009a6e:	d048      	beq.n	8009b02 <_malloc_r+0xe6>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	4631      	mov	r1, r6
 8009a74:	4638      	mov	r0, r7
 8009a76:	eb04 0903 	add.w	r9, r4, r3
 8009a7a:	f000 f883 	bl	8009b84 <_sbrk_r>
 8009a7e:	4581      	cmp	r9, r0
 8009a80:	d13f      	bne.n	8009b02 <_malloc_r+0xe6>
 8009a82:	6821      	ldr	r1, [r4, #0]
 8009a84:	1a6d      	subs	r5, r5, r1
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ffa7 	bl	80099dc <sbrk_aligned>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d037      	beq.n	8009b02 <_malloc_r+0xe6>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	442b      	add	r3, r5
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	f8d8 3000 	ldr.w	r3, [r8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d038      	beq.n	8009b12 <_malloc_r+0xf6>
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	42a2      	cmp	r2, r4
 8009aa4:	d12b      	bne.n	8009afe <_malloc_r+0xe2>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	605a      	str	r2, [r3, #4]
 8009aaa:	e00f      	b.n	8009acc <_malloc_r+0xb0>
 8009aac:	6822      	ldr	r2, [r4, #0]
 8009aae:	1b52      	subs	r2, r2, r5
 8009ab0:	d41f      	bmi.n	8009af2 <_malloc_r+0xd6>
 8009ab2:	2a0b      	cmp	r2, #11
 8009ab4:	d917      	bls.n	8009ae6 <_malloc_r+0xca>
 8009ab6:	1961      	adds	r1, r4, r5
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	6025      	str	r5, [r4, #0]
 8009abc:	bf18      	it	ne
 8009abe:	6059      	strne	r1, [r3, #4]
 8009ac0:	6863      	ldr	r3, [r4, #4]
 8009ac2:	bf08      	it	eq
 8009ac4:	f8c8 1000 	streq.w	r1, [r8]
 8009ac8:	5162      	str	r2, [r4, r5]
 8009aca:	604b      	str	r3, [r1, #4]
 8009acc:	4638      	mov	r0, r7
 8009ace:	f104 060b 	add.w	r6, r4, #11
 8009ad2:	f000 f829 	bl	8009b28 <__malloc_unlock>
 8009ad6:	f026 0607 	bic.w	r6, r6, #7
 8009ada:	1d23      	adds	r3, r4, #4
 8009adc:	1af2      	subs	r2, r6, r3
 8009ade:	d0ae      	beq.n	8009a3e <_malloc_r+0x22>
 8009ae0:	1b9b      	subs	r3, r3, r6
 8009ae2:	50a3      	str	r3, [r4, r2]
 8009ae4:	e7ab      	b.n	8009a3e <_malloc_r+0x22>
 8009ae6:	42a3      	cmp	r3, r4
 8009ae8:	6862      	ldr	r2, [r4, #4]
 8009aea:	d1dd      	bne.n	8009aa8 <_malloc_r+0x8c>
 8009aec:	f8c8 2000 	str.w	r2, [r8]
 8009af0:	e7ec      	b.n	8009acc <_malloc_r+0xb0>
 8009af2:	4623      	mov	r3, r4
 8009af4:	6864      	ldr	r4, [r4, #4]
 8009af6:	e7ac      	b.n	8009a52 <_malloc_r+0x36>
 8009af8:	4634      	mov	r4, r6
 8009afa:	6876      	ldr	r6, [r6, #4]
 8009afc:	e7b4      	b.n	8009a68 <_malloc_r+0x4c>
 8009afe:	4613      	mov	r3, r2
 8009b00:	e7cc      	b.n	8009a9c <_malloc_r+0x80>
 8009b02:	230c      	movs	r3, #12
 8009b04:	603b      	str	r3, [r7, #0]
 8009b06:	4638      	mov	r0, r7
 8009b08:	f000 f80e 	bl	8009b28 <__malloc_unlock>
 8009b0c:	e797      	b.n	8009a3e <_malloc_r+0x22>
 8009b0e:	6025      	str	r5, [r4, #0]
 8009b10:	e7dc      	b.n	8009acc <_malloc_r+0xb0>
 8009b12:	605b      	str	r3, [r3, #4]
 8009b14:	deff      	udf	#255	; 0xff
 8009b16:	bf00      	nop
 8009b18:	200055f4 	.word	0x200055f4

08009b1c <__malloc_lock>:
 8009b1c:	4801      	ldr	r0, [pc, #4]	; (8009b24 <__malloc_lock+0x8>)
 8009b1e:	f000 b86b 	b.w	8009bf8 <__retarget_lock_acquire_recursive>
 8009b22:	bf00      	nop
 8009b24:	20005738 	.word	0x20005738

08009b28 <__malloc_unlock>:
 8009b28:	4801      	ldr	r0, [pc, #4]	; (8009b30 <__malloc_unlock+0x8>)
 8009b2a:	f000 b866 	b.w	8009bfa <__retarget_lock_release_recursive>
 8009b2e:	bf00      	nop
 8009b30:	20005738 	.word	0x20005738

08009b34 <siprintf>:
 8009b34:	b40e      	push	{r1, r2, r3}
 8009b36:	b500      	push	{lr}
 8009b38:	b09c      	sub	sp, #112	; 0x70
 8009b3a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b3c:	9002      	str	r0, [sp, #8]
 8009b3e:	9006      	str	r0, [sp, #24]
 8009b40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b44:	4809      	ldr	r0, [pc, #36]	; (8009b6c <siprintf+0x38>)
 8009b46:	9107      	str	r1, [sp, #28]
 8009b48:	9104      	str	r1, [sp, #16]
 8009b4a:	4909      	ldr	r1, [pc, #36]	; (8009b70 <siprintf+0x3c>)
 8009b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b50:	9105      	str	r1, [sp, #20]
 8009b52:	6800      	ldr	r0, [r0, #0]
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	a902      	add	r1, sp, #8
 8009b58:	f000 f904 	bl	8009d64 <_svfiprintf_r>
 8009b5c:	9b02      	ldr	r3, [sp, #8]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	701a      	strb	r2, [r3, #0]
 8009b62:	b01c      	add	sp, #112	; 0x70
 8009b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b68:	b003      	add	sp, #12
 8009b6a:	4770      	bx	lr
 8009b6c:	2000015c 	.word	0x2000015c
 8009b70:	ffff0208 	.word	0xffff0208

08009b74 <memset>:
 8009b74:	4402      	add	r2, r0
 8009b76:	4603      	mov	r3, r0
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d100      	bne.n	8009b7e <memset+0xa>
 8009b7c:	4770      	bx	lr
 8009b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b82:	e7f9      	b.n	8009b78 <memset+0x4>

08009b84 <_sbrk_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	4d06      	ldr	r5, [pc, #24]	; (8009ba0 <_sbrk_r+0x1c>)
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	4608      	mov	r0, r1
 8009b8e:	602b      	str	r3, [r5, #0]
 8009b90:	f7f6 ffc6 	bl	8000b20 <_sbrk>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_sbrk_r+0x1a>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_sbrk_r+0x1a>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	20005734 	.word	0x20005734

08009ba4 <__errno>:
 8009ba4:	4b01      	ldr	r3, [pc, #4]	; (8009bac <__errno+0x8>)
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	2000015c 	.word	0x2000015c

08009bb0 <__libc_init_array>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	4d0d      	ldr	r5, [pc, #52]	; (8009be8 <__libc_init_array+0x38>)
 8009bb4:	4c0d      	ldr	r4, [pc, #52]	; (8009bec <__libc_init_array+0x3c>)
 8009bb6:	1b64      	subs	r4, r4, r5
 8009bb8:	10a4      	asrs	r4, r4, #2
 8009bba:	2600      	movs	r6, #0
 8009bbc:	42a6      	cmp	r6, r4
 8009bbe:	d109      	bne.n	8009bd4 <__libc_init_array+0x24>
 8009bc0:	4d0b      	ldr	r5, [pc, #44]	; (8009bf0 <__libc_init_array+0x40>)
 8009bc2:	4c0c      	ldr	r4, [pc, #48]	; (8009bf4 <__libc_init_array+0x44>)
 8009bc4:	f000 fbae 	bl	800a324 <_init>
 8009bc8:	1b64      	subs	r4, r4, r5
 8009bca:	10a4      	asrs	r4, r4, #2
 8009bcc:	2600      	movs	r6, #0
 8009bce:	42a6      	cmp	r6, r4
 8009bd0:	d105      	bne.n	8009bde <__libc_init_array+0x2e>
 8009bd2:	bd70      	pop	{r4, r5, r6, pc}
 8009bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd8:	4798      	blx	r3
 8009bda:	3601      	adds	r6, #1
 8009bdc:	e7ee      	b.n	8009bbc <__libc_init_array+0xc>
 8009bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8009be2:	4798      	blx	r3
 8009be4:	3601      	adds	r6, #1
 8009be6:	e7f2      	b.n	8009bce <__libc_init_array+0x1e>
 8009be8:	0800a45c 	.word	0x0800a45c
 8009bec:	0800a45c 	.word	0x0800a45c
 8009bf0:	0800a45c 	.word	0x0800a45c
 8009bf4:	0800a460 	.word	0x0800a460

08009bf8 <__retarget_lock_acquire_recursive>:
 8009bf8:	4770      	bx	lr

08009bfa <__retarget_lock_release_recursive>:
 8009bfa:	4770      	bx	lr

08009bfc <memcpy>:
 8009bfc:	440a      	add	r2, r1
 8009bfe:	4291      	cmp	r1, r2
 8009c00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c04:	d100      	bne.n	8009c08 <memcpy+0xc>
 8009c06:	4770      	bx	lr
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c12:	4291      	cmp	r1, r2
 8009c14:	d1f9      	bne.n	8009c0a <memcpy+0xe>
 8009c16:	bd10      	pop	{r4, pc}

08009c18 <_free_r>:
 8009c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	d044      	beq.n	8009ca8 <_free_r+0x90>
 8009c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c22:	9001      	str	r0, [sp, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f1a1 0404 	sub.w	r4, r1, #4
 8009c2a:	bfb8      	it	lt
 8009c2c:	18e4      	addlt	r4, r4, r3
 8009c2e:	f7ff ff75 	bl	8009b1c <__malloc_lock>
 8009c32:	4a1e      	ldr	r2, [pc, #120]	; (8009cac <_free_r+0x94>)
 8009c34:	9801      	ldr	r0, [sp, #4]
 8009c36:	6813      	ldr	r3, [r2, #0]
 8009c38:	b933      	cbnz	r3, 8009c48 <_free_r+0x30>
 8009c3a:	6063      	str	r3, [r4, #4]
 8009c3c:	6014      	str	r4, [r2, #0]
 8009c3e:	b003      	add	sp, #12
 8009c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c44:	f7ff bf70 	b.w	8009b28 <__malloc_unlock>
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	d908      	bls.n	8009c5e <_free_r+0x46>
 8009c4c:	6825      	ldr	r5, [r4, #0]
 8009c4e:	1961      	adds	r1, r4, r5
 8009c50:	428b      	cmp	r3, r1
 8009c52:	bf01      	itttt	eq
 8009c54:	6819      	ldreq	r1, [r3, #0]
 8009c56:	685b      	ldreq	r3, [r3, #4]
 8009c58:	1949      	addeq	r1, r1, r5
 8009c5a:	6021      	streq	r1, [r4, #0]
 8009c5c:	e7ed      	b.n	8009c3a <_free_r+0x22>
 8009c5e:	461a      	mov	r2, r3
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	b10b      	cbz	r3, 8009c68 <_free_r+0x50>
 8009c64:	42a3      	cmp	r3, r4
 8009c66:	d9fa      	bls.n	8009c5e <_free_r+0x46>
 8009c68:	6811      	ldr	r1, [r2, #0]
 8009c6a:	1855      	adds	r5, r2, r1
 8009c6c:	42a5      	cmp	r5, r4
 8009c6e:	d10b      	bne.n	8009c88 <_free_r+0x70>
 8009c70:	6824      	ldr	r4, [r4, #0]
 8009c72:	4421      	add	r1, r4
 8009c74:	1854      	adds	r4, r2, r1
 8009c76:	42a3      	cmp	r3, r4
 8009c78:	6011      	str	r1, [r2, #0]
 8009c7a:	d1e0      	bne.n	8009c3e <_free_r+0x26>
 8009c7c:	681c      	ldr	r4, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	6053      	str	r3, [r2, #4]
 8009c82:	440c      	add	r4, r1
 8009c84:	6014      	str	r4, [r2, #0]
 8009c86:	e7da      	b.n	8009c3e <_free_r+0x26>
 8009c88:	d902      	bls.n	8009c90 <_free_r+0x78>
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	6003      	str	r3, [r0, #0]
 8009c8e:	e7d6      	b.n	8009c3e <_free_r+0x26>
 8009c90:	6825      	ldr	r5, [r4, #0]
 8009c92:	1961      	adds	r1, r4, r5
 8009c94:	428b      	cmp	r3, r1
 8009c96:	bf04      	itt	eq
 8009c98:	6819      	ldreq	r1, [r3, #0]
 8009c9a:	685b      	ldreq	r3, [r3, #4]
 8009c9c:	6063      	str	r3, [r4, #4]
 8009c9e:	bf04      	itt	eq
 8009ca0:	1949      	addeq	r1, r1, r5
 8009ca2:	6021      	streq	r1, [r4, #0]
 8009ca4:	6054      	str	r4, [r2, #4]
 8009ca6:	e7ca      	b.n	8009c3e <_free_r+0x26>
 8009ca8:	b003      	add	sp, #12
 8009caa:	bd30      	pop	{r4, r5, pc}
 8009cac:	200055f4 	.word	0x200055f4

08009cb0 <__ssputs_r>:
 8009cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb4:	688e      	ldr	r6, [r1, #8]
 8009cb6:	461f      	mov	r7, r3
 8009cb8:	42be      	cmp	r6, r7
 8009cba:	680b      	ldr	r3, [r1, #0]
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	4690      	mov	r8, r2
 8009cc2:	d82c      	bhi.n	8009d1e <__ssputs_r+0x6e>
 8009cc4:	898a      	ldrh	r2, [r1, #12]
 8009cc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cca:	d026      	beq.n	8009d1a <__ssputs_r+0x6a>
 8009ccc:	6965      	ldr	r5, [r4, #20]
 8009cce:	6909      	ldr	r1, [r1, #16]
 8009cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cd4:	eba3 0901 	sub.w	r9, r3, r1
 8009cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cdc:	1c7b      	adds	r3, r7, #1
 8009cde:	444b      	add	r3, r9
 8009ce0:	106d      	asrs	r5, r5, #1
 8009ce2:	429d      	cmp	r5, r3
 8009ce4:	bf38      	it	cc
 8009ce6:	461d      	movcc	r5, r3
 8009ce8:	0553      	lsls	r3, r2, #21
 8009cea:	d527      	bpl.n	8009d3c <__ssputs_r+0x8c>
 8009cec:	4629      	mov	r1, r5
 8009cee:	f7ff fe95 	bl	8009a1c <_malloc_r>
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	b360      	cbz	r0, 8009d50 <__ssputs_r+0xa0>
 8009cf6:	6921      	ldr	r1, [r4, #16]
 8009cf8:	464a      	mov	r2, r9
 8009cfa:	f7ff ff7f 	bl	8009bfc <memcpy>
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d08:	81a3      	strh	r3, [r4, #12]
 8009d0a:	6126      	str	r6, [r4, #16]
 8009d0c:	6165      	str	r5, [r4, #20]
 8009d0e:	444e      	add	r6, r9
 8009d10:	eba5 0509 	sub.w	r5, r5, r9
 8009d14:	6026      	str	r6, [r4, #0]
 8009d16:	60a5      	str	r5, [r4, #8]
 8009d18:	463e      	mov	r6, r7
 8009d1a:	42be      	cmp	r6, r7
 8009d1c:	d900      	bls.n	8009d20 <__ssputs_r+0x70>
 8009d1e:	463e      	mov	r6, r7
 8009d20:	6820      	ldr	r0, [r4, #0]
 8009d22:	4632      	mov	r2, r6
 8009d24:	4641      	mov	r1, r8
 8009d26:	f000 faab 	bl	800a280 <memmove>
 8009d2a:	68a3      	ldr	r3, [r4, #8]
 8009d2c:	1b9b      	subs	r3, r3, r6
 8009d2e:	60a3      	str	r3, [r4, #8]
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	4433      	add	r3, r6
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	2000      	movs	r0, #0
 8009d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d3c:	462a      	mov	r2, r5
 8009d3e:	f000 fab9 	bl	800a2b4 <_realloc_r>
 8009d42:	4606      	mov	r6, r0
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d1e0      	bne.n	8009d0a <__ssputs_r+0x5a>
 8009d48:	6921      	ldr	r1, [r4, #16]
 8009d4a:	4650      	mov	r0, sl
 8009d4c:	f7ff ff64 	bl	8009c18 <_free_r>
 8009d50:	230c      	movs	r3, #12
 8009d52:	f8ca 3000 	str.w	r3, [sl]
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5c:	81a3      	strh	r3, [r4, #12]
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d62:	e7e9      	b.n	8009d38 <__ssputs_r+0x88>

08009d64 <_svfiprintf_r>:
 8009d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	4698      	mov	r8, r3
 8009d6a:	898b      	ldrh	r3, [r1, #12]
 8009d6c:	061b      	lsls	r3, r3, #24
 8009d6e:	b09d      	sub	sp, #116	; 0x74
 8009d70:	4607      	mov	r7, r0
 8009d72:	460d      	mov	r5, r1
 8009d74:	4614      	mov	r4, r2
 8009d76:	d50e      	bpl.n	8009d96 <_svfiprintf_r+0x32>
 8009d78:	690b      	ldr	r3, [r1, #16]
 8009d7a:	b963      	cbnz	r3, 8009d96 <_svfiprintf_r+0x32>
 8009d7c:	2140      	movs	r1, #64	; 0x40
 8009d7e:	f7ff fe4d 	bl	8009a1c <_malloc_r>
 8009d82:	6028      	str	r0, [r5, #0]
 8009d84:	6128      	str	r0, [r5, #16]
 8009d86:	b920      	cbnz	r0, 8009d92 <_svfiprintf_r+0x2e>
 8009d88:	230c      	movs	r3, #12
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d90:	e0d0      	b.n	8009f34 <_svfiprintf_r+0x1d0>
 8009d92:	2340      	movs	r3, #64	; 0x40
 8009d94:	616b      	str	r3, [r5, #20]
 8009d96:	2300      	movs	r3, #0
 8009d98:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9a:	2320      	movs	r3, #32
 8009d9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009da4:	2330      	movs	r3, #48	; 0x30
 8009da6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f4c <_svfiprintf_r+0x1e8>
 8009daa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dae:	f04f 0901 	mov.w	r9, #1
 8009db2:	4623      	mov	r3, r4
 8009db4:	469a      	mov	sl, r3
 8009db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dba:	b10a      	cbz	r2, 8009dc0 <_svfiprintf_r+0x5c>
 8009dbc:	2a25      	cmp	r2, #37	; 0x25
 8009dbe:	d1f9      	bne.n	8009db4 <_svfiprintf_r+0x50>
 8009dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8009dc4:	d00b      	beq.n	8009dde <_svfiprintf_r+0x7a>
 8009dc6:	465b      	mov	r3, fp
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4629      	mov	r1, r5
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f7ff ff6f 	bl	8009cb0 <__ssputs_r>
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	f000 80a9 	beq.w	8009f2a <_svfiprintf_r+0x1c6>
 8009dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dda:	445a      	add	r2, fp
 8009ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8009dde:	f89a 3000 	ldrb.w	r3, [sl]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 80a1 	beq.w	8009f2a <_svfiprintf_r+0x1c6>
 8009de8:	2300      	movs	r3, #0
 8009dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009df2:	f10a 0a01 	add.w	sl, sl, #1
 8009df6:	9304      	str	r3, [sp, #16]
 8009df8:	9307      	str	r3, [sp, #28]
 8009dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8009e00:	4654      	mov	r4, sl
 8009e02:	2205      	movs	r2, #5
 8009e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e08:	4850      	ldr	r0, [pc, #320]	; (8009f4c <_svfiprintf_r+0x1e8>)
 8009e0a:	f7f6 f9f1 	bl	80001f0 <memchr>
 8009e0e:	9a04      	ldr	r2, [sp, #16]
 8009e10:	b9d8      	cbnz	r0, 8009e4a <_svfiprintf_r+0xe6>
 8009e12:	06d0      	lsls	r0, r2, #27
 8009e14:	bf44      	itt	mi
 8009e16:	2320      	movmi	r3, #32
 8009e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e1c:	0711      	lsls	r1, r2, #28
 8009e1e:	bf44      	itt	mi
 8009e20:	232b      	movmi	r3, #43	; 0x2b
 8009e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e26:	f89a 3000 	ldrb.w	r3, [sl]
 8009e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e2c:	d015      	beq.n	8009e5a <_svfiprintf_r+0xf6>
 8009e2e:	9a07      	ldr	r2, [sp, #28]
 8009e30:	4654      	mov	r4, sl
 8009e32:	2000      	movs	r0, #0
 8009e34:	f04f 0c0a 	mov.w	ip, #10
 8009e38:	4621      	mov	r1, r4
 8009e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e3e:	3b30      	subs	r3, #48	; 0x30
 8009e40:	2b09      	cmp	r3, #9
 8009e42:	d94d      	bls.n	8009ee0 <_svfiprintf_r+0x17c>
 8009e44:	b1b0      	cbz	r0, 8009e74 <_svfiprintf_r+0x110>
 8009e46:	9207      	str	r2, [sp, #28]
 8009e48:	e014      	b.n	8009e74 <_svfiprintf_r+0x110>
 8009e4a:	eba0 0308 	sub.w	r3, r0, r8
 8009e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e52:	4313      	orrs	r3, r2
 8009e54:	9304      	str	r3, [sp, #16]
 8009e56:	46a2      	mov	sl, r4
 8009e58:	e7d2      	b.n	8009e00 <_svfiprintf_r+0x9c>
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	1d19      	adds	r1, r3, #4
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	9103      	str	r1, [sp, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	bfbb      	ittet	lt
 8009e66:	425b      	neglt	r3, r3
 8009e68:	f042 0202 	orrlt.w	r2, r2, #2
 8009e6c:	9307      	strge	r3, [sp, #28]
 8009e6e:	9307      	strlt	r3, [sp, #28]
 8009e70:	bfb8      	it	lt
 8009e72:	9204      	strlt	r2, [sp, #16]
 8009e74:	7823      	ldrb	r3, [r4, #0]
 8009e76:	2b2e      	cmp	r3, #46	; 0x2e
 8009e78:	d10c      	bne.n	8009e94 <_svfiprintf_r+0x130>
 8009e7a:	7863      	ldrb	r3, [r4, #1]
 8009e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e7e:	d134      	bne.n	8009eea <_svfiprintf_r+0x186>
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	1d1a      	adds	r2, r3, #4
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	9203      	str	r2, [sp, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bfb8      	it	lt
 8009e8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e90:	3402      	adds	r4, #2
 8009e92:	9305      	str	r3, [sp, #20]
 8009e94:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009f5c <_svfiprintf_r+0x1f8>
 8009e98:	7821      	ldrb	r1, [r4, #0]
 8009e9a:	2203      	movs	r2, #3
 8009e9c:	4650      	mov	r0, sl
 8009e9e:	f7f6 f9a7 	bl	80001f0 <memchr>
 8009ea2:	b138      	cbz	r0, 8009eb4 <_svfiprintf_r+0x150>
 8009ea4:	9b04      	ldr	r3, [sp, #16]
 8009ea6:	eba0 000a 	sub.w	r0, r0, sl
 8009eaa:	2240      	movs	r2, #64	; 0x40
 8009eac:	4082      	lsls	r2, r0
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	3401      	adds	r4, #1
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb8:	4825      	ldr	r0, [pc, #148]	; (8009f50 <_svfiprintf_r+0x1ec>)
 8009eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ebe:	2206      	movs	r2, #6
 8009ec0:	f7f6 f996 	bl	80001f0 <memchr>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d038      	beq.n	8009f3a <_svfiprintf_r+0x1d6>
 8009ec8:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <_svfiprintf_r+0x1f0>)
 8009eca:	bb1b      	cbnz	r3, 8009f14 <_svfiprintf_r+0x1b0>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	3307      	adds	r3, #7
 8009ed0:	f023 0307 	bic.w	r3, r3, #7
 8009ed4:	3308      	adds	r3, #8
 8009ed6:	9303      	str	r3, [sp, #12]
 8009ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eda:	4433      	add	r3, r6
 8009edc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ede:	e768      	b.n	8009db2 <_svfiprintf_r+0x4e>
 8009ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	e7a6      	b.n	8009e38 <_svfiprintf_r+0xd4>
 8009eea:	2300      	movs	r3, #0
 8009eec:	3401      	adds	r4, #1
 8009eee:	9305      	str	r3, [sp, #20]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	f04f 0c0a 	mov.w	ip, #10
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009efc:	3a30      	subs	r2, #48	; 0x30
 8009efe:	2a09      	cmp	r2, #9
 8009f00:	d903      	bls.n	8009f0a <_svfiprintf_r+0x1a6>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0c6      	beq.n	8009e94 <_svfiprintf_r+0x130>
 8009f06:	9105      	str	r1, [sp, #20]
 8009f08:	e7c4      	b.n	8009e94 <_svfiprintf_r+0x130>
 8009f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f0e:	4604      	mov	r4, r0
 8009f10:	2301      	movs	r3, #1
 8009f12:	e7f0      	b.n	8009ef6 <_svfiprintf_r+0x192>
 8009f14:	ab03      	add	r3, sp, #12
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	462a      	mov	r2, r5
 8009f1a:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <_svfiprintf_r+0x1f4>)
 8009f1c:	a904      	add	r1, sp, #16
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f3af 8000 	nop.w
 8009f24:	1c42      	adds	r2, r0, #1
 8009f26:	4606      	mov	r6, r0
 8009f28:	d1d6      	bne.n	8009ed8 <_svfiprintf_r+0x174>
 8009f2a:	89ab      	ldrh	r3, [r5, #12]
 8009f2c:	065b      	lsls	r3, r3, #25
 8009f2e:	f53f af2d 	bmi.w	8009d8c <_svfiprintf_r+0x28>
 8009f32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f34:	b01d      	add	sp, #116	; 0x74
 8009f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3a:	ab03      	add	r3, sp, #12
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	462a      	mov	r2, r5
 8009f40:	4b05      	ldr	r3, [pc, #20]	; (8009f58 <_svfiprintf_r+0x1f4>)
 8009f42:	a904      	add	r1, sp, #16
 8009f44:	4638      	mov	r0, r7
 8009f46:	f000 f879 	bl	800a03c <_printf_i>
 8009f4a:	e7eb      	b.n	8009f24 <_svfiprintf_r+0x1c0>
 8009f4c:	0800a420 	.word	0x0800a420
 8009f50:	0800a42a 	.word	0x0800a42a
 8009f54:	00000000 	.word	0x00000000
 8009f58:	08009cb1 	.word	0x08009cb1
 8009f5c:	0800a426 	.word	0x0800a426

08009f60 <_printf_common>:
 8009f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	4616      	mov	r6, r2
 8009f66:	4699      	mov	r9, r3
 8009f68:	688a      	ldr	r2, [r1, #8]
 8009f6a:	690b      	ldr	r3, [r1, #16]
 8009f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f70:	4293      	cmp	r3, r2
 8009f72:	bfb8      	it	lt
 8009f74:	4613      	movlt	r3, r2
 8009f76:	6033      	str	r3, [r6, #0]
 8009f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	b10a      	cbz	r2, 8009f86 <_printf_common+0x26>
 8009f82:	3301      	adds	r3, #1
 8009f84:	6033      	str	r3, [r6, #0]
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	0699      	lsls	r1, r3, #26
 8009f8a:	bf42      	ittt	mi
 8009f8c:	6833      	ldrmi	r3, [r6, #0]
 8009f8e:	3302      	addmi	r3, #2
 8009f90:	6033      	strmi	r3, [r6, #0]
 8009f92:	6825      	ldr	r5, [r4, #0]
 8009f94:	f015 0506 	ands.w	r5, r5, #6
 8009f98:	d106      	bne.n	8009fa8 <_printf_common+0x48>
 8009f9a:	f104 0a19 	add.w	sl, r4, #25
 8009f9e:	68e3      	ldr	r3, [r4, #12]
 8009fa0:	6832      	ldr	r2, [r6, #0]
 8009fa2:	1a9b      	subs	r3, r3, r2
 8009fa4:	42ab      	cmp	r3, r5
 8009fa6:	dc26      	bgt.n	8009ff6 <_printf_common+0x96>
 8009fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fac:	1e13      	subs	r3, r2, #0
 8009fae:	6822      	ldr	r2, [r4, #0]
 8009fb0:	bf18      	it	ne
 8009fb2:	2301      	movne	r3, #1
 8009fb4:	0692      	lsls	r2, r2, #26
 8009fb6:	d42b      	bmi.n	800a010 <_printf_common+0xb0>
 8009fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fbc:	4649      	mov	r1, r9
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	47c0      	blx	r8
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	d01e      	beq.n	800a004 <_printf_common+0xa4>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	6922      	ldr	r2, [r4, #16]
 8009fca:	f003 0306 	and.w	r3, r3, #6
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	bf02      	ittt	eq
 8009fd2:	68e5      	ldreq	r5, [r4, #12]
 8009fd4:	6833      	ldreq	r3, [r6, #0]
 8009fd6:	1aed      	subeq	r5, r5, r3
 8009fd8:	68a3      	ldr	r3, [r4, #8]
 8009fda:	bf0c      	ite	eq
 8009fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fe0:	2500      	movne	r5, #0
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	bfc4      	itt	gt
 8009fe6:	1a9b      	subgt	r3, r3, r2
 8009fe8:	18ed      	addgt	r5, r5, r3
 8009fea:	2600      	movs	r6, #0
 8009fec:	341a      	adds	r4, #26
 8009fee:	42b5      	cmp	r5, r6
 8009ff0:	d11a      	bne.n	800a028 <_printf_common+0xc8>
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	e008      	b.n	800a008 <_printf_common+0xa8>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	4652      	mov	r2, sl
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	47c0      	blx	r8
 800a000:	3001      	adds	r0, #1
 800a002:	d103      	bne.n	800a00c <_printf_common+0xac>
 800a004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a00c:	3501      	adds	r5, #1
 800a00e:	e7c6      	b.n	8009f9e <_printf_common+0x3e>
 800a010:	18e1      	adds	r1, r4, r3
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	2030      	movs	r0, #48	; 0x30
 800a016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a01a:	4422      	add	r2, r4
 800a01c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a024:	3302      	adds	r3, #2
 800a026:	e7c7      	b.n	8009fb8 <_printf_common+0x58>
 800a028:	2301      	movs	r3, #1
 800a02a:	4622      	mov	r2, r4
 800a02c:	4649      	mov	r1, r9
 800a02e:	4638      	mov	r0, r7
 800a030:	47c0      	blx	r8
 800a032:	3001      	adds	r0, #1
 800a034:	d0e6      	beq.n	800a004 <_printf_common+0xa4>
 800a036:	3601      	adds	r6, #1
 800a038:	e7d9      	b.n	8009fee <_printf_common+0x8e>
	...

0800a03c <_printf_i>:
 800a03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a040:	7e0f      	ldrb	r7, [r1, #24]
 800a042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a044:	2f78      	cmp	r7, #120	; 0x78
 800a046:	4691      	mov	r9, r2
 800a048:	4680      	mov	r8, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	469a      	mov	sl, r3
 800a04e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a052:	d807      	bhi.n	800a064 <_printf_i+0x28>
 800a054:	2f62      	cmp	r7, #98	; 0x62
 800a056:	d80a      	bhi.n	800a06e <_printf_i+0x32>
 800a058:	2f00      	cmp	r7, #0
 800a05a:	f000 80d4 	beq.w	800a206 <_printf_i+0x1ca>
 800a05e:	2f58      	cmp	r7, #88	; 0x58
 800a060:	f000 80c0 	beq.w	800a1e4 <_printf_i+0x1a8>
 800a064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a06c:	e03a      	b.n	800a0e4 <_printf_i+0xa8>
 800a06e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a072:	2b15      	cmp	r3, #21
 800a074:	d8f6      	bhi.n	800a064 <_printf_i+0x28>
 800a076:	a101      	add	r1, pc, #4	; (adr r1, 800a07c <_printf_i+0x40>)
 800a078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a07c:	0800a0d5 	.word	0x0800a0d5
 800a080:	0800a0e9 	.word	0x0800a0e9
 800a084:	0800a065 	.word	0x0800a065
 800a088:	0800a065 	.word	0x0800a065
 800a08c:	0800a065 	.word	0x0800a065
 800a090:	0800a065 	.word	0x0800a065
 800a094:	0800a0e9 	.word	0x0800a0e9
 800a098:	0800a065 	.word	0x0800a065
 800a09c:	0800a065 	.word	0x0800a065
 800a0a0:	0800a065 	.word	0x0800a065
 800a0a4:	0800a065 	.word	0x0800a065
 800a0a8:	0800a1ed 	.word	0x0800a1ed
 800a0ac:	0800a115 	.word	0x0800a115
 800a0b0:	0800a1a7 	.word	0x0800a1a7
 800a0b4:	0800a065 	.word	0x0800a065
 800a0b8:	0800a065 	.word	0x0800a065
 800a0bc:	0800a20f 	.word	0x0800a20f
 800a0c0:	0800a065 	.word	0x0800a065
 800a0c4:	0800a115 	.word	0x0800a115
 800a0c8:	0800a065 	.word	0x0800a065
 800a0cc:	0800a065 	.word	0x0800a065
 800a0d0:	0800a1af 	.word	0x0800a1af
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	1d1a      	adds	r2, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	602a      	str	r2, [r5, #0]
 800a0dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e09f      	b.n	800a228 <_printf_i+0x1ec>
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	682b      	ldr	r3, [r5, #0]
 800a0ec:	0607      	lsls	r7, r0, #24
 800a0ee:	f103 0104 	add.w	r1, r3, #4
 800a0f2:	6029      	str	r1, [r5, #0]
 800a0f4:	d501      	bpl.n	800a0fa <_printf_i+0xbe>
 800a0f6:	681e      	ldr	r6, [r3, #0]
 800a0f8:	e003      	b.n	800a102 <_printf_i+0xc6>
 800a0fa:	0646      	lsls	r6, r0, #25
 800a0fc:	d5fb      	bpl.n	800a0f6 <_printf_i+0xba>
 800a0fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a102:	2e00      	cmp	r6, #0
 800a104:	da03      	bge.n	800a10e <_printf_i+0xd2>
 800a106:	232d      	movs	r3, #45	; 0x2d
 800a108:	4276      	negs	r6, r6
 800a10a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a10e:	485a      	ldr	r0, [pc, #360]	; (800a278 <_printf_i+0x23c>)
 800a110:	230a      	movs	r3, #10
 800a112:	e012      	b.n	800a13a <_printf_i+0xfe>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	6820      	ldr	r0, [r4, #0]
 800a118:	1d19      	adds	r1, r3, #4
 800a11a:	6029      	str	r1, [r5, #0]
 800a11c:	0605      	lsls	r5, r0, #24
 800a11e:	d501      	bpl.n	800a124 <_printf_i+0xe8>
 800a120:	681e      	ldr	r6, [r3, #0]
 800a122:	e002      	b.n	800a12a <_printf_i+0xee>
 800a124:	0641      	lsls	r1, r0, #25
 800a126:	d5fb      	bpl.n	800a120 <_printf_i+0xe4>
 800a128:	881e      	ldrh	r6, [r3, #0]
 800a12a:	4853      	ldr	r0, [pc, #332]	; (800a278 <_printf_i+0x23c>)
 800a12c:	2f6f      	cmp	r7, #111	; 0x6f
 800a12e:	bf0c      	ite	eq
 800a130:	2308      	moveq	r3, #8
 800a132:	230a      	movne	r3, #10
 800a134:	2100      	movs	r1, #0
 800a136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a13a:	6865      	ldr	r5, [r4, #4]
 800a13c:	60a5      	str	r5, [r4, #8]
 800a13e:	2d00      	cmp	r5, #0
 800a140:	bfa2      	ittt	ge
 800a142:	6821      	ldrge	r1, [r4, #0]
 800a144:	f021 0104 	bicge.w	r1, r1, #4
 800a148:	6021      	strge	r1, [r4, #0]
 800a14a:	b90e      	cbnz	r6, 800a150 <_printf_i+0x114>
 800a14c:	2d00      	cmp	r5, #0
 800a14e:	d04b      	beq.n	800a1e8 <_printf_i+0x1ac>
 800a150:	4615      	mov	r5, r2
 800a152:	fbb6 f1f3 	udiv	r1, r6, r3
 800a156:	fb03 6711 	mls	r7, r3, r1, r6
 800a15a:	5dc7      	ldrb	r7, [r0, r7]
 800a15c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a160:	4637      	mov	r7, r6
 800a162:	42bb      	cmp	r3, r7
 800a164:	460e      	mov	r6, r1
 800a166:	d9f4      	bls.n	800a152 <_printf_i+0x116>
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d10b      	bne.n	800a184 <_printf_i+0x148>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	07de      	lsls	r6, r3, #31
 800a170:	d508      	bpl.n	800a184 <_printf_i+0x148>
 800a172:	6923      	ldr	r3, [r4, #16]
 800a174:	6861      	ldr	r1, [r4, #4]
 800a176:	4299      	cmp	r1, r3
 800a178:	bfde      	ittt	le
 800a17a:	2330      	movle	r3, #48	; 0x30
 800a17c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a180:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a184:	1b52      	subs	r2, r2, r5
 800a186:	6122      	str	r2, [r4, #16]
 800a188:	f8cd a000 	str.w	sl, [sp]
 800a18c:	464b      	mov	r3, r9
 800a18e:	aa03      	add	r2, sp, #12
 800a190:	4621      	mov	r1, r4
 800a192:	4640      	mov	r0, r8
 800a194:	f7ff fee4 	bl	8009f60 <_printf_common>
 800a198:	3001      	adds	r0, #1
 800a19a:	d14a      	bne.n	800a232 <_printf_i+0x1f6>
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1a0:	b004      	add	sp, #16
 800a1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	f043 0320 	orr.w	r3, r3, #32
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	4833      	ldr	r0, [pc, #204]	; (800a27c <_printf_i+0x240>)
 800a1b0:	2778      	movs	r7, #120	; 0x78
 800a1b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	6829      	ldr	r1, [r5, #0]
 800a1ba:	061f      	lsls	r7, r3, #24
 800a1bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1c0:	d402      	bmi.n	800a1c8 <_printf_i+0x18c>
 800a1c2:	065f      	lsls	r7, r3, #25
 800a1c4:	bf48      	it	mi
 800a1c6:	b2b6      	uxthmi	r6, r6
 800a1c8:	07df      	lsls	r7, r3, #31
 800a1ca:	bf48      	it	mi
 800a1cc:	f043 0320 	orrmi.w	r3, r3, #32
 800a1d0:	6029      	str	r1, [r5, #0]
 800a1d2:	bf48      	it	mi
 800a1d4:	6023      	strmi	r3, [r4, #0]
 800a1d6:	b91e      	cbnz	r6, 800a1e0 <_printf_i+0x1a4>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	f023 0320 	bic.w	r3, r3, #32
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	2310      	movs	r3, #16
 800a1e2:	e7a7      	b.n	800a134 <_printf_i+0xf8>
 800a1e4:	4824      	ldr	r0, [pc, #144]	; (800a278 <_printf_i+0x23c>)
 800a1e6:	e7e4      	b.n	800a1b2 <_printf_i+0x176>
 800a1e8:	4615      	mov	r5, r2
 800a1ea:	e7bd      	b.n	800a168 <_printf_i+0x12c>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	6826      	ldr	r6, [r4, #0]
 800a1f0:	6961      	ldr	r1, [r4, #20]
 800a1f2:	1d18      	adds	r0, r3, #4
 800a1f4:	6028      	str	r0, [r5, #0]
 800a1f6:	0635      	lsls	r5, r6, #24
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	d501      	bpl.n	800a200 <_printf_i+0x1c4>
 800a1fc:	6019      	str	r1, [r3, #0]
 800a1fe:	e002      	b.n	800a206 <_printf_i+0x1ca>
 800a200:	0670      	lsls	r0, r6, #25
 800a202:	d5fb      	bpl.n	800a1fc <_printf_i+0x1c0>
 800a204:	8019      	strh	r1, [r3, #0]
 800a206:	2300      	movs	r3, #0
 800a208:	6123      	str	r3, [r4, #16]
 800a20a:	4615      	mov	r5, r2
 800a20c:	e7bc      	b.n	800a188 <_printf_i+0x14c>
 800a20e:	682b      	ldr	r3, [r5, #0]
 800a210:	1d1a      	adds	r2, r3, #4
 800a212:	602a      	str	r2, [r5, #0]
 800a214:	681d      	ldr	r5, [r3, #0]
 800a216:	6862      	ldr	r2, [r4, #4]
 800a218:	2100      	movs	r1, #0
 800a21a:	4628      	mov	r0, r5
 800a21c:	f7f5 ffe8 	bl	80001f0 <memchr>
 800a220:	b108      	cbz	r0, 800a226 <_printf_i+0x1ea>
 800a222:	1b40      	subs	r0, r0, r5
 800a224:	6060      	str	r0, [r4, #4]
 800a226:	6863      	ldr	r3, [r4, #4]
 800a228:	6123      	str	r3, [r4, #16]
 800a22a:	2300      	movs	r3, #0
 800a22c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a230:	e7aa      	b.n	800a188 <_printf_i+0x14c>
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	462a      	mov	r2, r5
 800a236:	4649      	mov	r1, r9
 800a238:	4640      	mov	r0, r8
 800a23a:	47d0      	blx	sl
 800a23c:	3001      	adds	r0, #1
 800a23e:	d0ad      	beq.n	800a19c <_printf_i+0x160>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	079b      	lsls	r3, r3, #30
 800a244:	d413      	bmi.n	800a26e <_printf_i+0x232>
 800a246:	68e0      	ldr	r0, [r4, #12]
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	4298      	cmp	r0, r3
 800a24c:	bfb8      	it	lt
 800a24e:	4618      	movlt	r0, r3
 800a250:	e7a6      	b.n	800a1a0 <_printf_i+0x164>
 800a252:	2301      	movs	r3, #1
 800a254:	4632      	mov	r2, r6
 800a256:	4649      	mov	r1, r9
 800a258:	4640      	mov	r0, r8
 800a25a:	47d0      	blx	sl
 800a25c:	3001      	adds	r0, #1
 800a25e:	d09d      	beq.n	800a19c <_printf_i+0x160>
 800a260:	3501      	adds	r5, #1
 800a262:	68e3      	ldr	r3, [r4, #12]
 800a264:	9903      	ldr	r1, [sp, #12]
 800a266:	1a5b      	subs	r3, r3, r1
 800a268:	42ab      	cmp	r3, r5
 800a26a:	dcf2      	bgt.n	800a252 <_printf_i+0x216>
 800a26c:	e7eb      	b.n	800a246 <_printf_i+0x20a>
 800a26e:	2500      	movs	r5, #0
 800a270:	f104 0619 	add.w	r6, r4, #25
 800a274:	e7f5      	b.n	800a262 <_printf_i+0x226>
 800a276:	bf00      	nop
 800a278:	0800a431 	.word	0x0800a431
 800a27c:	0800a442 	.word	0x0800a442

0800a280 <memmove>:
 800a280:	4288      	cmp	r0, r1
 800a282:	b510      	push	{r4, lr}
 800a284:	eb01 0402 	add.w	r4, r1, r2
 800a288:	d902      	bls.n	800a290 <memmove+0x10>
 800a28a:	4284      	cmp	r4, r0
 800a28c:	4623      	mov	r3, r4
 800a28e:	d807      	bhi.n	800a2a0 <memmove+0x20>
 800a290:	1e43      	subs	r3, r0, #1
 800a292:	42a1      	cmp	r1, r4
 800a294:	d008      	beq.n	800a2a8 <memmove+0x28>
 800a296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a29a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a29e:	e7f8      	b.n	800a292 <memmove+0x12>
 800a2a0:	4402      	add	r2, r0
 800a2a2:	4601      	mov	r1, r0
 800a2a4:	428a      	cmp	r2, r1
 800a2a6:	d100      	bne.n	800a2aa <memmove+0x2a>
 800a2a8:	bd10      	pop	{r4, pc}
 800a2aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2b2:	e7f7      	b.n	800a2a4 <memmove+0x24>

0800a2b4 <_realloc_r>:
 800a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	4614      	mov	r4, r2
 800a2bc:	460e      	mov	r6, r1
 800a2be:	b921      	cbnz	r1, 800a2ca <_realloc_r+0x16>
 800a2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	f7ff bba9 	b.w	8009a1c <_malloc_r>
 800a2ca:	b92a      	cbnz	r2, 800a2d8 <_realloc_r+0x24>
 800a2cc:	f7ff fca4 	bl	8009c18 <_free_r>
 800a2d0:	4625      	mov	r5, r4
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d8:	f000 f81b 	bl	800a312 <_malloc_usable_size_r>
 800a2dc:	4284      	cmp	r4, r0
 800a2de:	4607      	mov	r7, r0
 800a2e0:	d802      	bhi.n	800a2e8 <_realloc_r+0x34>
 800a2e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2e6:	d812      	bhi.n	800a30e <_realloc_r+0x5a>
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	f7ff fb96 	bl	8009a1c <_malloc_r>
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d0ed      	beq.n	800a2d2 <_realloc_r+0x1e>
 800a2f6:	42bc      	cmp	r4, r7
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	bf28      	it	cs
 800a2fe:	463a      	movcs	r2, r7
 800a300:	f7ff fc7c 	bl	8009bfc <memcpy>
 800a304:	4631      	mov	r1, r6
 800a306:	4640      	mov	r0, r8
 800a308:	f7ff fc86 	bl	8009c18 <_free_r>
 800a30c:	e7e1      	b.n	800a2d2 <_realloc_r+0x1e>
 800a30e:	4635      	mov	r5, r6
 800a310:	e7df      	b.n	800a2d2 <_realloc_r+0x1e>

0800a312 <_malloc_usable_size_r>:
 800a312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a316:	1f18      	subs	r0, r3, #4
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bfbc      	itt	lt
 800a31c:	580b      	ldrlt	r3, [r1, r0]
 800a31e:	18c0      	addlt	r0, r0, r3
 800a320:	4770      	bx	lr
	...

0800a324 <_init>:
 800a324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a326:	bf00      	nop
 800a328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32a:	bc08      	pop	{r3}
 800a32c:	469e      	mov	lr, r3
 800a32e:	4770      	bx	lr

0800a330 <_fini>:
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	bf00      	nop
 800a334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a336:	bc08      	pop	{r3}
 800a338:	469e      	mov	lr, r3
 800a33a:	4770      	bx	lr
