
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011914  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08011ab8  08011ab8  00021ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120f4  080120f4  000302e8  2**0
                  CONTENTS
  4 .ARM          00000008  080120f4  080120f4  000220f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120fc  080120fc  000302e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120fc  080120fc  000220fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012100  08012100  00022100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08012104  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020a0  200002e8  080123ec  000302e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002388  080123ec  00032388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026a3c  00000000  00000000  0003035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000613c  00000000  00000000  00056d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f8  00000000  00000000  0005ced8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001963  00000000  00000000  0005efd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ed8  00000000  00000000  00060933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002caa2  00000000  00000000  0008180b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad884  00000000  00000000  000ae2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a80  00000000  00000000  0015bb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001655b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011a9c 	.word	0x08011a9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	08011a9c 	.word	0x08011a9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <FreeRTOS_CreateStartUpTasks>:

/* Flight Controller Battery Level */
static float FlightController_batteryLevel;

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 2UL), &FlightController_StartUp_Handle);
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f68:	4927      	ldr	r1, [pc, #156]	; (8001008 <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000f6a:	4828      	ldr	r0, [pc, #160]	; (800100c <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000f6c:	f00b fbcd 	bl	800c70a <xTaskCreate>
 8000f70:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d00a      	beq.n	8000f8e <FreeRTOS_CreateStartUpTasks+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f7c:	f383 8811 	msr	BASEPRI, r3
 8000f80:	f3bf 8f6f 	isb	sy
 8000f84:	f3bf 8f4f 	dsb	sy
 8000f88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000f8a:	bf00      	nop
 8000f8c:	e7fe      	b.n	8000f8c <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d104      	bne.n	8000fa0 <FreeRTOS_CreateStartUpTasks+0x4c>
        vTaskDelete(FlightController_StartUp_Handle);
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00b fcec 	bl	800c978 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_OnOffButton_Handle);
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fae:	4919      	ldr	r1, [pc, #100]	; (8001014 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000fb0:	4819      	ldr	r0, [pc, #100]	; (8001018 <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000fb2:	f00b fbaa 	bl	800c70a <xTaskCreate>
 8000fb6:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d00a      	beq.n	8000fd4 <FreeRTOS_CreateStartUpTasks+0x80>
	__asm volatile
 8000fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc2:	f383 8811 	msr	BASEPRI, r3
 8000fc6:	f3bf 8f6f 	isb	sy
 8000fca:	f3bf 8f4f 	dsb	sy
 8000fce:	607b      	str	r3, [r7, #4]
}
 8000fd0:	bf00      	nop
 8000fd2:	e7fe      	b.n	8000fd2 <FreeRTOS_CreateStartUpTasks+0x7e>

    if (FlightController_OnOffButton_Handle == NULL) {
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d104      	bne.n	8000fe6 <FreeRTOS_CreateStartUpTasks+0x92>
        vTaskDelete(FlightController_OnOffButton_Handle);
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00b fcc9 	bl	800c978 <vTaskDelete>
    }

    /* Timer: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <FreeRTOS_CreateStartUpTasks+0xc8>)
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2300      	movs	r3, #0
 8000fec:	2201      	movs	r2, #1
 8000fee:	2164      	movs	r1, #100	; 0x64
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8000ff2:	f00c fba9 	bl	800d748 <xTimerCreate>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <FreeRTOS_CreateStartUpTasks+0xd0>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000304 	.word	0x20000304
 8001008:	08011ab8 	.word	0x08011ab8
 800100c:	08001235 	.word	0x08001235
 8001010:	2000031c 	.word	0x2000031c
 8001014:	08011ad4 	.word	0x08011ad4
 8001018:	0800145d 	.word	0x0800145d
 800101c:	0800158d 	.word	0x0800158d
 8001020:	08011af4 	.word	0x08011af4
 8001024:	20000324 	.word	0x20000324

08001028 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_HeartbeatLight_Handle);
 800102e:	4b6b      	ldr	r3, [pc, #428]	; (80011dc <FreeRTOS_CreateTasks+0x1b4>)
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	2301      	movs	r3, #1
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2300      	movs	r3, #0
 8001038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103c:	4968      	ldr	r1, [pc, #416]	; (80011e0 <FreeRTOS_CreateTasks+0x1b8>)
 800103e:	4869      	ldr	r0, [pc, #420]	; (80011e4 <FreeRTOS_CreateTasks+0x1bc>)
 8001040:	f00b fb63 	bl	800c70a <xTaskCreate>
 8001044:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d00a      	beq.n	8001062 <FreeRTOS_CreateTasks+0x3a>
	__asm volatile
 800104c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001050:	f383 8811 	msr	BASEPRI, r3
 8001054:	f3bf 8f6f 	isb	sy
 8001058:	f3bf 8f4f 	dsb	sy
 800105c:	61bb      	str	r3, [r7, #24]
}
 800105e:	bf00      	nop
 8001060:	e7fe      	b.n	8001060 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 8001062:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <FreeRTOS_CreateTasks+0x1b4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <FreeRTOS_CreateTasks+0x4c>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 800106a:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <FreeRTOS_CreateTasks+0x1b4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f00b fc82 	bl	800c978 <vTaskDelete>
    }

    /* Task 2: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_FlightLights_Handle);
 8001074:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <FreeRTOS_CreateTasks+0x1c0>)
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2301      	movs	r3, #1
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2300      	movs	r3, #0
 800107e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001082:	495a      	ldr	r1, [pc, #360]	; (80011ec <FreeRTOS_CreateTasks+0x1c4>)
 8001084:	485a      	ldr	r0, [pc, #360]	; (80011f0 <FreeRTOS_CreateTasks+0x1c8>)
 8001086:	f00b fb40 	bl	800c70a <xTaskCreate>
 800108a:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d00a      	beq.n	80010a8 <FreeRTOS_CreateTasks+0x80>
	__asm volatile
 8001092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001096:	f383 8811 	msr	BASEPRI, r3
 800109a:	f3bf 8f6f 	isb	sy
 800109e:	f3bf 8f4f 	dsb	sy
 80010a2:	617b      	str	r3, [r7, #20]
}
 80010a4:	bf00      	nop
 80010a6:	e7fe      	b.n	80010a6 <FreeRTOS_CreateTasks+0x7e>

    if (FlightController_FlightLights_Handle == NULL) {
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <FreeRTOS_CreateTasks+0x1c0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <FreeRTOS_CreateTasks+0x92>
        vTaskDelete(FlightController_FlightLights_Handle);
 80010b0:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <FreeRTOS_CreateTasks+0x1c0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00b fc5f 	bl	800c978 <vTaskDelete>
    }

    /* Task 3: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_FSA8S_Handle);
 80010ba:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <FreeRTOS_CreateTasks+0x1cc>)
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	2303      	movs	r3, #3
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2300      	movs	r3, #0
 80010c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c8:	494b      	ldr	r1, [pc, #300]	; (80011f8 <FreeRTOS_CreateTasks+0x1d0>)
 80010ca:	484c      	ldr	r0, [pc, #304]	; (80011fc <FreeRTOS_CreateTasks+0x1d4>)
 80010cc:	f00b fb1d 	bl	800c70a <xTaskCreate>
 80010d0:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d00a      	beq.n	80010ee <FreeRTOS_CreateTasks+0xc6>
	__asm volatile
 80010d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010dc:	f383 8811 	msr	BASEPRI, r3
 80010e0:	f3bf 8f6f 	isb	sy
 80010e4:	f3bf 8f4f 	dsb	sy
 80010e8:	613b      	str	r3, [r7, #16]
}
 80010ea:	bf00      	nop
 80010ec:	e7fe      	b.n	80010ec <FreeRTOS_CreateTasks+0xc4>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <FreeRTOS_CreateTasks+0x1cc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d104      	bne.n	8001100 <FreeRTOS_CreateTasks+0xd8>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 80010f6:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <FreeRTOS_CreateTasks+0x1cc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00b fc3c 	bl	800c978 <vTaskDelete>
    }

    /* Task 4: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (6 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_GY87_Handle);
 8001100:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <FreeRTOS_CreateTasks+0x1d8>)
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2303      	movs	r3, #3
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800110e:	493d      	ldr	r1, [pc, #244]	; (8001204 <FreeRTOS_CreateTasks+0x1dc>)
 8001110:	483d      	ldr	r0, [pc, #244]	; (8001208 <FreeRTOS_CreateTasks+0x1e0>)
 8001112:	f00b fafa 	bl	800c70a <xTaskCreate>
 8001116:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d00a      	beq.n	8001134 <FreeRTOS_CreateTasks+0x10c>
	__asm volatile
 800111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001122:	f383 8811 	msr	BASEPRI, r3
 8001126:	f3bf 8f6f 	isb	sy
 800112a:	f3bf 8f4f 	dsb	sy
 800112e:	60fb      	str	r3, [r7, #12]
}
 8001130:	bf00      	nop
 8001132:	e7fe      	b.n	8001132 <FreeRTOS_CreateTasks+0x10a>

    if (FlightController_Read_GY87_Handle == NULL) {
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <FreeRTOS_CreateTasks+0x1d8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d104      	bne.n	8001146 <FreeRTOS_CreateTasks+0x11e>
        vTaskDelete(FlightController_Read_GY87_Handle);
 800113c:	4b30      	ldr	r3, [pc, #192]	; (8001200 <FreeRTOS_CreateTasks+0x1d8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f00b fc19 	bl	800c978 <vTaskDelete>
    }

    /* Task 5: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Write_ESCs_Handle);
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <FreeRTOS_CreateTasks+0x1e4>)
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	2303      	movs	r3, #3
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	492e      	ldr	r1, [pc, #184]	; (8001210 <FreeRTOS_CreateTasks+0x1e8>)
 8001156:	482f      	ldr	r0, [pc, #188]	; (8001214 <FreeRTOS_CreateTasks+0x1ec>)
 8001158:	f00b fad7 	bl	800c70a <xTaskCreate>
 800115c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d00a      	beq.n	800117a <FreeRTOS_CreateTasks+0x152>
	__asm volatile
 8001164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001168:	f383 8811 	msr	BASEPRI, r3
 800116c:	f3bf 8f6f 	isb	sy
 8001170:	f3bf 8f4f 	dsb	sy
 8001174:	60bb      	str	r3, [r7, #8]
}
 8001176:	bf00      	nop
 8001178:	e7fe      	b.n	8001178 <FreeRTOS_CreateTasks+0x150>

    if (FlightController_Write_ESCs_Handle == NULL) {
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <FreeRTOS_CreateTasks+0x1e4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d104      	bne.n	800118c <FreeRTOS_CreateTasks+0x164>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <FreeRTOS_CreateTasks+0x1e4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f00b fbf6 	bl	800c978 <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryLevel_Handle);
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <FreeRTOS_CreateTasks+0x1f0>)
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2301      	movs	r3, #1
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119a:	4920      	ldr	r1, [pc, #128]	; (800121c <FreeRTOS_CreateTasks+0x1f4>)
 800119c:	4820      	ldr	r0, [pc, #128]	; (8001220 <FreeRTOS_CreateTasks+0x1f8>)
 800119e:	f00b fab4 	bl	800c70a <xTaskCreate>
 80011a2:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d00a      	beq.n	80011c0 <FreeRTOS_CreateTasks+0x198>
	__asm volatile
 80011aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ae:	f383 8811 	msr	BASEPRI, r3
 80011b2:	f3bf 8f6f 	isb	sy
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	607b      	str	r3, [r7, #4]
}
 80011bc:	bf00      	nop
 80011be:	e7fe      	b.n	80011be <FreeRTOS_CreateTasks+0x196>

    if (FlightController_BatteryLevel_Handle == NULL) {
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <FreeRTOS_CreateTasks+0x1f0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d104      	bne.n	80011d2 <FreeRTOS_CreateTasks+0x1aa>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <FreeRTOS_CreateTasks+0x1f0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00b fbd3 	bl	800c978 <vTaskDelete>
    }
}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000308 	.word	0x20000308
 80011e0:	08011b04 	.word	0x08011b04
 80011e4:	080012b9 	.word	0x080012b9
 80011e8:	20000314 	.word	0x20000314
 80011ec:	08011b24 	.word	0x08011b24
 80011f0:	080012f5 	.word	0x080012f5
 80011f4:	2000030c 	.word	0x2000030c
 80011f8:	08011b44 	.word	0x08011b44
 80011fc:	08001309 	.word	0x08001309
 8001200:	20000310 	.word	0x20000310
 8001204:	08011b60 	.word	0x08011b60
 8001208:	08001369 	.word	0x08001369
 800120c:	20000318 	.word	0x20000318
 8001210:	08011b7c 	.word	0x08011b7c
 8001214:	08001449 	.word	0x08001449
 8001218:	20000320 	.word	0x20000320
 800121c:	08011b98 	.word	0x08011b98
 8001220:	080014b9 	.word	0x080014b9

08001224 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800123c:	2314      	movs	r3, #20
 800123e:	60fb      	str	r3, [r7, #12]

    while (1) {

    	/* Turn on-board LED on */
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <FlightController_StartUp+0x60>)
 8001248:	f002 ff82 	bl	8004150 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
    	/* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_running) {
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <FlightController_StartUp+0x64>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01a      	beq.n	800128a <FlightController_StartUp+0x56>

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001254:	f7ff fee8 	bl	8001028 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 8001258:	f7ff ffe4 	bl	8001224 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 800125c:	480f      	ldr	r0, [pc, #60]	; (800129c <FlightController_StartUp+0x68>)
 800125e:	f001 fa39 	bl	80026d4 <FSA8S_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <FlightController_StartUp+0x6c>)
 8001266:	6013      	str	r3, [r2, #0]
            hmpu6050 = MPU6050_Init(&hi2c1);
 8001268:	480e      	ldr	r0, [pc, #56]	; (80012a4 <FlightController_StartUp+0x70>)
 800126a:	f001 fc55 	bl	8002b18 <MPU6050_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <FlightController_StartUp+0x74>)
 8001272:	6013      	str	r3, [r2, #0]
            hesc = ESC_Init(&htim3);
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <FlightController_StartUp+0x78>)
 8001276:	f001 f8d1 	bl	800241c <ESC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <FlightController_StartUp+0x7c>)
 800127e:	6013      	str	r3, [r2, #0]

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <FlightController_StartUp+0x80>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f00b fb77 	bl	800c978 <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f00b fc04 	bl	800ca98 <vTaskDelay>
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001290:	e7d6      	b.n	8001240 <FlightController_StartUp+0xc>
 8001292:	bf00      	nop
 8001294:	40020800 	.word	0x40020800
 8001298:	20000329 	.word	0x20000329
 800129c:	20000b0c 	.word	0x20000b0c
 80012a0:	2000032c 	.word	0x2000032c
 80012a4:	20000a70 	.word	0x20000a70
 80012a8:	20000330 	.word	0x20000330
 80012ac:	20000ac4 	.word	0x20000ac4
 80012b0:	20000334 	.word	0x20000334
 80012b4:	20000304 	.word	0x20000304

080012b8 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 80012c4:	23fa      	movs	r3, #250	; 0xfa
 80012c6:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	461a      	mov	r2, r3
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <FlightController_HeartbeatLight+0x38>)
 80012d2:	f002 ff3d 	bl	8004150 <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e001      	b.n	80012e6 <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f00b fbd6 	bl	800ca98 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 80012ec:	e7ec      	b.n	80012c8 <FlightController_HeartbeatLight+0x10>
 80012ee:	bf00      	nop
 80012f0:	40020800 	.word	0x40020800

080012f4 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80012fc:	2314      	movs	r3, #20
 80012fe:	60fb      	str	r3, [r7, #12]
        //    	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
        //    	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
        //    	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);

    	/* Set task time delay */
        vTaskDelay(xDelay);
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f00b fbc9 	bl	800ca98 <vTaskDelay>
 8001306:	e7fb      	b.n	8001300 <FlightController_FlightLights+0xc>

08001308 <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

	FSA8S_CHANNEL_t channels[FSA8S_CHANNELS] = {CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7, CHANNEL_8, CHANNEL_9, CHANNEL_10};
 8001310:	4a12      	ldr	r2, [pc, #72]	; (800135c <FlightController_Read_FSA8S+0x54>)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	ca07      	ldmia	r2, {r0, r1, r2}
 8001318:	c303      	stmia	r3!, {r0, r1}
 800131a:	801a      	strh	r2, [r3, #0]

    /* Change delay from time in [ms] to ticks */
#ifdef	MAIN_APP_USE_LOGGING_FSA8S
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800131c:	2314      	movs	r3, #20
 800131e:	61bb      	str	r3, [r7, #24]
#endif

    while (1) {

    	for(uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001320:	2300      	movs	r3, #0
 8001322:	77fb      	strb	r3, [r7, #31]
 8001324:	e013      	b.n	800134e <FlightController_Read_FSA8S+0x46>
    		/* Read channels */
    		FSA8S_channelValues[i] = FSA8S_ReadChannel(rc_controller, channels[i]);
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <FlightController_Read_FSA8S+0x58>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	7ffb      	ldrb	r3, [r7, #31]
 800132c:	3320      	adds	r3, #32
 800132e:	443b      	add	r3, r7
 8001330:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001334:	7ffc      	ldrb	r4, [r7, #31]
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f001 fa25 	bl	8002788 <FSA8S_ReadChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <FlightController_Read_FSA8S+0x5c>)
 8001344:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    	for(uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001348:	7ffb      	ldrb	r3, [r7, #31]
 800134a:	3301      	adds	r3, #1
 800134c:	77fb      	strb	r3, [r7, #31]
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	2b09      	cmp	r3, #9
 8001352:	d9e8      	bls.n	8001326 <FlightController_Read_FSA8S+0x1e>
    		LOG(loggingStr, LOG_INFORMATION);
#endif
    	}

    	/* Set task time delay */
        vTaskDelay(xDelay);
 8001354:	69b8      	ldr	r0, [r7, #24]
 8001356:	f00b fb9f 	bl	800ca98 <vTaskDelay>
    	for(uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 800135a:	e7e1      	b.n	8001320 <FlightController_Read_FSA8S+0x18>
 800135c:	08011bb8 	.word	0x08011bb8
 8001360:	2000032c 	.word	0x2000032c
 8001364:	20000338 	.word	0x20000338

08001368 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    uint8_t loggingStr[40];
#endif

    /* Change delay from time in [ms] to ticks */
#if defined MAIN_APP_USE_LOGGING_GY87_GYROSCOPE || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER || defined MAIN_APP_USE_LOGGING_GY87_TEMPERATURE || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
 8001370:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    while (1) {

    	/* Read GY87 gyroscope values */
    	MPU6050_ReadGyroscope(hmpu6050, GY87_gyroscopeValues);
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <FlightController_Read_GY87+0xc0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a2c      	ldr	r2, [pc, #176]	; (800142c <FlightController_Read_GY87+0xc4>)
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fc13 	bl	8002bac <MPU6050_ReadGyroscope>

    	/* Log GY87 gyroscope values */
#ifdef MAIN_APP_USE_LOGGING_GY87_GYROSCOPE
    	sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope X: %d\r\n", GY87_gyroscopeValues->gyroscopeX);
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <FlightController_Read_GY87+0xc4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	461a      	mov	r2, r3
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4926      	ldr	r1, [pc, #152]	; (8001430 <FlightController_Read_GY87+0xc8>)
 8001396:	4618      	mov	r0, r3
 8001398:	f00e facc 	bl	800f934 <siprintf>
    	LOG(loggingStr, LOG_INFORMATION);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fd80 	bl	8002ea8 <LOG>
    	sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope Y: %d\r\n", GY87_gyroscopeValues->gyroscopeY);
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <FlightController_Read_GY87+0xc4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013b0:	461a      	mov	r2, r3
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	491f      	ldr	r1, [pc, #124]	; (8001434 <FlightController_Read_GY87+0xcc>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00e fabb 	bl	800f934 <siprintf>
    	LOG(loggingStr, LOG_INFORMATION);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 fd6f 	bl	8002ea8 <LOG>
    	sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope Z: %d\r\n\n", GY87_gyroscopeValues->gyroscopeZ);
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <FlightController_Read_GY87+0xc4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d2:	461a      	mov	r2, r3
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	4917      	ldr	r1, [pc, #92]	; (8001438 <FlightController_Read_GY87+0xd0>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f00e faaa 	bl	800f934 <siprintf>
    	LOG(loggingStr, LOG_INFORMATION);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fd5e 	bl	8002ea8 <LOG>
#endif

    	/* Read GY87 accelerometer values */
    	MPU6050_ReadAccelerometer(hmpu6050, GY87_accelerometerValues);
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <FlightController_Read_GY87+0xc0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <FlightController_Read_GY87+0xd4>)
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fc42 	bl	8002c80 <MPU6050_ReadAccelerometer>
    	sprintf((char *)loggingStr, (const char *)"GY87 Accelerometer Z: %d\r\n\n", GY87_accelerometerValues->accelerometerZ);
    	LOG(loggingStr, LOG_INFORMATION);
#endif

    	/* Read GY87 temperature value */
    	GY87_temperature = MPU6050_ReadTemperatureSensor(hmpu6050);
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <FlightController_Read_GY87+0xc0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fca8 	bl	8002d56 <MPU6050_ReadTemperatureSensor>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <FlightController_Read_GY87+0xd8>)
 800140c:	801a      	strh	r2, [r3, #0]
    	sprintf((char *)loggingStr, (const char *)"GY87 Temperature: %d°C\r\n\n", GY87_temperature);
    	LOG(loggingStr, LOG_INFORMATION);
#endif

    	/* Read GY87 magnetometer values */
    	MPU6050_ReadMagnetometer(hmpu6050, GY87_magnetometerValues);
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <FlightController_Read_GY87+0xc0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <FlightController_Read_GY87+0xdc>)
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fcca 	bl	8002db2 <MPU6050_ReadMagnetometer>
    	sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer Z: %d\r\n\n", GY87_magnetometerValues->magnetometerZ);
    	LOG(loggingStr, LOG_INFORMATION);
#endif

    	/* Set task time delay */
        vTaskDelay(xDelay);
 800141e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001420:	f00b fb3a 	bl	800ca98 <vTaskDelay>
    	MPU6050_ReadGyroscope(hmpu6050, GY87_gyroscopeValues);
 8001424:	e7a7      	b.n	8001376 <FlightController_Read_GY87+0xe>
 8001426:	bf00      	nop
 8001428:	20000330 	.word	0x20000330
 800142c:	20000350 	.word	0x20000350
 8001430:	08011bc4 	.word	0x08011bc4
 8001434:	08011bdc 	.word	0x08011bdc
 8001438:	08011bf4 	.word	0x08011bf4
 800143c:	20000354 	.word	0x20000354
 8001440:	2000034c 	.word	0x2000034c
 8001444:	20000358 	.word	0x20000358

08001448 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001450:	2314      	movs	r3, #20
 8001452:	60fb      	str	r3, [r7, #12]
    while (1) {

//    	ESC_SetSpeed(hesc, hesc->channel3, channel_test/10);

    	/* Set task time delay */
        vTaskDelay(xDelay);
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f00b fb1f 	bl	800ca98 <vTaskDelay>
 800145a:	e7fb      	b.n	8001454 <FlightController_Write_ESCs+0xc>

0800145c <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b087      	sub	sp, #28
 8001460:	af02      	add	r7, sp, #8
 8001462:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001464:	2314      	movs	r3, #20
 8001466:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001468:	2120      	movs	r1, #32
 800146a:	4810      	ldr	r0, [pc, #64]	; (80014ac <FlightController_OnOffButton+0x50>)
 800146c:	f002 fe58 	bl	8004120 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d115      	bne.n	80014a2 <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <FlightController_OnOffButton+0x54>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f083 0301 	eor.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00e      	beq.n	80014a2 <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <FlightController_OnOffButton+0x58>)
 8001486:	681c      	ldr	r4, [r3, #0]
 8001488:	f00b fcdc 	bl	800ce44 <xTaskGetTickCount>
 800148c:	4602      	mov	r2, r0
 800148e:	2300      	movs	r3, #0
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	2101      	movs	r1, #1
 8001496:	4620      	mov	r0, r4
 8001498:	f00c f9b2 	bl	800d800 <xTimerGenericCommand>
                Timer1_running = true;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <FlightController_OnOffButton+0x54>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f00b faf8 	bl	800ca98 <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80014a8:	e7de      	b.n	8001468 <FlightController_OnOffButton+0xc>
 80014aa:	bf00      	nop
 80014ac:	40020400 	.word	0x40020400
 80014b0:	20000328 	.word	0x20000328
 80014b4:	20000324 	.word	0x20000324

080014b8 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80014c0:	2314      	movs	r3, #20
 80014c2:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 80014c4:	482e      	ldr	r0, [pc, #184]	; (8001580 <FlightController_BatteryLevel+0xc8>)
 80014c6:	f001 fe2b 	bl	8003120 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 80014ca:	2101      	movs	r1, #1
 80014cc:	482c      	ldr	r0, [pc, #176]	; (8001580 <FlightController_BatteryLevel+0xc8>)
 80014ce:	f001 fedb 	bl	8003288 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 80014d2:	482b      	ldr	r0, [pc, #172]	; (8001580 <FlightController_BatteryLevel+0xc8>)
 80014d4:	f001 ff63 	bl	800339e <HAL_ADC_GetValue>
 80014d8:	4603      	mov	r3, r0
 80014da:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevel = (adcValue * 3.3) / 4096;
 80014dc:	897b      	ldrh	r3, [r7, #10]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f828 	bl	8000534 <__aeabi_i2d>
 80014e4:	a320      	add	r3, pc, #128	; (adr r3, 8001568 <FlightController_BatteryLevel+0xb0>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f88d 	bl	8000608 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <FlightController_BatteryLevel+0xcc>)
 80014fc:	f7ff f9ae 	bl	800085c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fb56 	bl	8000bb8 <__aeabi_d2f>
 800150c:	4603      	mov	r3, r0
 800150e:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <FlightController_BatteryLevel+0xd0>)
 8001510:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevel = FlightController_batteryLevel * 1.046046;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <FlightController_BatteryLevel+0xd0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f81e 	bl	8000558 <__aeabi_f2d>
 800151c:	a314      	add	r3, pc, #80	; (adr r3, 8001570 <FlightController_BatteryLevel+0xb8>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f871 	bl	8000608 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb43 	bl	8000bb8 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <FlightController_BatteryLevel+0xd0>)
 8001536:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevel = FlightController_batteryLevel * 3.363636;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <FlightController_BatteryLevel+0xd0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f80b 	bl	8000558 <__aeabi_f2d>
 8001542:	a30d      	add	r3, pc, #52	; (adr r3, 8001578 <FlightController_BatteryLevel+0xc0>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f85e 	bl	8000608 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fb30 	bl	8000bb8 <__aeabi_d2f>
 8001558:	4603      	mov	r3, r0
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <FlightController_BatteryLevel+0xd0>)
 800155c:	6013      	str	r3, [r2, #0]
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f[V]\r\n\n", FlightController_batteryLevel);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f00b fa9a 	bl	800ca98 <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8001564:	e7ae      	b.n	80014c4 <FlightController_BatteryLevel+0xc>
 8001566:	bf00      	nop
 8001568:	66666666 	.word	0x66666666
 800156c:	400a6666 	.word	0x400a6666
 8001570:	bb01c92e 	.word	0xbb01c92e
 8001574:	3ff0bc9a 	.word	0x3ff0bc9a
 8001578:	fdbd2fa1 	.word	0xfdbd2fa1
 800157c:	400ae8b9 	.word	0x400ae8b9
 8001580:	20000a28 	.word	0x20000a28
 8001584:	40b00000 	.word	0x40b00000
 8001588:	2000035c 	.word	0x2000035c

0800158c <Timer1_Callback>:
    }
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f00c fc39 	bl	800de0c <pvTimerGetTimerID>
 800159a:	4603      	mov	r3, r0
 800159c:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f00c f97c 	bl	800d89c <xTimerGetPeriod>
 80015a4:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (PW_ON_OFF_DRIVER_TIME / xTimerPeriod)) {
 80015ac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d33b      	bcc.n	8001634 <Timer1_Callback+0xa8>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80015bc:	2120      	movs	r1, #32
 80015be:	4822      	ldr	r0, [pc, #136]	; (8001648 <Timer1_Callback+0xbc>)
 80015c0:	f002 fdae 	bl	8004120 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d124      	bne.n	8001614 <Timer1_Callback+0x88>

            if (!FlightController_running) {
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <Timer1_Callback+0xc0>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	f083 0301 	eor.w	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <Timer1_Callback+0x5e>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	2110      	movs	r1, #16
 80015dc:	481a      	ldr	r0, [pc, #104]	; (8001648 <Timer1_Callback+0xbc>)
 80015de:	f002 fdb7 	bl	8004150 <HAL_GPIO_WritePin>

                FlightController_running = true;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <Timer1_Callback+0xc0>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e014      	b.n	8001614 <Timer1_Callback+0x88>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <Timer1_Callback+0xc4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00b fa86 	bl	800cb00 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fa:	4816      	ldr	r0, [pc, #88]	; (8001654 <Timer1_Callback+0xc8>)
 80015fc:	f002 fda8 	bl	8004150 <HAL_GPIO_WritePin>

                FlightController_running = false;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <Timer1_Callback+0xc0>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2110      	movs	r1, #16
 800160a:	480f      	ldr	r0, [pc, #60]	; (8001648 <Timer1_Callback+0xbc>)
 800160c:	f002 fda0 	bl	8004150 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 8001610:	f002 fa0b 	bl	8003a2a <HAL_NVIC_SystemReset>
            }
        }

        /* Stop Timer1 */
        xTimerStop(xTimer, 0);
 8001614:	2300      	movs	r3, #0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	2200      	movs	r2, #0
 800161c:	2103      	movs	r1, #3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f00c f8ee 	bl	800d800 <xTimerGenericCommand>
        vTimerSetTimerID(xTimer, (void *)0);
 8001624:	2100      	movs	r1, #0
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f00c fc10 	bl	800de4c <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <Timer1_Callback+0xcc>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8001632:	e004      	b.n	800163e <Timer1_Callback+0xb2>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4619      	mov	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f00c fc07 	bl	800de4c <vTimerSetTimerID>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020400 	.word	0x40020400
 800164c:	20000329 	.word	0x20000329
 8001650:	20000308 	.word	0x20000308
 8001654:	40020800 	.word	0x40020800
 8001658:	20000328 	.word	0x20000328

0800165c <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

    /* Welcome message */
    LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 8001660:	2100      	movs	r1, #0
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <FlightController_Init+0x14>)
 8001664:	f001 fc20 	bl	8002ea8 <LOG>

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 8001668:	f7ff fc74 	bl	8000f54 <FreeRTOS_CreateStartUpTasks>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08011c0c 	.word	0x08011c0c

08001674 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001684:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <vApplicationGetIdleTaskMemory+0x30>)
 800168a:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000360 	.word	0x20000360
 80016a4:	200003c4 	.word	0x200003c4

080016a8 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80016b8:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <vApplicationGetTimerTaskMemory+0x30>)
 80016be:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c6:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	200005c4 	.word	0x200005c4
 80016d8:	20000628 	.word	0x20000628

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b5b0      	push	{r4, r5, r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e2:	f001 fc43 	bl	8002f6c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e6:	f000 f827 	bl	8001738 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ea:	f000 f9cd 	bl	8001a88 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ee:	f000 f9b1 	bl	8001a54 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016f2:	f000 f985 	bl	8001a00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016f6:	f000 f8db 	bl	80018b0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80016fa:	f000 f907 	bl	800190c <MX_TIM3_Init>
  MX_ADC1_Init();
 80016fe:	f000 f885 	bl	800180c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 8001702:	f7ff ffab 	bl	800165c <FlightController_Init>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <main+0x54>)
 8001708:	1d3c      	adds	r4, r7, #4
 800170a:	461d      	mov	r5, r3
 800170c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f00a f99a 	bl	800ba56 <osThreadCreate>
 8001722:	4603      	mov	r3, r0
 8001724:	4a03      	ldr	r2, [pc, #12]	; (8001734 <main+0x58>)
 8001726:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001728:	f00a f98e 	bl	800ba48 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 800172c:	e7fe      	b.n	800172c <main+0x50>
 800172e:	bf00      	nop
 8001730:	08011c40 	.word	0x08011c40
 8001734:	20000bb0 	.word	0x20000bb0

08001738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b094      	sub	sp, #80	; 0x50
 800173c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	2230      	movs	r2, #48	; 0x30
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f00e f957 	bl	800f9fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <SystemClock_Config+0xcc>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <SystemClock_Config+0xcc>)
 8001766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <SystemClock_Config+0xcc>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <SystemClock_Config+0xd0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <SystemClock_Config+0xd0>)
 8001786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017ac:	2319      	movs	r3, #25
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80017b0:	2390      	movs	r3, #144	; 0x90
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017b8:	2303      	movs	r3, #3
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 ff1b 	bl	80065fc <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017cc:	f000 f9ea 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	2102      	movs	r1, #2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 f97d 	bl	8006aec <HAL_RCC_ClockConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017f8:	f000 f9d4 	bl	8001ba4 <Error_Handler>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3750      	adds	r7, #80	; 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000

0800180c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <MX_ADC1_Init+0x98>)
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <MX_ADC1_Init+0x9c>)
 8001822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <MX_ADC1_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <MX_ADC1_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <MX_ADC1_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_ADC1_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <MX_ADC1_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_ADC1_Init+0x98>)
 8001846:	2200      	movs	r2, #0
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_ADC1_Init+0x98>)
 800184c:	4a17      	ldr	r2, [pc, #92]	; (80018ac <MX_ADC1_Init+0xa0>)
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_ADC1_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_ADC1_Init+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_ADC1_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_ADC1_Init+0x98>)
 8001866:	2201      	movs	r2, #1
 8001868:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_ADC1_Init+0x98>)
 800186c:	f001 fc14 	bl	8003098 <HAL_ADC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001876:	f000 f995 	bl	8001ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800187e:	2301      	movs	r3, #1
 8001880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <MX_ADC1_Init+0x98>)
 800188c:	f001 fd94 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001896:	f000 f985 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000a28 	.word	0x20000a28
 80018a8:	40012000 	.word	0x40012000
 80018ac:	0f000001 	.word	0x0f000001

080018b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_I2C1_Init+0x50>)
 80018b6:	4a13      	ldr	r2, [pc, #76]	; (8001904 <MX_I2C1_Init+0x54>)
 80018b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_I2C1_Init+0x50>)
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <MX_I2C1_Init+0x58>)
 80018be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_I2C1_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_I2C1_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_I2C1_Init+0x50>)
 80018ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_I2C1_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_I2C1_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_I2C1_Init+0x50>)
 80018ee:	f002 fc49 	bl	8004184 <HAL_I2C_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f8:	f000 f954 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000a70 	.word	0x20000a70
 8001904:	40005400 	.word	0x40005400
 8001908:	000186a0 	.word	0x000186a0

0800190c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	f107 0320 	add.w	r3, r7, #32
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800192e:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <MX_TIM3_Init+0xec>)
 8001930:	4a32      	ldr	r2, [pc, #200]	; (80019fc <MX_TIM3_Init+0xf0>)
 8001932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <MX_TIM3_Init+0xec>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <MX_TIM3_Init+0xec>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_TIM3_Init+0xec>)
 8001942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001946:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <MX_TIM3_Init+0xec>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <MX_TIM3_Init+0xec>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001954:	4828      	ldr	r0, [pc, #160]	; (80019f8 <MX_TIM3_Init+0xec>)
 8001956:	f005 faa9 	bl	8006eac <HAL_TIM_PWM_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001960:	f000 f920 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4619      	mov	r1, r3
 8001972:	4821      	ldr	r0, [pc, #132]	; (80019f8 <MX_TIM3_Init+0xec>)
 8001974:	f005 fe8e 	bl	8007694 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800197e:	f000 f911 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001982:	2360      	movs	r3, #96	; 0x60
 8001984:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2200      	movs	r2, #0
 8001996:	4619      	mov	r1, r3
 8001998:	4817      	ldr	r0, [pc, #92]	; (80019f8 <MX_TIM3_Init+0xec>)
 800199a:	f005 fb87 	bl	80070ac <HAL_TIM_PWM_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80019a4:	f000 f8fe 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2204      	movs	r2, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4812      	ldr	r0, [pc, #72]	; (80019f8 <MX_TIM3_Init+0xec>)
 80019b0:	f005 fb7c 	bl	80070ac <HAL_TIM_PWM_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019ba:	f000 f8f3 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2208      	movs	r2, #8
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM3_Init+0xec>)
 80019c6:	f005 fb71 	bl	80070ac <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80019d0:	f000 f8e8 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	220c      	movs	r2, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <MX_TIM3_Init+0xec>)
 80019dc:	f005 fb66 	bl	80070ac <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80019e6:	f000 f8dd 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019ea:	4803      	ldr	r0, [pc, #12]	; (80019f8 <MX_TIM3_Init+0xec>)
 80019ec:	f000 f9bc 	bl	8001d68 <HAL_TIM_MspPostInit>

}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000ac4 	.word	0x20000ac4
 80019fc:	40000400 	.word	0x40000400

08001a00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_USART2_UART_Init+0x4c>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <MX_USART2_UART_Init+0x50>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_USART2_UART_Init+0x4c>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_USART2_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_USART2_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_USART2_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_USART2_UART_Init+0x4c>)
 8001a26:	2204      	movs	r2, #4
 8001a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_USART2_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_USART2_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_USART2_UART_Init+0x4c>)
 8001a38:	f005 fe9a 	bl	8007770 <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a42:	f000 f8af 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000b0c 	.word	0x20000b0c
 8001a50:	40004400 	.word	0x40004400

08001a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_DMA_Init+0x30>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <MX_DMA_Init+0x30>)
 8001a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_DMA_Init+0x30>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]

}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a37      	ldr	r2, [pc, #220]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <MX_GPIO_Init+0xfc>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001b14:	481c      	ldr	r0, [pc, #112]	; (8001b88 <MX_GPIO_Init+0x100>)
 8001b16:	f002 fb1b 	bl	8004150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f241 1114 	movw	r1, #4372	; 0x1114
 8001b20:	481a      	ldr	r0, [pc, #104]	; (8001b8c <MX_GPIO_Init+0x104>)
 8001b22:	f002 fb15 	bl	8004150 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED4_Pin;
 8001b26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4812      	ldr	r0, [pc, #72]	; (8001b88 <MX_GPIO_Init+0x100>)
 8001b40:	f002 f96a 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|PW_ON_OFF_DRIVER_OUTPUT_Pin|LED2_Pin;
 8001b44:	f241 1314 	movw	r3, #4372	; 0x1114
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480b      	ldr	r0, [pc, #44]	; (8001b8c <MX_GPIO_Init+0x104>)
 8001b5e:	f002 f95b 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
  GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8001b62:	2320      	movs	r3, #32
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_GPIO_Init+0x104>)
 8001b76:	f002 f94f 	bl	8003e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	; 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020400 	.word	0x40020400

08001b90 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001b98:	f00c fbea 	bl	800e370 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f009 ffa6 	bl	800baee <osDelay>
 8001ba2:	e7fb      	b.n	8001b9c <StartDefaultTask+0xc>

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_MspInit+0x54>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_MspInit+0x54>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_MspInit+0x54>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_MspInit+0x54>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_MspInit+0x54>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_MspInit+0x54>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	210f      	movs	r1, #15
 8001bf6:	f06f 0001 	mvn.w	r0, #1
 8001bfa:	f001 feec 	bl	80039d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_ADC_MspInit+0x7c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d127      	bne.n	8001c7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_ADC_MspInit+0x80>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_ADC_MspInit+0x80>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_ADC_MspInit+0x80>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_ADC_MspInit+0x80>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <HAL_ADC_MspInit+0x80>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_ADC_MspInit+0x80>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <HAL_ADC_MspInit+0x84>)
 8001c7a:	f002 f8cd 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40012000 	.word	0x40012000
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_I2C_MspInit+0x84>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12b      	bne.n	8001d0e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd2:	23c0      	movs	r3, #192	; 0xc0
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd6:	2312      	movs	r3, #18
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <HAL_I2C_MspInit+0x8c>)
 8001cee:	f002 f893 	bl	8003e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_I2C_MspInit+0x88>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40005400 	.word	0x40005400
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020400 	.word	0x40020400

08001d24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10d      	bne.n	8001d52 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_TIM_PWM_MspInit+0x40>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_TIM_PWM_MspInit+0x40>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_TIM_PWM_MspInit+0x40>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_TIM_MspPostInit+0xa4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d13b      	bne.n	8001e02 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_TIM_MspPostInit+0xa8>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <HAL_TIM_MspPostInit+0xa8>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_TIM_MspPostInit+0xa8>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_TIM_MspPostInit+0xa8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_TIM_MspPostInit+0xa8>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_TIM_MspPostInit+0xa8>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dc2:	23c0      	movs	r3, #192	; 0xc0
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <HAL_TIM_MspPostInit+0xac>)
 8001dde:	f002 f81b 	bl	8003e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001de2:	2303      	movs	r3, #3
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001df2:	2302      	movs	r3, #2
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4806      	ldr	r0, [pc, #24]	; (8001e18 <HAL_TIM_MspPostInit+0xb0>)
 8001dfe:	f002 f80b 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400

08001e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_UART_MspInit+0xe4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d15b      	bne.n	8001ef6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_UART_MspInit+0xe8>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <HAL_UART_MspInit+0xe8>)
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_UART_MspInit+0xe8>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_UART_MspInit+0xe8>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a28      	ldr	r2, [pc, #160]	; (8001f04 <HAL_UART_MspInit+0xe8>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_UART_MspInit+0xe8>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e76:	230c      	movs	r3, #12
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e86:	2307      	movs	r3, #7
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	481d      	ldr	r0, [pc, #116]	; (8001f08 <HAL_UART_MspInit+0xec>)
 8001e92:	f001 ffc1 	bl	8003e18 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001e98:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_UART_MspInit+0xf4>)
 8001e9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001e9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ea2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001ece:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ed2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001eda:	480c      	ldr	r0, [pc, #48]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001edc:	f001 fdb6 	bl	8003a4c <HAL_DMA_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001ee6:	f7ff fe5d 	bl	8001ba4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40004400 	.word	0x40004400
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	20000b50 	.word	0x20000b50
 8001f10:	40026088 	.word	0x40026088

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001f18:	e7fe      	b.n	8001f18 <NMI_Handler+0x4>

08001f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <MemManage_Handler+0x4>

08001f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <BusFault_Handler+0x4>

08001f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <UsageFault_Handler+0x4>

08001f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f44:	f001 f864 	bl	8003010 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f48:	f00b faac 	bl	800d4a4 <xTaskGetSchedulerState>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f52:	f00c f959 	bl	800e208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <OTG_FS_IRQHandler+0x10>)
 8001f62:	f003 fa1e 	bl	80053a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20001b10 	.word	0x20001b10

08001f70 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
    return 1;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_kill>:

int _kill(int pid, int sig) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8001f8a:	f00d fda7 	bl	800fadc <__errno>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2216      	movs	r2, #22
 8001f92:	601a      	str	r2, [r3, #0]
    return -1;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_exit>:

void _exit(int status) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ffe7 	bl	8001f80 <_kill>
    while (1) {
 8001fb2:	e7fe      	b.n	8001fb2 <_exit+0x12>

08001fb4 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e00a      	b.n	8001fdc <_read+0x28>
        *ptr++ = __io_getchar();
 8001fc6:	f3af 8000 	nop.w
 8001fca:	4601      	mov	r1, r0
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	60ba      	str	r2, [r7, #8]
 8001fd2:	b2ca      	uxtb	r2, r1
 8001fd4:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbf0      	blt.n	8001fc6 <_read+0x12>
    }

    return len;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e009      	b.n	8002014 <_write+0x26>
        __io_putchar(*ptr++);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	60ba      	str	r2, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbf1      	blt.n	8002000 <_write+0x12>
    }
    return len;
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_close>:

int _close(int file) {
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_fstat>:

int _fstat(int file, struct stat * st) {
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204e:	605a      	str	r2, [r3, #4]
    return 0;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <_isatty>:

int _isatty(int file) {
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <_sbrk+0x5c>)
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <_sbrk+0x60>)
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <_sbrk+0x64>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <_sbrk+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d207      	bcs.n	80020d0 <_sbrk+0x40>
        errno = ENOMEM;
 80020c0:	f00d fd0c 	bl	800fadc <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	220c      	movs	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ce:	e009      	b.n	80020e4 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <_sbrk+0x64>)
 80020e0:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20010000 	.word	0x20010000
 80020f0:	00000400 	.word	0x00000400
 80020f4:	20000bb4 	.word	0x20000bb4
 80020f8:	20002388 	.word	0x20002388

080020fc <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <SystemInit+0x20>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <SystemInit+0x20>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002124:	480d      	ldr	r0, [pc, #52]	; (800215c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002126:	490e      	ldr	r1, [pc, #56]	; (8002160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800213c:	4c0b      	ldr	r4, [pc, #44]	; (800216c <LoopFillZerobss+0x26>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800214a:	f7ff ffd7 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214e:	f00d fccb 	bl	800fae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7ff fac3 	bl	80016dc <main>
  bx  lr
 8002156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002158:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002164:	08012104 	.word	0x08012104
  ldr r2, =_sbss
 8002168:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 800216c:	20002388 	.word	0x20002388

08002170 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC_IRQHandler>
	...

08002174 <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc, uint32_t channel) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]

    /* Check parameters */
    if (NULL == hesc) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <PWM_Init+0x14>
        return false;
 8002184:	2300      	movs	r3, #0
 8002186:	e043      	b.n	8002210 <PWM_Init+0x9c>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d010      	beq.n	80021b4 <PWM_Init+0x40>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d00b      	beq.n	80021b4 <PWM_Init+0x40>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d006      	beq.n	80021b4 <PWM_Init+0x40>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <PWM_Init+0x40>
        return false;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e02d      	b.n	8002210 <PWM_Init+0x9c>
    }

    /* Initialize ESC_HandleTypeDef structure */
    /* BEGIN MODIFY 1 */
    hesc->channel1 = TIM_CHANNEL_1;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	605a      	str	r2, [r3, #4]
    hesc->channel2 = TIM_CHANNEL_2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2204      	movs	r2, #4
 80021be:	609a      	str	r2, [r3, #8]
    hesc->channel3 = TIM_CHANNEL_3;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2208      	movs	r2, #8
 80021c4:	60da      	str	r2, [r3, #12]
    hesc->channel4 = TIM_CHANNEL_4;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	220c      	movs	r2, #12
 80021ca:	611a      	str	r2, [r3, #16]
    hesc->CCR1 = (uint32_t *)&(TIM3->CCR1);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <PWM_Init+0xa4>)
 80021d0:	615a      	str	r2, [r3, #20]
    hesc->CCR2 = (uint32_t *)&(TIM3->CCR2);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <PWM_Init+0xa8>)
 80021d6:	619a      	str	r2, [r3, #24]
    hesc->CCR3 = (uint32_t *)&(TIM3->CCR3);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a11      	ldr	r2, [pc, #68]	; (8002220 <PWM_Init+0xac>)
 80021dc:	61da      	str	r2, [r3, #28]
    hesc->CCR4 = (uint32_t *)&(TIM3->CCR4);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a10      	ldr	r2, [pc, #64]	; (8002224 <PWM_Init+0xb0>)
 80021e2:	621a      	str	r2, [r3, #32]
    /* END MODIFY 1 */

    /* Initialize timer peripheral */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Init(hesc->htim)) {
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 fe5f 	bl	8006eac <HAL_TIM_PWM_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <PWM_Init+0x84>
        /* END MODIFY 2 */
        return false;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e00b      	b.n	8002210 <PWM_Init+0x9c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, channel)) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fea4 	bl	8006f4c <HAL_TIM_PWM_Start>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <PWM_Init+0x9a>
        /* END MODIFY 3 */
        return false;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <PWM_Init+0x9c>
    }

    return true;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40000434 	.word	0x40000434
 800221c:	40000438 	.word	0x40000438
 8002220:	4000043c 	.word	0x4000043c
 8002224:	40000440 	.word	0x40000440

08002228 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint32_t channel, uint16_t dutyCycle) {
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	80fb      	strh	r3, [r7, #6]

    /* Check parameters */
    if (NULL == hesc) {
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <PWM_SetDutyCycle+0x18>
        return false;
 800223c:	2300      	movs	r3, #0
 800223e:	e046      	b.n	80022ce <PWM_SetDutyCycle+0xa6>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	d010      	beq.n	800226c <PWM_SetDutyCycle+0x44>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	429a      	cmp	r2, r3
 8002252:	d00b      	beq.n	800226c <PWM_SetDutyCycle+0x44>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	d006      	beq.n	800226c <PWM_SetDutyCycle+0x44>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <PWM_SetDutyCycle+0x44>
        return false;
 8002268:	2300      	movs	r3, #0
 800226a:	e030      	b.n	80022ce <PWM_SetDutyCycle+0xa6>
    }
    if (dutyCycle > MAX_PWM_VALUE) {
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002272:	d301      	bcc.n	8002278 <PWM_SetDutyCycle+0x50>
        return false;
 8002274:	2300      	movs	r3, #0
 8002276:	e02a      	b.n	80022ce <PWM_SetDutyCycle+0xa6>
    }

    /* Set duty cycle */
    if (hesc->channel1 == channel) {
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	d104      	bne.n	800228c <PWM_SetDutyCycle+0x64>

        *(hesc->CCR1) = dutyCycle;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e01f      	b.n	80022cc <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel2 == channel) {
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	d104      	bne.n	80022a0 <PWM_SetDutyCycle+0x78>

        *(hesc->CCR2) = dutyCycle;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e015      	b.n	80022cc <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel3 == channel) {
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d104      	bne.n	80022b4 <PWM_SetDutyCycle+0x8c>

        *(hesc->CCR3) = dutyCycle;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e00b      	b.n	80022cc <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel4 == channel) {
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d104      	bne.n	80022c8 <PWM_SetDutyCycle+0xa0>

        *(hesc->CCR4) = dutyCycle;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	88fa      	ldrh	r2, [r7, #6]
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e001      	b.n	80022cc <PWM_SetDutyCycle+0xa4>
    } else {

        return false;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <PWM_SetDutyCycle+0xa6>
    }

    return true;
 80022cc:	2301      	movs	r3, #1
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <ESC_SetTimeDelay>:

void ESC_SetTimeDelay(uint32_t delay) {
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
/* Set delay */
#ifdef USE_FREERTOS
    const TickType_t xDelay = pdMS_TO_TICKS(delay);
    vTaskDelay(xDelay);
#else
    HAL_Delay(delay);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 feb4 	bl	8003050 <HAL_Delay>
#endif
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <ESC_AutoCalibrate>:
    *pwmValue = (MAX_ESC_SPEED - MIN_ESC_SPEED) * (speed / 100) + MIN_ESC_SPEED;

    return true;
}

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <ESC_AutoCalibrate+0x12>
        return false;
 80022fe:	2300      	movs	r3, #0
 8002300:	e088      	b.n	8002414 <ESC_AutoCalibrate+0x124>
#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->channel1, MAX_ESC_SPEED)) {
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f240 6266 	movw	r2, #1638	; 0x666
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff8b 	bl	8002228 <PWM_SetDutyCycle>
 8002312:	4603      	mov	r3, r0
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <ESC_AutoCalibrate+0x32>
        return false;
 800231e:	2300      	movs	r3, #0
 8002320:	e078      	b.n	8002414 <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel2, MAX_ESC_SPEED)) {
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f240 6266 	movw	r2, #1638	; 0x666
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff7b 	bl	8002228 <PWM_SetDutyCycle>
 8002332:	4603      	mov	r3, r0
 8002334:	f083 0301 	eor.w	r3, r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <ESC_AutoCalibrate+0x52>
        return false;
 800233e:	2300      	movs	r3, #0
 8002340:	e068      	b.n	8002414 <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel3, MAX_ESC_SPEED)) {
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f240 6266 	movw	r2, #1638	; 0x666
 800234a:	4619      	mov	r1, r3
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff6b 	bl	8002228 <PWM_SetDutyCycle>
 8002352:	4603      	mov	r3, r0
 8002354:	f083 0301 	eor.w	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <ESC_AutoCalibrate+0x72>
        return false;
 800235e:	2300      	movs	r3, #0
 8002360:	e058      	b.n	8002414 <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel4, MAX_ESC_SPEED)) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f240 6266 	movw	r2, #1638	; 0x666
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff5b 	bl	8002228 <PWM_SetDutyCycle>
 8002372:	4603      	mov	r3, r0
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <ESC_AutoCalibrate+0x92>
        return false;
 800237e:	2300      	movs	r3, #0
 8002380:	e048      	b.n	8002414 <ESC_AutoCalibrate+0x124>
    }

    /* Wait 2 seconds */
    ESC_SetTimeDelay(ESC_AUTOCALIBRATION_WAIT_TIME_1);
 8002382:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002386:	f7ff ffa8 	bl	80022da <ESC_SetTimeDelay>

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->channel1, MIN_ESC_SPEED)) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f240 3233 	movw	r2, #819	; 0x333
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff47 	bl	8002228 <PWM_SetDutyCycle>
 800239a:	4603      	mov	r3, r0
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <ESC_AutoCalibrate+0xba>
        return false;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e034      	b.n	8002414 <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel2, MIN_ESC_SPEED)) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f240 3233 	movw	r2, #819	; 0x333
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff37 	bl	8002228 <PWM_SetDutyCycle>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f083 0301 	eor.w	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <ESC_AutoCalibrate+0xda>
        return false;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e024      	b.n	8002414 <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel3, MIN_ESC_SPEED)) {
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f240 3233 	movw	r2, #819	; 0x333
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff27 	bl	8002228 <PWM_SetDutyCycle>
 80023da:	4603      	mov	r3, r0
 80023dc:	f083 0301 	eor.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <ESC_AutoCalibrate+0xfa>
        return false;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e014      	b.n	8002414 <ESC_AutoCalibrate+0x124>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->channel4, MIN_ESC_SPEED)) {
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f240 3233 	movw	r2, #819	; 0x333
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff17 	bl	8002228 <PWM_SetDutyCycle>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f083 0301 	eor.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <ESC_AutoCalibrate+0x11a>
        return false;
 8002406:	2300      	movs	r3, #0
 8002408:	e004      	b.n	8002414 <ESC_AutoCalibrate+0x124>
    }

    /* Wait 1 second */
    ESC_SetTimeDelay(ESC_AUTOCALIBRATION_WAIT_TIME_2);
 800240a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800240e:	f7ff ff64 	bl	80022da <ESC_SetTimeDelay>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 8002412:	2301      	movs	r3, #1
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <ESC_Init+0x12>
        return NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	e060      	b.n	80024f0 <ESC_Init+0xd4>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 800242e:	2024      	movs	r0, #36	; 0x24
 8002430:	f00b ff7a 	bl	800e328 <pvPortMalloc>
 8002434:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <ESC_Init+0x28>
        hesc->htim = htim;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e002      	b.n	800244a <ESC_Init+0x2e>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f00b ff81 	bl	800e34c <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc, hesc->channel1)) {
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4619      	mov	r1, r3
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff fe8f 	bl	8002174 <PWM_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	f083 0301 	eor.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <ESC_Init+0x50>
        LOG((uint8_t *)"ESC 1 couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f00b ff72 	bl	800e34c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	e041      	b.n	80024f0 <ESC_Init+0xd4>
    }
    if (false == PWM_Init(hesc, hesc->channel2)) {
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4619      	mov	r1, r3
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff fe7e 	bl	8002174 <PWM_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	f083 0301 	eor.w	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <ESC_Init+0x72>
        LOG((uint8_t *)"ESC 2 couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f00b ff61 	bl	800e34c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 800248a:	2300      	movs	r3, #0
 800248c:	e030      	b.n	80024f0 <ESC_Init+0xd4>
    }
    if (false == PWM_Init(hesc, hesc->channel3)) {
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4619      	mov	r1, r3
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f7ff fe6d 	bl	8002174 <PWM_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	f083 0301 	eor.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <ESC_Init+0x94>
        LOG((uint8_t *)"ESC 3 couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f00b ff50 	bl	800e34c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e01f      	b.n	80024f0 <ESC_Init+0xd4>
    }
    if (false == PWM_Init(hesc, hesc->channel4)) {
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	4619      	mov	r1, r3
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff fe5c 	bl	8002174 <PWM_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <ESC_Init+0xb6>
        LOG((uint8_t *)"ESC 4 couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f00b ff3f 	bl	800e34c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e00e      	b.n	80024f0 <ESC_Init+0xd4>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f7ff ff0c 	bl	80022f0 <ESC_AutoCalibrate>
 80024d8:	4603      	mov	r3, r0
 80024da:	f083 0301 	eor.w	r3, r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <ESC_Init+0xd2>
        LOG((uint8_t *)"ESCs couldn't be auto-calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f00b ff31 	bl	800e34c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <ESC_Init+0xd4>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <IBUS_Init+0x12>
        return false;
 8002506:	2300      	movs	r3, #0
 8002508:	e00f      	b.n	800252a <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7a1b      	ldrb	r3, [r3, #8]
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	f005 f976 	bl	800780a <HAL_UART_Receive_DMA>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <FSA8S_CheckFirstBytes+0x12>
        return false;
 8002540:	2300      	movs	r3, #0
 8002542:	e00d      	b.n	8002560 <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b20      	cmp	r3, #32
 800254c:	d107      	bne.n	800255e <FSA8S_CheckFirstBytes+0x2c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	3301      	adds	r3, #1
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d101      	bne.n	800255e <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 800255e:	2300      	movs	r3, #0
    }
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 8002574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002578:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <FSA8S_Checksum+0x18>
        return false;
 8002580:	2300      	movs	r3, #0
 8002582:	e02c      	b.n	80025de <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7a1b      	ldrb	r3, [r3, #8]
 800258c:	3b01      	subs	r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	b21a      	sxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7a1b      	ldrb	r3, [r3, #8]
 800259e:	3b02      	subs	r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	4313      	orrs	r3, r2
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 80025ac:	2300      	movs	r3, #0
 80025ae:	737b      	strb	r3, [r7, #13]
 80025b0:	e00b      	b.n	80025ca <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	7b7b      	ldrb	r3, [r7, #13]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	89fa      	ldrh	r2, [r7, #14]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 80025c4:	7b7b      	ldrb	r3, [r7, #13]
 80025c6:	3301      	adds	r3, #1
 80025c8:	737b      	strb	r3, [r7, #13]
 80025ca:	7b7b      	ldrb	r3, [r7, #13]
 80025cc:	2b1d      	cmp	r3, #29
 80025ce:	d9f0      	bls.n	80025b2 <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 80025d0:	897a      	ldrh	r2, [r7, #10]
 80025d2:	89fb      	ldrh	r3, [r7, #14]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d101      	bne.n	80025dc <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 80025dc:	2300      	movs	r3, #0
    }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d062      	beq.n	80026c0 <FSA8S_AmendData+0xd4>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 80025fa:	2302      	movs	r3, #2
 80025fc:	737b      	strb	r3, [r7, #13]
 80025fe:	e059      	b.n	80026b4 <FSA8S_AmendData+0xc8>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 8002600:	2300      	movs	r3, #0
 8002602:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	7b7b      	ldrb	r3, [r7, #13]
 800260a:	3301      	adds	r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b21a      	sxth	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	7b7b      	ldrb	r3, [r7, #13]
 800261a:	440b      	add	r3, r1
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	b21b      	sxth	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b21b      	sxth	r3, r3
 8002624:	b29a      	uxth	r2, r3
 8002626:	7b7b      	ldrb	r3, [r7, #13]
 8002628:	3b02      	subs	r3, #2
 800262a:	0fd9      	lsrs	r1, r3, #31
 800262c:	440b      	add	r3, r1
 800262e:	105b      	asrs	r3, r3, #1
 8002630:	4619      	mov	r1, r3
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <FSA8S_AmendData+0xe0>)
 8002634:	5c5b      	ldrb	r3, [r3, r1]
 8002636:	b29b      	uxth	r3, r3
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 800263c:	89fb      	ldrh	r3, [r7, #14]
 800263e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002642:	d308      	bcc.n	8002656 <FSA8S_AmendData+0x6a>
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800264a:	d804      	bhi.n	8002656 <FSA8S_AmendData+0x6a>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 800264c:	89fb      	ldrh	r3, [r7, #14]
 800264e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002652:	81fb      	strh	r3, [r7, #14]
 8002654:	e001      	b.n	800265a <FSA8S_AmendData+0x6e>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 800265a:	89fb      	ldrh	r3, [r7, #14]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002664:	7b7b      	ldrb	r3, [r7, #13]
 8002666:	3b02      	subs	r3, #2
 8002668:	0fda      	lsrs	r2, r3, #31
 800266a:	4413      	add	r3, r2
 800266c:	105b      	asrs	r3, r3, #1
 800266e:	461a      	mov	r2, r3
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <FSA8S_AmendData+0xe0>)
 8002672:	5c9b      	ldrb	r3, [r3, r2]
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80026d0 <FSA8S_AmendData+0xe4>
 8002680:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002684:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80026d0 <FSA8S_AmendData+0xe4>
 8002688:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800268c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	7b7b      	ldrb	r3, [r7, #13]
 8002696:	3b02      	subs	r3, #2
 8002698:	0fd9      	lsrs	r1, r3, #31
 800269a:	440b      	add	r3, r1
 800269c:	105b      	asrs	r3, r3, #1
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026a6:	ee17 2a90 	vmov	r2, s15
 80026aa:	b292      	uxth	r2, r2
 80026ac:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 80026ae:	7b7b      	ldrb	r3, [r7, #13]
 80026b0:	3302      	adds	r3, #2
 80026b2:	737b      	strb	r3, [r7, #13]
 80026b4:	7b7a      	ldrb	r2, [r7, #13]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7a1b      	ldrb	r3, [r3, #8]
 80026ba:	3b02      	subs	r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	db9f      	blt.n	8002600 <FSA8S_AmendData+0x14>
        }
    }
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20000004 	.word	0x20000004
 80026d0:	447a0000 	.word	0x447a0000

080026d4 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <FSA8S_Init+0x12>
        return NULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e04a      	b.n	800277c <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <FSA8S_Init+0xb0>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <FSA8S_Init+0x1e>
        return NULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e044      	b.n	800277c <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 80026f2:	2014      	movs	r0, #20
 80026f4:	f00b fe18 	bl	800e328 <pvPortMalloc>
 80026f8:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 80026fa:	2020      	movs	r0, #32
 80026fc:	f00b fe14 	bl	800e328 <pvPortMalloc>
 8002700:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 8002702:	201c      	movs	r0, #28
 8002704:	f00b fe10 	bl	800e328 <pvPortMalloc>
 8002708:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00f      	beq.n	8002730 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2220      	movs	r2, #32
 8002720:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	220e      	movs	r2, #14
 800272c:	741a      	strb	r2, [r3, #16]
 800272e:	e00c      	b.n	800274a <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	f00b fe09 	bl	800e34c <vPortFree>
        vPortFree(hibus->data);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4618      	mov	r0, r3
 8002740:	f00b fe04 	bl	800e34c <vPortFree>
        vPortFree(hibus);
 8002744:	6978      	ldr	r0, [r7, #20]
 8002746:	f00b fe01 	bl	800e34c <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff fed4 	bl	80024f8 <IBUS_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d004      	beq.n	8002760 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <FSA8S_Init+0xb0>)
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
        return hibus;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	e00d      	b.n	800277c <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4618      	mov	r0, r3
 8002766:	f00b fdf1 	bl	800e34c <vPortFree>
        vPortFree(hibus->data);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4618      	mov	r0, r3
 8002770:	f00b fdec 	bl	800e34c <vPortFree>
        vPortFree(hibus);
 8002774:	6978      	ldr	r0, [r7, #20]
 8002776:	f00b fde9 	bl	800e34c <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 800277a:	2300      	movs	r3, #0
    }
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000bb8 	.word	0x20000bb8

08002788 <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	e029      	b.n	80027f2 <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <FSA8S_ReadChannel+0x22>
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	2b0e      	cmp	r3, #14
 80027a8:	d901      	bls.n	80027ae <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e021      	b.n	80027f2 <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 80027ae:	bf00      	nop
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff febe 	bl	8002532 <FSA8S_CheckFirstBytes>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f6      	bne.n	80027b0 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fed2 	bl	800256c <FSA8S_Checksum>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f083 0301 	eor.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 80027d4:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 80027d6:	e7ea      	b.n	80027ae <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 80027d8:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ff06 	bl	80025ec <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027ea:	3b01      	subs	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	881b      	ldrh	r3, [r3, #0]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af02      	add	r7, sp, #8
 8002800:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hmpu6050) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <I2C_Init+0x12>
        return false;
 8002808:	2300      	movs	r3, #0
 800280a:	e010      	b.n	800282e <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6858      	ldr	r0, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7a19      	ldrb	r1, [r3, #8]
 8002814:	f107 030f 	add.w	r3, r7, #15
 8002818:	2201      	movs	r2, #1
 800281a:	9200      	str	r2, [sp, #0]
 800281c:	2275      	movs	r2, #117	; 0x75
 800281e:	f000 f80a 	bl	8002836 <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b68      	cmp	r3, #104	; 0x68
 8002826:	d101      	bne.n	800282c <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 800282c:	2300      	movs	r3, #0
    }
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b088      	sub	sp, #32
 800283a:	af04      	add	r7, sp, #16
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	72fb      	strb	r3, [r7, #11]
 8002844:	4613      	mov	r3, r2
 8002846:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <I2C_Read+0x1c>
        return false;
 800284e:	2300      	movs	r3, #0
 8002850:	e019      	b.n	8002886 <I2C_Read+0x50>
    }
    if (NULL == data) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <I2C_Read+0x26>
        return false;
 8002858:	2300      	movs	r3, #0
 800285a:	e014      	b.n	8002886 <I2C_Read+0x50>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 800285c:	7afb      	ldrb	r3, [r7, #11]
 800285e:	b299      	uxth	r1, r3
 8002860:	7abb      	ldrb	r3, [r7, #10]
 8002862:	b29a      	uxth	r2, r3
 8002864:	7e3b      	ldrb	r3, [r7, #24]
 8002866:	b29b      	uxth	r3, r3
 8002868:	2064      	movs	r0, #100	; 0x64
 800286a:	9002      	str	r0, [sp, #8]
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2301      	movs	r3, #1
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f001 fec3 	bl	8004600 <HAL_I2C_Mem_Read>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <I2C_Read+0x4e>

        /* Data couldn't be read */
        return false;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <I2C_Read+0x50>
    } else {

        /* Data read successfully */
        return true;
 8002884:	2301      	movs	r3, #1
    }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 800288e:	b580      	push	{r7, lr}
 8002890:	b088      	sub	sp, #32
 8002892:	af04      	add	r7, sp, #16
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	72fb      	strb	r3, [r7, #11]
 800289c:	4613      	mov	r3, r2
 800289e:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <I2C_Write+0x1c>
        return false;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e018      	b.n	80028dc <I2C_Write+0x4e>
    }
    if (NULL == data) {
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <I2C_Write+0x26>
        return false;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e013      	b.n	80028dc <I2C_Write+0x4e>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 80028b4:	7afb      	ldrb	r3, [r7, #11]
 80028b6:	b299      	uxth	r1, r3
 80028b8:	7abb      	ldrb	r3, [r7, #10]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	2364      	movs	r3, #100	; 0x64
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	2301      	movs	r3, #1
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2301      	movs	r3, #1
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f001 fd9e 	bl	800440c <HAL_I2C_Mem_Write>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <I2C_Write+0x4c>

        /* Data couldn't be written */
        return false;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 80028da:	2301      	movs	r3, #1
    }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <MPU6050_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_InstanceInit(I2C_HandleTypeDef * hi2c) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = pvPortMalloc(sizeof(MPU6050_HandleTypeDef_t));
 80028ec:	2014      	movs	r0, #20
 80028ee:	f00b fd1b 	bl	800e328 <pvPortMalloc>
 80028f2:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 80028f4:	2004      	movs	r0, #4
 80028f6:	f00b fd17 	bl	800e328 <pvPortMalloc>
 80028fa:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <MPU6050_InstanceInit+0x24>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <MPU6050_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4618      	mov	r0, r3
 800290e:	f00b fd1d 	bl	800e34c <vPortFree>
        vPortFree(hmpu6050);
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f00b fd1a 	bl	800e34c <vPortFree>
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
        free(hmpu6050->buffer);
        free(hmpu6050);
#endif
        return NULL;
 8002918:	2300      	movs	r3, #0
 800291a:	e01b      	b.n	8002954 <MPU6050_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <MPU6050_InstanceInit+0x78>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <MPU6050_InstanceInit+0x4e>
            hmpu6050->instance = 1;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR1;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	22d0      	movs	r2, #208	; 0xd0
 800292e:	721a      	strb	r2, [r3, #8]
 8002930:	e009      	b.n	8002946 <MPU6050_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <MPU6050_InstanceInit+0x78>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <MPU6050_InstanceInit+0x62>
            hmpu6050->instance = 2;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	22d1      	movs	r2, #209	; 0xd1
 8002944:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->hi2c = hi2c;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	605a      	str	r2, [r3, #4]
        hmpu6050->buffer = buffer;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000bb9 	.word	0x20000bb9

08002960 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af02      	add	r7, sp, #8
 8002966:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8002968:	2340      	movs	r3, #64	; 0x40
 800296a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6858      	ldr	r0, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7a19      	ldrb	r1, [r3, #8]
 8002974:	f107 030f 	add.w	r3, r7, #15
 8002978:	2200      	movs	r2, #0
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	226b      	movs	r2, #107	; 0x6b
 800297e:	f000 f897 	bl	8002ab0 <MPU6050_WriteRegisterBitmasked>
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(MPU6050_HandleTypeDef_t * hmpu6050) {
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af02      	add	r7, sp, #8
 8002990:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6858      	ldr	r0, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7a19      	ldrb	r1, [r3, #8]
 800299e:	f107 030f 	add.w	r3, r7, #15
 80029a2:	2201      	movs	r2, #1
 80029a4:	9200      	str	r2, [sp, #0]
 80029a6:	226b      	movs	r2, #107	; 0x6b
 80029a8:	f000 f882 	bl	8002ab0 <MPU6050_WriteRegisterBitmasked>
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(MPU6050_HandleTypeDef_t * hmpu6050) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 80029bc:	2318      	movs	r3, #24
 80029be:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6858      	ldr	r0, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7a19      	ldrb	r1, [r3, #8]
 80029c8:	f107 030f 	add.w	r3, r7, #15
 80029cc:	2201      	movs	r2, #1
 80029ce:	9200      	str	r2, [sp, #0]
 80029d0:	2219      	movs	r2, #25
 80029d2:	f000 f86d 	bl	8002ab0 <MPU6050_WriteRegisterBitmasked>
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(MPU6050_HandleTypeDef_t * hmpu6050) {
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af02      	add	r7, sp, #8
 80029e4:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_3; // Full range
 80029e6:	2318      	movs	r3, #24
 80029e8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6858      	ldr	r0, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7a19      	ldrb	r1, [r3, #8]
 80029f2:	f107 030f 	add.w	r3, r7, #15
 80029f6:	2201      	movs	r2, #1
 80029f8:	9200      	str	r2, [sp, #0]
 80029fa:	221b      	movs	r2, #27
 80029fc:	f000 f858 	bl	8002ab0 <MPU6050_WriteRegisterBitmasked>
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_3; // Full range
 8002a10:	2318      	movs	r3, #24
 8002a12:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6858      	ldr	r0, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7a19      	ldrb	r1, [r3, #8]
 8002a1c:	f107 030f 	add.w	r3, r7, #15
 8002a20:	2201      	movs	r2, #1
 8002a22:	9200      	str	r2, [sp, #0]
 8002a24:	221c      	movs	r2, #28
 8002a26:	f000 f843 	bl	8002ab0 <MPU6050_WriteRegisterBitmasked>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <MPU6050_Config>:
    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
    MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
}

static void MPU6050_Config(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hmpu6050);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ff90 	bl	8002960 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hmpu6050);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ffa2 	bl	800298a <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hmpu6050);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ffb4 	bl	80029b4 <MPU6050_SetSampleDivider>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hmpu6050);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ffc6 	bl	80029de <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hmpu6050);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ffd8 	bl	8002a08 <MPU6050_SetAccelerometerRange>
//    /* Set Master clock */
//    MPU6050_SetMasterClock(hmpu6050);
//
//    /* Configure slave QMC5883L magnetometer */
//    MPU6050_Configure_QMC5883l(hmpu6050);
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <MPU6050_ReadRegister>:

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	72fb      	strb	r3, [r7, #11]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8002a72:	7aba      	ldrb	r2, [r7, #10]
 8002a74:	7af9      	ldrb	r1, [r7, #11]
 8002a76:	7e3b      	ldrb	r3, [r7, #24]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff feda 	bl	8002836 <I2C_Read>
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	72fb      	strb	r3, [r7, #11]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8002a9c:	7aba      	ldrb	r2, [r7, #10]
 8002a9e:	7af9      	ldrb	r1, [r7, #11]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7ff fef3 	bl	800288e <I2C_Write>
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	72fb      	strb	r3, [r7, #11]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 8002ac2:	f107 0317 	add.w	r3, r7, #23
 8002ac6:	7aba      	ldrb	r2, [r7, #10]
 8002ac8:	7af9      	ldrb	r1, [r7, #11]
 8002aca:	2001      	movs	r0, #1
 8002acc:	9000      	str	r0, [sp, #0]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7ff ffc6 	bl	8002a60 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8002ad4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	75bb      	strb	r3, [r7, #22]
 8002ae8:	e00a      	b.n	8002b00 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	b25a      	sxtb	r2, r3
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	4013      	ands	r3, r2
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8002b00:	f107 0316 	add.w	r3, r7, #22
 8002b04:	7aba      	ldrb	r2, [r7, #10]
 8002b06:	7af9      	ldrb	r1, [r7, #11]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff ffbe 	bl	8002a8a <MPU6050_WriteRegister>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <MPU6050_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_Init(I2C_HandleTypeDef * hi2c) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <MPU6050_Init+0x12>
        return NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e034      	b.n	8002b94 <MPU6050_Init+0x7c>
    }

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <MPU6050_Init+0x84>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d101      	bne.n	8002b36 <MPU6050_Init+0x1e>
        return NULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e02e      	b.n	8002b94 <MPU6050_Init+0x7c>
    }

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_InstanceInit(hi2c);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fed4 	bl	80028e4 <MPU6050_InstanceInit>
 8002b3c:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d022      	beq.n	8002b8a <MPU6050_Init+0x72>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hmpu6050)) {
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fe58 	bl	80027fa <I2C_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <MPU6050_Init+0x56>

            /* Initialization was successful */
#ifdef MPU6050_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
 8002b50:	2100      	movs	r1, #0
 8002b52:	4813      	ldr	r0, [pc, #76]	; (8002ba0 <MPU6050_Init+0x88>)
 8002b54:	f000 f9a8 	bl	8002ea8 <LOG>
#endif

            /* Configure device */
            MPU6050_Config(hmpu6050);
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7ff ff6a 	bl	8002a32 <MPU6050_Config>

            instancesNumber++;
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <MPU6050_Init+0x84>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <MPU6050_Init+0x84>)
 8002b68:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	e012      	b.n	8002b94 <MPU6050_Init+0x7c>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f00b fbea 	bl	800e34c <vPortFree>
            vPortFree(hmpu6050);
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f00b fbe7 	bl	800e34c <vPortFree>
            free(hmpu6050->buffer);
            free(hmpu6050);
#endif

#ifdef MPU6050_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU not detected.\r\n\n", LOG_ERROR);
 8002b7e:	2103      	movs	r1, #3
 8002b80:	4808      	ldr	r0, [pc, #32]	; (8002ba4 <MPU6050_Init+0x8c>)
 8002b82:	f000 f991 	bl	8002ea8 <LOG>
#endif
            return NULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e004      	b.n	8002b94 <MPU6050_Init+0x7c>
        }
    } else {

        /* Instance couldn't be created */
#ifdef MPU6050_USE_LOGGING
        LOG((uint8_t *)"MPU6050 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
 8002b8a:	2103      	movs	r1, #3
 8002b8c:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <MPU6050_Init+0x90>)
 8002b8e:	f000 f98b 	bl	8002ea8 <LOG>
#endif
        return NULL;
 8002b92:	2300      	movs	r3, #0
    }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000bb9 	.word	0x20000bb9
 8002ba0:	08011c5c 	.word	0x08011c5c
 8002ba4:	08011c78 	.word	0x08011c78
 8002ba8:	08011c98 	.word	0x08011c98

08002bac <MPU6050_ReadGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

void MPU6050_ReadGyroscope(MPU6050_HandleTypeDef_t * hmpu6050, gyroscopeValues_t * gyroscopeValues) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_2000;
 8002bb6:	2310      	movs	r3, #16
 8002bb8:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hmpu6050 && NULL != gyroscopeValues) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d051      	beq.n	8002c64 <MPU6050_ReadGyroscope+0xb8>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d04e      	beq.n	8002c64 <MPU6050_ReadGyroscope+0xb8>

        /* Read gyroscope in axis X */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6858      	ldr	r0, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7a19      	ldrb	r1, [r3, #8]
 8002bce:	f107 030c 	add.w	r3, r7, #12
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	9200      	str	r2, [sp, #0]
 8002bd6:	2243      	movs	r2, #67	; 0x43
 8002bd8:	f7ff ff42 	bl	8002a60 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8002bdc:	7b3b      	ldrb	r3, [r7, #12]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	7b7b      	ldrb	r3, [r7, #13]
 8002be4:	b21b      	sxth	r3, r3
 8002be6:	4313      	orrs	r3, r2
 8002be8:	b21b      	sxth	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	801a      	strh	r2, [r3, #0]

        /* Read gyroscope in axis Y */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6858      	ldr	r0, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7a19      	ldrb	r1, [r3, #8]
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	2202      	movs	r2, #2
 8002c08:	9200      	str	r2, [sp, #0]
 8002c0a:	2245      	movs	r2, #69	; 0x45
 8002c0c:	f7ff ff28 	bl	8002a60 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8002c10:	7b3b      	ldrb	r3, [r7, #12]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	7b7b      	ldrb	r3, [r7, #13]
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c24:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c28:	b21a      	sxth	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	805a      	strh	r2, [r3, #2]

        /* Read gyroscope in axis Z */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6858      	ldr	r0, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7a19      	ldrb	r1, [r3, #8]
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	9200      	str	r2, [sp, #0]
 8002c3e:	2247      	movs	r2, #71	; 0x47
 8002c40:	f7ff ff0e 	bl	8002a60 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8002c44:	7b3b      	ldrb	r3, [r7, #12]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	b21a      	sxth	r2, r3
 8002c4a:	7b7b      	ldrb	r3, [r7, #13]
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b21b      	sxth	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c58:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	809a      	strh	r2, [r3, #4]
 8002c62:	e009      	b.n	8002c78 <MPU6050_ReadGyroscope+0xcc>

    } else {
        /* Wrong parameters */
        gyroscopeValues->gyroscopeX = 0;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->gyroscopeY = 0;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->gyroscopeZ = 0;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	809a      	strh	r2, [r3, #4]
    }
}
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <MPU6050_ReadAccelerometer>:

void MPU6050_ReadAccelerometer(MPU6050_HandleTypeDef_t * hmpu6050, accelerometerValues_t * accelerometerValues) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_16;
 8002c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c8e:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hmpu6050 && NULL != accelerometerValues) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d051      	beq.n	8002d3a <MPU6050_ReadAccelerometer+0xba>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d04e      	beq.n	8002d3a <MPU6050_ReadAccelerometer+0xba>

        /* Read accelerometer in axis X */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6858      	ldr	r0, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7a19      	ldrb	r1, [r3, #8]
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	2202      	movs	r2, #2
 8002caa:	9200      	str	r2, [sp, #0]
 8002cac:	223b      	movs	r2, #59	; 0x3b
 8002cae:	f7ff fed7 	bl	8002a60 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8002cb2:	7b3b      	ldrb	r3, [r7, #12]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	b21a      	sxth	r2, r3
 8002cb8:	7b7b      	ldrb	r3, [r7, #13]
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	801a      	strh	r2, [r3, #0]

        /* Read accelerometer in axis Y */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6858      	ldr	r0, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7a19      	ldrb	r1, [r3, #8]
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	2202      	movs	r2, #2
 8002cde:	9200      	str	r2, [sp, #0]
 8002ce0:	223d      	movs	r2, #61	; 0x3d
 8002ce2:	f7ff febd 	bl	8002a60 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8002ce6:	7b3b      	ldrb	r3, [r7, #12]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	7b7b      	ldrb	r3, [r7, #13]
 8002cee:	b21b      	sxth	r3, r3
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8002cfe:	b21a      	sxth	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	805a      	strh	r2, [r3, #2]

        /* Read accelerometer in axis Z */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6858      	ldr	r0, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7a19      	ldrb	r1, [r3, #8]
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	2202      	movs	r2, #2
 8002d12:	9200      	str	r2, [sp, #0]
 8002d14:	223f      	movs	r2, #63	; 0x3f
 8002d16:	f7ff fea3 	bl	8002a60 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8002d1a:	7b3b      	ldrb	r3, [r7, #12]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	b21a      	sxth	r2, r3
 8002d20:	7b7b      	ldrb	r3, [r7, #13]
 8002d22:	b21b      	sxth	r3, r3
 8002d24:	4313      	orrs	r3, r2
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d32:	b21a      	sxth	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	809a      	strh	r2, [r3, #4]
 8002d38:	e009      	b.n	8002d4e <MPU6050_ReadAccelerometer+0xce>

    } else {
        /* Wrong parameters */
        accelerometerValues->accelerometerX = 0;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	801a      	strh	r2, [r3, #0]
        accelerometerValues->accelerometerY = 0;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	805a      	strh	r2, [r3, #2]
        accelerometerValues->accelerometerZ = 0;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	809a      	strh	r2, [r3, #4]
    }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <MPU6050_ReadTemperatureSensor>:

int16_t MPU6050_ReadTemperatureSensor(MPU6050_HandleTypeDef_t * hmpu6050) {
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af02      	add	r7, sp, #8
 8002d5c:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 8002d5e:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002d62:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 8002d64:	2324      	movs	r3, #36	; 0x24
 8002d66:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hmpu6050) {
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <MPU6050_ReadTemperatureSensor+0x1c>
        return 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e01b      	b.n	8002daa <MPU6050_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6858      	ldr	r0, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7a19      	ldrb	r1, [r3, #8]
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	2202      	movs	r2, #2
 8002d80:	9200      	str	r2, [sp, #0]
 8002d82:	2241      	movs	r2, #65	; 0x41
 8002d84:	f7ff fe6c 	bl	8002a60 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 8002d88:	7a3b      	ldrb	r3, [r7, #8]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	b21a      	sxth	r2, r3
 8002d8e:	7a7b      	ldrb	r3, [r7, #9]
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	4313      	orrs	r3, r2
 8002d94:	b21b      	sxth	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	89bb      	ldrh	r3, [r7, #12]
 8002da4:	4413      	add	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	b21b      	sxth	r3, r3
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <MPU6050_ReadMagnetometer>:

void MPU6050_ReadMagnetometer(MPU6050_HandleTypeDef_t * hmpu6050, magnetometerValues_t * magnetometerValues) {
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af02      	add	r7, sp, #8
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 1;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hmpu6050 && NULL != magnetometerValues) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d051      	beq.n	8002e6a <MPU6050_ReadMagnetometer+0xb8>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d04e      	beq.n	8002e6a <MPU6050_ReadMagnetometer+0xb8>

        /* Read magnetometer in axis X */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6858      	ldr	r0, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7a19      	ldrb	r1, [r3, #8]
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	2202      	movs	r2, #2
 8002dda:	9200      	str	r2, [sp, #0]
 8002ddc:	2249      	movs	r2, #73	; 0x49
 8002dde:	f7ff fe3f 	bl	8002a60 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8002de2:	7b7b      	ldrb	r3, [r7, #13]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	b21a      	sxth	r2, r3
 8002de8:	7b3b      	ldrb	r3, [r7, #12]
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002df6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dfa:	b21a      	sxth	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	801a      	strh	r2, [r3, #0]

        /* Read magnetometer in axis Y */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6858      	ldr	r0, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	7a19      	ldrb	r1, [r3, #8]
 8002e08:	f107 030c 	add.w	r3, r7, #12
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	224b      	movs	r2, #75	; 0x4b
 8002e12:	f7ff fe25 	bl	8002a60 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8002e16:	7b7b      	ldrb	r3, [r7, #13]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	7b3b      	ldrb	r3, [r7, #12]
 8002e1e:	b21b      	sxth	r3, r3
 8002e20:	4313      	orrs	r3, r2
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e2e:	b21a      	sxth	r2, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	805a      	strh	r2, [r3, #2]

        /* Read magnetometer in axis Z */
        MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6858      	ldr	r0, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7a19      	ldrb	r1, [r3, #8]
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	2202      	movs	r2, #2
 8002e42:	9200      	str	r2, [sp, #0]
 8002e44:	224d      	movs	r2, #77	; 0x4d
 8002e46:	f7ff fe0b 	bl	8002a60 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8002e4a:	7b7b      	ldrb	r3, [r7, #13]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	b21a      	sxth	r2, r3
 8002e50:	7b3b      	ldrb	r3, [r7, #12]
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	4313      	orrs	r3, r2
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	809a      	strh	r2, [r3, #4]
 8002e68:	e009      	b.n	8002e7e <MPU6050_ReadMagnetometer+0xcc>

    } else {
        /* Wrong parameters */
        magnetometerValues->magnetometerX = 0;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	801a      	strh	r2, [r3, #0]
        magnetometerValues->magnetometerY = 0;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	805a      	strh	r2, [r3, #2]
        magnetometerValues->magnetometerZ = 0;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	809a      	strh	r2, [r3, #4]
    }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]

    CDC_Transmit_FS(string, strlen((const char *)string));
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd f9f6 	bl	8000280 <strlen>
 8002e94:	4603      	mov	r3, r0
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f00b fb26 	bl	800e4ec <CDC_Transmit_FS>
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
int8_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b090      	sub	sp, #64	; 0x40
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]

    /* Check parameters */
    if (NULL == message) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <LOG+0x18>
        return -1;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ebe:	e049      	b.n	8002f54 <LOG+0xac>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d902      	bls.n	8002ecc <LOG+0x24>
        return -1;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eca:	e043      	b.n	8002f54 <LOG+0xac>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	f107 0310 	add.w	r3, r7, #16
 8002ed4:	222e      	movs	r2, #46	; 0x2e
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f00c fd8e 	bl	800f9fa <memset>

    if (LOG_INFORMATION == logType) {
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <LOG+0x4e>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <LOG+0xb4>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	f107 030c 	add.w	r3, r7, #12
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f00c fd8b 	bl	800fa0a <strcat>
 8002ef4:	e022      	b.n	8002f3c <LOG+0x94>
    } else if (LOG_DEBUGGING == logType) {
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d108      	bne.n	8002f0e <LOG+0x66>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8002efc:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <LOG+0xb8>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00c fd7f 	bl	800fa0a <strcat>
 8002f0c:	e016      	b.n	8002f3c <LOG+0x94>
    } else if (LOG_WARNING == logType) {
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d108      	bne.n	8002f26 <LOG+0x7e>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <LOG+0xbc>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	f107 030c 	add.w	r3, r7, #12
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f00c fd73 	bl	800fa0a <strcat>
 8002f24:	e00a      	b.n	8002f3c <LOG+0x94>
    } else if (LOG_ERROR == logType) {
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d107      	bne.n	8002f3c <LOG+0x94>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <LOG+0xc0>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f00c fd67 	bl	800fa0a <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f00c fd61 	bl	800fa0a <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff9a 	bl	8002e86 <USB_Write>

    return 0;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3740      	adds	r7, #64	; 0x40
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000014 	.word	0x20000014
 8002f60:	20000018 	.word	0x20000018
 8002f64:	2000001c 	.word	0x2000001c
 8002f68:	20000020 	.word	0x20000020

08002f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <HAL_Init+0x40>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_Init+0x40>)
 8002f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <HAL_Init+0x40>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f000 fd13 	bl	80039c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f9a:	200f      	movs	r0, #15
 8002f9c:	f000 f808 	bl	8002fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa0:	f7fe fe08 	bl	8001bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023c00 	.word	0x40023c00

08002fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_InitTick+0x54>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_InitTick+0x58>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fd2f 	bl	8003a32 <HAL_SYSTICK_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00e      	b.n	8002ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d80a      	bhi.n	8002ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fec:	f000 fcf3 	bl	80039d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff0:	4a06      	ldr	r2, [pc, #24]	; (800300c <HAL_InitTick+0x5c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000000 	.word	0x20000000
 8003008:	20000028 	.word	0x20000028
 800300c:	20000024 	.word	0x20000024

08003010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_IncTick+0x20>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_IncTick+0x24>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4413      	add	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <HAL_IncTick+0x24>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000028 	.word	0x20000028
 8003034:	20000bbc 	.word	0x20000bbc

08003038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return uwTick;
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_GetTick+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000bbc 	.word	0x20000bbc

08003050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff ffee 	bl	8003038 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003068:	d005      	beq.n	8003076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_Delay+0x44>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003076:	bf00      	nop
 8003078:	f7ff ffde 	bl	8003038 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d8f7      	bhi.n	8003078 <HAL_Delay+0x28>
  {
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000028 	.word	0x20000028

08003098 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e033      	b.n	8003116 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe fda8 	bl	8001c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030de:	f023 0302 	bic.w	r3, r3, #2
 80030e2:	f043 0202 	orr.w	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa86 	bl	80035fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
 8003106:	e001      	b.n	800310c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_ADC_Start+0x1a>
 8003136:	2302      	movs	r3, #2
 8003138:	e097      	b.n	800326a <HAL_ADC_Start+0x14a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d018      	beq.n	8003182 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003160:	4b45      	ldr	r3, [pc, #276]	; (8003278 <HAL_ADC_Start+0x158>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a45      	ldr	r2, [pc, #276]	; (800327c <HAL_ADC_Start+0x15c>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0c9a      	lsrs	r2, r3, #18
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003174:	e002      	b.n	800317c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3b01      	subs	r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f9      	bne.n	8003176 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d15f      	bne.n	8003250 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ce:	d106      	bne.n	80031de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	f023 0206 	bic.w	r2, r3, #6
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_ADC_Start+0x160>)
 80031ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d129      	bne.n	8003268 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	e020      	b.n	8003268 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a16      	ldr	r2, [pc, #88]	; (8003284 <HAL_ADC_Start+0x164>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d11b      	bne.n	8003268 <HAL_ADC_Start+0x148>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d114      	bne.n	8003268 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	e00b      	b.n	8003268 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f043 0210 	orr.w	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000
 800327c:	431bde83 	.word	0x431bde83
 8003280:	40012300 	.word	0x40012300
 8003284:	40012000 	.word	0x40012000

08003288 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d113      	bne.n	80032ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b4:	d10b      	bne.n	80032ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e063      	b.n	8003396 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80032ce:	f7ff feb3 	bl	8003038 <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032d4:	e021      	b.n	800331a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032dc:	d01d      	beq.n	800331a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_ADC_PollForConversion+0x6c>
 80032e4:	f7ff fea8 	bl	8003038 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d212      	bcs.n	800331a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d00b      	beq.n	800331a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f043 0204 	orr.w	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e03d      	b.n	8003396 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d1d6      	bne.n	80032d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0212 	mvn.w	r2, #18
 8003330:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d123      	bne.n	8003394 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11f      	bne.n	8003394 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800335e:	2b00      	cmp	r3, #0
 8003360:	d006      	beq.n	8003370 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e105      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x228>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	d925      	bls.n	8003430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68d9      	ldr	r1, [r3, #12]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	3b1e      	subs	r3, #30
 80033fa:	2207      	movs	r2, #7
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43da      	mvns	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	400a      	ands	r2, r1
 8003408:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68d9      	ldr	r1, [r3, #12]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	4618      	mov	r0, r3
 800341c:	4603      	mov	r3, r0
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4403      	add	r3, r0
 8003422:	3b1e      	subs	r3, #30
 8003424:	409a      	lsls	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e022      	b.n	8003476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6919      	ldr	r1, [r3, #16]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	2207      	movs	r2, #7
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	400a      	ands	r2, r1
 8003452:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	4603      	mov	r3, r0
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4403      	add	r3, r0
 800346c:	409a      	lsls	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d824      	bhi.n	80034c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	3b05      	subs	r3, #5
 8003490:	221f      	movs	r2, #31
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	400a      	ands	r2, r1
 800349e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	4618      	mov	r0, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b05      	subs	r3, #5
 80034ba:	fa00 f203 	lsl.w	r2, r0, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
 80034c6:	e04c      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d824      	bhi.n	800351a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	3b23      	subs	r3, #35	; 0x23
 80034e2:	221f      	movs	r2, #31
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43da      	mvns	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	400a      	ands	r2, r1
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4618      	mov	r0, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3b23      	subs	r3, #35	; 0x23
 800350c:	fa00 f203 	lsl.w	r2, r0, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
 8003518:	e023      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	3b41      	subs	r3, #65	; 0x41
 800352c:	221f      	movs	r2, #31
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43da      	mvns	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	400a      	ands	r2, r1
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	4618      	mov	r0, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	3b41      	subs	r3, #65	; 0x41
 8003556:	fa00 f203 	lsl.w	r2, r0, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_ADC_ConfigChannel+0x234>)
 8003564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <HAL_ADC_ConfigChannel+0x238>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d109      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x1cc>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b12      	cmp	r3, #18
 8003576:	d105      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_ADC_ConfigChannel+0x238>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d123      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x21e>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b10      	cmp	r3, #16
 8003594:	d003      	beq.n	800359e <HAL_ADC_ConfigChannel+0x1e6>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b11      	cmp	r3, #17
 800359c:	d11b      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d111      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_ADC_ConfigChannel+0x23c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a10      	ldr	r2, [pc, #64]	; (80035f8 <HAL_ADC_ConfigChannel+0x240>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	0c9a      	lsrs	r2, r3, #18
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035c8:	e002      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f9      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40012300 	.word	0x40012300
 80035f0:	40012000 	.word	0x40012000
 80035f4:	20000000 	.word	0x20000000
 80035f8:	431bde83 	.word	0x431bde83

080035fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003604:	4b79      	ldr	r3, [pc, #484]	; (80037ec <ADC_Init+0x1f0>)
 8003606:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	431a      	orrs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	021a      	lsls	r2, r3, #8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6899      	ldr	r1, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <ADC_Init+0x1f4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	e00f      	b.n	80036fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0202 	bic.w	r2, r2, #2
 8003708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6899      	ldr	r1, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7e1b      	ldrb	r3, [r3, #24]
 8003714:	005a      	lsls	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01b      	beq.n	8003760 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003736:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	3b01      	subs	r3, #1
 8003754:	035a      	lsls	r2, r3, #13
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	e007      	b.n	8003770 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800376e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	3b01      	subs	r3, #1
 800378c:	051a      	lsls	r2, r3, #20
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037b2:	025a      	lsls	r2, r3, #9
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	029a      	lsls	r2, r3, #10
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012300 	.word	0x40012300
 80037f0:	0f000001 	.word	0x0f000001

080037f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800381c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	db0b      	blt.n	8003882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4907      	ldr	r1, [pc, #28]	; (8003890 <__NVIC_EnableIRQ+0x38>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2001      	movs	r0, #1
 800387a:	fa00 f202 	lsl.w	r2, r0, r2
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	db0a      	blt.n	80038be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	490c      	ldr	r1, [pc, #48]	; (80038e0 <__NVIC_SetPriority+0x4c>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038bc:	e00a      	b.n	80038d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <__NVIC_SetPriority+0x50>)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3b04      	subs	r3, #4
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	440b      	add	r3, r1
 80038d2:	761a      	strb	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000e100 	.word	0xe000e100
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f1c3 0307 	rsb	r3, r3, #7
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf28      	it	cs
 8003906:	2304      	movcs	r3, #4
 8003908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3304      	adds	r3, #4
 800390e:	2b06      	cmp	r3, #6
 8003910:	d902      	bls.n	8003918 <NVIC_EncodePriority+0x30>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3b03      	subs	r3, #3
 8003916:	e000      	b.n	800391a <NVIC_EncodePriority+0x32>
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	401a      	ands	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	43d9      	mvns	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	4313      	orrs	r3, r2
         );
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003954:	f3bf 8f4f 	dsb	sy
}
 8003958:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <__NVIC_SystemReset+0x24>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003962:	4904      	ldr	r1, [pc, #16]	; (8003974 <__NVIC_SystemReset+0x24>)
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <__NVIC_SystemReset+0x28>)
 8003966:	4313      	orrs	r3, r2
 8003968:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800396a:	f3bf 8f4f 	dsb	sy
}
 800396e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <__NVIC_SystemReset+0x20>
 8003974:	e000ed00 	.word	0xe000ed00
 8003978:	05fa0004 	.word	0x05fa0004

0800397c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3b01      	subs	r3, #1
 8003988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800398c:	d301      	bcc.n	8003992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800398e:	2301      	movs	r3, #1
 8003990:	e00f      	b.n	80039b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003992:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <SysTick_Config+0x40>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399a:	210f      	movs	r1, #15
 800399c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039a0:	f7ff ff78 	bl	8003894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <SysTick_Config+0x40>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <SysTick_Config+0x40>)
 80039ac:	2207      	movs	r2, #7
 80039ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	e000e010 	.word	0xe000e010

080039c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ff13 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	4603      	mov	r3, r0
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039e8:	f7ff ff28 	bl	800383c <__NVIC_GetPriorityGrouping>
 80039ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	6978      	ldr	r0, [r7, #20]
 80039f4:	f7ff ff78 	bl	80038e8 <NVIC_EncodePriority>
 80039f8:	4602      	mov	r2, r0
 80039fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff47 	bl	8003894 <__NVIC_SetPriority>
}
 8003a06:	bf00      	nop
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff1b 	bl	8003858 <__NVIC_EnableIRQ>
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003a2e:	f7ff ff8f 	bl	8003950 <__NVIC_SystemReset>

08003a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff9e 	bl	800397c <SysTick_Config>
 8003a40:	4603      	mov	r3, r0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff faee 	bl	8003038 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e099      	b.n	8003b9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a88:	e00f      	b.n	8003aaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8a:	f7ff fad5 	bl	8003038 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d908      	bls.n	8003aaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e078      	b.n	8003b9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e8      	bne.n	8003a8a <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <HAL_DMA_Init+0x158>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d107      	bne.n	8003b14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0307 	bic.w	r3, r3, #7
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d117      	bne.n	8003b6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f8e5 	bl	8003d20 <DMA_CheckFifoParam>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e016      	b.n	8003b9c <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f89c 	bl	8003cb4 <DMA_CalcBaseAndBitshift>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	223f      	movs	r2, #63	; 0x3f
 8003b86:	409a      	lsls	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	f010803f 	.word	0xf010803f

08003ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_DMA_Start_IT+0x26>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e040      	b.n	8003c50 <HAL_DMA_Start_IT+0xa8>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d12f      	bne.n	8003c42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f82e 	bl	8003c58 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	223f      	movs	r2, #63	; 0x3f
 8003c02:	409a      	lsls	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0216 	orr.w	r2, r2, #22
 8003c16:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0208 	orr.w	r2, r2, #8
 8003c2e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e005      	b.n	8003c4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d108      	bne.n	8003c98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c96:	e007      	b.n	8003ca8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	60da      	str	r2, [r3, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	3b10      	subs	r3, #16
 8003cc4:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <DMA_CalcBaseAndBitshift+0x64>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <DMA_CalcBaseAndBitshift+0x68>)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d909      	bls.n	8003cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	1d1a      	adds	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	659a      	str	r2, [r3, #88]	; 0x58
 8003cf4:	e007      	b.n	8003d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	aaaaaaab 	.word	0xaaaaaaab
 8003d1c:	08011d78 	.word	0x08011d78

08003d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11f      	bne.n	8003d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d856      	bhi.n	8003dee <DMA_CheckFifoParam+0xce>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <DMA_CheckFifoParam+0x28>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d6b 	.word	0x08003d6b
 8003d50:	08003d59 	.word	0x08003d59
 8003d54:	08003def 	.word	0x08003def
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d046      	beq.n	8003df2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d68:	e043      	b.n	8003df2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d72:	d140      	bne.n	8003df6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d78:	e03d      	b.n	8003df6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	d121      	bne.n	8003dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d837      	bhi.n	8003dfa <DMA_CheckFifoParam+0xda>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <DMA_CheckFifoParam+0x70>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003da7 	.word	0x08003da7
 8003d98:	08003da1 	.word	0x08003da1
 8003d9c:	08003db9 	.word	0x08003db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      break;
 8003da4:	e030      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d025      	beq.n	8003dfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db6:	e022      	b.n	8003dfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dc0:	d11f      	bne.n	8003e02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc6:	e01c      	b.n	8003e02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d903      	bls.n	8003dd6 <DMA_CheckFifoParam+0xb6>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d003      	beq.n	8003ddc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dd4:	e018      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dda:	e015      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00e      	beq.n	8003e06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      break;
 8003dec:	e00b      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      break;
 8003dee:	bf00      	nop
 8003df0:	e00a      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003df2:	bf00      	nop
 8003df4:	e008      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003df6:	bf00      	nop
 8003df8:	e006      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e004      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003e06:	bf00      	nop
    }
  }

  return status;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop

08003e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b089      	sub	sp, #36	; 0x24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e159      	b.n	80040e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e34:	2201      	movs	r2, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	f040 8148 	bne.w	80040e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d005      	beq.n	8003e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d130      	bne.n	8003ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	2203      	movs	r2, #3
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 0201 	and.w	r2, r3, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d017      	beq.n	8003f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d123      	bne.n	8003f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	220f      	movs	r2, #15
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	08da      	lsrs	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3208      	adds	r2, #8
 8003f56:	69b9      	ldr	r1, [r7, #24]
 8003f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2203      	movs	r2, #3
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0203 	and.w	r2, r3, #3
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a2 	beq.w	80040e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	4b57      	ldr	r3, [pc, #348]	; (8004100 <HAL_GPIO_Init+0x2e8>)
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	4a56      	ldr	r2, [pc, #344]	; (8004100 <HAL_GPIO_Init+0x2e8>)
 8003fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fac:	6453      	str	r3, [r2, #68]	; 0x44
 8003fae:	4b54      	ldr	r3, [pc, #336]	; (8004100 <HAL_GPIO_Init+0x2e8>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fba:	4a52      	ldr	r2, [pc, #328]	; (8004104 <HAL_GPIO_Init+0x2ec>)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	220f      	movs	r2, #15
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a49      	ldr	r2, [pc, #292]	; (8004108 <HAL_GPIO_Init+0x2f0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d019      	beq.n	800401a <HAL_GPIO_Init+0x202>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a48      	ldr	r2, [pc, #288]	; (800410c <HAL_GPIO_Init+0x2f4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_GPIO_Init+0x1fe>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a47      	ldr	r2, [pc, #284]	; (8004110 <HAL_GPIO_Init+0x2f8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00d      	beq.n	8004012 <HAL_GPIO_Init+0x1fa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a46      	ldr	r2, [pc, #280]	; (8004114 <HAL_GPIO_Init+0x2fc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d007      	beq.n	800400e <HAL_GPIO_Init+0x1f6>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a45      	ldr	r2, [pc, #276]	; (8004118 <HAL_GPIO_Init+0x300>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <HAL_GPIO_Init+0x1f2>
 8004006:	2304      	movs	r3, #4
 8004008:	e008      	b.n	800401c <HAL_GPIO_Init+0x204>
 800400a:	2307      	movs	r3, #7
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x204>
 800400e:	2303      	movs	r3, #3
 8004010:	e004      	b.n	800401c <HAL_GPIO_Init+0x204>
 8004012:	2302      	movs	r3, #2
 8004014:	e002      	b.n	800401c <HAL_GPIO_Init+0x204>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_GPIO_Init+0x204>
 800401a:	2300      	movs	r3, #0
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f002 0203 	and.w	r2, r2, #3
 8004022:	0092      	lsls	r2, r2, #2
 8004024:	4093      	lsls	r3, r2
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402c:	4935      	ldr	r1, [pc, #212]	; (8004104 <HAL_GPIO_Init+0x2ec>)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_GPIO_Init+0x304>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405e:	4a2f      	ldr	r2, [pc, #188]	; (800411c <HAL_GPIO_Init+0x304>)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004064:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_GPIO_Init+0x304>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004088:	4a24      	ldr	r2, [pc, #144]	; (800411c <HAL_GPIO_Init+0x304>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800408e:	4b23      	ldr	r3, [pc, #140]	; (800411c <HAL_GPIO_Init+0x304>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b2:	4a1a      	ldr	r2, [pc, #104]	; (800411c <HAL_GPIO_Init+0x304>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <HAL_GPIO_Init+0x304>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040dc:	4a0f      	ldr	r2, [pc, #60]	; (800411c <HAL_GPIO_Init+0x304>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	f67f aea2 	bls.w	8003e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	40013800 	.word	0x40013800
 8004108:	40020000 	.word	0x40020000
 800410c:	40020400 	.word	0x40020400
 8004110:	40020800 	.word	0x40020800
 8004114:	40020c00 	.word	0x40020c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40013c00 	.word	0x40013c00

08004120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	887b      	ldrh	r3, [r7, #2]
 8004132:	4013      	ands	r3, r2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	e001      	b.n	8004142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
 800415c:	4613      	mov	r3, r2
 800415e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004160:	787b      	ldrb	r3, [r7, #1]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004166:	887a      	ldrh	r2, [r7, #2]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800416c:	e003      	b.n	8004176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800416e:	887b      	ldrh	r3, [r7, #2]
 8004170:	041a      	lsls	r2, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	619a      	str	r2, [r3, #24]
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e12b      	b.n	80043ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fd fd72 	bl	8001c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2224      	movs	r2, #36	; 0x24
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041e8:	f002 fe38 	bl	8006e5c <HAL_RCC_GetPCLK1Freq>
 80041ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4a81      	ldr	r2, [pc, #516]	; (80043f8 <HAL_I2C_Init+0x274>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d807      	bhi.n	8004208 <HAL_I2C_Init+0x84>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a80      	ldr	r2, [pc, #512]	; (80043fc <HAL_I2C_Init+0x278>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	bf94      	ite	ls
 8004200:	2301      	movls	r3, #1
 8004202:	2300      	movhi	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e006      	b.n	8004216 <HAL_I2C_Init+0x92>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a7d      	ldr	r2, [pc, #500]	; (8004400 <HAL_I2C_Init+0x27c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	bf94      	ite	ls
 8004210:	2301      	movls	r3, #1
 8004212:	2300      	movhi	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0e7      	b.n	80043ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a78      	ldr	r2, [pc, #480]	; (8004404 <HAL_I2C_Init+0x280>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	0c9b      	lsrs	r3, r3, #18
 8004228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a6a      	ldr	r2, [pc, #424]	; (80043f8 <HAL_I2C_Init+0x274>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d802      	bhi.n	8004258 <HAL_I2C_Init+0xd4>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	3301      	adds	r3, #1
 8004256:	e009      	b.n	800426c <HAL_I2C_Init+0xe8>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	4a69      	ldr	r2, [pc, #420]	; (8004408 <HAL_I2C_Init+0x284>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	3301      	adds	r3, #1
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	430b      	orrs	r3, r1
 8004272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800427e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	495c      	ldr	r1, [pc, #368]	; (80043f8 <HAL_I2C_Init+0x274>)
 8004288:	428b      	cmp	r3, r1
 800428a:	d819      	bhi.n	80042c0 <HAL_I2C_Init+0x13c>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1e59      	subs	r1, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	fbb1 f3f3 	udiv	r3, r1, r3
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042a0:	400b      	ands	r3, r1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_I2C_Init+0x138>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1e59      	subs	r1, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ba:	e051      	b.n	8004360 <HAL_I2C_Init+0x1dc>
 80042bc:	2304      	movs	r3, #4
 80042be:	e04f      	b.n	8004360 <HAL_I2C_Init+0x1dc>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d111      	bne.n	80042ec <HAL_I2C_Init+0x168>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1e58      	subs	r0, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	440b      	add	r3, r1
 80042d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042da:	3301      	adds	r3, #1
 80042dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e012      	b.n	8004312 <HAL_I2C_Init+0x18e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1e58      	subs	r0, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	0099      	lsls	r1, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004302:	3301      	adds	r3, #1
 8004304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_I2C_Init+0x196>
 8004316:	2301      	movs	r3, #1
 8004318:	e022      	b.n	8004360 <HAL_I2C_Init+0x1dc>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10e      	bne.n	8004340 <HAL_I2C_Init+0x1bc>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1e58      	subs	r0, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	440b      	add	r3, r1
 8004330:	fbb0 f3f3 	udiv	r3, r0, r3
 8004334:	3301      	adds	r3, #1
 8004336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433e:	e00f      	b.n	8004360 <HAL_I2C_Init+0x1dc>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1e58      	subs	r0, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	0099      	lsls	r1, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	fbb0 f3f3 	udiv	r3, r0, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	6809      	ldr	r1, [r1, #0]
 8004364:	4313      	orrs	r3, r2
 8004366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800438e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6911      	ldr	r1, [r2, #16]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68d2      	ldr	r2, [r2, #12]
 800439a:	4311      	orrs	r1, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	000186a0 	.word	0x000186a0
 80043fc:	001e847f 	.word	0x001e847f
 8004400:	003d08ff 	.word	0x003d08ff
 8004404:	431bde83 	.word	0x431bde83
 8004408:	10624dd3 	.word	0x10624dd3

0800440c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	461a      	mov	r2, r3
 800441a:	4603      	mov	r3, r0
 800441c:	817b      	strh	r3, [r7, #10]
 800441e:	460b      	mov	r3, r1
 8004420:	813b      	strh	r3, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004426:	f7fe fe07 	bl	8003038 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b20      	cmp	r3, #32
 8004436:	f040 80d9 	bne.w	80045ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2319      	movs	r3, #25
 8004440:	2201      	movs	r2, #1
 8004442:	496d      	ldr	r1, [pc, #436]	; (80045f8 <HAL_I2C_Mem_Write+0x1ec>)
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fc7f 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
 8004452:	e0cc      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_I2C_Mem_Write+0x56>
 800445e:	2302      	movs	r3, #2
 8004460:	e0c5      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d007      	beq.n	8004488 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004496:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2221      	movs	r2, #33	; 0x21
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a3a      	ldr	r2, [r7, #32]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a4d      	ldr	r2, [pc, #308]	; (80045fc <HAL_I2C_Mem_Write+0x1f0>)
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ca:	88f8      	ldrh	r0, [r7, #6]
 80044cc:	893a      	ldrh	r2, [r7, #8]
 80044ce:	8979      	ldrh	r1, [r7, #10]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	4603      	mov	r3, r0
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fab6 	bl	8004a4c <I2C_RequestMemoryWrite>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d052      	beq.n	800458c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e081      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fd00 	bl	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d107      	bne.n	8004512 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004510:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e06b      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b04      	cmp	r3, #4
 8004552:	d11b      	bne.n	800458c <HAL_I2C_Mem_Write+0x180>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d017      	beq.n	800458c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1aa      	bne.n	80044ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fcec 	bl	8004f76 <I2C_WaitOnBTFFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00d      	beq.n	80045c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d107      	bne.n	80045bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e016      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	00100002 	.word	0x00100002
 80045fc:	ffff0000 	.word	0xffff0000

08004600 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	; 0x30
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	461a      	mov	r2, r3
 800460e:	4603      	mov	r3, r0
 8004610:	817b      	strh	r3, [r7, #10]
 8004612:	460b      	mov	r3, r1
 8004614:	813b      	strh	r3, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800461a:	f7fe fd0d 	bl	8003038 <HAL_GetTick>
 800461e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	f040 8208 	bne.w	8004a3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2319      	movs	r3, #25
 8004634:	2201      	movs	r2, #1
 8004636:	497b      	ldr	r1, [pc, #492]	; (8004824 <HAL_I2C_Mem_Read+0x224>)
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fb85 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
 8004646:	e1fb      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_I2C_Mem_Read+0x56>
 8004652:	2302      	movs	r3, #2
 8004654:	e1f4      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d007      	beq.n	800467c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2222      	movs	r2, #34	; 0x22
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2240      	movs	r2, #64	; 0x40
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a5b      	ldr	r2, [pc, #364]	; (8004828 <HAL_I2C_Mem_Read+0x228>)
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046be:	88f8      	ldrh	r0, [r7, #6]
 80046c0:	893a      	ldrh	r2, [r7, #8]
 80046c2:	8979      	ldrh	r1, [r7, #10]
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fa52 	bl	8004b78 <I2C_RequestMemoryRead>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e1b0      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d113      	bne.n	800470e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e6:	2300      	movs	r3, #0
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	623b      	str	r3, [r7, #32]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e184      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	2b01      	cmp	r3, #1
 8004714:	d11b      	bne.n	800474e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004724:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e164      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	2b02      	cmp	r3, #2
 8004754:	d11b      	bne.n	800478e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004764:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004774:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	e144      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047a4:	e138      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	f200 80f1 	bhi.w	8004992 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d123      	bne.n	8004800 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fc1b 	bl	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e139      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047fe:	e10b      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	2b02      	cmp	r3, #2
 8004806:	d14e      	bne.n	80048a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	2200      	movs	r2, #0
 8004810:	4906      	ldr	r1, [pc, #24]	; (800482c <HAL_I2C_Mem_Read+0x22c>)
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fa98 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e10e      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
 8004822:	bf00      	nop
 8004824:	00100002 	.word	0x00100002
 8004828:	ffff0000 	.word	0xffff0000
 800482c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048a4:	e0b8      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	2200      	movs	r2, #0
 80048ae:	4966      	ldr	r1, [pc, #408]	; (8004a48 <HAL_I2C_Mem_Read+0x448>)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 fa49 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0bf      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	2200      	movs	r2, #0
 800490a:	494f      	ldr	r1, [pc, #316]	; (8004a48 <HAL_I2C_Mem_Read+0x448>)
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fa1b 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e091      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004990:	e042      	b.n	8004a18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fb2e 	bl	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e04c      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d118      	bne.n	8004a18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f47f aec2 	bne.w	80047a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	00010004 	.word	0x00010004

08004a4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	817b      	strh	r3, [r7, #10]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	813b      	strh	r3, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f960 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9c:	d103      	bne.n	8004aa6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e05f      	b.n	8004b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ab8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	492d      	ldr	r1, [pc, #180]	; (8004b74 <I2C_RequestMemoryWrite+0x128>)
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f998 	bl	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e04c      	b.n	8004b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae8:	6a39      	ldr	r1, [r7, #32]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa02 	bl	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00d      	beq.n	8004b12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d107      	bne.n	8004b0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e02b      	b.n	8004b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	611a      	str	r2, [r3, #16]
 8004b22:	e021      	b.n	8004b68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	6a39      	ldr	r1, [r7, #32]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f9dc 	bl	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e005      	b.n	8004b6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5e:	893b      	ldrh	r3, [r7, #8]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	00010002 	.word	0x00010002

08004b78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	817b      	strh	r3, [r7, #10]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	813b      	strh	r3, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ba0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f8c2 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd8:	d103      	bne.n	8004be2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0aa      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004be6:	897b      	ldrh	r3, [r7, #10]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	6a3a      	ldr	r2, [r7, #32]
 8004bfa:	4952      	ldr	r1, [pc, #328]	; (8004d44 <I2C_RequestMemoryRead+0x1cc>)
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f8fa 	bl	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e097      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c24:	6a39      	ldr	r1, [r7, #32]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f964 	bl	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d107      	bne.n	8004c4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e076      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c54:	893b      	ldrh	r3, [r7, #8]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	611a      	str	r2, [r3, #16]
 8004c5e:	e021      	b.n	8004ca4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c60:	893b      	ldrh	r3, [r7, #8]
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	6a39      	ldr	r1, [r7, #32]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f93e 	bl	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d107      	bne.n	8004c96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e050      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c9a:	893b      	ldrh	r3, [r7, #8]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	6a39      	ldr	r1, [r7, #32]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f923 	bl	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d107      	bne.n	8004ccc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e035      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f82b 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00d      	beq.n	8004d14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d06:	d103      	bne.n	8004d10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e013      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d14:	897b      	ldrh	r3, [r7, #10]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	4906      	ldr	r1, [pc, #24]	; (8004d44 <I2C_RequestMemoryRead+0x1cc>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f863 	bl	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	00010002 	.word	0x00010002

08004d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d58:	e025      	b.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d60:	d021      	beq.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d62:	f7fe f969 	bl	8003038 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d116      	bne.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e023      	b.n	8004dee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d10d      	bne.n	8004dcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	43da      	mvns	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	e00c      	b.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bf0c      	ite	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	2300      	movne	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d0b6      	beq.n	8004d5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e04:	e051      	b.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e14:	d123      	bne.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f043 0204 	orr.w	r2, r3, #4
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e046      	b.n	8004eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e64:	d021      	beq.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e66:	f7fe f8e7 	bl	8003038 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d116      	bne.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e020      	b.n	8004eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10c      	bne.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	e00b      	b.n	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	43da      	mvns	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf14      	ite	ne
 8004ee0:	2301      	movne	r3, #1
 8004ee2:	2300      	moveq	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d18d      	bne.n	8004e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f00:	e02d      	b.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f8ce 	bl	80050a4 <I2C_IsAcknowledgeFailed>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e02d      	b.n	8004f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f18:	d021      	beq.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fe f88d 	bl	8003038 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d116      	bne.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e007      	b.n	8004f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	2b80      	cmp	r3, #128	; 0x80
 8004f6a:	d1ca      	bne.n	8004f02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f82:	e02d      	b.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f88d 	bl	80050a4 <I2C_IsAcknowledgeFailed>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e02d      	b.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9a:	d021      	beq.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9c:	f7fe f84c 	bl	8003038 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d116      	bne.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e007      	b.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d1ca      	bne.n	8004f84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005004:	e042      	b.n	800508c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b10      	cmp	r3, #16
 8005012:	d119      	bne.n	8005048 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0210 	mvn.w	r2, #16
 800501c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e029      	b.n	800509c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005048:	f7fd fff6 	bl	8003038 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d116      	bne.n	800508c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	f043 0220 	orr.w	r2, r3, #32
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e007      	b.n	800509c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d1b5      	bne.n	8005006 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ba:	d11b      	bne.n	80050f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	f043 0204 	orr.w	r2, r3, #4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005104:	b08f      	sub	sp, #60	; 0x3c
 8005106:	af0a      	add	r7, sp, #40	; 0x28
 8005108:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e10f      	b.n	8005334 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f009 fb24 	bl	800e77c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2203      	movs	r2, #3
 8005138:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f003 f95f 	bl	8008416 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	687e      	ldr	r6, [r7, #4]
 8005160:	466d      	mov	r5, sp
 8005162:	f106 0410 	add.w	r4, r6, #16
 8005166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800516a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800516c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800516e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005172:	e885 0003 	stmia.w	r5, {r0, r1}
 8005176:	1d33      	adds	r3, r6, #4
 8005178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800517a:	6838      	ldr	r0, [r7, #0]
 800517c:	f003 f836 	bl	80081ec <USB_CoreInit>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e0d0      	b.n	8005334 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f003 f94d 	bl	8008438 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]
 80051a2:	e04a      	b.n	800523a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	333d      	adds	r3, #61	; 0x3d
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051b8:	7bfa      	ldrb	r2, [r7, #15]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	333c      	adds	r3, #60	; 0x3c
 80051c8:	7bfa      	ldrb	r2, [r7, #15]
 80051ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	b298      	uxth	r0, r3
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	3344      	adds	r3, #68	; 0x44
 80051e0:	4602      	mov	r2, r0
 80051e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051e4:	7bfa      	ldrb	r2, [r7, #15]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	3340      	adds	r3, #64	; 0x40
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051f8:	7bfa      	ldrb	r2, [r7, #15]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3348      	adds	r3, #72	; 0x48
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800520c:	7bfa      	ldrb	r2, [r7, #15]
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	334c      	adds	r3, #76	; 0x4c
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005220:	7bfa      	ldrb	r2, [r7, #15]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	3354      	adds	r3, #84	; 0x54
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	3301      	adds	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d3af      	bcc.n	80051a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005244:	2300      	movs	r3, #0
 8005246:	73fb      	strb	r3, [r7, #15]
 8005248:	e044      	b.n	80052d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800524a:	7bfa      	ldrb	r2, [r7, #15]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	3301      	adds	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
 80052d4:	7bfa      	ldrb	r2, [r7, #15]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d3b5      	bcc.n	800524a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	687e      	ldr	r6, [r7, #4]
 80052e6:	466d      	mov	r5, sp
 80052e8:	f106 0410 	add.w	r4, r6, #16
 80052ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80052fc:	1d33      	adds	r3, r6, #4
 80052fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005300:	6838      	ldr	r0, [r7, #0]
 8005302:	f003 f8e5 	bl	80084d0 <USB_DevInit>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e00d      	b.n	8005334 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4618      	mov	r0, r3
 800532e:	f004 fa34 	bl	800979a <USB_DevDisconnect>

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800533c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_PCD_Start+0x1c>
 8005354:	2302      	movs	r3, #2
 8005356:	e020      	b.n	800539a <HAL_PCD_Start+0x5e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	2b01      	cmp	r3, #1
 8005366:	d109      	bne.n	800537c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800536c:	2b01      	cmp	r3, #1
 800536e:	d005      	beq.n	800537c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f003 f837 	bl	80083f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f004 f9e4 	bl	8009758 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053a2:	b590      	push	{r4, r7, lr}
 80053a4:	b08d      	sub	sp, #52	; 0x34
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f004 faa2 	bl	8009902 <USB_GetMode>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f040 848a 	bne.w	8005cda <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f004 fa06 	bl	80097dc <USB_ReadInterrupts>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8480 	beq.w	8005cd8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	0a1b      	lsrs	r3, r3, #8
 80053e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f004 f9f3 	bl	80097dc <USB_ReadInterrupts>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d107      	bne.n	8005410 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f002 0202 	and.w	r2, r2, #2
 800540e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f004 f9e1 	bl	80097dc <USB_ReadInterrupts>
 800541a:	4603      	mov	r3, r0
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b10      	cmp	r3, #16
 8005422:	d161      	bne.n	80054e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0210 	bic.w	r2, r2, #16
 8005432:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f003 020f 	and.w	r2, r3, #15
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4413      	add	r3, r2
 8005450:	3304      	adds	r3, #4
 8005452:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	0c5b      	lsrs	r3, r3, #17
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	2b02      	cmp	r3, #2
 800545e:	d124      	bne.n	80054aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d035      	beq.n	80054d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	6a38      	ldr	r0, [r7, #32]
 8005480:	f004 f818 	bl	80094b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005490:	441a      	add	r2, r3
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	6a1a      	ldr	r2, [r3, #32]
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054a2:	441a      	add	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	621a      	str	r2, [r3, #32]
 80054a8:	e016      	b.n	80054d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	0c5b      	lsrs	r3, r3, #17
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	2b06      	cmp	r3, #6
 80054b4:	d110      	bne.n	80054d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054bc:	2208      	movs	r2, #8
 80054be:	4619      	mov	r1, r3
 80054c0:	6a38      	ldr	r0, [r7, #32]
 80054c2:	f003 fff7 	bl	80094b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	6a1a      	ldr	r2, [r3, #32]
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054d2:	441a      	add	r2, r3
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0210 	orr.w	r2, r2, #16
 80054e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f004 f975 	bl	80097dc <USB_ReadInterrupts>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054fc:	f040 80a7 	bne.w	800564e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f004 f97a 	bl	8009802 <USB_ReadDevAllOutEpInterrupt>
 800550e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005510:	e099      	b.n	8005646 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 808e 	beq.w	800563a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f004 f99e 	bl	800986a <USB_ReadDevOutEPInterrupt>
 800552e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00c      	beq.n	8005554 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	461a      	mov	r2, r3
 8005548:	2301      	movs	r3, #1
 800554a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800554c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fec2 	bl	80062d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	2308      	movs	r3, #8
 800556e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 ff98 	bl	80064a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	461a      	mov	r2, r3
 8005590:	2310      	movs	r3, #16
 8005592:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d030      	beq.n	8005600 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d109      	bne.n	80055be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80055be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	4413      	add	r3, r2
 80055d0:	3304      	adds	r3, #4
 80055d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	78db      	ldrb	r3, [r3, #3]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d108      	bne.n	80055ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2200      	movs	r2, #0
 80055e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f009 f9c3 	bl	800e974 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	461a      	mov	r2, r3
 80055fc:	2302      	movs	r3, #2
 80055fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005616:	461a      	mov	r2, r3
 8005618:	2320      	movs	r3, #32
 800561a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005638:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	3301      	adds	r3, #1
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	2b00      	cmp	r3, #0
 800564a:	f47f af62 	bne.w	8005512 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f004 f8c2 	bl	80097dc <USB_ReadInterrupts>
 8005658:	4603      	mov	r3, r0
 800565a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800565e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005662:	f040 80db 	bne.w	800581c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f004 f8e3 	bl	8009836 <USB_ReadDevAllInEpInterrupt>
 8005670:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005676:	e0cd      	b.n	8005814 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80c2 	beq.w	8005808 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f004 f909 	bl	80098a6 <USB_ReadDevInEPInterrupt>
 8005694:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d057      	beq.n	8005750 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	2201      	movs	r2, #1
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	43db      	mvns	r3, r3
 80056ba:	69f9      	ldr	r1, [r7, #28]
 80056bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c0:	4013      	ands	r3, r2
 80056c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d0:	461a      	mov	r2, r3
 80056d2:	2301      	movs	r3, #1
 80056d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d132      	bne.n	8005744 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e2:	4613      	mov	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	334c      	adds	r3, #76	; 0x4c
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4403      	add	r3, r0
 80056fe:	3348      	adds	r3, #72	; 0x48
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4419      	add	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4403      	add	r3, r0
 8005712:	334c      	adds	r3, #76	; 0x4c
 8005714:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	d113      	bne.n	8005744 <HAL_PCD_IRQHandler+0x3a2>
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	3354      	adds	r3, #84	; 0x54
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d108      	bne.n	8005744 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800573c:	461a      	mov	r2, r3
 800573e:	2101      	movs	r1, #1
 8005740:	f004 f910 	bl	8009964 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	b2db      	uxtb	r3, r3
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f009 f897 	bl	800e87e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005766:	461a      	mov	r2, r3
 8005768:	2308      	movs	r3, #8
 800576a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	461a      	mov	r2, r3
 8005784:	2310      	movs	r3, #16
 8005786:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	461a      	mov	r2, r3
 80057a0:	2340      	movs	r3, #64	; 0x40
 80057a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d023      	beq.n	80057f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80057ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057b0:	6a38      	ldr	r0, [r7, #32]
 80057b2:	f002 fff1 	bl	8008798 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	4613      	mov	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	3338      	adds	r3, #56	; 0x38
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	4413      	add	r3, r2
 80057c6:	3304      	adds	r3, #4
 80057c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	78db      	ldrb	r3, [r3, #3]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d108      	bne.n	80057e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f009 f8da 	bl	800e998 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	461a      	mov	r2, r3
 80057f2:	2302      	movs	r3, #2
 80057f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fcdb 	bl	80061be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	3301      	adds	r3, #1
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	085b      	lsrs	r3, r3, #1
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	f47f af2e 	bne.w	8005678 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f003 ffdb 	bl	80097dc <USB_ReadInterrupts>
 8005826:	4603      	mov	r3, r0
 8005828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800582c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005830:	d122      	bne.n	8005878 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800584c:	2b01      	cmp	r3, #1
 800584e:	d108      	bne.n	8005862 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005858:	2100      	movs	r1, #0
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fec2 	bl	80065e4 <HAL_PCDEx_LPM_Callback>
 8005860:	e002      	b.n	8005868 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f009 f878 	bl	800e958 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f003 ffad 	bl	80097dc <USB_ReadInterrupts>
 8005882:	4603      	mov	r3, r0
 8005884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588c:	d112      	bne.n	80058b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b01      	cmp	r3, #1
 800589c:	d102      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f009 f834 	bl	800e90c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80058b2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f003 ff8f 	bl	80097dc <USB_ReadInterrupts>
 80058be:	4603      	mov	r3, r0
 80058c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c8:	f040 80b7 	bne.w	8005a3a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2110      	movs	r1, #16
 80058e6:	4618      	mov	r0, r3
 80058e8:	f002 ff56 	bl	8008798 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ec:	2300      	movs	r3, #0
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f0:	e046      	b.n	8005980 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	461a      	mov	r2, r3
 8005900:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005904:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005920:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005924:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	461a      	mov	r2, r3
 8005934:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005938:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005958:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005974:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005978:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	3301      	adds	r3, #1
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005986:	429a      	cmp	r2, r3
 8005988:	d3b3      	bcc.n	80058f2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005998:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800599c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d016      	beq.n	80059d4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b6:	f043 030b 	orr.w	r3, r3, #11
 80059ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059cc:	f043 030b 	orr.w	r3, r3, #11
 80059d0:	6453      	str	r3, [r2, #68]	; 0x44
 80059d2:	e015      	b.n	8005a00 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80059e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80059ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059fa:	f043 030b 	orr.w	r3, r3, #11
 80059fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a12:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a24:	461a      	mov	r2, r3
 8005a26:	f003 ff9d 	bl	8009964 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695a      	ldr	r2, [r3, #20]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f003 fecc 	bl	80097dc <USB_ReadInterrupts>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4e:	d124      	bne.n	8005a9a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f003 ff62 	bl	800991e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f002 ff17 	bl	8008892 <USB_GetDevSpeed>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681c      	ldr	r4, [r3, #0]
 8005a70:	f001 f9e8 	bl	8006e44 <HAL_RCC_GetHCLKFreq>
 8005a74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f002 fc16 	bl	80082b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f008 ff22 	bl	800e8ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695a      	ldr	r2, [r3, #20]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f003 fe9c 	bl	80097dc <USB_ReadInterrupts>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d10a      	bne.n	8005ac4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f008 feff 	bl	800e8b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f002 0208 	and.w	r2, r2, #8
 8005ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f003 fe87 	bl	80097dc <USB_ReadInterrupts>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b80      	cmp	r3, #128	; 0x80
 8005ad6:	d122      	bne.n	8005b1e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae8:	e014      	b.n	8005b14 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d105      	bne.n	8005b0e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fb27 	bl	800615c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3e5      	bcc.n	8005aea <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f003 fe5a 	bl	80097dc <USB_ReadInterrupts>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b32:	d13b      	bne.n	8005bac <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b34:	2301      	movs	r3, #1
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
 8005b38:	e02b      	b.n	8005b92 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4e:	4613      	mov	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	3340      	adds	r3, #64	; 0x40
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d115      	bne.n	8005b8c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005b60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	da12      	bge.n	8005b8c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	333f      	adds	r3, #63	; 0x3f
 8005b76:	2201      	movs	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fae8 	bl	800615c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	3301      	adds	r3, #1
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d3ce      	bcc.n	8005b3a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f003 fe13 	bl	80097dc <USB_ReadInterrupts>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bc0:	d155      	bne.n	8005c6e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc6:	e045      	b.n	8005c54 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bdc:	4613      	mov	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d12e      	bne.n	8005c4e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005bf0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	da2b      	bge.n	8005c4e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005c02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d121      	bne.n	8005c4e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	4613      	mov	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	440b      	add	r3, r1
 8005c18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c4a:	6053      	str	r3, [r2, #4]
            break;
 8005c4c:	e007      	b.n	8005c5e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	3301      	adds	r3, #1
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d3b4      	bcc.n	8005bc8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695a      	ldr	r2, [r3, #20]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f003 fdb2 	bl	80097dc <USB_ReadInterrupts>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c82:	d10a      	bne.n	8005c9a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f008 fe99 	bl	800e9bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f003 fd9c 	bl	80097dc <USB_ReadInterrupts>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d115      	bne.n	8005cda <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f008 fe89 	bl	800e9d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6859      	ldr	r1, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	e000      	b.n	8005cda <HAL_PCD_IRQHandler+0x938>
      return;
 8005cd8:	bf00      	nop
    }
  }
}
 8005cda:	3734      	adds	r7, #52	; 0x34
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd90      	pop	{r4, r7, pc}

08005ce0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_PCD_SetAddress+0x1a>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e013      	b.n	8005d22 <HAL_PCD_SetAddress+0x42>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	78fa      	ldrb	r2, [r7, #3]
 8005d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	78fa      	ldrb	r2, [r7, #3]
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f003 fcfa 	bl	800970c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	461a      	mov	r2, r3
 8005d38:	4603      	mov	r3, r0
 8005d3a:	70fb      	strb	r3, [r7, #3]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	803b      	strh	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da0f      	bge.n	8005d70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	f003 020f 	and.w	r2, r3, #15
 8005d56:	4613      	mov	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	3338      	adds	r3, #56	; 0x38
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	3304      	adds	r3, #4
 8005d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	705a      	strb	r2, [r3, #1]
 8005d6e:	e00f      	b.n	8005d90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	f003 020f 	and.w	r2, r3, #15
 8005d76:	4613      	mov	r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	3304      	adds	r3, #4
 8005d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d9c:	883a      	ldrh	r2, [r7, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	78ba      	ldrb	r2, [r7, #2]
 8005da6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005dba:	78bb      	ldrb	r3, [r7, #2]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d102      	bne.n	8005dc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_PCD_EP_Open+0xaa>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e00e      	b.n	8005df2 <HAL_PCD_EP_Open+0xc8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f002 fd7a 	bl	80088dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005df0:	7afb      	ldrb	r3, [r7, #11]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da0f      	bge.n	8005e2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	f003 020f 	and.w	r2, r3, #15
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	3338      	adds	r3, #56	; 0x38
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	3304      	adds	r3, #4
 8005e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	705a      	strb	r2, [r3, #1]
 8005e2c:	e00f      	b.n	8005e4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	f003 020f 	and.w	r2, r3, #15
 8005e34:	4613      	mov	r3, r2
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	3304      	adds	r3, #4
 8005e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_PCD_EP_Close+0x6e>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e00e      	b.n	8005e86 <HAL_PCD_EP_Close+0x8c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68f9      	ldr	r1, [r7, #12]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f002 fdb8 	bl	80089ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e9e:	7afb      	ldrb	r3, [r7, #11]
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ed0:	7afb      	ldrb	r3, [r7, #11]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d102      	bne.n	8005eea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005eea:	7afb      	ldrb	r3, [r7, #11]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d109      	bne.n	8005f08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	6979      	ldr	r1, [r7, #20]
 8005f02:	f003 f897 	bl	8009034 <USB_EP0StartXfer>
 8005f06:	e008      	b.n	8005f1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	6979      	ldr	r1, [r7, #20]
 8005f16:	f002 fe45 	bl	8008ba4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	f003 020f 	and.w	r2, r3, #15
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005f46:	681b      	ldr	r3, [r3, #0]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	460b      	mov	r3, r1
 8005f62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	f003 020f 	and.w	r2, r3, #15
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	3338      	adds	r3, #56	; 0x38
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	3304      	adds	r3, #4
 8005f7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2201      	movs	r2, #1
 8005f92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f94:	7afb      	ldrb	r3, [r7, #11]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d102      	bne.n	8005fae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fae:	7afb      	ldrb	r3, [r7, #11]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6979      	ldr	r1, [r7, #20]
 8005fc6:	f003 f835 	bl	8009034 <USB_EP0StartXfer>
 8005fca:	e008      	b.n	8005fde <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6979      	ldr	r1, [r7, #20]
 8005fda:	f002 fde3 	bl	8008ba4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	f003 020f 	and.w	r2, r3, #15
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d901      	bls.n	8006006 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e050      	b.n	80060a8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800600a:	2b00      	cmp	r3, #0
 800600c:	da0f      	bge.n	800602e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	f003 020f 	and.w	r2, r3, #15
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	3338      	adds	r3, #56	; 0x38
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	4413      	add	r3, r2
 8006022:	3304      	adds	r3, #4
 8006024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	705a      	strb	r2, [r3, #1]
 800602c:	e00d      	b.n	800604a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800602e:	78fa      	ldrb	r2, [r7, #3]
 8006030:	4613      	mov	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4413      	add	r3, r2
 8006040:	3304      	adds	r3, #4
 8006042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_PCD_EP_SetStall+0x82>
 8006066:	2302      	movs	r3, #2
 8006068:	e01e      	b.n	80060a8 <HAL_PCD_EP_SetStall+0xc0>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	4618      	mov	r0, r3
 800607a:	f003 fa73 	bl	8009564 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	b2d9      	uxtb	r1, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006098:	461a      	mov	r2, r3
 800609a:	f003 fc63 	bl	8009964 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	f003 020f 	and.w	r2, r3, #15
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d901      	bls.n	80060ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e042      	b.n	8006154 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da0f      	bge.n	80060f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	f003 020f 	and.w	r2, r3, #15
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	3338      	adds	r3, #56	; 0x38
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4413      	add	r3, r2
 80060ea:	3304      	adds	r3, #4
 80060ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	705a      	strb	r2, [r3, #1]
 80060f4:	e00f      	b.n	8006116 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	3304      	adds	r3, #4
 800610e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	b2da      	uxtb	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_PCD_EP_ClrStall+0x86>
 8006132:	2302      	movs	r3, #2
 8006134:	e00e      	b.n	8006154 <HAL_PCD_EP_ClrStall+0xa4>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	4618      	mov	r0, r3
 8006146:	f003 fa7b 	bl	8009640 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800616c:	2b00      	cmp	r3, #0
 800616e:	da0c      	bge.n	800618a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	f003 020f 	and.w	r2, r3, #15
 8006176:	4613      	mov	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	3338      	adds	r3, #56	; 0x38
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4413      	add	r3, r2
 8006184:	3304      	adds	r3, #4
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	e00c      	b.n	80061a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	f003 020f 	and.w	r2, r3, #15
 8006190:	4613      	mov	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	4413      	add	r3, r2
 80061a0:	3304      	adds	r3, #4
 80061a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68f9      	ldr	r1, [r7, #12]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f003 f89a 	bl	80092e4 <USB_EPStopXfer>
 80061b0:	4603      	mov	r3, r0
 80061b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80061b4:	7afb      	ldrb	r3, [r7, #11]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b08a      	sub	sp, #40	; 0x28
 80061c2:	af02      	add	r7, sp, #8
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	4413      	add	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	3338      	adds	r3, #56	; 0x38
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4413      	add	r3, r2
 80061e2:	3304      	adds	r3, #4
 80061e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1a      	ldr	r2, [r3, #32]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d901      	bls.n	80061f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e06c      	b.n	80062d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	429a      	cmp	r2, r3
 800620a:	d902      	bls.n	8006212 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	3303      	adds	r3, #3
 8006216:	089b      	lsrs	r3, r3, #2
 8006218:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800621a:	e02b      	b.n	8006274 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	699a      	ldr	r2, [r3, #24]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	429a      	cmp	r2, r3
 8006230:	d902      	bls.n	8006238 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3303      	adds	r3, #3
 800623c:	089b      	lsrs	r3, r3, #2
 800623e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6919      	ldr	r1, [r3, #16]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006250:	b2db      	uxtb	r3, r3
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	4603      	mov	r3, r0
 8006256:	6978      	ldr	r0, [r7, #20]
 8006258:	f003 f8ee 	bl	8009438 <USB_WritePacket>

    ep->xfer_buff  += len;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	441a      	add	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a1a      	ldr	r2, [r3, #32]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	441a      	add	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	429a      	cmp	r2, r3
 8006288:	d809      	bhi.n	800629e <PCD_WriteEmptyTxFifo+0xe0>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006292:	429a      	cmp	r2, r3
 8006294:	d203      	bcs.n	800629e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1be      	bne.n	800621c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d811      	bhi.n	80062ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	2201      	movs	r2, #1
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	43db      	mvns	r3, r3
 80062c4:	6939      	ldr	r1, [r7, #16]
 80062c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ca:	4013      	ands	r3, r2
 80062cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	333c      	adds	r3, #60	; 0x3c
 80062f0:	3304      	adds	r3, #4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d17b      	bne.n	8006406 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d015      	beq.n	8006344 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4a61      	ldr	r2, [pc, #388]	; (80064a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	f240 80b9 	bls.w	8006494 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80b3 	beq.w	8006494 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633a:	461a      	mov	r2, r3
 800633c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006340:	6093      	str	r3, [r2, #8]
 8006342:	e0a7      	b.n	8006494 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635a:	461a      	mov	r2, r3
 800635c:	2320      	movs	r3, #32
 800635e:	6093      	str	r3, [r2, #8]
 8006360:	e098      	b.n	8006494 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 8093 	bne.w	8006494 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	4a4b      	ldr	r2, [pc, #300]	; (80064a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d90f      	bls.n	8006396 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638c:	461a      	mov	r2, r3
 800638e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006392:	6093      	str	r3, [r2, #8]
 8006394:	e07e      	b.n	8006494 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	4413      	add	r3, r2
 80063a8:	3304      	adds	r3, #4
 80063aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	0159      	lsls	r1, r3, #5
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	440b      	add	r3, r1
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c2:	1ad2      	subs	r2, r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d114      	bne.n	80063f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063e0:	461a      	mov	r2, r3
 80063e2:	2101      	movs	r1, #1
 80063e4:	f003 fabe 	bl	8009964 <USB_EP0_OutStart>
 80063e8:	e006      	b.n	80063f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	441a      	add	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f008 fa22 	bl	800e848 <HAL_PCD_DataOutStageCallback>
 8006404:	e046      	b.n	8006494 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4a26      	ldr	r2, [pc, #152]	; (80064a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d124      	bne.n	8006458 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	461a      	mov	r2, r3
 8006426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642a:	6093      	str	r3, [r2, #8]
 800642c:	e032      	b.n	8006494 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	461a      	mov	r2, r3
 8006446:	2320      	movs	r3, #32
 8006448:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f008 f9f9 	bl	800e848 <HAL_PCD_DataOutStageCallback>
 8006456:	e01d      	b.n	8006494 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d114      	bne.n	8006488 <PCD_EP_OutXfrComplete_int+0x1b0>
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	4613      	mov	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	440b      	add	r3, r1
 800646c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d108      	bne.n	8006488 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006480:	461a      	mov	r2, r3
 8006482:	2100      	movs	r1, #0
 8006484:	f003 fa6e 	bl	8009964 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f008 f9da 	bl	800e848 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	4f54300a 	.word	0x4f54300a
 80064a4:	4f54310a 	.word	0x4f54310a

080064a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	333c      	adds	r3, #60	; 0x3c
 80064c0:	3304      	adds	r3, #4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a15      	ldr	r2, [pc, #84]	; (8006530 <PCD_EP_OutSetupPacket_int+0x88>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d90e      	bls.n	80064fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f4:	461a      	mov	r2, r3
 80064f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f008 f991 	bl	800e824 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4a0a      	ldr	r2, [pc, #40]	; (8006530 <PCD_EP_OutSetupPacket_int+0x88>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d90c      	bls.n	8006524 <PCD_EP_OutSetupPacket_int+0x7c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d108      	bne.n	8006524 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800651c:	461a      	mov	r2, r3
 800651e:	2101      	movs	r1, #1
 8006520:	f003 fa20 	bl	8009964 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	4f54300a 	.word	0x4f54300a

08006534 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
 8006540:	4613      	mov	r3, r2
 8006542:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d107      	bne.n	8006562 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006552:	883b      	ldrh	r3, [r7, #0]
 8006554:	0419      	lsls	r1, r3, #16
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	430a      	orrs	r2, r1
 800655e:	629a      	str	r2, [r3, #40]	; 0x28
 8006560:	e028      	b.n	80065b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	0c1b      	lsrs	r3, r3, #16
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4413      	add	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e00d      	b.n	8006592 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	3340      	adds	r3, #64	; 0x40
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	0c1b      	lsrs	r3, r3, #16
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	4413      	add	r3, r2
 800658a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	3301      	adds	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	7bfa      	ldrb	r2, [r7, #15]
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	3b01      	subs	r3, #1
 8006598:	429a      	cmp	r2, r3
 800659a:	d3ec      	bcc.n	8006576 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800659c:	883b      	ldrh	r3, [r7, #0]
 800659e:	0418      	lsls	r0, r3, #16
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6819      	ldr	r1, [r3, #0]
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	4302      	orrs	r2, r0
 80065ac:	3340      	adds	r3, #64	; 0x40
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	887a      	ldrh	r2, [r7, #2]
 80065d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e267      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d075      	beq.n	8006706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800661a:	4b88      	ldr	r3, [pc, #544]	; (800683c <HAL_RCC_OscConfig+0x240>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 030c 	and.w	r3, r3, #12
 8006622:	2b04      	cmp	r3, #4
 8006624:	d00c      	beq.n	8006640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006626:	4b85      	ldr	r3, [pc, #532]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800662e:	2b08      	cmp	r3, #8
 8006630:	d112      	bne.n	8006658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006632:	4b82      	ldr	r3, [pc, #520]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800663e:	d10b      	bne.n	8006658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006640:	4b7e      	ldr	r3, [pc, #504]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d05b      	beq.n	8006704 <HAL_RCC_OscConfig+0x108>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d157      	bne.n	8006704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e242      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006660:	d106      	bne.n	8006670 <HAL_RCC_OscConfig+0x74>
 8006662:	4b76      	ldr	r3, [pc, #472]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a75      	ldr	r2, [pc, #468]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e01d      	b.n	80066ac <HAL_RCC_OscConfig+0xb0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0x98>
 800667a:	4b70      	ldr	r3, [pc, #448]	; (800683c <HAL_RCC_OscConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a6f      	ldr	r2, [pc, #444]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	4b6d      	ldr	r3, [pc, #436]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a6c      	ldr	r2, [pc, #432]	; (800683c <HAL_RCC_OscConfig+0x240>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0xb0>
 8006694:	4b69      	ldr	r3, [pc, #420]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a68      	ldr	r2, [pc, #416]	; (800683c <HAL_RCC_OscConfig+0x240>)
 800669a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	4b66      	ldr	r3, [pc, #408]	; (800683c <HAL_RCC_OscConfig+0x240>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a65      	ldr	r2, [pc, #404]	; (800683c <HAL_RCC_OscConfig+0x240>)
 80066a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d013      	beq.n	80066dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fc fcc0 	bl	8003038 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066bc:	f7fc fcbc 	bl	8003038 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b64      	cmp	r3, #100	; 0x64
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e207      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ce:	4b5b      	ldr	r3, [pc, #364]	; (800683c <HAL_RCC_OscConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0xc0>
 80066da:	e014      	b.n	8006706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066dc:	f7fc fcac 	bl	8003038 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066e4:	f7fc fca8 	bl	8003038 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	; 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e1f3      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066f6:	4b51      	ldr	r3, [pc, #324]	; (800683c <HAL_RCC_OscConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f0      	bne.n	80066e4 <HAL_RCC_OscConfig+0xe8>
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d063      	beq.n	80067da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006712:	4b4a      	ldr	r3, [pc, #296]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800671e:	4b47      	ldr	r3, [pc, #284]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006726:	2b08      	cmp	r3, #8
 8006728:	d11c      	bne.n	8006764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800672a:	4b44      	ldr	r3, [pc, #272]	; (800683c <HAL_RCC_OscConfig+0x240>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d116      	bne.n	8006764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006736:	4b41      	ldr	r3, [pc, #260]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_RCC_OscConfig+0x152>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d001      	beq.n	800674e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e1c7      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800674e:	4b3b      	ldr	r3, [pc, #236]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	4937      	ldr	r1, [pc, #220]	; (800683c <HAL_RCC_OscConfig+0x240>)
 800675e:	4313      	orrs	r3, r2
 8006760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006762:	e03a      	b.n	80067da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d020      	beq.n	80067ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800676c:	4b34      	ldr	r3, [pc, #208]	; (8006840 <HAL_RCC_OscConfig+0x244>)
 800676e:	2201      	movs	r2, #1
 8006770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006772:	f7fc fc61 	bl	8003038 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800677a:	f7fc fc5d 	bl	8003038 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e1a8      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678c:	4b2b      	ldr	r3, [pc, #172]	; (800683c <HAL_RCC_OscConfig+0x240>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0f0      	beq.n	800677a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006798:	4b28      	ldr	r3, [pc, #160]	; (800683c <HAL_RCC_OscConfig+0x240>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4925      	ldr	r1, [pc, #148]	; (800683c <HAL_RCC_OscConfig+0x240>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]
 80067ac:	e015      	b.n	80067da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <HAL_RCC_OscConfig+0x244>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b4:	f7fc fc40 	bl	8003038 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067bc:	f7fc fc3c 	bl	8003038 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e187      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ce:	4b1b      	ldr	r3, [pc, #108]	; (800683c <HAL_RCC_OscConfig+0x240>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d036      	beq.n	8006854 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ee:	4b15      	ldr	r3, [pc, #84]	; (8006844 <HAL_RCC_OscConfig+0x248>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f4:	f7fc fc20 	bl	8003038 <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067fc:	f7fc fc1c 	bl	8003038 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e167      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <HAL_RCC_OscConfig+0x240>)
 8006810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0f0      	beq.n	80067fc <HAL_RCC_OscConfig+0x200>
 800681a:	e01b      	b.n	8006854 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <HAL_RCC_OscConfig+0x248>)
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006822:	f7fc fc09 	bl	8003038 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006828:	e00e      	b.n	8006848 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800682a:	f7fc fc05 	bl	8003038 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d907      	bls.n	8006848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e150      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
 800683c:	40023800 	.word	0x40023800
 8006840:	42470000 	.word	0x42470000
 8006844:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006848:	4b88      	ldr	r3, [pc, #544]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 800684a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1ea      	bne.n	800682a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8097 	beq.w	8006990 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006862:	2300      	movs	r3, #0
 8006864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006866:	4b81      	ldr	r3, [pc, #516]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10f      	bne.n	8006892 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	4b7d      	ldr	r3, [pc, #500]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	4a7c      	ldr	r2, [pc, #496]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 800687c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006880:	6413      	str	r3, [r2, #64]	; 0x40
 8006882:	4b7a      	ldr	r3, [pc, #488]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006892:	4b77      	ldr	r3, [pc, #476]	; (8006a70 <HAL_RCC_OscConfig+0x474>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d118      	bne.n	80068d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800689e:	4b74      	ldr	r3, [pc, #464]	; (8006a70 <HAL_RCC_OscConfig+0x474>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a73      	ldr	r2, [pc, #460]	; (8006a70 <HAL_RCC_OscConfig+0x474>)
 80068a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068aa:	f7fc fbc5 	bl	8003038 <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b2:	f7fc fbc1 	bl	8003038 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e10c      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c4:	4b6a      	ldr	r3, [pc, #424]	; (8006a70 <HAL_RCC_OscConfig+0x474>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d106      	bne.n	80068e6 <HAL_RCC_OscConfig+0x2ea>
 80068d8:	4b64      	ldr	r3, [pc, #400]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	4a63      	ldr	r2, [pc, #396]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6713      	str	r3, [r2, #112]	; 0x70
 80068e4:	e01c      	b.n	8006920 <HAL_RCC_OscConfig+0x324>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d10c      	bne.n	8006908 <HAL_RCC_OscConfig+0x30c>
 80068ee:	4b5f      	ldr	r3, [pc, #380]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	4a5e      	ldr	r2, [pc, #376]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068f4:	f043 0304 	orr.w	r3, r3, #4
 80068f8:	6713      	str	r3, [r2, #112]	; 0x70
 80068fa:	4b5c      	ldr	r3, [pc, #368]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fe:	4a5b      	ldr	r2, [pc, #364]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	6713      	str	r3, [r2, #112]	; 0x70
 8006906:	e00b      	b.n	8006920 <HAL_RCC_OscConfig+0x324>
 8006908:	4b58      	ldr	r3, [pc, #352]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	4a57      	ldr	r2, [pc, #348]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	6713      	str	r3, [r2, #112]	; 0x70
 8006914:	4b55      	ldr	r3, [pc, #340]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006918:	4a54      	ldr	r2, [pc, #336]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 800691a:	f023 0304 	bic.w	r3, r3, #4
 800691e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d015      	beq.n	8006954 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006928:	f7fc fb86 	bl	8003038 <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800692e:	e00a      	b.n	8006946 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006930:	f7fc fb82 	bl	8003038 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f241 3288 	movw	r2, #5000	; 0x1388
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e0cb      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006946:	4b49      	ldr	r3, [pc, #292]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0ee      	beq.n	8006930 <HAL_RCC_OscConfig+0x334>
 8006952:	e014      	b.n	800697e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006954:	f7fc fb70 	bl	8003038 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800695a:	e00a      	b.n	8006972 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800695c:	f7fc fb6c 	bl	8003038 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f241 3288 	movw	r2, #5000	; 0x1388
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e0b5      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006972:	4b3e      	ldr	r3, [pc, #248]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1ee      	bne.n	800695c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d105      	bne.n	8006990 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006984:	4b39      	ldr	r3, [pc, #228]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	4a38      	ldr	r2, [pc, #224]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 800698a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800698e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80a1 	beq.w	8006adc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800699a:	4b34      	ldr	r3, [pc, #208]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 030c 	and.w	r3, r3, #12
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d05c      	beq.n	8006a60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d141      	bne.n	8006a32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ae:	4b31      	ldr	r3, [pc, #196]	; (8006a74 <HAL_RCC_OscConfig+0x478>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b4:	f7fc fb40 	bl	8003038 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069bc:	f7fc fb3c 	bl	8003038 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e087      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ce:	4b27      	ldr	r3, [pc, #156]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	019b      	lsls	r3, r3, #6
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	3b01      	subs	r3, #1
 80069f4:	041b      	lsls	r3, r3, #16
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	061b      	lsls	r3, r3, #24
 80069fe:	491b      	ldr	r1, [pc, #108]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a04:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <HAL_RCC_OscConfig+0x478>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0a:	f7fc fb15 	bl	8003038 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a12:	f7fc fb11 	bl	8003038 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e05c      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a24:	4b11      	ldr	r3, [pc, #68]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x416>
 8006a30:	e054      	b.n	8006adc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a32:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <HAL_RCC_OscConfig+0x478>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a38:	f7fc fafe 	bl	8003038 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fc fafa 	bl	8003038 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e045      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x444>
 8006a5e:	e03d      	b.n	8006adc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d107      	bne.n	8006a78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e038      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	40007000 	.word	0x40007000
 8006a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a78:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <HAL_RCC_OscConfig+0x4ec>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d028      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d121      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d11a      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d111      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d001      	beq.n	8006adc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40023800 	.word	0x40023800

08006aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0cc      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b00:	4b68      	ldr	r3, [pc, #416]	; (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d90c      	bls.n	8006b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0e:	4b65      	ldr	r3, [pc, #404]	; (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b16:	4b63      	ldr	r3, [pc, #396]	; (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0b8      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d020      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b40:	4b59      	ldr	r3, [pc, #356]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	4a58      	ldr	r2, [pc, #352]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b58:	4b53      	ldr	r3, [pc, #332]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	4a52      	ldr	r2, [pc, #328]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b64:	4b50      	ldr	r3, [pc, #320]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	494d      	ldr	r1, [pc, #308]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d044      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8a:	4b47      	ldr	r3, [pc, #284]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d119      	bne.n	8006bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e07f      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d003      	beq.n	8006baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d107      	bne.n	8006bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006baa:	4b3f      	ldr	r3, [pc, #252]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e06f      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bba:	4b3b      	ldr	r3, [pc, #236]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e067      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bca:	4b37      	ldr	r3, [pc, #220]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f023 0203 	bic.w	r2, r3, #3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4934      	ldr	r1, [pc, #208]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bdc:	f7fc fa2c 	bl	8003038 <HAL_GetTick>
 8006be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be2:	e00a      	b.n	8006bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be4:	f7fc fa28 	bl	8003038 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e04f      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bfa:	4b2b      	ldr	r3, [pc, #172]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 020c 	and.w	r2, r3, #12
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d1eb      	bne.n	8006be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d20c      	bcs.n	8006c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1a:	4b22      	ldr	r3, [pc, #136]	; (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b20      	ldr	r3, [pc, #128]	; (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e032      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c40:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	4916      	ldr	r1, [pc, #88]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c5e:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	490e      	ldr	r1, [pc, #56]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c72:	f000 f821 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 8006c76:	4602      	mov	r2, r0
 8006c78:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	091b      	lsrs	r3, r3, #4
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	490a      	ldr	r1, [pc, #40]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006c84:	5ccb      	ldrb	r3, [r1, r3]
 8006c86:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8a:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c8e:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fc f98c 	bl	8002fb0 <HAL_InitTick>

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40023c00 	.word	0x40023c00
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	08011d60 	.word	0x08011d60
 8006cb0:	20000000 	.word	0x20000000
 8006cb4:	20000024 	.word	0x20000024

08006cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cbc:	b090      	sub	sp, #64	; 0x40
 8006cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc8:	2300      	movs	r3, #0
 8006cca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cd0:	4b59      	ldr	r3, [pc, #356]	; (8006e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d00d      	beq.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	f200 80a1 	bhi.w	8006e24 <HAL_RCC_GetSysClockFreq+0x16c>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <HAL_RCC_GetSysClockFreq+0x34>
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d003      	beq.n	8006cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cea:	e09b      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cec:	4b53      	ldr	r3, [pc, #332]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x184>)
 8006cee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006cf0:	e09b      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cf2:	4b53      	ldr	r3, [pc, #332]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cf6:	e098      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cf8:	4b4f      	ldr	r3, [pc, #316]	; (8006e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d02:	4b4d      	ldr	r3, [pc, #308]	; (8006e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d028      	beq.n	8006d60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d0e:	4b4a      	ldr	r3, [pc, #296]	; (8006e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	099b      	lsrs	r3, r3, #6
 8006d14:	2200      	movs	r2, #0
 8006d16:	623b      	str	r3, [r7, #32]
 8006d18:	627a      	str	r2, [r7, #36]	; 0x24
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d20:	2100      	movs	r1, #0
 8006d22:	4b47      	ldr	r3, [pc, #284]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d24:	fb03 f201 	mul.w	r2, r3, r1
 8006d28:	2300      	movs	r3, #0
 8006d2a:	fb00 f303 	mul.w	r3, r0, r3
 8006d2e:	4413      	add	r3, r2
 8006d30:	4a43      	ldr	r2, [pc, #268]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d32:	fba0 1202 	umull	r1, r2, r0, r2
 8006d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d38:	460a      	mov	r2, r1
 8006d3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d3e:	4413      	add	r3, r2
 8006d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	2200      	movs	r2, #0
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	61fa      	str	r2, [r7, #28]
 8006d4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d52:	f7f9 ff81 	bl	8000c58 <__aeabi_uldivmod>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d5e:	e053      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d60:	4b35      	ldr	r3, [pc, #212]	; (8006e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	099b      	lsrs	r3, r3, #6
 8006d66:	2200      	movs	r2, #0
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	617a      	str	r2, [r7, #20]
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d72:	f04f 0b00 	mov.w	fp, #0
 8006d76:	4652      	mov	r2, sl
 8006d78:	465b      	mov	r3, fp
 8006d7a:	f04f 0000 	mov.w	r0, #0
 8006d7e:	f04f 0100 	mov.w	r1, #0
 8006d82:	0159      	lsls	r1, r3, #5
 8006d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d88:	0150      	lsls	r0, r2, #5
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	ebb2 080a 	subs.w	r8, r2, sl
 8006d92:	eb63 090b 	sbc.w	r9, r3, fp
 8006d96:	f04f 0200 	mov.w	r2, #0
 8006d9a:	f04f 0300 	mov.w	r3, #0
 8006d9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006da2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006da6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006daa:	ebb2 0408 	subs.w	r4, r2, r8
 8006dae:	eb63 0509 	sbc.w	r5, r3, r9
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	00eb      	lsls	r3, r5, #3
 8006dbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dc0:	00e2      	lsls	r2, r4, #3
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	461d      	mov	r5, r3
 8006dc6:	eb14 030a 	adds.w	r3, r4, sl
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	eb45 030b 	adc.w	r3, r5, fp
 8006dd0:	607b      	str	r3, [r7, #4]
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dde:	4629      	mov	r1, r5
 8006de0:	028b      	lsls	r3, r1, #10
 8006de2:	4621      	mov	r1, r4
 8006de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006de8:	4621      	mov	r1, r4
 8006dea:	028a      	lsls	r2, r1, #10
 8006dec:	4610      	mov	r0, r2
 8006dee:	4619      	mov	r1, r3
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	2200      	movs	r2, #0
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	60fa      	str	r2, [r7, #12]
 8006df8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dfc:	f7f9 ff2c 	bl	8000c58 <__aeabi_uldivmod>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4613      	mov	r3, r2
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	3301      	adds	r3, #1
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006e18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e22:	e002      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <HAL_RCC_GetSysClockFreq+0x184>)
 8006e26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3740      	adds	r7, #64	; 0x40
 8006e30:	46bd      	mov	sp, r7
 8006e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e36:	bf00      	nop
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	00f42400 	.word	0x00f42400
 8006e40:	017d7840 	.word	0x017d7840

08006e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e48:	4b03      	ldr	r3, [pc, #12]	; (8006e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000000 	.word	0x20000000

08006e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e60:	f7ff fff0 	bl	8006e44 <HAL_RCC_GetHCLKFreq>
 8006e64:	4602      	mov	r2, r0
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	0a9b      	lsrs	r3, r3, #10
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	4903      	ldr	r1, [pc, #12]	; (8006e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e72:	5ccb      	ldrb	r3, [r1, r3]
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	08011d70 	.word	0x08011d70

08006e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e88:	f7ff ffdc 	bl	8006e44 <HAL_RCC_GetHCLKFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	0b5b      	lsrs	r3, r3, #13
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	4903      	ldr	r1, [pc, #12]	; (8006ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	08011d70 	.word	0x08011d70

08006eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e041      	b.n	8006f42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fa ff26 	bl	8001d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f000 f9a0 	bl	8007230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <HAL_TIM_PWM_Start+0x24>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	bf14      	ite	ne
 8006f68:	2301      	movne	r3, #1
 8006f6a:	2300      	moveq	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	e022      	b.n	8006fb6 <HAL_TIM_PWM_Start+0x6a>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d109      	bne.n	8006f8a <HAL_TIM_PWM_Start+0x3e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	bf14      	ite	ne
 8006f82:	2301      	movne	r3, #1
 8006f84:	2300      	moveq	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	e015      	b.n	8006fb6 <HAL_TIM_PWM_Start+0x6a>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d109      	bne.n	8006fa4 <HAL_TIM_PWM_Start+0x58>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	e008      	b.n	8006fb6 <HAL_TIM_PWM_Start+0x6a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	bf14      	ite	ne
 8006fb0:	2301      	movne	r3, #1
 8006fb2:	2300      	moveq	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e068      	b.n	8007090 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <HAL_TIM_PWM_Start+0x82>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fcc:	e013      	b.n	8006ff6 <HAL_TIM_PWM_Start+0xaa>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d104      	bne.n	8006fde <HAL_TIM_PWM_Start+0x92>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fdc:	e00b      	b.n	8006ff6 <HAL_TIM_PWM_Start+0xaa>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d104      	bne.n	8006fee <HAL_TIM_PWM_Start+0xa2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fec:	e003      	b.n	8006ff6 <HAL_TIM_PWM_Start+0xaa>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fb22 	bl	8007648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a23      	ldr	r2, [pc, #140]	; (8007098 <HAL_TIM_PWM_Start+0x14c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d107      	bne.n	800701e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800701c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1d      	ldr	r2, [pc, #116]	; (8007098 <HAL_TIM_PWM_Start+0x14c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d018      	beq.n	800705a <HAL_TIM_PWM_Start+0x10e>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007030:	d013      	beq.n	800705a <HAL_TIM_PWM_Start+0x10e>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a19      	ldr	r2, [pc, #100]	; (800709c <HAL_TIM_PWM_Start+0x150>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_TIM_PWM_Start+0x10e>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a17      	ldr	r2, [pc, #92]	; (80070a0 <HAL_TIM_PWM_Start+0x154>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_TIM_PWM_Start+0x10e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a16      	ldr	r2, [pc, #88]	; (80070a4 <HAL_TIM_PWM_Start+0x158>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_TIM_PWM_Start+0x10e>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a14      	ldr	r2, [pc, #80]	; (80070a8 <HAL_TIM_PWM_Start+0x15c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d111      	bne.n	800707e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b06      	cmp	r3, #6
 800706a:	d010      	beq.n	800708e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	e007      	b.n	800708e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0201 	orr.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40010000 	.word	0x40010000
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800
 80070a4:	40000c00 	.word	0x40000c00
 80070a8:	40014000 	.word	0x40014000

080070ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d101      	bne.n	80070ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e0ae      	b.n	8007228 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b0c      	cmp	r3, #12
 80070d6:	f200 809f 	bhi.w	8007218 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80070da:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	08007115 	.word	0x08007115
 80070e4:	08007219 	.word	0x08007219
 80070e8:	08007219 	.word	0x08007219
 80070ec:	08007219 	.word	0x08007219
 80070f0:	08007155 	.word	0x08007155
 80070f4:	08007219 	.word	0x08007219
 80070f8:	08007219 	.word	0x08007219
 80070fc:	08007219 	.word	0x08007219
 8007100:	08007197 	.word	0x08007197
 8007104:	08007219 	.word	0x08007219
 8007108:	08007219 	.word	0x08007219
 800710c:	08007219 	.word	0x08007219
 8007110:	080071d7 	.word	0x080071d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 f908 	bl	8007330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699a      	ldr	r2, [r3, #24]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0208 	orr.w	r2, r2, #8
 800712e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0204 	bic.w	r2, r2, #4
 800713e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6999      	ldr	r1, [r3, #24]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	691a      	ldr	r2, [r3, #16]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	619a      	str	r2, [r3, #24]
      break;
 8007152:	e064      	b.n	800721e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	4618      	mov	r0, r3
 800715c:	f000 f94e 	bl	80073fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800716e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800717e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6999      	ldr	r1, [r3, #24]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	021a      	lsls	r2, r3, #8
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	619a      	str	r2, [r3, #24]
      break;
 8007194:	e043      	b.n	800721e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 f999 	bl	80074d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f042 0208 	orr.w	r2, r2, #8
 80071b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0204 	bic.w	r2, r2, #4
 80071c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69d9      	ldr	r1, [r3, #28]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	61da      	str	r2, [r3, #28]
      break;
 80071d4:	e023      	b.n	800721e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f9e3 	bl	80075a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69da      	ldr	r2, [r3, #28]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69d9      	ldr	r1, [r3, #28]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	021a      	lsls	r2, r3, #8
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	61da      	str	r2, [r3, #28]
      break;
 8007216:	e002      	b.n	800721e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	75fb      	strb	r3, [r7, #23]
      break;
 800721c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007226:	7dfb      	ldrb	r3, [r7, #23]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a34      	ldr	r2, [pc, #208]	; (8007314 <TIM_Base_SetConfig+0xe4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00f      	beq.n	8007268 <TIM_Base_SetConfig+0x38>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800724e:	d00b      	beq.n	8007268 <TIM_Base_SetConfig+0x38>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a31      	ldr	r2, [pc, #196]	; (8007318 <TIM_Base_SetConfig+0xe8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d007      	beq.n	8007268 <TIM_Base_SetConfig+0x38>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a30      	ldr	r2, [pc, #192]	; (800731c <TIM_Base_SetConfig+0xec>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_Base_SetConfig+0x38>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a2f      	ldr	r2, [pc, #188]	; (8007320 <TIM_Base_SetConfig+0xf0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d108      	bne.n	800727a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a25      	ldr	r2, [pc, #148]	; (8007314 <TIM_Base_SetConfig+0xe4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01b      	beq.n	80072ba <TIM_Base_SetConfig+0x8a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007288:	d017      	beq.n	80072ba <TIM_Base_SetConfig+0x8a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a22      	ldr	r2, [pc, #136]	; (8007318 <TIM_Base_SetConfig+0xe8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <TIM_Base_SetConfig+0x8a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a21      	ldr	r2, [pc, #132]	; (800731c <TIM_Base_SetConfig+0xec>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00f      	beq.n	80072ba <TIM_Base_SetConfig+0x8a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a20      	ldr	r2, [pc, #128]	; (8007320 <TIM_Base_SetConfig+0xf0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00b      	beq.n	80072ba <TIM_Base_SetConfig+0x8a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <TIM_Base_SetConfig+0xf4>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d007      	beq.n	80072ba <TIM_Base_SetConfig+0x8a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a1e      	ldr	r2, [pc, #120]	; (8007328 <TIM_Base_SetConfig+0xf8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d003      	beq.n	80072ba <TIM_Base_SetConfig+0x8a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a1d      	ldr	r2, [pc, #116]	; (800732c <TIM_Base_SetConfig+0xfc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d108      	bne.n	80072cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a08      	ldr	r2, [pc, #32]	; (8007314 <TIM_Base_SetConfig+0xe4>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d103      	bne.n	8007300 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	615a      	str	r2, [r3, #20]
}
 8007306:	bf00      	nop
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40010000 	.word	0x40010000
 8007318:	40000400 	.word	0x40000400
 800731c:	40000800 	.word	0x40000800
 8007320:	40000c00 	.word	0x40000c00
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800

08007330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f023 0201 	bic.w	r2, r3, #1
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f023 0302 	bic.w	r3, r3, #2
 8007378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a1c      	ldr	r2, [pc, #112]	; (80073f8 <TIM_OC1_SetConfig+0xc8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d10c      	bne.n	80073a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f023 0308 	bic.w	r3, r3, #8
 8007392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f023 0304 	bic.w	r3, r3, #4
 80073a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a13      	ldr	r2, [pc, #76]	; (80073f8 <TIM_OC1_SetConfig+0xc8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d111      	bne.n	80073d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	621a      	str	r2, [r3, #32]
}
 80073ec:	bf00      	nop
 80073ee:	371c      	adds	r7, #28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	40010000 	.word	0x40010000

080073fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f023 0210 	bic.w	r2, r3, #16
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	021b      	lsls	r3, r3, #8
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f023 0320 	bic.w	r3, r3, #32
 8007446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a1e      	ldr	r2, [pc, #120]	; (80074d0 <TIM_OC2_SetConfig+0xd4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d10d      	bne.n	8007478 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a15      	ldr	r2, [pc, #84]	; (80074d0 <TIM_OC2_SetConfig+0xd4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d113      	bne.n	80074a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800748e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40010000 	.word	0x40010000

080074d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0303 	bic.w	r3, r3, #3
 800750a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800751c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <TIM_OC3_SetConfig+0xd0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10d      	bne.n	800754e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800754c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a14      	ldr	r2, [pc, #80]	; (80075a4 <TIM_OC3_SetConfig+0xd0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d113      	bne.n	800757e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800755c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	011b      	lsls	r3, r3, #4
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	621a      	str	r2, [r3, #32]
}
 8007598:	bf00      	nop
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	40010000 	.word	0x40010000

080075a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	031b      	lsls	r3, r3, #12
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a10      	ldr	r2, [pc, #64]	; (8007644 <TIM_OC4_SetConfig+0x9c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d109      	bne.n	800761c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800760e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	019b      	lsls	r3, r3, #6
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	621a      	str	r2, [r3, #32]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40010000 	.word	0x40010000

08007648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	2201      	movs	r2, #1
 800765c:	fa02 f303 	lsl.w	r3, r2, r3
 8007660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a1a      	ldr	r2, [r3, #32]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	43db      	mvns	r3, r3
 800766a:	401a      	ands	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a1a      	ldr	r2, [r3, #32]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 031f 	and.w	r3, r3, #31
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	fa01 f303 	lsl.w	r3, r1, r3
 8007680:	431a      	orrs	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	621a      	str	r2, [r3, #32]
}
 8007686:	bf00      	nop
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
	...

08007694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e050      	b.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1c      	ldr	r2, [pc, #112]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d018      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f8:	d013      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a18      	ldr	r2, [pc, #96]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a16      	ldr	r2, [pc, #88]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a15      	ldr	r2, [pc, #84]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a13      	ldr	r2, [pc, #76]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d10c      	bne.n	800773c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4313      	orrs	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40010000 	.word	0x40010000
 8007760:	40000400 	.word	0x40000400
 8007764:	40000800 	.word	0x40000800
 8007768:	40000c00 	.word	0x40000c00
 800776c:	40014000 	.word	0x40014000

08007770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e03f      	b.n	8007802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fa fb40 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2224      	movs	r2, #36	; 0x24
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 faa5 	bl	8007d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	695a      	ldr	r2, [r3, #20]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	4613      	mov	r3, r2
 8007816:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b20      	cmp	r3, #32
 8007822:	d11d      	bne.n	8007860 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <HAL_UART_Receive_DMA+0x26>
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e016      	b.n	8007862 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_UART_Receive_DMA+0x38>
 800783e:	2302      	movs	r3, #2
 8007840:	e00f      	b.n	8007862 <HAL_UART_Receive_DMA+0x58>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	461a      	mov	r2, r3
 8007854:	68b9      	ldr	r1, [r7, #8]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 f92a 	bl	8007ab0 <UART_Start_Receive_DMA>
 800785c:	4603      	mov	r3, r0
 800785e:	e000      	b.n	8007862 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007860:	2302      	movs	r3, #2
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b09c      	sub	sp, #112	; 0x70
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d172      	bne.n	80079c0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80078da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078dc:	2200      	movs	r2, #0
 80078de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80078f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	330c      	adds	r3, #12
 80078fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007900:	65ba      	str	r2, [r7, #88]	; 0x58
 8007902:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800790e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e5      	bne.n	80078e0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3314      	adds	r3, #20
 800791a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007926:	f023 0301 	bic.w	r3, r3, #1
 800792a:	667b      	str	r3, [r7, #100]	; 0x64
 800792c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007934:	647a      	str	r2, [r7, #68]	; 0x44
 8007936:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800793a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e5      	bne.n	8007914 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3314      	adds	r3, #20
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	623b      	str	r3, [r7, #32]
   return(result);
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800795e:	663b      	str	r3, [r7, #96]	; 0x60
 8007960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3314      	adds	r3, #20
 8007966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007968:	633a      	str	r2, [r7, #48]	; 0x30
 800796a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800796e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e5      	bne.n	8007948 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800797c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800797e:	2220      	movs	r2, #32
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	2b01      	cmp	r3, #1
 800798a:	d119      	bne.n	80079c0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	330c      	adds	r3, #12
 8007992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	60fb      	str	r3, [r7, #12]
   return(result);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0310 	bic.w	r3, r3, #16
 80079a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	330c      	adds	r3, #12
 80079aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079ac:	61fa      	str	r2, [r7, #28]
 80079ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	69b9      	ldr	r1, [r7, #24]
 80079b2:	69fa      	ldr	r2, [r7, #28]
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e5      	bne.n	800798c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d106      	bne.n	80079d6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079cc:	4619      	mov	r1, r3
 80079ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80079d0:	f7ff ff69 	bl	80078a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079d4:	e002      	b.n	80079dc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80079d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80079d8:	f7ff ff47 	bl	800786a <HAL_UART_RxCpltCallback>
}
 80079dc:	bf00      	nop
 80079de:	3770      	adds	r7, #112	; 0x70
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d108      	bne.n	8007a0c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079fe:	085b      	lsrs	r3, r3, #1
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	4619      	mov	r1, r3
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f7ff ff4e 	bl	80078a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a0a:	e002      	b.n	8007a12 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff ff36 	bl	800787e <HAL_UART_RxHalfCpltCallback>
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a36:	2b80      	cmp	r3, #128	; 0x80
 8007a38:	bf0c      	ite	eq
 8007a3a:	2301      	moveq	r3, #1
 8007a3c:	2300      	movne	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b21      	cmp	r3, #33	; 0x21
 8007a4c:	d108      	bne.n	8007a60 <UART_DMAError+0x46>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2200      	movs	r2, #0
 8007a58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007a5a:	68b8      	ldr	r0, [r7, #8]
 8007a5c:	f000 f8c6 	bl	8007bec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6a:	2b40      	cmp	r3, #64	; 0x40
 8007a6c:	bf0c      	ite	eq
 8007a6e:	2301      	moveq	r3, #1
 8007a70:	2300      	movne	r3, #0
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b22      	cmp	r3, #34	; 0x22
 8007a80:	d108      	bne.n	8007a94 <UART_DMAError+0x7a>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007a8e:	68b8      	ldr	r0, [r7, #8]
 8007a90:	f000 f8d4 	bl	8007c3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a98:	f043 0210 	orr.w	r2, r3, #16
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f7ff fef6 	bl	8007892 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b098      	sub	sp, #96	; 0x60
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2222      	movs	r2, #34	; 0x22
 8007ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	4a40      	ldr	r2, [pc, #256]	; (8007be0 <UART_Start_Receive_DMA+0x130>)
 8007ade:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	4a3f      	ldr	r2, [pc, #252]	; (8007be4 <UART_Start_Receive_DMA+0x134>)
 8007ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	4a3e      	ldr	r2, [pc, #248]	; (8007be8 <UART_Start_Receive_DMA+0x138>)
 8007aee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	2200      	movs	r2, #0
 8007af6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007af8:	f107 0308 	add.w	r3, r7, #8
 8007afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3304      	adds	r3, #4
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	f7fc f84a 	bl	8003ba8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b14:	2300      	movs	r3, #0
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	613b      	str	r3, [r7, #16]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	613b      	str	r3, [r7, #16]
 8007b28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d019      	beq.n	8007b6e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	330c      	adds	r3, #12
 8007b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b50:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	330c      	adds	r3, #12
 8007b58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3314      	adds	r3, #20
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	f043 0301 	orr.w	r3, r3, #1
 8007b84:	657b      	str	r3, [r7, #84]	; 0x54
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b8e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e5      	bne.n	8007b6e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3314      	adds	r3, #20
 8007ba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb8:	653b      	str	r3, [r7, #80]	; 0x50
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3314      	adds	r3, #20
 8007bc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bc2:	627a      	str	r2, [r7, #36]	; 0x24
 8007bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6a39      	ldr	r1, [r7, #32]
 8007bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3760      	adds	r7, #96	; 0x60
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	080078bf 	.word	0x080078bf
 8007be4:	080079e5 	.word	0x080079e5
 8007be8:	08007a1b 	.word	0x08007a1b

08007bec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b089      	sub	sp, #36	; 0x24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	330c      	adds	r3, #12
 8007bfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	e853 3f00 	ldrex	r3, [r3]
 8007c02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c0a:	61fb      	str	r3, [r7, #28]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330c      	adds	r3, #12
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	61ba      	str	r2, [r7, #24]
 8007c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	6979      	ldr	r1, [r7, #20]
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	e841 2300 	strex	r3, r2, [r1]
 8007c20:	613b      	str	r3, [r7, #16]
   return(result);
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e5      	bne.n	8007bf4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007c30:	bf00      	nop
 8007c32:	3724      	adds	r7, #36	; 0x24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b095      	sub	sp, #84	; 0x54
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	330c      	adds	r3, #12
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c64:	643a      	str	r2, [r7, #64]	; 0x40
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e5      	bne.n	8007c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3314      	adds	r3, #20
 8007c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f023 0301 	bic.w	r3, r3, #1
 8007c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3314      	adds	r3, #20
 8007c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e5      	bne.n	8007c78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d119      	bne.n	8007ce8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	330c      	adds	r3, #12
 8007cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f023 0310 	bic.w	r3, r3, #16
 8007cca:	647b      	str	r3, [r7, #68]	; 0x44
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cd4:	61ba      	str	r2, [r7, #24]
 8007cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	6979      	ldr	r1, [r7, #20]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e5      	bne.n	8007cb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007cf6:	bf00      	nop
 8007cf8:	3754      	adds	r7, #84	; 0x54
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
	...

08007d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d08:	b0c0      	sub	sp, #256	; 0x100
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d20:	68d9      	ldr	r1, [r3, #12]
 8007d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	ea40 0301 	orr.w	r3, r0, r1
 8007d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	431a      	orrs	r2, r3
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d5c:	f021 010c 	bic.w	r1, r1, #12
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7e:	6999      	ldr	r1, [r3, #24]
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	ea40 0301 	orr.w	r3, r0, r1
 8007d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4b8f      	ldr	r3, [pc, #572]	; (8007fd0 <UART_SetConfig+0x2cc>)
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d005      	beq.n	8007da4 <UART_SetConfig+0xa0>
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b8d      	ldr	r3, [pc, #564]	; (8007fd4 <UART_SetConfig+0x2d0>)
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d104      	bne.n	8007dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007da4:	f7ff f86e 	bl	8006e84 <HAL_RCC_GetPCLK2Freq>
 8007da8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007dac:	e003      	b.n	8007db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dae:	f7ff f855 	bl	8006e5c <HAL_RCC_GetPCLK1Freq>
 8007db2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc0:	f040 810c 	bne.w	8007fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	462b      	mov	r3, r5
 8007dda:	1891      	adds	r1, r2, r2
 8007ddc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dde:	415b      	adcs	r3, r3
 8007de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007de6:	4621      	mov	r1, r4
 8007de8:	eb12 0801 	adds.w	r8, r2, r1
 8007dec:	4629      	mov	r1, r5
 8007dee:	eb43 0901 	adc.w	r9, r3, r1
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e06:	4690      	mov	r8, r2
 8007e08:	4699      	mov	r9, r3
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	eb18 0303 	adds.w	r3, r8, r3
 8007e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e14:	462b      	mov	r3, r5
 8007e16:	eb49 0303 	adc.w	r3, r9, r3
 8007e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e32:	460b      	mov	r3, r1
 8007e34:	18db      	adds	r3, r3, r3
 8007e36:	653b      	str	r3, [r7, #80]	; 0x50
 8007e38:	4613      	mov	r3, r2
 8007e3a:	eb42 0303 	adc.w	r3, r2, r3
 8007e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e48:	f7f8 ff06 	bl	8000c58 <__aeabi_uldivmod>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4b61      	ldr	r3, [pc, #388]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007e52:	fba3 2302 	umull	r2, r3, r3, r2
 8007e56:	095b      	lsrs	r3, r3, #5
 8007e58:	011c      	lsls	r4, r3, #4
 8007e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	464b      	mov	r3, r9
 8007e70:	1891      	adds	r1, r2, r2
 8007e72:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e74:	415b      	adcs	r3, r3
 8007e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e82:	4649      	mov	r1, r9
 8007e84:	eb43 0b01 	adc.w	fp, r3, r1
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e9c:	4692      	mov	sl, r2
 8007e9e:	469b      	mov	fp, r3
 8007ea0:	4643      	mov	r3, r8
 8007ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eaa:	464b      	mov	r3, r9
 8007eac:	eb4b 0303 	adc.w	r3, fp, r3
 8007eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	18db      	adds	r3, r3, r3
 8007ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8007ece:	4613      	mov	r3, r2
 8007ed0:	eb42 0303 	adc.w	r3, r2, r3
 8007ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ede:	f7f8 febb 	bl	8000c58 <__aeabi_uldivmod>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4b3b      	ldr	r3, [pc, #236]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007eea:	fba3 2301 	umull	r2, r3, r3, r1
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	2264      	movs	r2, #100	; 0x64
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
 8007ef6:	1acb      	subs	r3, r1, r3
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007efe:	4b36      	ldr	r3, [pc, #216]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007f00:	fba3 2302 	umull	r2, r3, r3, r2
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f0c:	441c      	add	r4, r3
 8007f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f20:	4642      	mov	r2, r8
 8007f22:	464b      	mov	r3, r9
 8007f24:	1891      	adds	r1, r2, r2
 8007f26:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f28:	415b      	adcs	r3, r3
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f30:	4641      	mov	r1, r8
 8007f32:	1851      	adds	r1, r2, r1
 8007f34:	6339      	str	r1, [r7, #48]	; 0x30
 8007f36:	4649      	mov	r1, r9
 8007f38:	414b      	adcs	r3, r1
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f48:	4659      	mov	r1, fp
 8007f4a:	00cb      	lsls	r3, r1, #3
 8007f4c:	4651      	mov	r1, sl
 8007f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f52:	4651      	mov	r1, sl
 8007f54:	00ca      	lsls	r2, r1, #3
 8007f56:	4610      	mov	r0, r2
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	189b      	adds	r3, r3, r2
 8007f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f64:	464b      	mov	r3, r9
 8007f66:	460a      	mov	r2, r1
 8007f68:	eb42 0303 	adc.w	r3, r2, r3
 8007f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f84:	460b      	mov	r3, r1
 8007f86:	18db      	adds	r3, r3, r3
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	eb42 0303 	adc.w	r3, r2, r3
 8007f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f9a:	f7f8 fe5d 	bl	8000c58 <__aeabi_uldivmod>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fa8:	095b      	lsrs	r3, r3, #5
 8007faa:	2164      	movs	r1, #100	; 0x64
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	3332      	adds	r3, #50	; 0x32
 8007fb6:	4a08      	ldr	r2, [pc, #32]	; (8007fd8 <UART_SetConfig+0x2d4>)
 8007fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	f003 0207 	and.w	r2, r3, #7
 8007fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4422      	add	r2, r4
 8007fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fcc:	e106      	b.n	80081dc <UART_SetConfig+0x4d8>
 8007fce:	bf00      	nop
 8007fd0:	40011000 	.word	0x40011000
 8007fd4:	40011400 	.word	0x40011400
 8007fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007fee:	4642      	mov	r2, r8
 8007ff0:	464b      	mov	r3, r9
 8007ff2:	1891      	adds	r1, r2, r2
 8007ff4:	6239      	str	r1, [r7, #32]
 8007ff6:	415b      	adcs	r3, r3
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ffe:	4641      	mov	r1, r8
 8008000:	1854      	adds	r4, r2, r1
 8008002:	4649      	mov	r1, r9
 8008004:	eb43 0501 	adc.w	r5, r3, r1
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	00eb      	lsls	r3, r5, #3
 8008012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008016:	00e2      	lsls	r2, r4, #3
 8008018:	4614      	mov	r4, r2
 800801a:	461d      	mov	r5, r3
 800801c:	4643      	mov	r3, r8
 800801e:	18e3      	adds	r3, r4, r3
 8008020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008024:	464b      	mov	r3, r9
 8008026:	eb45 0303 	adc.w	r3, r5, r3
 800802a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800802e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800803a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800804a:	4629      	mov	r1, r5
 800804c:	008b      	lsls	r3, r1, #2
 800804e:	4621      	mov	r1, r4
 8008050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008054:	4621      	mov	r1, r4
 8008056:	008a      	lsls	r2, r1, #2
 8008058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800805c:	f7f8 fdfc 	bl	8000c58 <__aeabi_uldivmod>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4b60      	ldr	r3, [pc, #384]	; (80081e8 <UART_SetConfig+0x4e4>)
 8008066:	fba3 2302 	umull	r2, r3, r3, r2
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	011c      	lsls	r4, r3, #4
 800806e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008072:	2200      	movs	r2, #0
 8008074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008078:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800807c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	1891      	adds	r1, r2, r2
 8008086:	61b9      	str	r1, [r7, #24]
 8008088:	415b      	adcs	r3, r3
 800808a:	61fb      	str	r3, [r7, #28]
 800808c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008090:	4641      	mov	r1, r8
 8008092:	1851      	adds	r1, r2, r1
 8008094:	6139      	str	r1, [r7, #16]
 8008096:	4649      	mov	r1, r9
 8008098:	414b      	adcs	r3, r1
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080a8:	4659      	mov	r1, fp
 80080aa:	00cb      	lsls	r3, r1, #3
 80080ac:	4651      	mov	r1, sl
 80080ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080b2:	4651      	mov	r1, sl
 80080b4:	00ca      	lsls	r2, r1, #3
 80080b6:	4610      	mov	r0, r2
 80080b8:	4619      	mov	r1, r3
 80080ba:	4603      	mov	r3, r0
 80080bc:	4642      	mov	r2, r8
 80080be:	189b      	adds	r3, r3, r2
 80080c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080c4:	464b      	mov	r3, r9
 80080c6:	460a      	mov	r2, r1
 80080c8:	eb42 0303 	adc.w	r3, r2, r3
 80080cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80080da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080dc:	f04f 0200 	mov.w	r2, #0
 80080e0:	f04f 0300 	mov.w	r3, #0
 80080e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080e8:	4649      	mov	r1, r9
 80080ea:	008b      	lsls	r3, r1, #2
 80080ec:	4641      	mov	r1, r8
 80080ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080f2:	4641      	mov	r1, r8
 80080f4:	008a      	lsls	r2, r1, #2
 80080f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080fa:	f7f8 fdad 	bl	8000c58 <__aeabi_uldivmod>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4611      	mov	r1, r2
 8008104:	4b38      	ldr	r3, [pc, #224]	; (80081e8 <UART_SetConfig+0x4e4>)
 8008106:	fba3 2301 	umull	r2, r3, r3, r1
 800810a:	095b      	lsrs	r3, r3, #5
 800810c:	2264      	movs	r2, #100	; 0x64
 800810e:	fb02 f303 	mul.w	r3, r2, r3
 8008112:	1acb      	subs	r3, r1, r3
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	3332      	adds	r3, #50	; 0x32
 8008118:	4a33      	ldr	r2, [pc, #204]	; (80081e8 <UART_SetConfig+0x4e4>)
 800811a:	fba2 2303 	umull	r2, r3, r2, r3
 800811e:	095b      	lsrs	r3, r3, #5
 8008120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008124:	441c      	add	r4, r3
 8008126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800812a:	2200      	movs	r2, #0
 800812c:	673b      	str	r3, [r7, #112]	; 0x70
 800812e:	677a      	str	r2, [r7, #116]	; 0x74
 8008130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
 8008138:	1891      	adds	r1, r2, r2
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	415b      	adcs	r3, r3
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008144:	4641      	mov	r1, r8
 8008146:	1851      	adds	r1, r2, r1
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	4649      	mov	r1, r9
 800814c:	414b      	adcs	r3, r1
 800814e:	607b      	str	r3, [r7, #4]
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800815c:	4659      	mov	r1, fp
 800815e:	00cb      	lsls	r3, r1, #3
 8008160:	4651      	mov	r1, sl
 8008162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008166:	4651      	mov	r1, sl
 8008168:	00ca      	lsls	r2, r1, #3
 800816a:	4610      	mov	r0, r2
 800816c:	4619      	mov	r1, r3
 800816e:	4603      	mov	r3, r0
 8008170:	4642      	mov	r2, r8
 8008172:	189b      	adds	r3, r3, r2
 8008174:	66bb      	str	r3, [r7, #104]	; 0x68
 8008176:	464b      	mov	r3, r9
 8008178:	460a      	mov	r2, r1
 800817a:	eb42 0303 	adc.w	r3, r2, r3
 800817e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	663b      	str	r3, [r7, #96]	; 0x60
 800818a:	667a      	str	r2, [r7, #100]	; 0x64
 800818c:	f04f 0200 	mov.w	r2, #0
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008198:	4649      	mov	r1, r9
 800819a:	008b      	lsls	r3, r1, #2
 800819c:	4641      	mov	r1, r8
 800819e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081a2:	4641      	mov	r1, r8
 80081a4:	008a      	lsls	r2, r1, #2
 80081a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081aa:	f7f8 fd55 	bl	8000c58 <__aeabi_uldivmod>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <UART_SetConfig+0x4e4>)
 80081b4:	fba3 1302 	umull	r1, r3, r3, r2
 80081b8:	095b      	lsrs	r3, r3, #5
 80081ba:	2164      	movs	r1, #100	; 0x64
 80081bc:	fb01 f303 	mul.w	r3, r1, r3
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	3332      	adds	r3, #50	; 0x32
 80081c6:	4a08      	ldr	r2, [pc, #32]	; (80081e8 <UART_SetConfig+0x4e4>)
 80081c8:	fba2 2303 	umull	r2, r3, r2, r3
 80081cc:	095b      	lsrs	r3, r3, #5
 80081ce:	f003 020f 	and.w	r2, r3, #15
 80081d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4422      	add	r2, r4
 80081da:	609a      	str	r2, [r3, #8]
}
 80081dc:	bf00      	nop
 80081de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80081e2:	46bd      	mov	sp, r7
 80081e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e8:	51eb851f 	.word	0x51eb851f

080081ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081ec:	b084      	sub	sp, #16
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	f107 001c 	add.w	r0, r7, #28
 80081fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	2b01      	cmp	r3, #1
 8008202:	d122      	bne.n	800824a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800822c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d105      	bne.n	800823e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 fbee 	bl	8009a20 <USB_CoreReset>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]
 8008248:	e01a      	b.n	8008280 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fbe2 	bl	8009a20 <USB_CoreReset>
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
 8008272:	e005      	b.n	8008280 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	2b01      	cmp	r3, #1
 8008284:	d10b      	bne.n	800829e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f043 0206 	orr.w	r2, r3, #6
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f043 0220 	orr.w	r2, r3, #32
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082aa:	b004      	add	sp, #16
 80082ac:	4770      	bx	lr
	...

080082b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d165      	bne.n	8008390 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4a41      	ldr	r2, [pc, #260]	; (80083cc <USB_SetTurnaroundTime+0x11c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d906      	bls.n	80082da <USB_SetTurnaroundTime+0x2a>
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	4a40      	ldr	r2, [pc, #256]	; (80083d0 <USB_SetTurnaroundTime+0x120>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d202      	bcs.n	80082da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80082d4:	230f      	movs	r3, #15
 80082d6:	617b      	str	r3, [r7, #20]
 80082d8:	e062      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4a3c      	ldr	r2, [pc, #240]	; (80083d0 <USB_SetTurnaroundTime+0x120>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d306      	bcc.n	80082f0 <USB_SetTurnaroundTime+0x40>
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4a3b      	ldr	r2, [pc, #236]	; (80083d4 <USB_SetTurnaroundTime+0x124>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d202      	bcs.n	80082f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80082ea:	230e      	movs	r3, #14
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	e057      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4a38      	ldr	r2, [pc, #224]	; (80083d4 <USB_SetTurnaroundTime+0x124>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d306      	bcc.n	8008306 <USB_SetTurnaroundTime+0x56>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4a37      	ldr	r2, [pc, #220]	; (80083d8 <USB_SetTurnaroundTime+0x128>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d202      	bcs.n	8008306 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008300:	230d      	movs	r3, #13
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e04c      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	4a33      	ldr	r2, [pc, #204]	; (80083d8 <USB_SetTurnaroundTime+0x128>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d306      	bcc.n	800831c <USB_SetTurnaroundTime+0x6c>
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	4a32      	ldr	r2, [pc, #200]	; (80083dc <USB_SetTurnaroundTime+0x12c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d802      	bhi.n	800831c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008316:	230c      	movs	r3, #12
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	e041      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4a2f      	ldr	r2, [pc, #188]	; (80083dc <USB_SetTurnaroundTime+0x12c>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d906      	bls.n	8008332 <USB_SetTurnaroundTime+0x82>
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	4a2e      	ldr	r2, [pc, #184]	; (80083e0 <USB_SetTurnaroundTime+0x130>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d802      	bhi.n	8008332 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800832c:	230b      	movs	r3, #11
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	e036      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	4a2a      	ldr	r2, [pc, #168]	; (80083e0 <USB_SetTurnaroundTime+0x130>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d906      	bls.n	8008348 <USB_SetTurnaroundTime+0x98>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	4a29      	ldr	r2, [pc, #164]	; (80083e4 <USB_SetTurnaroundTime+0x134>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d802      	bhi.n	8008348 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008342:	230a      	movs	r3, #10
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	e02b      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4a26      	ldr	r2, [pc, #152]	; (80083e4 <USB_SetTurnaroundTime+0x134>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d906      	bls.n	800835e <USB_SetTurnaroundTime+0xae>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4a25      	ldr	r2, [pc, #148]	; (80083e8 <USB_SetTurnaroundTime+0x138>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d202      	bcs.n	800835e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008358:	2309      	movs	r3, #9
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	e020      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	4a21      	ldr	r2, [pc, #132]	; (80083e8 <USB_SetTurnaroundTime+0x138>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d306      	bcc.n	8008374 <USB_SetTurnaroundTime+0xc4>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	4a20      	ldr	r2, [pc, #128]	; (80083ec <USB_SetTurnaroundTime+0x13c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d802      	bhi.n	8008374 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800836e:	2308      	movs	r3, #8
 8008370:	617b      	str	r3, [r7, #20]
 8008372:	e015      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4a1d      	ldr	r2, [pc, #116]	; (80083ec <USB_SetTurnaroundTime+0x13c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d906      	bls.n	800838a <USB_SetTurnaroundTime+0xda>
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4a1c      	ldr	r2, [pc, #112]	; (80083f0 <USB_SetTurnaroundTime+0x140>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d202      	bcs.n	800838a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008384:	2307      	movs	r3, #7
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e00a      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800838a:	2306      	movs	r3, #6
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	e007      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008396:	2309      	movs	r3, #9
 8008398:	617b      	str	r3, [r7, #20]
 800839a:	e001      	b.n	80083a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800839c:	2309      	movs	r3, #9
 800839e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	029b      	lsls	r3, r3, #10
 80083b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80083b8:	431a      	orrs	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	00d8acbf 	.word	0x00d8acbf
 80083d0:	00e4e1c0 	.word	0x00e4e1c0
 80083d4:	00f42400 	.word	0x00f42400
 80083d8:	01067380 	.word	0x01067380
 80083dc:	011a499f 	.word	0x011a499f
 80083e0:	01312cff 	.word	0x01312cff
 80083e4:	014ca43f 	.word	0x014ca43f
 80083e8:	016e3600 	.word	0x016e3600
 80083ec:	01a6ab1f 	.word	0x01a6ab1f
 80083f0:	01e84800 	.word	0x01e84800

080083f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f043 0201 	orr.w	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f023 0201 	bic.w	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d115      	bne.n	8008486 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008466:	2001      	movs	r0, #1
 8008468:	f7fa fdf2 	bl	8003050 <HAL_Delay>
      ms++;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3301      	adds	r3, #1
 8008470:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 fa45 	bl	8009902 <USB_GetMode>
 8008478:	4603      	mov	r3, r0
 800847a:	2b01      	cmp	r3, #1
 800847c:	d01e      	beq.n	80084bc <USB_SetCurrentMode+0x84>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b31      	cmp	r3, #49	; 0x31
 8008482:	d9f0      	bls.n	8008466 <USB_SetCurrentMode+0x2e>
 8008484:	e01a      	b.n	80084bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d115      	bne.n	80084b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008498:	2001      	movs	r0, #1
 800849a:	f7fa fdd9 	bl	8003050 <HAL_Delay>
      ms++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3301      	adds	r3, #1
 80084a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 fa2c 	bl	8009902 <USB_GetMode>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <USB_SetCurrentMode+0x84>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b31      	cmp	r3, #49	; 0x31
 80084b4:	d9f0      	bls.n	8008498 <USB_SetCurrentMode+0x60>
 80084b6:	e001      	b.n	80084bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e005      	b.n	80084c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b32      	cmp	r3, #50	; 0x32
 80084c0:	d101      	bne.n	80084c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e000      	b.n	80084c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084d0:	b084      	sub	sp, #16
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b086      	sub	sp, #24
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	e009      	b.n	8008504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	3340      	adds	r3, #64	; 0x40
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	2200      	movs	r2, #0
 80084fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	3301      	adds	r3, #1
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b0e      	cmp	r3, #14
 8008508:	d9f2      	bls.n	80084f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800850a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800850c:	2b00      	cmp	r3, #0
 800850e:	d11c      	bne.n	800854a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800851e:	f043 0302 	orr.w	r3, r3, #2
 8008522:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008534:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	639a      	str	r2, [r3, #56]	; 0x38
 8008548:	e00b      	b.n	8008562 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008568:	461a      	mov	r2, r3
 800856a:	2300      	movs	r3, #0
 800856c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008574:	4619      	mov	r1, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857c:	461a      	mov	r2, r3
 800857e:	680b      	ldr	r3, [r1, #0]
 8008580:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	2b01      	cmp	r3, #1
 8008586:	d10c      	bne.n	80085a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800858e:	2100      	movs	r1, #0
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f965 	bl	8008860 <USB_SetDevSpeed>
 8008596:	e008      	b.n	80085aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008598:	2101      	movs	r1, #1
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f960 	bl	8008860 <USB_SetDevSpeed>
 80085a0:	e003      	b.n	80085aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80085a2:	2103      	movs	r1, #3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f95b 	bl	8008860 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085aa:	2110      	movs	r1, #16
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f8f3 	bl	8008798 <USB_FlushTxFifo>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f91f 	bl	8008800 <USB_FlushRxFifo>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d2:	461a      	mov	r2, r3
 80085d4:	2300      	movs	r3, #0
 80085d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085de:	461a      	mov	r2, r3
 80085e0:	2300      	movs	r3, #0
 80085e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ea:	461a      	mov	r2, r3
 80085ec:	2300      	movs	r3, #0
 80085ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085f0:	2300      	movs	r3, #0
 80085f2:	613b      	str	r3, [r7, #16]
 80085f4:	e043      	b.n	800867e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800860c:	d118      	bne.n	8008640 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10a      	bne.n	800862a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008620:	461a      	mov	r2, r3
 8008622:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	e013      	b.n	8008652 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008636:	461a      	mov	r2, r3
 8008638:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	e008      	b.n	8008652 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4413      	add	r3, r2
 8008648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864c:	461a      	mov	r2, r3
 800864e:	2300      	movs	r3, #0
 8008650:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865e:	461a      	mov	r2, r3
 8008660:	2300      	movs	r3, #0
 8008662:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008670:	461a      	mov	r2, r3
 8008672:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008676:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	3301      	adds	r3, #1
 800867c:	613b      	str	r3, [r7, #16]
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	429a      	cmp	r2, r3
 8008684:	d3b7      	bcc.n	80085f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008686:	2300      	movs	r3, #0
 8008688:	613b      	str	r3, [r7, #16]
 800868a:	e043      	b.n	8008714 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800869e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086a2:	d118      	bne.n	80086d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b6:	461a      	mov	r2, r3
 80086b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	e013      	b.n	80086e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086cc:	461a      	mov	r2, r3
 80086ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	e008      	b.n	80086e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e2:	461a      	mov	r2, r3
 80086e4:	2300      	movs	r3, #0
 80086e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f4:	461a      	mov	r2, r3
 80086f6:	2300      	movs	r3, #0
 80086f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008706:	461a      	mov	r2, r3
 8008708:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800870c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	3301      	adds	r3, #1
 8008712:	613b      	str	r3, [r7, #16]
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	429a      	cmp	r2, r3
 800871a:	d3b7      	bcc.n	800868c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800872a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800872e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800873c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d105      	bne.n	8008750 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	f043 0210 	orr.w	r2, r3, #16
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	4b0f      	ldr	r3, [pc, #60]	; (8008794 <USB_DevInit+0x2c4>)
 8008756:	4313      	orrs	r3, r2
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800875c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	f043 0208 	orr.w	r2, r3, #8
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800876e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008770:	2b01      	cmp	r3, #1
 8008772:	d107      	bne.n	8008784 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800877c:	f043 0304 	orr.w	r3, r3, #4
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008790:	b004      	add	sp, #16
 8008792:	4770      	bx	lr
 8008794:	803c3800 	.word	0x803c3800

08008798 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3301      	adds	r3, #1
 80087aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4a13      	ldr	r2, [pc, #76]	; (80087fc <USB_FlushTxFifo+0x64>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d901      	bls.n	80087b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e01b      	b.n	80087f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	daf2      	bge.n	80087a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	019b      	lsls	r3, r3, #6
 80087c8:	f043 0220 	orr.w	r2, r3, #32
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3301      	adds	r3, #1
 80087d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4a08      	ldr	r2, [pc, #32]	; (80087fc <USB_FlushTxFifo+0x64>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d901      	bls.n	80087e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e006      	b.n	80087f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b20      	cmp	r3, #32
 80087ec:	d0f0      	beq.n	80087d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	00030d40 	.word	0x00030d40

08008800 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3301      	adds	r3, #1
 8008810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4a11      	ldr	r2, [pc, #68]	; (800885c <USB_FlushRxFifo+0x5c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d901      	bls.n	800881e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e018      	b.n	8008850 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	daf2      	bge.n	800880c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2210      	movs	r2, #16
 800882e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3301      	adds	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4a08      	ldr	r2, [pc, #32]	; (800885c <USB_FlushRxFifo+0x5c>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e006      	b.n	8008850 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b10      	cmp	r3, #16
 800884c:	d0f0      	beq.n	8008830 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	00030d40 	.word	0x00030d40

08008860 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	68f9      	ldr	r1, [r7, #12]
 800887c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008880:	4313      	orrs	r3, r2
 8008882:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008892:	b480      	push	{r7}
 8008894:	b087      	sub	sp, #28
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f003 0306 	and.w	r3, r3, #6
 80088aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80088b2:	2300      	movs	r3, #0
 80088b4:	75fb      	strb	r3, [r7, #23]
 80088b6:	e00a      	b.n	80088ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d002      	beq.n	80088c4 <USB_GetDevSpeed+0x32>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b06      	cmp	r3, #6
 80088c2:	d102      	bne.n	80088ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80088c4:	2302      	movs	r3, #2
 80088c6:	75fb      	strb	r3, [r7, #23]
 80088c8:	e001      	b.n	80088ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80088ca:	230f      	movs	r3, #15
 80088cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	371c      	adds	r7, #28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d13a      	bne.n	800896e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fe:	69da      	ldr	r2, [r3, #28]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	2101      	movs	r1, #1
 800890a:	fa01 f303 	lsl.w	r3, r1, r3
 800890e:	b29b      	uxth	r3, r3
 8008910:	68f9      	ldr	r1, [r7, #12]
 8008912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008916:	4313      	orrs	r3, r2
 8008918:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d155      	bne.n	80089dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800894c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	059b      	lsls	r3, r3, #22
 8008952:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008954:	4313      	orrs	r3, r2
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	0151      	lsls	r1, r2, #5
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	440a      	add	r2, r1
 800895e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	e036      	b.n	80089dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008974:	69da      	ldr	r2, [r3, #28]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f003 030f 	and.w	r3, r3, #15
 800897e:	2101      	movs	r1, #1
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	68f9      	ldr	r1, [r7, #12]
 8008988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800898c:	4313      	orrs	r3, r2
 800898e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d11a      	bne.n	80089dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	791b      	ldrb	r3, [r3, #4]
 80089c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80089c2:	430b      	orrs	r3, r1
 80089c4:	4313      	orrs	r3, r2
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
	...

080089ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	785b      	ldrb	r3, [r3, #1]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d161      	bne.n	8008acc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a1e:	d11f      	bne.n	8008a60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	0151      	lsls	r1, r2, #5
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	440a      	add	r2, r1
 8008a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	0151      	lsls	r1, r2, #5
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	440a      	add	r2, r1
 8008a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	2101      	movs	r1, #1
 8008a72:	fa01 f303 	lsl.w	r3, r1, r3
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a80:	4013      	ands	r3, r2
 8008a82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8a:	69da      	ldr	r2, [r3, #28]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	f003 030f 	and.w	r3, r3, #15
 8008a94:	2101      	movs	r1, #1
 8008a96:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	43db      	mvns	r3, r3
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	0159      	lsls	r1, r3, #5
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	440b      	add	r3, r1
 8008abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4b35      	ldr	r3, [pc, #212]	; (8008b9c <USB_DeactivateEndpoint+0x1b0>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	600b      	str	r3, [r1, #0]
 8008aca:	e060      	b.n	8008b8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae2:	d11f      	bne.n	8008b24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	0151      	lsls	r1, r2, #5
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	440a      	add	r2, r1
 8008afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008afe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	0151      	lsls	r1, r2, #5
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	440a      	add	r2, r1
 8008b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	2101      	movs	r1, #1
 8008b36:	fa01 f303 	lsl.w	r3, r1, r3
 8008b3a:	041b      	lsls	r3, r3, #16
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b44:	4013      	ands	r3, r2
 8008b46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	69da      	ldr	r2, [r3, #28]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	2101      	movs	r1, #1
 8008b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5e:	041b      	lsls	r3, r3, #16
 8008b60:	43db      	mvns	r3, r3
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b68:	4013      	ands	r3, r2
 8008b6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	0159      	lsls	r1, r3, #5
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	440b      	add	r3, r1
 8008b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b86:	4619      	mov	r1, r3
 8008b88:	4b05      	ldr	r3, [pc, #20]	; (8008ba0 <USB_DeactivateEndpoint+0x1b4>)
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	ec337800 	.word	0xec337800
 8008ba0:	eff37800 	.word	0xeff37800

08008ba4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08a      	sub	sp, #40	; 0x28
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	f040 815c 	bne.w	8008e7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d132      	bne.n	8008c34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	0151      	lsls	r1, r2, #5
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	440a      	add	r2, r1
 8008be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008bec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	0151      	lsls	r1, r2, #5
 8008c04:	69fa      	ldr	r2, [r7, #28]
 8008c06:	440a      	add	r2, r1
 8008c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	69fa      	ldr	r2, [r7, #28]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c2c:	0cdb      	lsrs	r3, r3, #19
 8008c2e:	04db      	lsls	r3, r3, #19
 8008c30:	6113      	str	r3, [r2, #16]
 8008c32:	e074      	b.n	8008d1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	0151      	lsls	r1, r2, #5
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	440a      	add	r2, r1
 8008c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c4e:	0cdb      	lsrs	r3, r3, #19
 8008c50:	04db      	lsls	r3, r3, #19
 8008c52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	0151      	lsls	r1, r2, #5
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	440a      	add	r2, r1
 8008c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	6999      	ldr	r1, [r3, #24]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	440b      	add	r3, r1
 8008c90:	1e59      	subs	r1, r3, #1
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c9c:	4b9d      	ldr	r3, [pc, #628]	; (8008f14 <USB_EPStartXfer+0x370>)
 8008c9e:	400b      	ands	r3, r1
 8008ca0:	69b9      	ldr	r1, [r7, #24]
 8008ca2:	0148      	lsls	r0, r1, #5
 8008ca4:	69f9      	ldr	r1, [r7, #28]
 8008ca6:	4401      	add	r1, r0
 8008ca8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008cac:	4313      	orrs	r3, r2
 8008cae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbc:	691a      	ldr	r2, [r3, #16]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cc6:	69b9      	ldr	r1, [r7, #24]
 8008cc8:	0148      	lsls	r0, r1, #5
 8008cca:	69f9      	ldr	r1, [r7, #28]
 8008ccc:	4401      	add	r1, r0
 8008cce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	791b      	ldrb	r3, [r3, #4]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d11f      	bne.n	8008d1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cf8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008cfc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d14b      	bne.n	8008dbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d009      	beq.n	8008d40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	791b      	ldrb	r3, [r3, #4]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d128      	bne.n	8008d9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d110      	bne.n	8008d7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	0151      	lsls	r1, r2, #5
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	440a      	add	r2, r1
 8008d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	e00f      	b.n	8008d9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	0151      	lsls	r1, r2, #5
 8008d8c:	69fa      	ldr	r2, [r7, #28]
 8008d8e:	440a      	add	r2, r1
 8008d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	0151      	lsls	r1, r2, #5
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	440a      	add	r2, r1
 8008db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	e133      	b.n	8009024 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008dda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	791b      	ldrb	r3, [r3, #4]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d015      	beq.n	8008e10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 811b 	beq.w	8009024 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	f003 030f 	and.w	r3, r3, #15
 8008dfe:	2101      	movs	r1, #1
 8008e00:	fa01 f303 	lsl.w	r3, r1, r3
 8008e04:	69f9      	ldr	r1, [r7, #28]
 8008e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	634b      	str	r3, [r1, #52]	; 0x34
 8008e0e:	e109      	b.n	8009024 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d110      	bne.n	8008e42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	0151      	lsls	r1, r2, #5
 8008e32:	69fa      	ldr	r2, [r7, #28]
 8008e34:	440a      	add	r2, r1
 8008e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	e00f      	b.n	8008e62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	0151      	lsls	r1, r2, #5
 8008e54:	69fa      	ldr	r2, [r7, #28]
 8008e56:	440a      	add	r2, r1
 8008e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	6919      	ldr	r1, [r3, #16]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	b298      	uxth	r0, r3
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	4603      	mov	r3, r0
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 fade 	bl	8009438 <USB_WritePacket>
 8008e7c:	e0d2      	b.n	8009024 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	0151      	lsls	r1, r2, #5
 8008e90:	69fa      	ldr	r2, [r7, #28]
 8008e92:	440a      	add	r2, r1
 8008e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e98:	0cdb      	lsrs	r3, r3, #19
 8008e9a:	04db      	lsls	r3, r3, #19
 8008e9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ec0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d126      	bne.n	8008f18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed6:	691a      	ldr	r2, [r3, #16]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ee0:	69b9      	ldr	r1, [r7, #24]
 8008ee2:	0148      	lsls	r0, r1, #5
 8008ee4:	69f9      	ldr	r1, [r7, #28]
 8008ee6:	4401      	add	r1, r0
 8008ee8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008eec:	4313      	orrs	r3, r2
 8008eee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	69fa      	ldr	r2, [r7, #28]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f0e:	6113      	str	r3, [r2, #16]
 8008f10:	e03a      	b.n	8008f88 <USB_EPStartXfer+0x3e4>
 8008f12:	bf00      	nop
 8008f14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	699a      	ldr	r2, [r3, #24]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	4413      	add	r3, r2
 8008f22:	1e5a      	subs	r2, r3, #1
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	8afa      	ldrh	r2, [r7, #22]
 8008f34:	fb03 f202 	mul.w	r2, r3, r2
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f48:	691a      	ldr	r2, [r3, #16]
 8008f4a:	8afb      	ldrh	r3, [r7, #22]
 8008f4c:	04d9      	lsls	r1, r3, #19
 8008f4e:	4b38      	ldr	r3, [pc, #224]	; (8009030 <USB_EPStartXfer+0x48c>)
 8008f50:	400b      	ands	r3, r1
 8008f52:	69b9      	ldr	r1, [r7, #24]
 8008f54:	0148      	lsls	r0, r1, #5
 8008f56:	69f9      	ldr	r1, [r7, #28]
 8008f58:	4401      	add	r1, r0
 8008f5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f78:	69b9      	ldr	r1, [r7, #24]
 8008f7a:	0148      	lsls	r0, r1, #5
 8008f7c:	69f9      	ldr	r1, [r7, #28]
 8008f7e:	4401      	add	r1, r0
 8008f80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f84:	4313      	orrs	r3, r2
 8008f86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d10d      	bne.n	8008faa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d009      	beq.n	8008faa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	6919      	ldr	r1, [r3, #16]
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	791b      	ldrb	r3, [r3, #4]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d128      	bne.n	8009004 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d110      	bne.n	8008fe4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	e00f      	b.n	8009004 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009002:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800901e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3720      	adds	r7, #32
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	1ff80000 	.word	0x1ff80000

08009034 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	4613      	mov	r3, r2
 8009040:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	2b01      	cmp	r3, #1
 8009052:	f040 80ce 	bne.w	80091f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d132      	bne.n	80090c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	4413      	add	r3, r2
 8009066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	0151      	lsls	r1, r2, #5
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	440a      	add	r2, r1
 8009074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009078:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800907c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009080:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	015a      	lsls	r2, r3, #5
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	4413      	add	r3, r2
 800908a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	0151      	lsls	r1, r2, #5
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	440a      	add	r2, r1
 8009098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800909c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	0151      	lsls	r1, r2, #5
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	440a      	add	r2, r1
 80090b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090bc:	0cdb      	lsrs	r3, r3, #19
 80090be:	04db      	lsls	r3, r3, #19
 80090c0:	6113      	str	r3, [r2, #16]
 80090c2:	e04e      	b.n	8009162 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	0151      	lsls	r1, r2, #5
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	440a      	add	r2, r1
 80090da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090de:	0cdb      	lsrs	r3, r3, #19
 80090e0:	04db      	lsls	r3, r3, #19
 80090e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009102:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009106:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	699a      	ldr	r2, [r3, #24]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	429a      	cmp	r2, r3
 8009112:	d903      	bls.n	800911c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	0151      	lsls	r1, r2, #5
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	440a      	add	r2, r1
 8009132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009136:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800913a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009148:	691a      	ldr	r2, [r3, #16]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009152:	6939      	ldr	r1, [r7, #16]
 8009154:	0148      	lsls	r0, r1, #5
 8009156:	6979      	ldr	r1, [r7, #20]
 8009158:	4401      	add	r1, r0
 800915a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800915e:	4313      	orrs	r3, r2
 8009160:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d11e      	bne.n	80091a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917c:	461a      	mov	r2, r3
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	0151      	lsls	r1, r2, #5
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	440a      	add	r2, r1
 800919a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800919e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	e097      	b.n	80092d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 8083 	beq.w	80092d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	2101      	movs	r1, #1
 80091e2:	fa01 f303 	lsl.w	r3, r1, r3
 80091e6:	6979      	ldr	r1, [r7, #20]
 80091e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091ec:	4313      	orrs	r3, r2
 80091ee:	634b      	str	r3, [r1, #52]	; 0x34
 80091f0:	e071      	b.n	80092d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	0151      	lsls	r1, r2, #5
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	440a      	add	r2, r1
 8009208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800920c:	0cdb      	lsrs	r3, r3, #19
 800920e:	04db      	lsls	r3, r3, #19
 8009210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	440a      	add	r2, r1
 8009228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800922c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009230:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009234:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	68da      	ldr	r2, [r3, #12]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800926c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927a:	691a      	ldr	r2, [r3, #16]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009284:	6939      	ldr	r1, [r7, #16]
 8009286:	0148      	lsls	r0, r1, #5
 8009288:	6979      	ldr	r1, [r7, #20]
 800928a:	4401      	add	r1, r0
 800928c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009290:	4313      	orrs	r3, r2
 8009292:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d10d      	bne.n	80092b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	6919      	ldr	r1, [r3, #16]
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b2:	460a      	mov	r2, r1
 80092b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	0151      	lsls	r1, r2, #5
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	440a      	add	r2, r1
 80092cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	371c      	adds	r7, #28
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	785b      	ldrb	r3, [r3, #1]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d14a      	bne.n	8009398 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800931a:	f040 8086 	bne.w	800942a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	7812      	ldrb	r2, [r2, #0]
 8009332:	0151      	lsls	r1, r2, #5
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	440a      	add	r2, r1
 8009338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009340:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009364:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009372:	4293      	cmp	r3, r2
 8009374:	d902      	bls.n	800937c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	75fb      	strb	r3, [r7, #23]
          break;
 800937a:	e056      	b.n	800942a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	015a      	lsls	r2, r3, #5
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	4413      	add	r3, r2
 8009386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009394:	d0e7      	beq.n	8009366 <USB_EPStopXfer+0x82>
 8009396:	e048      	b.n	800942a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093b0:	d13b      	bne.n	800942a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	7812      	ldrb	r2, [r2, #0]
 80093c6:	0151      	lsls	r1, r2, #5
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	440a      	add	r2, r1
 80093cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	7812      	ldrb	r2, [r2, #0]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3301      	adds	r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f242 7210 	movw	r2, #10000	; 0x2710
 8009406:	4293      	cmp	r3, r2
 8009408:	d902      	bls.n	8009410 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	75fb      	strb	r3, [r7, #23]
          break;
 800940e:	e00c      	b.n	800942a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009428:	d0e7      	beq.n	80093fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
}
 800942c:	4618      	mov	r0, r3
 800942e:	371c      	adds	r7, #28
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009438:	b480      	push	{r7}
 800943a:	b089      	sub	sp, #36	; 0x24
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4611      	mov	r1, r2
 8009444:	461a      	mov	r2, r3
 8009446:	460b      	mov	r3, r1
 8009448:	71fb      	strb	r3, [r7, #7]
 800944a:	4613      	mov	r3, r2
 800944c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009456:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800945a:	2b00      	cmp	r3, #0
 800945c:	d123      	bne.n	80094a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800945e:	88bb      	ldrh	r3, [r7, #4]
 8009460:	3303      	adds	r3, #3
 8009462:	089b      	lsrs	r3, r3, #2
 8009464:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009466:	2300      	movs	r3, #0
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	e018      	b.n	800949e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	031a      	lsls	r2, r3, #12
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	4413      	add	r3, r2
 8009474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009478:	461a      	mov	r2, r3
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	3301      	adds	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	3301      	adds	r3, #1
 800948a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	3301      	adds	r3, #1
 8009490:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	3301      	adds	r3, #1
 8009496:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	3301      	adds	r3, #1
 800949c:	61bb      	str	r3, [r7, #24]
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d3e2      	bcc.n	800946c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3724      	adds	r7, #36	; 0x24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b08b      	sub	sp, #44	; 0x2c
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	4613      	mov	r3, r2
 80094c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	089b      	lsrs	r3, r3, #2
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80094d2:	88fb      	ldrh	r3, [r7, #6]
 80094d4:	f003 0303 	and.w	r3, r3, #3
 80094d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80094da:	2300      	movs	r3, #0
 80094dc:	623b      	str	r3, [r7, #32]
 80094de:	e014      	b.n	800950a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	3301      	adds	r3, #1
 80094f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	3301      	adds	r3, #1
 80094f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	3301      	adds	r3, #1
 80094fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	3301      	adds	r3, #1
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	3301      	adds	r3, #1
 8009508:	623b      	str	r3, [r7, #32]
 800950a:	6a3a      	ldr	r2, [r7, #32]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	429a      	cmp	r2, r3
 8009510:	d3e6      	bcc.n	80094e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009512:	8bfb      	ldrh	r3, [r7, #30]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d01e      	beq.n	8009556 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009522:	461a      	mov	r2, r3
 8009524:	f107 0310 	add.w	r3, r7, #16
 8009528:	6812      	ldr	r2, [r2, #0]
 800952a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	fa22 f303 	lsr.w	r3, r2, r3
 8009538:	b2da      	uxtb	r2, r3
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	701a      	strb	r2, [r3, #0]
      i++;
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	3301      	adds	r3, #1
 8009542:	623b      	str	r3, [r7, #32]
      pDest++;
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	3301      	adds	r3, #1
 8009548:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800954a:	8bfb      	ldrh	r3, [r7, #30]
 800954c:	3b01      	subs	r3, #1
 800954e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009550:	8bfb      	ldrh	r3, [r7, #30]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1ea      	bne.n	800952c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009558:	4618      	mov	r0, r3
 800955a:	372c      	adds	r7, #44	; 0x2c
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d12c      	bne.n	80095da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	db12      	blt.n	80095b8 <USB_EPSetStall+0x54>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00f      	beq.n	80095b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	0151      	lsls	r1, r2, #5
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	440a      	add	r2, r1
 80095ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	0151      	lsls	r1, r2, #5
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	440a      	add	r2, r1
 80095ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	e02b      	b.n	8009632 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	db12      	blt.n	8009612 <USB_EPSetStall+0xae>
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00f      	beq.n	8009612 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	0151      	lsls	r1, r2, #5
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	440a      	add	r2, r1
 8009608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800960c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009610:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4413      	add	r3, r2
 800961a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	0151      	lsls	r1, r2, #5
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	440a      	add	r2, r1
 8009628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800962c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009630:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d128      	bne.n	80096ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	0151      	lsls	r1, r2, #5
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	440a      	add	r2, r1
 8009672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800967a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	791b      	ldrb	r3, [r3, #4]
 8009680:	2b03      	cmp	r3, #3
 8009682:	d003      	beq.n	800968c <USB_EPClearStall+0x4c>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	791b      	ldrb	r3, [r3, #4]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d138      	bne.n	80096fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	e027      	b.n	80096fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	0151      	lsls	r1, r2, #5
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	440a      	add	r2, r1
 80096c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	791b      	ldrb	r3, [r3, #4]
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d003      	beq.n	80096de <USB_EPClearStall+0x9e>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	791b      	ldrb	r3, [r3, #4]
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d10f      	bne.n	80096fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	0151      	lsls	r1, r2, #5
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	440a      	add	r2, r1
 80096f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800972a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800972e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	011b      	lsls	r3, r3, #4
 800973c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009740:	68f9      	ldr	r1, [r7, #12]
 8009742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009746:	4313      	orrs	r3, r2
 8009748:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009772:	f023 0303 	bic.w	r3, r3, #3
 8009776:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009786:	f023 0302 	bic.w	r3, r3, #2
 800978a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800979a:	b480      	push	{r7}
 800979c:	b085      	sub	sp, #20
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097b4:	f023 0303 	bic.w	r3, r3, #3
 80097b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097c8:	f043 0302 	orr.w	r3, r3, #2
 80097cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4013      	ands	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097f4:	68fb      	ldr	r3, [r7, #12]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009802:	b480      	push	{r7}
 8009804:	b085      	sub	sp, #20
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	4013      	ands	r3, r2
 8009824:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	0c1b      	lsrs	r3, r3, #16
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	4013      	ands	r3, r2
 8009858:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	b29b      	uxth	r3, r3
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800986a:	b480      	push	{r7}
 800986c:	b085      	sub	sp, #20
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	4413      	add	r3, r2
 8009882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	4013      	ands	r3, r2
 8009896:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009898:	68bb      	ldr	r3, [r7, #8]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b087      	sub	sp, #28
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	460b      	mov	r3, r1
 80098b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	f003 030f 	and.w	r3, r3, #15
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	fa22 f303 	lsr.w	r3, r2, r3
 80098d6:	01db      	lsls	r3, r3, #7
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	4313      	orrs	r3, r2
 80098de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	4013      	ands	r3, r2
 80098f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098f4:	68bb      	ldr	r3, [r7, #8]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	f003 0301 	and.w	r3, r3, #1
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800991e:	b480      	push	{r7}
 8009920:	b085      	sub	sp, #20
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009938:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800993c:	f023 0307 	bic.w	r3, r3, #7
 8009940:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009954:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	460b      	mov	r3, r1
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	333c      	adds	r3, #60	; 0x3c
 800997a:	3304      	adds	r3, #4
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	4a26      	ldr	r2, [pc, #152]	; (8009a1c <USB_EP0_OutStart+0xb8>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d90a      	bls.n	800999e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009998:	d101      	bne.n	800999e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	e037      	b.n	8009a0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a4:	461a      	mov	r2, r3
 80099a6:	2300      	movs	r3, #0
 80099a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099cc:	f043 0318 	orr.w	r3, r3, #24
 80099d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80099e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10f      	bne.n	8009a0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f2:	461a      	mov	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	371c      	adds	r7, #28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	4f54300a 	.word	0x4f54300a

08009a20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4a13      	ldr	r2, [pc, #76]	; (8009a84 <USB_CoreReset+0x64>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d901      	bls.n	8009a3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e01b      	b.n	8009a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	daf2      	bge.n	8009a2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f043 0201 	orr.w	r2, r3, #1
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4a09      	ldr	r2, [pc, #36]	; (8009a84 <USB_CoreReset+0x64>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d901      	bls.n	8009a68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e006      	b.n	8009a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d0f0      	beq.n	8009a56 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	00030d40 	.word	0x00030d40

08009a88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a98:	f005 f936 	bl	800ed08 <USBD_static_malloc>
 8009a9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d109      	bne.n	8009ab8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	32b0      	adds	r2, #176	; 0xb0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e0d4      	b.n	8009c62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ab8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009abc:	2100      	movs	r1, #0
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f005 ff9b 	bl	800f9fa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	32b0      	adds	r2, #176	; 0xb0
 8009ace:	68f9      	ldr	r1, [r7, #12]
 8009ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	32b0      	adds	r2, #176	; 0xb0
 8009ade:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7c1b      	ldrb	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d138      	bne.n	8009b62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009af0:	4b5e      	ldr	r3, [pc, #376]	; (8009c6c <USBD_CDC_Init+0x1e4>)
 8009af2:	7819      	ldrb	r1, [r3, #0]
 8009af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009af8:	2202      	movs	r2, #2
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f004 ffe1 	bl	800eac2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b00:	4b5a      	ldr	r3, [pc, #360]	; (8009c6c <USBD_CDC_Init+0x1e4>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	f003 020f 	and.w	r2, r3, #15
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4413      	add	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	440b      	add	r3, r1
 8009b14:	3324      	adds	r3, #36	; 0x24
 8009b16:	2201      	movs	r2, #1
 8009b18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b1a:	4b55      	ldr	r3, [pc, #340]	; (8009c70 <USBD_CDC_Init+0x1e8>)
 8009b1c:	7819      	ldrb	r1, [r3, #0]
 8009b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b22:	2202      	movs	r2, #2
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f004 ffcc 	bl	800eac2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b2a:	4b51      	ldr	r3, [pc, #324]	; (8009c70 <USBD_CDC_Init+0x1e8>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	f003 020f 	and.w	r2, r3, #15
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	4613      	mov	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	440b      	add	r3, r1
 8009b3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b42:	2201      	movs	r2, #1
 8009b44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b46:	4b4b      	ldr	r3, [pc, #300]	; (8009c74 <USBD_CDC_Init+0x1ec>)
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	f003 020f 	and.w	r2, r3, #15
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	4613      	mov	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	440b      	add	r3, r1
 8009b5a:	3326      	adds	r3, #38	; 0x26
 8009b5c:	2210      	movs	r2, #16
 8009b5e:	801a      	strh	r2, [r3, #0]
 8009b60:	e035      	b.n	8009bce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b62:	4b42      	ldr	r3, [pc, #264]	; (8009c6c <USBD_CDC_Init+0x1e4>)
 8009b64:	7819      	ldrb	r1, [r3, #0]
 8009b66:	2340      	movs	r3, #64	; 0x40
 8009b68:	2202      	movs	r2, #2
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f004 ffa9 	bl	800eac2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b70:	4b3e      	ldr	r3, [pc, #248]	; (8009c6c <USBD_CDC_Init+0x1e4>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	f003 020f 	and.w	r2, r3, #15
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	3324      	adds	r3, #36	; 0x24
 8009b86:	2201      	movs	r2, #1
 8009b88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b8a:	4b39      	ldr	r3, [pc, #228]	; (8009c70 <USBD_CDC_Init+0x1e8>)
 8009b8c:	7819      	ldrb	r1, [r3, #0]
 8009b8e:	2340      	movs	r3, #64	; 0x40
 8009b90:	2202      	movs	r2, #2
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f004 ff95 	bl	800eac2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b98:	4b35      	ldr	r3, [pc, #212]	; (8009c70 <USBD_CDC_Init+0x1e8>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	f003 020f 	and.w	r2, r3, #15
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009bb4:	4b2f      	ldr	r3, [pc, #188]	; (8009c74 <USBD_CDC_Init+0x1ec>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f003 020f 	and.w	r2, r3, #15
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	440b      	add	r3, r1
 8009bc8:	3326      	adds	r3, #38	; 0x26
 8009bca:	2210      	movs	r2, #16
 8009bcc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009bce:	4b29      	ldr	r3, [pc, #164]	; (8009c74 <USBD_CDC_Init+0x1ec>)
 8009bd0:	7819      	ldrb	r1, [r3, #0]
 8009bd2:	2308      	movs	r3, #8
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f004 ff73 	bl	800eac2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009bdc:	4b25      	ldr	r3, [pc, #148]	; (8009c74 <USBD_CDC_Init+0x1ec>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	f003 020f 	and.w	r2, r3, #15
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	440b      	add	r3, r1
 8009bf0:	3324      	adds	r3, #36	; 0x24
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	33b0      	adds	r3, #176	; 0xb0
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	e018      	b.n	8009c62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	7c1b      	ldrb	r3, [r3, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10a      	bne.n	8009c4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c38:	4b0d      	ldr	r3, [pc, #52]	; (8009c70 <USBD_CDC_Init+0x1e8>)
 8009c3a:	7819      	ldrb	r1, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f005 f82a 	bl	800eca0 <USBD_LL_PrepareReceive>
 8009c4c:	e008      	b.n	8009c60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c4e:	4b08      	ldr	r3, [pc, #32]	; (8009c70 <USBD_CDC_Init+0x1e8>)
 8009c50:	7819      	ldrb	r1, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c58:	2340      	movs	r3, #64	; 0x40
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f005 f820 	bl	800eca0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	200000b3 	.word	0x200000b3
 8009c70:	200000b4 	.word	0x200000b4
 8009c74:	200000b5 	.word	0x200000b5

08009c78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	460b      	mov	r3, r1
 8009c82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009c84:	4b3a      	ldr	r3, [pc, #232]	; (8009d70 <USBD_CDC_DeInit+0xf8>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f004 ff3f 	bl	800eb0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009c90:	4b37      	ldr	r3, [pc, #220]	; (8009d70 <USBD_CDC_DeInit+0xf8>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 020f 	and.w	r2, r3, #15
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	440b      	add	r3, r1
 8009ca4:	3324      	adds	r3, #36	; 0x24
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009caa:	4b32      	ldr	r3, [pc, #200]	; (8009d74 <USBD_CDC_DeInit+0xfc>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f004 ff2c 	bl	800eb0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009cb6:	4b2f      	ldr	r3, [pc, #188]	; (8009d74 <USBD_CDC_DeInit+0xfc>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	f003 020f 	and.w	r2, r3, #15
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	440b      	add	r3, r1
 8009cca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cce:	2200      	movs	r2, #0
 8009cd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009cd2:	4b29      	ldr	r3, [pc, #164]	; (8009d78 <USBD_CDC_DeInit+0x100>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f004 ff18 	bl	800eb0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009cde:	4b26      	ldr	r3, [pc, #152]	; (8009d78 <USBD_CDC_DeInit+0x100>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	f003 020f 	and.w	r2, r3, #15
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	3324      	adds	r3, #36	; 0x24
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009cf8:	4b1f      	ldr	r3, [pc, #124]	; (8009d78 <USBD_CDC_DeInit+0x100>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	f003 020f 	and.w	r2, r3, #15
 8009d00:	6879      	ldr	r1, [r7, #4]
 8009d02:	4613      	mov	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4413      	add	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	440b      	add	r3, r1
 8009d0c:	3326      	adds	r3, #38	; 0x26
 8009d0e:	2200      	movs	r2, #0
 8009d10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	32b0      	adds	r2, #176	; 0xb0
 8009d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01f      	beq.n	8009d64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	33b0      	adds	r3, #176	; 0xb0
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32b0      	adds	r2, #176	; 0xb0
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f004 ffec 	bl	800ed24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	32b0      	adds	r2, #176	; 0xb0
 8009d56:	2100      	movs	r1, #0
 8009d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	200000b3 	.word	0x200000b3
 8009d74:	200000b4 	.word	0x200000b4
 8009d78:	200000b5 	.word	0x200000b5

08009d7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	32b0      	adds	r2, #176	; 0xb0
 8009d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e0bf      	b.n	8009f2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d050      	beq.n	8009e5a <USBD_CDC_Setup+0xde>
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	f040 80af 	bne.w	8009f1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	88db      	ldrh	r3, [r3, #6]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d03a      	beq.n	8009e3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	b25b      	sxtb	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	da1b      	bge.n	8009e08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	33b0      	adds	r3, #176	; 0xb0
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009de6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	88d2      	ldrh	r2, [r2, #6]
 8009dec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	88db      	ldrh	r3, [r3, #6]
 8009df2:	2b07      	cmp	r3, #7
 8009df4:	bf28      	it	cs
 8009df6:	2307      	movcs	r3, #7
 8009df8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	89fa      	ldrh	r2, [r7, #14]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f001 fd89 	bl	800b918 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e06:	e090      	b.n	8009f2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	785a      	ldrb	r2, [r3, #1]
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	88db      	ldrh	r3, [r3, #6]
 8009e16:	2b3f      	cmp	r3, #63	; 0x3f
 8009e18:	d803      	bhi.n	8009e22 <USBD_CDC_Setup+0xa6>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	88db      	ldrh	r3, [r3, #6]
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	e000      	b.n	8009e24 <USBD_CDC_Setup+0xa8>
 8009e22:	2240      	movs	r2, #64	; 0x40
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e2a:	6939      	ldr	r1, [r7, #16]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009e32:	461a      	mov	r2, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 fd9b 	bl	800b970 <USBD_CtlPrepareRx>
      break;
 8009e3a:	e076      	b.n	8009f2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	33b0      	adds	r3, #176	; 0xb0
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	7850      	ldrb	r0, [r2, #1]
 8009e52:	2200      	movs	r2, #0
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	4798      	blx	r3
      break;
 8009e58:	e067      	b.n	8009f2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	2b0b      	cmp	r3, #11
 8009e60:	d851      	bhi.n	8009f06 <USBD_CDC_Setup+0x18a>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <USBD_CDC_Setup+0xec>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e99 	.word	0x08009e99
 8009e6c:	08009f15 	.word	0x08009f15
 8009e70:	08009f07 	.word	0x08009f07
 8009e74:	08009f07 	.word	0x08009f07
 8009e78:	08009f07 	.word	0x08009f07
 8009e7c:	08009f07 	.word	0x08009f07
 8009e80:	08009f07 	.word	0x08009f07
 8009e84:	08009f07 	.word	0x08009f07
 8009e88:	08009f07 	.word	0x08009f07
 8009e8c:	08009f07 	.word	0x08009f07
 8009e90:	08009ec3 	.word	0x08009ec3
 8009e94:	08009eed 	.word	0x08009eed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d107      	bne.n	8009eb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ea4:	f107 030a 	add.w	r3, r7, #10
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 fd33 	bl	800b918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009eb2:	e032      	b.n	8009f1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 fcbd 	bl	800b836 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	75fb      	strb	r3, [r7, #23]
          break;
 8009ec0:	e02b      	b.n	8009f1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d107      	bne.n	8009ede <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ece:	f107 030d 	add.w	r3, r7, #13
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 fd1e 	bl	800b918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009edc:	e01d      	b.n	8009f1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 fca8 	bl	800b836 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eea:	e016      	b.n	8009f1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d00f      	beq.n	8009f18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 fc9b 	bl	800b836 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f00:	2303      	movs	r3, #3
 8009f02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f04:	e008      	b.n	8009f18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 fc94 	bl	800b836 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	75fb      	strb	r3, [r7, #23]
          break;
 8009f12:	e002      	b.n	8009f1a <USBD_CDC_Setup+0x19e>
          break;
 8009f14:	bf00      	nop
 8009f16:	e008      	b.n	8009f2a <USBD_CDC_Setup+0x1ae>
          break;
 8009f18:	bf00      	nop
      }
      break;
 8009f1a:	e006      	b.n	8009f2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 fc89 	bl	800b836 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f24:	2303      	movs	r3, #3
 8009f26:	75fb      	strb	r3, [r7, #23]
      break;
 8009f28:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	32b0      	adds	r2, #176	; 0xb0
 8009f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e065      	b.n	800a02a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	32b0      	adds	r2, #176	; 0xb0
 8009f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	f003 020f 	and.w	r2, r3, #15
 8009f74:	6879      	ldr	r1, [r7, #4]
 8009f76:	4613      	mov	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	440b      	add	r3, r1
 8009f80:	3318      	adds	r3, #24
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d02f      	beq.n	8009fe8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	f003 020f 	and.w	r2, r3, #15
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	4613      	mov	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	440b      	add	r3, r1
 8009f9a:	3318      	adds	r3, #24
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	f003 010f 	and.w	r1, r3, #15
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	00db      	lsls	r3, r3, #3
 8009faa:	440b      	add	r3, r1
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4403      	add	r3, r0
 8009fb0:	3348      	adds	r3, #72	; 0x48
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8009fb8:	fb01 f303 	mul.w	r3, r1, r3
 8009fbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d112      	bne.n	8009fe8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	f003 020f 	and.w	r2, r3, #15
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	440b      	add	r3, r1
 8009fd4:	3318      	adds	r3, #24
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009fda:	78f9      	ldrb	r1, [r7, #3]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	2200      	movs	r2, #0
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f004 fe3c 	bl	800ec5e <USBD_LL_Transmit>
 8009fe6:	e01f      	b.n	800a028 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	33b0      	adds	r3, #176	; 0xb0
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d010      	beq.n	800a028 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	33b0      	adds	r3, #176	; 0xb0
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a024:	78fa      	ldrb	r2, [r7, #3]
 800a026:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	32b0      	adds	r2, #176	; 0xb0
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	32b0      	adds	r2, #176	; 0xb0
 800a058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a060:	2303      	movs	r3, #3
 800a062:	e01a      	b.n	800a09a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f004 fe3a 	bl	800ece2 <USBD_LL_GetRxDataSize>
 800a06e:	4602      	mov	r2, r0
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	33b0      	adds	r3, #176	; 0xb0
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a094:	4611      	mov	r1, r2
 800a096:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	32b0      	adds	r2, #176	; 0xb0
 800a0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e025      	b.n	800a110 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	33b0      	adds	r3, #176	; 0xb0
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01a      	beq.n	800a10e <USBD_CDC_EP0_RxReady+0x6c>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0de:	2bff      	cmp	r3, #255	; 0xff
 800a0e0:	d015      	beq.n	800a10e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	33b0      	adds	r3, #176	; 0xb0
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a0fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a102:	b292      	uxth	r2, r2
 800a104:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	22ff      	movs	r2, #255	; 0xff
 800a10a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a120:	2182      	movs	r1, #130	; 0x82
 800a122:	4818      	ldr	r0, [pc, #96]	; (800a184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a124:	f000 fd4f 	bl	800abc6 <USBD_GetEpDesc>
 800a128:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a12a:	2101      	movs	r1, #1
 800a12c:	4815      	ldr	r0, [pc, #84]	; (800a184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a12e:	f000 fd4a 	bl	800abc6 <USBD_GetEpDesc>
 800a132:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a134:	2181      	movs	r1, #129	; 0x81
 800a136:	4813      	ldr	r0, [pc, #76]	; (800a184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a138:	f000 fd45 	bl	800abc6 <USBD_GetEpDesc>
 800a13c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2210      	movs	r2, #16
 800a148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d006      	beq.n	800a15e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	2200      	movs	r2, #0
 800a154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a158:	711a      	strb	r2, [r3, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d006      	beq.n	800a172 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a16c:	711a      	strb	r2, [r3, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2243      	movs	r2, #67	; 0x43
 800a176:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a178:	4b02      	ldr	r3, [pc, #8]	; (800a184 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000070 	.word	0x20000070

0800a188 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a190:	2182      	movs	r1, #130	; 0x82
 800a192:	4818      	ldr	r0, [pc, #96]	; (800a1f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a194:	f000 fd17 	bl	800abc6 <USBD_GetEpDesc>
 800a198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a19a:	2101      	movs	r1, #1
 800a19c:	4815      	ldr	r0, [pc, #84]	; (800a1f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a19e:	f000 fd12 	bl	800abc6 <USBD_GetEpDesc>
 800a1a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1a4:	2181      	movs	r1, #129	; 0x81
 800a1a6:	4813      	ldr	r0, [pc, #76]	; (800a1f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1a8:	f000 fd0d 	bl	800abc6 <USBD_GetEpDesc>
 800a1ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2210      	movs	r2, #16
 800a1b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	711a      	strb	r2, [r3, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f042 0202 	orr.w	r2, r2, #2
 800a1cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d006      	beq.n	800a1e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	711a      	strb	r2, [r3, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f042 0202 	orr.w	r2, r2, #2
 800a1e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2243      	movs	r2, #67	; 0x43
 800a1e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1e8:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20000070 	.word	0x20000070

0800a1f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a200:	2182      	movs	r1, #130	; 0x82
 800a202:	4818      	ldr	r0, [pc, #96]	; (800a264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a204:	f000 fcdf 	bl	800abc6 <USBD_GetEpDesc>
 800a208:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a20a:	2101      	movs	r1, #1
 800a20c:	4815      	ldr	r0, [pc, #84]	; (800a264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a20e:	f000 fcda 	bl	800abc6 <USBD_GetEpDesc>
 800a212:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a214:	2181      	movs	r1, #129	; 0x81
 800a216:	4813      	ldr	r0, [pc, #76]	; (800a264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a218:	f000 fcd5 	bl	800abc6 <USBD_GetEpDesc>
 800a21c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	2210      	movs	r2, #16
 800a228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d006      	beq.n	800a23e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	2200      	movs	r2, #0
 800a234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a238:	711a      	strb	r2, [r3, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d006      	beq.n	800a252 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a24c:	711a      	strb	r2, [r3, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2243      	movs	r2, #67	; 0x43
 800a256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a258:	4b02      	ldr	r3, [pc, #8]	; (800a264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000070 	.word	0x20000070

0800a268 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	220a      	movs	r2, #10
 800a274:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a276:	4b03      	ldr	r3, [pc, #12]	; (800a284 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	2000002c 	.word	0x2000002c

0800a288 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a298:	2303      	movs	r3, #3
 800a29a:	e009      	b.n	800a2b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	33b0      	adds	r3, #176	; 0xb0
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	32b0      	adds	r2, #176	; 0xb0
 800a2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e008      	b.n	800a2f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	371c      	adds	r7, #28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	32b0      	adds	r2, #176	; 0xb0
 800a314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a318:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	e004      	b.n	800a32e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3714      	adds	r7, #20
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr
	...

0800a33c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	32b0      	adds	r2, #176	; 0xb0
 800a34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a352:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a354:	2301      	movs	r3, #1
 800a356:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	32b0      	adds	r2, #176	; 0xb0
 800a362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e025      	b.n	800a3ba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a374:	2b00      	cmp	r3, #0
 800a376:	d11f      	bne.n	800a3b8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a380:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <USBD_CDC_TransmitPacket+0x88>)
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 020f 	and.w	r2, r3, #15
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4613      	mov	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4403      	add	r3, r0
 800a39a:	3318      	adds	r3, #24
 800a39c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a39e:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <USBD_CDC_TransmitPacket+0x88>)
 800a3a0:	7819      	ldrb	r1, [r3, #0]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f004 fc55 	bl	800ec5e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	200000b3 	.word	0x200000b3

0800a3c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	32b0      	adds	r2, #176	; 0xb0
 800a3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	32b0      	adds	r2, #176	; 0xb0
 800a3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e018      	b.n	800a428 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	7c1b      	ldrb	r3, [r3, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10a      	bne.n	800a414 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3fe:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <USBD_CDC_ReceivePacket+0x68>)
 800a400:	7819      	ldrb	r1, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f004 fc47 	bl	800eca0 <USBD_LL_PrepareReceive>
 800a412:	e008      	b.n	800a426 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a414:	4b06      	ldr	r3, [pc, #24]	; (800a430 <USBD_CDC_ReceivePacket+0x68>)
 800a416:	7819      	ldrb	r1, [r3, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a41e:	2340      	movs	r3, #64	; 0x40
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f004 fc3d 	bl	800eca0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	200000b4 	.word	0x200000b4

0800a434 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a448:	2303      	movs	r3, #3
 800a44a:	e01f      	b.n	800a48c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	79fa      	ldrb	r2, [r7, #7]
 800a47e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f004 fab7 	bl	800e9f4 <USBD_LL_Init>
 800a486:	4603      	mov	r3, r0
 800a488:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e025      	b.n	800a4f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	32ae      	adds	r2, #174	; 0xae
 800a4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00f      	beq.n	800a4e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	32ae      	adds	r2, #174	; 0xae
 800a4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	f107 020e 	add.w	r2, r7, #14
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4798      	blx	r3
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f004 fabf 	bl	800ea8c <USBD_LL_Start>
 800a50e:	4603      	mov	r3, r0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a520:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a522:	4618      	mov	r0, r3
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a544:	2b00      	cmp	r3, #0
 800a546:	d009      	beq.n	800a55c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	4611      	mov	r1, r2
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	460b      	mov	r3, r1
 800a570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	78fa      	ldrb	r2, [r7, #3]
 800a580:	4611      	mov	r1, r2
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	4798      	blx	r3
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a58c:	2303      	movs	r3, #3
 800a58e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f001 f908 	bl	800b7c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5ce:	f003 031f 	and.w	r3, r3, #31
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d01a      	beq.n	800a60c <USBD_LL_SetupStage+0x72>
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d822      	bhi.n	800a620 <USBD_LL_SetupStage+0x86>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d002      	beq.n	800a5e4 <USBD_LL_SetupStage+0x4a>
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d00a      	beq.n	800a5f8 <USBD_LL_SetupStage+0x5e>
 800a5e2:	e01d      	b.n	800a620 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fb5f 	bl	800acb0 <USBD_StdDevReq>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f6:	e020      	b.n	800a63a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5fe:	4619      	mov	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fbc7 	bl	800ad94 <USBD_StdItfReq>
 800a606:	4603      	mov	r3, r0
 800a608:	73fb      	strb	r3, [r7, #15]
      break;
 800a60a:	e016      	b.n	800a63a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a612:	4619      	mov	r1, r3
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fc29 	bl	800ae6c <USBD_StdEPReq>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73fb      	strb	r3, [r7, #15]
      break;
 800a61e:	e00c      	b.n	800a63a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a626:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f004 fa8c 	bl	800eb4c <USBD_LL_StallEP>
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]
      break;
 800a638:	bf00      	nop
  }

  return ret;
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	460b      	mov	r3, r1
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a656:	7afb      	ldrb	r3, [r7, #11]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d16e      	bne.n	800a73a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a662:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	f040 8098 	bne.w	800a7a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d913      	bls.n	800a6a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	1ad2      	subs	r2, r2, r3
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	4293      	cmp	r3, r2
 800a694:	bf28      	it	cs
 800a696:	4613      	movcs	r3, r2
 800a698:	461a      	mov	r2, r3
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f001 f984 	bl	800b9aa <USBD_CtlContinueRx>
 800a6a2:	e07d      	b.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6aa:	f003 031f 	and.w	r3, r3, #31
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d014      	beq.n	800a6dc <USBD_LL_DataOutStage+0x98>
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d81d      	bhi.n	800a6f2 <USBD_LL_DataOutStage+0xae>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <USBD_LL_DataOutStage+0x7c>
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d003      	beq.n	800a6c6 <USBD_LL_DataOutStage+0x82>
 800a6be:	e018      	b.n	800a6f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	75bb      	strb	r3, [r7, #22]
            break;
 800a6c4:	e018      	b.n	800a6f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 fa5e 	bl	800ab92 <USBD_CoreFindIF>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	75bb      	strb	r3, [r7, #22]
            break;
 800a6da:	e00d      	b.n	800a6f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 fa60 	bl	800abac <USBD_CoreFindEP>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	75bb      	strb	r3, [r7, #22]
            break;
 800a6f0:	e002      	b.n	800a6f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	75bb      	strb	r3, [r7, #22]
            break;
 800a6f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a6f8:	7dbb      	ldrb	r3, [r7, #22]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d119      	bne.n	800a732 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b03      	cmp	r3, #3
 800a708:	d113      	bne.n	800a732 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a70a:	7dba      	ldrb	r2, [r7, #22]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	32ae      	adds	r2, #174	; 0xae
 800a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00b      	beq.n	800a732 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a71a:	7dba      	ldrb	r2, [r7, #22]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a722:	7dba      	ldrb	r2, [r7, #22]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	32ae      	adds	r2, #174	; 0xae
 800a728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f001 f94a 	bl	800b9cc <USBD_CtlSendStatus>
 800a738:	e032      	b.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a73a:	7afb      	ldrb	r3, [r7, #11]
 800a73c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a740:	b2db      	uxtb	r3, r3
 800a742:	4619      	mov	r1, r3
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 fa31 	bl	800abac <USBD_CoreFindEP>
 800a74a:	4603      	mov	r3, r0
 800a74c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a74e:	7dbb      	ldrb	r3, [r7, #22]
 800a750:	2bff      	cmp	r3, #255	; 0xff
 800a752:	d025      	beq.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
 800a754:	7dbb      	ldrb	r3, [r7, #22]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d122      	bne.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b03      	cmp	r3, #3
 800a764:	d117      	bne.n	800a796 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a766:	7dba      	ldrb	r2, [r7, #22]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	32ae      	adds	r2, #174	; 0xae
 800a76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00f      	beq.n	800a796 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a776:	7dba      	ldrb	r2, [r7, #22]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a77e:	7dba      	ldrb	r2, [r7, #22]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	32ae      	adds	r2, #174	; 0xae
 800a784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	7afa      	ldrb	r2, [r7, #11]
 800a78c:	4611      	mov	r1, r2
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	4798      	blx	r3
 800a792:	4603      	mov	r3, r0
 800a794:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a79c:	7dfb      	ldrb	r3, [r7, #23]
 800a79e:	e000      	b.n	800a7a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a7b8:	7afb      	ldrb	r3, [r7, #11]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d16f      	bne.n	800a89e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3314      	adds	r3, #20
 800a7c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d15a      	bne.n	800a884 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	689a      	ldr	r2, [r3, #8]
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d914      	bls.n	800a804 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	1ad2      	subs	r2, r2, r3
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f001 f8ac 	bl	800b94e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f004 fa4f 	bl	800eca0 <USBD_LL_PrepareReceive>
 800a802:	e03f      	b.n	800a884 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	68da      	ldr	r2, [r3, #12]
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d11c      	bne.n	800a84a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a818:	429a      	cmp	r2, r3
 800a81a:	d316      	bcc.n	800a84a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a826:	429a      	cmp	r2, r3
 800a828:	d20f      	bcs.n	800a84a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a82a:	2200      	movs	r2, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f001 f88d 	bl	800b94e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a83c:	2300      	movs	r3, #0
 800a83e:	2200      	movs	r2, #0
 800a840:	2100      	movs	r1, #0
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f004 fa2c 	bl	800eca0 <USBD_LL_PrepareReceive>
 800a848:	e01c      	b.n	800a884 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b03      	cmp	r3, #3
 800a854:	d10f      	bne.n	800a876 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d009      	beq.n	800a876 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a876:	2180      	movs	r1, #128	; 0x80
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f004 f967 	bl	800eb4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f001 f8b7 	bl	800b9f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d03a      	beq.n	800a904 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f7ff fe42 	bl	800a518 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a89c:	e032      	b.n	800a904 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f000 f97f 	bl	800abac <USBD_CoreFindEP>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	2bff      	cmp	r3, #255	; 0xff
 800a8b6:	d025      	beq.n	800a904 <USBD_LL_DataInStage+0x15a>
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d122      	bne.n	800a904 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d11c      	bne.n	800a904 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a8ca:	7dfa      	ldrb	r2, [r7, #23]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	32ae      	adds	r2, #174	; 0xae
 800a8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d014      	beq.n	800a904 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a8da:	7dfa      	ldrb	r2, [r7, #23]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a8e2:	7dfa      	ldrb	r2, [r7, #23]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	32ae      	adds	r2, #174	; 0xae
 800a8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	7afa      	ldrb	r2, [r7, #11]
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	4798      	blx	r3
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a8fa:	7dbb      	ldrb	r3, [r7, #22]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a900:	7dbb      	ldrb	r3, [r7, #22]
 800a902:	e000      	b.n	800a906 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a946:	2b00      	cmp	r3, #0
 800a948:	d014      	beq.n	800a974 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00e      	beq.n	800a974 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6852      	ldr	r2, [r2, #4]
 800a962:	b2d2      	uxtb	r2, r2
 800a964:	4611      	mov	r1, r2
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	4798      	blx	r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a970:	2303      	movs	r3, #3
 800a972:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a974:	2340      	movs	r3, #64	; 0x40
 800a976:	2200      	movs	r2, #0
 800a978:	2100      	movs	r1, #0
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f004 f8a1 	bl	800eac2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2240      	movs	r2, #64	; 0x40
 800a98c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a990:	2340      	movs	r3, #64	; 0x40
 800a992:	2200      	movs	r2, #0
 800a994:	2180      	movs	r1, #128	; 0x80
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f004 f893 	bl	800eac2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2240      	movs	r2, #64	; 0x40
 800a9a6:	621a      	str	r2, [r3, #32]

  return ret;
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b083      	sub	sp, #12
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2204      	movs	r2, #4
 800a9ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b04      	cmp	r3, #4
 800aa10:	d106      	bne.n	800aa20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d110      	bne.n	800aa64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00b      	beq.n	800aa64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa52:	69db      	ldr	r3, [r3, #28]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d005      	beq.n	800aa64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	460b      	mov	r3, r1
 800aa78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	32ae      	adds	r2, #174	; 0xae
 800aa84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e01c      	b.n	800aaca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d115      	bne.n	800aac8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	32ae      	adds	r2, #174	; 0xae
 800aaa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaaa:	6a1b      	ldr	r3, [r3, #32]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	32ae      	adds	r2, #174	; 0xae
 800aaba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	78fa      	ldrb	r2, [r7, #3]
 800aac2:	4611      	mov	r1, r2
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	32ae      	adds	r2, #174	; 0xae
 800aae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e01c      	b.n	800ab2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d115      	bne.n	800ab2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	32ae      	adds	r2, #174	; 0xae
 800ab0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	32ae      	adds	r2, #174	; 0xae
 800ab1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	78fa      	ldrb	r2, [r7, #3]
 800ab26:	4611      	mov	r1, r2
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00e      	beq.n	800ab88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	6852      	ldr	r2, [r2, #4]
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	4611      	mov	r1, r2
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	4798      	blx	r3
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab84:	2303      	movs	r3, #3
 800ab86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abba:	4618      	mov	r0, r3
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b086      	sub	sp, #24
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	460b      	mov	r3, r1
 800abd0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	885b      	ldrh	r3, [r3, #2]
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	429a      	cmp	r2, r3
 800abec:	d920      	bls.n	800ac30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800abf6:	e013      	b.n	800ac20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800abf8:	f107 030a 	add.w	r3, r7, #10
 800abfc:	4619      	mov	r1, r3
 800abfe:	6978      	ldr	r0, [r7, #20]
 800ac00:	f000 f81b 	bl	800ac3a <USBD_GetNextDesc>
 800ac04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	785b      	ldrb	r3, [r3, #1]
 800ac0a:	2b05      	cmp	r3, #5
 800ac0c:	d108      	bne.n	800ac20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	789b      	ldrb	r3, [r3, #2]
 800ac16:	78fa      	ldrb	r2, [r7, #3]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d008      	beq.n	800ac2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	885b      	ldrh	r3, [r3, #2]
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	897b      	ldrh	r3, [r7, #10]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d8e5      	bhi.n	800abf8 <USBD_GetEpDesc+0x32>
 800ac2c:	e000      	b.n	800ac30 <USBD_GetEpDesc+0x6a>
          break;
 800ac2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac30:	693b      	ldr	r3, [r7, #16]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	881a      	ldrh	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	4413      	add	r3, r2
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4413      	add	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac66:	68fb      	ldr	r3, [r7, #12]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3714      	adds	r7, #20
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b087      	sub	sp, #28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac92:	8a3b      	ldrh	r3, [r7, #16]
 800ac94:	021b      	lsls	r3, r3, #8
 800ac96:	b21a      	sxth	r2, r3
 800ac98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	b21b      	sxth	r3, r3
 800aca0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aca2:	89fb      	ldrh	r3, [r7, #14]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	371c      	adds	r7, #28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acc6:	2b40      	cmp	r3, #64	; 0x40
 800acc8:	d005      	beq.n	800acd6 <USBD_StdDevReq+0x26>
 800acca:	2b40      	cmp	r3, #64	; 0x40
 800accc:	d857      	bhi.n	800ad7e <USBD_StdDevReq+0xce>
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00f      	beq.n	800acf2 <USBD_StdDevReq+0x42>
 800acd2:	2b20      	cmp	r3, #32
 800acd4:	d153      	bne.n	800ad7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	32ae      	adds	r2, #174	; 0xae
 800ace0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	4798      	blx	r3
 800acec:	4603      	mov	r3, r0
 800acee:	73fb      	strb	r3, [r7, #15]
      break;
 800acf0:	e04a      	b.n	800ad88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	785b      	ldrb	r3, [r3, #1]
 800acf6:	2b09      	cmp	r3, #9
 800acf8:	d83b      	bhi.n	800ad72 <USBD_StdDevReq+0xc2>
 800acfa:	a201      	add	r2, pc, #4	; (adr r2, 800ad00 <USBD_StdDevReq+0x50>)
 800acfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad00:	0800ad55 	.word	0x0800ad55
 800ad04:	0800ad69 	.word	0x0800ad69
 800ad08:	0800ad73 	.word	0x0800ad73
 800ad0c:	0800ad5f 	.word	0x0800ad5f
 800ad10:	0800ad73 	.word	0x0800ad73
 800ad14:	0800ad33 	.word	0x0800ad33
 800ad18:	0800ad29 	.word	0x0800ad29
 800ad1c:	0800ad73 	.word	0x0800ad73
 800ad20:	0800ad4b 	.word	0x0800ad4b
 800ad24:	0800ad3d 	.word	0x0800ad3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa3c 	bl	800b1a8 <USBD_GetDescriptor>
          break;
 800ad30:	e024      	b.n	800ad7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fba1 	bl	800b47c <USBD_SetAddress>
          break;
 800ad3a:	e01f      	b.n	800ad7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fbe0 	bl	800b504 <USBD_SetConfig>
 800ad44:	4603      	mov	r3, r0
 800ad46:	73fb      	strb	r3, [r7, #15]
          break;
 800ad48:	e018      	b.n	800ad7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 fc83 	bl	800b658 <USBD_GetConfig>
          break;
 800ad52:	e013      	b.n	800ad7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fcb4 	bl	800b6c4 <USBD_GetStatus>
          break;
 800ad5c:	e00e      	b.n	800ad7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fce3 	bl	800b72c <USBD_SetFeature>
          break;
 800ad66:	e009      	b.n	800ad7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fd07 	bl	800b77e <USBD_ClrFeature>
          break;
 800ad70:	e004      	b.n	800ad7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fd5e 	bl	800b836 <USBD_CtlError>
          break;
 800ad7a:	bf00      	nop
      }
      break;
 800ad7c:	e004      	b.n	800ad88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fd58 	bl	800b836 <USBD_CtlError>
      break;
 800ad86:	bf00      	nop
  }

  return ret;
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop

0800ad94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adaa:	2b40      	cmp	r3, #64	; 0x40
 800adac:	d005      	beq.n	800adba <USBD_StdItfReq+0x26>
 800adae:	2b40      	cmp	r3, #64	; 0x40
 800adb0:	d852      	bhi.n	800ae58 <USBD_StdItfReq+0xc4>
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <USBD_StdItfReq+0x26>
 800adb6:	2b20      	cmp	r3, #32
 800adb8:	d14e      	bne.n	800ae58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	3b01      	subs	r3, #1
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d840      	bhi.n	800ae4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	889b      	ldrh	r3, [r3, #4]
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b01      	cmp	r3, #1
 800add0:	d836      	bhi.n	800ae40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	889b      	ldrh	r3, [r3, #4]
 800add6:	b2db      	uxtb	r3, r3
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7ff fed9 	bl	800ab92 <USBD_CoreFindIF>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ade4:	7bbb      	ldrb	r3, [r7, #14]
 800ade6:	2bff      	cmp	r3, #255	; 0xff
 800ade8:	d01d      	beq.n	800ae26 <USBD_StdItfReq+0x92>
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d11a      	bne.n	800ae26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800adf0:	7bba      	ldrb	r2, [r7, #14]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	32ae      	adds	r2, #174	; 0xae
 800adf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00f      	beq.n	800ae20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae00:	7bba      	ldrb	r2, [r7, #14]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae08:	7bba      	ldrb	r2, [r7, #14]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	32ae      	adds	r2, #174	; 0xae
 800ae0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	4798      	blx	r3
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae1e:	e004      	b.n	800ae2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae20:	2303      	movs	r3, #3
 800ae22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae24:	e001      	b.n	800ae2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae26:	2303      	movs	r3, #3
 800ae28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	88db      	ldrh	r3, [r3, #6]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d110      	bne.n	800ae54 <USBD_StdItfReq+0xc0>
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10d      	bne.n	800ae54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fdc7 	bl	800b9cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae3e:	e009      	b.n	800ae54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fcf7 	bl	800b836 <USBD_CtlError>
          break;
 800ae48:	e004      	b.n	800ae54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fcf2 	bl	800b836 <USBD_CtlError>
          break;
 800ae52:	e000      	b.n	800ae56 <USBD_StdItfReq+0xc2>
          break;
 800ae54:	bf00      	nop
      }
      break;
 800ae56:	e004      	b.n	800ae62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fceb 	bl	800b836 <USBD_CtlError>
      break;
 800ae60:	bf00      	nop
  }

  return ret;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	889b      	ldrh	r3, [r3, #4]
 800ae7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae88:	2b40      	cmp	r3, #64	; 0x40
 800ae8a:	d007      	beq.n	800ae9c <USBD_StdEPReq+0x30>
 800ae8c:	2b40      	cmp	r3, #64	; 0x40
 800ae8e:	f200 817f 	bhi.w	800b190 <USBD_StdEPReq+0x324>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d02a      	beq.n	800aeec <USBD_StdEPReq+0x80>
 800ae96:	2b20      	cmp	r3, #32
 800ae98:	f040 817a 	bne.w	800b190 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff fe83 	bl	800abac <USBD_CoreFindEP>
 800aea6:	4603      	mov	r3, r0
 800aea8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aeaa:	7b7b      	ldrb	r3, [r7, #13]
 800aeac:	2bff      	cmp	r3, #255	; 0xff
 800aeae:	f000 8174 	beq.w	800b19a <USBD_StdEPReq+0x32e>
 800aeb2:	7b7b      	ldrb	r3, [r7, #13]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f040 8170 	bne.w	800b19a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aeba:	7b7a      	ldrb	r2, [r7, #13]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aec2:	7b7a      	ldrb	r2, [r7, #13]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	32ae      	adds	r2, #174	; 0xae
 800aec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 8163 	beq.w	800b19a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aed4:	7b7a      	ldrb	r2, [r7, #13]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	32ae      	adds	r2, #174	; 0xae
 800aeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
 800aee6:	4603      	mov	r3, r0
 800aee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aeea:	e156      	b.n	800b19a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	785b      	ldrb	r3, [r3, #1]
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d008      	beq.n	800af06 <USBD_StdEPReq+0x9a>
 800aef4:	2b03      	cmp	r3, #3
 800aef6:	f300 8145 	bgt.w	800b184 <USBD_StdEPReq+0x318>
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 809b 	beq.w	800b036 <USBD_StdEPReq+0x1ca>
 800af00:	2b01      	cmp	r3, #1
 800af02:	d03c      	beq.n	800af7e <USBD_StdEPReq+0x112>
 800af04:	e13e      	b.n	800b184 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d002      	beq.n	800af18 <USBD_StdEPReq+0xac>
 800af12:	2b03      	cmp	r3, #3
 800af14:	d016      	beq.n	800af44 <USBD_StdEPReq+0xd8>
 800af16:	e02c      	b.n	800af72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00d      	beq.n	800af3a <USBD_StdEPReq+0xce>
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	2b80      	cmp	r3, #128	; 0x80
 800af22:	d00a      	beq.n	800af3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f003 fe0f 	bl	800eb4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af2e:	2180      	movs	r1, #128	; 0x80
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f003 fe0b 	bl	800eb4c <USBD_LL_StallEP>
 800af36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af38:	e020      	b.n	800af7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fc7a 	bl	800b836 <USBD_CtlError>
              break;
 800af42:	e01b      	b.n	800af7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	885b      	ldrh	r3, [r3, #2]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10e      	bne.n	800af6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00b      	beq.n	800af6a <USBD_StdEPReq+0xfe>
 800af52:	7bbb      	ldrb	r3, [r7, #14]
 800af54:	2b80      	cmp	r3, #128	; 0x80
 800af56:	d008      	beq.n	800af6a <USBD_StdEPReq+0xfe>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	88db      	ldrh	r3, [r3, #6]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d104      	bne.n	800af6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af60:	7bbb      	ldrb	r3, [r7, #14]
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f003 fdf1 	bl	800eb4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fd2e 	bl	800b9cc <USBD_CtlSendStatus>

              break;
 800af70:	e004      	b.n	800af7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fc5e 	bl	800b836 <USBD_CtlError>
              break;
 800af7a:	bf00      	nop
          }
          break;
 800af7c:	e107      	b.n	800b18e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b02      	cmp	r3, #2
 800af88:	d002      	beq.n	800af90 <USBD_StdEPReq+0x124>
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	d016      	beq.n	800afbc <USBD_StdEPReq+0x150>
 800af8e:	e04b      	b.n	800b028 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af90:	7bbb      	ldrb	r3, [r7, #14]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00d      	beq.n	800afb2 <USBD_StdEPReq+0x146>
 800af96:	7bbb      	ldrb	r3, [r7, #14]
 800af98:	2b80      	cmp	r3, #128	; 0x80
 800af9a:	d00a      	beq.n	800afb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f003 fdd3 	bl	800eb4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afa6:	2180      	movs	r1, #128	; 0x80
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f003 fdcf 	bl	800eb4c <USBD_LL_StallEP>
 800afae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afb0:	e040      	b.n	800b034 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fc3e 	bl	800b836 <USBD_CtlError>
              break;
 800afba:	e03b      	b.n	800b034 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	885b      	ldrh	r3, [r3, #2]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d136      	bne.n	800b032 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d004      	beq.n	800afd8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afce:	7bbb      	ldrb	r3, [r7, #14]
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f003 fdd9 	bl	800eb8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fcf7 	bl	800b9cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff fde2 	bl	800abac <USBD_CoreFindEP>
 800afe8:	4603      	mov	r3, r0
 800afea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afec:	7b7b      	ldrb	r3, [r7, #13]
 800afee:	2bff      	cmp	r3, #255	; 0xff
 800aff0:	d01f      	beq.n	800b032 <USBD_StdEPReq+0x1c6>
 800aff2:	7b7b      	ldrb	r3, [r7, #13]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d11c      	bne.n	800b032 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aff8:	7b7a      	ldrb	r2, [r7, #13]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b000:	7b7a      	ldrb	r2, [r7, #13]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	32ae      	adds	r2, #174	; 0xae
 800b006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d010      	beq.n	800b032 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b010:	7b7a      	ldrb	r2, [r7, #13]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	32ae      	adds	r2, #174	; 0xae
 800b016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	4798      	blx	r3
 800b022:	4603      	mov	r3, r0
 800b024:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b026:	e004      	b.n	800b032 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fc03 	bl	800b836 <USBD_CtlError>
              break;
 800b030:	e000      	b.n	800b034 <USBD_StdEPReq+0x1c8>
              break;
 800b032:	bf00      	nop
          }
          break;
 800b034:	e0ab      	b.n	800b18e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d002      	beq.n	800b048 <USBD_StdEPReq+0x1dc>
 800b042:	2b03      	cmp	r3, #3
 800b044:	d032      	beq.n	800b0ac <USBD_StdEPReq+0x240>
 800b046:	e097      	b.n	800b178 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b048:	7bbb      	ldrb	r3, [r7, #14]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d007      	beq.n	800b05e <USBD_StdEPReq+0x1f2>
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
 800b050:	2b80      	cmp	r3, #128	; 0x80
 800b052:	d004      	beq.n	800b05e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fbed 	bl	800b836 <USBD_CtlError>
                break;
 800b05c:	e091      	b.n	800b182 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b05e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b062:	2b00      	cmp	r3, #0
 800b064:	da0b      	bge.n	800b07e <USBD_StdEPReq+0x212>
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	3310      	adds	r3, #16
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	4413      	add	r3, r2
 800b07a:	3304      	adds	r3, #4
 800b07c:	e00b      	b.n	800b096 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b07e:	7bbb      	ldrb	r3, [r7, #14]
 800b080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b084:	4613      	mov	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	4413      	add	r3, r2
 800b094:	3304      	adds	r3, #4
 800b096:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2200      	movs	r2, #0
 800b09c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2202      	movs	r2, #2
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fc37 	bl	800b918 <USBD_CtlSendData>
              break;
 800b0aa:	e06a      	b.n	800b182 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	da11      	bge.n	800b0d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	f003 020f 	and.w	r2, r3, #15
 800b0ba:	6879      	ldr	r1, [r7, #4]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	440b      	add	r3, r1
 800b0c6:	3324      	adds	r3, #36	; 0x24
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d117      	bne.n	800b0fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fbb0 	bl	800b836 <USBD_CtlError>
                  break;
 800b0d6:	e054      	b.n	800b182 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0d8:	7bbb      	ldrb	r3, [r7, #14]
 800b0da:	f003 020f 	and.w	r2, r3, #15
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	440b      	add	r3, r1
 800b0ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0ee:	881b      	ldrh	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d104      	bne.n	800b0fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fb9d 	bl	800b836 <USBD_CtlError>
                  break;
 800b0fc:	e041      	b.n	800b182 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b102:	2b00      	cmp	r3, #0
 800b104:	da0b      	bge.n	800b11e <USBD_StdEPReq+0x2b2>
 800b106:	7bbb      	ldrb	r3, [r7, #14]
 800b108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b10c:	4613      	mov	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	3310      	adds	r3, #16
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	4413      	add	r3, r2
 800b11a:	3304      	adds	r3, #4
 800b11c:	e00b      	b.n	800b136 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b124:	4613      	mov	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	4413      	add	r3, r2
 800b134:	3304      	adds	r3, #4
 800b136:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <USBD_StdEPReq+0x2d8>
 800b13e:	7bbb      	ldrb	r3, [r7, #14]
 800b140:	2b80      	cmp	r3, #128	; 0x80
 800b142:	d103      	bne.n	800b14c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	e00e      	b.n	800b16a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f003 fd39 	bl	800ebc8 <USBD_LL_IsStallEP>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2201      	movs	r2, #1
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	e002      	b.n	800b16a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2202      	movs	r2, #2
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fbd1 	bl	800b918 <USBD_CtlSendData>
              break;
 800b176:	e004      	b.n	800b182 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fb5b 	bl	800b836 <USBD_CtlError>
              break;
 800b180:	bf00      	nop
          }
          break;
 800b182:	e004      	b.n	800b18e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fb55 	bl	800b836 <USBD_CtlError>
          break;
 800b18c:	bf00      	nop
      }
      break;
 800b18e:	e005      	b.n	800b19c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fb4f 	bl	800b836 <USBD_CtlError>
      break;
 800b198:	e000      	b.n	800b19c <USBD_StdEPReq+0x330>
      break;
 800b19a:	bf00      	nop
  }

  return ret;
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
	...

0800b1a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	885b      	ldrh	r3, [r3, #2]
 800b1c2:	0a1b      	lsrs	r3, r3, #8
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	2b06      	cmp	r3, #6
 800b1ca:	f200 8128 	bhi.w	800b41e <USBD_GetDescriptor+0x276>
 800b1ce:	a201      	add	r2, pc, #4	; (adr r2, 800b1d4 <USBD_GetDescriptor+0x2c>)
 800b1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d4:	0800b1f1 	.word	0x0800b1f1
 800b1d8:	0800b209 	.word	0x0800b209
 800b1dc:	0800b249 	.word	0x0800b249
 800b1e0:	0800b41f 	.word	0x0800b41f
 800b1e4:	0800b41f 	.word	0x0800b41f
 800b1e8:	0800b3bf 	.word	0x0800b3bf
 800b1ec:	0800b3eb 	.word	0x0800b3eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	7c12      	ldrb	r2, [r2, #16]
 800b1fc:	f107 0108 	add.w	r1, r7, #8
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	60f8      	str	r0, [r7, #12]
      break;
 800b206:	e112      	b.n	800b42e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	7c1b      	ldrb	r3, [r3, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10d      	bne.n	800b22c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b218:	f107 0208 	add.w	r2, r7, #8
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
 800b220:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3301      	adds	r3, #1
 800b226:	2202      	movs	r2, #2
 800b228:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b22a:	e100      	b.n	800b42e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b234:	f107 0208 	add.w	r2, r7, #8
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	2202      	movs	r2, #2
 800b244:	701a      	strb	r2, [r3, #0]
      break;
 800b246:	e0f2      	b.n	800b42e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	885b      	ldrh	r3, [r3, #2]
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b05      	cmp	r3, #5
 800b250:	f200 80ac 	bhi.w	800b3ac <USBD_GetDescriptor+0x204>
 800b254:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <USBD_GetDescriptor+0xb4>)
 800b256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25a:	bf00      	nop
 800b25c:	0800b275 	.word	0x0800b275
 800b260:	0800b2a9 	.word	0x0800b2a9
 800b264:	0800b2dd 	.word	0x0800b2dd
 800b268:	0800b311 	.word	0x0800b311
 800b26c:	0800b345 	.word	0x0800b345
 800b270:	0800b379 	.word	0x0800b379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	7c12      	ldrb	r2, [r2, #16]
 800b28c:	f107 0108 	add.w	r1, r7, #8
 800b290:	4610      	mov	r0, r2
 800b292:	4798      	blx	r3
 800b294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b296:	e091      	b.n	800b3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 facb 	bl	800b836 <USBD_CtlError>
            err++;
 800b2a0:	7afb      	ldrb	r3, [r7, #11]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2a6:	e089      	b.n	800b3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00b      	beq.n	800b2cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	7c12      	ldrb	r2, [r2, #16]
 800b2c0:	f107 0108 	add.w	r1, r7, #8
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	4798      	blx	r3
 800b2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ca:	e077      	b.n	800b3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fab1 	bl	800b836 <USBD_CtlError>
            err++;
 800b2d4:	7afb      	ldrb	r3, [r7, #11]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2da:	e06f      	b.n	800b3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	7c12      	ldrb	r2, [r2, #16]
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
 800b2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2fe:	e05d      	b.n	800b3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fa97 	bl	800b836 <USBD_CtlError>
            err++;
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	3301      	adds	r3, #1
 800b30c:	72fb      	strb	r3, [r7, #11]
          break;
 800b30e:	e055      	b.n	800b3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00b      	beq.n	800b334 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	7c12      	ldrb	r2, [r2, #16]
 800b328:	f107 0108 	add.w	r1, r7, #8
 800b32c:	4610      	mov	r0, r2
 800b32e:	4798      	blx	r3
 800b330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b332:	e043      	b.n	800b3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa7d 	bl	800b836 <USBD_CtlError>
            err++;
 800b33c:	7afb      	ldrb	r3, [r7, #11]
 800b33e:	3301      	adds	r3, #1
 800b340:	72fb      	strb	r3, [r7, #11]
          break;
 800b342:	e03b      	b.n	800b3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00b      	beq.n	800b368 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	7c12      	ldrb	r2, [r2, #16]
 800b35c:	f107 0108 	add.w	r1, r7, #8
 800b360:	4610      	mov	r0, r2
 800b362:	4798      	blx	r3
 800b364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b366:	e029      	b.n	800b3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fa63 	bl	800b836 <USBD_CtlError>
            err++;
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	3301      	adds	r3, #1
 800b374:	72fb      	strb	r3, [r7, #11]
          break;
 800b376:	e021      	b.n	800b3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	7c12      	ldrb	r2, [r2, #16]
 800b390:	f107 0108 	add.w	r1, r7, #8
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b39a:	e00f      	b.n	800b3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fa49 	bl	800b836 <USBD_CtlError>
            err++;
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3aa:	e007      	b.n	800b3bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa41 	bl	800b836 <USBD_CtlError>
          err++;
 800b3b4:	7afb      	ldrb	r3, [r7, #11]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3ba:	bf00      	nop
      }
      break;
 800b3bc:	e037      	b.n	800b42e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	7c1b      	ldrb	r3, [r3, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d109      	bne.n	800b3da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ce:	f107 0208 	add.w	r2, r7, #8
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	4798      	blx	r3
 800b3d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3d8:	e029      	b.n	800b42e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fa2a 	bl	800b836 <USBD_CtlError>
        err++;
 800b3e2:	7afb      	ldrb	r3, [r7, #11]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b3e8:	e021      	b.n	800b42e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	7c1b      	ldrb	r3, [r3, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10d      	bne.n	800b40e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3fa:	f107 0208 	add.w	r2, r7, #8
 800b3fe:	4610      	mov	r0, r2
 800b400:	4798      	blx	r3
 800b402:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3301      	adds	r3, #1
 800b408:	2207      	movs	r2, #7
 800b40a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b40c:	e00f      	b.n	800b42e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fa10 	bl	800b836 <USBD_CtlError>
        err++;
 800b416:	7afb      	ldrb	r3, [r7, #11]
 800b418:	3301      	adds	r3, #1
 800b41a:	72fb      	strb	r3, [r7, #11]
      break;
 800b41c:	e007      	b.n	800b42e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fa08 	bl	800b836 <USBD_CtlError>
      err++;
 800b426:	7afb      	ldrb	r3, [r7, #11]
 800b428:	3301      	adds	r3, #1
 800b42a:	72fb      	strb	r3, [r7, #11]
      break;
 800b42c:	bf00      	nop
  }

  if (err != 0U)
 800b42e:	7afb      	ldrb	r3, [r7, #11]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d11e      	bne.n	800b472 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	88db      	ldrh	r3, [r3, #6]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d016      	beq.n	800b46a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b43c:	893b      	ldrh	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00e      	beq.n	800b460 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	88da      	ldrh	r2, [r3, #6]
 800b446:	893b      	ldrh	r3, [r7, #8]
 800b448:	4293      	cmp	r3, r2
 800b44a:	bf28      	it	cs
 800b44c:	4613      	movcs	r3, r2
 800b44e:	b29b      	uxth	r3, r3
 800b450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b452:	893b      	ldrh	r3, [r7, #8]
 800b454:	461a      	mov	r2, r3
 800b456:	68f9      	ldr	r1, [r7, #12]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fa5d 	bl	800b918 <USBD_CtlSendData>
 800b45e:	e009      	b.n	800b474 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f9e7 	bl	800b836 <USBD_CtlError>
 800b468:	e004      	b.n	800b474 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 faae 	bl	800b9cc <USBD_CtlSendStatus>
 800b470:	e000      	b.n	800b474 <USBD_GetDescriptor+0x2cc>
    return;
 800b472:	bf00      	nop
  }
}
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop

0800b47c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	889b      	ldrh	r3, [r3, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d131      	bne.n	800b4f2 <USBD_SetAddress+0x76>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	88db      	ldrh	r3, [r3, #6]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d12d      	bne.n	800b4f2 <USBD_SetAddress+0x76>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	2b7f      	cmp	r3, #127	; 0x7f
 800b49c:	d829      	bhi.n	800b4f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	885b      	ldrh	r3, [r3, #2]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d104      	bne.n	800b4c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f9bc 	bl	800b836 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4be:	e01d      	b.n	800b4fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	7bfa      	ldrb	r2, [r7, #15]
 800b4c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f003 fba7 	bl	800ec20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fa7a 	bl	800b9cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d004      	beq.n	800b4e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2202      	movs	r2, #2
 800b4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e6:	e009      	b.n	800b4fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f0:	e004      	b.n	800b4fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f99e 	bl	800b836 <USBD_CtlError>
  }
}
 800b4fa:	bf00      	nop
 800b4fc:	bf00      	nop
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	885b      	ldrh	r3, [r3, #2]
 800b516:	b2da      	uxtb	r2, r3
 800b518:	4b4e      	ldr	r3, [pc, #312]	; (800b654 <USBD_SetConfig+0x150>)
 800b51a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b51c:	4b4d      	ldr	r3, [pc, #308]	; (800b654 <USBD_SetConfig+0x150>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d905      	bls.n	800b530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b524:	6839      	ldr	r1, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f985 	bl	800b836 <USBD_CtlError>
    return USBD_FAIL;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e08c      	b.n	800b64a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d002      	beq.n	800b542 <USBD_SetConfig+0x3e>
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	d029      	beq.n	800b594 <USBD_SetConfig+0x90>
 800b540:	e075      	b.n	800b62e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b542:	4b44      	ldr	r3, [pc, #272]	; (800b654 <USBD_SetConfig+0x150>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d020      	beq.n	800b58c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b54a:	4b42      	ldr	r3, [pc, #264]	; (800b654 <USBD_SetConfig+0x150>)
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b554:	4b3f      	ldr	r3, [pc, #252]	; (800b654 <USBD_SetConfig+0x150>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7fe ffe7 	bl	800a52e <USBD_SetClassConfig>
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d008      	beq.n	800b57c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f962 	bl	800b836 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2202      	movs	r2, #2
 800b576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b57a:	e065      	b.n	800b648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fa25 	bl	800b9cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2203      	movs	r2, #3
 800b586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b58a:	e05d      	b.n	800b648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fa1d 	bl	800b9cc <USBD_CtlSendStatus>
      break;
 800b592:	e059      	b.n	800b648 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b594:	4b2f      	ldr	r3, [pc, #188]	; (800b654 <USBD_SetConfig+0x150>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d112      	bne.n	800b5c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b5a4:	4b2b      	ldr	r3, [pc, #172]	; (800b654 <USBD_SetConfig+0x150>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5ae:	4b29      	ldr	r3, [pc, #164]	; (800b654 <USBD_SetConfig+0x150>)
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f7fe ffd6 	bl	800a566 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fa06 	bl	800b9cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5c0:	e042      	b.n	800b648 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5c2:	4b24      	ldr	r3, [pc, #144]	; (800b654 <USBD_SetConfig+0x150>)
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d02a      	beq.n	800b626 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7fe ffc4 	bl	800a566 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b5de:	4b1d      	ldr	r3, [pc, #116]	; (800b654 <USBD_SetConfig+0x150>)
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <USBD_SetConfig+0x150>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7fe ff9d 	bl	800a52e <USBD_SetClassConfig>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00f      	beq.n	800b61e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f918 	bl	800b836 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7fe ffa9 	bl	800a566 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b61c:	e014      	b.n	800b648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f9d4 	bl	800b9cc <USBD_CtlSendStatus>
      break;
 800b624:	e010      	b.n	800b648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f9d0 	bl	800b9cc <USBD_CtlSendStatus>
      break;
 800b62c:	e00c      	b.n	800b648 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f900 	bl	800b836 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b636:	4b07      	ldr	r3, [pc, #28]	; (800b654 <USBD_SetConfig+0x150>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7fe ff92 	bl	800a566 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b642:	2303      	movs	r3, #3
 800b644:	73fb      	strb	r3, [r7, #15]
      break;
 800b646:	bf00      	nop
  }

  return ret;
 800b648:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20000bc0 	.word	0x20000bc0

0800b658 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	88db      	ldrh	r3, [r3, #6]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d004      	beq.n	800b674 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f8e2 	bl	800b836 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b672:	e023      	b.n	800b6bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	dc02      	bgt.n	800b686 <USBD_GetConfig+0x2e>
 800b680:	2b00      	cmp	r3, #0
 800b682:	dc03      	bgt.n	800b68c <USBD_GetConfig+0x34>
 800b684:	e015      	b.n	800b6b2 <USBD_GetConfig+0x5a>
 800b686:	2b03      	cmp	r3, #3
 800b688:	d00b      	beq.n	800b6a2 <USBD_GetConfig+0x4a>
 800b68a:	e012      	b.n	800b6b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	3308      	adds	r3, #8
 800b696:	2201      	movs	r2, #1
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f93c 	bl	800b918 <USBD_CtlSendData>
        break;
 800b6a0:	e00c      	b.n	800b6bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f934 	bl	800b918 <USBD_CtlSendData>
        break;
 800b6b0:	e004      	b.n	800b6bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f8be 	bl	800b836 <USBD_CtlError>
        break;
 800b6ba:	bf00      	nop
}
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d81e      	bhi.n	800b71a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	88db      	ldrh	r3, [r3, #6]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d004      	beq.n	800b6ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f8a5 	bl	800b836 <USBD_CtlError>
        break;
 800b6ec:	e01a      	b.n	800b724 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d005      	beq.n	800b70a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	f043 0202 	orr.w	r2, r3, #2
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	330c      	adds	r3, #12
 800b70e:	2202      	movs	r2, #2
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f900 	bl	800b918 <USBD_CtlSendData>
      break;
 800b718:	e004      	b.n	800b724 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f88a 	bl	800b836 <USBD_CtlError>
      break;
 800b722:	bf00      	nop
  }
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	885b      	ldrh	r3, [r3, #2]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d107      	bne.n	800b74e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f940 	bl	800b9cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b74c:	e013      	b.n	800b776 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	885b      	ldrh	r3, [r3, #2]
 800b752:	2b02      	cmp	r3, #2
 800b754:	d10b      	bne.n	800b76e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	889b      	ldrh	r3, [r3, #4]
 800b75a:	0a1b      	lsrs	r3, r3, #8
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f930 	bl	800b9cc <USBD_CtlSendStatus>
}
 800b76c:	e003      	b.n	800b776 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f860 	bl	800b836 <USBD_CtlError>
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b082      	sub	sp, #8
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	3b01      	subs	r3, #1
 800b792:	2b02      	cmp	r3, #2
 800b794:	d80b      	bhi.n	800b7ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	885b      	ldrh	r3, [r3, #2]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d10c      	bne.n	800b7b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f910 	bl	800b9cc <USBD_CtlSendStatus>
      }
      break;
 800b7ac:	e004      	b.n	800b7b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f840 	bl	800b836 <USBD_CtlError>
      break;
 800b7b6:	e000      	b.n	800b7ba <USBD_ClrFeature+0x3c>
      break;
 800b7b8:	bf00      	nop
  }
}
 800b7ba:	bf00      	nop
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	781a      	ldrb	r2, [r3, #0]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7ff fa41 	bl	800ac74 <SWAPBYTE>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f7ff fa34 	bl	800ac74 <SWAPBYTE>
 800b80c:	4603      	mov	r3, r0
 800b80e:	461a      	mov	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3301      	adds	r3, #1
 800b818:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3301      	adds	r3, #1
 800b81e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff fa27 	bl	800ac74 <SWAPBYTE>
 800b826:	4603      	mov	r3, r0
 800b828:	461a      	mov	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	80da      	strh	r2, [r3, #6]
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b840:	2180      	movs	r1, #128	; 0x80
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f003 f982 	bl	800eb4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b848:	2100      	movs	r1, #0
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f003 f97e 	bl	800eb4c <USBD_LL_StallEP>
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d036      	beq.n	800b8dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b872:	6938      	ldr	r0, [r7, #16]
 800b874:	f000 f836 	bl	800b8e4 <USBD_GetLen>
 800b878:	4603      	mov	r3, r0
 800b87a:	3301      	adds	r3, #1
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	005b      	lsls	r3, r3, #1
 800b880:	b29a      	uxth	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	4413      	add	r3, r2
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	7812      	ldrb	r2, [r2, #0]
 800b890:	701a      	strb	r2, [r3, #0]
  idx++;
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	3301      	adds	r3, #1
 800b896:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b898:	7dfb      	ldrb	r3, [r7, #23]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	4413      	add	r3, r2
 800b89e:	2203      	movs	r2, #3
 800b8a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8a8:	e013      	b.n	800b8d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	7812      	ldrb	r2, [r2, #0]
 800b8b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	613b      	str	r3, [r7, #16]
    idx++;
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e7      	bne.n	800b8aa <USBD_GetString+0x52>
 800b8da:	e000      	b.n	800b8de <USBD_GetString+0x86>
    return;
 800b8dc:	bf00      	nop
  }
}
 800b8de:	3718      	adds	r7, #24
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b8f4:	e005      	b.n	800b902 <USBD_GetLen+0x1e>
  {
    len++;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	3301      	adds	r3, #1
 800b900:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1f5      	bne.n	800b8f6 <USBD_GetLen+0x12>
  }

  return len;
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2202      	movs	r2, #2
 800b928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	2100      	movs	r1, #0
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f003 f98d 	bl	800ec5e <USBD_LL_Transmit>

  return USBD_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	2100      	movs	r1, #0
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f003 f97c 	bl	800ec5e <USBD_LL_Transmit>

  return USBD_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2203      	movs	r2, #3
 800b980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	2100      	movs	r1, #0
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f003 f980 	bl	800eca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	60f8      	str	r0, [r7, #12]
 800b9b2:	60b9      	str	r1, [r7, #8]
 800b9b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f003 f96f 	bl	800eca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2204      	movs	r2, #4
 800b9d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9dc:	2300      	movs	r3, #0
 800b9de:	2200      	movs	r2, #0
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f003 f93b 	bl	800ec5e <USBD_LL_Transmit>

  return USBD_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2205      	movs	r2, #5
 800b9fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba02:	2300      	movs	r3, #0
 800ba04:	2200      	movs	r2, #0
 800ba06:	2100      	movs	r1, #0
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f003 f949 	bl	800eca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ba22:	2300      	movs	r3, #0
 800ba24:	60fb      	str	r3, [r7, #12]

  if (priority != osPriorityError) {
 800ba26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba2a:	2b84      	cmp	r3, #132	; 0x84
 800ba2c:	d005      	beq.n	800ba3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ba2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	4413      	add	r3, r2
 800ba36:	3303      	adds	r3, #3
 800ba38:	60fb      	str	r3, [r7, #12]
  }

  return fpriority;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ba4c:	f001 f8ea 	bl	800cc24 <vTaskStartScheduler>

  return osOK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ba56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba58:	b089      	sub	sp, #36	; 0x24
 800ba5a:	af04      	add	r7, sp, #16
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d020      	beq.n	800baaa <osThreadCreate+0x54>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d01c      	beq.n	800baaa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	685c      	ldr	r4, [r3, #4]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	691e      	ldr	r6, [r3, #16]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff ffc8 	bl	800ba18 <makeFreeRtosPriority>
 800ba88:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba92:	9202      	str	r2, [sp, #8]
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	9100      	str	r1, [sp, #0]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	4632      	mov	r2, r6
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 fdd6 	bl	800c650 <xTaskCreateStatic>
 800baa4:	4603      	mov	r3, r0
 800baa6:	60fb      	str	r3, [r7, #12]
 800baa8:	e01c      	b.n	800bae4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685c      	ldr	r4, [r3, #4]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bab6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff ffaa 	bl	800ba18 <makeFreeRtosPriority>
 800bac4:	4602      	mov	r2, r0
 800bac6:	f107 030c 	add.w	r3, r7, #12
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	9200      	str	r2, [sp, #0]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	4632      	mov	r2, r6
 800bad2:	4629      	mov	r1, r5
 800bad4:	4620      	mov	r0, r4
 800bad6:	f000 fe18 	bl	800c70a <xTaskCreate>
 800bada:	4603      	mov	r3, r0
 800badc:	2b01      	cmp	r3, #1
 800bade:	d001      	beq.n	800bae4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bae0:	2300      	movs	r3, #0
 800bae2:	e000      	b.n	800bae6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }
#endif

  return handle;
 800bae4:	68fb      	ldr	r3, [r7, #12]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800baee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	60fb      	str	r3, [r7, #12]

  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <osDelay+0x16>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	e000      	b.n	800bb06 <osDelay+0x18>
 800bb04:	2301      	movs	r3, #1
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 ffc6 	bl	800ca98 <vTaskDelay>

  return osOK;
 800bb0c:	2300      	movs	r3, #0
#else
  (void) millisec;

  return osErrorResource;
#endif
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f103 0208 	add.w	r2, r3, #8
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb2e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f103 0208 	add.w	r2, r3, #8
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f103 0208 	add.w	r2, r3, #8
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb4a:	bf00      	nop
 800bb4c:	370c      	adds	r7, #12
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	689a      	ldr	r2, [r3, #8]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]
}
 800bbac:	bf00      	nop
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbce:	d103      	bne.n	800bbd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	e00c      	b.n	800bbf2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3308      	adds	r3, #8
 800bbdc:	60fb      	str	r3, [r7, #12]
 800bbde:	e002      	b.n	800bbe6 <vListInsert+0x2e>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	60fb      	str	r3, [r7, #12]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d2f6      	bcs.n	800bbe0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	1c5a      	adds	r2, r3, #1
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	601a      	str	r2, [r3, #0]
}
 800bc1e:	bf00      	nop
 800bc20:	3714      	adds	r7, #20
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b085      	sub	sp, #20
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	6892      	ldr	r2, [r2, #8]
 800bc40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	6852      	ldr	r2, [r2, #4]
 800bc4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d103      	bne.n	800bc5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	689a      	ldr	r2, [r3, #8]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	1e5a      	subs	r2, r3, #1
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
	...

0800bc80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10a      	bne.n	800bcaa <xQueueGenericReset+0x2a>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	60bb      	str	r3, [r7, #8]
}
 800bca6:	bf00      	nop
 800bca8:	e7fe      	b.n	800bca8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bcaa:	f002 fa1b 	bl	800e0e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb6:	68f9      	ldr	r1, [r7, #12]
 800bcb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcba:	fb01 f303 	mul.w	r3, r1, r3
 800bcbe:	441a      	add	r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	68f9      	ldr	r1, [r7, #12]
 800bcde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bce0:	fb01 f303 	mul.w	r3, r1, r3
 800bce4:	441a      	add	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	22ff      	movs	r2, #255	; 0xff
 800bcee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	22ff      	movs	r2, #255	; 0xff
 800bcf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d114      	bne.n	800bd2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d01a      	beq.n	800bd3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3310      	adds	r3, #16
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f001 fa0d 	bl	800d12c <xTaskRemoveFromEventList>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d012      	beq.n	800bd3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd18:	4b0c      	ldr	r3, [pc, #48]	; (800bd4c <xQueueGenericReset+0xcc>)
 800bd1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd1e:	601a      	str	r2, [r3, #0]
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	e009      	b.n	800bd3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3310      	adds	r3, #16
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff fef1 	bl	800bb16 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3324      	adds	r3, #36	; 0x24
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff feec 	bl	800bb16 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd3e:	f002 fa01 	bl	800e144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd42:	2301      	movs	r3, #1
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	e000ed04 	.word	0xe000ed04

0800bd50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08e      	sub	sp, #56	; 0x38
 800bd54:	af02      	add	r7, sp, #8
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
 800bd5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10a      	bne.n	800bd7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10a      	bne.n	800bd96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <xQueueGenericCreateStatic+0x52>
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <xQueueGenericCreateStatic+0x56>
 800bda2:	2301      	movs	r3, #1
 800bda4:	e000      	b.n	800bda8 <xQueueGenericCreateStatic+0x58>
 800bda6:	2300      	movs	r3, #0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	623b      	str	r3, [r7, #32]
}
 800bdbe:	bf00      	nop
 800bdc0:	e7fe      	b.n	800bdc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d102      	bne.n	800bdce <xQueueGenericCreateStatic+0x7e>
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <xQueueGenericCreateStatic+0x82>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e000      	b.n	800bdd4 <xQueueGenericCreateStatic+0x84>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10a      	bne.n	800bdee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	61fb      	str	r3, [r7, #28]
}
 800bdea:	bf00      	nop
 800bdec:	e7fe      	b.n	800bdec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bdee:	2348      	movs	r3, #72	; 0x48
 800bdf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2b48      	cmp	r3, #72	; 0x48
 800bdf6:	d00a      	beq.n	800be0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	61bb      	str	r3, [r7, #24]
}
 800be0a:	bf00      	nop
 800be0c:	e7fe      	b.n	800be0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800be0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00d      	beq.n	800be36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1c:	2201      	movs	r2, #1
 800be1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	4613      	mov	r3, r2
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	68b9      	ldr	r1, [r7, #8]
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f000 f805 	bl	800be40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be38:	4618      	mov	r0, r3
 800be3a:	3730      	adds	r7, #48	; 0x30
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d103      	bne.n	800be5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	69ba      	ldr	r2, [r7, #24]
 800be58:	601a      	str	r2, [r3, #0]
 800be5a:	e002      	b.n	800be62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be6e:	2101      	movs	r1, #1
 800be70:	69b8      	ldr	r0, [r7, #24]
 800be72:	f7ff ff05 	bl	800bc80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be76:	bf00      	nop
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
	...

0800be80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08e      	sub	sp, #56	; 0x38
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be8e:	2300      	movs	r3, #0
 800be90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10a      	bne.n	800beb2 <xQueueGenericSend+0x32>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d103      	bne.n	800bec0 <xQueueGenericSend+0x40>
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <xQueueGenericSend+0x44>
 800bec0:	2301      	movs	r3, #1
 800bec2:	e000      	b.n	800bec6 <xQueueGenericSend+0x46>
 800bec4:	2300      	movs	r3, #0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10a      	bne.n	800bee0 <xQueueGenericSend+0x60>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bedc:	bf00      	nop
 800bede:	e7fe      	b.n	800bede <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d103      	bne.n	800beee <xQueueGenericSend+0x6e>
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beea:	2b01      	cmp	r3, #1
 800beec:	d101      	bne.n	800bef2 <xQueueGenericSend+0x72>
 800beee:	2301      	movs	r3, #1
 800bef0:	e000      	b.n	800bef4 <xQueueGenericSend+0x74>
 800bef2:	2300      	movs	r3, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xQueueGenericSend+0x8e>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	623b      	str	r3, [r7, #32]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf0e:	f001 fac9 	bl	800d4a4 <xTaskGetSchedulerState>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d102      	bne.n	800bf1e <xQueueGenericSend+0x9e>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <xQueueGenericSend+0xa2>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e000      	b.n	800bf24 <xQueueGenericSend+0xa4>
 800bf22:	2300      	movs	r3, #0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10a      	bne.n	800bf3e <xQueueGenericSend+0xbe>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	61fb      	str	r3, [r7, #28]
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf3e:	f002 f8d1 	bl	800e0e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d302      	bcc.n	800bf54 <xQueueGenericSend+0xd4>
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d129      	bne.n	800bfa8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf54:	683a      	ldr	r2, [r7, #0]
 800bf56:	68b9      	ldr	r1, [r7, #8]
 800bf58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf5a:	f000 fa0b 	bl	800c374 <prvCopyDataToQueue>
 800bf5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d010      	beq.n	800bf8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	3324      	adds	r3, #36	; 0x24
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 f8dd 	bl	800d12c <xTaskRemoveFromEventList>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d013      	beq.n	800bfa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf78:	4b3f      	ldr	r3, [pc, #252]	; (800c078 <xQueueGenericSend+0x1f8>)
 800bf7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	e00a      	b.n	800bfa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d007      	beq.n	800bfa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf90:	4b39      	ldr	r3, [pc, #228]	; (800c078 <xQueueGenericSend+0x1f8>)
 800bf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bfa0:	f002 f8d0 	bl	800e144 <vPortExitCritical>
				return pdPASS;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e063      	b.n	800c070 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d103      	bne.n	800bfb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfae:	f002 f8c9 	bl	800e144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e05c      	b.n	800c070 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d106      	bne.n	800bfca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfbc:	f107 0314 	add.w	r3, r7, #20
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f001 f915 	bl	800d1f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfca:	f002 f8bb 	bl	800e144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfce:	f000 fe8f 	bl	800ccf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfd2:	f002 f887 	bl	800e0e4 <vPortEnterCritical>
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfdc:	b25b      	sxtb	r3, r3
 800bfde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfe2:	d103      	bne.n	800bfec <xQueueGenericSend+0x16c>
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bff2:	b25b      	sxtb	r3, r3
 800bff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bff8:	d103      	bne.n	800c002 <xQueueGenericSend+0x182>
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c002:	f002 f89f 	bl	800e144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c006:	1d3a      	adds	r2, r7, #4
 800c008:	f107 0314 	add.w	r3, r7, #20
 800c00c:	4611      	mov	r1, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f001 f904 	bl	800d21c <xTaskCheckForTimeOut>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d124      	bne.n	800c064 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c01a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c01c:	f000 faa2 	bl	800c564 <prvIsQueueFull>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d018      	beq.n	800c058 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	3310      	adds	r3, #16
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	4611      	mov	r1, r2
 800c02e:	4618      	mov	r0, r3
 800c030:	f001 f82c 	bl	800d08c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c036:	f000 fa2d 	bl	800c494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c03a:	f000 fe67 	bl	800cd0c <xTaskResumeAll>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	f47f af7c 	bne.w	800bf3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c046:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <xQueueGenericSend+0x1f8>)
 800c048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	f3bf 8f4f 	dsb	sy
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	e772      	b.n	800bf3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c05a:	f000 fa1b 	bl	800c494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c05e:	f000 fe55 	bl	800cd0c <xTaskResumeAll>
 800c062:	e76c      	b.n	800bf3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c066:	f000 fa15 	bl	800c494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c06a:	f000 fe4f 	bl	800cd0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c06e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c070:	4618      	mov	r0, r3
 800c072:	3738      	adds	r7, #56	; 0x38
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	e000ed04 	.word	0xe000ed04

0800c07c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b090      	sub	sp, #64	; 0x40
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d103      	bne.n	800c0b8 <xQueueGenericSendFromISR+0x3c>
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d101      	bne.n	800c0bc <xQueueGenericSendFromISR+0x40>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e000      	b.n	800c0be <xQueueGenericSendFromISR+0x42>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10a      	bne.n	800c0d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0d4:	bf00      	nop
 800c0d6:	e7fe      	b.n	800c0d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d103      	bne.n	800c0e6 <xQueueGenericSendFromISR+0x6a>
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d101      	bne.n	800c0ea <xQueueGenericSendFromISR+0x6e>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e000      	b.n	800c0ec <xQueueGenericSendFromISR+0x70>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10a      	bne.n	800c106 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	623b      	str	r3, [r7, #32]
}
 800c102:	bf00      	nop
 800c104:	e7fe      	b.n	800c104 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c106:	f002 f8cf 	bl	800e2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c10a:	f3ef 8211 	mrs	r2, BASEPRI
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	61fa      	str	r2, [r7, #28]
 800c120:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c122:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c124:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12e:	429a      	cmp	r2, r3
 800c130:	d302      	bcc.n	800c138 <xQueueGenericSendFromISR+0xbc>
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	2b02      	cmp	r3, #2
 800c136:	d12f      	bne.n	800c198 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c146:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	68b9      	ldr	r1, [r7, #8]
 800c14c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c14e:	f000 f911 	bl	800c374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c152:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c15a:	d112      	bne.n	800c182 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	2b00      	cmp	r3, #0
 800c162:	d016      	beq.n	800c192 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	3324      	adds	r3, #36	; 0x24
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 ffdf 	bl	800d12c <xTaskRemoveFromEventList>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00e      	beq.n	800c192 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00b      	beq.n	800c192 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2201      	movs	r2, #1
 800c17e:	601a      	str	r2, [r3, #0]
 800c180:	e007      	b.n	800c192 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c186:	3301      	adds	r3, #1
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	b25a      	sxtb	r2, r3
 800c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c192:	2301      	movs	r3, #1
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c196:	e001      	b.n	800c19c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c1a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3740      	adds	r7, #64	; 0x40
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
	...

0800c1b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08c      	sub	sp, #48	; 0x30
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10a      	bne.n	800c1e4 <xQueueReceive+0x30>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	623b      	str	r3, [r7, #32]
}
 800c1e0:	bf00      	nop
 800c1e2:	e7fe      	b.n	800c1e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <xQueueReceive+0x3e>
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <xQueueReceive+0x42>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e000      	b.n	800c1f8 <xQueueReceive+0x44>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10a      	bne.n	800c212 <xQueueReceive+0x5e>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	61fb      	str	r3, [r7, #28]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c212:	f001 f947 	bl	800d4a4 <xTaskGetSchedulerState>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d102      	bne.n	800c222 <xQueueReceive+0x6e>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <xQueueReceive+0x72>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <xQueueReceive+0x74>
 800c226:	2300      	movs	r3, #0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10a      	bne.n	800c242 <xQueueReceive+0x8e>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	61bb      	str	r3, [r7, #24]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c242:	f001 ff4f 	bl	800e0e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d01f      	beq.n	800c292 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c252:	68b9      	ldr	r1, [r7, #8]
 800c254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c256:	f000 f8f7 	bl	800c448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	1e5a      	subs	r2, r3, #1
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00f      	beq.n	800c28a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26c:	3310      	adds	r3, #16
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 ff5c 	bl	800d12c <xTaskRemoveFromEventList>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d007      	beq.n	800c28a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c27a:	4b3d      	ldr	r3, [pc, #244]	; (800c370 <xQueueReceive+0x1bc>)
 800c27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c28a:	f001 ff5b 	bl	800e144 <vPortExitCritical>
				return pdPASS;
 800c28e:	2301      	movs	r3, #1
 800c290:	e069      	b.n	800c366 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d103      	bne.n	800c2a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c298:	f001 ff54 	bl	800e144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c29c:	2300      	movs	r3, #0
 800c29e:	e062      	b.n	800c366 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d106      	bne.n	800c2b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2a6:	f107 0310 	add.w	r3, r7, #16
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 ffa0 	bl	800d1f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2b4:	f001 ff46 	bl	800e144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2b8:	f000 fd1a 	bl	800ccf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2bc:	f001 ff12 	bl	800e0e4 <vPortEnterCritical>
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2c6:	b25b      	sxtb	r3, r3
 800c2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2cc:	d103      	bne.n	800c2d6 <xQueueReceive+0x122>
 800c2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2dc:	b25b      	sxtb	r3, r3
 800c2de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2e2:	d103      	bne.n	800c2ec <xQueueReceive+0x138>
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2ec:	f001 ff2a 	bl	800e144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2f0:	1d3a      	adds	r2, r7, #4
 800c2f2:	f107 0310 	add.w	r3, r7, #16
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 ff8f 	bl	800d21c <xTaskCheckForTimeOut>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d123      	bne.n	800c34c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c306:	f000 f917 	bl	800c538 <prvIsQueueEmpty>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d017      	beq.n	800c340 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	3324      	adds	r3, #36	; 0x24
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	4611      	mov	r1, r2
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 feb7 	bl	800d08c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c320:	f000 f8b8 	bl	800c494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c324:	f000 fcf2 	bl	800cd0c <xTaskResumeAll>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d189      	bne.n	800c242 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c32e:	4b10      	ldr	r3, [pc, #64]	; (800c370 <xQueueReceive+0x1bc>)
 800c330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	e780      	b.n	800c242 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c342:	f000 f8a7 	bl	800c494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c346:	f000 fce1 	bl	800cd0c <xTaskResumeAll>
 800c34a:	e77a      	b.n	800c242 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c34c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c34e:	f000 f8a1 	bl	800c494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c352:	f000 fcdb 	bl	800cd0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c358:	f000 f8ee 	bl	800c538 <prvIsQueueEmpty>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f43f af6f 	beq.w	800c242 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c366:	4618      	mov	r0, r3
 800c368:	3730      	adds	r7, #48	; 0x30
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	e000ed04 	.word	0xe000ed04

0800c374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c380:	2300      	movs	r3, #0
 800c382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10d      	bne.n	800c3ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d14d      	bne.n	800c436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f001 f89e 	bl	800d4e0 <xTaskPriorityDisinherit>
 800c3a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	609a      	str	r2, [r3, #8]
 800c3ac:	e043      	b.n	800c436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d119      	bne.n	800c3e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6858      	ldr	r0, [r3, #4]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3bc:	461a      	mov	r2, r3
 800c3be:	68b9      	ldr	r1, [r7, #8]
 800c3c0:	f003 fbb8 	bl	800fb34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	685a      	ldr	r2, [r3, #4]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3cc:	441a      	add	r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d32b      	bcc.n	800c436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	605a      	str	r2, [r3, #4]
 800c3e6:	e026      	b.n	800c436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	68d8      	ldr	r0, [r3, #12]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	68b9      	ldr	r1, [r7, #8]
 800c3f4:	f003 fb9e 	bl	800fb34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	68da      	ldr	r2, [r3, #12]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c400:	425b      	negs	r3, r3
 800c402:	441a      	add	r2, r3
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	68da      	ldr	r2, [r3, #12]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	429a      	cmp	r2, r3
 800c412:	d207      	bcs.n	800c424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	689a      	ldr	r2, [r3, #8]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41c:	425b      	negs	r3, r3
 800c41e:	441a      	add	r2, r3
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b02      	cmp	r3, #2
 800c428:	d105      	bne.n	800c436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	3b01      	subs	r3, #1
 800c434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c43e:	697b      	ldr	r3, [r7, #20]
}
 800c440:	4618      	mov	r0, r3
 800c442:	3718      	adds	r7, #24
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c456:	2b00      	cmp	r3, #0
 800c458:	d018      	beq.n	800c48c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68da      	ldr	r2, [r3, #12]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c462:	441a      	add	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	68da      	ldr	r2, [r3, #12]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	429a      	cmp	r2, r3
 800c472:	d303      	bcc.n	800c47c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	68d9      	ldr	r1, [r3, #12]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c484:	461a      	mov	r2, r3
 800c486:	6838      	ldr	r0, [r7, #0]
 800c488:	f003 fb54 	bl	800fb34 <memcpy>
	}
}
 800c48c:	bf00      	nop
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c49c:	f001 fe22 	bl	800e0e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4a8:	e011      	b.n	800c4ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d012      	beq.n	800c4d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3324      	adds	r3, #36	; 0x24
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f000 fe38 	bl	800d12c <xTaskRemoveFromEventList>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c4c2:	f000 ff0d 	bl	800d2e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	dce9      	bgt.n	800c4aa <prvUnlockQueue+0x16>
 800c4d6:	e000      	b.n	800c4da <prvUnlockQueue+0x46>
					break;
 800c4d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	22ff      	movs	r2, #255	; 0xff
 800c4de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c4e2:	f001 fe2f 	bl	800e144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c4e6:	f001 fdfd 	bl	800e0e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4f2:	e011      	b.n	800c518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d012      	beq.n	800c522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	3310      	adds	r3, #16
 800c500:	4618      	mov	r0, r3
 800c502:	f000 fe13 	bl	800d12c <xTaskRemoveFromEventList>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c50c:	f000 fee8 	bl	800d2e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	3b01      	subs	r3, #1
 800c514:	b2db      	uxtb	r3, r3
 800c516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	dce9      	bgt.n	800c4f4 <prvUnlockQueue+0x60>
 800c520:	e000      	b.n	800c524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	22ff      	movs	r2, #255	; 0xff
 800c528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c52c:	f001 fe0a 	bl	800e144 <vPortExitCritical>
}
 800c530:	bf00      	nop
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c540:	f001 fdd0 	bl	800e0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d102      	bne.n	800c552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c54c:	2301      	movs	r3, #1
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	e001      	b.n	800c556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c552:	2300      	movs	r3, #0
 800c554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c556:	f001 fdf5 	bl	800e144 <vPortExitCritical>

	return xReturn;
 800c55a:	68fb      	ldr	r3, [r7, #12]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c56c:	f001 fdba 	bl	800e0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c578:	429a      	cmp	r2, r3
 800c57a:	d102      	bne.n	800c582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c57c:	2301      	movs	r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	e001      	b.n	800c586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c582:	2300      	movs	r3, #0
 800c584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c586:	f001 fddd 	bl	800e144 <vPortExitCritical>

	return xReturn;
 800c58a:	68fb      	ldr	r3, [r7, #12]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60fb      	str	r3, [r7, #12]
 800c5a2:	e014      	b.n	800c5ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c5a4:	4a0f      	ldr	r2, [pc, #60]	; (800c5e4 <vQueueAddToRegistry+0x50>)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10b      	bne.n	800c5c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c5b0:	490c      	ldr	r1, [pc, #48]	; (800c5e4 <vQueueAddToRegistry+0x50>)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c5ba:	4a0a      	ldr	r2, [pc, #40]	; (800c5e4 <vQueueAddToRegistry+0x50>)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	4413      	add	r3, r2
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c5c6:	e006      	b.n	800c5d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	60fb      	str	r3, [r7, #12]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b07      	cmp	r3, #7
 800c5d2:	d9e7      	bls.n	800c5a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	20000bc4 	.word	0x20000bc4

0800c5e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c5f8:	f001 fd74 	bl	800e0e4 <vPortEnterCritical>
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c602:	b25b      	sxtb	r3, r3
 800c604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c608:	d103      	bne.n	800c612 <vQueueWaitForMessageRestricted+0x2a>
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	2200      	movs	r2, #0
 800c60e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c618:	b25b      	sxtb	r3, r3
 800c61a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c61e:	d103      	bne.n	800c628 <vQueueWaitForMessageRestricted+0x40>
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2200      	movs	r2, #0
 800c624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c628:	f001 fd8c 	bl	800e144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	3324      	adds	r3, #36	; 0x24
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	68b9      	ldr	r1, [r7, #8]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 fd49 	bl	800d0d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c642:	6978      	ldr	r0, [r7, #20]
 800c644:	f7ff ff26 	bl	800c494 <prvUnlockQueue>
	}
 800c648:	bf00      	nop
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c650:	b580      	push	{r7, lr}
 800c652:	b08e      	sub	sp, #56	; 0x38
 800c654:	af04      	add	r7, sp, #16
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
 800c65c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10a      	bne.n	800c67a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	623b      	str	r3, [r7, #32]
}
 800c676:	bf00      	nop
 800c678:	e7fe      	b.n	800c678 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10a      	bne.n	800c696 <xTaskCreateStatic+0x46>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	61fb      	str	r3, [r7, #28]
}
 800c692:	bf00      	nop
 800c694:	e7fe      	b.n	800c694 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c696:	2364      	movs	r3, #100	; 0x64
 800c698:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	2b64      	cmp	r3, #100	; 0x64
 800c69e:	d00a      	beq.n	800c6b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	61bb      	str	r3, [r7, #24]
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c6b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d01e      	beq.n	800c6fc <xTaskCreateStatic+0xac>
 800c6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d01b      	beq.n	800c6fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9303      	str	r3, [sp, #12]
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	9302      	str	r3, [sp, #8]
 800c6de:	f107 0314 	add.w	r3, r7, #20
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	68b9      	ldr	r1, [r7, #8]
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f000 f850 	bl	800c794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6f6:	f000 f8d5 	bl	800c8a4 <prvAddNewTaskToReadyList>
 800c6fa:	e001      	b.n	800c700 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c700:	697b      	ldr	r3, [r7, #20]
	}
 800c702:	4618      	mov	r0, r3
 800c704:	3728      	adds	r7, #40	; 0x28
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b08c      	sub	sp, #48	; 0x30
 800c70e:	af04      	add	r7, sp, #16
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	603b      	str	r3, [r7, #0]
 800c716:	4613      	mov	r3, r2
 800c718:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c71a:	88fb      	ldrh	r3, [r7, #6]
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4618      	mov	r0, r3
 800c720:	f001 fe02 	bl	800e328 <pvPortMalloc>
 800c724:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00e      	beq.n	800c74a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c72c:	2064      	movs	r0, #100	; 0x64
 800c72e:	f001 fdfb 	bl	800e328 <pvPortMalloc>
 800c732:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	697a      	ldr	r2, [r7, #20]
 800c73e:	631a      	str	r2, [r3, #48]	; 0x30
 800c740:	e005      	b.n	800c74e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c742:	6978      	ldr	r0, [r7, #20]
 800c744:	f001 fe02 	bl	800e34c <vPortFree>
 800c748:	e001      	b.n	800c74e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c74a:	2300      	movs	r3, #0
 800c74c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d017      	beq.n	800c784 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	2200      	movs	r2, #0
 800c758:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c75c:	88fa      	ldrh	r2, [r7, #6]
 800c75e:	2300      	movs	r3, #0
 800c760:	9303      	str	r3, [sp, #12]
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	9302      	str	r3, [sp, #8]
 800c766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c768:	9301      	str	r3, [sp, #4]
 800c76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	68b9      	ldr	r1, [r7, #8]
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f000 f80e 	bl	800c794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c778:	69f8      	ldr	r0, [r7, #28]
 800c77a:	f000 f893 	bl	800c8a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c77e:	2301      	movs	r3, #1
 800c780:	61bb      	str	r3, [r7, #24]
 800c782:	e002      	b.n	800c78a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c788:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c78a:	69bb      	ldr	r3, [r7, #24]
	}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3720      	adds	r7, #32
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
 800c7a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4413      	add	r3, r2
 800c7b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	f023 0307 	bic.w	r3, r3, #7
 800c7ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	f003 0307 	and.w	r3, r3, #7
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00a      	beq.n	800c7dc <prvInitialiseNewTask+0x48>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	617b      	str	r3, [r7, #20]
}
 800c7d8:	bf00      	nop
 800c7da:	e7fe      	b.n	800c7da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d01f      	beq.n	800c822 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	61fb      	str	r3, [r7, #28]
 800c7e6:	e012      	b.n	800c80e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	7819      	ldrb	r1, [r3, #0]
 800c7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	3334      	adds	r3, #52	; 0x34
 800c7f8:	460a      	mov	r2, r1
 800c7fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	4413      	add	r3, r2
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d006      	beq.n	800c816 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	3301      	adds	r3, #1
 800c80c:	61fb      	str	r3, [r7, #28]
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	2b1f      	cmp	r3, #31
 800c812:	d9e9      	bls.n	800c7e8 <prvInitialiseNewTask+0x54>
 800c814:	e000      	b.n	800c818 <prvInitialiseNewTask+0x84>
			{
				break;
 800c816:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c820:	e003      	b.n	800c82a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	2200      	movs	r2, #0
 800c826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82c:	2b06      	cmp	r3, #6
 800c82e:	d901      	bls.n	800c834 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c830:	2306      	movs	r3, #6
 800c832:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c838:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c83e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c842:	2200      	movs	r2, #0
 800c844:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	3304      	adds	r3, #4
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7ff f983 	bl	800bb56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	3318      	adds	r3, #24
 800c854:	4618      	mov	r0, r3
 800c856:	f7ff f97e 	bl	800bb56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c85e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	f1c3 0207 	rsb	r2, r3, #7
 800c866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c868:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c86e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c872:	2200      	movs	r2, #0
 800c874:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c878:	2200      	movs	r2, #0
 800c87a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	68f9      	ldr	r1, [r7, #12]
 800c882:	69b8      	ldr	r0, [r7, #24]
 800c884:	f001 fb02 	bl	800de8c <pxPortInitialiseStack>
 800c888:	4602      	mov	r2, r0
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c890:	2b00      	cmp	r3, #0
 800c892:	d002      	beq.n	800c89a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c89a:	bf00      	nop
 800c89c:	3720      	adds	r7, #32
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
	...

0800c8a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c8ac:	f001 fc1a 	bl	800e0e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c8b0:	4b2a      	ldr	r3, [pc, #168]	; (800c95c <prvAddNewTaskToReadyList+0xb8>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	4a29      	ldr	r2, [pc, #164]	; (800c95c <prvAddNewTaskToReadyList+0xb8>)
 800c8b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c8ba:	4b29      	ldr	r3, [pc, #164]	; (800c960 <prvAddNewTaskToReadyList+0xbc>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d109      	bne.n	800c8d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c8c2:	4a27      	ldr	r2, [pc, #156]	; (800c960 <prvAddNewTaskToReadyList+0xbc>)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c8c8:	4b24      	ldr	r3, [pc, #144]	; (800c95c <prvAddNewTaskToReadyList+0xb8>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d110      	bne.n	800c8f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c8d0:	f000 fd2a 	bl	800d328 <prvInitialiseTaskLists>
 800c8d4:	e00d      	b.n	800c8f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c8d6:	4b23      	ldr	r3, [pc, #140]	; (800c964 <prvAddNewTaskToReadyList+0xc0>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d109      	bne.n	800c8f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8de:	4b20      	ldr	r3, [pc, #128]	; (800c960 <prvAddNewTaskToReadyList+0xbc>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d802      	bhi.n	800c8f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8ec:	4a1c      	ldr	r2, [pc, #112]	; (800c960 <prvAddNewTaskToReadyList+0xbc>)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8f2:	4b1d      	ldr	r3, [pc, #116]	; (800c968 <prvAddNewTaskToReadyList+0xc4>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	4a1b      	ldr	r2, [pc, #108]	; (800c968 <prvAddNewTaskToReadyList+0xc4>)
 800c8fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c900:	2201      	movs	r2, #1
 800c902:	409a      	lsls	r2, r3
 800c904:	4b19      	ldr	r3, [pc, #100]	; (800c96c <prvAddNewTaskToReadyList+0xc8>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4313      	orrs	r3, r2
 800c90a:	4a18      	ldr	r2, [pc, #96]	; (800c96c <prvAddNewTaskToReadyList+0xc8>)
 800c90c:	6013      	str	r3, [r2, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c912:	4613      	mov	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4413      	add	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4a15      	ldr	r2, [pc, #84]	; (800c970 <prvAddNewTaskToReadyList+0xcc>)
 800c91c:	441a      	add	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3304      	adds	r3, #4
 800c922:	4619      	mov	r1, r3
 800c924:	4610      	mov	r0, r2
 800c926:	f7ff f923 	bl	800bb70 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c92a:	f001 fc0b 	bl	800e144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c92e:	4b0d      	ldr	r3, [pc, #52]	; (800c964 <prvAddNewTaskToReadyList+0xc0>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00e      	beq.n	800c954 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c936:	4b0a      	ldr	r3, [pc, #40]	; (800c960 <prvAddNewTaskToReadyList+0xbc>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c940:	429a      	cmp	r2, r3
 800c942:	d207      	bcs.n	800c954 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c944:	4b0b      	ldr	r3, [pc, #44]	; (800c974 <prvAddNewTaskToReadyList+0xd0>)
 800c946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	20000d04 	.word	0x20000d04
 800c960:	20000c04 	.word	0x20000c04
 800c964:	20000d10 	.word	0x20000d10
 800c968:	20000d20 	.word	0x20000d20
 800c96c:	20000d0c 	.word	0x20000d0c
 800c970:	20000c08 	.word	0x20000c08
 800c974:	e000ed04 	.word	0xe000ed04

0800c978 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c980:	f001 fbb0 	bl	800e0e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d102      	bne.n	800c990 <vTaskDelete+0x18>
 800c98a:	4b39      	ldr	r3, [pc, #228]	; (800ca70 <vTaskDelete+0xf8>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	e000      	b.n	800c992 <vTaskDelete+0x1a>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3304      	adds	r3, #4
 800c998:	4618      	mov	r0, r3
 800c99a:	f7ff f946 	bl	800bc2a <uxListRemove>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d115      	bne.n	800c9d0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a8:	4932      	ldr	r1, [pc, #200]	; (800ca74 <vTaskDelete+0xfc>)
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	4413      	add	r3, r2
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	440b      	add	r3, r1
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d10a      	bne.n	800c9d0 <vTaskDelete+0x58>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9be:	2201      	movs	r2, #1
 800c9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c4:	43da      	mvns	r2, r3
 800c9c6:	4b2c      	ldr	r3, [pc, #176]	; (800ca78 <vTaskDelete+0x100>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	4a2a      	ldr	r2, [pc, #168]	; (800ca78 <vTaskDelete+0x100>)
 800c9ce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d004      	beq.n	800c9e2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3318      	adds	r3, #24
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7ff f924 	bl	800bc2a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c9e2:	4b26      	ldr	r3, [pc, #152]	; (800ca7c <vTaskDelete+0x104>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	4a24      	ldr	r2, [pc, #144]	; (800ca7c <vTaskDelete+0x104>)
 800c9ea:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c9ec:	4b20      	ldr	r3, [pc, #128]	; (800ca70 <vTaskDelete+0xf8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d10b      	bne.n	800ca0e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	4820      	ldr	r0, [pc, #128]	; (800ca80 <vTaskDelete+0x108>)
 800c9fe:	f7ff f8b7 	bl	800bb70 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ca02:	4b20      	ldr	r3, [pc, #128]	; (800ca84 <vTaskDelete+0x10c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	3301      	adds	r3, #1
 800ca08:	4a1e      	ldr	r2, [pc, #120]	; (800ca84 <vTaskDelete+0x10c>)
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	e009      	b.n	800ca22 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ca0e:	4b1e      	ldr	r3, [pc, #120]	; (800ca88 <vTaskDelete+0x110>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	3b01      	subs	r3, #1
 800ca14:	4a1c      	ldr	r2, [pc, #112]	; (800ca88 <vTaskDelete+0x110>)
 800ca16:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f000 fcf3 	bl	800d404 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ca1e:	f000 fd21 	bl	800d464 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ca22:	f001 fb8f 	bl	800e144 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ca26:	4b19      	ldr	r3, [pc, #100]	; (800ca8c <vTaskDelete+0x114>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d01b      	beq.n	800ca66 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ca2e:	4b10      	ldr	r3, [pc, #64]	; (800ca70 <vTaskDelete+0xf8>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d116      	bne.n	800ca66 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ca38:	4b15      	ldr	r3, [pc, #84]	; (800ca90 <vTaskDelete+0x118>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00a      	beq.n	800ca56 <vTaskDelete+0xde>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	60bb      	str	r3, [r7, #8]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800ca56:	4b0f      	ldr	r3, [pc, #60]	; (800ca94 <vTaskDelete+0x11c>)
 800ca58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca66:	bf00      	nop
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	20000c04 	.word	0x20000c04
 800ca74:	20000c08 	.word	0x20000c08
 800ca78:	20000d0c 	.word	0x20000d0c
 800ca7c:	20000d20 	.word	0x20000d20
 800ca80:	20000cd8 	.word	0x20000cd8
 800ca84:	20000cec 	.word	0x20000cec
 800ca88:	20000d04 	.word	0x20000d04
 800ca8c:	20000d10 	.word	0x20000d10
 800ca90:	20000d2c 	.word	0x20000d2c
 800ca94:	e000ed04 	.word	0xe000ed04

0800ca98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800caa0:	2300      	movs	r3, #0
 800caa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d017      	beq.n	800cada <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800caaa:	4b13      	ldr	r3, [pc, #76]	; (800caf8 <vTaskDelay+0x60>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00a      	beq.n	800cac8 <vTaskDelay+0x30>
	__asm volatile
 800cab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	60bb      	str	r3, [r7, #8]
}
 800cac4:	bf00      	nop
 800cac6:	e7fe      	b.n	800cac6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cac8:	f000 f912 	bl	800ccf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cacc:	2100      	movs	r1, #0
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fd8c 	bl	800d5ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cad4:	f000 f91a 	bl	800cd0c <xTaskResumeAll>
 800cad8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d107      	bne.n	800caf0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cae0:	4b06      	ldr	r3, [pc, #24]	; (800cafc <vTaskDelay+0x64>)
 800cae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800caf0:	bf00      	nop
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	20000d2c 	.word	0x20000d2c
 800cafc:	e000ed04 	.word	0xe000ed04

0800cb00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cb08:	f001 faec 	bl	800e0e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d102      	bne.n	800cb18 <vTaskSuspend+0x18>
 800cb12:	4b3c      	ldr	r3, [pc, #240]	; (800cc04 <vTaskSuspend+0x104>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	e000      	b.n	800cb1a <vTaskSuspend+0x1a>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7ff f882 	bl	800bc2a <uxListRemove>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d115      	bne.n	800cb58 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb30:	4935      	ldr	r1, [pc, #212]	; (800cc08 <vTaskSuspend+0x108>)
 800cb32:	4613      	mov	r3, r2
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	440b      	add	r3, r1
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10a      	bne.n	800cb58 <vTaskSuspend+0x58>
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb46:	2201      	movs	r2, #1
 800cb48:	fa02 f303 	lsl.w	r3, r2, r3
 800cb4c:	43da      	mvns	r2, r3
 800cb4e:	4b2f      	ldr	r3, [pc, #188]	; (800cc0c <vTaskSuspend+0x10c>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4013      	ands	r3, r2
 800cb54:	4a2d      	ldr	r2, [pc, #180]	; (800cc0c <vTaskSuspend+0x10c>)
 800cb56:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d004      	beq.n	800cb6a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3318      	adds	r3, #24
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7ff f860 	bl	800bc2a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	4619      	mov	r1, r3
 800cb70:	4827      	ldr	r0, [pc, #156]	; (800cc10 <vTaskSuspend+0x110>)
 800cb72:	f7fe fffd 	bl	800bb70 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d103      	bne.n	800cb8a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800cb8a:	f001 fadb 	bl	800e144 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800cb8e:	4b21      	ldr	r3, [pc, #132]	; (800cc14 <vTaskSuspend+0x114>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d005      	beq.n	800cba2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800cb96:	f001 faa5 	bl	800e0e4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800cb9a:	f000 fc63 	bl	800d464 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800cb9e:	f001 fad1 	bl	800e144 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800cba2:	4b18      	ldr	r3, [pc, #96]	; (800cc04 <vTaskSuspend+0x104>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d127      	bne.n	800cbfc <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800cbac:	4b19      	ldr	r3, [pc, #100]	; (800cc14 <vTaskSuspend+0x114>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d017      	beq.n	800cbe4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800cbb4:	4b18      	ldr	r3, [pc, #96]	; (800cc18 <vTaskSuspend+0x118>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00a      	beq.n	800cbd2 <vTaskSuspend+0xd2>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	60bb      	str	r3, [r7, #8]
}
 800cbce:	bf00      	nop
 800cbd0:	e7fe      	b.n	800cbd0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800cbd2:	4b12      	ldr	r3, [pc, #72]	; (800cc1c <vTaskSuspend+0x11c>)
 800cbd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbe2:	e00b      	b.n	800cbfc <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800cbe4:	4b0a      	ldr	r3, [pc, #40]	; (800cc10 <vTaskSuspend+0x110>)
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	4b0d      	ldr	r3, [pc, #52]	; (800cc20 <vTaskSuspend+0x120>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d103      	bne.n	800cbf8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800cbf0:	4b04      	ldr	r3, [pc, #16]	; (800cc04 <vTaskSuspend+0x104>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
	}
 800cbf6:	e001      	b.n	800cbfc <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800cbf8:	f000 f9ec 	bl	800cfd4 <vTaskSwitchContext>
	}
 800cbfc:	bf00      	nop
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	20000c04 	.word	0x20000c04
 800cc08:	20000c08 	.word	0x20000c08
 800cc0c:	20000d0c 	.word	0x20000d0c
 800cc10:	20000cf0 	.word	0x20000cf0
 800cc14:	20000d10 	.word	0x20000d10
 800cc18:	20000d2c 	.word	0x20000d2c
 800cc1c:	e000ed04 	.word	0xe000ed04
 800cc20:	20000d04 	.word	0x20000d04

0800cc24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b08a      	sub	sp, #40	; 0x28
 800cc28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc32:	463a      	mov	r2, r7
 800cc34:	1d39      	adds	r1, r7, #4
 800cc36:	f107 0308 	add.w	r3, r7, #8
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7f4 fd1a 	bl	8001674 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	68ba      	ldr	r2, [r7, #8]
 800cc46:	9202      	str	r2, [sp, #8]
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	460a      	mov	r2, r1
 800cc52:	4921      	ldr	r1, [pc, #132]	; (800ccd8 <vTaskStartScheduler+0xb4>)
 800cc54:	4821      	ldr	r0, [pc, #132]	; (800ccdc <vTaskStartScheduler+0xb8>)
 800cc56:	f7ff fcfb 	bl	800c650 <xTaskCreateStatic>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	4a20      	ldr	r2, [pc, #128]	; (800cce0 <vTaskStartScheduler+0xbc>)
 800cc5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc60:	4b1f      	ldr	r3, [pc, #124]	; (800cce0 <vTaskStartScheduler+0xbc>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	617b      	str	r3, [r7, #20]
 800cc6c:	e001      	b.n	800cc72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d102      	bne.n	800cc7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc78:	f000 fd1e 	bl	800d6b8 <xTimerCreateTimerTask>
 800cc7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d116      	bne.n	800ccb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	613b      	str	r3, [r7, #16]
}
 800cc96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc98:	4b12      	ldr	r3, [pc, #72]	; (800cce4 <vTaskStartScheduler+0xc0>)
 800cc9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cca0:	4b11      	ldr	r3, [pc, #68]	; (800cce8 <vTaskStartScheduler+0xc4>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cca6:	4b11      	ldr	r3, [pc, #68]	; (800ccec <vTaskStartScheduler+0xc8>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccac:	f001 f978 	bl	800dfa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ccb0:	e00e      	b.n	800ccd0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccb8:	d10a      	bne.n	800ccd0 <vTaskStartScheduler+0xac>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	60fb      	str	r3, [r7, #12]
}
 800cccc:	bf00      	nop
 800ccce:	e7fe      	b.n	800ccce <vTaskStartScheduler+0xaa>
}
 800ccd0:	bf00      	nop
 800ccd2:	3718      	adds	r7, #24
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	08011d00 	.word	0x08011d00
 800ccdc:	0800d2f9 	.word	0x0800d2f9
 800cce0:	20000d28 	.word	0x20000d28
 800cce4:	20000d24 	.word	0x20000d24
 800cce8:	20000d10 	.word	0x20000d10
 800ccec:	20000d08 	.word	0x20000d08

0800ccf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ccf4:	4b04      	ldr	r3, [pc, #16]	; (800cd08 <vTaskSuspendAll+0x18>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	4a03      	ldr	r2, [pc, #12]	; (800cd08 <vTaskSuspendAll+0x18>)
 800ccfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ccfe:	bf00      	nop
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr
 800cd08:	20000d2c 	.word	0x20000d2c

0800cd0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd12:	2300      	movs	r3, #0
 800cd14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd16:	2300      	movs	r3, #0
 800cd18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd1a:	4b41      	ldr	r3, [pc, #260]	; (800ce20 <xTaskResumeAll+0x114>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10a      	bne.n	800cd38 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	603b      	str	r3, [r7, #0]
}
 800cd34:	bf00      	nop
 800cd36:	e7fe      	b.n	800cd36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd38:	f001 f9d4 	bl	800e0e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd3c:	4b38      	ldr	r3, [pc, #224]	; (800ce20 <xTaskResumeAll+0x114>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	4a37      	ldr	r2, [pc, #220]	; (800ce20 <xTaskResumeAll+0x114>)
 800cd44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd46:	4b36      	ldr	r3, [pc, #216]	; (800ce20 <xTaskResumeAll+0x114>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d161      	bne.n	800ce12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd4e:	4b35      	ldr	r3, [pc, #212]	; (800ce24 <xTaskResumeAll+0x118>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d05d      	beq.n	800ce12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd56:	e02e      	b.n	800cdb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd58:	4b33      	ldr	r3, [pc, #204]	; (800ce28 <xTaskResumeAll+0x11c>)
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	3318      	adds	r3, #24
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fe ff60 	bl	800bc2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe ff5b 	bl	800bc2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	2201      	movs	r2, #1
 800cd7a:	409a      	lsls	r2, r3
 800cd7c:	4b2b      	ldr	r3, [pc, #172]	; (800ce2c <xTaskResumeAll+0x120>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	4a2a      	ldr	r2, [pc, #168]	; (800ce2c <xTaskResumeAll+0x120>)
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4a27      	ldr	r2, [pc, #156]	; (800ce30 <xTaskResumeAll+0x124>)
 800cd94:	441a      	add	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3304      	adds	r3, #4
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	f7fe fee7 	bl	800bb70 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda6:	4b23      	ldr	r3, [pc, #140]	; (800ce34 <xTaskResumeAll+0x128>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d302      	bcc.n	800cdb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cdb0:	4b21      	ldr	r3, [pc, #132]	; (800ce38 <xTaskResumeAll+0x12c>)
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdb6:	4b1c      	ldr	r3, [pc, #112]	; (800ce28 <xTaskResumeAll+0x11c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1cc      	bne.n	800cd58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cdc4:	f000 fb4e 	bl	800d464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cdc8:	4b1c      	ldr	r3, [pc, #112]	; (800ce3c <xTaskResumeAll+0x130>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d010      	beq.n	800cdf6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdd4:	f000 f846 	bl	800ce64 <xTaskIncrementTick>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d002      	beq.n	800cde4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cdde:	4b16      	ldr	r3, [pc, #88]	; (800ce38 <xTaskResumeAll+0x12c>)
 800cde0:	2201      	movs	r2, #1
 800cde2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1f1      	bne.n	800cdd4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cdf0:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <xTaskResumeAll+0x130>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cdf6:	4b10      	ldr	r3, [pc, #64]	; (800ce38 <xTaskResumeAll+0x12c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d009      	beq.n	800ce12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce02:	4b0f      	ldr	r3, [pc, #60]	; (800ce40 <xTaskResumeAll+0x134>)
 800ce04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce12:	f001 f997 	bl	800e144 <vPortExitCritical>

	return xAlreadyYielded;
 800ce16:	68bb      	ldr	r3, [r7, #8]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3710      	adds	r7, #16
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	20000d2c 	.word	0x20000d2c
 800ce24:	20000d04 	.word	0x20000d04
 800ce28:	20000cc4 	.word	0x20000cc4
 800ce2c:	20000d0c 	.word	0x20000d0c
 800ce30:	20000c08 	.word	0x20000c08
 800ce34:	20000c04 	.word	0x20000c04
 800ce38:	20000d18 	.word	0x20000d18
 800ce3c:	20000d14 	.word	0x20000d14
 800ce40:	e000ed04 	.word	0xe000ed04

0800ce44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce4a:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <xTaskGetTickCount+0x1c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce50:	687b      	ldr	r3, [r7, #4]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	370c      	adds	r7, #12
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	20000d08 	.word	0x20000d08

0800ce64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce6e:	4b4e      	ldr	r3, [pc, #312]	; (800cfa8 <xTaskIncrementTick+0x144>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f040 808e 	bne.w	800cf94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce78:	4b4c      	ldr	r3, [pc, #304]	; (800cfac <xTaskIncrementTick+0x148>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce80:	4a4a      	ldr	r2, [pc, #296]	; (800cfac <xTaskIncrementTick+0x148>)
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d120      	bne.n	800cece <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce8c:	4b48      	ldr	r3, [pc, #288]	; (800cfb0 <xTaskIncrementTick+0x14c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00a      	beq.n	800ceac <xTaskIncrementTick+0x48>
	__asm volatile
 800ce96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9a:	f383 8811 	msr	BASEPRI, r3
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	603b      	str	r3, [r7, #0]
}
 800cea8:	bf00      	nop
 800ceaa:	e7fe      	b.n	800ceaa <xTaskIncrementTick+0x46>
 800ceac:	4b40      	ldr	r3, [pc, #256]	; (800cfb0 <xTaskIncrementTick+0x14c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	60fb      	str	r3, [r7, #12]
 800ceb2:	4b40      	ldr	r3, [pc, #256]	; (800cfb4 <xTaskIncrementTick+0x150>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a3e      	ldr	r2, [pc, #248]	; (800cfb0 <xTaskIncrementTick+0x14c>)
 800ceb8:	6013      	str	r3, [r2, #0]
 800ceba:	4a3e      	ldr	r2, [pc, #248]	; (800cfb4 <xTaskIncrementTick+0x150>)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6013      	str	r3, [r2, #0]
 800cec0:	4b3d      	ldr	r3, [pc, #244]	; (800cfb8 <xTaskIncrementTick+0x154>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	3301      	adds	r3, #1
 800cec6:	4a3c      	ldr	r2, [pc, #240]	; (800cfb8 <xTaskIncrementTick+0x154>)
 800cec8:	6013      	str	r3, [r2, #0]
 800ceca:	f000 facb 	bl	800d464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cece:	4b3b      	ldr	r3, [pc, #236]	; (800cfbc <xTaskIncrementTick+0x158>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d348      	bcc.n	800cf6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ced8:	4b35      	ldr	r3, [pc, #212]	; (800cfb0 <xTaskIncrementTick+0x14c>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d104      	bne.n	800ceec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cee2:	4b36      	ldr	r3, [pc, #216]	; (800cfbc <xTaskIncrementTick+0x158>)
 800cee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cee8:	601a      	str	r2, [r3, #0]
					break;
 800ceea:	e03e      	b.n	800cf6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceec:	4b30      	ldr	r3, [pc, #192]	; (800cfb0 <xTaskIncrementTick+0x14c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d203      	bcs.n	800cf0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf04:	4a2d      	ldr	r2, [pc, #180]	; (800cfbc <xTaskIncrementTick+0x158>)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf0a:	e02e      	b.n	800cf6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe fe8a 	bl	800bc2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d004      	beq.n	800cf28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	3318      	adds	r3, #24
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fe fe81 	bl	800bc2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	409a      	lsls	r2, r3
 800cf30:	4b23      	ldr	r3, [pc, #140]	; (800cfc0 <xTaskIncrementTick+0x15c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	4a22      	ldr	r2, [pc, #136]	; (800cfc0 <xTaskIncrementTick+0x15c>)
 800cf38:	6013      	str	r3, [r2, #0]
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3e:	4613      	mov	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4a1f      	ldr	r2, [pc, #124]	; (800cfc4 <xTaskIncrementTick+0x160>)
 800cf48:	441a      	add	r2, r3
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	4619      	mov	r1, r3
 800cf50:	4610      	mov	r0, r2
 800cf52:	f7fe fe0d 	bl	800bb70 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5a:	4b1b      	ldr	r3, [pc, #108]	; (800cfc8 <xTaskIncrementTick+0x164>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d3b9      	bcc.n	800ced8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf64:	2301      	movs	r3, #1
 800cf66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf68:	e7b6      	b.n	800ced8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf6a:	4b17      	ldr	r3, [pc, #92]	; (800cfc8 <xTaskIncrementTick+0x164>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf70:	4914      	ldr	r1, [pc, #80]	; (800cfc4 <xTaskIncrementTick+0x160>)
 800cf72:	4613      	mov	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4413      	add	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	440b      	add	r3, r1
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d901      	bls.n	800cf86 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cf82:	2301      	movs	r3, #1
 800cf84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf86:	4b11      	ldr	r3, [pc, #68]	; (800cfcc <xTaskIncrementTick+0x168>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d007      	beq.n	800cf9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	617b      	str	r3, [r7, #20]
 800cf92:	e004      	b.n	800cf9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cf94:	4b0e      	ldr	r3, [pc, #56]	; (800cfd0 <xTaskIncrementTick+0x16c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	4a0d      	ldr	r2, [pc, #52]	; (800cfd0 <xTaskIncrementTick+0x16c>)
 800cf9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf9e:	697b      	ldr	r3, [r7, #20]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	20000d2c 	.word	0x20000d2c
 800cfac:	20000d08 	.word	0x20000d08
 800cfb0:	20000cbc 	.word	0x20000cbc
 800cfb4:	20000cc0 	.word	0x20000cc0
 800cfb8:	20000d1c 	.word	0x20000d1c
 800cfbc:	20000d24 	.word	0x20000d24
 800cfc0:	20000d0c 	.word	0x20000d0c
 800cfc4:	20000c08 	.word	0x20000c08
 800cfc8:	20000c04 	.word	0x20000c04
 800cfcc:	20000d18 	.word	0x20000d18
 800cfd0:	20000d14 	.word	0x20000d14

0800cfd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b087      	sub	sp, #28
 800cfd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cfda:	4b27      	ldr	r3, [pc, #156]	; (800d078 <vTaskSwitchContext+0xa4>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cfe2:	4b26      	ldr	r3, [pc, #152]	; (800d07c <vTaskSwitchContext+0xa8>)
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cfe8:	e03f      	b.n	800d06a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cfea:	4b24      	ldr	r3, [pc, #144]	; (800d07c <vTaskSwitchContext+0xa8>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cff0:	4b23      	ldr	r3, [pc, #140]	; (800d080 <vTaskSwitchContext+0xac>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	fab3 f383 	clz	r3, r3
 800cffc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cffe:	7afb      	ldrb	r3, [r7, #11]
 800d000:	f1c3 031f 	rsb	r3, r3, #31
 800d004:	617b      	str	r3, [r7, #20]
 800d006:	491f      	ldr	r1, [pc, #124]	; (800d084 <vTaskSwitchContext+0xb0>)
 800d008:	697a      	ldr	r2, [r7, #20]
 800d00a:	4613      	mov	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	440b      	add	r3, r1
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d10a      	bne.n	800d030 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	607b      	str	r3, [r7, #4]
}
 800d02c:	bf00      	nop
 800d02e:	e7fe      	b.n	800d02e <vTaskSwitchContext+0x5a>
 800d030:	697a      	ldr	r2, [r7, #20]
 800d032:	4613      	mov	r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	4413      	add	r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4a12      	ldr	r2, [pc, #72]	; (800d084 <vTaskSwitchContext+0xb0>)
 800d03c:	4413      	add	r3, r2
 800d03e:	613b      	str	r3, [r7, #16]
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	685a      	ldr	r2, [r3, #4]
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	605a      	str	r2, [r3, #4]
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	685a      	ldr	r2, [r3, #4]
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	3308      	adds	r3, #8
 800d052:	429a      	cmp	r2, r3
 800d054:	d104      	bne.n	800d060 <vTaskSwitchContext+0x8c>
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	605a      	str	r2, [r3, #4]
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	4a08      	ldr	r2, [pc, #32]	; (800d088 <vTaskSwitchContext+0xb4>)
 800d068:	6013      	str	r3, [r2, #0]
}
 800d06a:	bf00      	nop
 800d06c:	371c      	adds	r7, #28
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	20000d2c 	.word	0x20000d2c
 800d07c:	20000d18 	.word	0x20000d18
 800d080:	20000d0c 	.word	0x20000d0c
 800d084:	20000c08 	.word	0x20000c08
 800d088:	20000c04 	.word	0x20000c04

0800d08c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60fb      	str	r3, [r7, #12]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0b2:	4b07      	ldr	r3, [pc, #28]	; (800d0d0 <vTaskPlaceOnEventList+0x44>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3318      	adds	r3, #24
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7fe fd7c 	bl	800bbb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0c0:	2101      	movs	r1, #1
 800d0c2:	6838      	ldr	r0, [r7, #0]
 800d0c4:	f000 fa92 	bl	800d5ec <prvAddCurrentTaskToDelayedList>
}
 800d0c8:	bf00      	nop
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	20000c04 	.word	0x20000c04

0800d0d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b086      	sub	sp, #24
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10a      	bne.n	800d0fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	617b      	str	r3, [r7, #20]
}
 800d0f8:	bf00      	nop
 800d0fa:	e7fe      	b.n	800d0fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0fc:	4b0a      	ldr	r3, [pc, #40]	; (800d128 <vTaskPlaceOnEventListRestricted+0x54>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	3318      	adds	r3, #24
 800d102:	4619      	mov	r1, r3
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f7fe fd33 	bl	800bb70 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d114:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d116:	6879      	ldr	r1, [r7, #4]
 800d118:	68b8      	ldr	r0, [r7, #8]
 800d11a:	f000 fa67 	bl	800d5ec <prvAddCurrentTaskToDelayedList>
	}
 800d11e:	bf00      	nop
 800d120:	3718      	adds	r7, #24
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20000c04 	.word	0x20000c04

0800d12c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10a      	bne.n	800d158 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d146:	f383 8811 	msr	BASEPRI, r3
 800d14a:	f3bf 8f6f 	isb	sy
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	60fb      	str	r3, [r7, #12]
}
 800d154:	bf00      	nop
 800d156:	e7fe      	b.n	800d156 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	3318      	adds	r3, #24
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fe fd64 	bl	800bc2a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d162:	4b1d      	ldr	r3, [pc, #116]	; (800d1d8 <xTaskRemoveFromEventList+0xac>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d11c      	bne.n	800d1a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	3304      	adds	r3, #4
 800d16e:	4618      	mov	r0, r3
 800d170:	f7fe fd5b 	bl	800bc2a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d178:	2201      	movs	r2, #1
 800d17a:	409a      	lsls	r2, r3
 800d17c:	4b17      	ldr	r3, [pc, #92]	; (800d1dc <xTaskRemoveFromEventList+0xb0>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4313      	orrs	r3, r2
 800d182:	4a16      	ldr	r2, [pc, #88]	; (800d1dc <xTaskRemoveFromEventList+0xb0>)
 800d184:	6013      	str	r3, [r2, #0]
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18a:	4613      	mov	r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4a13      	ldr	r2, [pc, #76]	; (800d1e0 <xTaskRemoveFromEventList+0xb4>)
 800d194:	441a      	add	r2, r3
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	3304      	adds	r3, #4
 800d19a:	4619      	mov	r1, r3
 800d19c:	4610      	mov	r0, r2
 800d19e:	f7fe fce7 	bl	800bb70 <vListInsertEnd>
 800d1a2:	e005      	b.n	800d1b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	3318      	adds	r3, #24
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	480e      	ldr	r0, [pc, #56]	; (800d1e4 <xTaskRemoveFromEventList+0xb8>)
 800d1ac:	f7fe fce0 	bl	800bb70 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b4:	4b0c      	ldr	r3, [pc, #48]	; (800d1e8 <xTaskRemoveFromEventList+0xbc>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d905      	bls.n	800d1ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d1c2:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <xTaskRemoveFromEventList+0xc0>)
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	601a      	str	r2, [r3, #0]
 800d1c8:	e001      	b.n	800d1ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d1ce:	697b      	ldr	r3, [r7, #20]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	20000d2c 	.word	0x20000d2c
 800d1dc:	20000d0c 	.word	0x20000d0c
 800d1e0:	20000c08 	.word	0x20000c08
 800d1e4:	20000cc4 	.word	0x20000cc4
 800d1e8:	20000c04 	.word	0x20000c04
 800d1ec:	20000d18 	.word	0x20000d18

0800d1f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1f8:	4b06      	ldr	r3, [pc, #24]	; (800d214 <vTaskInternalSetTimeOutState+0x24>)
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d200:	4b05      	ldr	r3, [pc, #20]	; (800d218 <vTaskInternalSetTimeOutState+0x28>)
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	605a      	str	r2, [r3, #4]
}
 800d208:	bf00      	nop
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	20000d1c 	.word	0x20000d1c
 800d218:	20000d08 	.word	0x20000d08

0800d21c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b088      	sub	sp, #32
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10a      	bne.n	800d242 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	613b      	str	r3, [r7, #16]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10a      	bne.n	800d25e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	f383 8811 	msr	BASEPRI, r3
 800d250:	f3bf 8f6f 	isb	sy
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	60fb      	str	r3, [r7, #12]
}
 800d25a:	bf00      	nop
 800d25c:	e7fe      	b.n	800d25c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d25e:	f000 ff41 	bl	800e0e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d262:	4b1d      	ldr	r3, [pc, #116]	; (800d2d8 <xTaskCheckForTimeOut+0xbc>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	69ba      	ldr	r2, [r7, #24]
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d27a:	d102      	bne.n	800d282 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d27c:	2300      	movs	r3, #0
 800d27e:	61fb      	str	r3, [r7, #28]
 800d280:	e023      	b.n	800d2ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	4b15      	ldr	r3, [pc, #84]	; (800d2dc <xTaskCheckForTimeOut+0xc0>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d007      	beq.n	800d29e <xTaskCheckForTimeOut+0x82>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	69ba      	ldr	r2, [r7, #24]
 800d294:	429a      	cmp	r2, r3
 800d296:	d302      	bcc.n	800d29e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d298:	2301      	movs	r3, #1
 800d29a:	61fb      	str	r3, [r7, #28]
 800d29c:	e015      	b.n	800d2ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	697a      	ldr	r2, [r7, #20]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d20b      	bcs.n	800d2c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	1ad2      	subs	r2, r2, r3
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7ff ff9b 	bl	800d1f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	61fb      	str	r3, [r7, #28]
 800d2be:	e004      	b.n	800d2ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d2ca:	f000 ff3b 	bl	800e144 <vPortExitCritical>

	return xReturn;
 800d2ce:	69fb      	ldr	r3, [r7, #28]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3720      	adds	r7, #32
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	20000d08 	.word	0x20000d08
 800d2dc:	20000d1c 	.word	0x20000d1c

0800d2e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d2e4:	4b03      	ldr	r3, [pc, #12]	; (800d2f4 <vTaskMissedYield+0x14>)
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	601a      	str	r2, [r3, #0]
}
 800d2ea:	bf00      	nop
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	20000d18 	.word	0x20000d18

0800d2f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d300:	f000 f852 	bl	800d3a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d304:	4b06      	ldr	r3, [pc, #24]	; (800d320 <prvIdleTask+0x28>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d9f9      	bls.n	800d300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d30c:	4b05      	ldr	r3, [pc, #20]	; (800d324 <prvIdleTask+0x2c>)
 800d30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d31c:	e7f0      	b.n	800d300 <prvIdleTask+0x8>
 800d31e:	bf00      	nop
 800d320:	20000c08 	.word	0x20000c08
 800d324:	e000ed04 	.word	0xe000ed04

0800d328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d32e:	2300      	movs	r3, #0
 800d330:	607b      	str	r3, [r7, #4]
 800d332:	e00c      	b.n	800d34e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	4613      	mov	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	4a12      	ldr	r2, [pc, #72]	; (800d388 <prvInitialiseTaskLists+0x60>)
 800d340:	4413      	add	r3, r2
 800d342:	4618      	mov	r0, r3
 800d344:	f7fe fbe7 	bl	800bb16 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	3301      	adds	r3, #1
 800d34c:	607b      	str	r3, [r7, #4]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b06      	cmp	r3, #6
 800d352:	d9ef      	bls.n	800d334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d354:	480d      	ldr	r0, [pc, #52]	; (800d38c <prvInitialiseTaskLists+0x64>)
 800d356:	f7fe fbde 	bl	800bb16 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d35a:	480d      	ldr	r0, [pc, #52]	; (800d390 <prvInitialiseTaskLists+0x68>)
 800d35c:	f7fe fbdb 	bl	800bb16 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d360:	480c      	ldr	r0, [pc, #48]	; (800d394 <prvInitialiseTaskLists+0x6c>)
 800d362:	f7fe fbd8 	bl	800bb16 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d366:	480c      	ldr	r0, [pc, #48]	; (800d398 <prvInitialiseTaskLists+0x70>)
 800d368:	f7fe fbd5 	bl	800bb16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d36c:	480b      	ldr	r0, [pc, #44]	; (800d39c <prvInitialiseTaskLists+0x74>)
 800d36e:	f7fe fbd2 	bl	800bb16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d372:	4b0b      	ldr	r3, [pc, #44]	; (800d3a0 <prvInitialiseTaskLists+0x78>)
 800d374:	4a05      	ldr	r2, [pc, #20]	; (800d38c <prvInitialiseTaskLists+0x64>)
 800d376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d378:	4b0a      	ldr	r3, [pc, #40]	; (800d3a4 <prvInitialiseTaskLists+0x7c>)
 800d37a:	4a05      	ldr	r2, [pc, #20]	; (800d390 <prvInitialiseTaskLists+0x68>)
 800d37c:	601a      	str	r2, [r3, #0]
}
 800d37e:	bf00      	nop
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20000c08 	.word	0x20000c08
 800d38c:	20000c94 	.word	0x20000c94
 800d390:	20000ca8 	.word	0x20000ca8
 800d394:	20000cc4 	.word	0x20000cc4
 800d398:	20000cd8 	.word	0x20000cd8
 800d39c:	20000cf0 	.word	0x20000cf0
 800d3a0:	20000cbc 	.word	0x20000cbc
 800d3a4:	20000cc0 	.word	0x20000cc0

0800d3a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3ae:	e019      	b.n	800d3e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d3b0:	f000 fe98 	bl	800e0e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b4:	4b10      	ldr	r3, [pc, #64]	; (800d3f8 <prvCheckTasksWaitingTermination+0x50>)
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fe fc32 	bl	800bc2a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d3c6:	4b0d      	ldr	r3, [pc, #52]	; (800d3fc <prvCheckTasksWaitingTermination+0x54>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	4a0b      	ldr	r2, [pc, #44]	; (800d3fc <prvCheckTasksWaitingTermination+0x54>)
 800d3ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d3d0:	4b0b      	ldr	r3, [pc, #44]	; (800d400 <prvCheckTasksWaitingTermination+0x58>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	4a0a      	ldr	r2, [pc, #40]	; (800d400 <prvCheckTasksWaitingTermination+0x58>)
 800d3d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d3da:	f000 feb3 	bl	800e144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f810 	bl	800d404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3e4:	4b06      	ldr	r3, [pc, #24]	; (800d400 <prvCheckTasksWaitingTermination+0x58>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1e1      	bne.n	800d3b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d3ec:	bf00      	nop
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20000cd8 	.word	0x20000cd8
 800d3fc:	20000d04 	.word	0x20000d04
 800d400:	20000cec 	.word	0x20000cec

0800d404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d412:	2b00      	cmp	r3, #0
 800d414:	d108      	bne.n	800d428 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d41a:	4618      	mov	r0, r3
 800d41c:	f000 ff96 	bl	800e34c <vPortFree>
				vPortFree( pxTCB );
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 ff93 	bl	800e34c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d426:	e018      	b.n	800d45a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d103      	bne.n	800d43a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 ff8a 	bl	800e34c <vPortFree>
	}
 800d438:	e00f      	b.n	800d45a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d440:	2b02      	cmp	r3, #2
 800d442:	d00a      	beq.n	800d45a <prvDeleteTCB+0x56>
	__asm volatile
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	60fb      	str	r3, [r7, #12]
}
 800d456:	bf00      	nop
 800d458:	e7fe      	b.n	800d458 <prvDeleteTCB+0x54>
	}
 800d45a:	bf00      	nop
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
	...

0800d464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d46a:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <prvResetNextTaskUnblockTime+0x38>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d104      	bne.n	800d47e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d474:	4b0a      	ldr	r3, [pc, #40]	; (800d4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800d476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d47a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d47c:	e008      	b.n	800d490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d47e:	4b07      	ldr	r3, [pc, #28]	; (800d49c <prvResetNextTaskUnblockTime+0x38>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	4a04      	ldr	r2, [pc, #16]	; (800d4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800d48e:	6013      	str	r3, [r2, #0]
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	20000cbc 	.word	0x20000cbc
 800d4a0:	20000d24 	.word	0x20000d24

0800d4a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d4aa:	4b0b      	ldr	r3, [pc, #44]	; (800d4d8 <xTaskGetSchedulerState+0x34>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d102      	bne.n	800d4b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	607b      	str	r3, [r7, #4]
 800d4b6:	e008      	b.n	800d4ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4b8:	4b08      	ldr	r3, [pc, #32]	; (800d4dc <xTaskGetSchedulerState+0x38>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d102      	bne.n	800d4c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	607b      	str	r3, [r7, #4]
 800d4c4:	e001      	b.n	800d4ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d4ca:	687b      	ldr	r3, [r7, #4]
	}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr
 800d4d8:	20000d10 	.word	0x20000d10
 800d4dc:	20000d2c 	.word	0x20000d2c

0800d4e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d06e      	beq.n	800d5d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4f6:	4b3a      	ldr	r3, [pc, #232]	; (800d5e0 <xTaskPriorityDisinherit+0x100>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d00a      	beq.n	800d516 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	60fb      	str	r3, [r7, #12]
}
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10a      	bne.n	800d534 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	60bb      	str	r3, [r7, #8]
}
 800d530:	bf00      	nop
 800d532:	e7fe      	b.n	800d532 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d538:	1e5a      	subs	r2, r3, #1
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d546:	429a      	cmp	r2, r3
 800d548:	d044      	beq.n	800d5d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d140      	bne.n	800d5d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	3304      	adds	r3, #4
 800d556:	4618      	mov	r0, r3
 800d558:	f7fe fb67 	bl	800bc2a <uxListRemove>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d115      	bne.n	800d58e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d566:	491f      	ldr	r1, [pc, #124]	; (800d5e4 <xTaskPriorityDisinherit+0x104>)
 800d568:	4613      	mov	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4413      	add	r3, r2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	440b      	add	r3, r1
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10a      	bne.n	800d58e <xTaskPriorityDisinherit+0xae>
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57c:	2201      	movs	r2, #1
 800d57e:	fa02 f303 	lsl.w	r3, r2, r3
 800d582:	43da      	mvns	r2, r3
 800d584:	4b18      	ldr	r3, [pc, #96]	; (800d5e8 <xTaskPriorityDisinherit+0x108>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4013      	ands	r3, r2
 800d58a:	4a17      	ldr	r2, [pc, #92]	; (800d5e8 <xTaskPriorityDisinherit+0x108>)
 800d58c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59a:	f1c3 0207 	rsb	r2, r3, #7
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	409a      	lsls	r2, r3
 800d5aa:	4b0f      	ldr	r3, [pc, #60]	; (800d5e8 <xTaskPriorityDisinherit+0x108>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	4a0d      	ldr	r2, [pc, #52]	; (800d5e8 <xTaskPriorityDisinherit+0x108>)
 800d5b2:	6013      	str	r3, [r2, #0]
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4413      	add	r3, r2
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	4a08      	ldr	r2, [pc, #32]	; (800d5e4 <xTaskPriorityDisinherit+0x104>)
 800d5c2:	441a      	add	r2, r3
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	f7fe fad0 	bl	800bb70 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5d4:	697b      	ldr	r3, [r7, #20]
	}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3718      	adds	r7, #24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	20000c04 	.word	0x20000c04
 800d5e4:	20000c08 	.word	0x20000c08
 800d5e8:	20000d0c 	.word	0x20000d0c

0800d5ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5f6:	4b29      	ldr	r3, [pc, #164]	; (800d69c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5fc:	4b28      	ldr	r3, [pc, #160]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	3304      	adds	r3, #4
 800d602:	4618      	mov	r0, r3
 800d604:	f7fe fb11 	bl	800bc2a <uxListRemove>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10b      	bne.n	800d626 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d60e:	4b24      	ldr	r3, [pc, #144]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d614:	2201      	movs	r2, #1
 800d616:	fa02 f303 	lsl.w	r3, r2, r3
 800d61a:	43da      	mvns	r2, r3
 800d61c:	4b21      	ldr	r3, [pc, #132]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4013      	ands	r3, r2
 800d622:	4a20      	ldr	r2, [pc, #128]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d624:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d62c:	d10a      	bne.n	800d644 <prvAddCurrentTaskToDelayedList+0x58>
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d007      	beq.n	800d644 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d634:	4b1a      	ldr	r3, [pc, #104]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	3304      	adds	r3, #4
 800d63a:	4619      	mov	r1, r3
 800d63c:	481a      	ldr	r0, [pc, #104]	; (800d6a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d63e:	f7fe fa97 	bl	800bb70 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d642:	e026      	b.n	800d692 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4413      	add	r3, r2
 800d64a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d64c:	4b14      	ldr	r3, [pc, #80]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d209      	bcs.n	800d670 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d65c:	4b13      	ldr	r3, [pc, #76]	; (800d6ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	4b0f      	ldr	r3, [pc, #60]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3304      	adds	r3, #4
 800d666:	4619      	mov	r1, r3
 800d668:	4610      	mov	r0, r2
 800d66a:	f7fe faa5 	bl	800bbb8 <vListInsert>
}
 800d66e:	e010      	b.n	800d692 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d670:	4b0f      	ldr	r3, [pc, #60]	; (800d6b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	4b0a      	ldr	r3, [pc, #40]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	3304      	adds	r3, #4
 800d67a:	4619      	mov	r1, r3
 800d67c:	4610      	mov	r0, r2
 800d67e:	f7fe fa9b 	bl	800bbb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d682:	4b0c      	ldr	r3, [pc, #48]	; (800d6b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d202      	bcs.n	800d692 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d68c:	4a09      	ldr	r2, [pc, #36]	; (800d6b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	6013      	str	r3, [r2, #0]
}
 800d692:	bf00      	nop
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	20000d08 	.word	0x20000d08
 800d6a0:	20000c04 	.word	0x20000c04
 800d6a4:	20000d0c 	.word	0x20000d0c
 800d6a8:	20000cf0 	.word	0x20000cf0
 800d6ac:	20000cc0 	.word	0x20000cc0
 800d6b0:	20000cbc 	.word	0x20000cbc
 800d6b4:	20000d24 	.word	0x20000d24

0800d6b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08a      	sub	sp, #40	; 0x28
 800d6bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d6c2:	f000 fb63 	bl	800dd8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d6c6:	4b1c      	ldr	r3, [pc, #112]	; (800d738 <xTimerCreateTimerTask+0x80>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d021      	beq.n	800d712 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d6d6:	1d3a      	adds	r2, r7, #4
 800d6d8:	f107 0108 	add.w	r1, r7, #8
 800d6dc:	f107 030c 	add.w	r3, r7, #12
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7f3 ffe1 	bl	80016a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d6e6:	6879      	ldr	r1, [r7, #4]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	9202      	str	r2, [sp, #8]
 800d6ee:	9301      	str	r3, [sp, #4]
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	460a      	mov	r2, r1
 800d6f8:	4910      	ldr	r1, [pc, #64]	; (800d73c <xTimerCreateTimerTask+0x84>)
 800d6fa:	4811      	ldr	r0, [pc, #68]	; (800d740 <xTimerCreateTimerTask+0x88>)
 800d6fc:	f7fe ffa8 	bl	800c650 <xTaskCreateStatic>
 800d700:	4603      	mov	r3, r0
 800d702:	4a10      	ldr	r2, [pc, #64]	; (800d744 <xTimerCreateTimerTask+0x8c>)
 800d704:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d706:	4b0f      	ldr	r3, [pc, #60]	; (800d744 <xTimerCreateTimerTask+0x8c>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d70e:	2301      	movs	r3, #1
 800d710:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10a      	bne.n	800d72e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	613b      	str	r3, [r7, #16]
}
 800d72a:	bf00      	nop
 800d72c:	e7fe      	b.n	800d72c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d72e:	697b      	ldr	r3, [r7, #20]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3718      	adds	r7, #24
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	20000d60 	.word	0x20000d60
 800d73c:	08011d08 	.word	0x08011d08
 800d740:	0800d96d 	.word	0x0800d96d
 800d744:	20000d64 	.word	0x20000d64

0800d748 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af02      	add	r7, sp, #8
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d756:	2028      	movs	r0, #40	; 0x28
 800d758:	f000 fde6 	bl	800e328 <pvPortMalloc>
 800d75c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00d      	beq.n	800d780 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	68b9      	ldr	r1, [r7, #8]
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f000 f805 	bl	800d78a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d780:	697b      	ldr	r3, [r7, #20]
	}
 800d782:	4618      	mov	r0, r3
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b086      	sub	sp, #24
 800d78e:	af00      	add	r7, sp, #0
 800d790:	60f8      	str	r0, [r7, #12]
 800d792:	60b9      	str	r1, [r7, #8]
 800d794:	607a      	str	r2, [r7, #4]
 800d796:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10a      	bne.n	800d7b4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	617b      	str	r3, [r7, #20]
}
 800d7b0:	bf00      	nop
 800d7b2:	e7fe      	b.n	800d7b2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d01e      	beq.n	800d7f8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d7ba:	f000 fae7 	bl	800dd8c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	68ba      	ldr	r2, [r7, #8]
 800d7c8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	6a3a      	ldr	r2, [r7, #32]
 800d7d4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	3304      	adds	r3, #4
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fe f9bb 	bl	800bb56 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d008      	beq.n	800d7f8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d7ec:	f043 0304 	orr.w	r3, r3, #4
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d7f8:	bf00      	nop
 800d7fa:	3718      	adds	r7, #24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08a      	sub	sp, #40	; 0x28
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
 800d80c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d80e:	2300      	movs	r3, #0
 800d810:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10a      	bne.n	800d82e <xTimerGenericCommand+0x2e>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	623b      	str	r3, [r7, #32]
}
 800d82a:	bf00      	nop
 800d82c:	e7fe      	b.n	800d82c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d82e:	4b1a      	ldr	r3, [pc, #104]	; (800d898 <xTimerGenericCommand+0x98>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d02a      	beq.n	800d88c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	2b05      	cmp	r3, #5
 800d846:	dc18      	bgt.n	800d87a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d848:	f7ff fe2c 	bl	800d4a4 <xTaskGetSchedulerState>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b02      	cmp	r3, #2
 800d850:	d109      	bne.n	800d866 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d852:	4b11      	ldr	r3, [pc, #68]	; (800d898 <xTimerGenericCommand+0x98>)
 800d854:	6818      	ldr	r0, [r3, #0]
 800d856:	f107 0114 	add.w	r1, r7, #20
 800d85a:	2300      	movs	r3, #0
 800d85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d85e:	f7fe fb0f 	bl	800be80 <xQueueGenericSend>
 800d862:	6278      	str	r0, [r7, #36]	; 0x24
 800d864:	e012      	b.n	800d88c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d866:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <xTimerGenericCommand+0x98>)
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	f107 0114 	add.w	r1, r7, #20
 800d86e:	2300      	movs	r3, #0
 800d870:	2200      	movs	r2, #0
 800d872:	f7fe fb05 	bl	800be80 <xQueueGenericSend>
 800d876:	6278      	str	r0, [r7, #36]	; 0x24
 800d878:	e008      	b.n	800d88c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d87a:	4b07      	ldr	r3, [pc, #28]	; (800d898 <xTimerGenericCommand+0x98>)
 800d87c:	6818      	ldr	r0, [r3, #0]
 800d87e:	f107 0114 	add.w	r1, r7, #20
 800d882:	2300      	movs	r3, #0
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	f7fe fbf9 	bl	800c07c <xQueueGenericSendFromISR>
 800d88a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3728      	adds	r7, #40	; 0x28
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	20000d60 	.word	0x20000d60

0800d89c <xTimerGetPeriod>:
	return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10a      	bne.n	800d8c4 <xTimerGetPeriod+0x28>
	__asm volatile
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	60bb      	str	r3, [r7, #8]
}
 800d8c0:	bf00      	nop
 800d8c2:	e7fe      	b.n	800d8c2 <xTimerGetPeriod+0x26>
	return pxTimer->xTimerPeriodInTicks;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	699b      	ldr	r3, [r3, #24]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3714      	adds	r7, #20
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b088      	sub	sp, #32
 800d8d8:	af02      	add	r7, sp, #8
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8de:	4b22      	ldr	r3, [pc, #136]	; (800d968 <prvProcessExpiredTimer+0x94>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7fe f99c 	bl	800bc2a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8f8:	f003 0304 	and.w	r3, r3, #4
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d022      	beq.n	800d946 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	699a      	ldr	r2, [r3, #24]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	18d1      	adds	r1, r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	683a      	ldr	r2, [r7, #0]
 800d90c:	6978      	ldr	r0, [r7, #20]
 800d90e:	f000 f8d1 	bl	800dab4 <prvInsertTimerInActiveList>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d01f      	beq.n	800d958 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d918:	2300      	movs	r3, #0
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	2300      	movs	r3, #0
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	2100      	movs	r1, #0
 800d922:	6978      	ldr	r0, [r7, #20]
 800d924:	f7ff ff6c 	bl	800d800 <xTimerGenericCommand>
 800d928:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d113      	bne.n	800d958 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	60fb      	str	r3, [r7, #12]
}
 800d942:	bf00      	nop
 800d944:	e7fe      	b.n	800d944 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d94c:	f023 0301 	bic.w	r3, r3, #1
 800d950:	b2da      	uxtb	r2, r3
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	6a1b      	ldr	r3, [r3, #32]
 800d95c:	6978      	ldr	r0, [r7, #20]
 800d95e:	4798      	blx	r3
}
 800d960:	bf00      	nop
 800d962:	3718      	adds	r7, #24
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	20000d58 	.word	0x20000d58

0800d96c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d974:	f107 0308 	add.w	r3, r7, #8
 800d978:	4618      	mov	r0, r3
 800d97a:	f000 f857 	bl	800da2c <prvGetNextExpireTime>
 800d97e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	4619      	mov	r1, r3
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f000 f803 	bl	800d990 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d98a:	f000 f8d5 	bl	800db38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d98e:	e7f1      	b.n	800d974 <prvTimerTask+0x8>

0800d990 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d99a:	f7ff f9a9 	bl	800ccf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d99e:	f107 0308 	add.w	r3, r7, #8
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f000 f866 	bl	800da74 <prvSampleTimeNow>
 800d9a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d130      	bne.n	800da12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10a      	bne.n	800d9cc <prvProcessTimerOrBlockTask+0x3c>
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d806      	bhi.n	800d9cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d9be:	f7ff f9a5 	bl	800cd0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d9c2:	68f9      	ldr	r1, [r7, #12]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7ff ff85 	bl	800d8d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d9ca:	e024      	b.n	800da16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d008      	beq.n	800d9e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d9d2:	4b13      	ldr	r3, [pc, #76]	; (800da20 <prvProcessTimerOrBlockTask+0x90>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d101      	bne.n	800d9e0 <prvProcessTimerOrBlockTask+0x50>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e000      	b.n	800d9e2 <prvProcessTimerOrBlockTask+0x52>
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d9e4:	4b0f      	ldr	r3, [pc, #60]	; (800da24 <prvProcessTimerOrBlockTask+0x94>)
 800d9e6:	6818      	ldr	r0, [r3, #0]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	1ad3      	subs	r3, r2, r3
 800d9ee:	683a      	ldr	r2, [r7, #0]
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	f7fe fdf9 	bl	800c5e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d9f6:	f7ff f989 	bl	800cd0c <xTaskResumeAll>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10a      	bne.n	800da16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800da00:	4b09      	ldr	r3, [pc, #36]	; (800da28 <prvProcessTimerOrBlockTask+0x98>)
 800da02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da06:	601a      	str	r2, [r3, #0]
 800da08:	f3bf 8f4f 	dsb	sy
 800da0c:	f3bf 8f6f 	isb	sy
}
 800da10:	e001      	b.n	800da16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da12:	f7ff f97b 	bl	800cd0c <xTaskResumeAll>
}
 800da16:	bf00      	nop
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20000d5c 	.word	0x20000d5c
 800da24:	20000d60 	.word	0x20000d60
 800da28:	e000ed04 	.word	0xe000ed04

0800da2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da34:	4b0e      	ldr	r3, [pc, #56]	; (800da70 <prvGetNextExpireTime+0x44>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <prvGetNextExpireTime+0x16>
 800da3e:	2201      	movs	r2, #1
 800da40:	e000      	b.n	800da44 <prvGetNextExpireTime+0x18>
 800da42:	2200      	movs	r2, #0
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d105      	bne.n	800da5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da50:	4b07      	ldr	r3, [pc, #28]	; (800da70 <prvGetNextExpireTime+0x44>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	60fb      	str	r3, [r7, #12]
 800da5a:	e001      	b.n	800da60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800da5c:	2300      	movs	r3, #0
 800da5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800da60:	68fb      	ldr	r3, [r7, #12]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3714      	adds	r7, #20
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop
 800da70:	20000d58 	.word	0x20000d58

0800da74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da7c:	f7ff f9e2 	bl	800ce44 <xTaskGetTickCount>
 800da80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da82:	4b0b      	ldr	r3, [pc, #44]	; (800dab0 <prvSampleTimeNow+0x3c>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d205      	bcs.n	800da98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800da8c:	f000 f91a 	bl	800dcc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	601a      	str	r2, [r3, #0]
 800da96:	e002      	b.n	800da9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da9e:	4a04      	ldr	r2, [pc, #16]	; (800dab0 <prvSampleTimeNow+0x3c>)
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800daa4:	68fb      	ldr	r3, [r7, #12]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20000d68 	.word	0x20000d68

0800dab4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b086      	sub	sp, #24
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	607a      	str	r2, [r7, #4]
 800dac0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dac2:	2300      	movs	r3, #0
 800dac4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dad2:	68ba      	ldr	r2, [r7, #8]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d812      	bhi.n	800db00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	1ad2      	subs	r2, r2, r3
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d302      	bcc.n	800daee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dae8:	2301      	movs	r3, #1
 800daea:	617b      	str	r3, [r7, #20]
 800daec:	e01b      	b.n	800db26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800daee:	4b10      	ldr	r3, [pc, #64]	; (800db30 <prvInsertTimerInActiveList+0x7c>)
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	3304      	adds	r3, #4
 800daf6:	4619      	mov	r1, r3
 800daf8:	4610      	mov	r0, r2
 800dafa:	f7fe f85d 	bl	800bbb8 <vListInsert>
 800dafe:	e012      	b.n	800db26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	429a      	cmp	r2, r3
 800db06:	d206      	bcs.n	800db16 <prvInsertTimerInActiveList+0x62>
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d302      	bcc.n	800db16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db10:	2301      	movs	r3, #1
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	e007      	b.n	800db26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db16:	4b07      	ldr	r3, [pc, #28]	; (800db34 <prvInsertTimerInActiveList+0x80>)
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3304      	adds	r3, #4
 800db1e:	4619      	mov	r1, r3
 800db20:	4610      	mov	r0, r2
 800db22:	f7fe f849 	bl	800bbb8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800db26:	697b      	ldr	r3, [r7, #20]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3718      	adds	r7, #24
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	20000d5c 	.word	0x20000d5c
 800db34:	20000d58 	.word	0x20000d58

0800db38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b08c      	sub	sp, #48	; 0x30
 800db3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db3e:	e0ae      	b.n	800dc9e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	f2c0 80ab 	blt.w	800dc9e <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	695b      	ldr	r3, [r3, #20]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d004      	beq.n	800db5e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	3304      	adds	r3, #4
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fe f866 	bl	800bc2a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db5e:	1d3b      	adds	r3, r7, #4
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff ff87 	bl	800da74 <prvSampleTimeNow>
 800db66:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2b09      	cmp	r3, #9
 800db6c:	f200 8096 	bhi.w	800dc9c <prvProcessReceivedCommands+0x164>
 800db70:	a201      	add	r2, pc, #4	; (adr r2, 800db78 <prvProcessReceivedCommands+0x40>)
 800db72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db76:	bf00      	nop
 800db78:	0800dba1 	.word	0x0800dba1
 800db7c:	0800dba1 	.word	0x0800dba1
 800db80:	0800dba1 	.word	0x0800dba1
 800db84:	0800dc15 	.word	0x0800dc15
 800db88:	0800dc29 	.word	0x0800dc29
 800db8c:	0800dc73 	.word	0x0800dc73
 800db90:	0800dba1 	.word	0x0800dba1
 800db94:	0800dba1 	.word	0x0800dba1
 800db98:	0800dc15 	.word	0x0800dc15
 800db9c:	0800dc29 	.word	0x0800dc29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dba6:	f043 0301 	orr.w	r3, r3, #1
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	18d1      	adds	r1, r2, r3
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6a3a      	ldr	r2, [r7, #32]
 800dbbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbc0:	f7ff ff78 	bl	800dab4 <prvInsertTimerInActiveList>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d069      	beq.n	800dc9e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbd8:	f003 0304 	and.w	r3, r3, #4
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d05e      	beq.n	800dc9e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	699b      	ldr	r3, [r3, #24]
 800dbe6:	441a      	add	r2, r3
 800dbe8:	2300      	movs	r3, #0
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	2300      	movs	r3, #0
 800dbee:	2100      	movs	r1, #0
 800dbf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbf2:	f7ff fe05 	bl	800d800 <xTimerGenericCommand>
 800dbf6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d14f      	bne.n	800dc9e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	61bb      	str	r3, [r7, #24]
}
 800dc10:	bf00      	nop
 800dc12:	e7fe      	b.n	800dc12 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc1a:	f023 0301 	bic.w	r3, r3, #1
 800dc1e:	b2da      	uxtb	r2, r3
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800dc26:	e03a      	b.n	800dc9e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc2e:	f043 0301 	orr.w	r3, r3, #1
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc42:	699b      	ldr	r3, [r3, #24]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10a      	bne.n	800dc5e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800dc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	617b      	str	r3, [r7, #20]
}
 800dc5a:	bf00      	nop
 800dc5c:	e7fe      	b.n	800dc5c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	699a      	ldr	r2, [r3, #24]
 800dc62:	6a3b      	ldr	r3, [r7, #32]
 800dc64:	18d1      	adds	r1, r2, r3
 800dc66:	6a3b      	ldr	r3, [r7, #32]
 800dc68:	6a3a      	ldr	r2, [r7, #32]
 800dc6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc6c:	f7ff ff22 	bl	800dab4 <prvInsertTimerInActiveList>
					break;
 800dc70:	e015      	b.n	800dc9e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d103      	bne.n	800dc88 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800dc80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc82:	f000 fb63 	bl	800e34c <vPortFree>
 800dc86:	e00a      	b.n	800dc9e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc8e:	f023 0301 	bic.w	r3, r3, #1
 800dc92:	b2da      	uxtb	r2, r3
 800dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dc9a:	e000      	b.n	800dc9e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800dc9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc9e:	4b08      	ldr	r3, [pc, #32]	; (800dcc0 <prvProcessReceivedCommands+0x188>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f107 0108 	add.w	r1, r7, #8
 800dca6:	2200      	movs	r2, #0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fe fa83 	bl	800c1b4 <xQueueReceive>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f47f af45 	bne.w	800db40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dcb6:	bf00      	nop
 800dcb8:	bf00      	nop
 800dcba:	3728      	adds	r7, #40	; 0x28
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	20000d60 	.word	0x20000d60

0800dcc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dcca:	e048      	b.n	800dd5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dccc:	4b2d      	ldr	r3, [pc, #180]	; (800dd84 <prvSwitchTimerLists+0xc0>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcd6:	4b2b      	ldr	r3, [pc, #172]	; (800dd84 <prvSwitchTimerLists+0xc0>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	68db      	ldr	r3, [r3, #12]
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	3304      	adds	r3, #4
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fd ffa0 	bl	800bc2a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6a1b      	ldr	r3, [r3, #32]
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dcf8:	f003 0304 	and.w	r3, r3, #4
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d02e      	beq.n	800dd5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	699b      	ldr	r3, [r3, #24]
 800dd04:	693a      	ldr	r2, [r7, #16]
 800dd06:	4413      	add	r3, r2
 800dd08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d90e      	bls.n	800dd30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd1e:	4b19      	ldr	r3, [pc, #100]	; (800dd84 <prvSwitchTimerLists+0xc0>)
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3304      	adds	r3, #4
 800dd26:	4619      	mov	r1, r3
 800dd28:	4610      	mov	r0, r2
 800dd2a:	f7fd ff45 	bl	800bbb8 <vListInsert>
 800dd2e:	e016      	b.n	800dd5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd30:	2300      	movs	r3, #0
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	2300      	movs	r3, #0
 800dd36:	693a      	ldr	r2, [r7, #16]
 800dd38:	2100      	movs	r1, #0
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f7ff fd60 	bl	800d800 <xTimerGenericCommand>
 800dd40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d10a      	bne.n	800dd5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4c:	f383 8811 	msr	BASEPRI, r3
 800dd50:	f3bf 8f6f 	isb	sy
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	603b      	str	r3, [r7, #0]
}
 800dd5a:	bf00      	nop
 800dd5c:	e7fe      	b.n	800dd5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd5e:	4b09      	ldr	r3, [pc, #36]	; (800dd84 <prvSwitchTimerLists+0xc0>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1b1      	bne.n	800dccc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dd68:	4b06      	ldr	r3, [pc, #24]	; (800dd84 <prvSwitchTimerLists+0xc0>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dd6e:	4b06      	ldr	r3, [pc, #24]	; (800dd88 <prvSwitchTimerLists+0xc4>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a04      	ldr	r2, [pc, #16]	; (800dd84 <prvSwitchTimerLists+0xc0>)
 800dd74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dd76:	4a04      	ldr	r2, [pc, #16]	; (800dd88 <prvSwitchTimerLists+0xc4>)
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	6013      	str	r3, [r2, #0]
}
 800dd7c:	bf00      	nop
 800dd7e:	3718      	adds	r7, #24
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	20000d58 	.word	0x20000d58
 800dd88:	20000d5c 	.word	0x20000d5c

0800dd8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dd92:	f000 f9a7 	bl	800e0e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dd96:	4b15      	ldr	r3, [pc, #84]	; (800ddec <prvCheckForValidListAndQueue+0x60>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d120      	bne.n	800dde0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd9e:	4814      	ldr	r0, [pc, #80]	; (800ddf0 <prvCheckForValidListAndQueue+0x64>)
 800dda0:	f7fd feb9 	bl	800bb16 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dda4:	4813      	ldr	r0, [pc, #76]	; (800ddf4 <prvCheckForValidListAndQueue+0x68>)
 800dda6:	f7fd feb6 	bl	800bb16 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ddaa:	4b13      	ldr	r3, [pc, #76]	; (800ddf8 <prvCheckForValidListAndQueue+0x6c>)
 800ddac:	4a10      	ldr	r2, [pc, #64]	; (800ddf0 <prvCheckForValidListAndQueue+0x64>)
 800ddae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ddb0:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <prvCheckForValidListAndQueue+0x70>)
 800ddb2:	4a10      	ldr	r2, [pc, #64]	; (800ddf4 <prvCheckForValidListAndQueue+0x68>)
 800ddb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	4b11      	ldr	r3, [pc, #68]	; (800de00 <prvCheckForValidListAndQueue+0x74>)
 800ddbc:	4a11      	ldr	r2, [pc, #68]	; (800de04 <prvCheckForValidListAndQueue+0x78>)
 800ddbe:	210c      	movs	r1, #12
 800ddc0:	200a      	movs	r0, #10
 800ddc2:	f7fd ffc5 	bl	800bd50 <xQueueGenericCreateStatic>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	4a08      	ldr	r2, [pc, #32]	; (800ddec <prvCheckForValidListAndQueue+0x60>)
 800ddca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ddcc:	4b07      	ldr	r3, [pc, #28]	; (800ddec <prvCheckForValidListAndQueue+0x60>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d005      	beq.n	800dde0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ddd4:	4b05      	ldr	r3, [pc, #20]	; (800ddec <prvCheckForValidListAndQueue+0x60>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	490b      	ldr	r1, [pc, #44]	; (800de08 <prvCheckForValidListAndQueue+0x7c>)
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fbda 	bl	800c594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dde0:	f000 f9b0 	bl	800e144 <vPortExitCritical>
}
 800dde4:	bf00      	nop
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	20000d60 	.word	0x20000d60
 800ddf0:	20000d30 	.word	0x20000d30
 800ddf4:	20000d44 	.word	0x20000d44
 800ddf8:	20000d58 	.word	0x20000d58
 800ddfc:	20000d5c 	.word	0x20000d5c
 800de00:	20000de4 	.word	0x20000de4
 800de04:	20000d6c 	.word	0x20000d6c
 800de08:	08011d10 	.word	0x08011d10

0800de0c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d10a      	bne.n	800de34 <pvTimerGetTimerID+0x28>
	__asm volatile
 800de1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de22:	f383 8811 	msr	BASEPRI, r3
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	60fb      	str	r3, [r7, #12]
}
 800de30:	bf00      	nop
 800de32:	e7fe      	b.n	800de32 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800de34:	f000 f956 	bl	800e0e4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	69db      	ldr	r3, [r3, #28]
 800de3c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800de3e:	f000 f981 	bl	800e144 <vPortExitCritical>

	return pvReturn;
 800de42:	693b      	ldr	r3, [r7, #16]
}
 800de44:	4618      	mov	r0, r3
 800de46:	3718      	adds	r7, #24
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10a      	bne.n	800de76 <vTimerSetTimerID+0x2a>
	__asm volatile
 800de60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de64:	f383 8811 	msr	BASEPRI, r3
 800de68:	f3bf 8f6f 	isb	sy
 800de6c:	f3bf 8f4f 	dsb	sy
 800de70:	60bb      	str	r3, [r7, #8]
}
 800de72:	bf00      	nop
 800de74:	e7fe      	b.n	800de74 <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 800de76:	f000 f935 	bl	800e0e4 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 800de80:	f000 f960 	bl	800e144 <vPortExitCritical>
}
 800de84:	bf00      	nop
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	3b04      	subs	r3, #4
 800de9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	3b04      	subs	r3, #4
 800deaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	f023 0201 	bic.w	r2, r3, #1
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3b04      	subs	r3, #4
 800deba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800debc:	4a0c      	ldr	r2, [pc, #48]	; (800def0 <pxPortInitialiseStack+0x64>)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	3b14      	subs	r3, #20
 800dec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	3b04      	subs	r3, #4
 800ded2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f06f 0202 	mvn.w	r2, #2
 800deda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3b20      	subs	r3, #32
 800dee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dee2:	68fb      	ldr	r3, [r7, #12]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr
 800def0:	0800def5 	.word	0x0800def5

0800def4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800defa:	2300      	movs	r3, #0
 800defc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800defe:	4b12      	ldr	r3, [pc, #72]	; (800df48 <prvTaskExitError+0x54>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df06:	d00a      	beq.n	800df1e <prvTaskExitError+0x2a>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	60fb      	str	r3, [r7, #12]
}
 800df1a:	bf00      	nop
 800df1c:	e7fe      	b.n	800df1c <prvTaskExitError+0x28>
	__asm volatile
 800df1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	60bb      	str	r3, [r7, #8]
}
 800df30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df32:	bf00      	nop
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d0fc      	beq.n	800df34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df3a:	bf00      	nop
 800df3c:	bf00      	nop
 800df3e:	3714      	adds	r7, #20
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr
 800df48:	200000b8 	.word	0x200000b8
 800df4c:	00000000 	.word	0x00000000

0800df50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df50:	4b07      	ldr	r3, [pc, #28]	; (800df70 <pxCurrentTCBConst2>)
 800df52:	6819      	ldr	r1, [r3, #0]
 800df54:	6808      	ldr	r0, [r1, #0]
 800df56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5a:	f380 8809 	msr	PSP, r0
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f04f 0000 	mov.w	r0, #0
 800df66:	f380 8811 	msr	BASEPRI, r0
 800df6a:	4770      	bx	lr
 800df6c:	f3af 8000 	nop.w

0800df70 <pxCurrentTCBConst2>:
 800df70:	20000c04 	.word	0x20000c04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800df74:	bf00      	nop
 800df76:	bf00      	nop

0800df78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800df78:	4808      	ldr	r0, [pc, #32]	; (800df9c <prvPortStartFirstTask+0x24>)
 800df7a:	6800      	ldr	r0, [r0, #0]
 800df7c:	6800      	ldr	r0, [r0, #0]
 800df7e:	f380 8808 	msr	MSP, r0
 800df82:	f04f 0000 	mov.w	r0, #0
 800df86:	f380 8814 	msr	CONTROL, r0
 800df8a:	b662      	cpsie	i
 800df8c:	b661      	cpsie	f
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	f3bf 8f6f 	isb	sy
 800df96:	df00      	svc	0
 800df98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800df9a:	bf00      	nop
 800df9c:	e000ed08 	.word	0xe000ed08

0800dfa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dfa6:	4b46      	ldr	r3, [pc, #280]	; (800e0c0 <xPortStartScheduler+0x120>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a46      	ldr	r2, [pc, #280]	; (800e0c4 <xPortStartScheduler+0x124>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d10a      	bne.n	800dfc6 <xPortStartScheduler+0x26>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	613b      	str	r3, [r7, #16]
}
 800dfc2:	bf00      	nop
 800dfc4:	e7fe      	b.n	800dfc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dfc6:	4b3e      	ldr	r3, [pc, #248]	; (800e0c0 <xPortStartScheduler+0x120>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a3f      	ldr	r2, [pc, #252]	; (800e0c8 <xPortStartScheduler+0x128>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d10a      	bne.n	800dfe6 <xPortStartScheduler+0x46>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	60fb      	str	r3, [r7, #12]
}
 800dfe2:	bf00      	nop
 800dfe4:	e7fe      	b.n	800dfe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dfe6:	4b39      	ldr	r3, [pc, #228]	; (800e0cc <xPortStartScheduler+0x12c>)
 800dfe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	22ff      	movs	r2, #255	; 0xff
 800dff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e000:	78fb      	ldrb	r3, [r7, #3]
 800e002:	b2db      	uxtb	r3, r3
 800e004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	4b31      	ldr	r3, [pc, #196]	; (800e0d0 <xPortStartScheduler+0x130>)
 800e00c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e00e:	4b31      	ldr	r3, [pc, #196]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e010:	2207      	movs	r2, #7
 800e012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e014:	e009      	b.n	800e02a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e016:	4b2f      	ldr	r3, [pc, #188]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3b01      	subs	r3, #1
 800e01c:	4a2d      	ldr	r2, [pc, #180]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e01e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	b2db      	uxtb	r3, r3
 800e024:	005b      	lsls	r3, r3, #1
 800e026:	b2db      	uxtb	r3, r3
 800e028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e02a:	78fb      	ldrb	r3, [r7, #3]
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e032:	2b80      	cmp	r3, #128	; 0x80
 800e034:	d0ef      	beq.n	800e016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e036:	4b27      	ldr	r3, [pc, #156]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f1c3 0307 	rsb	r3, r3, #7
 800e03e:	2b04      	cmp	r3, #4
 800e040:	d00a      	beq.n	800e058 <xPortStartScheduler+0xb8>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	60bb      	str	r3, [r7, #8]
}
 800e054:	bf00      	nop
 800e056:	e7fe      	b.n	800e056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e058:	4b1e      	ldr	r3, [pc, #120]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	021b      	lsls	r3, r3, #8
 800e05e:	4a1d      	ldr	r2, [pc, #116]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e062:	4b1c      	ldr	r3, [pc, #112]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e06a:	4a1a      	ldr	r2, [pc, #104]	; (800e0d4 <xPortStartScheduler+0x134>)
 800e06c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	b2da      	uxtb	r2, r3
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e076:	4b18      	ldr	r3, [pc, #96]	; (800e0d8 <xPortStartScheduler+0x138>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a17      	ldr	r2, [pc, #92]	; (800e0d8 <xPortStartScheduler+0x138>)
 800e07c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e082:	4b15      	ldr	r3, [pc, #84]	; (800e0d8 <xPortStartScheduler+0x138>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a14      	ldr	r2, [pc, #80]	; (800e0d8 <xPortStartScheduler+0x138>)
 800e088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e08c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e08e:	f000 f8dd 	bl	800e24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e092:	4b12      	ldr	r3, [pc, #72]	; (800e0dc <xPortStartScheduler+0x13c>)
 800e094:	2200      	movs	r2, #0
 800e096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e098:	f000 f8fc 	bl	800e294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e09c:	4b10      	ldr	r3, [pc, #64]	; (800e0e0 <xPortStartScheduler+0x140>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a0f      	ldr	r2, [pc, #60]	; (800e0e0 <xPortStartScheduler+0x140>)
 800e0a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e0a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e0a8:	f7ff ff66 	bl	800df78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e0ac:	f7fe ff92 	bl	800cfd4 <vTaskSwitchContext>
	prvTaskExitError();
 800e0b0:	f7ff ff20 	bl	800def4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3718      	adds	r7, #24
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	e000ed00 	.word	0xe000ed00
 800e0c4:	410fc271 	.word	0x410fc271
 800e0c8:	410fc270 	.word	0x410fc270
 800e0cc:	e000e400 	.word	0xe000e400
 800e0d0:	20000e2c 	.word	0x20000e2c
 800e0d4:	20000e30 	.word	0x20000e30
 800e0d8:	e000ed20 	.word	0xe000ed20
 800e0dc:	200000b8 	.word	0x200000b8
 800e0e0:	e000ef34 	.word	0xe000ef34

0800e0e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b083      	sub	sp, #12
 800e0e8:	af00      	add	r7, sp, #0
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	607b      	str	r3, [r7, #4]
}
 800e0fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e0fe:	4b0f      	ldr	r3, [pc, #60]	; (800e13c <vPortEnterCritical+0x58>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3301      	adds	r3, #1
 800e104:	4a0d      	ldr	r2, [pc, #52]	; (800e13c <vPortEnterCritical+0x58>)
 800e106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e108:	4b0c      	ldr	r3, [pc, #48]	; (800e13c <vPortEnterCritical+0x58>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d10f      	bne.n	800e130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e110:	4b0b      	ldr	r3, [pc, #44]	; (800e140 <vPortEnterCritical+0x5c>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00a      	beq.n	800e130 <vPortEnterCritical+0x4c>
	__asm volatile
 800e11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	603b      	str	r3, [r7, #0]
}
 800e12c:	bf00      	nop
 800e12e:	e7fe      	b.n	800e12e <vPortEnterCritical+0x4a>
	}
}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	200000b8 	.word	0x200000b8
 800e140:	e000ed04 	.word	0xe000ed04

0800e144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e14a:	4b12      	ldr	r3, [pc, #72]	; (800e194 <vPortExitCritical+0x50>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10a      	bne.n	800e168 <vPortExitCritical+0x24>
	__asm volatile
 800e152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	607b      	str	r3, [r7, #4]
}
 800e164:	bf00      	nop
 800e166:	e7fe      	b.n	800e166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e168:	4b0a      	ldr	r3, [pc, #40]	; (800e194 <vPortExitCritical+0x50>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	4a09      	ldr	r2, [pc, #36]	; (800e194 <vPortExitCritical+0x50>)
 800e170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e172:	4b08      	ldr	r3, [pc, #32]	; (800e194 <vPortExitCritical+0x50>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d105      	bne.n	800e186 <vPortExitCritical+0x42>
 800e17a:	2300      	movs	r3, #0
 800e17c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	f383 8811 	msr	BASEPRI, r3
}
 800e184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e186:	bf00      	nop
 800e188:	370c      	adds	r7, #12
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr
 800e192:	bf00      	nop
 800e194:	200000b8 	.word	0x200000b8
	...

0800e1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e1a0:	f3ef 8009 	mrs	r0, PSP
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	4b15      	ldr	r3, [pc, #84]	; (800e200 <pxCurrentTCBConst>)
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	f01e 0f10 	tst.w	lr, #16
 800e1b0:	bf08      	it	eq
 800e1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ba:	6010      	str	r0, [r2, #0]
 800e1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e1c4:	f380 8811 	msr	BASEPRI, r0
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f7fe ff00 	bl	800cfd4 <vTaskSwitchContext>
 800e1d4:	f04f 0000 	mov.w	r0, #0
 800e1d8:	f380 8811 	msr	BASEPRI, r0
 800e1dc:	bc09      	pop	{r0, r3}
 800e1de:	6819      	ldr	r1, [r3, #0]
 800e1e0:	6808      	ldr	r0, [r1, #0]
 800e1e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e6:	f01e 0f10 	tst.w	lr, #16
 800e1ea:	bf08      	it	eq
 800e1ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e1f0:	f380 8809 	msr	PSP, r0
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	f3af 8000 	nop.w

0800e200 <pxCurrentTCBConst>:
 800e200:	20000c04 	.word	0x20000c04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e204:	bf00      	nop
 800e206:	bf00      	nop

0800e208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	607b      	str	r3, [r7, #4]
}
 800e220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e222:	f7fe fe1f 	bl	800ce64 <xTaskIncrementTick>
 800e226:	4603      	mov	r3, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d003      	beq.n	800e234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e22c:	4b06      	ldr	r3, [pc, #24]	; (800e248 <xPortSysTickHandler+0x40>)
 800e22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	2300      	movs	r3, #0
 800e236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	f383 8811 	msr	BASEPRI, r3
}
 800e23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	e000ed04 	.word	0xe000ed04

0800e24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e24c:	b480      	push	{r7}
 800e24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e250:	4b0b      	ldr	r3, [pc, #44]	; (800e280 <vPortSetupTimerInterrupt+0x34>)
 800e252:	2200      	movs	r2, #0
 800e254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e256:	4b0b      	ldr	r3, [pc, #44]	; (800e284 <vPortSetupTimerInterrupt+0x38>)
 800e258:	2200      	movs	r2, #0
 800e25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e25c:	4b0a      	ldr	r3, [pc, #40]	; (800e288 <vPortSetupTimerInterrupt+0x3c>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a0a      	ldr	r2, [pc, #40]	; (800e28c <vPortSetupTimerInterrupt+0x40>)
 800e262:	fba2 2303 	umull	r2, r3, r2, r3
 800e266:	099b      	lsrs	r3, r3, #6
 800e268:	4a09      	ldr	r2, [pc, #36]	; (800e290 <vPortSetupTimerInterrupt+0x44>)
 800e26a:	3b01      	subs	r3, #1
 800e26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e26e:	4b04      	ldr	r3, [pc, #16]	; (800e280 <vPortSetupTimerInterrupt+0x34>)
 800e270:	2207      	movs	r2, #7
 800e272:	601a      	str	r2, [r3, #0]
}
 800e274:	bf00      	nop
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	e000e010 	.word	0xe000e010
 800e284:	e000e018 	.word	0xe000e018
 800e288:	20000000 	.word	0x20000000
 800e28c:	10624dd3 	.word	0x10624dd3
 800e290:	e000e014 	.word	0xe000e014

0800e294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e2a4 <vPortEnableVFP+0x10>
 800e298:	6801      	ldr	r1, [r0, #0]
 800e29a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e29e:	6001      	str	r1, [r0, #0]
 800e2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e2a2:	bf00      	nop
 800e2a4:	e000ed88 	.word	0xe000ed88

0800e2a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2ae:	f3ef 8305 	mrs	r3, IPSR
 800e2b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b0f      	cmp	r3, #15
 800e2b8:	d914      	bls.n	800e2e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2ba:	4a17      	ldr	r2, [pc, #92]	; (800e318 <vPortValidateInterruptPriority+0x70>)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	4413      	add	r3, r2
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e2c4:	4b15      	ldr	r3, [pc, #84]	; (800e31c <vPortValidateInterruptPriority+0x74>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	7afa      	ldrb	r2, [r7, #11]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d20a      	bcs.n	800e2e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	607b      	str	r3, [r7, #4]
}
 800e2e0:	bf00      	nop
 800e2e2:	e7fe      	b.n	800e2e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e2e4:	4b0e      	ldr	r3, [pc, #56]	; (800e320 <vPortValidateInterruptPriority+0x78>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e2ec:	4b0d      	ldr	r3, [pc, #52]	; (800e324 <vPortValidateInterruptPriority+0x7c>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d90a      	bls.n	800e30a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	603b      	str	r3, [r7, #0]
}
 800e306:	bf00      	nop
 800e308:	e7fe      	b.n	800e308 <vPortValidateInterruptPriority+0x60>
	}
 800e30a:	bf00      	nop
 800e30c:	3714      	adds	r7, #20
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop
 800e318:	e000e3f0 	.word	0xe000e3f0
 800e31c:	20000e2c 	.word	0x20000e2c
 800e320:	e000ed0c 	.word	0xe000ed0c
 800e324:	20000e30 	.word	0x20000e30

0800e328 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800e330:	f7fe fcde 	bl	800ccf0 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fd2b 	bl	800ed90 <malloc>
 800e33a:	4603      	mov	r3, r0
 800e33c:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e33e:	f7fe fce5 	bl	800cd0c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800e342:	68fb      	ldr	r3, [r7, #12]
}
 800e344:	4618      	mov	r0, r3
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
	if( pv )
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d006      	beq.n	800e368 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800e35a:	f7fe fcc9 	bl	800ccf0 <vTaskSuspendAll>
		{
			free( pv );
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fd1e 	bl	800eda0 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800e364:	f7fe fcd2 	bl	800cd0c <xTaskResumeAll>
	}
}
 800e368:	bf00      	nop
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e374:	2200      	movs	r2, #0
 800e376:	4912      	ldr	r1, [pc, #72]	; (800e3c0 <MX_USB_DEVICE_Init+0x50>)
 800e378:	4812      	ldr	r0, [pc, #72]	; (800e3c4 <MX_USB_DEVICE_Init+0x54>)
 800e37a:	f7fc f85b 	bl	800a434 <USBD_Init>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e384:	f7f3 fc0e 	bl	8001ba4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e388:	490f      	ldr	r1, [pc, #60]	; (800e3c8 <MX_USB_DEVICE_Init+0x58>)
 800e38a:	480e      	ldr	r0, [pc, #56]	; (800e3c4 <MX_USB_DEVICE_Init+0x54>)
 800e38c:	f7fc f882 	bl	800a494 <USBD_RegisterClass>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d001      	beq.n	800e39a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e396:	f7f3 fc05 	bl	8001ba4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e39a:	490c      	ldr	r1, [pc, #48]	; (800e3cc <MX_USB_DEVICE_Init+0x5c>)
 800e39c:	4809      	ldr	r0, [pc, #36]	; (800e3c4 <MX_USB_DEVICE_Init+0x54>)
 800e39e:	f7fb ff73 	bl	800a288 <USBD_CDC_RegisterInterface>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e3a8:	f7f3 fbfc 	bl	8001ba4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e3ac:	4805      	ldr	r0, [pc, #20]	; (800e3c4 <MX_USB_DEVICE_Init+0x54>)
 800e3ae:	f7fc f8a7 	bl	800a500 <USBD_Start>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e3b8:	f7f3 fbf4 	bl	8001ba4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e3bc:	bf00      	nop
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	200000d0 	.word	0x200000d0
 800e3c4:	20000e34 	.word	0x20000e34
 800e3c8:	20000038 	.word	0x20000038
 800e3cc:	200000bc 	.word	0x200000bc

0800e3d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	4905      	ldr	r1, [pc, #20]	; (800e3ec <CDC_Init_FS+0x1c>)
 800e3d8:	4805      	ldr	r0, [pc, #20]	; (800e3f0 <CDC_Init_FS+0x20>)
 800e3da:	f7fb ff6f 	bl	800a2bc <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e3de:	4905      	ldr	r1, [pc, #20]	; (800e3f4 <CDC_Init_FS+0x24>)
 800e3e0:	4803      	ldr	r0, [pc, #12]	; (800e3f0 <CDC_Init_FS+0x20>)
 800e3e2:	f7fb ff8d 	bl	800a300 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800e3e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	20001510 	.word	0x20001510
 800e3f0:	20000e34 	.word	0x20000e34
 800e3f4:	20001110 	.word	0x20001110

0800e3f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800e3fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	4603      	mov	r3, r0
 800e410:	6039      	str	r1, [r7, #0]
 800e412:	71fb      	strb	r3, [r7, #7]
 800e414:	4613      	mov	r3, r2
 800e416:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 800e418:	79fb      	ldrb	r3, [r7, #7]
 800e41a:	2b23      	cmp	r3, #35	; 0x23
 800e41c:	d84a      	bhi.n	800e4b4 <CDC_Control_FS+0xac>
 800e41e:	a201      	add	r2, pc, #4	; (adr r2, 800e424 <CDC_Control_FS+0x1c>)
 800e420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e424:	0800e4b5 	.word	0x0800e4b5
 800e428:	0800e4b5 	.word	0x0800e4b5
 800e42c:	0800e4b5 	.word	0x0800e4b5
 800e430:	0800e4b5 	.word	0x0800e4b5
 800e434:	0800e4b5 	.word	0x0800e4b5
 800e438:	0800e4b5 	.word	0x0800e4b5
 800e43c:	0800e4b5 	.word	0x0800e4b5
 800e440:	0800e4b5 	.word	0x0800e4b5
 800e444:	0800e4b5 	.word	0x0800e4b5
 800e448:	0800e4b5 	.word	0x0800e4b5
 800e44c:	0800e4b5 	.word	0x0800e4b5
 800e450:	0800e4b5 	.word	0x0800e4b5
 800e454:	0800e4b5 	.word	0x0800e4b5
 800e458:	0800e4b5 	.word	0x0800e4b5
 800e45c:	0800e4b5 	.word	0x0800e4b5
 800e460:	0800e4b5 	.word	0x0800e4b5
 800e464:	0800e4b5 	.word	0x0800e4b5
 800e468:	0800e4b5 	.word	0x0800e4b5
 800e46c:	0800e4b5 	.word	0x0800e4b5
 800e470:	0800e4b5 	.word	0x0800e4b5
 800e474:	0800e4b5 	.word	0x0800e4b5
 800e478:	0800e4b5 	.word	0x0800e4b5
 800e47c:	0800e4b5 	.word	0x0800e4b5
 800e480:	0800e4b5 	.word	0x0800e4b5
 800e484:	0800e4b5 	.word	0x0800e4b5
 800e488:	0800e4b5 	.word	0x0800e4b5
 800e48c:	0800e4b5 	.word	0x0800e4b5
 800e490:	0800e4b5 	.word	0x0800e4b5
 800e494:	0800e4b5 	.word	0x0800e4b5
 800e498:	0800e4b5 	.word	0x0800e4b5
 800e49c:	0800e4b5 	.word	0x0800e4b5
 800e4a0:	0800e4b5 	.word	0x0800e4b5
 800e4a4:	0800e4b5 	.word	0x0800e4b5
 800e4a8:	0800e4b5 	.word	0x0800e4b5
 800e4ac:	0800e4b5 	.word	0x0800e4b5
 800e4b0:	0800e4b5 	.word	0x0800e4b5
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800e4b4:	bf00      	nop
    }

    return (USBD_OK);
 800e4b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e4ce:	6879      	ldr	r1, [r7, #4]
 800e4d0:	4805      	ldr	r0, [pc, #20]	; (800e4e8 <CDC_Receive_FS+0x24>)
 800e4d2:	f7fb ff15 	bl	800a300 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e4d6:	4804      	ldr	r0, [pc, #16]	; (800e4e8 <CDC_Receive_FS+0x24>)
 800e4d8:	f7fb ff76 	bl	800a3c8 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800e4dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20000e34 	.word	0x20000e34

0800e4ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800e4fc:	4b0d      	ldr	r3, [pc, #52]	; (800e534 <CDC_Transmit_FS+0x48>)
 800e4fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e502:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800e50e:	2301      	movs	r3, #1
 800e510:	e00b      	b.n	800e52a <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e512:	887b      	ldrh	r3, [r7, #2]
 800e514:	461a      	mov	r2, r3
 800e516:	6879      	ldr	r1, [r7, #4]
 800e518:	4806      	ldr	r0, [pc, #24]	; (800e534 <CDC_Transmit_FS+0x48>)
 800e51a:	f7fb fecf 	bl	800a2bc <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e51e:	4805      	ldr	r0, [pc, #20]	; (800e534 <CDC_Transmit_FS+0x48>)
 800e520:	f7fb ff0c 	bl	800a33c <USBD_CDC_TransmitPacket>
 800e524:	4603      	mov	r3, r0
 800e526:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e528:	7bfb      	ldrb	r3, [r7, #15]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	20000e34 	.word	0x20000e34

0800e538 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e538:	b480      	push	{r7}
 800e53a:	b087      	sub	sp, #28
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	4613      	mov	r3, r2
 800e544:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e546:	2300      	movs	r3, #0
 800e548:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e54a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	371c      	adds	r7, #28
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr
	...

0800e55c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	4603      	mov	r3, r0
 800e564:	6039      	str	r1, [r7, #0]
 800e566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	2212      	movs	r2, #18
 800e56c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e56e:	4b03      	ldr	r3, [pc, #12]	; (800e57c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e570:	4618      	mov	r0, r3
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	200000ec 	.word	0x200000ec

0800e580 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	4603      	mov	r3, r0
 800e588:	6039      	str	r1, [r7, #0]
 800e58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2204      	movs	r2, #4
 800e590:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e592:	4b03      	ldr	r3, [pc, #12]	; (800e5a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e594:	4618      	mov	r0, r3
 800e596:	370c      	adds	r7, #12
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr
 800e5a0:	20000100 	.word	0x20000100

0800e5a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	6039      	str	r1, [r7, #0]
 800e5ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5b0:	79fb      	ldrb	r3, [r7, #7]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d105      	bne.n	800e5c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	4907      	ldr	r1, [pc, #28]	; (800e5d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e5ba:	4808      	ldr	r0, [pc, #32]	; (800e5dc <USBD_FS_ProductStrDescriptor+0x38>)
 800e5bc:	f7fd f94c 	bl	800b858 <USBD_GetString>
 800e5c0:	e004      	b.n	800e5cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5c2:	683a      	ldr	r2, [r7, #0]
 800e5c4:	4904      	ldr	r1, [pc, #16]	; (800e5d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e5c6:	4805      	ldr	r0, [pc, #20]	; (800e5dc <USBD_FS_ProductStrDescriptor+0x38>)
 800e5c8:	f7fd f946 	bl	800b858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5cc:	4b02      	ldr	r3, [pc, #8]	; (800e5d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3708      	adds	r7, #8
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	20001910 	.word	0x20001910
 800e5dc:	08011d18 	.word	0x08011d18

0800e5e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	6039      	str	r1, [r7, #0]
 800e5ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e5ec:	683a      	ldr	r2, [r7, #0]
 800e5ee:	4904      	ldr	r1, [pc, #16]	; (800e600 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e5f0:	4804      	ldr	r0, [pc, #16]	; (800e604 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e5f2:	f7fd f931 	bl	800b858 <USBD_GetString>
  return USBD_StrDesc;
 800e5f6:	4b02      	ldr	r3, [pc, #8]	; (800e600 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	20001910 	.word	0x20001910
 800e604:	08011d30 	.word	0x08011d30

0800e608 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4603      	mov	r3, r0
 800e610:	6039      	str	r1, [r7, #0]
 800e612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	221a      	movs	r2, #26
 800e618:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e61a:	f000 f843 	bl	800e6a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e61e:	4b02      	ldr	r3, [pc, #8]	; (800e628 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e620:	4618      	mov	r0, r3
 800e622:	3708      	adds	r7, #8
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	20000104 	.word	0x20000104

0800e62c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	4603      	mov	r3, r0
 800e634:	6039      	str	r1, [r7, #0]
 800e636:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e638:	79fb      	ldrb	r3, [r7, #7]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d105      	bne.n	800e64a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e63e:	683a      	ldr	r2, [r7, #0]
 800e640:	4907      	ldr	r1, [pc, #28]	; (800e660 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e642:	4808      	ldr	r0, [pc, #32]	; (800e664 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e644:	f7fd f908 	bl	800b858 <USBD_GetString>
 800e648:	e004      	b.n	800e654 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	4904      	ldr	r1, [pc, #16]	; (800e660 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e64e:	4805      	ldr	r0, [pc, #20]	; (800e664 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e650:	f7fd f902 	bl	800b858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e654:	4b02      	ldr	r3, [pc, #8]	; (800e660 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e656:	4618      	mov	r0, r3
 800e658:	3708      	adds	r7, #8
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20001910 	.word	0x20001910
 800e664:	08011d44 	.word	0x08011d44

0800e668 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	4603      	mov	r3, r0
 800e670:	6039      	str	r1, [r7, #0]
 800e672:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d105      	bne.n	800e686 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e67a:	683a      	ldr	r2, [r7, #0]
 800e67c:	4907      	ldr	r1, [pc, #28]	; (800e69c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e67e:	4808      	ldr	r0, [pc, #32]	; (800e6a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e680:	f7fd f8ea 	bl	800b858 <USBD_GetString>
 800e684:	e004      	b.n	800e690 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e686:	683a      	ldr	r2, [r7, #0]
 800e688:	4904      	ldr	r1, [pc, #16]	; (800e69c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e68a:	4805      	ldr	r0, [pc, #20]	; (800e6a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e68c:	f7fd f8e4 	bl	800b858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e690:	4b02      	ldr	r3, [pc, #8]	; (800e69c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	20001910 	.word	0x20001910
 800e6a0:	08011d50 	.word	0x08011d50

0800e6a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e6aa:	4b0f      	ldr	r3, [pc, #60]	; (800e6e8 <Get_SerialNum+0x44>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e6b0:	4b0e      	ldr	r3, [pc, #56]	; (800e6ec <Get_SerialNum+0x48>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e6b6:	4b0e      	ldr	r3, [pc, #56]	; (800e6f0 <Get_SerialNum+0x4c>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d009      	beq.n	800e6de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e6ca:	2208      	movs	r2, #8
 800e6cc:	4909      	ldr	r1, [pc, #36]	; (800e6f4 <Get_SerialNum+0x50>)
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f000 f814 	bl	800e6fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e6d4:	2204      	movs	r2, #4
 800e6d6:	4908      	ldr	r1, [pc, #32]	; (800e6f8 <Get_SerialNum+0x54>)
 800e6d8:	68b8      	ldr	r0, [r7, #8]
 800e6da:	f000 f80f 	bl	800e6fc <IntToUnicode>
  }
}
 800e6de:	bf00      	nop
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	1fff7a10 	.word	0x1fff7a10
 800e6ec:	1fff7a14 	.word	0x1fff7a14
 800e6f0:	1fff7a18 	.word	0x1fff7a18
 800e6f4:	20000106 	.word	0x20000106
 800e6f8:	20000116 	.word	0x20000116

0800e6fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b087      	sub	sp, #28
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	4613      	mov	r3, r2
 800e708:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e70a:	2300      	movs	r3, #0
 800e70c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e70e:	2300      	movs	r3, #0
 800e710:	75fb      	strb	r3, [r7, #23]
 800e712:	e027      	b.n	800e764 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	0f1b      	lsrs	r3, r3, #28
 800e718:	2b09      	cmp	r3, #9
 800e71a:	d80b      	bhi.n	800e734 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	0f1b      	lsrs	r3, r3, #28
 800e720:	b2da      	uxtb	r2, r3
 800e722:	7dfb      	ldrb	r3, [r7, #23]
 800e724:	005b      	lsls	r3, r3, #1
 800e726:	4619      	mov	r1, r3
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	440b      	add	r3, r1
 800e72c:	3230      	adds	r2, #48	; 0x30
 800e72e:	b2d2      	uxtb	r2, r2
 800e730:	701a      	strb	r2, [r3, #0]
 800e732:	e00a      	b.n	800e74a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	0f1b      	lsrs	r3, r3, #28
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	7dfb      	ldrb	r3, [r7, #23]
 800e73c:	005b      	lsls	r3, r3, #1
 800e73e:	4619      	mov	r1, r3
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	440b      	add	r3, r1
 800e744:	3237      	adds	r2, #55	; 0x37
 800e746:	b2d2      	uxtb	r2, r2
 800e748:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	011b      	lsls	r3, r3, #4
 800e74e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e750:	7dfb      	ldrb	r3, [r7, #23]
 800e752:	005b      	lsls	r3, r3, #1
 800e754:	3301      	adds	r3, #1
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	4413      	add	r3, r2
 800e75a:	2200      	movs	r2, #0
 800e75c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	3301      	adds	r3, #1
 800e762:	75fb      	strb	r3, [r7, #23]
 800e764:	7dfa      	ldrb	r2, [r7, #23]
 800e766:	79fb      	ldrb	r3, [r7, #7]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d3d3      	bcc.n	800e714 <IntToUnicode+0x18>
  }
}
 800e76c:	bf00      	nop
 800e76e:	bf00      	nop
 800e770:	371c      	adds	r7, #28
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
	...

0800e77c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b08a      	sub	sp, #40	; 0x28
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e784:	f107 0314 	add.w	r3, r7, #20
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]
 800e78c:	605a      	str	r2, [r3, #4]
 800e78e:	609a      	str	r2, [r3, #8]
 800e790:	60da      	str	r2, [r3, #12]
 800e792:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e79c:	d13a      	bne.n	800e814 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e79e:	2300      	movs	r3, #0
 800e7a0:	613b      	str	r3, [r7, #16]
 800e7a2:	4b1e      	ldr	r3, [pc, #120]	; (800e81c <HAL_PCD_MspInit+0xa0>)
 800e7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a6:	4a1d      	ldr	r2, [pc, #116]	; (800e81c <HAL_PCD_MspInit+0xa0>)
 800e7a8:	f043 0301 	orr.w	r3, r3, #1
 800e7ac:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ae:	4b1b      	ldr	r3, [pc, #108]	; (800e81c <HAL_PCD_MspInit+0xa0>)
 800e7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b2:	f003 0301 	and.w	r3, r3, #1
 800e7b6:	613b      	str	r3, [r7, #16]
 800e7b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e7ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e7be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7c0:	2302      	movs	r3, #2
 800e7c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7c8:	2303      	movs	r3, #3
 800e7ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e7cc:	230a      	movs	r3, #10
 800e7ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7d0:	f107 0314 	add.w	r3, r7, #20
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	4812      	ldr	r0, [pc, #72]	; (800e820 <HAL_PCD_MspInit+0xa4>)
 800e7d8:	f7f5 fb1e 	bl	8003e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e7dc:	4b0f      	ldr	r3, [pc, #60]	; (800e81c <HAL_PCD_MspInit+0xa0>)
 800e7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e0:	4a0e      	ldr	r2, [pc, #56]	; (800e81c <HAL_PCD_MspInit+0xa0>)
 800e7e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7e6:	6353      	str	r3, [r2, #52]	; 0x34
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	60fb      	str	r3, [r7, #12]
 800e7ec:	4b0b      	ldr	r3, [pc, #44]	; (800e81c <HAL_PCD_MspInit+0xa0>)
 800e7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7f0:	4a0a      	ldr	r2, [pc, #40]	; (800e81c <HAL_PCD_MspInit+0xa0>)
 800e7f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e7f6:	6453      	str	r3, [r2, #68]	; 0x44
 800e7f8:	4b08      	ldr	r3, [pc, #32]	; (800e81c <HAL_PCD_MspInit+0xa0>)
 800e7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e800:	60fb      	str	r3, [r7, #12]
 800e802:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e804:	2200      	movs	r2, #0
 800e806:	2105      	movs	r1, #5
 800e808:	2043      	movs	r0, #67	; 0x43
 800e80a:	f7f5 f8e4 	bl	80039d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e80e:	2043      	movs	r0, #67	; 0x43
 800e810:	f7f5 f8fd 	bl	8003a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e814:	bf00      	nop
 800e816:	3728      	adds	r7, #40	; 0x28
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	40023800 	.word	0x40023800
 800e820:	40020000 	.word	0x40020000

0800e824 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e838:	4619      	mov	r1, r3
 800e83a:	4610      	mov	r0, r2
 800e83c:	f7fb fead 	bl	800a59a <USBD_LL_SetupStage>
}
 800e840:	bf00      	nop
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	460b      	mov	r3, r1
 800e852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e85a:	78fa      	ldrb	r2, [r7, #3]
 800e85c:	6879      	ldr	r1, [r7, #4]
 800e85e:	4613      	mov	r3, r2
 800e860:	00db      	lsls	r3, r3, #3
 800e862:	4413      	add	r3, r2
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	440b      	add	r3, r1
 800e868:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	78fb      	ldrb	r3, [r7, #3]
 800e870:	4619      	mov	r1, r3
 800e872:	f7fb fee7 	bl	800a644 <USBD_LL_DataOutStage>
}
 800e876:	bf00      	nop
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b082      	sub	sp, #8
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	460b      	mov	r3, r1
 800e888:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e890:	78fa      	ldrb	r2, [r7, #3]
 800e892:	6879      	ldr	r1, [r7, #4]
 800e894:	4613      	mov	r3, r2
 800e896:	00db      	lsls	r3, r3, #3
 800e898:	4413      	add	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	440b      	add	r3, r1
 800e89e:	334c      	adds	r3, #76	; 0x4c
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	78fb      	ldrb	r3, [r7, #3]
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	f7fb ff80 	bl	800a7aa <USBD_LL_DataInStage>
}
 800e8aa:	bf00      	nop
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fc f8b4 	bl	800aa2e <USBD_LL_SOF>
}
 800e8c6:	bf00      	nop
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b084      	sub	sp, #16
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	d001      	beq.n	800e8e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e8e2:	f7f3 f95f 	bl	8001ba4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8ec:	7bfa      	ldrb	r2, [r7, #15]
 800e8ee:	4611      	mov	r1, r2
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fc f85e 	bl	800a9b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fc f806 	bl	800a90e <USBD_LL_Reset>
}
 800e902:	bf00      	nop
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
	...

0800e90c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fc f859 	bl	800a9d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	6812      	ldr	r2, [r2, #0]
 800e92e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e932:	f043 0301 	orr.w	r3, r3, #1
 800e936:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a1b      	ldr	r3, [r3, #32]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d005      	beq.n	800e94c <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e940:	4b04      	ldr	r3, [pc, #16]	; (800e954 <HAL_PCD_SuspendCallback+0x48>)
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	4a03      	ldr	r2, [pc, #12]	; (800e954 <HAL_PCD_SuspendCallback+0x48>)
 800e946:	f043 0306 	orr.w	r3, r3, #6
 800e94a:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800e94c:	bf00      	nop
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	e000ed00 	.word	0xe000ed00

0800e958 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e966:	4618      	mov	r0, r3
 800e968:	f7fc f849 	bl	800a9fe <USBD_LL_Resume>
}
 800e96c:	bf00      	nop
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	460b      	mov	r3, r1
 800e97e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e986:	78fa      	ldrb	r2, [r7, #3]
 800e988:	4611      	mov	r1, r2
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fc f8a1 	bl	800aad2 <USBD_LL_IsoOUTIncomplete>
}
 800e990:	bf00      	nop
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9aa:	78fa      	ldrb	r2, [r7, #3]
 800e9ac:	4611      	mov	r1, r2
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fc f85d 	bl	800aa6e <USBD_LL_IsoINIncomplete>
}
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fc f8b3 	bl	800ab36 <USBD_LL_DevConnected>
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fc f8b0 	bl	800ab4c <USBD_LL_DevDisconnected>
}
 800e9ec:	bf00      	nop
 800e9ee:	3708      	adds	r7, #8
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d13c      	bne.n	800ea7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ea04:	4a20      	ldr	r2, [pc, #128]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	4a1e      	ldr	r2, [pc, #120]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ea14:	4b1c      	ldr	r3, [pc, #112]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ea1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ea1c:	4b1a      	ldr	r3, [pc, #104]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea1e:	2204      	movs	r2, #4
 800ea20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ea22:	4b19      	ldr	r3, [pc, #100]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea24:	2202      	movs	r2, #2
 800ea26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ea28:	4b17      	ldr	r3, [pc, #92]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ea2e:	4b16      	ldr	r3, [pc, #88]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea30:	2202      	movs	r2, #2
 800ea32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea34:	4b14      	ldr	r3, [pc, #80]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ea3a:	4b13      	ldr	r3, [pc, #76]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ea40:	4b11      	ldr	r3, [pc, #68]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea42:	2200      	movs	r2, #0
 800ea44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ea46:	4b10      	ldr	r3, [pc, #64]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ea4c:	4b0e      	ldr	r3, [pc, #56]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea4e:	2200      	movs	r2, #0
 800ea50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ea52:	480d      	ldr	r0, [pc, #52]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea54:	f7f6 fb55 	bl	8005102 <HAL_PCD_Init>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d001      	beq.n	800ea62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ea5e:	f7f3 f8a1 	bl	8001ba4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ea62:	2180      	movs	r1, #128	; 0x80
 800ea64:	4808      	ldr	r0, [pc, #32]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea66:	f7f7 fdac 	bl	80065c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ea6a:	2240      	movs	r2, #64	; 0x40
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	4806      	ldr	r0, [pc, #24]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea70:	f7f7 fd60 	bl	8006534 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ea74:	2280      	movs	r2, #128	; 0x80
 800ea76:	2101      	movs	r1, #1
 800ea78:	4803      	ldr	r0, [pc, #12]	; (800ea88 <USBD_LL_Init+0x94>)
 800ea7a:	f7f7 fd5b 	bl	8006534 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	20001b10 	.word	0x20001b10

0800ea8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea94:	2300      	movs	r3, #0
 800ea96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7f6 fc4a 	bl	800533c <HAL_PCD_Start>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f000 f942 	bl	800ed38 <USBD_Get_USB_Status>
 800eab4:	4603      	mov	r3, r0
 800eab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b084      	sub	sp, #16
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	4608      	mov	r0, r1
 800eacc:	4611      	mov	r1, r2
 800eace:	461a      	mov	r2, r3
 800ead0:	4603      	mov	r3, r0
 800ead2:	70fb      	strb	r3, [r7, #3]
 800ead4:	460b      	mov	r3, r1
 800ead6:	70bb      	strb	r3, [r7, #2]
 800ead8:	4613      	mov	r3, r2
 800eada:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eadc:	2300      	movs	r3, #0
 800eade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eaea:	78bb      	ldrb	r3, [r7, #2]
 800eaec:	883a      	ldrh	r2, [r7, #0]
 800eaee:	78f9      	ldrb	r1, [r7, #3]
 800eaf0:	f7f7 f91b 	bl	8005d2a <HAL_PCD_EP_Open>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f000 f91c 	bl	800ed38 <USBD_Get_USB_Status>
 800eb00:	4603      	mov	r3, r0
 800eb02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb04:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b084      	sub	sp, #16
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	460b      	mov	r3, r1
 800eb18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb28:	78fa      	ldrb	r2, [r7, #3]
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7f7 f964 	bl	8005dfa <HAL_PCD_EP_Close>
 800eb32:	4603      	mov	r3, r0
 800eb34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb36:	7bfb      	ldrb	r3, [r7, #15]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f000 f8fd 	bl	800ed38 <USBD_Get_USB_Status>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb42:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	460b      	mov	r3, r1
 800eb56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb66:	78fa      	ldrb	r2, [r7, #3]
 800eb68:	4611      	mov	r1, r2
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7f7 fa3c 	bl	8005fe8 <HAL_PCD_EP_SetStall>
 800eb70:	4603      	mov	r3, r0
 800eb72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f000 f8de 	bl	800ed38 <USBD_Get_USB_Status>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb80:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	460b      	mov	r3, r1
 800eb94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb96:	2300      	movs	r3, #0
 800eb98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eba4:	78fa      	ldrb	r2, [r7, #3]
 800eba6:	4611      	mov	r1, r2
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7f7 fa81 	bl	80060b0 <HAL_PCD_EP_ClrStall>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebb2:	7bfb      	ldrb	r3, [r7, #15]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f000 f8bf 	bl	800ed38 <USBD_Get_USB_Status>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ebdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	da0b      	bge.n	800ebfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ebe4:	78fb      	ldrb	r3, [r7, #3]
 800ebe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebea:	68f9      	ldr	r1, [r7, #12]
 800ebec:	4613      	mov	r3, r2
 800ebee:	00db      	lsls	r3, r3, #3
 800ebf0:	4413      	add	r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	440b      	add	r3, r1
 800ebf6:	333e      	adds	r3, #62	; 0x3e
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	e00b      	b.n	800ec14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ebfc:	78fb      	ldrb	r3, [r7, #3]
 800ebfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec02:	68f9      	ldr	r1, [r7, #12]
 800ec04:	4613      	mov	r3, r2
 800ec06:	00db      	lsls	r3, r3, #3
 800ec08:	4413      	add	r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	440b      	add	r3, r1
 800ec0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ec12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3714      	adds	r7, #20
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec30:	2300      	movs	r3, #0
 800ec32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec3a:	78fa      	ldrb	r2, [r7, #3]
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7f7 f84e 	bl	8005ce0 <HAL_PCD_SetAddress>
 800ec44:	4603      	mov	r3, r0
 800ec46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec48:	7bfb      	ldrb	r3, [r7, #15]
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f000 f874 	bl	800ed38 <USBD_Get_USB_Status>
 800ec50:	4603      	mov	r3, r0
 800ec52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b086      	sub	sp, #24
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	60f8      	str	r0, [r7, #12]
 800ec66:	607a      	str	r2, [r7, #4]
 800ec68:	603b      	str	r3, [r7, #0]
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec72:	2300      	movs	r3, #0
 800ec74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec7c:	7af9      	ldrb	r1, [r7, #11]
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	f7f7 f967 	bl	8005f54 <HAL_PCD_EP_Transmit>
 800ec86:	4603      	mov	r3, r0
 800ec88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec8a:	7dfb      	ldrb	r3, [r7, #23]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f000 f853 	bl	800ed38 <USBD_Get_USB_Status>
 800ec92:	4603      	mov	r3, r0
 800ec94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec96:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3718      	adds	r7, #24
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b086      	sub	sp, #24
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	607a      	str	r2, [r7, #4]
 800ecaa:	603b      	str	r3, [r7, #0]
 800ecac:	460b      	mov	r3, r1
 800ecae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ecbe:	7af9      	ldrb	r1, [r7, #11]
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	f7f7 f8e3 	bl	8005e8e <HAL_PCD_EP_Receive>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eccc:	7dfb      	ldrb	r3, [r7, #23]
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 f832 	bl	800ed38 <USBD_Get_USB_Status>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ecd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3718      	adds	r7, #24
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b082      	sub	sp, #8
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
 800ecea:	460b      	mov	r3, r1
 800ecec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecf4:	78fa      	ldrb	r2, [r7, #3]
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7f7 f913 	bl	8005f24 <HAL_PCD_EP_GetRxCount>
 800ecfe:	4603      	mov	r3, r0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ed10:	4b03      	ldr	r3, [pc, #12]	; (800ed20 <USBD_static_malloc+0x18>)
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	370c      	adds	r7, #12
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr
 800ed1e:	bf00      	nop
 800ed20:	2000201c 	.word	0x2000201c

0800ed24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b083      	sub	sp, #12
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]

}
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b085      	sub	sp, #20
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	4603      	mov	r3, r0
 800ed40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed42:	2300      	movs	r3, #0
 800ed44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed46:	79fb      	ldrb	r3, [r7, #7]
 800ed48:	2b03      	cmp	r3, #3
 800ed4a:	d817      	bhi.n	800ed7c <USBD_Get_USB_Status+0x44>
 800ed4c:	a201      	add	r2, pc, #4	; (adr r2, 800ed54 <USBD_Get_USB_Status+0x1c>)
 800ed4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed52:	bf00      	nop
 800ed54:	0800ed65 	.word	0x0800ed65
 800ed58:	0800ed6b 	.word	0x0800ed6b
 800ed5c:	0800ed71 	.word	0x0800ed71
 800ed60:	0800ed77 	.word	0x0800ed77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ed64:	2300      	movs	r3, #0
 800ed66:	73fb      	strb	r3, [r7, #15]
    break;
 800ed68:	e00b      	b.n	800ed82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed6a:	2303      	movs	r3, #3
 800ed6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed6e:	e008      	b.n	800ed82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed70:	2301      	movs	r3, #1
 800ed72:	73fb      	strb	r3, [r7, #15]
    break;
 800ed74:	e005      	b.n	800ed82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed76:	2303      	movs	r3, #3
 800ed78:	73fb      	strb	r3, [r7, #15]
    break;
 800ed7a:	e002      	b.n	800ed82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed80:	bf00      	nop
  }
  return usb_status;
 800ed82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3714      	adds	r7, #20
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <malloc>:
 800ed90:	4b02      	ldr	r3, [pc, #8]	; (800ed9c <malloc+0xc>)
 800ed92:	4601      	mov	r1, r0
 800ed94:	6818      	ldr	r0, [r3, #0]
 800ed96:	f000 b82b 	b.w	800edf0 <_malloc_r>
 800ed9a:	bf00      	nop
 800ed9c:	20000178 	.word	0x20000178

0800eda0 <free>:
 800eda0:	4b02      	ldr	r3, [pc, #8]	; (800edac <free+0xc>)
 800eda2:	4601      	mov	r1, r0
 800eda4:	6818      	ldr	r0, [r3, #0]
 800eda6:	f001 bd4d 	b.w	8010844 <_free_r>
 800edaa:	bf00      	nop
 800edac:	20000178 	.word	0x20000178

0800edb0 <sbrk_aligned>:
 800edb0:	b570      	push	{r4, r5, r6, lr}
 800edb2:	4e0e      	ldr	r6, [pc, #56]	; (800edec <sbrk_aligned+0x3c>)
 800edb4:	460c      	mov	r4, r1
 800edb6:	6831      	ldr	r1, [r6, #0]
 800edb8:	4605      	mov	r5, r0
 800edba:	b911      	cbnz	r1, 800edc2 <sbrk_aligned+0x12>
 800edbc:	f000 fe6c 	bl	800fa98 <_sbrk_r>
 800edc0:	6030      	str	r0, [r6, #0]
 800edc2:	4621      	mov	r1, r4
 800edc4:	4628      	mov	r0, r5
 800edc6:	f000 fe67 	bl	800fa98 <_sbrk_r>
 800edca:	1c43      	adds	r3, r0, #1
 800edcc:	d00a      	beq.n	800ede4 <sbrk_aligned+0x34>
 800edce:	1cc4      	adds	r4, r0, #3
 800edd0:	f024 0403 	bic.w	r4, r4, #3
 800edd4:	42a0      	cmp	r0, r4
 800edd6:	d007      	beq.n	800ede8 <sbrk_aligned+0x38>
 800edd8:	1a21      	subs	r1, r4, r0
 800edda:	4628      	mov	r0, r5
 800eddc:	f000 fe5c 	bl	800fa98 <_sbrk_r>
 800ede0:	3001      	adds	r0, #1
 800ede2:	d101      	bne.n	800ede8 <sbrk_aligned+0x38>
 800ede4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ede8:	4620      	mov	r0, r4
 800edea:	bd70      	pop	{r4, r5, r6, pc}
 800edec:	20002240 	.word	0x20002240

0800edf0 <_malloc_r>:
 800edf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf4:	1ccd      	adds	r5, r1, #3
 800edf6:	f025 0503 	bic.w	r5, r5, #3
 800edfa:	3508      	adds	r5, #8
 800edfc:	2d0c      	cmp	r5, #12
 800edfe:	bf38      	it	cc
 800ee00:	250c      	movcc	r5, #12
 800ee02:	2d00      	cmp	r5, #0
 800ee04:	4607      	mov	r7, r0
 800ee06:	db01      	blt.n	800ee0c <_malloc_r+0x1c>
 800ee08:	42a9      	cmp	r1, r5
 800ee0a:	d905      	bls.n	800ee18 <_malloc_r+0x28>
 800ee0c:	230c      	movs	r3, #12
 800ee0e:	603b      	str	r3, [r7, #0]
 800ee10:	2600      	movs	r6, #0
 800ee12:	4630      	mov	r0, r6
 800ee14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800eeec <_malloc_r+0xfc>
 800ee1c:	f000 f868 	bl	800eef0 <__malloc_lock>
 800ee20:	f8d8 3000 	ldr.w	r3, [r8]
 800ee24:	461c      	mov	r4, r3
 800ee26:	bb5c      	cbnz	r4, 800ee80 <_malloc_r+0x90>
 800ee28:	4629      	mov	r1, r5
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	f7ff ffc0 	bl	800edb0 <sbrk_aligned>
 800ee30:	1c43      	adds	r3, r0, #1
 800ee32:	4604      	mov	r4, r0
 800ee34:	d155      	bne.n	800eee2 <_malloc_r+0xf2>
 800ee36:	f8d8 4000 	ldr.w	r4, [r8]
 800ee3a:	4626      	mov	r6, r4
 800ee3c:	2e00      	cmp	r6, #0
 800ee3e:	d145      	bne.n	800eecc <_malloc_r+0xdc>
 800ee40:	2c00      	cmp	r4, #0
 800ee42:	d048      	beq.n	800eed6 <_malloc_r+0xe6>
 800ee44:	6823      	ldr	r3, [r4, #0]
 800ee46:	4631      	mov	r1, r6
 800ee48:	4638      	mov	r0, r7
 800ee4a:	eb04 0903 	add.w	r9, r4, r3
 800ee4e:	f000 fe23 	bl	800fa98 <_sbrk_r>
 800ee52:	4581      	cmp	r9, r0
 800ee54:	d13f      	bne.n	800eed6 <_malloc_r+0xe6>
 800ee56:	6821      	ldr	r1, [r4, #0]
 800ee58:	1a6d      	subs	r5, r5, r1
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	4638      	mov	r0, r7
 800ee5e:	f7ff ffa7 	bl	800edb0 <sbrk_aligned>
 800ee62:	3001      	adds	r0, #1
 800ee64:	d037      	beq.n	800eed6 <_malloc_r+0xe6>
 800ee66:	6823      	ldr	r3, [r4, #0]
 800ee68:	442b      	add	r3, r5
 800ee6a:	6023      	str	r3, [r4, #0]
 800ee6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d038      	beq.n	800eee6 <_malloc_r+0xf6>
 800ee74:	685a      	ldr	r2, [r3, #4]
 800ee76:	42a2      	cmp	r2, r4
 800ee78:	d12b      	bne.n	800eed2 <_malloc_r+0xe2>
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	605a      	str	r2, [r3, #4]
 800ee7e:	e00f      	b.n	800eea0 <_malloc_r+0xb0>
 800ee80:	6822      	ldr	r2, [r4, #0]
 800ee82:	1b52      	subs	r2, r2, r5
 800ee84:	d41f      	bmi.n	800eec6 <_malloc_r+0xd6>
 800ee86:	2a0b      	cmp	r2, #11
 800ee88:	d917      	bls.n	800eeba <_malloc_r+0xca>
 800ee8a:	1961      	adds	r1, r4, r5
 800ee8c:	42a3      	cmp	r3, r4
 800ee8e:	6025      	str	r5, [r4, #0]
 800ee90:	bf18      	it	ne
 800ee92:	6059      	strne	r1, [r3, #4]
 800ee94:	6863      	ldr	r3, [r4, #4]
 800ee96:	bf08      	it	eq
 800ee98:	f8c8 1000 	streq.w	r1, [r8]
 800ee9c:	5162      	str	r2, [r4, r5]
 800ee9e:	604b      	str	r3, [r1, #4]
 800eea0:	4638      	mov	r0, r7
 800eea2:	f104 060b 	add.w	r6, r4, #11
 800eea6:	f000 f829 	bl	800eefc <__malloc_unlock>
 800eeaa:	f026 0607 	bic.w	r6, r6, #7
 800eeae:	1d23      	adds	r3, r4, #4
 800eeb0:	1af2      	subs	r2, r6, r3
 800eeb2:	d0ae      	beq.n	800ee12 <_malloc_r+0x22>
 800eeb4:	1b9b      	subs	r3, r3, r6
 800eeb6:	50a3      	str	r3, [r4, r2]
 800eeb8:	e7ab      	b.n	800ee12 <_malloc_r+0x22>
 800eeba:	42a3      	cmp	r3, r4
 800eebc:	6862      	ldr	r2, [r4, #4]
 800eebe:	d1dd      	bne.n	800ee7c <_malloc_r+0x8c>
 800eec0:	f8c8 2000 	str.w	r2, [r8]
 800eec4:	e7ec      	b.n	800eea0 <_malloc_r+0xb0>
 800eec6:	4623      	mov	r3, r4
 800eec8:	6864      	ldr	r4, [r4, #4]
 800eeca:	e7ac      	b.n	800ee26 <_malloc_r+0x36>
 800eecc:	4634      	mov	r4, r6
 800eece:	6876      	ldr	r6, [r6, #4]
 800eed0:	e7b4      	b.n	800ee3c <_malloc_r+0x4c>
 800eed2:	4613      	mov	r3, r2
 800eed4:	e7cc      	b.n	800ee70 <_malloc_r+0x80>
 800eed6:	230c      	movs	r3, #12
 800eed8:	603b      	str	r3, [r7, #0]
 800eeda:	4638      	mov	r0, r7
 800eedc:	f000 f80e 	bl	800eefc <__malloc_unlock>
 800eee0:	e797      	b.n	800ee12 <_malloc_r+0x22>
 800eee2:	6025      	str	r5, [r4, #0]
 800eee4:	e7dc      	b.n	800eea0 <_malloc_r+0xb0>
 800eee6:	605b      	str	r3, [r3, #4]
 800eee8:	deff      	udf	#255	; 0xff
 800eeea:	bf00      	nop
 800eeec:	2000223c 	.word	0x2000223c

0800eef0 <__malloc_lock>:
 800eef0:	4801      	ldr	r0, [pc, #4]	; (800eef8 <__malloc_lock+0x8>)
 800eef2:	f000 be1d 	b.w	800fb30 <__retarget_lock_acquire_recursive>
 800eef6:	bf00      	nop
 800eef8:	20002384 	.word	0x20002384

0800eefc <__malloc_unlock>:
 800eefc:	4801      	ldr	r0, [pc, #4]	; (800ef04 <__malloc_unlock+0x8>)
 800eefe:	f000 be18 	b.w	800fb32 <__retarget_lock_release_recursive>
 800ef02:	bf00      	nop
 800ef04:	20002384 	.word	0x20002384

0800ef08 <__cvt>:
 800ef08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef0c:	ec55 4b10 	vmov	r4, r5, d0
 800ef10:	2d00      	cmp	r5, #0
 800ef12:	460e      	mov	r6, r1
 800ef14:	4619      	mov	r1, r3
 800ef16:	462b      	mov	r3, r5
 800ef18:	bfbb      	ittet	lt
 800ef1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ef1e:	461d      	movlt	r5, r3
 800ef20:	2300      	movge	r3, #0
 800ef22:	232d      	movlt	r3, #45	; 0x2d
 800ef24:	700b      	strb	r3, [r1, #0]
 800ef26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ef2c:	4691      	mov	r9, r2
 800ef2e:	f023 0820 	bic.w	r8, r3, #32
 800ef32:	bfbc      	itt	lt
 800ef34:	4622      	movlt	r2, r4
 800ef36:	4614      	movlt	r4, r2
 800ef38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef3c:	d005      	beq.n	800ef4a <__cvt+0x42>
 800ef3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ef42:	d100      	bne.n	800ef46 <__cvt+0x3e>
 800ef44:	3601      	adds	r6, #1
 800ef46:	2102      	movs	r1, #2
 800ef48:	e000      	b.n	800ef4c <__cvt+0x44>
 800ef4a:	2103      	movs	r1, #3
 800ef4c:	ab03      	add	r3, sp, #12
 800ef4e:	9301      	str	r3, [sp, #4]
 800ef50:	ab02      	add	r3, sp, #8
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	ec45 4b10 	vmov	d0, r4, r5
 800ef58:	4653      	mov	r3, sl
 800ef5a:	4632      	mov	r2, r6
 800ef5c:	f000 fe80 	bl	800fc60 <_dtoa_r>
 800ef60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ef64:	4607      	mov	r7, r0
 800ef66:	d102      	bne.n	800ef6e <__cvt+0x66>
 800ef68:	f019 0f01 	tst.w	r9, #1
 800ef6c:	d022      	beq.n	800efb4 <__cvt+0xac>
 800ef6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef72:	eb07 0906 	add.w	r9, r7, r6
 800ef76:	d110      	bne.n	800ef9a <__cvt+0x92>
 800ef78:	783b      	ldrb	r3, [r7, #0]
 800ef7a:	2b30      	cmp	r3, #48	; 0x30
 800ef7c:	d10a      	bne.n	800ef94 <__cvt+0x8c>
 800ef7e:	2200      	movs	r2, #0
 800ef80:	2300      	movs	r3, #0
 800ef82:	4620      	mov	r0, r4
 800ef84:	4629      	mov	r1, r5
 800ef86:	f7f1 fda7 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef8a:	b918      	cbnz	r0, 800ef94 <__cvt+0x8c>
 800ef8c:	f1c6 0601 	rsb	r6, r6, #1
 800ef90:	f8ca 6000 	str.w	r6, [sl]
 800ef94:	f8da 3000 	ldr.w	r3, [sl]
 800ef98:	4499      	add	r9, r3
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	4620      	mov	r0, r4
 800efa0:	4629      	mov	r1, r5
 800efa2:	f7f1 fd99 	bl	8000ad8 <__aeabi_dcmpeq>
 800efa6:	b108      	cbz	r0, 800efac <__cvt+0xa4>
 800efa8:	f8cd 900c 	str.w	r9, [sp, #12]
 800efac:	2230      	movs	r2, #48	; 0x30
 800efae:	9b03      	ldr	r3, [sp, #12]
 800efb0:	454b      	cmp	r3, r9
 800efb2:	d307      	bcc.n	800efc4 <__cvt+0xbc>
 800efb4:	9b03      	ldr	r3, [sp, #12]
 800efb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efb8:	1bdb      	subs	r3, r3, r7
 800efba:	4638      	mov	r0, r7
 800efbc:	6013      	str	r3, [r2, #0]
 800efbe:	b004      	add	sp, #16
 800efc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efc4:	1c59      	adds	r1, r3, #1
 800efc6:	9103      	str	r1, [sp, #12]
 800efc8:	701a      	strb	r2, [r3, #0]
 800efca:	e7f0      	b.n	800efae <__cvt+0xa6>

0800efcc <__exponent>:
 800efcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efce:	4603      	mov	r3, r0
 800efd0:	2900      	cmp	r1, #0
 800efd2:	bfb8      	it	lt
 800efd4:	4249      	neglt	r1, r1
 800efd6:	f803 2b02 	strb.w	r2, [r3], #2
 800efda:	bfb4      	ite	lt
 800efdc:	222d      	movlt	r2, #45	; 0x2d
 800efde:	222b      	movge	r2, #43	; 0x2b
 800efe0:	2909      	cmp	r1, #9
 800efe2:	7042      	strb	r2, [r0, #1]
 800efe4:	dd2a      	ble.n	800f03c <__exponent+0x70>
 800efe6:	f10d 0207 	add.w	r2, sp, #7
 800efea:	4617      	mov	r7, r2
 800efec:	260a      	movs	r6, #10
 800efee:	4694      	mov	ip, r2
 800eff0:	fb91 f5f6 	sdiv	r5, r1, r6
 800eff4:	fb06 1415 	mls	r4, r6, r5, r1
 800eff8:	3430      	adds	r4, #48	; 0x30
 800effa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800effe:	460c      	mov	r4, r1
 800f000:	2c63      	cmp	r4, #99	; 0x63
 800f002:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f006:	4629      	mov	r1, r5
 800f008:	dcf1      	bgt.n	800efee <__exponent+0x22>
 800f00a:	3130      	adds	r1, #48	; 0x30
 800f00c:	f1ac 0402 	sub.w	r4, ip, #2
 800f010:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f014:	1c41      	adds	r1, r0, #1
 800f016:	4622      	mov	r2, r4
 800f018:	42ba      	cmp	r2, r7
 800f01a:	d30a      	bcc.n	800f032 <__exponent+0x66>
 800f01c:	f10d 0209 	add.w	r2, sp, #9
 800f020:	eba2 020c 	sub.w	r2, r2, ip
 800f024:	42bc      	cmp	r4, r7
 800f026:	bf88      	it	hi
 800f028:	2200      	movhi	r2, #0
 800f02a:	4413      	add	r3, r2
 800f02c:	1a18      	subs	r0, r3, r0
 800f02e:	b003      	add	sp, #12
 800f030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f032:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f036:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f03a:	e7ed      	b.n	800f018 <__exponent+0x4c>
 800f03c:	2330      	movs	r3, #48	; 0x30
 800f03e:	3130      	adds	r1, #48	; 0x30
 800f040:	7083      	strb	r3, [r0, #2]
 800f042:	70c1      	strb	r1, [r0, #3]
 800f044:	1d03      	adds	r3, r0, #4
 800f046:	e7f1      	b.n	800f02c <__exponent+0x60>

0800f048 <_printf_float>:
 800f048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f04c:	ed2d 8b02 	vpush	{d8}
 800f050:	b08d      	sub	sp, #52	; 0x34
 800f052:	460c      	mov	r4, r1
 800f054:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f058:	4616      	mov	r6, r2
 800f05a:	461f      	mov	r7, r3
 800f05c:	4605      	mov	r5, r0
 800f05e:	f000 fce3 	bl	800fa28 <_localeconv_r>
 800f062:	f8d0 a000 	ldr.w	sl, [r0]
 800f066:	4650      	mov	r0, sl
 800f068:	f7f1 f90a 	bl	8000280 <strlen>
 800f06c:	2300      	movs	r3, #0
 800f06e:	930a      	str	r3, [sp, #40]	; 0x28
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	9305      	str	r3, [sp, #20]
 800f074:	f8d8 3000 	ldr.w	r3, [r8]
 800f078:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f07c:	3307      	adds	r3, #7
 800f07e:	f023 0307 	bic.w	r3, r3, #7
 800f082:	f103 0208 	add.w	r2, r3, #8
 800f086:	f8c8 2000 	str.w	r2, [r8]
 800f08a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f08e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f092:	9307      	str	r3, [sp, #28]
 800f094:	f8cd 8018 	str.w	r8, [sp, #24]
 800f098:	ee08 0a10 	vmov	s16, r0
 800f09c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f0a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0a4:	4b9e      	ldr	r3, [pc, #632]	; (800f320 <_printf_float+0x2d8>)
 800f0a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0aa:	f7f1 fd47 	bl	8000b3c <__aeabi_dcmpun>
 800f0ae:	bb88      	cbnz	r0, 800f114 <_printf_float+0xcc>
 800f0b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0b4:	4b9a      	ldr	r3, [pc, #616]	; (800f320 <_printf_float+0x2d8>)
 800f0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0ba:	f7f1 fd21 	bl	8000b00 <__aeabi_dcmple>
 800f0be:	bb48      	cbnz	r0, 800f114 <_printf_float+0xcc>
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	4640      	mov	r0, r8
 800f0c6:	4649      	mov	r1, r9
 800f0c8:	f7f1 fd10 	bl	8000aec <__aeabi_dcmplt>
 800f0cc:	b110      	cbz	r0, 800f0d4 <_printf_float+0x8c>
 800f0ce:	232d      	movs	r3, #45	; 0x2d
 800f0d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0d4:	4a93      	ldr	r2, [pc, #588]	; (800f324 <_printf_float+0x2dc>)
 800f0d6:	4b94      	ldr	r3, [pc, #592]	; (800f328 <_printf_float+0x2e0>)
 800f0d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f0dc:	bf94      	ite	ls
 800f0de:	4690      	movls	r8, r2
 800f0e0:	4698      	movhi	r8, r3
 800f0e2:	2303      	movs	r3, #3
 800f0e4:	6123      	str	r3, [r4, #16]
 800f0e6:	9b05      	ldr	r3, [sp, #20]
 800f0e8:	f023 0304 	bic.w	r3, r3, #4
 800f0ec:	6023      	str	r3, [r4, #0]
 800f0ee:	f04f 0900 	mov.w	r9, #0
 800f0f2:	9700      	str	r7, [sp, #0]
 800f0f4:	4633      	mov	r3, r6
 800f0f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	f000 f9da 	bl	800f4b4 <_printf_common>
 800f100:	3001      	adds	r0, #1
 800f102:	f040 8090 	bne.w	800f226 <_printf_float+0x1de>
 800f106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f10a:	b00d      	add	sp, #52	; 0x34
 800f10c:	ecbd 8b02 	vpop	{d8}
 800f110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f114:	4642      	mov	r2, r8
 800f116:	464b      	mov	r3, r9
 800f118:	4640      	mov	r0, r8
 800f11a:	4649      	mov	r1, r9
 800f11c:	f7f1 fd0e 	bl	8000b3c <__aeabi_dcmpun>
 800f120:	b140      	cbz	r0, 800f134 <_printf_float+0xec>
 800f122:	464b      	mov	r3, r9
 800f124:	2b00      	cmp	r3, #0
 800f126:	bfbc      	itt	lt
 800f128:	232d      	movlt	r3, #45	; 0x2d
 800f12a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f12e:	4a7f      	ldr	r2, [pc, #508]	; (800f32c <_printf_float+0x2e4>)
 800f130:	4b7f      	ldr	r3, [pc, #508]	; (800f330 <_printf_float+0x2e8>)
 800f132:	e7d1      	b.n	800f0d8 <_printf_float+0x90>
 800f134:	6863      	ldr	r3, [r4, #4]
 800f136:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f13a:	9206      	str	r2, [sp, #24]
 800f13c:	1c5a      	adds	r2, r3, #1
 800f13e:	d13f      	bne.n	800f1c0 <_printf_float+0x178>
 800f140:	2306      	movs	r3, #6
 800f142:	6063      	str	r3, [r4, #4]
 800f144:	9b05      	ldr	r3, [sp, #20]
 800f146:	6861      	ldr	r1, [r4, #4]
 800f148:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f14c:	2300      	movs	r3, #0
 800f14e:	9303      	str	r3, [sp, #12]
 800f150:	ab0a      	add	r3, sp, #40	; 0x28
 800f152:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f156:	ab09      	add	r3, sp, #36	; 0x24
 800f158:	ec49 8b10 	vmov	d0, r8, r9
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	6022      	str	r2, [r4, #0]
 800f160:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f164:	4628      	mov	r0, r5
 800f166:	f7ff fecf 	bl	800ef08 <__cvt>
 800f16a:	9b06      	ldr	r3, [sp, #24]
 800f16c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f16e:	2b47      	cmp	r3, #71	; 0x47
 800f170:	4680      	mov	r8, r0
 800f172:	d108      	bne.n	800f186 <_printf_float+0x13e>
 800f174:	1cc8      	adds	r0, r1, #3
 800f176:	db02      	blt.n	800f17e <_printf_float+0x136>
 800f178:	6863      	ldr	r3, [r4, #4]
 800f17a:	4299      	cmp	r1, r3
 800f17c:	dd41      	ble.n	800f202 <_printf_float+0x1ba>
 800f17e:	f1ab 0302 	sub.w	r3, fp, #2
 800f182:	fa5f fb83 	uxtb.w	fp, r3
 800f186:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f18a:	d820      	bhi.n	800f1ce <_printf_float+0x186>
 800f18c:	3901      	subs	r1, #1
 800f18e:	465a      	mov	r2, fp
 800f190:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f194:	9109      	str	r1, [sp, #36]	; 0x24
 800f196:	f7ff ff19 	bl	800efcc <__exponent>
 800f19a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f19c:	1813      	adds	r3, r2, r0
 800f19e:	2a01      	cmp	r2, #1
 800f1a0:	4681      	mov	r9, r0
 800f1a2:	6123      	str	r3, [r4, #16]
 800f1a4:	dc02      	bgt.n	800f1ac <_printf_float+0x164>
 800f1a6:	6822      	ldr	r2, [r4, #0]
 800f1a8:	07d2      	lsls	r2, r2, #31
 800f1aa:	d501      	bpl.n	800f1b0 <_printf_float+0x168>
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	6123      	str	r3, [r4, #16]
 800f1b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d09c      	beq.n	800f0f2 <_printf_float+0xaa>
 800f1b8:	232d      	movs	r3, #45	; 0x2d
 800f1ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1be:	e798      	b.n	800f0f2 <_printf_float+0xaa>
 800f1c0:	9a06      	ldr	r2, [sp, #24]
 800f1c2:	2a47      	cmp	r2, #71	; 0x47
 800f1c4:	d1be      	bne.n	800f144 <_printf_float+0xfc>
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1bc      	bne.n	800f144 <_printf_float+0xfc>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e7b9      	b.n	800f142 <_printf_float+0xfa>
 800f1ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f1d2:	d118      	bne.n	800f206 <_printf_float+0x1be>
 800f1d4:	2900      	cmp	r1, #0
 800f1d6:	6863      	ldr	r3, [r4, #4]
 800f1d8:	dd0b      	ble.n	800f1f2 <_printf_float+0x1aa>
 800f1da:	6121      	str	r1, [r4, #16]
 800f1dc:	b913      	cbnz	r3, 800f1e4 <_printf_float+0x19c>
 800f1de:	6822      	ldr	r2, [r4, #0]
 800f1e0:	07d0      	lsls	r0, r2, #31
 800f1e2:	d502      	bpl.n	800f1ea <_printf_float+0x1a2>
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	440b      	add	r3, r1
 800f1e8:	6123      	str	r3, [r4, #16]
 800f1ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800f1ec:	f04f 0900 	mov.w	r9, #0
 800f1f0:	e7de      	b.n	800f1b0 <_printf_float+0x168>
 800f1f2:	b913      	cbnz	r3, 800f1fa <_printf_float+0x1b2>
 800f1f4:	6822      	ldr	r2, [r4, #0]
 800f1f6:	07d2      	lsls	r2, r2, #31
 800f1f8:	d501      	bpl.n	800f1fe <_printf_float+0x1b6>
 800f1fa:	3302      	adds	r3, #2
 800f1fc:	e7f4      	b.n	800f1e8 <_printf_float+0x1a0>
 800f1fe:	2301      	movs	r3, #1
 800f200:	e7f2      	b.n	800f1e8 <_printf_float+0x1a0>
 800f202:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f208:	4299      	cmp	r1, r3
 800f20a:	db05      	blt.n	800f218 <_printf_float+0x1d0>
 800f20c:	6823      	ldr	r3, [r4, #0]
 800f20e:	6121      	str	r1, [r4, #16]
 800f210:	07d8      	lsls	r0, r3, #31
 800f212:	d5ea      	bpl.n	800f1ea <_printf_float+0x1a2>
 800f214:	1c4b      	adds	r3, r1, #1
 800f216:	e7e7      	b.n	800f1e8 <_printf_float+0x1a0>
 800f218:	2900      	cmp	r1, #0
 800f21a:	bfd4      	ite	le
 800f21c:	f1c1 0202 	rsble	r2, r1, #2
 800f220:	2201      	movgt	r2, #1
 800f222:	4413      	add	r3, r2
 800f224:	e7e0      	b.n	800f1e8 <_printf_float+0x1a0>
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	055a      	lsls	r2, r3, #21
 800f22a:	d407      	bmi.n	800f23c <_printf_float+0x1f4>
 800f22c:	6923      	ldr	r3, [r4, #16]
 800f22e:	4642      	mov	r2, r8
 800f230:	4631      	mov	r1, r6
 800f232:	4628      	mov	r0, r5
 800f234:	47b8      	blx	r7
 800f236:	3001      	adds	r0, #1
 800f238:	d12c      	bne.n	800f294 <_printf_float+0x24c>
 800f23a:	e764      	b.n	800f106 <_printf_float+0xbe>
 800f23c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f240:	f240 80e0 	bls.w	800f404 <_printf_float+0x3bc>
 800f244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f248:	2200      	movs	r2, #0
 800f24a:	2300      	movs	r3, #0
 800f24c:	f7f1 fc44 	bl	8000ad8 <__aeabi_dcmpeq>
 800f250:	2800      	cmp	r0, #0
 800f252:	d034      	beq.n	800f2be <_printf_float+0x276>
 800f254:	4a37      	ldr	r2, [pc, #220]	; (800f334 <_printf_float+0x2ec>)
 800f256:	2301      	movs	r3, #1
 800f258:	4631      	mov	r1, r6
 800f25a:	4628      	mov	r0, r5
 800f25c:	47b8      	blx	r7
 800f25e:	3001      	adds	r0, #1
 800f260:	f43f af51 	beq.w	800f106 <_printf_float+0xbe>
 800f264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f268:	429a      	cmp	r2, r3
 800f26a:	db02      	blt.n	800f272 <_printf_float+0x22a>
 800f26c:	6823      	ldr	r3, [r4, #0]
 800f26e:	07d8      	lsls	r0, r3, #31
 800f270:	d510      	bpl.n	800f294 <_printf_float+0x24c>
 800f272:	ee18 3a10 	vmov	r3, s16
 800f276:	4652      	mov	r2, sl
 800f278:	4631      	mov	r1, r6
 800f27a:	4628      	mov	r0, r5
 800f27c:	47b8      	blx	r7
 800f27e:	3001      	adds	r0, #1
 800f280:	f43f af41 	beq.w	800f106 <_printf_float+0xbe>
 800f284:	f04f 0800 	mov.w	r8, #0
 800f288:	f104 091a 	add.w	r9, r4, #26
 800f28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f28e:	3b01      	subs	r3, #1
 800f290:	4543      	cmp	r3, r8
 800f292:	dc09      	bgt.n	800f2a8 <_printf_float+0x260>
 800f294:	6823      	ldr	r3, [r4, #0]
 800f296:	079b      	lsls	r3, r3, #30
 800f298:	f100 8107 	bmi.w	800f4aa <_printf_float+0x462>
 800f29c:	68e0      	ldr	r0, [r4, #12]
 800f29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2a0:	4298      	cmp	r0, r3
 800f2a2:	bfb8      	it	lt
 800f2a4:	4618      	movlt	r0, r3
 800f2a6:	e730      	b.n	800f10a <_printf_float+0xc2>
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	464a      	mov	r2, r9
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	47b8      	blx	r7
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	f43f af27 	beq.w	800f106 <_printf_float+0xbe>
 800f2b8:	f108 0801 	add.w	r8, r8, #1
 800f2bc:	e7e6      	b.n	800f28c <_printf_float+0x244>
 800f2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	dc39      	bgt.n	800f338 <_printf_float+0x2f0>
 800f2c4:	4a1b      	ldr	r2, [pc, #108]	; (800f334 <_printf_float+0x2ec>)
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	47b8      	blx	r7
 800f2ce:	3001      	adds	r0, #1
 800f2d0:	f43f af19 	beq.w	800f106 <_printf_float+0xbe>
 800f2d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	d102      	bne.n	800f2e2 <_printf_float+0x29a>
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	07d9      	lsls	r1, r3, #31
 800f2e0:	d5d8      	bpl.n	800f294 <_printf_float+0x24c>
 800f2e2:	ee18 3a10 	vmov	r3, s16
 800f2e6:	4652      	mov	r2, sl
 800f2e8:	4631      	mov	r1, r6
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	47b8      	blx	r7
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	f43f af09 	beq.w	800f106 <_printf_float+0xbe>
 800f2f4:	f04f 0900 	mov.w	r9, #0
 800f2f8:	f104 0a1a 	add.w	sl, r4, #26
 800f2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2fe:	425b      	negs	r3, r3
 800f300:	454b      	cmp	r3, r9
 800f302:	dc01      	bgt.n	800f308 <_printf_float+0x2c0>
 800f304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f306:	e792      	b.n	800f22e <_printf_float+0x1e6>
 800f308:	2301      	movs	r3, #1
 800f30a:	4652      	mov	r2, sl
 800f30c:	4631      	mov	r1, r6
 800f30e:	4628      	mov	r0, r5
 800f310:	47b8      	blx	r7
 800f312:	3001      	adds	r0, #1
 800f314:	f43f aef7 	beq.w	800f106 <_printf_float+0xbe>
 800f318:	f109 0901 	add.w	r9, r9, #1
 800f31c:	e7ee      	b.n	800f2fc <_printf_float+0x2b4>
 800f31e:	bf00      	nop
 800f320:	7fefffff 	.word	0x7fefffff
 800f324:	08011d80 	.word	0x08011d80
 800f328:	08011d84 	.word	0x08011d84
 800f32c:	08011d88 	.word	0x08011d88
 800f330:	08011d8c 	.word	0x08011d8c
 800f334:	08011d90 	.word	0x08011d90
 800f338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f33a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f33c:	429a      	cmp	r2, r3
 800f33e:	bfa8      	it	ge
 800f340:	461a      	movge	r2, r3
 800f342:	2a00      	cmp	r2, #0
 800f344:	4691      	mov	r9, r2
 800f346:	dc37      	bgt.n	800f3b8 <_printf_float+0x370>
 800f348:	f04f 0b00 	mov.w	fp, #0
 800f34c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f350:	f104 021a 	add.w	r2, r4, #26
 800f354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f356:	9305      	str	r3, [sp, #20]
 800f358:	eba3 0309 	sub.w	r3, r3, r9
 800f35c:	455b      	cmp	r3, fp
 800f35e:	dc33      	bgt.n	800f3c8 <_printf_float+0x380>
 800f360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f364:	429a      	cmp	r2, r3
 800f366:	db3b      	blt.n	800f3e0 <_printf_float+0x398>
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	07da      	lsls	r2, r3, #31
 800f36c:	d438      	bmi.n	800f3e0 <_printf_float+0x398>
 800f36e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f372:	eba2 0903 	sub.w	r9, r2, r3
 800f376:	9b05      	ldr	r3, [sp, #20]
 800f378:	1ad2      	subs	r2, r2, r3
 800f37a:	4591      	cmp	r9, r2
 800f37c:	bfa8      	it	ge
 800f37e:	4691      	movge	r9, r2
 800f380:	f1b9 0f00 	cmp.w	r9, #0
 800f384:	dc35      	bgt.n	800f3f2 <_printf_float+0x3aa>
 800f386:	f04f 0800 	mov.w	r8, #0
 800f38a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f38e:	f104 0a1a 	add.w	sl, r4, #26
 800f392:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f396:	1a9b      	subs	r3, r3, r2
 800f398:	eba3 0309 	sub.w	r3, r3, r9
 800f39c:	4543      	cmp	r3, r8
 800f39e:	f77f af79 	ble.w	800f294 <_printf_float+0x24c>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	4652      	mov	r2, sl
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	47b8      	blx	r7
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	f43f aeaa 	beq.w	800f106 <_printf_float+0xbe>
 800f3b2:	f108 0801 	add.w	r8, r8, #1
 800f3b6:	e7ec      	b.n	800f392 <_printf_float+0x34a>
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	4631      	mov	r1, r6
 800f3bc:	4642      	mov	r2, r8
 800f3be:	4628      	mov	r0, r5
 800f3c0:	47b8      	blx	r7
 800f3c2:	3001      	adds	r0, #1
 800f3c4:	d1c0      	bne.n	800f348 <_printf_float+0x300>
 800f3c6:	e69e      	b.n	800f106 <_printf_float+0xbe>
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	9205      	str	r2, [sp, #20]
 800f3d0:	47b8      	blx	r7
 800f3d2:	3001      	adds	r0, #1
 800f3d4:	f43f ae97 	beq.w	800f106 <_printf_float+0xbe>
 800f3d8:	9a05      	ldr	r2, [sp, #20]
 800f3da:	f10b 0b01 	add.w	fp, fp, #1
 800f3de:	e7b9      	b.n	800f354 <_printf_float+0x30c>
 800f3e0:	ee18 3a10 	vmov	r3, s16
 800f3e4:	4652      	mov	r2, sl
 800f3e6:	4631      	mov	r1, r6
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	47b8      	blx	r7
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	d1be      	bne.n	800f36e <_printf_float+0x326>
 800f3f0:	e689      	b.n	800f106 <_printf_float+0xbe>
 800f3f2:	9a05      	ldr	r2, [sp, #20]
 800f3f4:	464b      	mov	r3, r9
 800f3f6:	4442      	add	r2, r8
 800f3f8:	4631      	mov	r1, r6
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	47b8      	blx	r7
 800f3fe:	3001      	adds	r0, #1
 800f400:	d1c1      	bne.n	800f386 <_printf_float+0x33e>
 800f402:	e680      	b.n	800f106 <_printf_float+0xbe>
 800f404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f406:	2a01      	cmp	r2, #1
 800f408:	dc01      	bgt.n	800f40e <_printf_float+0x3c6>
 800f40a:	07db      	lsls	r3, r3, #31
 800f40c:	d53a      	bpl.n	800f484 <_printf_float+0x43c>
 800f40e:	2301      	movs	r3, #1
 800f410:	4642      	mov	r2, r8
 800f412:	4631      	mov	r1, r6
 800f414:	4628      	mov	r0, r5
 800f416:	47b8      	blx	r7
 800f418:	3001      	adds	r0, #1
 800f41a:	f43f ae74 	beq.w	800f106 <_printf_float+0xbe>
 800f41e:	ee18 3a10 	vmov	r3, s16
 800f422:	4652      	mov	r2, sl
 800f424:	4631      	mov	r1, r6
 800f426:	4628      	mov	r0, r5
 800f428:	47b8      	blx	r7
 800f42a:	3001      	adds	r0, #1
 800f42c:	f43f ae6b 	beq.w	800f106 <_printf_float+0xbe>
 800f430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f434:	2200      	movs	r2, #0
 800f436:	2300      	movs	r3, #0
 800f438:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f43c:	f7f1 fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 800f440:	b9d8      	cbnz	r0, 800f47a <_printf_float+0x432>
 800f442:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f446:	f108 0201 	add.w	r2, r8, #1
 800f44a:	4631      	mov	r1, r6
 800f44c:	4628      	mov	r0, r5
 800f44e:	47b8      	blx	r7
 800f450:	3001      	adds	r0, #1
 800f452:	d10e      	bne.n	800f472 <_printf_float+0x42a>
 800f454:	e657      	b.n	800f106 <_printf_float+0xbe>
 800f456:	2301      	movs	r3, #1
 800f458:	4652      	mov	r2, sl
 800f45a:	4631      	mov	r1, r6
 800f45c:	4628      	mov	r0, r5
 800f45e:	47b8      	blx	r7
 800f460:	3001      	adds	r0, #1
 800f462:	f43f ae50 	beq.w	800f106 <_printf_float+0xbe>
 800f466:	f108 0801 	add.w	r8, r8, #1
 800f46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f46c:	3b01      	subs	r3, #1
 800f46e:	4543      	cmp	r3, r8
 800f470:	dcf1      	bgt.n	800f456 <_printf_float+0x40e>
 800f472:	464b      	mov	r3, r9
 800f474:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f478:	e6da      	b.n	800f230 <_printf_float+0x1e8>
 800f47a:	f04f 0800 	mov.w	r8, #0
 800f47e:	f104 0a1a 	add.w	sl, r4, #26
 800f482:	e7f2      	b.n	800f46a <_printf_float+0x422>
 800f484:	2301      	movs	r3, #1
 800f486:	4642      	mov	r2, r8
 800f488:	e7df      	b.n	800f44a <_printf_float+0x402>
 800f48a:	2301      	movs	r3, #1
 800f48c:	464a      	mov	r2, r9
 800f48e:	4631      	mov	r1, r6
 800f490:	4628      	mov	r0, r5
 800f492:	47b8      	blx	r7
 800f494:	3001      	adds	r0, #1
 800f496:	f43f ae36 	beq.w	800f106 <_printf_float+0xbe>
 800f49a:	f108 0801 	add.w	r8, r8, #1
 800f49e:	68e3      	ldr	r3, [r4, #12]
 800f4a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f4a2:	1a5b      	subs	r3, r3, r1
 800f4a4:	4543      	cmp	r3, r8
 800f4a6:	dcf0      	bgt.n	800f48a <_printf_float+0x442>
 800f4a8:	e6f8      	b.n	800f29c <_printf_float+0x254>
 800f4aa:	f04f 0800 	mov.w	r8, #0
 800f4ae:	f104 0919 	add.w	r9, r4, #25
 800f4b2:	e7f4      	b.n	800f49e <_printf_float+0x456>

0800f4b4 <_printf_common>:
 800f4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4b8:	4616      	mov	r6, r2
 800f4ba:	4699      	mov	r9, r3
 800f4bc:	688a      	ldr	r2, [r1, #8]
 800f4be:	690b      	ldr	r3, [r1, #16]
 800f4c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	bfb8      	it	lt
 800f4c8:	4613      	movlt	r3, r2
 800f4ca:	6033      	str	r3, [r6, #0]
 800f4cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4d0:	4607      	mov	r7, r0
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	b10a      	cbz	r2, 800f4da <_printf_common+0x26>
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	6033      	str	r3, [r6, #0]
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	0699      	lsls	r1, r3, #26
 800f4de:	bf42      	ittt	mi
 800f4e0:	6833      	ldrmi	r3, [r6, #0]
 800f4e2:	3302      	addmi	r3, #2
 800f4e4:	6033      	strmi	r3, [r6, #0]
 800f4e6:	6825      	ldr	r5, [r4, #0]
 800f4e8:	f015 0506 	ands.w	r5, r5, #6
 800f4ec:	d106      	bne.n	800f4fc <_printf_common+0x48>
 800f4ee:	f104 0a19 	add.w	sl, r4, #25
 800f4f2:	68e3      	ldr	r3, [r4, #12]
 800f4f4:	6832      	ldr	r2, [r6, #0]
 800f4f6:	1a9b      	subs	r3, r3, r2
 800f4f8:	42ab      	cmp	r3, r5
 800f4fa:	dc26      	bgt.n	800f54a <_printf_common+0x96>
 800f4fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f500:	1e13      	subs	r3, r2, #0
 800f502:	6822      	ldr	r2, [r4, #0]
 800f504:	bf18      	it	ne
 800f506:	2301      	movne	r3, #1
 800f508:	0692      	lsls	r2, r2, #26
 800f50a:	d42b      	bmi.n	800f564 <_printf_common+0xb0>
 800f50c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f510:	4649      	mov	r1, r9
 800f512:	4638      	mov	r0, r7
 800f514:	47c0      	blx	r8
 800f516:	3001      	adds	r0, #1
 800f518:	d01e      	beq.n	800f558 <_printf_common+0xa4>
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	6922      	ldr	r2, [r4, #16]
 800f51e:	f003 0306 	and.w	r3, r3, #6
 800f522:	2b04      	cmp	r3, #4
 800f524:	bf02      	ittt	eq
 800f526:	68e5      	ldreq	r5, [r4, #12]
 800f528:	6833      	ldreq	r3, [r6, #0]
 800f52a:	1aed      	subeq	r5, r5, r3
 800f52c:	68a3      	ldr	r3, [r4, #8]
 800f52e:	bf0c      	ite	eq
 800f530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f534:	2500      	movne	r5, #0
 800f536:	4293      	cmp	r3, r2
 800f538:	bfc4      	itt	gt
 800f53a:	1a9b      	subgt	r3, r3, r2
 800f53c:	18ed      	addgt	r5, r5, r3
 800f53e:	2600      	movs	r6, #0
 800f540:	341a      	adds	r4, #26
 800f542:	42b5      	cmp	r5, r6
 800f544:	d11a      	bne.n	800f57c <_printf_common+0xc8>
 800f546:	2000      	movs	r0, #0
 800f548:	e008      	b.n	800f55c <_printf_common+0xa8>
 800f54a:	2301      	movs	r3, #1
 800f54c:	4652      	mov	r2, sl
 800f54e:	4649      	mov	r1, r9
 800f550:	4638      	mov	r0, r7
 800f552:	47c0      	blx	r8
 800f554:	3001      	adds	r0, #1
 800f556:	d103      	bne.n	800f560 <_printf_common+0xac>
 800f558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f560:	3501      	adds	r5, #1
 800f562:	e7c6      	b.n	800f4f2 <_printf_common+0x3e>
 800f564:	18e1      	adds	r1, r4, r3
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	2030      	movs	r0, #48	; 0x30
 800f56a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f56e:	4422      	add	r2, r4
 800f570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f578:	3302      	adds	r3, #2
 800f57a:	e7c7      	b.n	800f50c <_printf_common+0x58>
 800f57c:	2301      	movs	r3, #1
 800f57e:	4622      	mov	r2, r4
 800f580:	4649      	mov	r1, r9
 800f582:	4638      	mov	r0, r7
 800f584:	47c0      	blx	r8
 800f586:	3001      	adds	r0, #1
 800f588:	d0e6      	beq.n	800f558 <_printf_common+0xa4>
 800f58a:	3601      	adds	r6, #1
 800f58c:	e7d9      	b.n	800f542 <_printf_common+0x8e>
	...

0800f590 <_printf_i>:
 800f590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f594:	7e0f      	ldrb	r7, [r1, #24]
 800f596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f598:	2f78      	cmp	r7, #120	; 0x78
 800f59a:	4691      	mov	r9, r2
 800f59c:	4680      	mov	r8, r0
 800f59e:	460c      	mov	r4, r1
 800f5a0:	469a      	mov	sl, r3
 800f5a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f5a6:	d807      	bhi.n	800f5b8 <_printf_i+0x28>
 800f5a8:	2f62      	cmp	r7, #98	; 0x62
 800f5aa:	d80a      	bhi.n	800f5c2 <_printf_i+0x32>
 800f5ac:	2f00      	cmp	r7, #0
 800f5ae:	f000 80d4 	beq.w	800f75a <_printf_i+0x1ca>
 800f5b2:	2f58      	cmp	r7, #88	; 0x58
 800f5b4:	f000 80c0 	beq.w	800f738 <_printf_i+0x1a8>
 800f5b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f5c0:	e03a      	b.n	800f638 <_printf_i+0xa8>
 800f5c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f5c6:	2b15      	cmp	r3, #21
 800f5c8:	d8f6      	bhi.n	800f5b8 <_printf_i+0x28>
 800f5ca:	a101      	add	r1, pc, #4	; (adr r1, 800f5d0 <_printf_i+0x40>)
 800f5cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5d0:	0800f629 	.word	0x0800f629
 800f5d4:	0800f63d 	.word	0x0800f63d
 800f5d8:	0800f5b9 	.word	0x0800f5b9
 800f5dc:	0800f5b9 	.word	0x0800f5b9
 800f5e0:	0800f5b9 	.word	0x0800f5b9
 800f5e4:	0800f5b9 	.word	0x0800f5b9
 800f5e8:	0800f63d 	.word	0x0800f63d
 800f5ec:	0800f5b9 	.word	0x0800f5b9
 800f5f0:	0800f5b9 	.word	0x0800f5b9
 800f5f4:	0800f5b9 	.word	0x0800f5b9
 800f5f8:	0800f5b9 	.word	0x0800f5b9
 800f5fc:	0800f741 	.word	0x0800f741
 800f600:	0800f669 	.word	0x0800f669
 800f604:	0800f6fb 	.word	0x0800f6fb
 800f608:	0800f5b9 	.word	0x0800f5b9
 800f60c:	0800f5b9 	.word	0x0800f5b9
 800f610:	0800f763 	.word	0x0800f763
 800f614:	0800f5b9 	.word	0x0800f5b9
 800f618:	0800f669 	.word	0x0800f669
 800f61c:	0800f5b9 	.word	0x0800f5b9
 800f620:	0800f5b9 	.word	0x0800f5b9
 800f624:	0800f703 	.word	0x0800f703
 800f628:	682b      	ldr	r3, [r5, #0]
 800f62a:	1d1a      	adds	r2, r3, #4
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	602a      	str	r2, [r5, #0]
 800f630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f638:	2301      	movs	r3, #1
 800f63a:	e09f      	b.n	800f77c <_printf_i+0x1ec>
 800f63c:	6820      	ldr	r0, [r4, #0]
 800f63e:	682b      	ldr	r3, [r5, #0]
 800f640:	0607      	lsls	r7, r0, #24
 800f642:	f103 0104 	add.w	r1, r3, #4
 800f646:	6029      	str	r1, [r5, #0]
 800f648:	d501      	bpl.n	800f64e <_printf_i+0xbe>
 800f64a:	681e      	ldr	r6, [r3, #0]
 800f64c:	e003      	b.n	800f656 <_printf_i+0xc6>
 800f64e:	0646      	lsls	r6, r0, #25
 800f650:	d5fb      	bpl.n	800f64a <_printf_i+0xba>
 800f652:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f656:	2e00      	cmp	r6, #0
 800f658:	da03      	bge.n	800f662 <_printf_i+0xd2>
 800f65a:	232d      	movs	r3, #45	; 0x2d
 800f65c:	4276      	negs	r6, r6
 800f65e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f662:	485a      	ldr	r0, [pc, #360]	; (800f7cc <_printf_i+0x23c>)
 800f664:	230a      	movs	r3, #10
 800f666:	e012      	b.n	800f68e <_printf_i+0xfe>
 800f668:	682b      	ldr	r3, [r5, #0]
 800f66a:	6820      	ldr	r0, [r4, #0]
 800f66c:	1d19      	adds	r1, r3, #4
 800f66e:	6029      	str	r1, [r5, #0]
 800f670:	0605      	lsls	r5, r0, #24
 800f672:	d501      	bpl.n	800f678 <_printf_i+0xe8>
 800f674:	681e      	ldr	r6, [r3, #0]
 800f676:	e002      	b.n	800f67e <_printf_i+0xee>
 800f678:	0641      	lsls	r1, r0, #25
 800f67a:	d5fb      	bpl.n	800f674 <_printf_i+0xe4>
 800f67c:	881e      	ldrh	r6, [r3, #0]
 800f67e:	4853      	ldr	r0, [pc, #332]	; (800f7cc <_printf_i+0x23c>)
 800f680:	2f6f      	cmp	r7, #111	; 0x6f
 800f682:	bf0c      	ite	eq
 800f684:	2308      	moveq	r3, #8
 800f686:	230a      	movne	r3, #10
 800f688:	2100      	movs	r1, #0
 800f68a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f68e:	6865      	ldr	r5, [r4, #4]
 800f690:	60a5      	str	r5, [r4, #8]
 800f692:	2d00      	cmp	r5, #0
 800f694:	bfa2      	ittt	ge
 800f696:	6821      	ldrge	r1, [r4, #0]
 800f698:	f021 0104 	bicge.w	r1, r1, #4
 800f69c:	6021      	strge	r1, [r4, #0]
 800f69e:	b90e      	cbnz	r6, 800f6a4 <_printf_i+0x114>
 800f6a0:	2d00      	cmp	r5, #0
 800f6a2:	d04b      	beq.n	800f73c <_printf_i+0x1ac>
 800f6a4:	4615      	mov	r5, r2
 800f6a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f6aa:	fb03 6711 	mls	r7, r3, r1, r6
 800f6ae:	5dc7      	ldrb	r7, [r0, r7]
 800f6b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f6b4:	4637      	mov	r7, r6
 800f6b6:	42bb      	cmp	r3, r7
 800f6b8:	460e      	mov	r6, r1
 800f6ba:	d9f4      	bls.n	800f6a6 <_printf_i+0x116>
 800f6bc:	2b08      	cmp	r3, #8
 800f6be:	d10b      	bne.n	800f6d8 <_printf_i+0x148>
 800f6c0:	6823      	ldr	r3, [r4, #0]
 800f6c2:	07de      	lsls	r6, r3, #31
 800f6c4:	d508      	bpl.n	800f6d8 <_printf_i+0x148>
 800f6c6:	6923      	ldr	r3, [r4, #16]
 800f6c8:	6861      	ldr	r1, [r4, #4]
 800f6ca:	4299      	cmp	r1, r3
 800f6cc:	bfde      	ittt	le
 800f6ce:	2330      	movle	r3, #48	; 0x30
 800f6d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f6d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f6d8:	1b52      	subs	r2, r2, r5
 800f6da:	6122      	str	r2, [r4, #16]
 800f6dc:	f8cd a000 	str.w	sl, [sp]
 800f6e0:	464b      	mov	r3, r9
 800f6e2:	aa03      	add	r2, sp, #12
 800f6e4:	4621      	mov	r1, r4
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	f7ff fee4 	bl	800f4b4 <_printf_common>
 800f6ec:	3001      	adds	r0, #1
 800f6ee:	d14a      	bne.n	800f786 <_printf_i+0x1f6>
 800f6f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6f4:	b004      	add	sp, #16
 800f6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6fa:	6823      	ldr	r3, [r4, #0]
 800f6fc:	f043 0320 	orr.w	r3, r3, #32
 800f700:	6023      	str	r3, [r4, #0]
 800f702:	4833      	ldr	r0, [pc, #204]	; (800f7d0 <_printf_i+0x240>)
 800f704:	2778      	movs	r7, #120	; 0x78
 800f706:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f70a:	6823      	ldr	r3, [r4, #0]
 800f70c:	6829      	ldr	r1, [r5, #0]
 800f70e:	061f      	lsls	r7, r3, #24
 800f710:	f851 6b04 	ldr.w	r6, [r1], #4
 800f714:	d402      	bmi.n	800f71c <_printf_i+0x18c>
 800f716:	065f      	lsls	r7, r3, #25
 800f718:	bf48      	it	mi
 800f71a:	b2b6      	uxthmi	r6, r6
 800f71c:	07df      	lsls	r7, r3, #31
 800f71e:	bf48      	it	mi
 800f720:	f043 0320 	orrmi.w	r3, r3, #32
 800f724:	6029      	str	r1, [r5, #0]
 800f726:	bf48      	it	mi
 800f728:	6023      	strmi	r3, [r4, #0]
 800f72a:	b91e      	cbnz	r6, 800f734 <_printf_i+0x1a4>
 800f72c:	6823      	ldr	r3, [r4, #0]
 800f72e:	f023 0320 	bic.w	r3, r3, #32
 800f732:	6023      	str	r3, [r4, #0]
 800f734:	2310      	movs	r3, #16
 800f736:	e7a7      	b.n	800f688 <_printf_i+0xf8>
 800f738:	4824      	ldr	r0, [pc, #144]	; (800f7cc <_printf_i+0x23c>)
 800f73a:	e7e4      	b.n	800f706 <_printf_i+0x176>
 800f73c:	4615      	mov	r5, r2
 800f73e:	e7bd      	b.n	800f6bc <_printf_i+0x12c>
 800f740:	682b      	ldr	r3, [r5, #0]
 800f742:	6826      	ldr	r6, [r4, #0]
 800f744:	6961      	ldr	r1, [r4, #20]
 800f746:	1d18      	adds	r0, r3, #4
 800f748:	6028      	str	r0, [r5, #0]
 800f74a:	0635      	lsls	r5, r6, #24
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	d501      	bpl.n	800f754 <_printf_i+0x1c4>
 800f750:	6019      	str	r1, [r3, #0]
 800f752:	e002      	b.n	800f75a <_printf_i+0x1ca>
 800f754:	0670      	lsls	r0, r6, #25
 800f756:	d5fb      	bpl.n	800f750 <_printf_i+0x1c0>
 800f758:	8019      	strh	r1, [r3, #0]
 800f75a:	2300      	movs	r3, #0
 800f75c:	6123      	str	r3, [r4, #16]
 800f75e:	4615      	mov	r5, r2
 800f760:	e7bc      	b.n	800f6dc <_printf_i+0x14c>
 800f762:	682b      	ldr	r3, [r5, #0]
 800f764:	1d1a      	adds	r2, r3, #4
 800f766:	602a      	str	r2, [r5, #0]
 800f768:	681d      	ldr	r5, [r3, #0]
 800f76a:	6862      	ldr	r2, [r4, #4]
 800f76c:	2100      	movs	r1, #0
 800f76e:	4628      	mov	r0, r5
 800f770:	f7f0 fd36 	bl	80001e0 <memchr>
 800f774:	b108      	cbz	r0, 800f77a <_printf_i+0x1ea>
 800f776:	1b40      	subs	r0, r0, r5
 800f778:	6060      	str	r0, [r4, #4]
 800f77a:	6863      	ldr	r3, [r4, #4]
 800f77c:	6123      	str	r3, [r4, #16]
 800f77e:	2300      	movs	r3, #0
 800f780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f784:	e7aa      	b.n	800f6dc <_printf_i+0x14c>
 800f786:	6923      	ldr	r3, [r4, #16]
 800f788:	462a      	mov	r2, r5
 800f78a:	4649      	mov	r1, r9
 800f78c:	4640      	mov	r0, r8
 800f78e:	47d0      	blx	sl
 800f790:	3001      	adds	r0, #1
 800f792:	d0ad      	beq.n	800f6f0 <_printf_i+0x160>
 800f794:	6823      	ldr	r3, [r4, #0]
 800f796:	079b      	lsls	r3, r3, #30
 800f798:	d413      	bmi.n	800f7c2 <_printf_i+0x232>
 800f79a:	68e0      	ldr	r0, [r4, #12]
 800f79c:	9b03      	ldr	r3, [sp, #12]
 800f79e:	4298      	cmp	r0, r3
 800f7a0:	bfb8      	it	lt
 800f7a2:	4618      	movlt	r0, r3
 800f7a4:	e7a6      	b.n	800f6f4 <_printf_i+0x164>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	4632      	mov	r2, r6
 800f7aa:	4649      	mov	r1, r9
 800f7ac:	4640      	mov	r0, r8
 800f7ae:	47d0      	blx	sl
 800f7b0:	3001      	adds	r0, #1
 800f7b2:	d09d      	beq.n	800f6f0 <_printf_i+0x160>
 800f7b4:	3501      	adds	r5, #1
 800f7b6:	68e3      	ldr	r3, [r4, #12]
 800f7b8:	9903      	ldr	r1, [sp, #12]
 800f7ba:	1a5b      	subs	r3, r3, r1
 800f7bc:	42ab      	cmp	r3, r5
 800f7be:	dcf2      	bgt.n	800f7a6 <_printf_i+0x216>
 800f7c0:	e7eb      	b.n	800f79a <_printf_i+0x20a>
 800f7c2:	2500      	movs	r5, #0
 800f7c4:	f104 0619 	add.w	r6, r4, #25
 800f7c8:	e7f5      	b.n	800f7b6 <_printf_i+0x226>
 800f7ca:	bf00      	nop
 800f7cc:	08011d92 	.word	0x08011d92
 800f7d0:	08011da3 	.word	0x08011da3

0800f7d4 <std>:
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	b510      	push	{r4, lr}
 800f7d8:	4604      	mov	r4, r0
 800f7da:	e9c0 3300 	strd	r3, r3, [r0]
 800f7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7e2:	6083      	str	r3, [r0, #8]
 800f7e4:	8181      	strh	r1, [r0, #12]
 800f7e6:	6643      	str	r3, [r0, #100]	; 0x64
 800f7e8:	81c2      	strh	r2, [r0, #14]
 800f7ea:	6183      	str	r3, [r0, #24]
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	2208      	movs	r2, #8
 800f7f0:	305c      	adds	r0, #92	; 0x5c
 800f7f2:	f000 f902 	bl	800f9fa <memset>
 800f7f6:	4b05      	ldr	r3, [pc, #20]	; (800f80c <std+0x38>)
 800f7f8:	6263      	str	r3, [r4, #36]	; 0x24
 800f7fa:	4b05      	ldr	r3, [pc, #20]	; (800f810 <std+0x3c>)
 800f7fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f7fe:	4b05      	ldr	r3, [pc, #20]	; (800f814 <std+0x40>)
 800f800:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f802:	4b05      	ldr	r3, [pc, #20]	; (800f818 <std+0x44>)
 800f804:	6224      	str	r4, [r4, #32]
 800f806:	6323      	str	r3, [r4, #48]	; 0x30
 800f808:	bd10      	pop	{r4, pc}
 800f80a:	bf00      	nop
 800f80c:	0800f975 	.word	0x0800f975
 800f810:	0800f997 	.word	0x0800f997
 800f814:	0800f9cf 	.word	0x0800f9cf
 800f818:	0800f9f3 	.word	0x0800f9f3

0800f81c <stdio_exit_handler>:
 800f81c:	4a02      	ldr	r2, [pc, #8]	; (800f828 <stdio_exit_handler+0xc>)
 800f81e:	4903      	ldr	r1, [pc, #12]	; (800f82c <stdio_exit_handler+0x10>)
 800f820:	4803      	ldr	r0, [pc, #12]	; (800f830 <stdio_exit_handler+0x14>)
 800f822:	f000 b869 	b.w	800f8f8 <_fwalk_sglue>
 800f826:	bf00      	nop
 800f828:	20000120 	.word	0x20000120
 800f82c:	08011391 	.word	0x08011391
 800f830:	2000012c 	.word	0x2000012c

0800f834 <cleanup_stdio>:
 800f834:	6841      	ldr	r1, [r0, #4]
 800f836:	4b0c      	ldr	r3, [pc, #48]	; (800f868 <cleanup_stdio+0x34>)
 800f838:	4299      	cmp	r1, r3
 800f83a:	b510      	push	{r4, lr}
 800f83c:	4604      	mov	r4, r0
 800f83e:	d001      	beq.n	800f844 <cleanup_stdio+0x10>
 800f840:	f001 fda6 	bl	8011390 <_fflush_r>
 800f844:	68a1      	ldr	r1, [r4, #8]
 800f846:	4b09      	ldr	r3, [pc, #36]	; (800f86c <cleanup_stdio+0x38>)
 800f848:	4299      	cmp	r1, r3
 800f84a:	d002      	beq.n	800f852 <cleanup_stdio+0x1e>
 800f84c:	4620      	mov	r0, r4
 800f84e:	f001 fd9f 	bl	8011390 <_fflush_r>
 800f852:	68e1      	ldr	r1, [r4, #12]
 800f854:	4b06      	ldr	r3, [pc, #24]	; (800f870 <cleanup_stdio+0x3c>)
 800f856:	4299      	cmp	r1, r3
 800f858:	d004      	beq.n	800f864 <cleanup_stdio+0x30>
 800f85a:	4620      	mov	r0, r4
 800f85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f860:	f001 bd96 	b.w	8011390 <_fflush_r>
 800f864:	bd10      	pop	{r4, pc}
 800f866:	bf00      	nop
 800f868:	20002244 	.word	0x20002244
 800f86c:	200022ac 	.word	0x200022ac
 800f870:	20002314 	.word	0x20002314

0800f874 <global_stdio_init.part.0>:
 800f874:	b510      	push	{r4, lr}
 800f876:	4b0b      	ldr	r3, [pc, #44]	; (800f8a4 <global_stdio_init.part.0+0x30>)
 800f878:	4c0b      	ldr	r4, [pc, #44]	; (800f8a8 <global_stdio_init.part.0+0x34>)
 800f87a:	4a0c      	ldr	r2, [pc, #48]	; (800f8ac <global_stdio_init.part.0+0x38>)
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	4620      	mov	r0, r4
 800f880:	2200      	movs	r2, #0
 800f882:	2104      	movs	r1, #4
 800f884:	f7ff ffa6 	bl	800f7d4 <std>
 800f888:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f88c:	2201      	movs	r2, #1
 800f88e:	2109      	movs	r1, #9
 800f890:	f7ff ffa0 	bl	800f7d4 <std>
 800f894:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f898:	2202      	movs	r2, #2
 800f89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f89e:	2112      	movs	r1, #18
 800f8a0:	f7ff bf98 	b.w	800f7d4 <std>
 800f8a4:	2000237c 	.word	0x2000237c
 800f8a8:	20002244 	.word	0x20002244
 800f8ac:	0800f81d 	.word	0x0800f81d

0800f8b0 <__sfp_lock_acquire>:
 800f8b0:	4801      	ldr	r0, [pc, #4]	; (800f8b8 <__sfp_lock_acquire+0x8>)
 800f8b2:	f000 b93d 	b.w	800fb30 <__retarget_lock_acquire_recursive>
 800f8b6:	bf00      	nop
 800f8b8:	20002385 	.word	0x20002385

0800f8bc <__sfp_lock_release>:
 800f8bc:	4801      	ldr	r0, [pc, #4]	; (800f8c4 <__sfp_lock_release+0x8>)
 800f8be:	f000 b938 	b.w	800fb32 <__retarget_lock_release_recursive>
 800f8c2:	bf00      	nop
 800f8c4:	20002385 	.word	0x20002385

0800f8c8 <__sinit>:
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	f7ff fff0 	bl	800f8b0 <__sfp_lock_acquire>
 800f8d0:	6a23      	ldr	r3, [r4, #32]
 800f8d2:	b11b      	cbz	r3, 800f8dc <__sinit+0x14>
 800f8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8d8:	f7ff bff0 	b.w	800f8bc <__sfp_lock_release>
 800f8dc:	4b04      	ldr	r3, [pc, #16]	; (800f8f0 <__sinit+0x28>)
 800f8de:	6223      	str	r3, [r4, #32]
 800f8e0:	4b04      	ldr	r3, [pc, #16]	; (800f8f4 <__sinit+0x2c>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1f5      	bne.n	800f8d4 <__sinit+0xc>
 800f8e8:	f7ff ffc4 	bl	800f874 <global_stdio_init.part.0>
 800f8ec:	e7f2      	b.n	800f8d4 <__sinit+0xc>
 800f8ee:	bf00      	nop
 800f8f0:	0800f835 	.word	0x0800f835
 800f8f4:	2000237c 	.word	0x2000237c

0800f8f8 <_fwalk_sglue>:
 800f8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8fc:	4607      	mov	r7, r0
 800f8fe:	4688      	mov	r8, r1
 800f900:	4614      	mov	r4, r2
 800f902:	2600      	movs	r6, #0
 800f904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f908:	f1b9 0901 	subs.w	r9, r9, #1
 800f90c:	d505      	bpl.n	800f91a <_fwalk_sglue+0x22>
 800f90e:	6824      	ldr	r4, [r4, #0]
 800f910:	2c00      	cmp	r4, #0
 800f912:	d1f7      	bne.n	800f904 <_fwalk_sglue+0xc>
 800f914:	4630      	mov	r0, r6
 800f916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f91a:	89ab      	ldrh	r3, [r5, #12]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d907      	bls.n	800f930 <_fwalk_sglue+0x38>
 800f920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f924:	3301      	adds	r3, #1
 800f926:	d003      	beq.n	800f930 <_fwalk_sglue+0x38>
 800f928:	4629      	mov	r1, r5
 800f92a:	4638      	mov	r0, r7
 800f92c:	47c0      	blx	r8
 800f92e:	4306      	orrs	r6, r0
 800f930:	3568      	adds	r5, #104	; 0x68
 800f932:	e7e9      	b.n	800f908 <_fwalk_sglue+0x10>

0800f934 <siprintf>:
 800f934:	b40e      	push	{r1, r2, r3}
 800f936:	b500      	push	{lr}
 800f938:	b09c      	sub	sp, #112	; 0x70
 800f93a:	ab1d      	add	r3, sp, #116	; 0x74
 800f93c:	9002      	str	r0, [sp, #8]
 800f93e:	9006      	str	r0, [sp, #24]
 800f940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f944:	4809      	ldr	r0, [pc, #36]	; (800f96c <siprintf+0x38>)
 800f946:	9107      	str	r1, [sp, #28]
 800f948:	9104      	str	r1, [sp, #16]
 800f94a:	4909      	ldr	r1, [pc, #36]	; (800f970 <siprintf+0x3c>)
 800f94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f950:	9105      	str	r1, [sp, #20]
 800f952:	6800      	ldr	r0, [r0, #0]
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	a902      	add	r1, sp, #8
 800f958:	f001 fb96 	bl	8011088 <_svfiprintf_r>
 800f95c:	9b02      	ldr	r3, [sp, #8]
 800f95e:	2200      	movs	r2, #0
 800f960:	701a      	strb	r2, [r3, #0]
 800f962:	b01c      	add	sp, #112	; 0x70
 800f964:	f85d eb04 	ldr.w	lr, [sp], #4
 800f968:	b003      	add	sp, #12
 800f96a:	4770      	bx	lr
 800f96c:	20000178 	.word	0x20000178
 800f970:	ffff0208 	.word	0xffff0208

0800f974 <__sread>:
 800f974:	b510      	push	{r4, lr}
 800f976:	460c      	mov	r4, r1
 800f978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f97c:	f000 f87a 	bl	800fa74 <_read_r>
 800f980:	2800      	cmp	r0, #0
 800f982:	bfab      	itete	ge
 800f984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f986:	89a3      	ldrhlt	r3, [r4, #12]
 800f988:	181b      	addge	r3, r3, r0
 800f98a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f98e:	bfac      	ite	ge
 800f990:	6563      	strge	r3, [r4, #84]	; 0x54
 800f992:	81a3      	strhlt	r3, [r4, #12]
 800f994:	bd10      	pop	{r4, pc}

0800f996 <__swrite>:
 800f996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f99a:	461f      	mov	r7, r3
 800f99c:	898b      	ldrh	r3, [r1, #12]
 800f99e:	05db      	lsls	r3, r3, #23
 800f9a0:	4605      	mov	r5, r0
 800f9a2:	460c      	mov	r4, r1
 800f9a4:	4616      	mov	r6, r2
 800f9a6:	d505      	bpl.n	800f9b4 <__swrite+0x1e>
 800f9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f000 f84e 	bl	800fa50 <_lseek_r>
 800f9b4:	89a3      	ldrh	r3, [r4, #12]
 800f9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9be:	81a3      	strh	r3, [r4, #12]
 800f9c0:	4632      	mov	r2, r6
 800f9c2:	463b      	mov	r3, r7
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ca:	f000 b875 	b.w	800fab8 <_write_r>

0800f9ce <__sseek>:
 800f9ce:	b510      	push	{r4, lr}
 800f9d0:	460c      	mov	r4, r1
 800f9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9d6:	f000 f83b 	bl	800fa50 <_lseek_r>
 800f9da:	1c43      	adds	r3, r0, #1
 800f9dc:	89a3      	ldrh	r3, [r4, #12]
 800f9de:	bf15      	itete	ne
 800f9e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9ea:	81a3      	strheq	r3, [r4, #12]
 800f9ec:	bf18      	it	ne
 800f9ee:	81a3      	strhne	r3, [r4, #12]
 800f9f0:	bd10      	pop	{r4, pc}

0800f9f2 <__sclose>:
 800f9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f6:	f000 b81b 	b.w	800fa30 <_close_r>

0800f9fa <memset>:
 800f9fa:	4402      	add	r2, r0
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d100      	bne.n	800fa04 <memset+0xa>
 800fa02:	4770      	bx	lr
 800fa04:	f803 1b01 	strb.w	r1, [r3], #1
 800fa08:	e7f9      	b.n	800f9fe <memset+0x4>

0800fa0a <strcat>:
 800fa0a:	b510      	push	{r4, lr}
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	7814      	ldrb	r4, [r2, #0]
 800fa10:	4613      	mov	r3, r2
 800fa12:	3201      	adds	r2, #1
 800fa14:	2c00      	cmp	r4, #0
 800fa16:	d1fa      	bne.n	800fa0e <strcat+0x4>
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa22:	2a00      	cmp	r2, #0
 800fa24:	d1f9      	bne.n	800fa1a <strcat+0x10>
 800fa26:	bd10      	pop	{r4, pc}

0800fa28 <_localeconv_r>:
 800fa28:	4800      	ldr	r0, [pc, #0]	; (800fa2c <_localeconv_r+0x4>)
 800fa2a:	4770      	bx	lr
 800fa2c:	2000026c 	.word	0x2000026c

0800fa30 <_close_r>:
 800fa30:	b538      	push	{r3, r4, r5, lr}
 800fa32:	4d06      	ldr	r5, [pc, #24]	; (800fa4c <_close_r+0x1c>)
 800fa34:	2300      	movs	r3, #0
 800fa36:	4604      	mov	r4, r0
 800fa38:	4608      	mov	r0, r1
 800fa3a:	602b      	str	r3, [r5, #0]
 800fa3c:	f7f2 faf3 	bl	8002026 <_close>
 800fa40:	1c43      	adds	r3, r0, #1
 800fa42:	d102      	bne.n	800fa4a <_close_r+0x1a>
 800fa44:	682b      	ldr	r3, [r5, #0]
 800fa46:	b103      	cbz	r3, 800fa4a <_close_r+0x1a>
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	bd38      	pop	{r3, r4, r5, pc}
 800fa4c:	20002380 	.word	0x20002380

0800fa50 <_lseek_r>:
 800fa50:	b538      	push	{r3, r4, r5, lr}
 800fa52:	4d07      	ldr	r5, [pc, #28]	; (800fa70 <_lseek_r+0x20>)
 800fa54:	4604      	mov	r4, r0
 800fa56:	4608      	mov	r0, r1
 800fa58:	4611      	mov	r1, r2
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	602a      	str	r2, [r5, #0]
 800fa5e:	461a      	mov	r2, r3
 800fa60:	f7f2 fb08 	bl	8002074 <_lseek>
 800fa64:	1c43      	adds	r3, r0, #1
 800fa66:	d102      	bne.n	800fa6e <_lseek_r+0x1e>
 800fa68:	682b      	ldr	r3, [r5, #0]
 800fa6a:	b103      	cbz	r3, 800fa6e <_lseek_r+0x1e>
 800fa6c:	6023      	str	r3, [r4, #0]
 800fa6e:	bd38      	pop	{r3, r4, r5, pc}
 800fa70:	20002380 	.word	0x20002380

0800fa74 <_read_r>:
 800fa74:	b538      	push	{r3, r4, r5, lr}
 800fa76:	4d07      	ldr	r5, [pc, #28]	; (800fa94 <_read_r+0x20>)
 800fa78:	4604      	mov	r4, r0
 800fa7a:	4608      	mov	r0, r1
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	2200      	movs	r2, #0
 800fa80:	602a      	str	r2, [r5, #0]
 800fa82:	461a      	mov	r2, r3
 800fa84:	f7f2 fa96 	bl	8001fb4 <_read>
 800fa88:	1c43      	adds	r3, r0, #1
 800fa8a:	d102      	bne.n	800fa92 <_read_r+0x1e>
 800fa8c:	682b      	ldr	r3, [r5, #0]
 800fa8e:	b103      	cbz	r3, 800fa92 <_read_r+0x1e>
 800fa90:	6023      	str	r3, [r4, #0]
 800fa92:	bd38      	pop	{r3, r4, r5, pc}
 800fa94:	20002380 	.word	0x20002380

0800fa98 <_sbrk_r>:
 800fa98:	b538      	push	{r3, r4, r5, lr}
 800fa9a:	4d06      	ldr	r5, [pc, #24]	; (800fab4 <_sbrk_r+0x1c>)
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	4604      	mov	r4, r0
 800faa0:	4608      	mov	r0, r1
 800faa2:	602b      	str	r3, [r5, #0]
 800faa4:	f7f2 faf4 	bl	8002090 <_sbrk>
 800faa8:	1c43      	adds	r3, r0, #1
 800faaa:	d102      	bne.n	800fab2 <_sbrk_r+0x1a>
 800faac:	682b      	ldr	r3, [r5, #0]
 800faae:	b103      	cbz	r3, 800fab2 <_sbrk_r+0x1a>
 800fab0:	6023      	str	r3, [r4, #0]
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	20002380 	.word	0x20002380

0800fab8 <_write_r>:
 800fab8:	b538      	push	{r3, r4, r5, lr}
 800faba:	4d07      	ldr	r5, [pc, #28]	; (800fad8 <_write_r+0x20>)
 800fabc:	4604      	mov	r4, r0
 800fabe:	4608      	mov	r0, r1
 800fac0:	4611      	mov	r1, r2
 800fac2:	2200      	movs	r2, #0
 800fac4:	602a      	str	r2, [r5, #0]
 800fac6:	461a      	mov	r2, r3
 800fac8:	f7f2 fa91 	bl	8001fee <_write>
 800facc:	1c43      	adds	r3, r0, #1
 800face:	d102      	bne.n	800fad6 <_write_r+0x1e>
 800fad0:	682b      	ldr	r3, [r5, #0]
 800fad2:	b103      	cbz	r3, 800fad6 <_write_r+0x1e>
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	bd38      	pop	{r3, r4, r5, pc}
 800fad8:	20002380 	.word	0x20002380

0800fadc <__errno>:
 800fadc:	4b01      	ldr	r3, [pc, #4]	; (800fae4 <__errno+0x8>)
 800fade:	6818      	ldr	r0, [r3, #0]
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	20000178 	.word	0x20000178

0800fae8 <__libc_init_array>:
 800fae8:	b570      	push	{r4, r5, r6, lr}
 800faea:	4d0d      	ldr	r5, [pc, #52]	; (800fb20 <__libc_init_array+0x38>)
 800faec:	4c0d      	ldr	r4, [pc, #52]	; (800fb24 <__libc_init_array+0x3c>)
 800faee:	1b64      	subs	r4, r4, r5
 800faf0:	10a4      	asrs	r4, r4, #2
 800faf2:	2600      	movs	r6, #0
 800faf4:	42a6      	cmp	r6, r4
 800faf6:	d109      	bne.n	800fb0c <__libc_init_array+0x24>
 800faf8:	4d0b      	ldr	r5, [pc, #44]	; (800fb28 <__libc_init_array+0x40>)
 800fafa:	4c0c      	ldr	r4, [pc, #48]	; (800fb2c <__libc_init_array+0x44>)
 800fafc:	f001 ffce 	bl	8011a9c <_init>
 800fb00:	1b64      	subs	r4, r4, r5
 800fb02:	10a4      	asrs	r4, r4, #2
 800fb04:	2600      	movs	r6, #0
 800fb06:	42a6      	cmp	r6, r4
 800fb08:	d105      	bne.n	800fb16 <__libc_init_array+0x2e>
 800fb0a:	bd70      	pop	{r4, r5, r6, pc}
 800fb0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb10:	4798      	blx	r3
 800fb12:	3601      	adds	r6, #1
 800fb14:	e7ee      	b.n	800faf4 <__libc_init_array+0xc>
 800fb16:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb1a:	4798      	blx	r3
 800fb1c:	3601      	adds	r6, #1
 800fb1e:	e7f2      	b.n	800fb06 <__libc_init_array+0x1e>
 800fb20:	080120fc 	.word	0x080120fc
 800fb24:	080120fc 	.word	0x080120fc
 800fb28:	080120fc 	.word	0x080120fc
 800fb2c:	08012100 	.word	0x08012100

0800fb30 <__retarget_lock_acquire_recursive>:
 800fb30:	4770      	bx	lr

0800fb32 <__retarget_lock_release_recursive>:
 800fb32:	4770      	bx	lr

0800fb34 <memcpy>:
 800fb34:	440a      	add	r2, r1
 800fb36:	4291      	cmp	r1, r2
 800fb38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fb3c:	d100      	bne.n	800fb40 <memcpy+0xc>
 800fb3e:	4770      	bx	lr
 800fb40:	b510      	push	{r4, lr}
 800fb42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb4a:	4291      	cmp	r1, r2
 800fb4c:	d1f9      	bne.n	800fb42 <memcpy+0xe>
 800fb4e:	bd10      	pop	{r4, pc}

0800fb50 <quorem>:
 800fb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb54:	6903      	ldr	r3, [r0, #16]
 800fb56:	690c      	ldr	r4, [r1, #16]
 800fb58:	42a3      	cmp	r3, r4
 800fb5a:	4607      	mov	r7, r0
 800fb5c:	db7e      	blt.n	800fc5c <quorem+0x10c>
 800fb5e:	3c01      	subs	r4, #1
 800fb60:	f101 0814 	add.w	r8, r1, #20
 800fb64:	f100 0514 	add.w	r5, r0, #20
 800fb68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb6c:	9301      	str	r3, [sp, #4]
 800fb6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb76:	3301      	adds	r3, #1
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb82:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb86:	d331      	bcc.n	800fbec <quorem+0x9c>
 800fb88:	f04f 0e00 	mov.w	lr, #0
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	46ac      	mov	ip, r5
 800fb90:	46f2      	mov	sl, lr
 800fb92:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb96:	b293      	uxth	r3, r2
 800fb98:	fb06 e303 	mla	r3, r6, r3, lr
 800fb9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fba0:	0c1a      	lsrs	r2, r3, #16
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	ebaa 0303 	sub.w	r3, sl, r3
 800fba8:	f8dc a000 	ldr.w	sl, [ip]
 800fbac:	fa13 f38a 	uxtah	r3, r3, sl
 800fbb0:	fb06 220e 	mla	r2, r6, lr, r2
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	9b00      	ldr	r3, [sp, #0]
 800fbb8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fbbc:	b292      	uxth	r2, r2
 800fbbe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fbc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbc6:	f8bd 3000 	ldrh.w	r3, [sp]
 800fbca:	4581      	cmp	r9, r0
 800fbcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbd0:	f84c 3b04 	str.w	r3, [ip], #4
 800fbd4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fbd8:	d2db      	bcs.n	800fb92 <quorem+0x42>
 800fbda:	f855 300b 	ldr.w	r3, [r5, fp]
 800fbde:	b92b      	cbnz	r3, 800fbec <quorem+0x9c>
 800fbe0:	9b01      	ldr	r3, [sp, #4]
 800fbe2:	3b04      	subs	r3, #4
 800fbe4:	429d      	cmp	r5, r3
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	d32c      	bcc.n	800fc44 <quorem+0xf4>
 800fbea:	613c      	str	r4, [r7, #16]
 800fbec:	4638      	mov	r0, r7
 800fbee:	f001 f8f1 	bl	8010dd4 <__mcmp>
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	db22      	blt.n	800fc3c <quorem+0xec>
 800fbf6:	3601      	adds	r6, #1
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc00:	f8d1 c000 	ldr.w	ip, [r1]
 800fc04:	b293      	uxth	r3, r2
 800fc06:	1ac3      	subs	r3, r0, r3
 800fc08:	0c12      	lsrs	r2, r2, #16
 800fc0a:	fa13 f38c 	uxtah	r3, r3, ip
 800fc0e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fc12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc1c:	45c1      	cmp	r9, r8
 800fc1e:	f841 3b04 	str.w	r3, [r1], #4
 800fc22:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc26:	d2e9      	bcs.n	800fbfc <quorem+0xac>
 800fc28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc30:	b922      	cbnz	r2, 800fc3c <quorem+0xec>
 800fc32:	3b04      	subs	r3, #4
 800fc34:	429d      	cmp	r5, r3
 800fc36:	461a      	mov	r2, r3
 800fc38:	d30a      	bcc.n	800fc50 <quorem+0x100>
 800fc3a:	613c      	str	r4, [r7, #16]
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	b003      	add	sp, #12
 800fc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc44:	6812      	ldr	r2, [r2, #0]
 800fc46:	3b04      	subs	r3, #4
 800fc48:	2a00      	cmp	r2, #0
 800fc4a:	d1ce      	bne.n	800fbea <quorem+0x9a>
 800fc4c:	3c01      	subs	r4, #1
 800fc4e:	e7c9      	b.n	800fbe4 <quorem+0x94>
 800fc50:	6812      	ldr	r2, [r2, #0]
 800fc52:	3b04      	subs	r3, #4
 800fc54:	2a00      	cmp	r2, #0
 800fc56:	d1f0      	bne.n	800fc3a <quorem+0xea>
 800fc58:	3c01      	subs	r4, #1
 800fc5a:	e7eb      	b.n	800fc34 <quorem+0xe4>
 800fc5c:	2000      	movs	r0, #0
 800fc5e:	e7ee      	b.n	800fc3e <quorem+0xee>

0800fc60 <_dtoa_r>:
 800fc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc64:	ed2d 8b04 	vpush	{d8-d9}
 800fc68:	69c5      	ldr	r5, [r0, #28]
 800fc6a:	b093      	sub	sp, #76	; 0x4c
 800fc6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc70:	ec57 6b10 	vmov	r6, r7, d0
 800fc74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc78:	9107      	str	r1, [sp, #28]
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	920a      	str	r2, [sp, #40]	; 0x28
 800fc7e:	930d      	str	r3, [sp, #52]	; 0x34
 800fc80:	b975      	cbnz	r5, 800fca0 <_dtoa_r+0x40>
 800fc82:	2010      	movs	r0, #16
 800fc84:	f7ff f884 	bl	800ed90 <malloc>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	61e0      	str	r0, [r4, #28]
 800fc8c:	b920      	cbnz	r0, 800fc98 <_dtoa_r+0x38>
 800fc8e:	4bae      	ldr	r3, [pc, #696]	; (800ff48 <_dtoa_r+0x2e8>)
 800fc90:	21ef      	movs	r1, #239	; 0xef
 800fc92:	48ae      	ldr	r0, [pc, #696]	; (800ff4c <_dtoa_r+0x2ec>)
 800fc94:	f001 fbbe 	bl	8011414 <__assert_func>
 800fc98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc9c:	6005      	str	r5, [r0, #0]
 800fc9e:	60c5      	str	r5, [r0, #12]
 800fca0:	69e3      	ldr	r3, [r4, #28]
 800fca2:	6819      	ldr	r1, [r3, #0]
 800fca4:	b151      	cbz	r1, 800fcbc <_dtoa_r+0x5c>
 800fca6:	685a      	ldr	r2, [r3, #4]
 800fca8:	604a      	str	r2, [r1, #4]
 800fcaa:	2301      	movs	r3, #1
 800fcac:	4093      	lsls	r3, r2
 800fcae:	608b      	str	r3, [r1, #8]
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	f000 fe53 	bl	801095c <_Bfree>
 800fcb6:	69e3      	ldr	r3, [r4, #28]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	601a      	str	r2, [r3, #0]
 800fcbc:	1e3b      	subs	r3, r7, #0
 800fcbe:	bfbb      	ittet	lt
 800fcc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fcc4:	9303      	strlt	r3, [sp, #12]
 800fcc6:	2300      	movge	r3, #0
 800fcc8:	2201      	movlt	r2, #1
 800fcca:	bfac      	ite	ge
 800fccc:	f8c8 3000 	strge.w	r3, [r8]
 800fcd0:	f8c8 2000 	strlt.w	r2, [r8]
 800fcd4:	4b9e      	ldr	r3, [pc, #632]	; (800ff50 <_dtoa_r+0x2f0>)
 800fcd6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fcda:	ea33 0308 	bics.w	r3, r3, r8
 800fcde:	d11b      	bne.n	800fd18 <_dtoa_r+0xb8>
 800fce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fce2:	f242 730f 	movw	r3, #9999	; 0x270f
 800fce6:	6013      	str	r3, [r2, #0]
 800fce8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fcec:	4333      	orrs	r3, r6
 800fcee:	f000 8593 	beq.w	8010818 <_dtoa_r+0xbb8>
 800fcf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcf4:	b963      	cbnz	r3, 800fd10 <_dtoa_r+0xb0>
 800fcf6:	4b97      	ldr	r3, [pc, #604]	; (800ff54 <_dtoa_r+0x2f4>)
 800fcf8:	e027      	b.n	800fd4a <_dtoa_r+0xea>
 800fcfa:	4b97      	ldr	r3, [pc, #604]	; (800ff58 <_dtoa_r+0x2f8>)
 800fcfc:	9300      	str	r3, [sp, #0]
 800fcfe:	3308      	adds	r3, #8
 800fd00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd02:	6013      	str	r3, [r2, #0]
 800fd04:	9800      	ldr	r0, [sp, #0]
 800fd06:	b013      	add	sp, #76	; 0x4c
 800fd08:	ecbd 8b04 	vpop	{d8-d9}
 800fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd10:	4b90      	ldr	r3, [pc, #576]	; (800ff54 <_dtoa_r+0x2f4>)
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	3303      	adds	r3, #3
 800fd16:	e7f3      	b.n	800fd00 <_dtoa_r+0xa0>
 800fd18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	ec51 0b17 	vmov	r0, r1, d7
 800fd22:	eeb0 8a47 	vmov.f32	s16, s14
 800fd26:	eef0 8a67 	vmov.f32	s17, s15
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f7f0 fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd30:	4681      	mov	r9, r0
 800fd32:	b160      	cbz	r0, 800fd4e <_dtoa_r+0xee>
 800fd34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd36:	2301      	movs	r3, #1
 800fd38:	6013      	str	r3, [r2, #0]
 800fd3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	f000 8568 	beq.w	8010812 <_dtoa_r+0xbb2>
 800fd42:	4b86      	ldr	r3, [pc, #536]	; (800ff5c <_dtoa_r+0x2fc>)
 800fd44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd46:	6013      	str	r3, [r2, #0]
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	e7da      	b.n	800fd04 <_dtoa_r+0xa4>
 800fd4e:	aa10      	add	r2, sp, #64	; 0x40
 800fd50:	a911      	add	r1, sp, #68	; 0x44
 800fd52:	4620      	mov	r0, r4
 800fd54:	eeb0 0a48 	vmov.f32	s0, s16
 800fd58:	eef0 0a68 	vmov.f32	s1, s17
 800fd5c:	f001 f8e0 	bl	8010f20 <__d2b>
 800fd60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fd64:	4682      	mov	sl, r0
 800fd66:	2d00      	cmp	r5, #0
 800fd68:	d07f      	beq.n	800fe6a <_dtoa_r+0x20a>
 800fd6a:	ee18 3a90 	vmov	r3, s17
 800fd6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fd76:	ec51 0b18 	vmov	r0, r1, d8
 800fd7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fd82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fd86:	4619      	mov	r1, r3
 800fd88:	2200      	movs	r2, #0
 800fd8a:	4b75      	ldr	r3, [pc, #468]	; (800ff60 <_dtoa_r+0x300>)
 800fd8c:	f7f0 fa84 	bl	8000298 <__aeabi_dsub>
 800fd90:	a367      	add	r3, pc, #412	; (adr r3, 800ff30 <_dtoa_r+0x2d0>)
 800fd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd96:	f7f0 fc37 	bl	8000608 <__aeabi_dmul>
 800fd9a:	a367      	add	r3, pc, #412	; (adr r3, 800ff38 <_dtoa_r+0x2d8>)
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	f7f0 fa7c 	bl	800029c <__adddf3>
 800fda4:	4606      	mov	r6, r0
 800fda6:	4628      	mov	r0, r5
 800fda8:	460f      	mov	r7, r1
 800fdaa:	f7f0 fbc3 	bl	8000534 <__aeabi_i2d>
 800fdae:	a364      	add	r3, pc, #400	; (adr r3, 800ff40 <_dtoa_r+0x2e0>)
 800fdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb4:	f7f0 fc28 	bl	8000608 <__aeabi_dmul>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	460b      	mov	r3, r1
 800fdbc:	4630      	mov	r0, r6
 800fdbe:	4639      	mov	r1, r7
 800fdc0:	f7f0 fa6c 	bl	800029c <__adddf3>
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	460f      	mov	r7, r1
 800fdc8:	f7f0 fece 	bl	8000b68 <__aeabi_d2iz>
 800fdcc:	2200      	movs	r2, #0
 800fdce:	4683      	mov	fp, r0
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	f7f0 fe89 	bl	8000aec <__aeabi_dcmplt>
 800fdda:	b148      	cbz	r0, 800fdf0 <_dtoa_r+0x190>
 800fddc:	4658      	mov	r0, fp
 800fdde:	f7f0 fba9 	bl	8000534 <__aeabi_i2d>
 800fde2:	4632      	mov	r2, r6
 800fde4:	463b      	mov	r3, r7
 800fde6:	f7f0 fe77 	bl	8000ad8 <__aeabi_dcmpeq>
 800fdea:	b908      	cbnz	r0, 800fdf0 <_dtoa_r+0x190>
 800fdec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800fdf0:	f1bb 0f16 	cmp.w	fp, #22
 800fdf4:	d857      	bhi.n	800fea6 <_dtoa_r+0x246>
 800fdf6:	4b5b      	ldr	r3, [pc, #364]	; (800ff64 <_dtoa_r+0x304>)
 800fdf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe00:	ec51 0b18 	vmov	r0, r1, d8
 800fe04:	f7f0 fe72 	bl	8000aec <__aeabi_dcmplt>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d04e      	beq.n	800feaa <_dtoa_r+0x24a>
 800fe0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800fe10:	2300      	movs	r3, #0
 800fe12:	930c      	str	r3, [sp, #48]	; 0x30
 800fe14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe16:	1b5b      	subs	r3, r3, r5
 800fe18:	1e5a      	subs	r2, r3, #1
 800fe1a:	bf45      	ittet	mi
 800fe1c:	f1c3 0301 	rsbmi	r3, r3, #1
 800fe20:	9305      	strmi	r3, [sp, #20]
 800fe22:	2300      	movpl	r3, #0
 800fe24:	2300      	movmi	r3, #0
 800fe26:	9206      	str	r2, [sp, #24]
 800fe28:	bf54      	ite	pl
 800fe2a:	9305      	strpl	r3, [sp, #20]
 800fe2c:	9306      	strmi	r3, [sp, #24]
 800fe2e:	f1bb 0f00 	cmp.w	fp, #0
 800fe32:	db3c      	blt.n	800feae <_dtoa_r+0x24e>
 800fe34:	9b06      	ldr	r3, [sp, #24]
 800fe36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fe3a:	445b      	add	r3, fp
 800fe3c:	9306      	str	r3, [sp, #24]
 800fe3e:	2300      	movs	r3, #0
 800fe40:	9308      	str	r3, [sp, #32]
 800fe42:	9b07      	ldr	r3, [sp, #28]
 800fe44:	2b09      	cmp	r3, #9
 800fe46:	d868      	bhi.n	800ff1a <_dtoa_r+0x2ba>
 800fe48:	2b05      	cmp	r3, #5
 800fe4a:	bfc4      	itt	gt
 800fe4c:	3b04      	subgt	r3, #4
 800fe4e:	9307      	strgt	r3, [sp, #28]
 800fe50:	9b07      	ldr	r3, [sp, #28]
 800fe52:	f1a3 0302 	sub.w	r3, r3, #2
 800fe56:	bfcc      	ite	gt
 800fe58:	2500      	movgt	r5, #0
 800fe5a:	2501      	movle	r5, #1
 800fe5c:	2b03      	cmp	r3, #3
 800fe5e:	f200 8085 	bhi.w	800ff6c <_dtoa_r+0x30c>
 800fe62:	e8df f003 	tbb	[pc, r3]
 800fe66:	3b2e      	.short	0x3b2e
 800fe68:	5839      	.short	0x5839
 800fe6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fe6e:	441d      	add	r5, r3
 800fe70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fe74:	2b20      	cmp	r3, #32
 800fe76:	bfc1      	itttt	gt
 800fe78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fe7c:	fa08 f803 	lslgt.w	r8, r8, r3
 800fe80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fe84:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fe88:	bfd6      	itet	le
 800fe8a:	f1c3 0320 	rsble	r3, r3, #32
 800fe8e:	ea48 0003 	orrgt.w	r0, r8, r3
 800fe92:	fa06 f003 	lslle.w	r0, r6, r3
 800fe96:	f7f0 fb3d 	bl	8000514 <__aeabi_ui2d>
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fea0:	3d01      	subs	r5, #1
 800fea2:	920e      	str	r2, [sp, #56]	; 0x38
 800fea4:	e76f      	b.n	800fd86 <_dtoa_r+0x126>
 800fea6:	2301      	movs	r3, #1
 800fea8:	e7b3      	b.n	800fe12 <_dtoa_r+0x1b2>
 800feaa:	900c      	str	r0, [sp, #48]	; 0x30
 800feac:	e7b2      	b.n	800fe14 <_dtoa_r+0x1b4>
 800feae:	9b05      	ldr	r3, [sp, #20]
 800feb0:	eba3 030b 	sub.w	r3, r3, fp
 800feb4:	9305      	str	r3, [sp, #20]
 800feb6:	f1cb 0300 	rsb	r3, fp, #0
 800feba:	9308      	str	r3, [sp, #32]
 800febc:	2300      	movs	r3, #0
 800febe:	930b      	str	r3, [sp, #44]	; 0x2c
 800fec0:	e7bf      	b.n	800fe42 <_dtoa_r+0x1e2>
 800fec2:	2300      	movs	r3, #0
 800fec4:	9309      	str	r3, [sp, #36]	; 0x24
 800fec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fec8:	2b00      	cmp	r3, #0
 800feca:	dc52      	bgt.n	800ff72 <_dtoa_r+0x312>
 800fecc:	2301      	movs	r3, #1
 800fece:	9301      	str	r3, [sp, #4]
 800fed0:	9304      	str	r3, [sp, #16]
 800fed2:	461a      	mov	r2, r3
 800fed4:	920a      	str	r2, [sp, #40]	; 0x28
 800fed6:	e00b      	b.n	800fef0 <_dtoa_r+0x290>
 800fed8:	2301      	movs	r3, #1
 800feda:	e7f3      	b.n	800fec4 <_dtoa_r+0x264>
 800fedc:	2300      	movs	r3, #0
 800fede:	9309      	str	r3, [sp, #36]	; 0x24
 800fee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fee2:	445b      	add	r3, fp
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	3301      	adds	r3, #1
 800fee8:	2b01      	cmp	r3, #1
 800feea:	9304      	str	r3, [sp, #16]
 800feec:	bfb8      	it	lt
 800feee:	2301      	movlt	r3, #1
 800fef0:	69e0      	ldr	r0, [r4, #28]
 800fef2:	2100      	movs	r1, #0
 800fef4:	2204      	movs	r2, #4
 800fef6:	f102 0614 	add.w	r6, r2, #20
 800fefa:	429e      	cmp	r6, r3
 800fefc:	d93d      	bls.n	800ff7a <_dtoa_r+0x31a>
 800fefe:	6041      	str	r1, [r0, #4]
 800ff00:	4620      	mov	r0, r4
 800ff02:	f000 fceb 	bl	80108dc <_Balloc>
 800ff06:	9000      	str	r0, [sp, #0]
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d139      	bne.n	800ff80 <_dtoa_r+0x320>
 800ff0c:	4b16      	ldr	r3, [pc, #88]	; (800ff68 <_dtoa_r+0x308>)
 800ff0e:	4602      	mov	r2, r0
 800ff10:	f240 11af 	movw	r1, #431	; 0x1af
 800ff14:	e6bd      	b.n	800fc92 <_dtoa_r+0x32>
 800ff16:	2301      	movs	r3, #1
 800ff18:	e7e1      	b.n	800fede <_dtoa_r+0x27e>
 800ff1a:	2501      	movs	r5, #1
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	9307      	str	r3, [sp, #28]
 800ff20:	9509      	str	r5, [sp, #36]	; 0x24
 800ff22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff26:	9301      	str	r3, [sp, #4]
 800ff28:	9304      	str	r3, [sp, #16]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	2312      	movs	r3, #18
 800ff2e:	e7d1      	b.n	800fed4 <_dtoa_r+0x274>
 800ff30:	636f4361 	.word	0x636f4361
 800ff34:	3fd287a7 	.word	0x3fd287a7
 800ff38:	8b60c8b3 	.word	0x8b60c8b3
 800ff3c:	3fc68a28 	.word	0x3fc68a28
 800ff40:	509f79fb 	.word	0x509f79fb
 800ff44:	3fd34413 	.word	0x3fd34413
 800ff48:	08011dc1 	.word	0x08011dc1
 800ff4c:	08011dd8 	.word	0x08011dd8
 800ff50:	7ff00000 	.word	0x7ff00000
 800ff54:	08011dbd 	.word	0x08011dbd
 800ff58:	08011db4 	.word	0x08011db4
 800ff5c:	08011d91 	.word	0x08011d91
 800ff60:	3ff80000 	.word	0x3ff80000
 800ff64:	08011ec8 	.word	0x08011ec8
 800ff68:	08011e30 	.word	0x08011e30
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff70:	e7d7      	b.n	800ff22 <_dtoa_r+0x2c2>
 800ff72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff74:	9301      	str	r3, [sp, #4]
 800ff76:	9304      	str	r3, [sp, #16]
 800ff78:	e7ba      	b.n	800fef0 <_dtoa_r+0x290>
 800ff7a:	3101      	adds	r1, #1
 800ff7c:	0052      	lsls	r2, r2, #1
 800ff7e:	e7ba      	b.n	800fef6 <_dtoa_r+0x296>
 800ff80:	69e3      	ldr	r3, [r4, #28]
 800ff82:	9a00      	ldr	r2, [sp, #0]
 800ff84:	601a      	str	r2, [r3, #0]
 800ff86:	9b04      	ldr	r3, [sp, #16]
 800ff88:	2b0e      	cmp	r3, #14
 800ff8a:	f200 80a8 	bhi.w	80100de <_dtoa_r+0x47e>
 800ff8e:	2d00      	cmp	r5, #0
 800ff90:	f000 80a5 	beq.w	80100de <_dtoa_r+0x47e>
 800ff94:	f1bb 0f00 	cmp.w	fp, #0
 800ff98:	dd38      	ble.n	801000c <_dtoa_r+0x3ac>
 800ff9a:	4bc0      	ldr	r3, [pc, #768]	; (801029c <_dtoa_r+0x63c>)
 800ff9c:	f00b 020f 	and.w	r2, fp, #15
 800ffa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffa4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ffa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ffac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ffb0:	d019      	beq.n	800ffe6 <_dtoa_r+0x386>
 800ffb2:	4bbb      	ldr	r3, [pc, #748]	; (80102a0 <_dtoa_r+0x640>)
 800ffb4:	ec51 0b18 	vmov	r0, r1, d8
 800ffb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ffbc:	f7f0 fc4e 	bl	800085c <__aeabi_ddiv>
 800ffc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffc4:	f008 080f 	and.w	r8, r8, #15
 800ffc8:	2503      	movs	r5, #3
 800ffca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80102a0 <_dtoa_r+0x640>
 800ffce:	f1b8 0f00 	cmp.w	r8, #0
 800ffd2:	d10a      	bne.n	800ffea <_dtoa_r+0x38a>
 800ffd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffd8:	4632      	mov	r2, r6
 800ffda:	463b      	mov	r3, r7
 800ffdc:	f7f0 fc3e 	bl	800085c <__aeabi_ddiv>
 800ffe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffe4:	e02b      	b.n	801003e <_dtoa_r+0x3de>
 800ffe6:	2502      	movs	r5, #2
 800ffe8:	e7ef      	b.n	800ffca <_dtoa_r+0x36a>
 800ffea:	f018 0f01 	tst.w	r8, #1
 800ffee:	d008      	beq.n	8010002 <_dtoa_r+0x3a2>
 800fff0:	4630      	mov	r0, r6
 800fff2:	4639      	mov	r1, r7
 800fff4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fff8:	f7f0 fb06 	bl	8000608 <__aeabi_dmul>
 800fffc:	3501      	adds	r5, #1
 800fffe:	4606      	mov	r6, r0
 8010000:	460f      	mov	r7, r1
 8010002:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010006:	f109 0908 	add.w	r9, r9, #8
 801000a:	e7e0      	b.n	800ffce <_dtoa_r+0x36e>
 801000c:	f000 809f 	beq.w	801014e <_dtoa_r+0x4ee>
 8010010:	f1cb 0600 	rsb	r6, fp, #0
 8010014:	4ba1      	ldr	r3, [pc, #644]	; (801029c <_dtoa_r+0x63c>)
 8010016:	4fa2      	ldr	r7, [pc, #648]	; (80102a0 <_dtoa_r+0x640>)
 8010018:	f006 020f 	and.w	r2, r6, #15
 801001c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010024:	ec51 0b18 	vmov	r0, r1, d8
 8010028:	f7f0 faee 	bl	8000608 <__aeabi_dmul>
 801002c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010030:	1136      	asrs	r6, r6, #4
 8010032:	2300      	movs	r3, #0
 8010034:	2502      	movs	r5, #2
 8010036:	2e00      	cmp	r6, #0
 8010038:	d17e      	bne.n	8010138 <_dtoa_r+0x4d8>
 801003a:	2b00      	cmp	r3, #0
 801003c:	d1d0      	bne.n	800ffe0 <_dtoa_r+0x380>
 801003e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010040:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010044:	2b00      	cmp	r3, #0
 8010046:	f000 8084 	beq.w	8010152 <_dtoa_r+0x4f2>
 801004a:	4b96      	ldr	r3, [pc, #600]	; (80102a4 <_dtoa_r+0x644>)
 801004c:	2200      	movs	r2, #0
 801004e:	4640      	mov	r0, r8
 8010050:	4649      	mov	r1, r9
 8010052:	f7f0 fd4b 	bl	8000aec <__aeabi_dcmplt>
 8010056:	2800      	cmp	r0, #0
 8010058:	d07b      	beq.n	8010152 <_dtoa_r+0x4f2>
 801005a:	9b04      	ldr	r3, [sp, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d078      	beq.n	8010152 <_dtoa_r+0x4f2>
 8010060:	9b01      	ldr	r3, [sp, #4]
 8010062:	2b00      	cmp	r3, #0
 8010064:	dd39      	ble.n	80100da <_dtoa_r+0x47a>
 8010066:	4b90      	ldr	r3, [pc, #576]	; (80102a8 <_dtoa_r+0x648>)
 8010068:	2200      	movs	r2, #0
 801006a:	4640      	mov	r0, r8
 801006c:	4649      	mov	r1, r9
 801006e:	f7f0 facb 	bl	8000608 <__aeabi_dmul>
 8010072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010076:	9e01      	ldr	r6, [sp, #4]
 8010078:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801007c:	3501      	adds	r5, #1
 801007e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010082:	4628      	mov	r0, r5
 8010084:	f7f0 fa56 	bl	8000534 <__aeabi_i2d>
 8010088:	4642      	mov	r2, r8
 801008a:	464b      	mov	r3, r9
 801008c:	f7f0 fabc 	bl	8000608 <__aeabi_dmul>
 8010090:	4b86      	ldr	r3, [pc, #536]	; (80102ac <_dtoa_r+0x64c>)
 8010092:	2200      	movs	r2, #0
 8010094:	f7f0 f902 	bl	800029c <__adddf3>
 8010098:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801009c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100a0:	9303      	str	r3, [sp, #12]
 80100a2:	2e00      	cmp	r6, #0
 80100a4:	d158      	bne.n	8010158 <_dtoa_r+0x4f8>
 80100a6:	4b82      	ldr	r3, [pc, #520]	; (80102b0 <_dtoa_r+0x650>)
 80100a8:	2200      	movs	r2, #0
 80100aa:	4640      	mov	r0, r8
 80100ac:	4649      	mov	r1, r9
 80100ae:	f7f0 f8f3 	bl	8000298 <__aeabi_dsub>
 80100b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100b6:	4680      	mov	r8, r0
 80100b8:	4689      	mov	r9, r1
 80100ba:	f7f0 fd35 	bl	8000b28 <__aeabi_dcmpgt>
 80100be:	2800      	cmp	r0, #0
 80100c0:	f040 8296 	bne.w	80105f0 <_dtoa_r+0x990>
 80100c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80100c8:	4640      	mov	r0, r8
 80100ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100ce:	4649      	mov	r1, r9
 80100d0:	f7f0 fd0c 	bl	8000aec <__aeabi_dcmplt>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	f040 8289 	bne.w	80105ec <_dtoa_r+0x98c>
 80100da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80100de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f2c0 814e 	blt.w	8010382 <_dtoa_r+0x722>
 80100e6:	f1bb 0f0e 	cmp.w	fp, #14
 80100ea:	f300 814a 	bgt.w	8010382 <_dtoa_r+0x722>
 80100ee:	4b6b      	ldr	r3, [pc, #428]	; (801029c <_dtoa_r+0x63c>)
 80100f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80100f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f280 80dc 	bge.w	80102b8 <_dtoa_r+0x658>
 8010100:	9b04      	ldr	r3, [sp, #16]
 8010102:	2b00      	cmp	r3, #0
 8010104:	f300 80d8 	bgt.w	80102b8 <_dtoa_r+0x658>
 8010108:	f040 826f 	bne.w	80105ea <_dtoa_r+0x98a>
 801010c:	4b68      	ldr	r3, [pc, #416]	; (80102b0 <_dtoa_r+0x650>)
 801010e:	2200      	movs	r2, #0
 8010110:	4640      	mov	r0, r8
 8010112:	4649      	mov	r1, r9
 8010114:	f7f0 fa78 	bl	8000608 <__aeabi_dmul>
 8010118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801011c:	f7f0 fcfa 	bl	8000b14 <__aeabi_dcmpge>
 8010120:	9e04      	ldr	r6, [sp, #16]
 8010122:	4637      	mov	r7, r6
 8010124:	2800      	cmp	r0, #0
 8010126:	f040 8245 	bne.w	80105b4 <_dtoa_r+0x954>
 801012a:	9d00      	ldr	r5, [sp, #0]
 801012c:	2331      	movs	r3, #49	; 0x31
 801012e:	f805 3b01 	strb.w	r3, [r5], #1
 8010132:	f10b 0b01 	add.w	fp, fp, #1
 8010136:	e241      	b.n	80105bc <_dtoa_r+0x95c>
 8010138:	07f2      	lsls	r2, r6, #31
 801013a:	d505      	bpl.n	8010148 <_dtoa_r+0x4e8>
 801013c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010140:	f7f0 fa62 	bl	8000608 <__aeabi_dmul>
 8010144:	3501      	adds	r5, #1
 8010146:	2301      	movs	r3, #1
 8010148:	1076      	asrs	r6, r6, #1
 801014a:	3708      	adds	r7, #8
 801014c:	e773      	b.n	8010036 <_dtoa_r+0x3d6>
 801014e:	2502      	movs	r5, #2
 8010150:	e775      	b.n	801003e <_dtoa_r+0x3de>
 8010152:	9e04      	ldr	r6, [sp, #16]
 8010154:	465f      	mov	r7, fp
 8010156:	e792      	b.n	801007e <_dtoa_r+0x41e>
 8010158:	9900      	ldr	r1, [sp, #0]
 801015a:	4b50      	ldr	r3, [pc, #320]	; (801029c <_dtoa_r+0x63c>)
 801015c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010160:	4431      	add	r1, r6
 8010162:	9102      	str	r1, [sp, #8]
 8010164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010166:	eeb0 9a47 	vmov.f32	s18, s14
 801016a:	eef0 9a67 	vmov.f32	s19, s15
 801016e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010172:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010176:	2900      	cmp	r1, #0
 8010178:	d044      	beq.n	8010204 <_dtoa_r+0x5a4>
 801017a:	494e      	ldr	r1, [pc, #312]	; (80102b4 <_dtoa_r+0x654>)
 801017c:	2000      	movs	r0, #0
 801017e:	f7f0 fb6d 	bl	800085c <__aeabi_ddiv>
 8010182:	ec53 2b19 	vmov	r2, r3, d9
 8010186:	f7f0 f887 	bl	8000298 <__aeabi_dsub>
 801018a:	9d00      	ldr	r5, [sp, #0]
 801018c:	ec41 0b19 	vmov	d9, r0, r1
 8010190:	4649      	mov	r1, r9
 8010192:	4640      	mov	r0, r8
 8010194:	f7f0 fce8 	bl	8000b68 <__aeabi_d2iz>
 8010198:	4606      	mov	r6, r0
 801019a:	f7f0 f9cb 	bl	8000534 <__aeabi_i2d>
 801019e:	4602      	mov	r2, r0
 80101a0:	460b      	mov	r3, r1
 80101a2:	4640      	mov	r0, r8
 80101a4:	4649      	mov	r1, r9
 80101a6:	f7f0 f877 	bl	8000298 <__aeabi_dsub>
 80101aa:	3630      	adds	r6, #48	; 0x30
 80101ac:	f805 6b01 	strb.w	r6, [r5], #1
 80101b0:	ec53 2b19 	vmov	r2, r3, d9
 80101b4:	4680      	mov	r8, r0
 80101b6:	4689      	mov	r9, r1
 80101b8:	f7f0 fc98 	bl	8000aec <__aeabi_dcmplt>
 80101bc:	2800      	cmp	r0, #0
 80101be:	d164      	bne.n	801028a <_dtoa_r+0x62a>
 80101c0:	4642      	mov	r2, r8
 80101c2:	464b      	mov	r3, r9
 80101c4:	4937      	ldr	r1, [pc, #220]	; (80102a4 <_dtoa_r+0x644>)
 80101c6:	2000      	movs	r0, #0
 80101c8:	f7f0 f866 	bl	8000298 <__aeabi_dsub>
 80101cc:	ec53 2b19 	vmov	r2, r3, d9
 80101d0:	f7f0 fc8c 	bl	8000aec <__aeabi_dcmplt>
 80101d4:	2800      	cmp	r0, #0
 80101d6:	f040 80b6 	bne.w	8010346 <_dtoa_r+0x6e6>
 80101da:	9b02      	ldr	r3, [sp, #8]
 80101dc:	429d      	cmp	r5, r3
 80101de:	f43f af7c 	beq.w	80100da <_dtoa_r+0x47a>
 80101e2:	4b31      	ldr	r3, [pc, #196]	; (80102a8 <_dtoa_r+0x648>)
 80101e4:	ec51 0b19 	vmov	r0, r1, d9
 80101e8:	2200      	movs	r2, #0
 80101ea:	f7f0 fa0d 	bl	8000608 <__aeabi_dmul>
 80101ee:	4b2e      	ldr	r3, [pc, #184]	; (80102a8 <_dtoa_r+0x648>)
 80101f0:	ec41 0b19 	vmov	d9, r0, r1
 80101f4:	2200      	movs	r2, #0
 80101f6:	4640      	mov	r0, r8
 80101f8:	4649      	mov	r1, r9
 80101fa:	f7f0 fa05 	bl	8000608 <__aeabi_dmul>
 80101fe:	4680      	mov	r8, r0
 8010200:	4689      	mov	r9, r1
 8010202:	e7c5      	b.n	8010190 <_dtoa_r+0x530>
 8010204:	ec51 0b17 	vmov	r0, r1, d7
 8010208:	f7f0 f9fe 	bl	8000608 <__aeabi_dmul>
 801020c:	9b02      	ldr	r3, [sp, #8]
 801020e:	9d00      	ldr	r5, [sp, #0]
 8010210:	930f      	str	r3, [sp, #60]	; 0x3c
 8010212:	ec41 0b19 	vmov	d9, r0, r1
 8010216:	4649      	mov	r1, r9
 8010218:	4640      	mov	r0, r8
 801021a:	f7f0 fca5 	bl	8000b68 <__aeabi_d2iz>
 801021e:	4606      	mov	r6, r0
 8010220:	f7f0 f988 	bl	8000534 <__aeabi_i2d>
 8010224:	3630      	adds	r6, #48	; 0x30
 8010226:	4602      	mov	r2, r0
 8010228:	460b      	mov	r3, r1
 801022a:	4640      	mov	r0, r8
 801022c:	4649      	mov	r1, r9
 801022e:	f7f0 f833 	bl	8000298 <__aeabi_dsub>
 8010232:	f805 6b01 	strb.w	r6, [r5], #1
 8010236:	9b02      	ldr	r3, [sp, #8]
 8010238:	429d      	cmp	r5, r3
 801023a:	4680      	mov	r8, r0
 801023c:	4689      	mov	r9, r1
 801023e:	f04f 0200 	mov.w	r2, #0
 8010242:	d124      	bne.n	801028e <_dtoa_r+0x62e>
 8010244:	4b1b      	ldr	r3, [pc, #108]	; (80102b4 <_dtoa_r+0x654>)
 8010246:	ec51 0b19 	vmov	r0, r1, d9
 801024a:	f7f0 f827 	bl	800029c <__adddf3>
 801024e:	4602      	mov	r2, r0
 8010250:	460b      	mov	r3, r1
 8010252:	4640      	mov	r0, r8
 8010254:	4649      	mov	r1, r9
 8010256:	f7f0 fc67 	bl	8000b28 <__aeabi_dcmpgt>
 801025a:	2800      	cmp	r0, #0
 801025c:	d173      	bne.n	8010346 <_dtoa_r+0x6e6>
 801025e:	ec53 2b19 	vmov	r2, r3, d9
 8010262:	4914      	ldr	r1, [pc, #80]	; (80102b4 <_dtoa_r+0x654>)
 8010264:	2000      	movs	r0, #0
 8010266:	f7f0 f817 	bl	8000298 <__aeabi_dsub>
 801026a:	4602      	mov	r2, r0
 801026c:	460b      	mov	r3, r1
 801026e:	4640      	mov	r0, r8
 8010270:	4649      	mov	r1, r9
 8010272:	f7f0 fc3b 	bl	8000aec <__aeabi_dcmplt>
 8010276:	2800      	cmp	r0, #0
 8010278:	f43f af2f 	beq.w	80100da <_dtoa_r+0x47a>
 801027c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801027e:	1e6b      	subs	r3, r5, #1
 8010280:	930f      	str	r3, [sp, #60]	; 0x3c
 8010282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010286:	2b30      	cmp	r3, #48	; 0x30
 8010288:	d0f8      	beq.n	801027c <_dtoa_r+0x61c>
 801028a:	46bb      	mov	fp, r7
 801028c:	e04a      	b.n	8010324 <_dtoa_r+0x6c4>
 801028e:	4b06      	ldr	r3, [pc, #24]	; (80102a8 <_dtoa_r+0x648>)
 8010290:	f7f0 f9ba 	bl	8000608 <__aeabi_dmul>
 8010294:	4680      	mov	r8, r0
 8010296:	4689      	mov	r9, r1
 8010298:	e7bd      	b.n	8010216 <_dtoa_r+0x5b6>
 801029a:	bf00      	nop
 801029c:	08011ec8 	.word	0x08011ec8
 80102a0:	08011ea0 	.word	0x08011ea0
 80102a4:	3ff00000 	.word	0x3ff00000
 80102a8:	40240000 	.word	0x40240000
 80102ac:	401c0000 	.word	0x401c0000
 80102b0:	40140000 	.word	0x40140000
 80102b4:	3fe00000 	.word	0x3fe00000
 80102b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80102bc:	9d00      	ldr	r5, [sp, #0]
 80102be:	4642      	mov	r2, r8
 80102c0:	464b      	mov	r3, r9
 80102c2:	4630      	mov	r0, r6
 80102c4:	4639      	mov	r1, r7
 80102c6:	f7f0 fac9 	bl	800085c <__aeabi_ddiv>
 80102ca:	f7f0 fc4d 	bl	8000b68 <__aeabi_d2iz>
 80102ce:	9001      	str	r0, [sp, #4]
 80102d0:	f7f0 f930 	bl	8000534 <__aeabi_i2d>
 80102d4:	4642      	mov	r2, r8
 80102d6:	464b      	mov	r3, r9
 80102d8:	f7f0 f996 	bl	8000608 <__aeabi_dmul>
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	4630      	mov	r0, r6
 80102e2:	4639      	mov	r1, r7
 80102e4:	f7ef ffd8 	bl	8000298 <__aeabi_dsub>
 80102e8:	9e01      	ldr	r6, [sp, #4]
 80102ea:	9f04      	ldr	r7, [sp, #16]
 80102ec:	3630      	adds	r6, #48	; 0x30
 80102ee:	f805 6b01 	strb.w	r6, [r5], #1
 80102f2:	9e00      	ldr	r6, [sp, #0]
 80102f4:	1bae      	subs	r6, r5, r6
 80102f6:	42b7      	cmp	r7, r6
 80102f8:	4602      	mov	r2, r0
 80102fa:	460b      	mov	r3, r1
 80102fc:	d134      	bne.n	8010368 <_dtoa_r+0x708>
 80102fe:	f7ef ffcd 	bl	800029c <__adddf3>
 8010302:	4642      	mov	r2, r8
 8010304:	464b      	mov	r3, r9
 8010306:	4606      	mov	r6, r0
 8010308:	460f      	mov	r7, r1
 801030a:	f7f0 fc0d 	bl	8000b28 <__aeabi_dcmpgt>
 801030e:	b9c8      	cbnz	r0, 8010344 <_dtoa_r+0x6e4>
 8010310:	4642      	mov	r2, r8
 8010312:	464b      	mov	r3, r9
 8010314:	4630      	mov	r0, r6
 8010316:	4639      	mov	r1, r7
 8010318:	f7f0 fbde 	bl	8000ad8 <__aeabi_dcmpeq>
 801031c:	b110      	cbz	r0, 8010324 <_dtoa_r+0x6c4>
 801031e:	9b01      	ldr	r3, [sp, #4]
 8010320:	07db      	lsls	r3, r3, #31
 8010322:	d40f      	bmi.n	8010344 <_dtoa_r+0x6e4>
 8010324:	4651      	mov	r1, sl
 8010326:	4620      	mov	r0, r4
 8010328:	f000 fb18 	bl	801095c <_Bfree>
 801032c:	2300      	movs	r3, #0
 801032e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010330:	702b      	strb	r3, [r5, #0]
 8010332:	f10b 0301 	add.w	r3, fp, #1
 8010336:	6013      	str	r3, [r2, #0]
 8010338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801033a:	2b00      	cmp	r3, #0
 801033c:	f43f ace2 	beq.w	800fd04 <_dtoa_r+0xa4>
 8010340:	601d      	str	r5, [r3, #0]
 8010342:	e4df      	b.n	800fd04 <_dtoa_r+0xa4>
 8010344:	465f      	mov	r7, fp
 8010346:	462b      	mov	r3, r5
 8010348:	461d      	mov	r5, r3
 801034a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801034e:	2a39      	cmp	r2, #57	; 0x39
 8010350:	d106      	bne.n	8010360 <_dtoa_r+0x700>
 8010352:	9a00      	ldr	r2, [sp, #0]
 8010354:	429a      	cmp	r2, r3
 8010356:	d1f7      	bne.n	8010348 <_dtoa_r+0x6e8>
 8010358:	9900      	ldr	r1, [sp, #0]
 801035a:	2230      	movs	r2, #48	; 0x30
 801035c:	3701      	adds	r7, #1
 801035e:	700a      	strb	r2, [r1, #0]
 8010360:	781a      	ldrb	r2, [r3, #0]
 8010362:	3201      	adds	r2, #1
 8010364:	701a      	strb	r2, [r3, #0]
 8010366:	e790      	b.n	801028a <_dtoa_r+0x62a>
 8010368:	4ba3      	ldr	r3, [pc, #652]	; (80105f8 <_dtoa_r+0x998>)
 801036a:	2200      	movs	r2, #0
 801036c:	f7f0 f94c 	bl	8000608 <__aeabi_dmul>
 8010370:	2200      	movs	r2, #0
 8010372:	2300      	movs	r3, #0
 8010374:	4606      	mov	r6, r0
 8010376:	460f      	mov	r7, r1
 8010378:	f7f0 fbae 	bl	8000ad8 <__aeabi_dcmpeq>
 801037c:	2800      	cmp	r0, #0
 801037e:	d09e      	beq.n	80102be <_dtoa_r+0x65e>
 8010380:	e7d0      	b.n	8010324 <_dtoa_r+0x6c4>
 8010382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010384:	2a00      	cmp	r2, #0
 8010386:	f000 80ca 	beq.w	801051e <_dtoa_r+0x8be>
 801038a:	9a07      	ldr	r2, [sp, #28]
 801038c:	2a01      	cmp	r2, #1
 801038e:	f300 80ad 	bgt.w	80104ec <_dtoa_r+0x88c>
 8010392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010394:	2a00      	cmp	r2, #0
 8010396:	f000 80a5 	beq.w	80104e4 <_dtoa_r+0x884>
 801039a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801039e:	9e08      	ldr	r6, [sp, #32]
 80103a0:	9d05      	ldr	r5, [sp, #20]
 80103a2:	9a05      	ldr	r2, [sp, #20]
 80103a4:	441a      	add	r2, r3
 80103a6:	9205      	str	r2, [sp, #20]
 80103a8:	9a06      	ldr	r2, [sp, #24]
 80103aa:	2101      	movs	r1, #1
 80103ac:	441a      	add	r2, r3
 80103ae:	4620      	mov	r0, r4
 80103b0:	9206      	str	r2, [sp, #24]
 80103b2:	f000 fb89 	bl	8010ac8 <__i2b>
 80103b6:	4607      	mov	r7, r0
 80103b8:	b165      	cbz	r5, 80103d4 <_dtoa_r+0x774>
 80103ba:	9b06      	ldr	r3, [sp, #24]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	dd09      	ble.n	80103d4 <_dtoa_r+0x774>
 80103c0:	42ab      	cmp	r3, r5
 80103c2:	9a05      	ldr	r2, [sp, #20]
 80103c4:	bfa8      	it	ge
 80103c6:	462b      	movge	r3, r5
 80103c8:	1ad2      	subs	r2, r2, r3
 80103ca:	9205      	str	r2, [sp, #20]
 80103cc:	9a06      	ldr	r2, [sp, #24]
 80103ce:	1aed      	subs	r5, r5, r3
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	9306      	str	r3, [sp, #24]
 80103d4:	9b08      	ldr	r3, [sp, #32]
 80103d6:	b1f3      	cbz	r3, 8010416 <_dtoa_r+0x7b6>
 80103d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 80a3 	beq.w	8010526 <_dtoa_r+0x8c6>
 80103e0:	2e00      	cmp	r6, #0
 80103e2:	dd10      	ble.n	8010406 <_dtoa_r+0x7a6>
 80103e4:	4639      	mov	r1, r7
 80103e6:	4632      	mov	r2, r6
 80103e8:	4620      	mov	r0, r4
 80103ea:	f000 fc2d 	bl	8010c48 <__pow5mult>
 80103ee:	4652      	mov	r2, sl
 80103f0:	4601      	mov	r1, r0
 80103f2:	4607      	mov	r7, r0
 80103f4:	4620      	mov	r0, r4
 80103f6:	f000 fb7d 	bl	8010af4 <__multiply>
 80103fa:	4651      	mov	r1, sl
 80103fc:	4680      	mov	r8, r0
 80103fe:	4620      	mov	r0, r4
 8010400:	f000 faac 	bl	801095c <_Bfree>
 8010404:	46c2      	mov	sl, r8
 8010406:	9b08      	ldr	r3, [sp, #32]
 8010408:	1b9a      	subs	r2, r3, r6
 801040a:	d004      	beq.n	8010416 <_dtoa_r+0x7b6>
 801040c:	4651      	mov	r1, sl
 801040e:	4620      	mov	r0, r4
 8010410:	f000 fc1a 	bl	8010c48 <__pow5mult>
 8010414:	4682      	mov	sl, r0
 8010416:	2101      	movs	r1, #1
 8010418:	4620      	mov	r0, r4
 801041a:	f000 fb55 	bl	8010ac8 <__i2b>
 801041e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010420:	2b00      	cmp	r3, #0
 8010422:	4606      	mov	r6, r0
 8010424:	f340 8081 	ble.w	801052a <_dtoa_r+0x8ca>
 8010428:	461a      	mov	r2, r3
 801042a:	4601      	mov	r1, r0
 801042c:	4620      	mov	r0, r4
 801042e:	f000 fc0b 	bl	8010c48 <__pow5mult>
 8010432:	9b07      	ldr	r3, [sp, #28]
 8010434:	2b01      	cmp	r3, #1
 8010436:	4606      	mov	r6, r0
 8010438:	dd7a      	ble.n	8010530 <_dtoa_r+0x8d0>
 801043a:	f04f 0800 	mov.w	r8, #0
 801043e:	6933      	ldr	r3, [r6, #16]
 8010440:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010444:	6918      	ldr	r0, [r3, #16]
 8010446:	f000 faf1 	bl	8010a2c <__hi0bits>
 801044a:	f1c0 0020 	rsb	r0, r0, #32
 801044e:	9b06      	ldr	r3, [sp, #24]
 8010450:	4418      	add	r0, r3
 8010452:	f010 001f 	ands.w	r0, r0, #31
 8010456:	f000 8094 	beq.w	8010582 <_dtoa_r+0x922>
 801045a:	f1c0 0320 	rsb	r3, r0, #32
 801045e:	2b04      	cmp	r3, #4
 8010460:	f340 8085 	ble.w	801056e <_dtoa_r+0x90e>
 8010464:	9b05      	ldr	r3, [sp, #20]
 8010466:	f1c0 001c 	rsb	r0, r0, #28
 801046a:	4403      	add	r3, r0
 801046c:	9305      	str	r3, [sp, #20]
 801046e:	9b06      	ldr	r3, [sp, #24]
 8010470:	4403      	add	r3, r0
 8010472:	4405      	add	r5, r0
 8010474:	9306      	str	r3, [sp, #24]
 8010476:	9b05      	ldr	r3, [sp, #20]
 8010478:	2b00      	cmp	r3, #0
 801047a:	dd05      	ble.n	8010488 <_dtoa_r+0x828>
 801047c:	4651      	mov	r1, sl
 801047e:	461a      	mov	r2, r3
 8010480:	4620      	mov	r0, r4
 8010482:	f000 fc3b 	bl	8010cfc <__lshift>
 8010486:	4682      	mov	sl, r0
 8010488:	9b06      	ldr	r3, [sp, #24]
 801048a:	2b00      	cmp	r3, #0
 801048c:	dd05      	ble.n	801049a <_dtoa_r+0x83a>
 801048e:	4631      	mov	r1, r6
 8010490:	461a      	mov	r2, r3
 8010492:	4620      	mov	r0, r4
 8010494:	f000 fc32 	bl	8010cfc <__lshift>
 8010498:	4606      	mov	r6, r0
 801049a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801049c:	2b00      	cmp	r3, #0
 801049e:	d072      	beq.n	8010586 <_dtoa_r+0x926>
 80104a0:	4631      	mov	r1, r6
 80104a2:	4650      	mov	r0, sl
 80104a4:	f000 fc96 	bl	8010dd4 <__mcmp>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	da6c      	bge.n	8010586 <_dtoa_r+0x926>
 80104ac:	2300      	movs	r3, #0
 80104ae:	4651      	mov	r1, sl
 80104b0:	220a      	movs	r2, #10
 80104b2:	4620      	mov	r0, r4
 80104b4:	f000 fa74 	bl	80109a0 <__multadd>
 80104b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80104be:	4682      	mov	sl, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f000 81b0 	beq.w	8010826 <_dtoa_r+0xbc6>
 80104c6:	2300      	movs	r3, #0
 80104c8:	4639      	mov	r1, r7
 80104ca:	220a      	movs	r2, #10
 80104cc:	4620      	mov	r0, r4
 80104ce:	f000 fa67 	bl	80109a0 <__multadd>
 80104d2:	9b01      	ldr	r3, [sp, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	4607      	mov	r7, r0
 80104d8:	f300 8096 	bgt.w	8010608 <_dtoa_r+0x9a8>
 80104dc:	9b07      	ldr	r3, [sp, #28]
 80104de:	2b02      	cmp	r3, #2
 80104e0:	dc59      	bgt.n	8010596 <_dtoa_r+0x936>
 80104e2:	e091      	b.n	8010608 <_dtoa_r+0x9a8>
 80104e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80104ea:	e758      	b.n	801039e <_dtoa_r+0x73e>
 80104ec:	9b04      	ldr	r3, [sp, #16]
 80104ee:	1e5e      	subs	r6, r3, #1
 80104f0:	9b08      	ldr	r3, [sp, #32]
 80104f2:	42b3      	cmp	r3, r6
 80104f4:	bfbf      	itttt	lt
 80104f6:	9b08      	ldrlt	r3, [sp, #32]
 80104f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80104fa:	9608      	strlt	r6, [sp, #32]
 80104fc:	1af3      	sublt	r3, r6, r3
 80104fe:	bfb4      	ite	lt
 8010500:	18d2      	addlt	r2, r2, r3
 8010502:	1b9e      	subge	r6, r3, r6
 8010504:	9b04      	ldr	r3, [sp, #16]
 8010506:	bfbc      	itt	lt
 8010508:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801050a:	2600      	movlt	r6, #0
 801050c:	2b00      	cmp	r3, #0
 801050e:	bfb7      	itett	lt
 8010510:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010514:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010518:	1a9d      	sublt	r5, r3, r2
 801051a:	2300      	movlt	r3, #0
 801051c:	e741      	b.n	80103a2 <_dtoa_r+0x742>
 801051e:	9e08      	ldr	r6, [sp, #32]
 8010520:	9d05      	ldr	r5, [sp, #20]
 8010522:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010524:	e748      	b.n	80103b8 <_dtoa_r+0x758>
 8010526:	9a08      	ldr	r2, [sp, #32]
 8010528:	e770      	b.n	801040c <_dtoa_r+0x7ac>
 801052a:	9b07      	ldr	r3, [sp, #28]
 801052c:	2b01      	cmp	r3, #1
 801052e:	dc19      	bgt.n	8010564 <_dtoa_r+0x904>
 8010530:	9b02      	ldr	r3, [sp, #8]
 8010532:	b9bb      	cbnz	r3, 8010564 <_dtoa_r+0x904>
 8010534:	9b03      	ldr	r3, [sp, #12]
 8010536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801053a:	b99b      	cbnz	r3, 8010564 <_dtoa_r+0x904>
 801053c:	9b03      	ldr	r3, [sp, #12]
 801053e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010542:	0d1b      	lsrs	r3, r3, #20
 8010544:	051b      	lsls	r3, r3, #20
 8010546:	b183      	cbz	r3, 801056a <_dtoa_r+0x90a>
 8010548:	9b05      	ldr	r3, [sp, #20]
 801054a:	3301      	adds	r3, #1
 801054c:	9305      	str	r3, [sp, #20]
 801054e:	9b06      	ldr	r3, [sp, #24]
 8010550:	3301      	adds	r3, #1
 8010552:	9306      	str	r3, [sp, #24]
 8010554:	f04f 0801 	mov.w	r8, #1
 8010558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801055a:	2b00      	cmp	r3, #0
 801055c:	f47f af6f 	bne.w	801043e <_dtoa_r+0x7de>
 8010560:	2001      	movs	r0, #1
 8010562:	e774      	b.n	801044e <_dtoa_r+0x7ee>
 8010564:	f04f 0800 	mov.w	r8, #0
 8010568:	e7f6      	b.n	8010558 <_dtoa_r+0x8f8>
 801056a:	4698      	mov	r8, r3
 801056c:	e7f4      	b.n	8010558 <_dtoa_r+0x8f8>
 801056e:	d082      	beq.n	8010476 <_dtoa_r+0x816>
 8010570:	9a05      	ldr	r2, [sp, #20]
 8010572:	331c      	adds	r3, #28
 8010574:	441a      	add	r2, r3
 8010576:	9205      	str	r2, [sp, #20]
 8010578:	9a06      	ldr	r2, [sp, #24]
 801057a:	441a      	add	r2, r3
 801057c:	441d      	add	r5, r3
 801057e:	9206      	str	r2, [sp, #24]
 8010580:	e779      	b.n	8010476 <_dtoa_r+0x816>
 8010582:	4603      	mov	r3, r0
 8010584:	e7f4      	b.n	8010570 <_dtoa_r+0x910>
 8010586:	9b04      	ldr	r3, [sp, #16]
 8010588:	2b00      	cmp	r3, #0
 801058a:	dc37      	bgt.n	80105fc <_dtoa_r+0x99c>
 801058c:	9b07      	ldr	r3, [sp, #28]
 801058e:	2b02      	cmp	r3, #2
 8010590:	dd34      	ble.n	80105fc <_dtoa_r+0x99c>
 8010592:	9b04      	ldr	r3, [sp, #16]
 8010594:	9301      	str	r3, [sp, #4]
 8010596:	9b01      	ldr	r3, [sp, #4]
 8010598:	b963      	cbnz	r3, 80105b4 <_dtoa_r+0x954>
 801059a:	4631      	mov	r1, r6
 801059c:	2205      	movs	r2, #5
 801059e:	4620      	mov	r0, r4
 80105a0:	f000 f9fe 	bl	80109a0 <__multadd>
 80105a4:	4601      	mov	r1, r0
 80105a6:	4606      	mov	r6, r0
 80105a8:	4650      	mov	r0, sl
 80105aa:	f000 fc13 	bl	8010dd4 <__mcmp>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	f73f adbb 	bgt.w	801012a <_dtoa_r+0x4ca>
 80105b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b6:	9d00      	ldr	r5, [sp, #0]
 80105b8:	ea6f 0b03 	mvn.w	fp, r3
 80105bc:	f04f 0800 	mov.w	r8, #0
 80105c0:	4631      	mov	r1, r6
 80105c2:	4620      	mov	r0, r4
 80105c4:	f000 f9ca 	bl	801095c <_Bfree>
 80105c8:	2f00      	cmp	r7, #0
 80105ca:	f43f aeab 	beq.w	8010324 <_dtoa_r+0x6c4>
 80105ce:	f1b8 0f00 	cmp.w	r8, #0
 80105d2:	d005      	beq.n	80105e0 <_dtoa_r+0x980>
 80105d4:	45b8      	cmp	r8, r7
 80105d6:	d003      	beq.n	80105e0 <_dtoa_r+0x980>
 80105d8:	4641      	mov	r1, r8
 80105da:	4620      	mov	r0, r4
 80105dc:	f000 f9be 	bl	801095c <_Bfree>
 80105e0:	4639      	mov	r1, r7
 80105e2:	4620      	mov	r0, r4
 80105e4:	f000 f9ba 	bl	801095c <_Bfree>
 80105e8:	e69c      	b.n	8010324 <_dtoa_r+0x6c4>
 80105ea:	2600      	movs	r6, #0
 80105ec:	4637      	mov	r7, r6
 80105ee:	e7e1      	b.n	80105b4 <_dtoa_r+0x954>
 80105f0:	46bb      	mov	fp, r7
 80105f2:	4637      	mov	r7, r6
 80105f4:	e599      	b.n	801012a <_dtoa_r+0x4ca>
 80105f6:	bf00      	nop
 80105f8:	40240000 	.word	0x40240000
 80105fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f000 80c8 	beq.w	8010794 <_dtoa_r+0xb34>
 8010604:	9b04      	ldr	r3, [sp, #16]
 8010606:	9301      	str	r3, [sp, #4]
 8010608:	2d00      	cmp	r5, #0
 801060a:	dd05      	ble.n	8010618 <_dtoa_r+0x9b8>
 801060c:	4639      	mov	r1, r7
 801060e:	462a      	mov	r2, r5
 8010610:	4620      	mov	r0, r4
 8010612:	f000 fb73 	bl	8010cfc <__lshift>
 8010616:	4607      	mov	r7, r0
 8010618:	f1b8 0f00 	cmp.w	r8, #0
 801061c:	d05b      	beq.n	80106d6 <_dtoa_r+0xa76>
 801061e:	6879      	ldr	r1, [r7, #4]
 8010620:	4620      	mov	r0, r4
 8010622:	f000 f95b 	bl	80108dc <_Balloc>
 8010626:	4605      	mov	r5, r0
 8010628:	b928      	cbnz	r0, 8010636 <_dtoa_r+0x9d6>
 801062a:	4b83      	ldr	r3, [pc, #524]	; (8010838 <_dtoa_r+0xbd8>)
 801062c:	4602      	mov	r2, r0
 801062e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010632:	f7ff bb2e 	b.w	800fc92 <_dtoa_r+0x32>
 8010636:	693a      	ldr	r2, [r7, #16]
 8010638:	3202      	adds	r2, #2
 801063a:	0092      	lsls	r2, r2, #2
 801063c:	f107 010c 	add.w	r1, r7, #12
 8010640:	300c      	adds	r0, #12
 8010642:	f7ff fa77 	bl	800fb34 <memcpy>
 8010646:	2201      	movs	r2, #1
 8010648:	4629      	mov	r1, r5
 801064a:	4620      	mov	r0, r4
 801064c:	f000 fb56 	bl	8010cfc <__lshift>
 8010650:	9b00      	ldr	r3, [sp, #0]
 8010652:	3301      	adds	r3, #1
 8010654:	9304      	str	r3, [sp, #16]
 8010656:	e9dd 2300 	ldrd	r2, r3, [sp]
 801065a:	4413      	add	r3, r2
 801065c:	9308      	str	r3, [sp, #32]
 801065e:	9b02      	ldr	r3, [sp, #8]
 8010660:	f003 0301 	and.w	r3, r3, #1
 8010664:	46b8      	mov	r8, r7
 8010666:	9306      	str	r3, [sp, #24]
 8010668:	4607      	mov	r7, r0
 801066a:	9b04      	ldr	r3, [sp, #16]
 801066c:	4631      	mov	r1, r6
 801066e:	3b01      	subs	r3, #1
 8010670:	4650      	mov	r0, sl
 8010672:	9301      	str	r3, [sp, #4]
 8010674:	f7ff fa6c 	bl	800fb50 <quorem>
 8010678:	4641      	mov	r1, r8
 801067a:	9002      	str	r0, [sp, #8]
 801067c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010680:	4650      	mov	r0, sl
 8010682:	f000 fba7 	bl	8010dd4 <__mcmp>
 8010686:	463a      	mov	r2, r7
 8010688:	9005      	str	r0, [sp, #20]
 801068a:	4631      	mov	r1, r6
 801068c:	4620      	mov	r0, r4
 801068e:	f000 fbbd 	bl	8010e0c <__mdiff>
 8010692:	68c2      	ldr	r2, [r0, #12]
 8010694:	4605      	mov	r5, r0
 8010696:	bb02      	cbnz	r2, 80106da <_dtoa_r+0xa7a>
 8010698:	4601      	mov	r1, r0
 801069a:	4650      	mov	r0, sl
 801069c:	f000 fb9a 	bl	8010dd4 <__mcmp>
 80106a0:	4602      	mov	r2, r0
 80106a2:	4629      	mov	r1, r5
 80106a4:	4620      	mov	r0, r4
 80106a6:	9209      	str	r2, [sp, #36]	; 0x24
 80106a8:	f000 f958 	bl	801095c <_Bfree>
 80106ac:	9b07      	ldr	r3, [sp, #28]
 80106ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106b0:	9d04      	ldr	r5, [sp, #16]
 80106b2:	ea43 0102 	orr.w	r1, r3, r2
 80106b6:	9b06      	ldr	r3, [sp, #24]
 80106b8:	4319      	orrs	r1, r3
 80106ba:	d110      	bne.n	80106de <_dtoa_r+0xa7e>
 80106bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80106c0:	d029      	beq.n	8010716 <_dtoa_r+0xab6>
 80106c2:	9b05      	ldr	r3, [sp, #20]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	dd02      	ble.n	80106ce <_dtoa_r+0xa6e>
 80106c8:	9b02      	ldr	r3, [sp, #8]
 80106ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80106ce:	9b01      	ldr	r3, [sp, #4]
 80106d0:	f883 9000 	strb.w	r9, [r3]
 80106d4:	e774      	b.n	80105c0 <_dtoa_r+0x960>
 80106d6:	4638      	mov	r0, r7
 80106d8:	e7ba      	b.n	8010650 <_dtoa_r+0x9f0>
 80106da:	2201      	movs	r2, #1
 80106dc:	e7e1      	b.n	80106a2 <_dtoa_r+0xa42>
 80106de:	9b05      	ldr	r3, [sp, #20]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	db04      	blt.n	80106ee <_dtoa_r+0xa8e>
 80106e4:	9907      	ldr	r1, [sp, #28]
 80106e6:	430b      	orrs	r3, r1
 80106e8:	9906      	ldr	r1, [sp, #24]
 80106ea:	430b      	orrs	r3, r1
 80106ec:	d120      	bne.n	8010730 <_dtoa_r+0xad0>
 80106ee:	2a00      	cmp	r2, #0
 80106f0:	dded      	ble.n	80106ce <_dtoa_r+0xa6e>
 80106f2:	4651      	mov	r1, sl
 80106f4:	2201      	movs	r2, #1
 80106f6:	4620      	mov	r0, r4
 80106f8:	f000 fb00 	bl	8010cfc <__lshift>
 80106fc:	4631      	mov	r1, r6
 80106fe:	4682      	mov	sl, r0
 8010700:	f000 fb68 	bl	8010dd4 <__mcmp>
 8010704:	2800      	cmp	r0, #0
 8010706:	dc03      	bgt.n	8010710 <_dtoa_r+0xab0>
 8010708:	d1e1      	bne.n	80106ce <_dtoa_r+0xa6e>
 801070a:	f019 0f01 	tst.w	r9, #1
 801070e:	d0de      	beq.n	80106ce <_dtoa_r+0xa6e>
 8010710:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010714:	d1d8      	bne.n	80106c8 <_dtoa_r+0xa68>
 8010716:	9a01      	ldr	r2, [sp, #4]
 8010718:	2339      	movs	r3, #57	; 0x39
 801071a:	7013      	strb	r3, [r2, #0]
 801071c:	462b      	mov	r3, r5
 801071e:	461d      	mov	r5, r3
 8010720:	3b01      	subs	r3, #1
 8010722:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010726:	2a39      	cmp	r2, #57	; 0x39
 8010728:	d06c      	beq.n	8010804 <_dtoa_r+0xba4>
 801072a:	3201      	adds	r2, #1
 801072c:	701a      	strb	r2, [r3, #0]
 801072e:	e747      	b.n	80105c0 <_dtoa_r+0x960>
 8010730:	2a00      	cmp	r2, #0
 8010732:	dd07      	ble.n	8010744 <_dtoa_r+0xae4>
 8010734:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010738:	d0ed      	beq.n	8010716 <_dtoa_r+0xab6>
 801073a:	9a01      	ldr	r2, [sp, #4]
 801073c:	f109 0301 	add.w	r3, r9, #1
 8010740:	7013      	strb	r3, [r2, #0]
 8010742:	e73d      	b.n	80105c0 <_dtoa_r+0x960>
 8010744:	9b04      	ldr	r3, [sp, #16]
 8010746:	9a08      	ldr	r2, [sp, #32]
 8010748:	f803 9c01 	strb.w	r9, [r3, #-1]
 801074c:	4293      	cmp	r3, r2
 801074e:	d043      	beq.n	80107d8 <_dtoa_r+0xb78>
 8010750:	4651      	mov	r1, sl
 8010752:	2300      	movs	r3, #0
 8010754:	220a      	movs	r2, #10
 8010756:	4620      	mov	r0, r4
 8010758:	f000 f922 	bl	80109a0 <__multadd>
 801075c:	45b8      	cmp	r8, r7
 801075e:	4682      	mov	sl, r0
 8010760:	f04f 0300 	mov.w	r3, #0
 8010764:	f04f 020a 	mov.w	r2, #10
 8010768:	4641      	mov	r1, r8
 801076a:	4620      	mov	r0, r4
 801076c:	d107      	bne.n	801077e <_dtoa_r+0xb1e>
 801076e:	f000 f917 	bl	80109a0 <__multadd>
 8010772:	4680      	mov	r8, r0
 8010774:	4607      	mov	r7, r0
 8010776:	9b04      	ldr	r3, [sp, #16]
 8010778:	3301      	adds	r3, #1
 801077a:	9304      	str	r3, [sp, #16]
 801077c:	e775      	b.n	801066a <_dtoa_r+0xa0a>
 801077e:	f000 f90f 	bl	80109a0 <__multadd>
 8010782:	4639      	mov	r1, r7
 8010784:	4680      	mov	r8, r0
 8010786:	2300      	movs	r3, #0
 8010788:	220a      	movs	r2, #10
 801078a:	4620      	mov	r0, r4
 801078c:	f000 f908 	bl	80109a0 <__multadd>
 8010790:	4607      	mov	r7, r0
 8010792:	e7f0      	b.n	8010776 <_dtoa_r+0xb16>
 8010794:	9b04      	ldr	r3, [sp, #16]
 8010796:	9301      	str	r3, [sp, #4]
 8010798:	9d00      	ldr	r5, [sp, #0]
 801079a:	4631      	mov	r1, r6
 801079c:	4650      	mov	r0, sl
 801079e:	f7ff f9d7 	bl	800fb50 <quorem>
 80107a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80107a6:	9b00      	ldr	r3, [sp, #0]
 80107a8:	f805 9b01 	strb.w	r9, [r5], #1
 80107ac:	1aea      	subs	r2, r5, r3
 80107ae:	9b01      	ldr	r3, [sp, #4]
 80107b0:	4293      	cmp	r3, r2
 80107b2:	dd07      	ble.n	80107c4 <_dtoa_r+0xb64>
 80107b4:	4651      	mov	r1, sl
 80107b6:	2300      	movs	r3, #0
 80107b8:	220a      	movs	r2, #10
 80107ba:	4620      	mov	r0, r4
 80107bc:	f000 f8f0 	bl	80109a0 <__multadd>
 80107c0:	4682      	mov	sl, r0
 80107c2:	e7ea      	b.n	801079a <_dtoa_r+0xb3a>
 80107c4:	9b01      	ldr	r3, [sp, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	bfc8      	it	gt
 80107ca:	461d      	movgt	r5, r3
 80107cc:	9b00      	ldr	r3, [sp, #0]
 80107ce:	bfd8      	it	le
 80107d0:	2501      	movle	r5, #1
 80107d2:	441d      	add	r5, r3
 80107d4:	f04f 0800 	mov.w	r8, #0
 80107d8:	4651      	mov	r1, sl
 80107da:	2201      	movs	r2, #1
 80107dc:	4620      	mov	r0, r4
 80107de:	f000 fa8d 	bl	8010cfc <__lshift>
 80107e2:	4631      	mov	r1, r6
 80107e4:	4682      	mov	sl, r0
 80107e6:	f000 faf5 	bl	8010dd4 <__mcmp>
 80107ea:	2800      	cmp	r0, #0
 80107ec:	dc96      	bgt.n	801071c <_dtoa_r+0xabc>
 80107ee:	d102      	bne.n	80107f6 <_dtoa_r+0xb96>
 80107f0:	f019 0f01 	tst.w	r9, #1
 80107f4:	d192      	bne.n	801071c <_dtoa_r+0xabc>
 80107f6:	462b      	mov	r3, r5
 80107f8:	461d      	mov	r5, r3
 80107fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107fe:	2a30      	cmp	r2, #48	; 0x30
 8010800:	d0fa      	beq.n	80107f8 <_dtoa_r+0xb98>
 8010802:	e6dd      	b.n	80105c0 <_dtoa_r+0x960>
 8010804:	9a00      	ldr	r2, [sp, #0]
 8010806:	429a      	cmp	r2, r3
 8010808:	d189      	bne.n	801071e <_dtoa_r+0xabe>
 801080a:	f10b 0b01 	add.w	fp, fp, #1
 801080e:	2331      	movs	r3, #49	; 0x31
 8010810:	e796      	b.n	8010740 <_dtoa_r+0xae0>
 8010812:	4b0a      	ldr	r3, [pc, #40]	; (801083c <_dtoa_r+0xbdc>)
 8010814:	f7ff ba99 	b.w	800fd4a <_dtoa_r+0xea>
 8010818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801081a:	2b00      	cmp	r3, #0
 801081c:	f47f aa6d 	bne.w	800fcfa <_dtoa_r+0x9a>
 8010820:	4b07      	ldr	r3, [pc, #28]	; (8010840 <_dtoa_r+0xbe0>)
 8010822:	f7ff ba92 	b.w	800fd4a <_dtoa_r+0xea>
 8010826:	9b01      	ldr	r3, [sp, #4]
 8010828:	2b00      	cmp	r3, #0
 801082a:	dcb5      	bgt.n	8010798 <_dtoa_r+0xb38>
 801082c:	9b07      	ldr	r3, [sp, #28]
 801082e:	2b02      	cmp	r3, #2
 8010830:	f73f aeb1 	bgt.w	8010596 <_dtoa_r+0x936>
 8010834:	e7b0      	b.n	8010798 <_dtoa_r+0xb38>
 8010836:	bf00      	nop
 8010838:	08011e30 	.word	0x08011e30
 801083c:	08011d90 	.word	0x08011d90
 8010840:	08011db4 	.word	0x08011db4

08010844 <_free_r>:
 8010844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010846:	2900      	cmp	r1, #0
 8010848:	d044      	beq.n	80108d4 <_free_r+0x90>
 801084a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801084e:	9001      	str	r0, [sp, #4]
 8010850:	2b00      	cmp	r3, #0
 8010852:	f1a1 0404 	sub.w	r4, r1, #4
 8010856:	bfb8      	it	lt
 8010858:	18e4      	addlt	r4, r4, r3
 801085a:	f7fe fb49 	bl	800eef0 <__malloc_lock>
 801085e:	4a1e      	ldr	r2, [pc, #120]	; (80108d8 <_free_r+0x94>)
 8010860:	9801      	ldr	r0, [sp, #4]
 8010862:	6813      	ldr	r3, [r2, #0]
 8010864:	b933      	cbnz	r3, 8010874 <_free_r+0x30>
 8010866:	6063      	str	r3, [r4, #4]
 8010868:	6014      	str	r4, [r2, #0]
 801086a:	b003      	add	sp, #12
 801086c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010870:	f7fe bb44 	b.w	800eefc <__malloc_unlock>
 8010874:	42a3      	cmp	r3, r4
 8010876:	d908      	bls.n	801088a <_free_r+0x46>
 8010878:	6825      	ldr	r5, [r4, #0]
 801087a:	1961      	adds	r1, r4, r5
 801087c:	428b      	cmp	r3, r1
 801087e:	bf01      	itttt	eq
 8010880:	6819      	ldreq	r1, [r3, #0]
 8010882:	685b      	ldreq	r3, [r3, #4]
 8010884:	1949      	addeq	r1, r1, r5
 8010886:	6021      	streq	r1, [r4, #0]
 8010888:	e7ed      	b.n	8010866 <_free_r+0x22>
 801088a:	461a      	mov	r2, r3
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	b10b      	cbz	r3, 8010894 <_free_r+0x50>
 8010890:	42a3      	cmp	r3, r4
 8010892:	d9fa      	bls.n	801088a <_free_r+0x46>
 8010894:	6811      	ldr	r1, [r2, #0]
 8010896:	1855      	adds	r5, r2, r1
 8010898:	42a5      	cmp	r5, r4
 801089a:	d10b      	bne.n	80108b4 <_free_r+0x70>
 801089c:	6824      	ldr	r4, [r4, #0]
 801089e:	4421      	add	r1, r4
 80108a0:	1854      	adds	r4, r2, r1
 80108a2:	42a3      	cmp	r3, r4
 80108a4:	6011      	str	r1, [r2, #0]
 80108a6:	d1e0      	bne.n	801086a <_free_r+0x26>
 80108a8:	681c      	ldr	r4, [r3, #0]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	6053      	str	r3, [r2, #4]
 80108ae:	440c      	add	r4, r1
 80108b0:	6014      	str	r4, [r2, #0]
 80108b2:	e7da      	b.n	801086a <_free_r+0x26>
 80108b4:	d902      	bls.n	80108bc <_free_r+0x78>
 80108b6:	230c      	movs	r3, #12
 80108b8:	6003      	str	r3, [r0, #0]
 80108ba:	e7d6      	b.n	801086a <_free_r+0x26>
 80108bc:	6825      	ldr	r5, [r4, #0]
 80108be:	1961      	adds	r1, r4, r5
 80108c0:	428b      	cmp	r3, r1
 80108c2:	bf04      	itt	eq
 80108c4:	6819      	ldreq	r1, [r3, #0]
 80108c6:	685b      	ldreq	r3, [r3, #4]
 80108c8:	6063      	str	r3, [r4, #4]
 80108ca:	bf04      	itt	eq
 80108cc:	1949      	addeq	r1, r1, r5
 80108ce:	6021      	streq	r1, [r4, #0]
 80108d0:	6054      	str	r4, [r2, #4]
 80108d2:	e7ca      	b.n	801086a <_free_r+0x26>
 80108d4:	b003      	add	sp, #12
 80108d6:	bd30      	pop	{r4, r5, pc}
 80108d8:	2000223c 	.word	0x2000223c

080108dc <_Balloc>:
 80108dc:	b570      	push	{r4, r5, r6, lr}
 80108de:	69c6      	ldr	r6, [r0, #28]
 80108e0:	4604      	mov	r4, r0
 80108e2:	460d      	mov	r5, r1
 80108e4:	b976      	cbnz	r6, 8010904 <_Balloc+0x28>
 80108e6:	2010      	movs	r0, #16
 80108e8:	f7fe fa52 	bl	800ed90 <malloc>
 80108ec:	4602      	mov	r2, r0
 80108ee:	61e0      	str	r0, [r4, #28]
 80108f0:	b920      	cbnz	r0, 80108fc <_Balloc+0x20>
 80108f2:	4b18      	ldr	r3, [pc, #96]	; (8010954 <_Balloc+0x78>)
 80108f4:	4818      	ldr	r0, [pc, #96]	; (8010958 <_Balloc+0x7c>)
 80108f6:	216b      	movs	r1, #107	; 0x6b
 80108f8:	f000 fd8c 	bl	8011414 <__assert_func>
 80108fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010900:	6006      	str	r6, [r0, #0]
 8010902:	60c6      	str	r6, [r0, #12]
 8010904:	69e6      	ldr	r6, [r4, #28]
 8010906:	68f3      	ldr	r3, [r6, #12]
 8010908:	b183      	cbz	r3, 801092c <_Balloc+0x50>
 801090a:	69e3      	ldr	r3, [r4, #28]
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010912:	b9b8      	cbnz	r0, 8010944 <_Balloc+0x68>
 8010914:	2101      	movs	r1, #1
 8010916:	fa01 f605 	lsl.w	r6, r1, r5
 801091a:	1d72      	adds	r2, r6, #5
 801091c:	0092      	lsls	r2, r2, #2
 801091e:	4620      	mov	r0, r4
 8010920:	f000 fd96 	bl	8011450 <_calloc_r>
 8010924:	b160      	cbz	r0, 8010940 <_Balloc+0x64>
 8010926:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801092a:	e00e      	b.n	801094a <_Balloc+0x6e>
 801092c:	2221      	movs	r2, #33	; 0x21
 801092e:	2104      	movs	r1, #4
 8010930:	4620      	mov	r0, r4
 8010932:	f000 fd8d 	bl	8011450 <_calloc_r>
 8010936:	69e3      	ldr	r3, [r4, #28]
 8010938:	60f0      	str	r0, [r6, #12]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d1e4      	bne.n	801090a <_Balloc+0x2e>
 8010940:	2000      	movs	r0, #0
 8010942:	bd70      	pop	{r4, r5, r6, pc}
 8010944:	6802      	ldr	r2, [r0, #0]
 8010946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801094a:	2300      	movs	r3, #0
 801094c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010950:	e7f7      	b.n	8010942 <_Balloc+0x66>
 8010952:	bf00      	nop
 8010954:	08011dc1 	.word	0x08011dc1
 8010958:	08011e41 	.word	0x08011e41

0801095c <_Bfree>:
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	69c6      	ldr	r6, [r0, #28]
 8010960:	4605      	mov	r5, r0
 8010962:	460c      	mov	r4, r1
 8010964:	b976      	cbnz	r6, 8010984 <_Bfree+0x28>
 8010966:	2010      	movs	r0, #16
 8010968:	f7fe fa12 	bl	800ed90 <malloc>
 801096c:	4602      	mov	r2, r0
 801096e:	61e8      	str	r0, [r5, #28]
 8010970:	b920      	cbnz	r0, 801097c <_Bfree+0x20>
 8010972:	4b09      	ldr	r3, [pc, #36]	; (8010998 <_Bfree+0x3c>)
 8010974:	4809      	ldr	r0, [pc, #36]	; (801099c <_Bfree+0x40>)
 8010976:	218f      	movs	r1, #143	; 0x8f
 8010978:	f000 fd4c 	bl	8011414 <__assert_func>
 801097c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010980:	6006      	str	r6, [r0, #0]
 8010982:	60c6      	str	r6, [r0, #12]
 8010984:	b13c      	cbz	r4, 8010996 <_Bfree+0x3a>
 8010986:	69eb      	ldr	r3, [r5, #28]
 8010988:	6862      	ldr	r2, [r4, #4]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010990:	6021      	str	r1, [r4, #0]
 8010992:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010996:	bd70      	pop	{r4, r5, r6, pc}
 8010998:	08011dc1 	.word	0x08011dc1
 801099c:	08011e41 	.word	0x08011e41

080109a0 <__multadd>:
 80109a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a4:	690d      	ldr	r5, [r1, #16]
 80109a6:	4607      	mov	r7, r0
 80109a8:	460c      	mov	r4, r1
 80109aa:	461e      	mov	r6, r3
 80109ac:	f101 0c14 	add.w	ip, r1, #20
 80109b0:	2000      	movs	r0, #0
 80109b2:	f8dc 3000 	ldr.w	r3, [ip]
 80109b6:	b299      	uxth	r1, r3
 80109b8:	fb02 6101 	mla	r1, r2, r1, r6
 80109bc:	0c1e      	lsrs	r6, r3, #16
 80109be:	0c0b      	lsrs	r3, r1, #16
 80109c0:	fb02 3306 	mla	r3, r2, r6, r3
 80109c4:	b289      	uxth	r1, r1
 80109c6:	3001      	adds	r0, #1
 80109c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80109cc:	4285      	cmp	r5, r0
 80109ce:	f84c 1b04 	str.w	r1, [ip], #4
 80109d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80109d6:	dcec      	bgt.n	80109b2 <__multadd+0x12>
 80109d8:	b30e      	cbz	r6, 8010a1e <__multadd+0x7e>
 80109da:	68a3      	ldr	r3, [r4, #8]
 80109dc:	42ab      	cmp	r3, r5
 80109de:	dc19      	bgt.n	8010a14 <__multadd+0x74>
 80109e0:	6861      	ldr	r1, [r4, #4]
 80109e2:	4638      	mov	r0, r7
 80109e4:	3101      	adds	r1, #1
 80109e6:	f7ff ff79 	bl	80108dc <_Balloc>
 80109ea:	4680      	mov	r8, r0
 80109ec:	b928      	cbnz	r0, 80109fa <__multadd+0x5a>
 80109ee:	4602      	mov	r2, r0
 80109f0:	4b0c      	ldr	r3, [pc, #48]	; (8010a24 <__multadd+0x84>)
 80109f2:	480d      	ldr	r0, [pc, #52]	; (8010a28 <__multadd+0x88>)
 80109f4:	21ba      	movs	r1, #186	; 0xba
 80109f6:	f000 fd0d 	bl	8011414 <__assert_func>
 80109fa:	6922      	ldr	r2, [r4, #16]
 80109fc:	3202      	adds	r2, #2
 80109fe:	f104 010c 	add.w	r1, r4, #12
 8010a02:	0092      	lsls	r2, r2, #2
 8010a04:	300c      	adds	r0, #12
 8010a06:	f7ff f895 	bl	800fb34 <memcpy>
 8010a0a:	4621      	mov	r1, r4
 8010a0c:	4638      	mov	r0, r7
 8010a0e:	f7ff ffa5 	bl	801095c <_Bfree>
 8010a12:	4644      	mov	r4, r8
 8010a14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a18:	3501      	adds	r5, #1
 8010a1a:	615e      	str	r6, [r3, #20]
 8010a1c:	6125      	str	r5, [r4, #16]
 8010a1e:	4620      	mov	r0, r4
 8010a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a24:	08011e30 	.word	0x08011e30
 8010a28:	08011e41 	.word	0x08011e41

08010a2c <__hi0bits>:
 8010a2c:	0c03      	lsrs	r3, r0, #16
 8010a2e:	041b      	lsls	r3, r3, #16
 8010a30:	b9d3      	cbnz	r3, 8010a68 <__hi0bits+0x3c>
 8010a32:	0400      	lsls	r0, r0, #16
 8010a34:	2310      	movs	r3, #16
 8010a36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010a3a:	bf04      	itt	eq
 8010a3c:	0200      	lsleq	r0, r0, #8
 8010a3e:	3308      	addeq	r3, #8
 8010a40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010a44:	bf04      	itt	eq
 8010a46:	0100      	lsleq	r0, r0, #4
 8010a48:	3304      	addeq	r3, #4
 8010a4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010a4e:	bf04      	itt	eq
 8010a50:	0080      	lsleq	r0, r0, #2
 8010a52:	3302      	addeq	r3, #2
 8010a54:	2800      	cmp	r0, #0
 8010a56:	db05      	blt.n	8010a64 <__hi0bits+0x38>
 8010a58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a5c:	f103 0301 	add.w	r3, r3, #1
 8010a60:	bf08      	it	eq
 8010a62:	2320      	moveq	r3, #32
 8010a64:	4618      	mov	r0, r3
 8010a66:	4770      	bx	lr
 8010a68:	2300      	movs	r3, #0
 8010a6a:	e7e4      	b.n	8010a36 <__hi0bits+0xa>

08010a6c <__lo0bits>:
 8010a6c:	6803      	ldr	r3, [r0, #0]
 8010a6e:	f013 0207 	ands.w	r2, r3, #7
 8010a72:	d00c      	beq.n	8010a8e <__lo0bits+0x22>
 8010a74:	07d9      	lsls	r1, r3, #31
 8010a76:	d422      	bmi.n	8010abe <__lo0bits+0x52>
 8010a78:	079a      	lsls	r2, r3, #30
 8010a7a:	bf49      	itett	mi
 8010a7c:	085b      	lsrmi	r3, r3, #1
 8010a7e:	089b      	lsrpl	r3, r3, #2
 8010a80:	6003      	strmi	r3, [r0, #0]
 8010a82:	2201      	movmi	r2, #1
 8010a84:	bf5c      	itt	pl
 8010a86:	6003      	strpl	r3, [r0, #0]
 8010a88:	2202      	movpl	r2, #2
 8010a8a:	4610      	mov	r0, r2
 8010a8c:	4770      	bx	lr
 8010a8e:	b299      	uxth	r1, r3
 8010a90:	b909      	cbnz	r1, 8010a96 <__lo0bits+0x2a>
 8010a92:	0c1b      	lsrs	r3, r3, #16
 8010a94:	2210      	movs	r2, #16
 8010a96:	b2d9      	uxtb	r1, r3
 8010a98:	b909      	cbnz	r1, 8010a9e <__lo0bits+0x32>
 8010a9a:	3208      	adds	r2, #8
 8010a9c:	0a1b      	lsrs	r3, r3, #8
 8010a9e:	0719      	lsls	r1, r3, #28
 8010aa0:	bf04      	itt	eq
 8010aa2:	091b      	lsreq	r3, r3, #4
 8010aa4:	3204      	addeq	r2, #4
 8010aa6:	0799      	lsls	r1, r3, #30
 8010aa8:	bf04      	itt	eq
 8010aaa:	089b      	lsreq	r3, r3, #2
 8010aac:	3202      	addeq	r2, #2
 8010aae:	07d9      	lsls	r1, r3, #31
 8010ab0:	d403      	bmi.n	8010aba <__lo0bits+0x4e>
 8010ab2:	085b      	lsrs	r3, r3, #1
 8010ab4:	f102 0201 	add.w	r2, r2, #1
 8010ab8:	d003      	beq.n	8010ac2 <__lo0bits+0x56>
 8010aba:	6003      	str	r3, [r0, #0]
 8010abc:	e7e5      	b.n	8010a8a <__lo0bits+0x1e>
 8010abe:	2200      	movs	r2, #0
 8010ac0:	e7e3      	b.n	8010a8a <__lo0bits+0x1e>
 8010ac2:	2220      	movs	r2, #32
 8010ac4:	e7e1      	b.n	8010a8a <__lo0bits+0x1e>
	...

08010ac8 <__i2b>:
 8010ac8:	b510      	push	{r4, lr}
 8010aca:	460c      	mov	r4, r1
 8010acc:	2101      	movs	r1, #1
 8010ace:	f7ff ff05 	bl	80108dc <_Balloc>
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	b928      	cbnz	r0, 8010ae2 <__i2b+0x1a>
 8010ad6:	4b05      	ldr	r3, [pc, #20]	; (8010aec <__i2b+0x24>)
 8010ad8:	4805      	ldr	r0, [pc, #20]	; (8010af0 <__i2b+0x28>)
 8010ada:	f240 1145 	movw	r1, #325	; 0x145
 8010ade:	f000 fc99 	bl	8011414 <__assert_func>
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	6144      	str	r4, [r0, #20]
 8010ae6:	6103      	str	r3, [r0, #16]
 8010ae8:	bd10      	pop	{r4, pc}
 8010aea:	bf00      	nop
 8010aec:	08011e30 	.word	0x08011e30
 8010af0:	08011e41 	.word	0x08011e41

08010af4 <__multiply>:
 8010af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af8:	4691      	mov	r9, r2
 8010afa:	690a      	ldr	r2, [r1, #16]
 8010afc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	bfb8      	it	lt
 8010b04:	460b      	movlt	r3, r1
 8010b06:	460c      	mov	r4, r1
 8010b08:	bfbc      	itt	lt
 8010b0a:	464c      	movlt	r4, r9
 8010b0c:	4699      	movlt	r9, r3
 8010b0e:	6927      	ldr	r7, [r4, #16]
 8010b10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010b14:	68a3      	ldr	r3, [r4, #8]
 8010b16:	6861      	ldr	r1, [r4, #4]
 8010b18:	eb07 060a 	add.w	r6, r7, sl
 8010b1c:	42b3      	cmp	r3, r6
 8010b1e:	b085      	sub	sp, #20
 8010b20:	bfb8      	it	lt
 8010b22:	3101      	addlt	r1, #1
 8010b24:	f7ff feda 	bl	80108dc <_Balloc>
 8010b28:	b930      	cbnz	r0, 8010b38 <__multiply+0x44>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	4b44      	ldr	r3, [pc, #272]	; (8010c40 <__multiply+0x14c>)
 8010b2e:	4845      	ldr	r0, [pc, #276]	; (8010c44 <__multiply+0x150>)
 8010b30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010b34:	f000 fc6e 	bl	8011414 <__assert_func>
 8010b38:	f100 0514 	add.w	r5, r0, #20
 8010b3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010b40:	462b      	mov	r3, r5
 8010b42:	2200      	movs	r2, #0
 8010b44:	4543      	cmp	r3, r8
 8010b46:	d321      	bcc.n	8010b8c <__multiply+0x98>
 8010b48:	f104 0314 	add.w	r3, r4, #20
 8010b4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010b50:	f109 0314 	add.w	r3, r9, #20
 8010b54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010b58:	9202      	str	r2, [sp, #8]
 8010b5a:	1b3a      	subs	r2, r7, r4
 8010b5c:	3a15      	subs	r2, #21
 8010b5e:	f022 0203 	bic.w	r2, r2, #3
 8010b62:	3204      	adds	r2, #4
 8010b64:	f104 0115 	add.w	r1, r4, #21
 8010b68:	428f      	cmp	r7, r1
 8010b6a:	bf38      	it	cc
 8010b6c:	2204      	movcc	r2, #4
 8010b6e:	9201      	str	r2, [sp, #4]
 8010b70:	9a02      	ldr	r2, [sp, #8]
 8010b72:	9303      	str	r3, [sp, #12]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d80c      	bhi.n	8010b92 <__multiply+0x9e>
 8010b78:	2e00      	cmp	r6, #0
 8010b7a:	dd03      	ble.n	8010b84 <__multiply+0x90>
 8010b7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d05b      	beq.n	8010c3c <__multiply+0x148>
 8010b84:	6106      	str	r6, [r0, #16]
 8010b86:	b005      	add	sp, #20
 8010b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8c:	f843 2b04 	str.w	r2, [r3], #4
 8010b90:	e7d8      	b.n	8010b44 <__multiply+0x50>
 8010b92:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b96:	f1ba 0f00 	cmp.w	sl, #0
 8010b9a:	d024      	beq.n	8010be6 <__multiply+0xf2>
 8010b9c:	f104 0e14 	add.w	lr, r4, #20
 8010ba0:	46a9      	mov	r9, r5
 8010ba2:	f04f 0c00 	mov.w	ip, #0
 8010ba6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010baa:	f8d9 1000 	ldr.w	r1, [r9]
 8010bae:	fa1f fb82 	uxth.w	fp, r2
 8010bb2:	b289      	uxth	r1, r1
 8010bb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8010bb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8010bc0:	4461      	add	r1, ip
 8010bc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010bc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8010bca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010bce:	b289      	uxth	r1, r1
 8010bd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010bd4:	4577      	cmp	r7, lr
 8010bd6:	f849 1b04 	str.w	r1, [r9], #4
 8010bda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010bde:	d8e2      	bhi.n	8010ba6 <__multiply+0xb2>
 8010be0:	9a01      	ldr	r2, [sp, #4]
 8010be2:	f845 c002 	str.w	ip, [r5, r2]
 8010be6:	9a03      	ldr	r2, [sp, #12]
 8010be8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010bec:	3304      	adds	r3, #4
 8010bee:	f1b9 0f00 	cmp.w	r9, #0
 8010bf2:	d021      	beq.n	8010c38 <__multiply+0x144>
 8010bf4:	6829      	ldr	r1, [r5, #0]
 8010bf6:	f104 0c14 	add.w	ip, r4, #20
 8010bfa:	46ae      	mov	lr, r5
 8010bfc:	f04f 0a00 	mov.w	sl, #0
 8010c00:	f8bc b000 	ldrh.w	fp, [ip]
 8010c04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010c08:	fb09 220b 	mla	r2, r9, fp, r2
 8010c0c:	4452      	add	r2, sl
 8010c0e:	b289      	uxth	r1, r1
 8010c10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c14:	f84e 1b04 	str.w	r1, [lr], #4
 8010c18:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010c1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c20:	f8be 1000 	ldrh.w	r1, [lr]
 8010c24:	fb09 110a 	mla	r1, r9, sl, r1
 8010c28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010c2c:	4567      	cmp	r7, ip
 8010c2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c32:	d8e5      	bhi.n	8010c00 <__multiply+0x10c>
 8010c34:	9a01      	ldr	r2, [sp, #4]
 8010c36:	50a9      	str	r1, [r5, r2]
 8010c38:	3504      	adds	r5, #4
 8010c3a:	e799      	b.n	8010b70 <__multiply+0x7c>
 8010c3c:	3e01      	subs	r6, #1
 8010c3e:	e79b      	b.n	8010b78 <__multiply+0x84>
 8010c40:	08011e30 	.word	0x08011e30
 8010c44:	08011e41 	.word	0x08011e41

08010c48 <__pow5mult>:
 8010c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c4c:	4615      	mov	r5, r2
 8010c4e:	f012 0203 	ands.w	r2, r2, #3
 8010c52:	4606      	mov	r6, r0
 8010c54:	460f      	mov	r7, r1
 8010c56:	d007      	beq.n	8010c68 <__pow5mult+0x20>
 8010c58:	4c25      	ldr	r4, [pc, #148]	; (8010cf0 <__pow5mult+0xa8>)
 8010c5a:	3a01      	subs	r2, #1
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c62:	f7ff fe9d 	bl	80109a0 <__multadd>
 8010c66:	4607      	mov	r7, r0
 8010c68:	10ad      	asrs	r5, r5, #2
 8010c6a:	d03d      	beq.n	8010ce8 <__pow5mult+0xa0>
 8010c6c:	69f4      	ldr	r4, [r6, #28]
 8010c6e:	b97c      	cbnz	r4, 8010c90 <__pow5mult+0x48>
 8010c70:	2010      	movs	r0, #16
 8010c72:	f7fe f88d 	bl	800ed90 <malloc>
 8010c76:	4602      	mov	r2, r0
 8010c78:	61f0      	str	r0, [r6, #28]
 8010c7a:	b928      	cbnz	r0, 8010c88 <__pow5mult+0x40>
 8010c7c:	4b1d      	ldr	r3, [pc, #116]	; (8010cf4 <__pow5mult+0xac>)
 8010c7e:	481e      	ldr	r0, [pc, #120]	; (8010cf8 <__pow5mult+0xb0>)
 8010c80:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010c84:	f000 fbc6 	bl	8011414 <__assert_func>
 8010c88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c8c:	6004      	str	r4, [r0, #0]
 8010c8e:	60c4      	str	r4, [r0, #12]
 8010c90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010c94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c98:	b94c      	cbnz	r4, 8010cae <__pow5mult+0x66>
 8010c9a:	f240 2171 	movw	r1, #625	; 0x271
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	f7ff ff12 	bl	8010ac8 <__i2b>
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010caa:	4604      	mov	r4, r0
 8010cac:	6003      	str	r3, [r0, #0]
 8010cae:	f04f 0900 	mov.w	r9, #0
 8010cb2:	07eb      	lsls	r3, r5, #31
 8010cb4:	d50a      	bpl.n	8010ccc <__pow5mult+0x84>
 8010cb6:	4639      	mov	r1, r7
 8010cb8:	4622      	mov	r2, r4
 8010cba:	4630      	mov	r0, r6
 8010cbc:	f7ff ff1a 	bl	8010af4 <__multiply>
 8010cc0:	4639      	mov	r1, r7
 8010cc2:	4680      	mov	r8, r0
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f7ff fe49 	bl	801095c <_Bfree>
 8010cca:	4647      	mov	r7, r8
 8010ccc:	106d      	asrs	r5, r5, #1
 8010cce:	d00b      	beq.n	8010ce8 <__pow5mult+0xa0>
 8010cd0:	6820      	ldr	r0, [r4, #0]
 8010cd2:	b938      	cbnz	r0, 8010ce4 <__pow5mult+0x9c>
 8010cd4:	4622      	mov	r2, r4
 8010cd6:	4621      	mov	r1, r4
 8010cd8:	4630      	mov	r0, r6
 8010cda:	f7ff ff0b 	bl	8010af4 <__multiply>
 8010cde:	6020      	str	r0, [r4, #0]
 8010ce0:	f8c0 9000 	str.w	r9, [r0]
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	e7e4      	b.n	8010cb2 <__pow5mult+0x6a>
 8010ce8:	4638      	mov	r0, r7
 8010cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cee:	bf00      	nop
 8010cf0:	08011f90 	.word	0x08011f90
 8010cf4:	08011dc1 	.word	0x08011dc1
 8010cf8:	08011e41 	.word	0x08011e41

08010cfc <__lshift>:
 8010cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d00:	460c      	mov	r4, r1
 8010d02:	6849      	ldr	r1, [r1, #4]
 8010d04:	6923      	ldr	r3, [r4, #16]
 8010d06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d0a:	68a3      	ldr	r3, [r4, #8]
 8010d0c:	4607      	mov	r7, r0
 8010d0e:	4691      	mov	r9, r2
 8010d10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d14:	f108 0601 	add.w	r6, r8, #1
 8010d18:	42b3      	cmp	r3, r6
 8010d1a:	db0b      	blt.n	8010d34 <__lshift+0x38>
 8010d1c:	4638      	mov	r0, r7
 8010d1e:	f7ff fddd 	bl	80108dc <_Balloc>
 8010d22:	4605      	mov	r5, r0
 8010d24:	b948      	cbnz	r0, 8010d3a <__lshift+0x3e>
 8010d26:	4602      	mov	r2, r0
 8010d28:	4b28      	ldr	r3, [pc, #160]	; (8010dcc <__lshift+0xd0>)
 8010d2a:	4829      	ldr	r0, [pc, #164]	; (8010dd0 <__lshift+0xd4>)
 8010d2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010d30:	f000 fb70 	bl	8011414 <__assert_func>
 8010d34:	3101      	adds	r1, #1
 8010d36:	005b      	lsls	r3, r3, #1
 8010d38:	e7ee      	b.n	8010d18 <__lshift+0x1c>
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	f100 0114 	add.w	r1, r0, #20
 8010d40:	f100 0210 	add.w	r2, r0, #16
 8010d44:	4618      	mov	r0, r3
 8010d46:	4553      	cmp	r3, sl
 8010d48:	db33      	blt.n	8010db2 <__lshift+0xb6>
 8010d4a:	6920      	ldr	r0, [r4, #16]
 8010d4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d50:	f104 0314 	add.w	r3, r4, #20
 8010d54:	f019 091f 	ands.w	r9, r9, #31
 8010d58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d60:	d02b      	beq.n	8010dba <__lshift+0xbe>
 8010d62:	f1c9 0e20 	rsb	lr, r9, #32
 8010d66:	468a      	mov	sl, r1
 8010d68:	2200      	movs	r2, #0
 8010d6a:	6818      	ldr	r0, [r3, #0]
 8010d6c:	fa00 f009 	lsl.w	r0, r0, r9
 8010d70:	4310      	orrs	r0, r2
 8010d72:	f84a 0b04 	str.w	r0, [sl], #4
 8010d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d7a:	459c      	cmp	ip, r3
 8010d7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d80:	d8f3      	bhi.n	8010d6a <__lshift+0x6e>
 8010d82:	ebac 0304 	sub.w	r3, ip, r4
 8010d86:	3b15      	subs	r3, #21
 8010d88:	f023 0303 	bic.w	r3, r3, #3
 8010d8c:	3304      	adds	r3, #4
 8010d8e:	f104 0015 	add.w	r0, r4, #21
 8010d92:	4584      	cmp	ip, r0
 8010d94:	bf38      	it	cc
 8010d96:	2304      	movcc	r3, #4
 8010d98:	50ca      	str	r2, [r1, r3]
 8010d9a:	b10a      	cbz	r2, 8010da0 <__lshift+0xa4>
 8010d9c:	f108 0602 	add.w	r6, r8, #2
 8010da0:	3e01      	subs	r6, #1
 8010da2:	4638      	mov	r0, r7
 8010da4:	612e      	str	r6, [r5, #16]
 8010da6:	4621      	mov	r1, r4
 8010da8:	f7ff fdd8 	bl	801095c <_Bfree>
 8010dac:	4628      	mov	r0, r5
 8010dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010db2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010db6:	3301      	adds	r3, #1
 8010db8:	e7c5      	b.n	8010d46 <__lshift+0x4a>
 8010dba:	3904      	subs	r1, #4
 8010dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010dc4:	459c      	cmp	ip, r3
 8010dc6:	d8f9      	bhi.n	8010dbc <__lshift+0xc0>
 8010dc8:	e7ea      	b.n	8010da0 <__lshift+0xa4>
 8010dca:	bf00      	nop
 8010dcc:	08011e30 	.word	0x08011e30
 8010dd0:	08011e41 	.word	0x08011e41

08010dd4 <__mcmp>:
 8010dd4:	b530      	push	{r4, r5, lr}
 8010dd6:	6902      	ldr	r2, [r0, #16]
 8010dd8:	690c      	ldr	r4, [r1, #16]
 8010dda:	1b12      	subs	r2, r2, r4
 8010ddc:	d10e      	bne.n	8010dfc <__mcmp+0x28>
 8010dde:	f100 0314 	add.w	r3, r0, #20
 8010de2:	3114      	adds	r1, #20
 8010de4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010de8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010dec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010df0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010df4:	42a5      	cmp	r5, r4
 8010df6:	d003      	beq.n	8010e00 <__mcmp+0x2c>
 8010df8:	d305      	bcc.n	8010e06 <__mcmp+0x32>
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	4610      	mov	r0, r2
 8010dfe:	bd30      	pop	{r4, r5, pc}
 8010e00:	4283      	cmp	r3, r0
 8010e02:	d3f3      	bcc.n	8010dec <__mcmp+0x18>
 8010e04:	e7fa      	b.n	8010dfc <__mcmp+0x28>
 8010e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e0a:	e7f7      	b.n	8010dfc <__mcmp+0x28>

08010e0c <__mdiff>:
 8010e0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e10:	460c      	mov	r4, r1
 8010e12:	4606      	mov	r6, r0
 8010e14:	4611      	mov	r1, r2
 8010e16:	4620      	mov	r0, r4
 8010e18:	4690      	mov	r8, r2
 8010e1a:	f7ff ffdb 	bl	8010dd4 <__mcmp>
 8010e1e:	1e05      	subs	r5, r0, #0
 8010e20:	d110      	bne.n	8010e44 <__mdiff+0x38>
 8010e22:	4629      	mov	r1, r5
 8010e24:	4630      	mov	r0, r6
 8010e26:	f7ff fd59 	bl	80108dc <_Balloc>
 8010e2a:	b930      	cbnz	r0, 8010e3a <__mdiff+0x2e>
 8010e2c:	4b3a      	ldr	r3, [pc, #232]	; (8010f18 <__mdiff+0x10c>)
 8010e2e:	4602      	mov	r2, r0
 8010e30:	f240 2137 	movw	r1, #567	; 0x237
 8010e34:	4839      	ldr	r0, [pc, #228]	; (8010f1c <__mdiff+0x110>)
 8010e36:	f000 faed 	bl	8011414 <__assert_func>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e44:	bfa4      	itt	ge
 8010e46:	4643      	movge	r3, r8
 8010e48:	46a0      	movge	r8, r4
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010e50:	bfa6      	itte	ge
 8010e52:	461c      	movge	r4, r3
 8010e54:	2500      	movge	r5, #0
 8010e56:	2501      	movlt	r5, #1
 8010e58:	f7ff fd40 	bl	80108dc <_Balloc>
 8010e5c:	b920      	cbnz	r0, 8010e68 <__mdiff+0x5c>
 8010e5e:	4b2e      	ldr	r3, [pc, #184]	; (8010f18 <__mdiff+0x10c>)
 8010e60:	4602      	mov	r2, r0
 8010e62:	f240 2145 	movw	r1, #581	; 0x245
 8010e66:	e7e5      	b.n	8010e34 <__mdiff+0x28>
 8010e68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010e6c:	6926      	ldr	r6, [r4, #16]
 8010e6e:	60c5      	str	r5, [r0, #12]
 8010e70:	f104 0914 	add.w	r9, r4, #20
 8010e74:	f108 0514 	add.w	r5, r8, #20
 8010e78:	f100 0e14 	add.w	lr, r0, #20
 8010e7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010e80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e84:	f108 0210 	add.w	r2, r8, #16
 8010e88:	46f2      	mov	sl, lr
 8010e8a:	2100      	movs	r1, #0
 8010e8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e94:	fa11 f88b 	uxtah	r8, r1, fp
 8010e98:	b299      	uxth	r1, r3
 8010e9a:	0c1b      	lsrs	r3, r3, #16
 8010e9c:	eba8 0801 	sub.w	r8, r8, r1
 8010ea0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010ea4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010ea8:	fa1f f888 	uxth.w	r8, r8
 8010eac:	1419      	asrs	r1, r3, #16
 8010eae:	454e      	cmp	r6, r9
 8010eb0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010eb4:	f84a 3b04 	str.w	r3, [sl], #4
 8010eb8:	d8e8      	bhi.n	8010e8c <__mdiff+0x80>
 8010eba:	1b33      	subs	r3, r6, r4
 8010ebc:	3b15      	subs	r3, #21
 8010ebe:	f023 0303 	bic.w	r3, r3, #3
 8010ec2:	3304      	adds	r3, #4
 8010ec4:	3415      	adds	r4, #21
 8010ec6:	42a6      	cmp	r6, r4
 8010ec8:	bf38      	it	cc
 8010eca:	2304      	movcc	r3, #4
 8010ecc:	441d      	add	r5, r3
 8010ece:	4473      	add	r3, lr
 8010ed0:	469e      	mov	lr, r3
 8010ed2:	462e      	mov	r6, r5
 8010ed4:	4566      	cmp	r6, ip
 8010ed6:	d30e      	bcc.n	8010ef6 <__mdiff+0xea>
 8010ed8:	f10c 0203 	add.w	r2, ip, #3
 8010edc:	1b52      	subs	r2, r2, r5
 8010ede:	f022 0203 	bic.w	r2, r2, #3
 8010ee2:	3d03      	subs	r5, #3
 8010ee4:	45ac      	cmp	ip, r5
 8010ee6:	bf38      	it	cc
 8010ee8:	2200      	movcc	r2, #0
 8010eea:	4413      	add	r3, r2
 8010eec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ef0:	b17a      	cbz	r2, 8010f12 <__mdiff+0x106>
 8010ef2:	6107      	str	r7, [r0, #16]
 8010ef4:	e7a4      	b.n	8010e40 <__mdiff+0x34>
 8010ef6:	f856 8b04 	ldr.w	r8, [r6], #4
 8010efa:	fa11 f288 	uxtah	r2, r1, r8
 8010efe:	1414      	asrs	r4, r2, #16
 8010f00:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010f04:	b292      	uxth	r2, r2
 8010f06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010f0a:	f84e 2b04 	str.w	r2, [lr], #4
 8010f0e:	1421      	asrs	r1, r4, #16
 8010f10:	e7e0      	b.n	8010ed4 <__mdiff+0xc8>
 8010f12:	3f01      	subs	r7, #1
 8010f14:	e7ea      	b.n	8010eec <__mdiff+0xe0>
 8010f16:	bf00      	nop
 8010f18:	08011e30 	.word	0x08011e30
 8010f1c:	08011e41 	.word	0x08011e41

08010f20 <__d2b>:
 8010f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f24:	460f      	mov	r7, r1
 8010f26:	2101      	movs	r1, #1
 8010f28:	ec59 8b10 	vmov	r8, r9, d0
 8010f2c:	4616      	mov	r6, r2
 8010f2e:	f7ff fcd5 	bl	80108dc <_Balloc>
 8010f32:	4604      	mov	r4, r0
 8010f34:	b930      	cbnz	r0, 8010f44 <__d2b+0x24>
 8010f36:	4602      	mov	r2, r0
 8010f38:	4b24      	ldr	r3, [pc, #144]	; (8010fcc <__d2b+0xac>)
 8010f3a:	4825      	ldr	r0, [pc, #148]	; (8010fd0 <__d2b+0xb0>)
 8010f3c:	f240 310f 	movw	r1, #783	; 0x30f
 8010f40:	f000 fa68 	bl	8011414 <__assert_func>
 8010f44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f4c:	bb2d      	cbnz	r5, 8010f9a <__d2b+0x7a>
 8010f4e:	9301      	str	r3, [sp, #4]
 8010f50:	f1b8 0300 	subs.w	r3, r8, #0
 8010f54:	d026      	beq.n	8010fa4 <__d2b+0x84>
 8010f56:	4668      	mov	r0, sp
 8010f58:	9300      	str	r3, [sp, #0]
 8010f5a:	f7ff fd87 	bl	8010a6c <__lo0bits>
 8010f5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010f62:	b1e8      	cbz	r0, 8010fa0 <__d2b+0x80>
 8010f64:	f1c0 0320 	rsb	r3, r0, #32
 8010f68:	fa02 f303 	lsl.w	r3, r2, r3
 8010f6c:	430b      	orrs	r3, r1
 8010f6e:	40c2      	lsrs	r2, r0
 8010f70:	6163      	str	r3, [r4, #20]
 8010f72:	9201      	str	r2, [sp, #4]
 8010f74:	9b01      	ldr	r3, [sp, #4]
 8010f76:	61a3      	str	r3, [r4, #24]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	bf14      	ite	ne
 8010f7c:	2202      	movne	r2, #2
 8010f7e:	2201      	moveq	r2, #1
 8010f80:	6122      	str	r2, [r4, #16]
 8010f82:	b1bd      	cbz	r5, 8010fb4 <__d2b+0x94>
 8010f84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010f88:	4405      	add	r5, r0
 8010f8a:	603d      	str	r5, [r7, #0]
 8010f8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f90:	6030      	str	r0, [r6, #0]
 8010f92:	4620      	mov	r0, r4
 8010f94:	b003      	add	sp, #12
 8010f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f9e:	e7d6      	b.n	8010f4e <__d2b+0x2e>
 8010fa0:	6161      	str	r1, [r4, #20]
 8010fa2:	e7e7      	b.n	8010f74 <__d2b+0x54>
 8010fa4:	a801      	add	r0, sp, #4
 8010fa6:	f7ff fd61 	bl	8010a6c <__lo0bits>
 8010faa:	9b01      	ldr	r3, [sp, #4]
 8010fac:	6163      	str	r3, [r4, #20]
 8010fae:	3020      	adds	r0, #32
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	e7e5      	b.n	8010f80 <__d2b+0x60>
 8010fb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010fb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010fbc:	6038      	str	r0, [r7, #0]
 8010fbe:	6918      	ldr	r0, [r3, #16]
 8010fc0:	f7ff fd34 	bl	8010a2c <__hi0bits>
 8010fc4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010fc8:	e7e2      	b.n	8010f90 <__d2b+0x70>
 8010fca:	bf00      	nop
 8010fcc:	08011e30 	.word	0x08011e30
 8010fd0:	08011e41 	.word	0x08011e41

08010fd4 <__ssputs_r>:
 8010fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd8:	688e      	ldr	r6, [r1, #8]
 8010fda:	461f      	mov	r7, r3
 8010fdc:	42be      	cmp	r6, r7
 8010fde:	680b      	ldr	r3, [r1, #0]
 8010fe0:	4682      	mov	sl, r0
 8010fe2:	460c      	mov	r4, r1
 8010fe4:	4690      	mov	r8, r2
 8010fe6:	d82c      	bhi.n	8011042 <__ssputs_r+0x6e>
 8010fe8:	898a      	ldrh	r2, [r1, #12]
 8010fea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010fee:	d026      	beq.n	801103e <__ssputs_r+0x6a>
 8010ff0:	6965      	ldr	r5, [r4, #20]
 8010ff2:	6909      	ldr	r1, [r1, #16]
 8010ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ff8:	eba3 0901 	sub.w	r9, r3, r1
 8010ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011000:	1c7b      	adds	r3, r7, #1
 8011002:	444b      	add	r3, r9
 8011004:	106d      	asrs	r5, r5, #1
 8011006:	429d      	cmp	r5, r3
 8011008:	bf38      	it	cc
 801100a:	461d      	movcc	r5, r3
 801100c:	0553      	lsls	r3, r2, #21
 801100e:	d527      	bpl.n	8011060 <__ssputs_r+0x8c>
 8011010:	4629      	mov	r1, r5
 8011012:	f7fd feed 	bl	800edf0 <_malloc_r>
 8011016:	4606      	mov	r6, r0
 8011018:	b360      	cbz	r0, 8011074 <__ssputs_r+0xa0>
 801101a:	6921      	ldr	r1, [r4, #16]
 801101c:	464a      	mov	r2, r9
 801101e:	f7fe fd89 	bl	800fb34 <memcpy>
 8011022:	89a3      	ldrh	r3, [r4, #12]
 8011024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801102c:	81a3      	strh	r3, [r4, #12]
 801102e:	6126      	str	r6, [r4, #16]
 8011030:	6165      	str	r5, [r4, #20]
 8011032:	444e      	add	r6, r9
 8011034:	eba5 0509 	sub.w	r5, r5, r9
 8011038:	6026      	str	r6, [r4, #0]
 801103a:	60a5      	str	r5, [r4, #8]
 801103c:	463e      	mov	r6, r7
 801103e:	42be      	cmp	r6, r7
 8011040:	d900      	bls.n	8011044 <__ssputs_r+0x70>
 8011042:	463e      	mov	r6, r7
 8011044:	6820      	ldr	r0, [r4, #0]
 8011046:	4632      	mov	r2, r6
 8011048:	4641      	mov	r1, r8
 801104a:	f000 f9c9 	bl	80113e0 <memmove>
 801104e:	68a3      	ldr	r3, [r4, #8]
 8011050:	1b9b      	subs	r3, r3, r6
 8011052:	60a3      	str	r3, [r4, #8]
 8011054:	6823      	ldr	r3, [r4, #0]
 8011056:	4433      	add	r3, r6
 8011058:	6023      	str	r3, [r4, #0]
 801105a:	2000      	movs	r0, #0
 801105c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011060:	462a      	mov	r2, r5
 8011062:	f000 fa1d 	bl	80114a0 <_realloc_r>
 8011066:	4606      	mov	r6, r0
 8011068:	2800      	cmp	r0, #0
 801106a:	d1e0      	bne.n	801102e <__ssputs_r+0x5a>
 801106c:	6921      	ldr	r1, [r4, #16]
 801106e:	4650      	mov	r0, sl
 8011070:	f7ff fbe8 	bl	8010844 <_free_r>
 8011074:	230c      	movs	r3, #12
 8011076:	f8ca 3000 	str.w	r3, [sl]
 801107a:	89a3      	ldrh	r3, [r4, #12]
 801107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011080:	81a3      	strh	r3, [r4, #12]
 8011082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011086:	e7e9      	b.n	801105c <__ssputs_r+0x88>

08011088 <_svfiprintf_r>:
 8011088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801108c:	4698      	mov	r8, r3
 801108e:	898b      	ldrh	r3, [r1, #12]
 8011090:	061b      	lsls	r3, r3, #24
 8011092:	b09d      	sub	sp, #116	; 0x74
 8011094:	4607      	mov	r7, r0
 8011096:	460d      	mov	r5, r1
 8011098:	4614      	mov	r4, r2
 801109a:	d50e      	bpl.n	80110ba <_svfiprintf_r+0x32>
 801109c:	690b      	ldr	r3, [r1, #16]
 801109e:	b963      	cbnz	r3, 80110ba <_svfiprintf_r+0x32>
 80110a0:	2140      	movs	r1, #64	; 0x40
 80110a2:	f7fd fea5 	bl	800edf0 <_malloc_r>
 80110a6:	6028      	str	r0, [r5, #0]
 80110a8:	6128      	str	r0, [r5, #16]
 80110aa:	b920      	cbnz	r0, 80110b6 <_svfiprintf_r+0x2e>
 80110ac:	230c      	movs	r3, #12
 80110ae:	603b      	str	r3, [r7, #0]
 80110b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110b4:	e0d0      	b.n	8011258 <_svfiprintf_r+0x1d0>
 80110b6:	2340      	movs	r3, #64	; 0x40
 80110b8:	616b      	str	r3, [r5, #20]
 80110ba:	2300      	movs	r3, #0
 80110bc:	9309      	str	r3, [sp, #36]	; 0x24
 80110be:	2320      	movs	r3, #32
 80110c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80110c8:	2330      	movs	r3, #48	; 0x30
 80110ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011270 <_svfiprintf_r+0x1e8>
 80110ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110d2:	f04f 0901 	mov.w	r9, #1
 80110d6:	4623      	mov	r3, r4
 80110d8:	469a      	mov	sl, r3
 80110da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110de:	b10a      	cbz	r2, 80110e4 <_svfiprintf_r+0x5c>
 80110e0:	2a25      	cmp	r2, #37	; 0x25
 80110e2:	d1f9      	bne.n	80110d8 <_svfiprintf_r+0x50>
 80110e4:	ebba 0b04 	subs.w	fp, sl, r4
 80110e8:	d00b      	beq.n	8011102 <_svfiprintf_r+0x7a>
 80110ea:	465b      	mov	r3, fp
 80110ec:	4622      	mov	r2, r4
 80110ee:	4629      	mov	r1, r5
 80110f0:	4638      	mov	r0, r7
 80110f2:	f7ff ff6f 	bl	8010fd4 <__ssputs_r>
 80110f6:	3001      	adds	r0, #1
 80110f8:	f000 80a9 	beq.w	801124e <_svfiprintf_r+0x1c6>
 80110fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110fe:	445a      	add	r2, fp
 8011100:	9209      	str	r2, [sp, #36]	; 0x24
 8011102:	f89a 3000 	ldrb.w	r3, [sl]
 8011106:	2b00      	cmp	r3, #0
 8011108:	f000 80a1 	beq.w	801124e <_svfiprintf_r+0x1c6>
 801110c:	2300      	movs	r3, #0
 801110e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011116:	f10a 0a01 	add.w	sl, sl, #1
 801111a:	9304      	str	r3, [sp, #16]
 801111c:	9307      	str	r3, [sp, #28]
 801111e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011122:	931a      	str	r3, [sp, #104]	; 0x68
 8011124:	4654      	mov	r4, sl
 8011126:	2205      	movs	r2, #5
 8011128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801112c:	4850      	ldr	r0, [pc, #320]	; (8011270 <_svfiprintf_r+0x1e8>)
 801112e:	f7ef f857 	bl	80001e0 <memchr>
 8011132:	9a04      	ldr	r2, [sp, #16]
 8011134:	b9d8      	cbnz	r0, 801116e <_svfiprintf_r+0xe6>
 8011136:	06d0      	lsls	r0, r2, #27
 8011138:	bf44      	itt	mi
 801113a:	2320      	movmi	r3, #32
 801113c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011140:	0711      	lsls	r1, r2, #28
 8011142:	bf44      	itt	mi
 8011144:	232b      	movmi	r3, #43	; 0x2b
 8011146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801114a:	f89a 3000 	ldrb.w	r3, [sl]
 801114e:	2b2a      	cmp	r3, #42	; 0x2a
 8011150:	d015      	beq.n	801117e <_svfiprintf_r+0xf6>
 8011152:	9a07      	ldr	r2, [sp, #28]
 8011154:	4654      	mov	r4, sl
 8011156:	2000      	movs	r0, #0
 8011158:	f04f 0c0a 	mov.w	ip, #10
 801115c:	4621      	mov	r1, r4
 801115e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011162:	3b30      	subs	r3, #48	; 0x30
 8011164:	2b09      	cmp	r3, #9
 8011166:	d94d      	bls.n	8011204 <_svfiprintf_r+0x17c>
 8011168:	b1b0      	cbz	r0, 8011198 <_svfiprintf_r+0x110>
 801116a:	9207      	str	r2, [sp, #28]
 801116c:	e014      	b.n	8011198 <_svfiprintf_r+0x110>
 801116e:	eba0 0308 	sub.w	r3, r0, r8
 8011172:	fa09 f303 	lsl.w	r3, r9, r3
 8011176:	4313      	orrs	r3, r2
 8011178:	9304      	str	r3, [sp, #16]
 801117a:	46a2      	mov	sl, r4
 801117c:	e7d2      	b.n	8011124 <_svfiprintf_r+0x9c>
 801117e:	9b03      	ldr	r3, [sp, #12]
 8011180:	1d19      	adds	r1, r3, #4
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	9103      	str	r1, [sp, #12]
 8011186:	2b00      	cmp	r3, #0
 8011188:	bfbb      	ittet	lt
 801118a:	425b      	neglt	r3, r3
 801118c:	f042 0202 	orrlt.w	r2, r2, #2
 8011190:	9307      	strge	r3, [sp, #28]
 8011192:	9307      	strlt	r3, [sp, #28]
 8011194:	bfb8      	it	lt
 8011196:	9204      	strlt	r2, [sp, #16]
 8011198:	7823      	ldrb	r3, [r4, #0]
 801119a:	2b2e      	cmp	r3, #46	; 0x2e
 801119c:	d10c      	bne.n	80111b8 <_svfiprintf_r+0x130>
 801119e:	7863      	ldrb	r3, [r4, #1]
 80111a0:	2b2a      	cmp	r3, #42	; 0x2a
 80111a2:	d134      	bne.n	801120e <_svfiprintf_r+0x186>
 80111a4:	9b03      	ldr	r3, [sp, #12]
 80111a6:	1d1a      	adds	r2, r3, #4
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	9203      	str	r2, [sp, #12]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	bfb8      	it	lt
 80111b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80111b4:	3402      	adds	r4, #2
 80111b6:	9305      	str	r3, [sp, #20]
 80111b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011280 <_svfiprintf_r+0x1f8>
 80111bc:	7821      	ldrb	r1, [r4, #0]
 80111be:	2203      	movs	r2, #3
 80111c0:	4650      	mov	r0, sl
 80111c2:	f7ef f80d 	bl	80001e0 <memchr>
 80111c6:	b138      	cbz	r0, 80111d8 <_svfiprintf_r+0x150>
 80111c8:	9b04      	ldr	r3, [sp, #16]
 80111ca:	eba0 000a 	sub.w	r0, r0, sl
 80111ce:	2240      	movs	r2, #64	; 0x40
 80111d0:	4082      	lsls	r2, r0
 80111d2:	4313      	orrs	r3, r2
 80111d4:	3401      	adds	r4, #1
 80111d6:	9304      	str	r3, [sp, #16]
 80111d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111dc:	4825      	ldr	r0, [pc, #148]	; (8011274 <_svfiprintf_r+0x1ec>)
 80111de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111e2:	2206      	movs	r2, #6
 80111e4:	f7ee fffc 	bl	80001e0 <memchr>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d038      	beq.n	801125e <_svfiprintf_r+0x1d6>
 80111ec:	4b22      	ldr	r3, [pc, #136]	; (8011278 <_svfiprintf_r+0x1f0>)
 80111ee:	bb1b      	cbnz	r3, 8011238 <_svfiprintf_r+0x1b0>
 80111f0:	9b03      	ldr	r3, [sp, #12]
 80111f2:	3307      	adds	r3, #7
 80111f4:	f023 0307 	bic.w	r3, r3, #7
 80111f8:	3308      	adds	r3, #8
 80111fa:	9303      	str	r3, [sp, #12]
 80111fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111fe:	4433      	add	r3, r6
 8011200:	9309      	str	r3, [sp, #36]	; 0x24
 8011202:	e768      	b.n	80110d6 <_svfiprintf_r+0x4e>
 8011204:	fb0c 3202 	mla	r2, ip, r2, r3
 8011208:	460c      	mov	r4, r1
 801120a:	2001      	movs	r0, #1
 801120c:	e7a6      	b.n	801115c <_svfiprintf_r+0xd4>
 801120e:	2300      	movs	r3, #0
 8011210:	3401      	adds	r4, #1
 8011212:	9305      	str	r3, [sp, #20]
 8011214:	4619      	mov	r1, r3
 8011216:	f04f 0c0a 	mov.w	ip, #10
 801121a:	4620      	mov	r0, r4
 801121c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011220:	3a30      	subs	r2, #48	; 0x30
 8011222:	2a09      	cmp	r2, #9
 8011224:	d903      	bls.n	801122e <_svfiprintf_r+0x1a6>
 8011226:	2b00      	cmp	r3, #0
 8011228:	d0c6      	beq.n	80111b8 <_svfiprintf_r+0x130>
 801122a:	9105      	str	r1, [sp, #20]
 801122c:	e7c4      	b.n	80111b8 <_svfiprintf_r+0x130>
 801122e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011232:	4604      	mov	r4, r0
 8011234:	2301      	movs	r3, #1
 8011236:	e7f0      	b.n	801121a <_svfiprintf_r+0x192>
 8011238:	ab03      	add	r3, sp, #12
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	462a      	mov	r2, r5
 801123e:	4b0f      	ldr	r3, [pc, #60]	; (801127c <_svfiprintf_r+0x1f4>)
 8011240:	a904      	add	r1, sp, #16
 8011242:	4638      	mov	r0, r7
 8011244:	f7fd ff00 	bl	800f048 <_printf_float>
 8011248:	1c42      	adds	r2, r0, #1
 801124a:	4606      	mov	r6, r0
 801124c:	d1d6      	bne.n	80111fc <_svfiprintf_r+0x174>
 801124e:	89ab      	ldrh	r3, [r5, #12]
 8011250:	065b      	lsls	r3, r3, #25
 8011252:	f53f af2d 	bmi.w	80110b0 <_svfiprintf_r+0x28>
 8011256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011258:	b01d      	add	sp, #116	; 0x74
 801125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801125e:	ab03      	add	r3, sp, #12
 8011260:	9300      	str	r3, [sp, #0]
 8011262:	462a      	mov	r2, r5
 8011264:	4b05      	ldr	r3, [pc, #20]	; (801127c <_svfiprintf_r+0x1f4>)
 8011266:	a904      	add	r1, sp, #16
 8011268:	4638      	mov	r0, r7
 801126a:	f7fe f991 	bl	800f590 <_printf_i>
 801126e:	e7eb      	b.n	8011248 <_svfiprintf_r+0x1c0>
 8011270:	08011f9c 	.word	0x08011f9c
 8011274:	08011fa6 	.word	0x08011fa6
 8011278:	0800f049 	.word	0x0800f049
 801127c:	08010fd5 	.word	0x08010fd5
 8011280:	08011fa2 	.word	0x08011fa2

08011284 <__sflush_r>:
 8011284:	898a      	ldrh	r2, [r1, #12]
 8011286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801128a:	4605      	mov	r5, r0
 801128c:	0710      	lsls	r0, r2, #28
 801128e:	460c      	mov	r4, r1
 8011290:	d458      	bmi.n	8011344 <__sflush_r+0xc0>
 8011292:	684b      	ldr	r3, [r1, #4]
 8011294:	2b00      	cmp	r3, #0
 8011296:	dc05      	bgt.n	80112a4 <__sflush_r+0x20>
 8011298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801129a:	2b00      	cmp	r3, #0
 801129c:	dc02      	bgt.n	80112a4 <__sflush_r+0x20>
 801129e:	2000      	movs	r0, #0
 80112a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112a6:	2e00      	cmp	r6, #0
 80112a8:	d0f9      	beq.n	801129e <__sflush_r+0x1a>
 80112aa:	2300      	movs	r3, #0
 80112ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112b0:	682f      	ldr	r7, [r5, #0]
 80112b2:	6a21      	ldr	r1, [r4, #32]
 80112b4:	602b      	str	r3, [r5, #0]
 80112b6:	d032      	beq.n	801131e <__sflush_r+0x9a>
 80112b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112ba:	89a3      	ldrh	r3, [r4, #12]
 80112bc:	075a      	lsls	r2, r3, #29
 80112be:	d505      	bpl.n	80112cc <__sflush_r+0x48>
 80112c0:	6863      	ldr	r3, [r4, #4]
 80112c2:	1ac0      	subs	r0, r0, r3
 80112c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112c6:	b10b      	cbz	r3, 80112cc <__sflush_r+0x48>
 80112c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112ca:	1ac0      	subs	r0, r0, r3
 80112cc:	2300      	movs	r3, #0
 80112ce:	4602      	mov	r2, r0
 80112d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112d2:	6a21      	ldr	r1, [r4, #32]
 80112d4:	4628      	mov	r0, r5
 80112d6:	47b0      	blx	r6
 80112d8:	1c43      	adds	r3, r0, #1
 80112da:	89a3      	ldrh	r3, [r4, #12]
 80112dc:	d106      	bne.n	80112ec <__sflush_r+0x68>
 80112de:	6829      	ldr	r1, [r5, #0]
 80112e0:	291d      	cmp	r1, #29
 80112e2:	d82b      	bhi.n	801133c <__sflush_r+0xb8>
 80112e4:	4a29      	ldr	r2, [pc, #164]	; (801138c <__sflush_r+0x108>)
 80112e6:	410a      	asrs	r2, r1
 80112e8:	07d6      	lsls	r6, r2, #31
 80112ea:	d427      	bmi.n	801133c <__sflush_r+0xb8>
 80112ec:	2200      	movs	r2, #0
 80112ee:	6062      	str	r2, [r4, #4]
 80112f0:	04d9      	lsls	r1, r3, #19
 80112f2:	6922      	ldr	r2, [r4, #16]
 80112f4:	6022      	str	r2, [r4, #0]
 80112f6:	d504      	bpl.n	8011302 <__sflush_r+0x7e>
 80112f8:	1c42      	adds	r2, r0, #1
 80112fa:	d101      	bne.n	8011300 <__sflush_r+0x7c>
 80112fc:	682b      	ldr	r3, [r5, #0]
 80112fe:	b903      	cbnz	r3, 8011302 <__sflush_r+0x7e>
 8011300:	6560      	str	r0, [r4, #84]	; 0x54
 8011302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011304:	602f      	str	r7, [r5, #0]
 8011306:	2900      	cmp	r1, #0
 8011308:	d0c9      	beq.n	801129e <__sflush_r+0x1a>
 801130a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801130e:	4299      	cmp	r1, r3
 8011310:	d002      	beq.n	8011318 <__sflush_r+0x94>
 8011312:	4628      	mov	r0, r5
 8011314:	f7ff fa96 	bl	8010844 <_free_r>
 8011318:	2000      	movs	r0, #0
 801131a:	6360      	str	r0, [r4, #52]	; 0x34
 801131c:	e7c0      	b.n	80112a0 <__sflush_r+0x1c>
 801131e:	2301      	movs	r3, #1
 8011320:	4628      	mov	r0, r5
 8011322:	47b0      	blx	r6
 8011324:	1c41      	adds	r1, r0, #1
 8011326:	d1c8      	bne.n	80112ba <__sflush_r+0x36>
 8011328:	682b      	ldr	r3, [r5, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d0c5      	beq.n	80112ba <__sflush_r+0x36>
 801132e:	2b1d      	cmp	r3, #29
 8011330:	d001      	beq.n	8011336 <__sflush_r+0xb2>
 8011332:	2b16      	cmp	r3, #22
 8011334:	d101      	bne.n	801133a <__sflush_r+0xb6>
 8011336:	602f      	str	r7, [r5, #0]
 8011338:	e7b1      	b.n	801129e <__sflush_r+0x1a>
 801133a:	89a3      	ldrh	r3, [r4, #12]
 801133c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011340:	81a3      	strh	r3, [r4, #12]
 8011342:	e7ad      	b.n	80112a0 <__sflush_r+0x1c>
 8011344:	690f      	ldr	r7, [r1, #16]
 8011346:	2f00      	cmp	r7, #0
 8011348:	d0a9      	beq.n	801129e <__sflush_r+0x1a>
 801134a:	0793      	lsls	r3, r2, #30
 801134c:	680e      	ldr	r6, [r1, #0]
 801134e:	bf08      	it	eq
 8011350:	694b      	ldreq	r3, [r1, #20]
 8011352:	600f      	str	r7, [r1, #0]
 8011354:	bf18      	it	ne
 8011356:	2300      	movne	r3, #0
 8011358:	eba6 0807 	sub.w	r8, r6, r7
 801135c:	608b      	str	r3, [r1, #8]
 801135e:	f1b8 0f00 	cmp.w	r8, #0
 8011362:	dd9c      	ble.n	801129e <__sflush_r+0x1a>
 8011364:	6a21      	ldr	r1, [r4, #32]
 8011366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011368:	4643      	mov	r3, r8
 801136a:	463a      	mov	r2, r7
 801136c:	4628      	mov	r0, r5
 801136e:	47b0      	blx	r6
 8011370:	2800      	cmp	r0, #0
 8011372:	dc06      	bgt.n	8011382 <__sflush_r+0xfe>
 8011374:	89a3      	ldrh	r3, [r4, #12]
 8011376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801137a:	81a3      	strh	r3, [r4, #12]
 801137c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011380:	e78e      	b.n	80112a0 <__sflush_r+0x1c>
 8011382:	4407      	add	r7, r0
 8011384:	eba8 0800 	sub.w	r8, r8, r0
 8011388:	e7e9      	b.n	801135e <__sflush_r+0xda>
 801138a:	bf00      	nop
 801138c:	dfbffffe 	.word	0xdfbffffe

08011390 <_fflush_r>:
 8011390:	b538      	push	{r3, r4, r5, lr}
 8011392:	690b      	ldr	r3, [r1, #16]
 8011394:	4605      	mov	r5, r0
 8011396:	460c      	mov	r4, r1
 8011398:	b913      	cbnz	r3, 80113a0 <_fflush_r+0x10>
 801139a:	2500      	movs	r5, #0
 801139c:	4628      	mov	r0, r5
 801139e:	bd38      	pop	{r3, r4, r5, pc}
 80113a0:	b118      	cbz	r0, 80113aa <_fflush_r+0x1a>
 80113a2:	6a03      	ldr	r3, [r0, #32]
 80113a4:	b90b      	cbnz	r3, 80113aa <_fflush_r+0x1a>
 80113a6:	f7fe fa8f 	bl	800f8c8 <__sinit>
 80113aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d0f3      	beq.n	801139a <_fflush_r+0xa>
 80113b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113b4:	07d0      	lsls	r0, r2, #31
 80113b6:	d404      	bmi.n	80113c2 <_fflush_r+0x32>
 80113b8:	0599      	lsls	r1, r3, #22
 80113ba:	d402      	bmi.n	80113c2 <_fflush_r+0x32>
 80113bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113be:	f7fe fbb7 	bl	800fb30 <__retarget_lock_acquire_recursive>
 80113c2:	4628      	mov	r0, r5
 80113c4:	4621      	mov	r1, r4
 80113c6:	f7ff ff5d 	bl	8011284 <__sflush_r>
 80113ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113cc:	07da      	lsls	r2, r3, #31
 80113ce:	4605      	mov	r5, r0
 80113d0:	d4e4      	bmi.n	801139c <_fflush_r+0xc>
 80113d2:	89a3      	ldrh	r3, [r4, #12]
 80113d4:	059b      	lsls	r3, r3, #22
 80113d6:	d4e1      	bmi.n	801139c <_fflush_r+0xc>
 80113d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113da:	f7fe fbaa 	bl	800fb32 <__retarget_lock_release_recursive>
 80113de:	e7dd      	b.n	801139c <_fflush_r+0xc>

080113e0 <memmove>:
 80113e0:	4288      	cmp	r0, r1
 80113e2:	b510      	push	{r4, lr}
 80113e4:	eb01 0402 	add.w	r4, r1, r2
 80113e8:	d902      	bls.n	80113f0 <memmove+0x10>
 80113ea:	4284      	cmp	r4, r0
 80113ec:	4623      	mov	r3, r4
 80113ee:	d807      	bhi.n	8011400 <memmove+0x20>
 80113f0:	1e43      	subs	r3, r0, #1
 80113f2:	42a1      	cmp	r1, r4
 80113f4:	d008      	beq.n	8011408 <memmove+0x28>
 80113f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80113fe:	e7f8      	b.n	80113f2 <memmove+0x12>
 8011400:	4402      	add	r2, r0
 8011402:	4601      	mov	r1, r0
 8011404:	428a      	cmp	r2, r1
 8011406:	d100      	bne.n	801140a <memmove+0x2a>
 8011408:	bd10      	pop	{r4, pc}
 801140a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801140e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011412:	e7f7      	b.n	8011404 <memmove+0x24>

08011414 <__assert_func>:
 8011414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011416:	4614      	mov	r4, r2
 8011418:	461a      	mov	r2, r3
 801141a:	4b09      	ldr	r3, [pc, #36]	; (8011440 <__assert_func+0x2c>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	4605      	mov	r5, r0
 8011420:	68d8      	ldr	r0, [r3, #12]
 8011422:	b14c      	cbz	r4, 8011438 <__assert_func+0x24>
 8011424:	4b07      	ldr	r3, [pc, #28]	; (8011444 <__assert_func+0x30>)
 8011426:	9100      	str	r1, [sp, #0]
 8011428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801142c:	4906      	ldr	r1, [pc, #24]	; (8011448 <__assert_func+0x34>)
 801142e:	462b      	mov	r3, r5
 8011430:	f000 f872 	bl	8011518 <fiprintf>
 8011434:	f000 f882 	bl	801153c <abort>
 8011438:	4b04      	ldr	r3, [pc, #16]	; (801144c <__assert_func+0x38>)
 801143a:	461c      	mov	r4, r3
 801143c:	e7f3      	b.n	8011426 <__assert_func+0x12>
 801143e:	bf00      	nop
 8011440:	20000178 	.word	0x20000178
 8011444:	08011fb7 	.word	0x08011fb7
 8011448:	08011fc4 	.word	0x08011fc4
 801144c:	08011ff2 	.word	0x08011ff2

08011450 <_calloc_r>:
 8011450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011452:	fba1 2402 	umull	r2, r4, r1, r2
 8011456:	b94c      	cbnz	r4, 801146c <_calloc_r+0x1c>
 8011458:	4611      	mov	r1, r2
 801145a:	9201      	str	r2, [sp, #4]
 801145c:	f7fd fcc8 	bl	800edf0 <_malloc_r>
 8011460:	9a01      	ldr	r2, [sp, #4]
 8011462:	4605      	mov	r5, r0
 8011464:	b930      	cbnz	r0, 8011474 <_calloc_r+0x24>
 8011466:	4628      	mov	r0, r5
 8011468:	b003      	add	sp, #12
 801146a:	bd30      	pop	{r4, r5, pc}
 801146c:	220c      	movs	r2, #12
 801146e:	6002      	str	r2, [r0, #0]
 8011470:	2500      	movs	r5, #0
 8011472:	e7f8      	b.n	8011466 <_calloc_r+0x16>
 8011474:	4621      	mov	r1, r4
 8011476:	f7fe fac0 	bl	800f9fa <memset>
 801147a:	e7f4      	b.n	8011466 <_calloc_r+0x16>

0801147c <__ascii_mbtowc>:
 801147c:	b082      	sub	sp, #8
 801147e:	b901      	cbnz	r1, 8011482 <__ascii_mbtowc+0x6>
 8011480:	a901      	add	r1, sp, #4
 8011482:	b142      	cbz	r2, 8011496 <__ascii_mbtowc+0x1a>
 8011484:	b14b      	cbz	r3, 801149a <__ascii_mbtowc+0x1e>
 8011486:	7813      	ldrb	r3, [r2, #0]
 8011488:	600b      	str	r3, [r1, #0]
 801148a:	7812      	ldrb	r2, [r2, #0]
 801148c:	1e10      	subs	r0, r2, #0
 801148e:	bf18      	it	ne
 8011490:	2001      	movne	r0, #1
 8011492:	b002      	add	sp, #8
 8011494:	4770      	bx	lr
 8011496:	4610      	mov	r0, r2
 8011498:	e7fb      	b.n	8011492 <__ascii_mbtowc+0x16>
 801149a:	f06f 0001 	mvn.w	r0, #1
 801149e:	e7f8      	b.n	8011492 <__ascii_mbtowc+0x16>

080114a0 <_realloc_r>:
 80114a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114a4:	4680      	mov	r8, r0
 80114a6:	4614      	mov	r4, r2
 80114a8:	460e      	mov	r6, r1
 80114aa:	b921      	cbnz	r1, 80114b6 <_realloc_r+0x16>
 80114ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114b0:	4611      	mov	r1, r2
 80114b2:	f7fd bc9d 	b.w	800edf0 <_malloc_r>
 80114b6:	b92a      	cbnz	r2, 80114c4 <_realloc_r+0x24>
 80114b8:	f7ff f9c4 	bl	8010844 <_free_r>
 80114bc:	4625      	mov	r5, r4
 80114be:	4628      	mov	r0, r5
 80114c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c4:	f000 f841 	bl	801154a <_malloc_usable_size_r>
 80114c8:	4284      	cmp	r4, r0
 80114ca:	4607      	mov	r7, r0
 80114cc:	d802      	bhi.n	80114d4 <_realloc_r+0x34>
 80114ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80114d2:	d812      	bhi.n	80114fa <_realloc_r+0x5a>
 80114d4:	4621      	mov	r1, r4
 80114d6:	4640      	mov	r0, r8
 80114d8:	f7fd fc8a 	bl	800edf0 <_malloc_r>
 80114dc:	4605      	mov	r5, r0
 80114de:	2800      	cmp	r0, #0
 80114e0:	d0ed      	beq.n	80114be <_realloc_r+0x1e>
 80114e2:	42bc      	cmp	r4, r7
 80114e4:	4622      	mov	r2, r4
 80114e6:	4631      	mov	r1, r6
 80114e8:	bf28      	it	cs
 80114ea:	463a      	movcs	r2, r7
 80114ec:	f7fe fb22 	bl	800fb34 <memcpy>
 80114f0:	4631      	mov	r1, r6
 80114f2:	4640      	mov	r0, r8
 80114f4:	f7ff f9a6 	bl	8010844 <_free_r>
 80114f8:	e7e1      	b.n	80114be <_realloc_r+0x1e>
 80114fa:	4635      	mov	r5, r6
 80114fc:	e7df      	b.n	80114be <_realloc_r+0x1e>

080114fe <__ascii_wctomb>:
 80114fe:	b149      	cbz	r1, 8011514 <__ascii_wctomb+0x16>
 8011500:	2aff      	cmp	r2, #255	; 0xff
 8011502:	bf85      	ittet	hi
 8011504:	238a      	movhi	r3, #138	; 0x8a
 8011506:	6003      	strhi	r3, [r0, #0]
 8011508:	700a      	strbls	r2, [r1, #0]
 801150a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801150e:	bf98      	it	ls
 8011510:	2001      	movls	r0, #1
 8011512:	4770      	bx	lr
 8011514:	4608      	mov	r0, r1
 8011516:	4770      	bx	lr

08011518 <fiprintf>:
 8011518:	b40e      	push	{r1, r2, r3}
 801151a:	b503      	push	{r0, r1, lr}
 801151c:	4601      	mov	r1, r0
 801151e:	ab03      	add	r3, sp, #12
 8011520:	4805      	ldr	r0, [pc, #20]	; (8011538 <fiprintf+0x20>)
 8011522:	f853 2b04 	ldr.w	r2, [r3], #4
 8011526:	6800      	ldr	r0, [r0, #0]
 8011528:	9301      	str	r3, [sp, #4]
 801152a:	f000 f83f 	bl	80115ac <_vfiprintf_r>
 801152e:	b002      	add	sp, #8
 8011530:	f85d eb04 	ldr.w	lr, [sp], #4
 8011534:	b003      	add	sp, #12
 8011536:	4770      	bx	lr
 8011538:	20000178 	.word	0x20000178

0801153c <abort>:
 801153c:	b508      	push	{r3, lr}
 801153e:	2006      	movs	r0, #6
 8011540:	f000 fa0c 	bl	801195c <raise>
 8011544:	2001      	movs	r0, #1
 8011546:	f7f0 fd2b 	bl	8001fa0 <_exit>

0801154a <_malloc_usable_size_r>:
 801154a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801154e:	1f18      	subs	r0, r3, #4
 8011550:	2b00      	cmp	r3, #0
 8011552:	bfbc      	itt	lt
 8011554:	580b      	ldrlt	r3, [r1, r0]
 8011556:	18c0      	addlt	r0, r0, r3
 8011558:	4770      	bx	lr

0801155a <__sfputc_r>:
 801155a:	6893      	ldr	r3, [r2, #8]
 801155c:	3b01      	subs	r3, #1
 801155e:	2b00      	cmp	r3, #0
 8011560:	b410      	push	{r4}
 8011562:	6093      	str	r3, [r2, #8]
 8011564:	da08      	bge.n	8011578 <__sfputc_r+0x1e>
 8011566:	6994      	ldr	r4, [r2, #24]
 8011568:	42a3      	cmp	r3, r4
 801156a:	db01      	blt.n	8011570 <__sfputc_r+0x16>
 801156c:	290a      	cmp	r1, #10
 801156e:	d103      	bne.n	8011578 <__sfputc_r+0x1e>
 8011570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011574:	f000 b934 	b.w	80117e0 <__swbuf_r>
 8011578:	6813      	ldr	r3, [r2, #0]
 801157a:	1c58      	adds	r0, r3, #1
 801157c:	6010      	str	r0, [r2, #0]
 801157e:	7019      	strb	r1, [r3, #0]
 8011580:	4608      	mov	r0, r1
 8011582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011586:	4770      	bx	lr

08011588 <__sfputs_r>:
 8011588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801158a:	4606      	mov	r6, r0
 801158c:	460f      	mov	r7, r1
 801158e:	4614      	mov	r4, r2
 8011590:	18d5      	adds	r5, r2, r3
 8011592:	42ac      	cmp	r4, r5
 8011594:	d101      	bne.n	801159a <__sfputs_r+0x12>
 8011596:	2000      	movs	r0, #0
 8011598:	e007      	b.n	80115aa <__sfputs_r+0x22>
 801159a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801159e:	463a      	mov	r2, r7
 80115a0:	4630      	mov	r0, r6
 80115a2:	f7ff ffda 	bl	801155a <__sfputc_r>
 80115a6:	1c43      	adds	r3, r0, #1
 80115a8:	d1f3      	bne.n	8011592 <__sfputs_r+0xa>
 80115aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080115ac <_vfiprintf_r>:
 80115ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b0:	460d      	mov	r5, r1
 80115b2:	b09d      	sub	sp, #116	; 0x74
 80115b4:	4614      	mov	r4, r2
 80115b6:	4698      	mov	r8, r3
 80115b8:	4606      	mov	r6, r0
 80115ba:	b118      	cbz	r0, 80115c4 <_vfiprintf_r+0x18>
 80115bc:	6a03      	ldr	r3, [r0, #32]
 80115be:	b90b      	cbnz	r3, 80115c4 <_vfiprintf_r+0x18>
 80115c0:	f7fe f982 	bl	800f8c8 <__sinit>
 80115c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115c6:	07d9      	lsls	r1, r3, #31
 80115c8:	d405      	bmi.n	80115d6 <_vfiprintf_r+0x2a>
 80115ca:	89ab      	ldrh	r3, [r5, #12]
 80115cc:	059a      	lsls	r2, r3, #22
 80115ce:	d402      	bmi.n	80115d6 <_vfiprintf_r+0x2a>
 80115d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115d2:	f7fe faad 	bl	800fb30 <__retarget_lock_acquire_recursive>
 80115d6:	89ab      	ldrh	r3, [r5, #12]
 80115d8:	071b      	lsls	r3, r3, #28
 80115da:	d501      	bpl.n	80115e0 <_vfiprintf_r+0x34>
 80115dc:	692b      	ldr	r3, [r5, #16]
 80115de:	b99b      	cbnz	r3, 8011608 <_vfiprintf_r+0x5c>
 80115e0:	4629      	mov	r1, r5
 80115e2:	4630      	mov	r0, r6
 80115e4:	f000 f93a 	bl	801185c <__swsetup_r>
 80115e8:	b170      	cbz	r0, 8011608 <_vfiprintf_r+0x5c>
 80115ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115ec:	07dc      	lsls	r4, r3, #31
 80115ee:	d504      	bpl.n	80115fa <_vfiprintf_r+0x4e>
 80115f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115f4:	b01d      	add	sp, #116	; 0x74
 80115f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115fa:	89ab      	ldrh	r3, [r5, #12]
 80115fc:	0598      	lsls	r0, r3, #22
 80115fe:	d4f7      	bmi.n	80115f0 <_vfiprintf_r+0x44>
 8011600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011602:	f7fe fa96 	bl	800fb32 <__retarget_lock_release_recursive>
 8011606:	e7f3      	b.n	80115f0 <_vfiprintf_r+0x44>
 8011608:	2300      	movs	r3, #0
 801160a:	9309      	str	r3, [sp, #36]	; 0x24
 801160c:	2320      	movs	r3, #32
 801160e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011612:	f8cd 800c 	str.w	r8, [sp, #12]
 8011616:	2330      	movs	r3, #48	; 0x30
 8011618:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80117cc <_vfiprintf_r+0x220>
 801161c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011620:	f04f 0901 	mov.w	r9, #1
 8011624:	4623      	mov	r3, r4
 8011626:	469a      	mov	sl, r3
 8011628:	f813 2b01 	ldrb.w	r2, [r3], #1
 801162c:	b10a      	cbz	r2, 8011632 <_vfiprintf_r+0x86>
 801162e:	2a25      	cmp	r2, #37	; 0x25
 8011630:	d1f9      	bne.n	8011626 <_vfiprintf_r+0x7a>
 8011632:	ebba 0b04 	subs.w	fp, sl, r4
 8011636:	d00b      	beq.n	8011650 <_vfiprintf_r+0xa4>
 8011638:	465b      	mov	r3, fp
 801163a:	4622      	mov	r2, r4
 801163c:	4629      	mov	r1, r5
 801163e:	4630      	mov	r0, r6
 8011640:	f7ff ffa2 	bl	8011588 <__sfputs_r>
 8011644:	3001      	adds	r0, #1
 8011646:	f000 80a9 	beq.w	801179c <_vfiprintf_r+0x1f0>
 801164a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801164c:	445a      	add	r2, fp
 801164e:	9209      	str	r2, [sp, #36]	; 0x24
 8011650:	f89a 3000 	ldrb.w	r3, [sl]
 8011654:	2b00      	cmp	r3, #0
 8011656:	f000 80a1 	beq.w	801179c <_vfiprintf_r+0x1f0>
 801165a:	2300      	movs	r3, #0
 801165c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011664:	f10a 0a01 	add.w	sl, sl, #1
 8011668:	9304      	str	r3, [sp, #16]
 801166a:	9307      	str	r3, [sp, #28]
 801166c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011670:	931a      	str	r3, [sp, #104]	; 0x68
 8011672:	4654      	mov	r4, sl
 8011674:	2205      	movs	r2, #5
 8011676:	f814 1b01 	ldrb.w	r1, [r4], #1
 801167a:	4854      	ldr	r0, [pc, #336]	; (80117cc <_vfiprintf_r+0x220>)
 801167c:	f7ee fdb0 	bl	80001e0 <memchr>
 8011680:	9a04      	ldr	r2, [sp, #16]
 8011682:	b9d8      	cbnz	r0, 80116bc <_vfiprintf_r+0x110>
 8011684:	06d1      	lsls	r1, r2, #27
 8011686:	bf44      	itt	mi
 8011688:	2320      	movmi	r3, #32
 801168a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801168e:	0713      	lsls	r3, r2, #28
 8011690:	bf44      	itt	mi
 8011692:	232b      	movmi	r3, #43	; 0x2b
 8011694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011698:	f89a 3000 	ldrb.w	r3, [sl]
 801169c:	2b2a      	cmp	r3, #42	; 0x2a
 801169e:	d015      	beq.n	80116cc <_vfiprintf_r+0x120>
 80116a0:	9a07      	ldr	r2, [sp, #28]
 80116a2:	4654      	mov	r4, sl
 80116a4:	2000      	movs	r0, #0
 80116a6:	f04f 0c0a 	mov.w	ip, #10
 80116aa:	4621      	mov	r1, r4
 80116ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116b0:	3b30      	subs	r3, #48	; 0x30
 80116b2:	2b09      	cmp	r3, #9
 80116b4:	d94d      	bls.n	8011752 <_vfiprintf_r+0x1a6>
 80116b6:	b1b0      	cbz	r0, 80116e6 <_vfiprintf_r+0x13a>
 80116b8:	9207      	str	r2, [sp, #28]
 80116ba:	e014      	b.n	80116e6 <_vfiprintf_r+0x13a>
 80116bc:	eba0 0308 	sub.w	r3, r0, r8
 80116c0:	fa09 f303 	lsl.w	r3, r9, r3
 80116c4:	4313      	orrs	r3, r2
 80116c6:	9304      	str	r3, [sp, #16]
 80116c8:	46a2      	mov	sl, r4
 80116ca:	e7d2      	b.n	8011672 <_vfiprintf_r+0xc6>
 80116cc:	9b03      	ldr	r3, [sp, #12]
 80116ce:	1d19      	adds	r1, r3, #4
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	9103      	str	r1, [sp, #12]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	bfbb      	ittet	lt
 80116d8:	425b      	neglt	r3, r3
 80116da:	f042 0202 	orrlt.w	r2, r2, #2
 80116de:	9307      	strge	r3, [sp, #28]
 80116e0:	9307      	strlt	r3, [sp, #28]
 80116e2:	bfb8      	it	lt
 80116e4:	9204      	strlt	r2, [sp, #16]
 80116e6:	7823      	ldrb	r3, [r4, #0]
 80116e8:	2b2e      	cmp	r3, #46	; 0x2e
 80116ea:	d10c      	bne.n	8011706 <_vfiprintf_r+0x15a>
 80116ec:	7863      	ldrb	r3, [r4, #1]
 80116ee:	2b2a      	cmp	r3, #42	; 0x2a
 80116f0:	d134      	bne.n	801175c <_vfiprintf_r+0x1b0>
 80116f2:	9b03      	ldr	r3, [sp, #12]
 80116f4:	1d1a      	adds	r2, r3, #4
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	9203      	str	r2, [sp, #12]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	bfb8      	it	lt
 80116fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011702:	3402      	adds	r4, #2
 8011704:	9305      	str	r3, [sp, #20]
 8011706:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80117dc <_vfiprintf_r+0x230>
 801170a:	7821      	ldrb	r1, [r4, #0]
 801170c:	2203      	movs	r2, #3
 801170e:	4650      	mov	r0, sl
 8011710:	f7ee fd66 	bl	80001e0 <memchr>
 8011714:	b138      	cbz	r0, 8011726 <_vfiprintf_r+0x17a>
 8011716:	9b04      	ldr	r3, [sp, #16]
 8011718:	eba0 000a 	sub.w	r0, r0, sl
 801171c:	2240      	movs	r2, #64	; 0x40
 801171e:	4082      	lsls	r2, r0
 8011720:	4313      	orrs	r3, r2
 8011722:	3401      	adds	r4, #1
 8011724:	9304      	str	r3, [sp, #16]
 8011726:	f814 1b01 	ldrb.w	r1, [r4], #1
 801172a:	4829      	ldr	r0, [pc, #164]	; (80117d0 <_vfiprintf_r+0x224>)
 801172c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011730:	2206      	movs	r2, #6
 8011732:	f7ee fd55 	bl	80001e0 <memchr>
 8011736:	2800      	cmp	r0, #0
 8011738:	d03f      	beq.n	80117ba <_vfiprintf_r+0x20e>
 801173a:	4b26      	ldr	r3, [pc, #152]	; (80117d4 <_vfiprintf_r+0x228>)
 801173c:	bb1b      	cbnz	r3, 8011786 <_vfiprintf_r+0x1da>
 801173e:	9b03      	ldr	r3, [sp, #12]
 8011740:	3307      	adds	r3, #7
 8011742:	f023 0307 	bic.w	r3, r3, #7
 8011746:	3308      	adds	r3, #8
 8011748:	9303      	str	r3, [sp, #12]
 801174a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801174c:	443b      	add	r3, r7
 801174e:	9309      	str	r3, [sp, #36]	; 0x24
 8011750:	e768      	b.n	8011624 <_vfiprintf_r+0x78>
 8011752:	fb0c 3202 	mla	r2, ip, r2, r3
 8011756:	460c      	mov	r4, r1
 8011758:	2001      	movs	r0, #1
 801175a:	e7a6      	b.n	80116aa <_vfiprintf_r+0xfe>
 801175c:	2300      	movs	r3, #0
 801175e:	3401      	adds	r4, #1
 8011760:	9305      	str	r3, [sp, #20]
 8011762:	4619      	mov	r1, r3
 8011764:	f04f 0c0a 	mov.w	ip, #10
 8011768:	4620      	mov	r0, r4
 801176a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801176e:	3a30      	subs	r2, #48	; 0x30
 8011770:	2a09      	cmp	r2, #9
 8011772:	d903      	bls.n	801177c <_vfiprintf_r+0x1d0>
 8011774:	2b00      	cmp	r3, #0
 8011776:	d0c6      	beq.n	8011706 <_vfiprintf_r+0x15a>
 8011778:	9105      	str	r1, [sp, #20]
 801177a:	e7c4      	b.n	8011706 <_vfiprintf_r+0x15a>
 801177c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011780:	4604      	mov	r4, r0
 8011782:	2301      	movs	r3, #1
 8011784:	e7f0      	b.n	8011768 <_vfiprintf_r+0x1bc>
 8011786:	ab03      	add	r3, sp, #12
 8011788:	9300      	str	r3, [sp, #0]
 801178a:	462a      	mov	r2, r5
 801178c:	4b12      	ldr	r3, [pc, #72]	; (80117d8 <_vfiprintf_r+0x22c>)
 801178e:	a904      	add	r1, sp, #16
 8011790:	4630      	mov	r0, r6
 8011792:	f7fd fc59 	bl	800f048 <_printf_float>
 8011796:	4607      	mov	r7, r0
 8011798:	1c78      	adds	r0, r7, #1
 801179a:	d1d6      	bne.n	801174a <_vfiprintf_r+0x19e>
 801179c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801179e:	07d9      	lsls	r1, r3, #31
 80117a0:	d405      	bmi.n	80117ae <_vfiprintf_r+0x202>
 80117a2:	89ab      	ldrh	r3, [r5, #12]
 80117a4:	059a      	lsls	r2, r3, #22
 80117a6:	d402      	bmi.n	80117ae <_vfiprintf_r+0x202>
 80117a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117aa:	f7fe f9c2 	bl	800fb32 <__retarget_lock_release_recursive>
 80117ae:	89ab      	ldrh	r3, [r5, #12]
 80117b0:	065b      	lsls	r3, r3, #25
 80117b2:	f53f af1d 	bmi.w	80115f0 <_vfiprintf_r+0x44>
 80117b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117b8:	e71c      	b.n	80115f4 <_vfiprintf_r+0x48>
 80117ba:	ab03      	add	r3, sp, #12
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	462a      	mov	r2, r5
 80117c0:	4b05      	ldr	r3, [pc, #20]	; (80117d8 <_vfiprintf_r+0x22c>)
 80117c2:	a904      	add	r1, sp, #16
 80117c4:	4630      	mov	r0, r6
 80117c6:	f7fd fee3 	bl	800f590 <_printf_i>
 80117ca:	e7e4      	b.n	8011796 <_vfiprintf_r+0x1ea>
 80117cc:	08011f9c 	.word	0x08011f9c
 80117d0:	08011fa6 	.word	0x08011fa6
 80117d4:	0800f049 	.word	0x0800f049
 80117d8:	08011589 	.word	0x08011589
 80117dc:	08011fa2 	.word	0x08011fa2

080117e0 <__swbuf_r>:
 80117e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117e2:	460e      	mov	r6, r1
 80117e4:	4614      	mov	r4, r2
 80117e6:	4605      	mov	r5, r0
 80117e8:	b118      	cbz	r0, 80117f2 <__swbuf_r+0x12>
 80117ea:	6a03      	ldr	r3, [r0, #32]
 80117ec:	b90b      	cbnz	r3, 80117f2 <__swbuf_r+0x12>
 80117ee:	f7fe f86b 	bl	800f8c8 <__sinit>
 80117f2:	69a3      	ldr	r3, [r4, #24]
 80117f4:	60a3      	str	r3, [r4, #8]
 80117f6:	89a3      	ldrh	r3, [r4, #12]
 80117f8:	071a      	lsls	r2, r3, #28
 80117fa:	d525      	bpl.n	8011848 <__swbuf_r+0x68>
 80117fc:	6923      	ldr	r3, [r4, #16]
 80117fe:	b31b      	cbz	r3, 8011848 <__swbuf_r+0x68>
 8011800:	6823      	ldr	r3, [r4, #0]
 8011802:	6922      	ldr	r2, [r4, #16]
 8011804:	1a98      	subs	r0, r3, r2
 8011806:	6963      	ldr	r3, [r4, #20]
 8011808:	b2f6      	uxtb	r6, r6
 801180a:	4283      	cmp	r3, r0
 801180c:	4637      	mov	r7, r6
 801180e:	dc04      	bgt.n	801181a <__swbuf_r+0x3a>
 8011810:	4621      	mov	r1, r4
 8011812:	4628      	mov	r0, r5
 8011814:	f7ff fdbc 	bl	8011390 <_fflush_r>
 8011818:	b9e0      	cbnz	r0, 8011854 <__swbuf_r+0x74>
 801181a:	68a3      	ldr	r3, [r4, #8]
 801181c:	3b01      	subs	r3, #1
 801181e:	60a3      	str	r3, [r4, #8]
 8011820:	6823      	ldr	r3, [r4, #0]
 8011822:	1c5a      	adds	r2, r3, #1
 8011824:	6022      	str	r2, [r4, #0]
 8011826:	701e      	strb	r6, [r3, #0]
 8011828:	6962      	ldr	r2, [r4, #20]
 801182a:	1c43      	adds	r3, r0, #1
 801182c:	429a      	cmp	r2, r3
 801182e:	d004      	beq.n	801183a <__swbuf_r+0x5a>
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	07db      	lsls	r3, r3, #31
 8011834:	d506      	bpl.n	8011844 <__swbuf_r+0x64>
 8011836:	2e0a      	cmp	r6, #10
 8011838:	d104      	bne.n	8011844 <__swbuf_r+0x64>
 801183a:	4621      	mov	r1, r4
 801183c:	4628      	mov	r0, r5
 801183e:	f7ff fda7 	bl	8011390 <_fflush_r>
 8011842:	b938      	cbnz	r0, 8011854 <__swbuf_r+0x74>
 8011844:	4638      	mov	r0, r7
 8011846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011848:	4621      	mov	r1, r4
 801184a:	4628      	mov	r0, r5
 801184c:	f000 f806 	bl	801185c <__swsetup_r>
 8011850:	2800      	cmp	r0, #0
 8011852:	d0d5      	beq.n	8011800 <__swbuf_r+0x20>
 8011854:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011858:	e7f4      	b.n	8011844 <__swbuf_r+0x64>
	...

0801185c <__swsetup_r>:
 801185c:	b538      	push	{r3, r4, r5, lr}
 801185e:	4b2a      	ldr	r3, [pc, #168]	; (8011908 <__swsetup_r+0xac>)
 8011860:	4605      	mov	r5, r0
 8011862:	6818      	ldr	r0, [r3, #0]
 8011864:	460c      	mov	r4, r1
 8011866:	b118      	cbz	r0, 8011870 <__swsetup_r+0x14>
 8011868:	6a03      	ldr	r3, [r0, #32]
 801186a:	b90b      	cbnz	r3, 8011870 <__swsetup_r+0x14>
 801186c:	f7fe f82c 	bl	800f8c8 <__sinit>
 8011870:	89a3      	ldrh	r3, [r4, #12]
 8011872:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011876:	0718      	lsls	r0, r3, #28
 8011878:	d422      	bmi.n	80118c0 <__swsetup_r+0x64>
 801187a:	06d9      	lsls	r1, r3, #27
 801187c:	d407      	bmi.n	801188e <__swsetup_r+0x32>
 801187e:	2309      	movs	r3, #9
 8011880:	602b      	str	r3, [r5, #0]
 8011882:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011886:	81a3      	strh	r3, [r4, #12]
 8011888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801188c:	e034      	b.n	80118f8 <__swsetup_r+0x9c>
 801188e:	0758      	lsls	r0, r3, #29
 8011890:	d512      	bpl.n	80118b8 <__swsetup_r+0x5c>
 8011892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011894:	b141      	cbz	r1, 80118a8 <__swsetup_r+0x4c>
 8011896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801189a:	4299      	cmp	r1, r3
 801189c:	d002      	beq.n	80118a4 <__swsetup_r+0x48>
 801189e:	4628      	mov	r0, r5
 80118a0:	f7fe ffd0 	bl	8010844 <_free_r>
 80118a4:	2300      	movs	r3, #0
 80118a6:	6363      	str	r3, [r4, #52]	; 0x34
 80118a8:	89a3      	ldrh	r3, [r4, #12]
 80118aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118ae:	81a3      	strh	r3, [r4, #12]
 80118b0:	2300      	movs	r3, #0
 80118b2:	6063      	str	r3, [r4, #4]
 80118b4:	6923      	ldr	r3, [r4, #16]
 80118b6:	6023      	str	r3, [r4, #0]
 80118b8:	89a3      	ldrh	r3, [r4, #12]
 80118ba:	f043 0308 	orr.w	r3, r3, #8
 80118be:	81a3      	strh	r3, [r4, #12]
 80118c0:	6923      	ldr	r3, [r4, #16]
 80118c2:	b94b      	cbnz	r3, 80118d8 <__swsetup_r+0x7c>
 80118c4:	89a3      	ldrh	r3, [r4, #12]
 80118c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118ce:	d003      	beq.n	80118d8 <__swsetup_r+0x7c>
 80118d0:	4621      	mov	r1, r4
 80118d2:	4628      	mov	r0, r5
 80118d4:	f000 f884 	bl	80119e0 <__smakebuf_r>
 80118d8:	89a0      	ldrh	r0, [r4, #12]
 80118da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118de:	f010 0301 	ands.w	r3, r0, #1
 80118e2:	d00a      	beq.n	80118fa <__swsetup_r+0x9e>
 80118e4:	2300      	movs	r3, #0
 80118e6:	60a3      	str	r3, [r4, #8]
 80118e8:	6963      	ldr	r3, [r4, #20]
 80118ea:	425b      	negs	r3, r3
 80118ec:	61a3      	str	r3, [r4, #24]
 80118ee:	6923      	ldr	r3, [r4, #16]
 80118f0:	b943      	cbnz	r3, 8011904 <__swsetup_r+0xa8>
 80118f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80118f6:	d1c4      	bne.n	8011882 <__swsetup_r+0x26>
 80118f8:	bd38      	pop	{r3, r4, r5, pc}
 80118fa:	0781      	lsls	r1, r0, #30
 80118fc:	bf58      	it	pl
 80118fe:	6963      	ldrpl	r3, [r4, #20]
 8011900:	60a3      	str	r3, [r4, #8]
 8011902:	e7f4      	b.n	80118ee <__swsetup_r+0x92>
 8011904:	2000      	movs	r0, #0
 8011906:	e7f7      	b.n	80118f8 <__swsetup_r+0x9c>
 8011908:	20000178 	.word	0x20000178

0801190c <_raise_r>:
 801190c:	291f      	cmp	r1, #31
 801190e:	b538      	push	{r3, r4, r5, lr}
 8011910:	4604      	mov	r4, r0
 8011912:	460d      	mov	r5, r1
 8011914:	d904      	bls.n	8011920 <_raise_r+0x14>
 8011916:	2316      	movs	r3, #22
 8011918:	6003      	str	r3, [r0, #0]
 801191a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801191e:	bd38      	pop	{r3, r4, r5, pc}
 8011920:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011922:	b112      	cbz	r2, 801192a <_raise_r+0x1e>
 8011924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011928:	b94b      	cbnz	r3, 801193e <_raise_r+0x32>
 801192a:	4620      	mov	r0, r4
 801192c:	f000 f830 	bl	8011990 <_getpid_r>
 8011930:	462a      	mov	r2, r5
 8011932:	4601      	mov	r1, r0
 8011934:	4620      	mov	r0, r4
 8011936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801193a:	f000 b817 	b.w	801196c <_kill_r>
 801193e:	2b01      	cmp	r3, #1
 8011940:	d00a      	beq.n	8011958 <_raise_r+0x4c>
 8011942:	1c59      	adds	r1, r3, #1
 8011944:	d103      	bne.n	801194e <_raise_r+0x42>
 8011946:	2316      	movs	r3, #22
 8011948:	6003      	str	r3, [r0, #0]
 801194a:	2001      	movs	r0, #1
 801194c:	e7e7      	b.n	801191e <_raise_r+0x12>
 801194e:	2400      	movs	r4, #0
 8011950:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011954:	4628      	mov	r0, r5
 8011956:	4798      	blx	r3
 8011958:	2000      	movs	r0, #0
 801195a:	e7e0      	b.n	801191e <_raise_r+0x12>

0801195c <raise>:
 801195c:	4b02      	ldr	r3, [pc, #8]	; (8011968 <raise+0xc>)
 801195e:	4601      	mov	r1, r0
 8011960:	6818      	ldr	r0, [r3, #0]
 8011962:	f7ff bfd3 	b.w	801190c <_raise_r>
 8011966:	bf00      	nop
 8011968:	20000178 	.word	0x20000178

0801196c <_kill_r>:
 801196c:	b538      	push	{r3, r4, r5, lr}
 801196e:	4d07      	ldr	r5, [pc, #28]	; (801198c <_kill_r+0x20>)
 8011970:	2300      	movs	r3, #0
 8011972:	4604      	mov	r4, r0
 8011974:	4608      	mov	r0, r1
 8011976:	4611      	mov	r1, r2
 8011978:	602b      	str	r3, [r5, #0]
 801197a:	f7f0 fb01 	bl	8001f80 <_kill>
 801197e:	1c43      	adds	r3, r0, #1
 8011980:	d102      	bne.n	8011988 <_kill_r+0x1c>
 8011982:	682b      	ldr	r3, [r5, #0]
 8011984:	b103      	cbz	r3, 8011988 <_kill_r+0x1c>
 8011986:	6023      	str	r3, [r4, #0]
 8011988:	bd38      	pop	{r3, r4, r5, pc}
 801198a:	bf00      	nop
 801198c:	20002380 	.word	0x20002380

08011990 <_getpid_r>:
 8011990:	f7f0 baee 	b.w	8001f70 <_getpid>

08011994 <__swhatbuf_r>:
 8011994:	b570      	push	{r4, r5, r6, lr}
 8011996:	460c      	mov	r4, r1
 8011998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801199c:	2900      	cmp	r1, #0
 801199e:	b096      	sub	sp, #88	; 0x58
 80119a0:	4615      	mov	r5, r2
 80119a2:	461e      	mov	r6, r3
 80119a4:	da0d      	bge.n	80119c2 <__swhatbuf_r+0x2e>
 80119a6:	89a3      	ldrh	r3, [r4, #12]
 80119a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80119ac:	f04f 0100 	mov.w	r1, #0
 80119b0:	bf0c      	ite	eq
 80119b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80119b6:	2340      	movne	r3, #64	; 0x40
 80119b8:	2000      	movs	r0, #0
 80119ba:	6031      	str	r1, [r6, #0]
 80119bc:	602b      	str	r3, [r5, #0]
 80119be:	b016      	add	sp, #88	; 0x58
 80119c0:	bd70      	pop	{r4, r5, r6, pc}
 80119c2:	466a      	mov	r2, sp
 80119c4:	f000 f848 	bl	8011a58 <_fstat_r>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	dbec      	blt.n	80119a6 <__swhatbuf_r+0x12>
 80119cc:	9901      	ldr	r1, [sp, #4]
 80119ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80119d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80119d6:	4259      	negs	r1, r3
 80119d8:	4159      	adcs	r1, r3
 80119da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119de:	e7eb      	b.n	80119b8 <__swhatbuf_r+0x24>

080119e0 <__smakebuf_r>:
 80119e0:	898b      	ldrh	r3, [r1, #12]
 80119e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119e4:	079d      	lsls	r5, r3, #30
 80119e6:	4606      	mov	r6, r0
 80119e8:	460c      	mov	r4, r1
 80119ea:	d507      	bpl.n	80119fc <__smakebuf_r+0x1c>
 80119ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119f0:	6023      	str	r3, [r4, #0]
 80119f2:	6123      	str	r3, [r4, #16]
 80119f4:	2301      	movs	r3, #1
 80119f6:	6163      	str	r3, [r4, #20]
 80119f8:	b002      	add	sp, #8
 80119fa:	bd70      	pop	{r4, r5, r6, pc}
 80119fc:	ab01      	add	r3, sp, #4
 80119fe:	466a      	mov	r2, sp
 8011a00:	f7ff ffc8 	bl	8011994 <__swhatbuf_r>
 8011a04:	9900      	ldr	r1, [sp, #0]
 8011a06:	4605      	mov	r5, r0
 8011a08:	4630      	mov	r0, r6
 8011a0a:	f7fd f9f1 	bl	800edf0 <_malloc_r>
 8011a0e:	b948      	cbnz	r0, 8011a24 <__smakebuf_r+0x44>
 8011a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a14:	059a      	lsls	r2, r3, #22
 8011a16:	d4ef      	bmi.n	80119f8 <__smakebuf_r+0x18>
 8011a18:	f023 0303 	bic.w	r3, r3, #3
 8011a1c:	f043 0302 	orr.w	r3, r3, #2
 8011a20:	81a3      	strh	r3, [r4, #12]
 8011a22:	e7e3      	b.n	80119ec <__smakebuf_r+0xc>
 8011a24:	89a3      	ldrh	r3, [r4, #12]
 8011a26:	6020      	str	r0, [r4, #0]
 8011a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a2c:	81a3      	strh	r3, [r4, #12]
 8011a2e:	9b00      	ldr	r3, [sp, #0]
 8011a30:	6163      	str	r3, [r4, #20]
 8011a32:	9b01      	ldr	r3, [sp, #4]
 8011a34:	6120      	str	r0, [r4, #16]
 8011a36:	b15b      	cbz	r3, 8011a50 <__smakebuf_r+0x70>
 8011a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	f000 f81d 	bl	8011a7c <_isatty_r>
 8011a42:	b128      	cbz	r0, 8011a50 <__smakebuf_r+0x70>
 8011a44:	89a3      	ldrh	r3, [r4, #12]
 8011a46:	f023 0303 	bic.w	r3, r3, #3
 8011a4a:	f043 0301 	orr.w	r3, r3, #1
 8011a4e:	81a3      	strh	r3, [r4, #12]
 8011a50:	89a3      	ldrh	r3, [r4, #12]
 8011a52:	431d      	orrs	r5, r3
 8011a54:	81a5      	strh	r5, [r4, #12]
 8011a56:	e7cf      	b.n	80119f8 <__smakebuf_r+0x18>

08011a58 <_fstat_r>:
 8011a58:	b538      	push	{r3, r4, r5, lr}
 8011a5a:	4d07      	ldr	r5, [pc, #28]	; (8011a78 <_fstat_r+0x20>)
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	4604      	mov	r4, r0
 8011a60:	4608      	mov	r0, r1
 8011a62:	4611      	mov	r1, r2
 8011a64:	602b      	str	r3, [r5, #0]
 8011a66:	f7f0 faea 	bl	800203e <_fstat>
 8011a6a:	1c43      	adds	r3, r0, #1
 8011a6c:	d102      	bne.n	8011a74 <_fstat_r+0x1c>
 8011a6e:	682b      	ldr	r3, [r5, #0]
 8011a70:	b103      	cbz	r3, 8011a74 <_fstat_r+0x1c>
 8011a72:	6023      	str	r3, [r4, #0]
 8011a74:	bd38      	pop	{r3, r4, r5, pc}
 8011a76:	bf00      	nop
 8011a78:	20002380 	.word	0x20002380

08011a7c <_isatty_r>:
 8011a7c:	b538      	push	{r3, r4, r5, lr}
 8011a7e:	4d06      	ldr	r5, [pc, #24]	; (8011a98 <_isatty_r+0x1c>)
 8011a80:	2300      	movs	r3, #0
 8011a82:	4604      	mov	r4, r0
 8011a84:	4608      	mov	r0, r1
 8011a86:	602b      	str	r3, [r5, #0]
 8011a88:	f7f0 fae9 	bl	800205e <_isatty>
 8011a8c:	1c43      	adds	r3, r0, #1
 8011a8e:	d102      	bne.n	8011a96 <_isatty_r+0x1a>
 8011a90:	682b      	ldr	r3, [r5, #0]
 8011a92:	b103      	cbz	r3, 8011a96 <_isatty_r+0x1a>
 8011a94:	6023      	str	r3, [r4, #0]
 8011a96:	bd38      	pop	{r3, r4, r5, pc}
 8011a98:	20002380 	.word	0x20002380

08011a9c <_init>:
 8011a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a9e:	bf00      	nop
 8011aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aa2:	bc08      	pop	{r3}
 8011aa4:	469e      	mov	lr, r3
 8011aa6:	4770      	bx	lr

08011aa8 <_fini>:
 8011aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aaa:	bf00      	nop
 8011aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aae:	bc08      	pop	{r3}
 8011ab0:	469e      	mov	lr, r3
 8011ab2:	4770      	bx	lr
