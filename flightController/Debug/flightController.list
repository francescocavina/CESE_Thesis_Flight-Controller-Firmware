
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08012250  08012250  00022250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012890  08012890  000302e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012890  08012890  00022890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012898  08012898  000302e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012898  08012898  00022898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801289c  0801289c  0002289c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  080128a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020cc  200002e8  08012b88  000302e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023b4  08012b88  000323b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026de5  00000000  00000000  0003035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000611f  00000000  00000000  00057140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002130  00000000  00000000  0005d260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000198f  00000000  00000000  0005f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ee1  00000000  00000000  00060d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cfbe  00000000  00000000  00081c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad607  00000000  00000000  000aebbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009ae0  00000000  00000000  0015c1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00165ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012234 	.word	0x08012234

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	08012234 	.word	0x08012234

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 2UL), &FlightController_StartUp_Handle);
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	4927      	ldr	r1, [pc, #156]	; (8001048 <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000faa:	4828      	ldr	r0, [pc, #160]	; (800104c <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000fac:	f00b fec9 	bl	800cd42 <xTaskCreate>
 8000fb0:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00a      	beq.n	8000fce <FreeRTOS_CreateStartUpTasks+0x3a>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI(void) {
    uint32_t ulNewBASEPRI;

    __asm volatile("	mov %0, %1												\n"
 8000fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbc:	f383 8811 	msr	BASEPRI, r3
 8000fc0:	f3bf 8f6f 	isb	sy
 8000fc4:	f3bf 8f4f 	dsb	sy
 8000fc8:	60bb      	str	r3, [r7, #8]
                   "	isb														\n"
                   "	dsb														\n"
                   : "=r"(ulNewBASEPRI)
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");
}
 8000fca:	bf00      	nop
 8000fcc:	e7fe      	b.n	8000fcc <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d104      	bne.n	8000fe0 <FreeRTOS_CreateStartUpTasks+0x4c>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00b ffe8 	bl	800cfb0 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_OnOffButton_Handle);
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fee:	4919      	ldr	r1, [pc, #100]	; (8001054 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000ff2:	f00b fea6 	bl	800cd42 <xTaskCreate>
 8000ff6:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00a      	beq.n	8001014 <FreeRTOS_CreateStartUpTasks+0x80>
    __asm volatile("	mov %0, %1												\n"
 8000ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	607b      	str	r3, [r7, #4]
}
 8001010:	bf00      	nop
 8001012:	e7fe      	b.n	8001012 <FreeRTOS_CreateStartUpTasks+0x7e>

    if (FlightController_OnOffButton_Handle == NULL) {
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <FreeRTOS_CreateStartUpTasks+0x92>
        vTaskDelete(FlightController_OnOffButton_Handle);
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f00b ffc5 	bl	800cfb0 <vTaskDelete>
    }

    /* Timer: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <FreeRTOS_CreateStartUpTasks+0xc8>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	2201      	movs	r2, #1
 800102e:	2164      	movs	r1, #100	; 0x64
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001032:	f00c fea5 	bl	800dd80 <xTimerCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000304 	.word	0x20000304
 8001048:	08012250 	.word	0x08012250
 800104c:	08001319 	.word	0x08001319
 8001050:	20000318 	.word	0x20000318
 8001054:	0801226c 	.word	0x0801226c
 8001058:	080015e5 	.word	0x080015e5
 800105c:	08001779 	.word	0x08001779
 8001060:	0801228c 	.word	0x0801228c
 8001064:	2000032c 	.word	0x2000032c

08001068 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_ControlSystem_Handle);
 800106e:	4b8e      	ldr	r3, [pc, #568]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2303      	movs	r3, #3
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	498b      	ldr	r1, [pc, #556]	; (80012ac <FreeRTOS_CreateTasks+0x244>)
 800107e:	488c      	ldr	r0, [pc, #560]	; (80012b0 <FreeRTOS_CreateTasks+0x248>)
 8001080:	f00b fe5f 	bl	800cd42 <xTaskCreate>
 8001084:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00a      	beq.n	80010a2 <FreeRTOS_CreateTasks+0x3a>
    __asm volatile("	mov %0, %1												\n"
 800108c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001090:	f383 8811 	msr	BASEPRI, r3
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	623b      	str	r3, [r7, #32]
}
 800109e:	bf00      	nop
 80010a0:	e7fe      	b.n	80010a0 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_ControlSystem_Handle == NULL) {
 80010a2:	4b81      	ldr	r3, [pc, #516]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <FreeRTOS_CreateTasks+0x4c>
        vTaskDelete(FlightController_ControlSystem_Handle);
 80010aa:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <FreeRTOS_CreateTasks+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00b ff7e 	bl	800cfb0 <vTaskDelete>
    }

    /* Task 2: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_FSA8S_Handle);
 80010b4:	4b7f      	ldr	r3, [pc, #508]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2303      	movs	r3, #3
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c2:	497d      	ldr	r1, [pc, #500]	; (80012b8 <FreeRTOS_CreateTasks+0x250>)
 80010c4:	487d      	ldr	r0, [pc, #500]	; (80012bc <FreeRTOS_CreateTasks+0x254>)
 80010c6:	f00b fe3c 	bl	800cd42 <xTaskCreate>
 80010ca:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d00a      	beq.n	80010e8 <FreeRTOS_CreateTasks+0x80>
    __asm volatile("	mov %0, %1												\n"
 80010d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	61fb      	str	r3, [r7, #28]
}
 80010e4:	bf00      	nop
 80010e6:	e7fe      	b.n	80010e6 <FreeRTOS_CreateTasks+0x7e>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 80010e8:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <FreeRTOS_CreateTasks+0x92>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 80010f0:	4b70      	ldr	r3, [pc, #448]	; (80012b4 <FreeRTOS_CreateTasks+0x24c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00b ff5b 	bl	800cfb0 <vTaskDelete>
    }

    /* Task 3: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (6 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_GY87_Handle);
 80010fa:	4b71      	ldr	r3, [pc, #452]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2303      	movs	r3, #3
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001108:	496e      	ldr	r1, [pc, #440]	; (80012c4 <FreeRTOS_CreateTasks+0x25c>)
 800110a:	486f      	ldr	r0, [pc, #444]	; (80012c8 <FreeRTOS_CreateTasks+0x260>)
 800110c:	f00b fe19 	bl	800cd42 <xTaskCreate>
 8001110:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	2b01      	cmp	r3, #1
 8001116:	d00a      	beq.n	800112e <FreeRTOS_CreateTasks+0xc6>
    __asm volatile("	mov %0, %1												\n"
 8001118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	61bb      	str	r3, [r7, #24]
}
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <FreeRTOS_CreateTasks+0xc4>

    if (FlightController_Read_GY87_Handle == NULL) {
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <FreeRTOS_CreateTasks+0xd8>
        vTaskDelete(FlightController_Read_GY87_Handle);
 8001136:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <FreeRTOS_CreateTasks+0x258>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f00b ff38 	bl	800cfb0 <vTaskDelete>
    }

    /* Task 4: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Write_ESCs_Handle);
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	2303      	movs	r3, #3
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	4960      	ldr	r1, [pc, #384]	; (80012d0 <FreeRTOS_CreateTasks+0x268>)
 8001150:	4860      	ldr	r0, [pc, #384]	; (80012d4 <FreeRTOS_CreateTasks+0x26c>)
 8001152:	f00b fdf6 	bl	800cd42 <xTaskCreate>
 8001156:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	2b01      	cmp	r3, #1
 800115c:	d00a      	beq.n	8001174 <FreeRTOS_CreateTasks+0x10c>
    __asm volatile("	mov %0, %1												\n"
 800115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001162:	f383 8811 	msr	BASEPRI, r3
 8001166:	f3bf 8f6f 	isb	sy
 800116a:	f3bf 8f4f 	dsb	sy
 800116e:	617b      	str	r3, [r7, #20]
}
 8001170:	bf00      	nop
 8001172:	e7fe      	b.n	8001172 <FreeRTOS_CreateTasks+0x10a>

    if (FlightController_Write_ESCs_Handle == NULL) {
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x11e>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <FreeRTOS_CreateTasks+0x264>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00b ff15 	bl	800cfb0 <vTaskDelete>
    }

    /* Task 5: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryLevel_Handle);
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2301      	movs	r3, #1
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001194:	4951      	ldr	r1, [pc, #324]	; (80012dc <FreeRTOS_CreateTasks+0x274>)
 8001196:	4852      	ldr	r0, [pc, #328]	; (80012e0 <FreeRTOS_CreateTasks+0x278>)
 8001198:	f00b fdd3 	bl	800cd42 <xTaskCreate>
 800119c:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00a      	beq.n	80011ba <FreeRTOS_CreateTasks+0x152>
    __asm volatile("	mov %0, %1												\n"
 80011a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	613b      	str	r3, [r7, #16]
}
 80011b6:	bf00      	nop
 80011b8:	e7fe      	b.n	80011b8 <FreeRTOS_CreateTasks+0x150>

    if (FlightController_BatteryLevel_Handle == NULL) {
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <FreeRTOS_CreateTasks+0x164>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 80011c2:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <FreeRTOS_CreateTasks+0x270>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00b fef2 	bl	800cfb0 <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryAlarm */
    ret = xTaskCreate(FlightController_BatteryAlarm, "FlightController_BatteryAlarm", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryAlarm_Handle);
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	4943      	ldr	r1, [pc, #268]	; (80012e8 <FreeRTOS_CreateTasks+0x280>)
 80011dc:	4843      	ldr	r0, [pc, #268]	; (80012ec <FreeRTOS_CreateTasks+0x284>)
 80011de:	f00b fdb0 	bl	800cd42 <xTaskCreate>
 80011e2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d00a      	beq.n	8001200 <FreeRTOS_CreateTasks+0x198>
    __asm volatile("	mov %0, %1												\n"
 80011ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ee:	f383 8811 	msr	BASEPRI, r3
 80011f2:	f3bf 8f6f 	isb	sy
 80011f6:	f3bf 8f4f 	dsb	sy
 80011fa:	60fb      	str	r3, [r7, #12]
}
 80011fc:	bf00      	nop
 80011fe:	e7fe      	b.n	80011fe <FreeRTOS_CreateTasks+0x196>

    if (FlightController_BatteryAlarm_Handle == NULL) {
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <FreeRTOS_CreateTasks+0x1aa>
        vTaskDelete(FlightController_BatteryAlarm_Handle);
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <FreeRTOS_CreateTasks+0x27c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f00b fecf 	bl	800cfb0 <vTaskDelete>
    }

    /* Task 7: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_HeartbeatLight_Handle);
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2303      	movs	r3, #3
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	4934      	ldr	r1, [pc, #208]	; (80012f4 <FreeRTOS_CreateTasks+0x28c>)
 8001222:	4835      	ldr	r0, [pc, #212]	; (80012f8 <FreeRTOS_CreateTasks+0x290>)
 8001224:	f00b fd8d 	bl	800cd42 <xTaskCreate>
 8001228:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00a      	beq.n	8001246 <FreeRTOS_CreateTasks+0x1de>
    __asm volatile("	mov %0, %1												\n"
 8001230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001234:	f383 8811 	msr	BASEPRI, r3
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f3bf 8f4f 	dsb	sy
 8001240:	60bb      	str	r3, [r7, #8]
}
 8001242:	bf00      	nop
 8001244:	e7fe      	b.n	8001244 <FreeRTOS_CreateTasks+0x1dc>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d104      	bne.n	8001258 <FreeRTOS_CreateTasks+0x1f0>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <FreeRTOS_CreateTasks+0x288>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f00b feac 	bl	800cfb0 <vTaskDelete>
    }

    /* Task 8: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_FlightLights_Handle);
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2301      	movs	r3, #1
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001266:	4926      	ldr	r1, [pc, #152]	; (8001300 <FreeRTOS_CreateTasks+0x298>)
 8001268:	4826      	ldr	r0, [pc, #152]	; (8001304 <FreeRTOS_CreateTasks+0x29c>)
 800126a:	f00b fd6a 	bl	800cd42 <xTaskCreate>
 800126e:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	2b01      	cmp	r3, #1
 8001274:	d00a      	beq.n	800128c <FreeRTOS_CreateTasks+0x224>
    __asm volatile("	mov %0, %1												\n"
 8001276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127a:	f383 8811 	msr	BASEPRI, r3
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	607b      	str	r3, [r7, #4]
}
 8001288:	bf00      	nop
 800128a:	e7fe      	b.n	800128a <FreeRTOS_CreateTasks+0x222>

    if (FlightController_FlightLights_Handle == NULL) {
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d104      	bne.n	800129e <FreeRTOS_CreateTasks+0x236>
        vTaskDelete(FlightController_FlightLights_Handle);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <FreeRTOS_CreateTasks+0x294>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f00b fe89 	bl	800cfb0 <vTaskDelete>
    }
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000308 	.word	0x20000308
 80012ac:	0801229c 	.word	0x0801229c
 80012b0:	0800139d 	.word	0x0800139d
 80012b4:	2000030c 	.word	0x2000030c
 80012b8:	080122bc 	.word	0x080122bc
 80012bc:	08001405 	.word	0x08001405
 80012c0:	20000310 	.word	0x20000310
 80012c4:	080122d8 	.word	0x080122d8
 80012c8:	08001465 	.word	0x08001465
 80012cc:	20000314 	.word	0x20000314
 80012d0:	080122f4 	.word	0x080122f4
 80012d4:	08001541 	.word	0x08001541
 80012d8:	2000031c 	.word	0x2000031c
 80012dc:	08012310 	.word	0x08012310
 80012e0:	08001641 	.word	0x08001641
 80012e4:	20000320 	.word	0x20000320
 80012e8:	08012330 	.word	0x08012330
 80012ec:	08001715 	.word	0x08001715
 80012f0:	20000324 	.word	0x20000324
 80012f4:	08012350 	.word	0x08012350
 80012f8:	08001729 	.word	0x08001729
 80012fc:	20000328 	.word	0x20000328
 8001300:	08012370 	.word	0x08012370
 8001304:	08001765 	.word	0x08001765

08001308 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001320:	2314      	movs	r3, #20
 8001322:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED on */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <FlightController_StartUp+0x60>)
 800132c:	f003 fa2c 	bl	8004788 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_running) {
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <FlightController_StartUp+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01a      	beq.n	800136e <FlightController_StartUp+0x56>

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001338:	f7ff fe96 	bl	8001068 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 800133c:	f7ff ffe4 	bl	8001308 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <FlightController_StartUp+0x68>)
 8001342:	f001 fae1 	bl	8002908 <FSA8S_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <FlightController_StartUp+0x6c>)
 800134a:	6013      	str	r3, [r2, #0]
            hgy87 = GY87_Init(&hi2c1);
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <FlightController_StartUp+0x70>)
 800134e:	f001 fea3 	bl	8003098 <GY87_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <FlightController_StartUp+0x74>)
 8001356:	6013      	str	r3, [r2, #0]
            hesc = ESC_Init(&htim3);
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <FlightController_StartUp+0x78>)
 800135a:	f001 f951 	bl	8002600 <ESC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <FlightController_StartUp+0x7c>)
 8001362:	6013      	str	r3, [r2, #0]

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <FlightController_StartUp+0x80>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f00b fe21 	bl	800cfb0 <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f00b feae 	bl	800d0d0 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001374:	e7d6      	b.n	8001324 <FlightController_StartUp+0xc>
 8001376:	bf00      	nop
 8001378:	40020800 	.word	0x40020800
 800137c:	20000331 	.word	0x20000331
 8001380:	20000b20 	.word	0x20000b20
 8001384:	20000334 	.word	0x20000334
 8001388:	20000a84 	.word	0x20000a84
 800138c:	20000338 	.word	0x20000338
 8001390:	20000ad8 	.word	0x20000ad8
 8001394:	2000033c 	.word	0x2000033c
 8001398:	20000304 	.word	0x20000304

0800139c <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_CONTROL_SYSTEM
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80013a4:	2314      	movs	r3, #20
 80013a6:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Set ESCs speeds */
        ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013aa:	889b      	ldrh	r3, [r3, #4]
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013b8:	801a      	strh	r2, [r3, #0]
        ESC_speeds[1] = FSA8S_channelValues[2] / 10;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013bc:	889b      	ldrh	r3, [r3, #4]
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013ca:	805a      	strh	r2, [r3, #2]
        ESC_speeds[2] = FSA8S_channelValues[2] / 10;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013ce:	889b      	ldrh	r3, [r3, #4]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	08db      	lsrs	r3, r3, #3
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013dc:	809a      	strh	r2, [r3, #4]
        ESC_speeds[3] = FSA8S_channelValues[2] / 10;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <FlightController_ControlSystem+0x5c>)
 80013e0:	889b      	ldrh	r3, [r3, #4]
 80013e2:	4a06      	ldr	r2, [pc, #24]	; (80013fc <FlightController_ControlSystem+0x60>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <FlightController_ControlSystem+0x64>)
 80013ee:	80da      	strh	r2, [r3, #6]

        /* Set task time delay */
        vTaskDelay(xDelay);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f00b fe6d 	bl	800d0d0 <vTaskDelay>
        ESC_speeds[0] = FSA8S_channelValues[2] / 10;
 80013f6:	e7d7      	b.n	80013a8 <FlightController_ControlSystem+0xc>
 80013f8:	20000340 	.word	0x20000340
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	20000368 	.word	0x20000368

08001404 <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

    FSA8S_CHANNEL_t channels[FSA8S_CHANNELS] = {CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7, CHANNEL_8, CHANNEL_9, CHANNEL_10};
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <FlightController_Read_FSA8S+0x54>)
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	ca07      	ldmia	r2, {r0, r1, r2}
 8001414:	c303      	stmia	r3!, {r0, r1}
 8001416:	801a      	strh	r2, [r3, #0]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FSA8S
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001418:	2314      	movs	r3, #20
 800141a:	61bb      	str	r3, [r7, #24]
#endif

    while (1) {

        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 800141c:	2300      	movs	r3, #0
 800141e:	77fb      	strb	r3, [r7, #31]
 8001420:	e013      	b.n	800144a <FlightController_Read_FSA8S+0x46>
            /* Read channels */
            FSA8S_channelValues[i] = FSA8S_ReadChannel(rc_controller, channels[i]);
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <FlightController_Read_FSA8S+0x58>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	3320      	adds	r3, #32
 800142a:	443b      	add	r3, r7
 800142c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001430:	7ffc      	ldrb	r4, [r7, #31]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f001 fac1 	bl	80029bc <FSA8S_ReadChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <FlightController_Read_FSA8S+0x5c>)
 8001440:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	3301      	adds	r3, #1
 8001448:	77fb      	strb	r3, [r7, #31]
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d9e8      	bls.n	8001422 <FlightController_Read_FSA8S+0x1e>
            LOG(loggingStr, LOG_INFORMATION);
#endif
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001450:	69b8      	ldr	r0, [r7, #24]
 8001452:	f00b fe3d 	bl	800d0d0 <vTaskDelay>
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001456:	e7e1      	b.n	800141c <FlightController_Read_FSA8S+0x18>
 8001458:	08012390 	.word	0x08012390
 800145c:	20000334 	.word	0x20000334
 8001460:	20000340 	.word	0x20000340

08001464 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    /* Change delay from time in [ms] to ticks */
#if defined MAIN_APP_USE_LOGGING_GY87_GYROSCOPE || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER || defined MAIN_APP_USE_LOGGING_GY87_TEMPERATURE || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER ||                                                 \
    defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER_HEADING || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_PRESSURE || MAIN_APP_USE_LOGGING_GY87_BAROMETER_ALTITUDE
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800146c:	2314      	movs	r3, #20
 800146e:	60fb      	str	r3, [r7, #12]
#endif

    /* Allocate dynamic memory for the MPU6050 gyroscope values */
    GY87_gyroscopeValues = pvPortMalloc(sizeof(GY87_gyroscopeValues));
 8001470:	2004      	movs	r0, #4
 8001472:	f00d fa79 	bl	800e968 <pvPortMalloc>
 8001476:	4603      	mov	r3, r0
 8001478:	4a2b      	ldr	r2, [pc, #172]	; (8001528 <FlightController_Read_GY87+0xc4>)
 800147a:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_gyroscopeValues) {
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <FlightController_Read_GY87+0xc4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d104      	bne.n	800148e <FlightController_Read_GY87+0x2a>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_gyroscopeValues);
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <FlightController_Read_GY87+0xc4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f00d fa7f 	bl	800e98c <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 accelerometer values */
    GY87_accelerometerValues = pvPortMalloc(sizeof(GY87_accelerometerValues));
 800148e:	2004      	movs	r0, #4
 8001490:	f00d fa6a 	bl	800e968 <pvPortMalloc>
 8001494:	4603      	mov	r3, r0
 8001496:	4a25      	ldr	r2, [pc, #148]	; (800152c <FlightController_Read_GY87+0xc8>)
 8001498:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_accelerometerValues) {
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <FlightController_Read_GY87+0xc8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d104      	bne.n	80014ac <FlightController_Read_GY87+0x48>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_accelerometerValues);
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <FlightController_Read_GY87+0xc8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00d fa70 	bl	800e98c <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 magnetometer values */
    GY87_magnetometerValues = pvPortMalloc(sizeof(GY87_magnetometerValues));
 80014ac:	2004      	movs	r0, #4
 80014ae:	f00d fa5b 	bl	800e968 <pvPortMalloc>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <FlightController_Read_GY87+0xcc>)
 80014b6:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_magnetometerValues) {
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <FlightController_Read_GY87+0xcc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d104      	bne.n	80014ca <FlightController_Read_GY87+0x66>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_magnetometerValues);
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <FlightController_Read_GY87+0xcc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00d fa61 	bl	800e98c <vPortFree>
    }

    while (1) {

        /* Read GY87 gyroscope values */
        GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <FlightController_Read_GY87+0xd0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <FlightController_Read_GY87+0xc4>)
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 fe17 	bl	8003108 <GY87_ReadGyroscope>
        sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope Z: %d\r\n\n", GY87_gyroscopeValues->gyroscopeZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 accelerometer values */
        GY87_ReadAccelerometer(hgy87, GY87_accelerometerValues);
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <FlightController_Read_GY87+0xd0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <FlightController_Read_GY87+0xc8>)
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fe79 	bl	80031dc <GY87_ReadAccelerometer>
        sprintf((char *)loggingStr, (const char *)"GY87 Accelerometer Z: %d\r\n\n", GY87_accelerometerValues->accelerometerZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 temperature value */
        GY87_temperature = GY87_ReadTemperatureSensor(hgy87);
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <FlightController_Read_GY87+0xd0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fedf 	bl	80032b2 <GY87_ReadTemperatureSensor>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <FlightController_Read_GY87+0xd4>)
 80014fa:	801a      	strh	r2, [r3, #0]
        sprintf((char *)loggingStr, (const char *)"GY87 Temperature: %d°C\r\n\n", GY87_temperature);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 magnetometer values */
        GY87_ReadMagnetometer(hgy87, GY87_magnetometerValues);
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <FlightController_Read_GY87+0xd0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <FlightController_Read_GY87+0xcc>)
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f001 ff01 	bl	800330e <GY87_ReadMagnetometer>
        sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer Z: %d\r\n\n", GY87_magnetometerValues->magnetometerZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 magnetometer heading */
        GY87_magnetometerHeadingValue = GY87_ReadMagnetometerHeading(hgy87);
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <FlightController_Read_GY87+0xd0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f001 ff69 	bl	80033e8 <GY87_ReadMagnetometerHeading>
 8001516:	eef0 7a40 	vmov.f32	s15, s0
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <FlightController_Read_GY87+0xd8>)
 800151c:	edc3 7a00 	vstr	s15, [r3]
        sprintf((char *)loggingStr, (const char *)"GY87 Barometer Altitude: %.2fDEFINE\r\n", GY87_barometerAltitudeValue);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f00b fdd5 	bl	800d0d0 <vTaskDelay>
        GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 8001526:	e7d0      	b.n	80014ca <FlightController_Read_GY87+0x66>
 8001528:	20000358 	.word	0x20000358
 800152c:	2000035c 	.word	0x2000035c
 8001530:	20000360 	.word	0x20000360
 8001534:	20000338 	.word	0x20000338
 8001538:	20000354 	.word	0x20000354
 800153c:	20000364 	.word	0x20000364

08001540 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_ESC
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001548:	2314      	movs	r3, #20
 800154a:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <FlightController_Write_ESCs+0x9c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <FlightController_Write_ESCs+0x9c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	4922      	ldr	r1, [pc, #136]	; (80015e0 <FlightController_Write_ESCs+0xa0>)
 8001558:	8809      	ldrh	r1, [r1, #0]
 800155a:	ee07 1a90 	vmov	s15, r1
 800155e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	4619      	mov	r1, r3
 8001568:	4610      	mov	r0, r2
 800156a:	f001 f88d 	bl	8002688 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[1]);
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <FlightController_Write_ESCs+0x9c>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <FlightController_Write_ESCs+0x9c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	4919      	ldr	r1, [pc, #100]	; (80015e0 <FlightController_Write_ESCs+0xa0>)
 800157a:	8849      	ldrh	r1, [r1, #2]
 800157c:	ee07 1a90 	vmov	s15, r1
 8001580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001584:	eeb0 0a67 	vmov.f32	s0, s15
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f001 f87c 	bl	8002688 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[2]);
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <FlightController_Write_ESCs+0x9c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <FlightController_Write_ESCs+0x9c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	799b      	ldrb	r3, [r3, #6]
 800159a:	4911      	ldr	r1, [pc, #68]	; (80015e0 <FlightController_Write_ESCs+0xa0>)
 800159c:	8889      	ldrh	r1, [r1, #4]
 800159e:	ee07 1a90 	vmov	s15, r1
 80015a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a6:	eeb0 0a67 	vmov.f32	s0, s15
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f001 f86b 	bl	8002688 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[3]);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <FlightController_Write_ESCs+0x9c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <FlightController_Write_ESCs+0x9c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	79db      	ldrb	r3, [r3, #7]
 80015bc:	4908      	ldr	r1, [pc, #32]	; (80015e0 <FlightController_Write_ESCs+0xa0>)
 80015be:	88c9      	ldrh	r1, [r1, #6]
 80015c0:	ee07 1a90 	vmov	s15, r1
 80015c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f001 f85a 	bl	8002688 <ESC_SetSpeed>
        sprintf((char *)loggingStr, (const char *)"PWM Channel 4 Speed: %d\r\n\n", ESC_speeds[3]);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f00b fd7b 	bl	800d0d0 <vTaskDelay>
        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[0]);
 80015da:	e7b7      	b.n	800154c <FlightController_Write_ESCs+0xc>
 80015dc:	2000033c 	.word	0x2000033c
 80015e0:	20000368 	.word	0x20000368

080015e4 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80015ec:	2314      	movs	r3, #20
 80015ee:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80015f0:	2120      	movs	r1, #32
 80015f2:	4810      	ldr	r0, [pc, #64]	; (8001634 <FlightController_OnOffButton+0x50>)
 80015f4:	f003 f8b0 	bl	8004758 <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d115      	bne.n	800162a <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <FlightController_OnOffButton+0x54>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f083 0301 	eor.w	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00e      	beq.n	800162a <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <FlightController_OnOffButton+0x58>)
 800160e:	681c      	ldr	r4, [r3, #0]
 8001610:	f00b ff34 	bl	800d47c <xTaskGetTickCount>
 8001614:	4602      	mov	r2, r0
 8001616:	2300      	movs	r3, #0
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	2101      	movs	r1, #1
 800161e:	4620      	mov	r0, r4
 8001620:	f00c fc0a 	bl	800de38 <xTimerGenericCommand>
                Timer1_running = true;
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <FlightController_OnOffButton+0x54>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f00b fd50 	bl	800d0d0 <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001630:	e7de      	b.n	80015f0 <FlightController_OnOffButton+0xc>
 8001632:	bf00      	nop
 8001634:	40020400 	.word	0x40020400
 8001638:	20000330 	.word	0x20000330
 800163c:	2000032c 	.word	0x2000032c

08001640 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001648:	2314      	movs	r3, #20
 800164a:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 800164c:	482e      	ldr	r0, [pc, #184]	; (8001708 <FlightController_BatteryLevel+0xc8>)
 800164e:	f002 f883 	bl	8003758 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001652:	2101      	movs	r1, #1
 8001654:	482c      	ldr	r0, [pc, #176]	; (8001708 <FlightController_BatteryLevel+0xc8>)
 8001656:	f002 f933 	bl	80038c0 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 800165a:	482b      	ldr	r0, [pc, #172]	; (8001708 <FlightController_BatteryLevel+0xc8>)
 800165c:	f002 f9bb 	bl	80039d6 <HAL_ADC_GetValue>
 8001660:	4603      	mov	r3, r0
 8001662:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevel = (adcValue * 3.3) / 4096;
 8001664:	897b      	ldrh	r3, [r7, #10]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff64 	bl	8000534 <__aeabi_i2d>
 800166c:	a320      	add	r3, pc, #128	; (adr r3, 80016f0 <FlightController_BatteryLevel+0xb0>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ffc9 	bl	8000608 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <FlightController_BatteryLevel+0xcc>)
 8001684:	f7ff f8ea 	bl	800085c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fab2 	bl	8000bf8 <__aeabi_d2f>
 8001694:	4603      	mov	r3, r0
 8001696:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <FlightController_BatteryLevel+0xd0>)
 8001698:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevel = FlightController_batteryLevel * 1.046046;
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <FlightController_BatteryLevel+0xd0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff5a 	bl	8000558 <__aeabi_f2d>
 80016a4:	a314      	add	r3, pc, #80	; (adr r3, 80016f8 <FlightController_BatteryLevel+0xb8>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe ffad 	bl	8000608 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff fa9f 	bl	8000bf8 <__aeabi_d2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <FlightController_BatteryLevel+0xd0>)
 80016be:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevel = FlightController_batteryLevel * 3.363636;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <FlightController_BatteryLevel+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff47 	bl	8000558 <__aeabi_f2d>
 80016ca:	a30d      	add	r3, pc, #52	; (adr r3, 8001700 <FlightController_BatteryLevel+0xc0>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff9a 	bl	8000608 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa8c 	bl	8000bf8 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <FlightController_BatteryLevel+0xd0>)
 80016e4:	6013      	str	r3, [r2, #0]
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f[V]\r\n\n", FlightController_batteryLevel);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f00b fcf2 	bl	800d0d0 <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 80016ec:	e7ae      	b.n	800164c <FlightController_BatteryLevel+0xc>
 80016ee:	bf00      	nop
 80016f0:	66666666 	.word	0x66666666
 80016f4:	400a6666 	.word	0x400a6666
 80016f8:	bb01c92e 	.word	0xbb01c92e
 80016fc:	3ff0bc9a 	.word	0x3ff0bc9a
 8001700:	fdbd2fa1 	.word	0xfdbd2fa1
 8001704:	400ae8b9 	.word	0x400ae8b9
 8001708:	20000a3c 	.word	0x20000a3c
 800170c:	40b00000 	.word	0x40b00000
 8001710:	20000370 	.word	0x20000370

08001714 <FlightController_BatteryAlarm>:
    }
}

void FlightController_BatteryAlarm(void * ptr) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800171c:	2314      	movs	r3, #20
 800171e:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f00b fcd5 	bl	800d0d0 <vTaskDelay>
 8001726:	e7fb      	b.n	8001720 <FlightController_BatteryAlarm+0xc>

08001728 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 8001734:	23fa      	movs	r3, #250	; 0xfa
 8001736:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	461a      	mov	r2, r3
 800173c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001740:	4807      	ldr	r0, [pc, #28]	; (8001760 <FlightController_HeartbeatLight+0x38>)
 8001742:	f003 f821 	bl	8004788 <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e001      	b.n	8001756 <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001756:	68b8      	ldr	r0, [r7, #8]
 8001758:	f00b fcba 	bl	800d0d0 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 800175c:	e7ec      	b.n	8001738 <FlightController_HeartbeatLight+0x10>
 800175e:	bf00      	nop
 8001760:	40020800 	.word	0x40020800

08001764 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800176c:	2314      	movs	r3, #20
 800176e:	60fb      	str	r3, [r7, #12]
        //    	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
        //    	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
        //    	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f00b fcad 	bl	800d0d0 <vTaskDelay>
 8001776:	e7fb      	b.n	8001770 <FlightController_FlightLights+0xc>

08001778 <Timer1_Callback>:
    }
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af02      	add	r7, sp, #8
 800177e:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f00c fe5f 	bl	800e444 <pvTimerGetTimerID>
 8001786:	4603      	mov	r3, r0
 8001788:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f00c fba2 	bl	800ded4 <xTimerGetPeriod>
 8001790:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3301      	adds	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (PW_ON_OFF_DRIVER_TIME / xTimerPeriod)) {
 8001798:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d33b      	bcc.n	8001820 <Timer1_Callback+0xa8>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80017a8:	2120      	movs	r1, #32
 80017aa:	4822      	ldr	r0, [pc, #136]	; (8001834 <Timer1_Callback+0xbc>)
 80017ac:	f002 ffd4 	bl	8004758 <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d124      	bne.n	8001800 <Timer1_Callback+0x88>

            if (!FlightController_running) {
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <Timer1_Callback+0xc0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f083 0301 	eor.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <Timer1_Callback+0x5e>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2110      	movs	r1, #16
 80017c8:	481a      	ldr	r0, [pc, #104]	; (8001834 <Timer1_Callback+0xbc>)
 80017ca:	f002 ffdd 	bl	8004788 <HAL_GPIO_WritePin>

                FlightController_running = true;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <Timer1_Callback+0xc0>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e014      	b.n	8001800 <Timer1_Callback+0x88>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <Timer1_Callback+0xc4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f00b fcac 	bl	800d138 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e6:	4816      	ldr	r0, [pc, #88]	; (8001840 <Timer1_Callback+0xc8>)
 80017e8:	f002 ffce 	bl	8004788 <HAL_GPIO_WritePin>

                FlightController_running = false;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <Timer1_Callback+0xc0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2110      	movs	r1, #16
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <Timer1_Callback+0xbc>)
 80017f8:	f002 ffc6 	bl	8004788 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 80017fc:	f002 fc31 	bl	8004062 <HAL_NVIC_SystemReset>
            }
        }

        /* Stop Timer1 */
        xTimerStop(xTimer, 0);
 8001800:	2300      	movs	r3, #0
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2300      	movs	r3, #0
 8001806:	2200      	movs	r2, #0
 8001808:	2103      	movs	r1, #3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f00c fb14 	bl	800de38 <xTimerGenericCommand>
        vTimerSetTimerID(xTimer, (void *)0);
 8001810:	2100      	movs	r1, #0
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f00c fe36 	bl	800e484 <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <Timer1_Callback+0xcc>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 800181e:	e004      	b.n	800182a <Timer1_Callback+0xb2>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4619      	mov	r1, r3
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f00c fe2d 	bl	800e484 <vTimerSetTimerID>
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40020400 	.word	0x40020400
 8001838:	20000331 	.word	0x20000331
 800183c:	20000324 	.word	0x20000324
 8001840:	40020800 	.word	0x40020800
 8001844:	20000330 	.word	0x20000330

08001848 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

    /* Welcome message */
    LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 800184c:	2100      	movs	r1, #0
 800184e:	4803      	ldr	r0, [pc, #12]	; (800185c <FlightController_Init+0x14>)
 8001850:	f001 fe46 	bl	80034e0 <LOG>

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 8001854:	f7ff fb9e 	bl	8000f94 <FreeRTOS_CreateStartUpTasks>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	0801239c 	.word	0x0801239c

08001860 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <vApplicationGetIdleTaskMemory+0x2c>)
 8001870:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <vApplicationGetIdleTaskMemory+0x30>)
 8001876:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000374 	.word	0x20000374
 8001890:	200003d8 	.word	0x200003d8

08001894 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80018a4:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <vApplicationGetTimerTaskMemory+0x30>)
 80018aa:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b2:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	200005d8 	.word	0x200005d8
 80018c4:	2000063c 	.word	0x2000063c

080018c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80018ce:	f001 fe69 	bl	80035a4 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80018d2:	f000 f827 	bl	8001924 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80018d6:	f000 f9cd 	bl	8001c74 <MX_GPIO_Init>
    MX_DMA_Init();
 80018da:	f000 f9b1 	bl	8001c40 <MX_DMA_Init>
    MX_USART2_UART_Init();
 80018de:	f000 f985 	bl	8001bec <MX_USART2_UART_Init>
    MX_I2C1_Init();
 80018e2:	f000 f8db 	bl	8001a9c <MX_I2C1_Init>
    MX_TIM3_Init();
 80018e6:	f000 f907 	bl	8001af8 <MX_TIM3_Init>
    MX_ADC1_Init();
 80018ea:	f000 f885 	bl	80019f8 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 80018ee:	f7ff ffab 	bl	8001848 <FlightController_Init>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <main+0x54>)
 80018f4:	1d3c      	adds	r4, r7, #4
 80018f6:	461d      	mov	r5, r3
 80018f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f00a fbc0 	bl	800c08e <osThreadCreate>
 800190e:	4603      	mov	r3, r0
 8001910:	4a03      	ldr	r2, [pc, #12]	; (8001920 <main+0x58>)
 8001912:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8001914:	f00a fbb4 	bl	800c080 <osKernelStart>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 8001918:	e7fe      	b.n	8001918 <main+0x50>
 800191a:	bf00      	nop
 800191c:	080123d0 	.word	0x080123d0
 8001920:	20000bc4 	.word	0x20000bc4

08001924 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	; 0x50
 8001928:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	2230      	movs	r2, #48	; 0x30
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f00e fb61 	bl	800fffa <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <SystemClock_Config+0xcc>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <SystemClock_Config+0xcc>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <SystemClock_Config+0xcc>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <SystemClock_Config+0xd0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001970:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <SystemClock_Config+0xd0>)
 8001972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <SystemClock_Config+0xd0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001984:	2301      	movs	r3, #1
 8001986:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198e:	2302      	movs	r3, #2
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 8001998:	2319      	movs	r3, #25
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 800199c:	2390      	movs	r3, #144	; 0x90
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 80019a4:	2303      	movs	r3, #3
 80019a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019a8:	f107 0320 	add.w	r3, r7, #32
 80019ac:	4618      	mov	r0, r3
 80019ae:	f005 f941 	bl	8006c34 <HAL_RCC_OscConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SystemClock_Config+0x98>
        Error_Handler();
 80019b8:	f000 f9ea 	bl	8001d90 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019bc:	230f      	movs	r3, #15
 80019be:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	2102      	movs	r1, #2
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 fba3 	bl	8007124 <HAL_RCC_ClockConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0xc4>
        Error_Handler();
 80019e4:	f000 f9d4 	bl	8001d90 <Error_Handler>
    }
}
 80019e8:	bf00      	nop
 80019ea:	3750      	adds	r7, #80	; 0x50
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a0c:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <MX_ADC1_Init+0x9c>)
 8001a0e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a10:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a38:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <MX_ADC1_Init+0xa0>)
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001a56:	480e      	ldr	r0, [pc, #56]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a58:	f001 fe3a 	bl	80036d0 <HAL_ADC_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_ADC1_Init+0x6e>
        Error_Handler();
 8001a62:	f000 f995 	bl	8001d90 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_ADC1_Init+0x98>)
 8001a78:	f001 ffba 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_ADC1_Init+0x8e>
        Error_Handler();
 8001a82:	f000 f985 	bl	8001d90 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000a3c 	.word	0x20000a3c
 8001a94:	40012000 	.word	0x40012000
 8001a98:	0f000001 	.word	0x0f000001

08001a9c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <MX_I2C1_Init+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <MX_I2C1_Init+0x58>)
 8001aaa:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ada:	f002 fe6f 	bl	80047bc <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8001ae4:	f000 f954 	bl	8001d90 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000a84 	.word	0x20000a84
 8001af0:	40005400 	.word	0x40005400
 8001af4:	000186a0 	.word	0x000186a0

08001af8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afe:	f107 0320 	add.w	r3, r7, #32
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b1c:	4a32      	ldr	r2, [pc, #200]	; (8001be8 <MX_TIM3_Init+0xf0>)
 8001b1e:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 20;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b22:	2214      	movs	r2, #20
 8001b24:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b32:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b34:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001b40:	4828      	ldr	r0, [pc, #160]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b42:	f005 fccf 	bl	80074e4 <HAL_TIM_PWM_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM3_Init+0x58>
        Error_Handler();
 8001b4c:	f000 f920 	bl	8001d90 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001b58:	f107 0320 	add.w	r3, r7, #32
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4821      	ldr	r0, [pc, #132]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b60:	f006 f8b4 	bl	8007ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0x76>
        Error_Handler();
 8001b6a:	f000 f911 	bl	8001d90 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6e:	2360      	movs	r3, #96	; 0x60
 8001b70:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	4619      	mov	r1, r3
 8001b84:	4817      	ldr	r0, [pc, #92]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b86:	f005 fdad 	bl	80076e4 <HAL_TIM_PWM_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM3_Init+0x9c>
        Error_Handler();
 8001b90:	f000 f8fe 	bl	8001d90 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2204      	movs	r2, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4812      	ldr	r0, [pc, #72]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001b9c:	f005 fda2 	bl	80076e4 <HAL_TIM_PWM_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM3_Init+0xb2>
        Error_Handler();
 8001ba6:	f000 f8f3 	bl	8001d90 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2208      	movs	r2, #8
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001bb2:	f005 fd97 	bl	80076e4 <HAL_TIM_PWM_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0xc8>
        Error_Handler();
 8001bbc:	f000 f8e8 	bl	8001d90 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001bc8:	f005 fd8c 	bl	80076e4 <HAL_TIM_PWM_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM3_Init+0xde>
        Error_Handler();
 8001bd2:	f000 f8dd 	bl	8001d90 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM3_Init+0xec>)
 8001bd8:	f000 f9bc 	bl	8001f54 <HAL_TIM_MspPostInit>
}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000ad8 	.word	0x20000ad8
 8001be8:	40000400 	.word	0x40000400

08001bec <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_USART2_UART_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c12:	2204      	movs	r2, #4
 8001c14:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c24:	f006 f8c0 	bl	8007da8 <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8001c2e:	f000 f8af 	bl	8001d90 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000b20 	.word	0x20000b20
 8001c3c:	40004400 	.word	0x40004400

08001c40 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_DMA_Init+0x30>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <MX_DMA_Init+0x30>)
 8001c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_DMA_Init+0x30>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a37      	ldr	r2, [pc, #220]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a30      	ldr	r2, [pc, #192]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <MX_GPIO_Init+0xfc>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED_Pin | LED4_Pin, GPIO_PIN_RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001d00:	481c      	ldr	r0, [pc, #112]	; (8001d74 <MX_GPIO_Init+0x100>)
 8001d02:	f002 fd41 	bl	8004788 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	f241 1114 	movw	r1, #4372	; 0x1114
 8001d0c:	481a      	ldr	r0, [pc, #104]	; (8001d78 <MX_GPIO_Init+0x104>)
 8001d0e:	f002 fd3b 	bl	8004788 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_Pin LED4_Pin */
    GPIO_InitStruct.Pin = LED_Pin | LED4_Pin;
 8001d12:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4812      	ldr	r0, [pc, #72]	; (8001d74 <MX_GPIO_Init+0x100>)
 8001d2c:	f002 fb90 	bl	8004450 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
    GPIO_InitStruct.Pin = LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin;
 8001d30:	f241 1314 	movw	r3, #4372	; 0x1114
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	480b      	ldr	r0, [pc, #44]	; (8001d78 <MX_GPIO_Init+0x104>)
 8001d4a:	f002 fb81 	bl	8004450 <HAL_GPIO_Init>

    /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
    GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_GPIO_Init+0x104>)
 8001d62:	f002 fb75 	bl	8004450 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020400 	.word	0x40020400

08001d7c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 8001d84:	f00c fe14 	bl	800e9b0 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f00a f9cc 	bl	800c126 <osDelay>
 8001d8e:	e7fb      	b.n	8001d88 <StartDefaultTask+0xc>

08001d90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_MspInit+0x54>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_MspInit+0x54>)
 8001db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db4:	6453      	str	r3, [r2, #68]	; 0x44
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_MspInit+0x54>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_MspInit+0x54>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_MspInit+0x54>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_MspInit+0x54>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]

    /* System interrupt init*/
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	210f      	movs	r1, #15
 8001de2:	f06f 0001 	mvn.w	r0, #1
 8001de6:	f002 f912 	bl	800400e <HAL_NVIC_SetPriority>

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef * hadc) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
    if (hadc->Instance == ADC1) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_ADC_MspInit+0x7c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d127      	bne.n	8001e6a <HAL_ADC_MspInit+0x72>
        /* USER CODE BEGIN ADC1_MspInit 0 */

        /* USER CODE END ADC1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_ADC_MspInit+0x80>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
        /**ADC1 GPIO Configuration
        PA0-WKUP     ------> ADC1_IN0
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e52:	2301      	movs	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e56:	2303      	movs	r3, #3
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HAL_ADC_MspInit+0x84>)
 8001e66:	f002 faf3 	bl	8004450 <HAL_GPIO_Init>

        /* USER CODE BEGIN ADC1_MspInit 1 */

        /* USER CODE END ADC1_MspInit 1 */
    }
}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40012000 	.word	0x40012000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_I2C_MspInit+0x84>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12b      	bne.n	8001efa <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_I2C_MspInit+0x88>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_I2C_MspInit+0x88>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_I2C_MspInit+0x88>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001ebe:	23c0      	movs	r3, #192	; 0xc0
 8001ec0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <HAL_I2C_MspInit+0x8c>)
 8001eda:	f002 fab9 	bl	8004450 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_I2C_MspInit+0x88>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_I2C_MspInit+0x88>)
 8001ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_I2C_MspInit+0x88>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	; 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40005400 	.word	0x40005400
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020400 	.word	0x40020400

08001f10 <HAL_TIM_PWM_MspInit>:
 * @brief TIM_PWM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_pwm: TIM_PWM handle pointer
 * @retval None
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * htim_pwm) {
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    if (htim_pwm->Instance == TIM3) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10d      	bne.n	8001f3e <HAL_TIM_PWM_MspInit+0x2e>
        /* USER CODE BEGIN TIM3_MspInit 0 */

        /* USER CODE END TIM3_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_TIM_PWM_MspInit+0x40>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_TIM_PWM_MspInit+0x40>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_TIM_PWM_MspInit+0x40>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
    if (htim->Instance == TIM3) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <HAL_TIM_MspPostInit+0xa4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d13b      	bne.n	8001fee <HAL_TIM_MspPostInit+0x9a>
        /* USER CODE BEGIN TIM3_MspPostInit 0 */

        /* USER CODE END TIM3_MspPostInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_TIM_MspPostInit+0xa8>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_TIM_MspPostInit+0xa8>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_TIM_MspPostInit+0xa8>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_TIM_MspPostInit+0xa8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_TIM_MspPostInit+0xa8>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_TIM_MspPostInit+0xa8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
        PA6     ------> TIM3_CH1
        PA7     ------> TIM3_CH2
        PB0     ------> TIM3_CH3
        PB1     ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001fae:	23c0      	movs	r3, #192	; 0xc0
 8001fb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <HAL_TIM_MspPostInit+0xac>)
 8001fca:	f002 fa41 	bl	8004450 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4806      	ldr	r0, [pc, #24]	; (8002004 <HAL_TIM_MspPostInit+0xb0>)
 8001fea:	f002 fa31 	bl	8004450 <HAL_GPIO_Init>

        /* USER CODE BEGIN TIM3_MspPostInit 1 */

        /* USER CODE END TIM3_MspPostInit 1 */
    }
}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020400 	.word	0x40020400

08002008 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a31      	ldr	r2, [pc, #196]	; (80020ec <HAL_UART_MspInit+0xe4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d15b      	bne.n	80020e2 <HAL_UART_MspInit+0xda>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_UART_MspInit+0xe8>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_UART_MspInit+0xe8>)
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_UART_MspInit+0xe8>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_UART_MspInit+0xe8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_UART_MspInit+0xe8>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_UART_MspInit+0xe8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002062:	230c      	movs	r3, #12
 8002064:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002072:	2307      	movs	r3, #7
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	481d      	ldr	r0, [pc, #116]	; (80020f4 <HAL_UART_MspInit+0xec>)
 800207e:	f002 f9e7 	bl	8004450 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_UART_MspInit+0xf4>)
 8002086:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 800208a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800208e:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 800209e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a2:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b6:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020be:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 80020c6:	480c      	ldr	r0, [pc, #48]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020c8:	f001 ffdc 	bl	8004084 <HAL_DMA_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_UART_MspInit+0xce>
            Error_Handler();
 80020d2:	f7ff fe5d 	bl	8001d90 <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_UART_MspInit+0xf0>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40004400 	.word	0x40004400
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	20000b64 	.word	0x20000b64
 80020fc:	40026088 	.word	0x40026088

08002100 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002104:	e7fe      	b.n	8002104 <NMI_Handler+0x4>

08002106 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002130:	f001 fa8a 	bl	8003648 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1)
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002134:	f00b fcd2 	bl	800dadc <xTaskGetSchedulerState>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <SysTick_Handler+0x16>
#endif /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 800213e:	f00c fb83 	bl	800e848 <xPortSysTickHandler>
    }
#endif /* INCLUDE_xTaskGetSchedulerState */
       /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <OTG_FS_IRQHandler+0x10>)
 800214e:	f003 fc44 	bl	80059da <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20001b3c 	.word	0x20001b3c

0800215c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
    return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_kill>:

int _kill(int pid, int sig) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002176:	f00d ffb1 	bl	80100dc <__errno>
 800217a:	4603      	mov	r3, r0
 800217c:	2216      	movs	r2, #22
 800217e:	601a      	str	r2, [r3, #0]
    return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_exit>:

void _exit(int status) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002194:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ffe7 	bl	800216c <_kill>
    while (1) {
 800219e:	e7fe      	b.n	800219e <_exit+0x12>

080021a0 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	e00a      	b.n	80021c8 <_read+0x28>
        *ptr++ = __io_getchar();
 80021b2:	f3af 8000 	nop.w
 80021b6:	4601      	mov	r1, r0
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60ba      	str	r2, [r7, #8]
 80021be:	b2ca      	uxtb	r2, r1
 80021c0:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3301      	adds	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dbf0      	blt.n	80021b2 <_read+0x12>
    }

    return len;
 80021d0:	687b      	ldr	r3, [r7, #4]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e009      	b.n	8002200 <_write+0x26>
        __io_putchar(*ptr++);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	60ba      	str	r2, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	dbf1      	blt.n	80021ec <_write+0x12>
    }
    return len;
 8002208:	687b      	ldr	r3, [r7, #4]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_close>:

int _close(int file) {
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_fstat>:

int _fstat(int file, struct stat * st) {
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800223a:	605a      	str	r2, [r3, #4]
    return 0;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_isatty>:

int _isatty(int file) {
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <_sbrk+0x5c>)
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <_sbrk+0x60>)
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <_sbrk+0x64>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <_sbrk+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <_sbrk+0x40>
        errno = ENOMEM;
 80022ac:	f00d ff16 	bl	80100dc <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20010000 	.word	0x20010000
 80022dc:	00000400 	.word	0x00000400
 80022e0:	20000bc8 	.word	0x20000bc8
 80022e4:	200023b8 	.word	0x200023b8

080022e8 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002312:	490e      	ldr	r1, [pc, #56]	; (800234c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800231c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002326:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002328:	4c0b      	ldr	r4, [pc, #44]	; (8002358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002336:	f7ff ffd7 	bl	80022e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233a:	f00d fed5 	bl	80100e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7ff fac3 	bl	80018c8 <main>
  bx  lr
 8002342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002344:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002350:	080128a0 	.word	0x080128a0
  ldr r2, =_sbss
 8002354:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002358:	200023b4 	.word	0x200023b4

0800235c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC_IRQHandler>

0800235e <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <PWM_Init+0x12>
        return false;
 800236c:	2300      	movs	r3, #0
 800236e:	e02c      	b.n	80023ca <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f005 f904 	bl	8007584 <HAL_TIM_PWM_Start>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 8002382:	2300      	movs	r3, #0
 8002384:	e021      	b.n	80023ca <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2104      	movs	r1, #4
 800238c:	4618      	mov	r0, r3
 800238e:	f005 f8f9 	bl	8007584 <HAL_TIM_PWM_Start>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 8002398:	2300      	movs	r3, #0
 800239a:	e016      	b.n	80023ca <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2108      	movs	r1, #8
 80023a2:	4618      	mov	r0, r3
 80023a4:	f005 f8ee 	bl	8007584 <HAL_TIM_PWM_Start>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e00b      	b.n	80023ca <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	210c      	movs	r1, #12
 80023b8:	4618      	mov	r0, r3
 80023ba:	f005 f8e3 	bl	8007584 <HAL_TIM_PWM_Start>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <PWM_Init+0x6c>
    }

    return true;
 80023c8:	2301      	movs	r3, #1
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	460b      	mov	r3, r1
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <PWM_SetDutyCycle+0x18>
        return false;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e02d      	b.n	8002448 <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80023ec:	7afb      	ldrb	r3, [r7, #11]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d00a      	beq.n	8002408 <PWM_SetDutyCycle+0x34>
 80023f2:	7afb      	ldrb	r3, [r7, #11]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d007      	beq.n	8002408 <PWM_SetDutyCycle+0x34>
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d004      	beq.n	8002408 <PWM_SetDutyCycle+0x34>
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d001      	beq.n	8002408 <PWM_SetDutyCycle+0x34>
        return false;
 8002404:	2300      	movs	r3, #0
 8002406:	e01f      	b.n	8002448 <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 8002408:	7afb      	ldrb	r3, [r7, #11]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d104      	bne.n	8002418 <PWM_SetDutyCycle+0x44>
        /* BEGIN MODIFY 10 */
        TIM3->CCR1 = (uint16_t)dutyCycle;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <PWM_SetDutyCycle+0x80>)
 8002414:	635a      	str	r2, [r3, #52]	; 0x34
 8002416:	e016      	b.n	8002446 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 8002418:	7afb      	ldrb	r3, [r7, #11]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d104      	bne.n	8002428 <PWM_SetDutyCycle+0x54>
        /* BEGIN MODIFY 11 */
        TIM3->CCR2 = (uint16_t)dutyCycle;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	b29a      	uxth	r2, r3
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <PWM_SetDutyCycle+0x80>)
 8002424:	639a      	str	r2, [r3, #56]	; 0x38
 8002426:	e00e      	b.n	8002446 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 8002428:	7afb      	ldrb	r3, [r7, #11]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d104      	bne.n	8002438 <PWM_SetDutyCycle+0x64>
        /* BEGIN MODIFY 12 */
        TIM3->CCR3 = (uint16_t)dutyCycle;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <PWM_SetDutyCycle+0x80>)
 8002434:	63da      	str	r2, [r3, #60]	; 0x3c
 8002436:	e006      	b.n	8002446 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 8002438:	7afb      	ldrb	r3, [r7, #11]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d103      	bne.n	8002446 <PWM_SetDutyCycle+0x72>
        /* BEGIN MODIFY 13 */
        TIM3->CCR4 = (uint16_t)dutyCycle;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	b29a      	uxth	r2, r3
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <PWM_SetDutyCycle+0x80>)
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
        /* END MODIFY 13 */
    }

    return true;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40000400 	.word	0x40000400

08002458 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint32_t * pwmValue) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002462:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (0 > speed || 100 < speed) {
 8002464:	edd7 7a01 	vldr	s15, [r7, #4]
 8002468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	d408      	bmi.n	8002484 <ESC_CalculatePWMDutyCycle+0x2c>
 8002472:	edd7 7a01 	vldr	s15, [r7, #4]
 8002476:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80024e0 <ESC_CalculatePWMDutyCycle+0x88>
 800247a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002482:	dd01      	ble.n	8002488 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 8002484:	2300      	movs	r3, #0
 8002486:	e021      	b.n	80024cc <ESC_CalculatePWMDutyCycle+0x74>
    }

    /* Calculate PWM value */
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float)(speed / 100) + MIN_ESC_SPEED);
 8002488:	edd7 7a01 	vldr	s15, [r7, #4]
 800248c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80024e0 <ESC_CalculatePWMDutyCycle+0x88>
 8002490:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002494:	ee16 0a90 	vmov	r0, s13
 8002498:	f7fe f85e 	bl	8000558 <__aeabi_f2d>
 800249c:	a30e      	add	r3, pc, #56	; (adr r3, 80024d8 <ESC_CalculatePWMDutyCycle+0x80>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f8b1 	bl	8000608 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	a30a      	add	r3, pc, #40	; (adr r3, 80024d8 <ESC_CalculatePWMDutyCycle+0x80>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fd fef2 	bl	800029c <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fb7a 	bl	8000bb8 <__aeabi_d2uiz>
 80024c4:	4602      	mov	r2, r0
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	601a      	str	r2, [r3, #0]

    return true;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	f3af 8000 	nop.w
 80024d8:	00000000 	.word	0x00000000
 80024dc:	40a99980 	.word	0x40a99980
 80024e0:	42c80000 	.word	0x42c80000

080024e4 <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <ESC_AutoCalibrate+0x12>
        return false;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e080      	b.n	80025f8 <ESC_AutoCalibrate+0x114>
#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MAX_ESC_SPEED)) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	f641 1299 	movw	r2, #6553	; 0x1999
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff67 	bl	80023d4 <PWM_SetDutyCycle>
 8002506:	4603      	mov	r3, r0
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <ESC_AutoCalibrate+0x32>
        return false;
 8002512:	2300      	movs	r3, #0
 8002514:	e070      	b.n	80025f8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MAX_ESC_SPEED)) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	795b      	ldrb	r3, [r3, #5]
 800251a:	f641 1299 	movw	r2, #6553	; 0x1999
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff57 	bl	80023d4 <PWM_SetDutyCycle>
 8002526:	4603      	mov	r3, r0
 8002528:	f083 0301 	eor.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <ESC_AutoCalibrate+0x52>
        return false;
 8002532:	2300      	movs	r3, #0
 8002534:	e060      	b.n	80025f8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MAX_ESC_SPEED)) {
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	799b      	ldrb	r3, [r3, #6]
 800253a:	f641 1299 	movw	r2, #6553	; 0x1999
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff47 	bl	80023d4 <PWM_SetDutyCycle>
 8002546:	4603      	mov	r3, r0
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <ESC_AutoCalibrate+0x72>
        return false;
 8002552:	2300      	movs	r3, #0
 8002554:	e050      	b.n	80025f8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	79db      	ldrb	r3, [r3, #7]
 800255a:	f641 1299 	movw	r2, #6553	; 0x1999
 800255e:	4619      	mov	r1, r3
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff37 	bl	80023d4 <PWM_SetDutyCycle>
 8002566:	4603      	mov	r3, r0
 8002568:	f083 0301 	eor.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <ESC_AutoCalibrate+0x92>
        return false;
 8002572:	2300      	movs	r3, #0
 8002574:	e040      	b.n	80025f8 <ESC_AutoCalibrate+0x114>
    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	791b      	ldrb	r3, [r3, #4]
 800257a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff27 	bl	80023d4 <PWM_SetDutyCycle>
 8002586:	4603      	mov	r3, r0
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <ESC_AutoCalibrate+0xb2>
        return false;
 8002592:	2300      	movs	r3, #0
 8002594:	e030      	b.n	80025f8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	795b      	ldrb	r3, [r3, #5]
 800259a:	f640 42cc 	movw	r2, #3276	; 0xccc
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff17 	bl	80023d4 <PWM_SetDutyCycle>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <ESC_AutoCalibrate+0xd2>
        return false;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e020      	b.n	80025f8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	799b      	ldrb	r3, [r3, #6]
 80025ba:	f640 42cc 	movw	r2, #3276	; 0xccc
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff07 	bl	80023d4 <PWM_SetDutyCycle>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <ESC_AutoCalibrate+0xf2>
        return false;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e010      	b.n	80025f8 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	79db      	ldrb	r3, [r3, #7]
 80025da:	f640 42cc 	movw	r2, #3276	; 0xccc
 80025de:	4619      	mov	r1, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fef7 	bl	80023d4 <PWM_SetDutyCycle>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f083 0301 	eor.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <ESC_AutoCalibrate+0x112>
        return false;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <ESC_AutoCalibrate+0x114>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <ESC_Init+0x12>
        return NULL;
 800260e:	2300      	movs	r3, #0
 8002610:	e036      	b.n	8002680 <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 8002612:	2008      	movs	r0, #8
 8002614:	f00c f9a8 	bl	800e968 <pvPortMalloc>
 8002618:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <ESC_Init+0x40>
        hesc->htim = htim;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_4;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2204      	movs	r2, #4
 800262a:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2202      	movs	r2, #2
 8002630:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2203      	movs	r2, #3
 8002636:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_1;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	71da      	strb	r2, [r3, #7]
 800263e:	e002      	b.n	8002646 <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f00c f9a3 	bl	800e98c <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff fe89 	bl	800235e <PWM_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f00c f997 	bl	800e98c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	e00e      	b.n	8002680 <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f7ff ff3e 	bl	80024e4 <ESC_AutoCalibrate>
 8002668:	4603      	mov	r3, r0
 800266a:	f083 0301 	eor.w	r3, r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f00c f989 	bl	800e98c <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	e000      	b.n	8002680 <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint8_t channel, float speed) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	460b      	mov	r3, r1
 8002692:	ed87 0a01 	vstr	s0, [r7, #4]
 8002696:	72fb      	strb	r3, [r7, #11]

    uint32_t pwmValue;

    /* Check parameters */
    if (NULL == hesc->htim) {
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <ESC_SetSpeed+0x1c>
        return false;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e03d      	b.n	8002720 <ESC_SetSpeed+0x98>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80026a4:	7afb      	ldrb	r3, [r7, #11]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d00a      	beq.n	80026c0 <ESC_SetSpeed+0x38>
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d007      	beq.n	80026c0 <ESC_SetSpeed+0x38>
 80026b0:	7afb      	ldrb	r3, [r7, #11]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d004      	beq.n	80026c0 <ESC_SetSpeed+0x38>
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d001      	beq.n	80026c0 <ESC_SetSpeed+0x38>
        return false;
 80026bc:	2300      	movs	r3, #0
 80026be:	e02f      	b.n	8002720 <ESC_SetSpeed+0x98>
    }
    if (speed < 0 || speed > 100) {
 80026c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	d408      	bmi.n	80026e0 <ESC_SetSpeed+0x58>
 80026ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002728 <ESC_SetSpeed+0xa0>
 80026d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	dd01      	ble.n	80026e4 <ESC_SetSpeed+0x5c>
        return false;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e01d      	b.n	8002720 <ESC_SetSpeed+0x98>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, &pwmValue)) {
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4618      	mov	r0, r3
 80026ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80026ee:	f7ff feb3 	bl	8002458 <ESC_CalculatePWMDutyCycle>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f083 0301 	eor.w	r3, r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <ESC_SetSpeed+0x7a>
        return false;
 80026fe:	2300      	movs	r3, #0
 8002700:	e00e      	b.n	8002720 <ESC_SetSpeed+0x98>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, pwmValue)) {
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	7afb      	ldrb	r3, [r7, #11]
 8002706:	4619      	mov	r1, r3
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff fe63 	bl	80023d4 <PWM_SetDutyCycle>
 800270e:	4603      	mov	r3, r0
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <ESC_SetSpeed+0x96>
        return false;
 800271a:	2300      	movs	r3, #0
 800271c:	e000      	b.n	8002720 <ESC_SetSpeed+0x98>
    };

    return true;
 800271e:	2301      	movs	r3, #1
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	42c80000 	.word	0x42c80000

0800272c <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <IBUS_Init+0x12>
        return false;
 800273a:	2300      	movs	r3, #0
 800273c:	e00f      	b.n	800275e <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7a1b      	ldrb	r3, [r3, #8]
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	f005 fb78 	bl	8007e42 <HAL_UART_Receive_DMA>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8002758:	2300      	movs	r3, #0
 800275a:	e000      	b.n	800275e <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 800275c:	2301      	movs	r3, #1
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <FSA8S_CheckFirstBytes+0x12>
        return false;
 8002774:	2300      	movs	r3, #0
 8002776:	e00d      	b.n	8002794 <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b20      	cmp	r3, #32
 8002780:	d107      	bne.n	8002792 <FSA8S_CheckFirstBytes+0x2c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	3301      	adds	r3, #1
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	d101      	bne.n	8002792 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8002792:	2300      	movs	r3, #0
    }
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 80027a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ac:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <FSA8S_Checksum+0x18>
        return false;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e02c      	b.n	8002812 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7a1b      	ldrb	r3, [r3, #8]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7a1b      	ldrb	r3, [r3, #8]
 80027d2:	3b02      	subs	r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b21b      	sxth	r3, r3
 80027de:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 80027e0:	2300      	movs	r3, #0
 80027e2:	737b      	strb	r3, [r7, #13]
 80027e4:	e00b      	b.n	80027fe <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	7b7b      	ldrb	r3, [r7, #13]
 80027ec:	4413      	add	r3, r2
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	89fa      	ldrh	r2, [r7, #14]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 80027f8:	7b7b      	ldrb	r3, [r7, #13]
 80027fa:	3301      	adds	r3, #1
 80027fc:	737b      	strb	r3, [r7, #13]
 80027fe:	7b7b      	ldrb	r3, [r7, #13]
 8002800:	2b1d      	cmp	r3, #29
 8002802:	d9f0      	bls.n	80027e6 <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8002804:	897a      	ldrh	r2, [r7, #10]
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	429a      	cmp	r2, r3
 800280a:	d101      	bne.n	8002810 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 8002810:	2300      	movs	r3, #0
    }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d062      	beq.n	80028f4 <FSA8S_AmendData+0xd4>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 800282e:	2302      	movs	r3, #2
 8002830:	737b      	strb	r3, [r7, #13]
 8002832:	e059      	b.n	80028e8 <FSA8S_AmendData+0xc8>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	7b7b      	ldrb	r3, [r7, #13]
 800283e:	3301      	adds	r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	b21a      	sxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	7b7b      	ldrb	r3, [r7, #13]
 800284e:	440b      	add	r3, r1
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b21b      	sxth	r3, r3
 8002854:	4313      	orrs	r3, r2
 8002856:	b21b      	sxth	r3, r3
 8002858:	b29a      	uxth	r2, r3
 800285a:	7b7b      	ldrb	r3, [r7, #13]
 800285c:	3b02      	subs	r3, #2
 800285e:	0fd9      	lsrs	r1, r3, #31
 8002860:	440b      	add	r3, r1
 8002862:	105b      	asrs	r3, r3, #1
 8002864:	4619      	mov	r1, r3
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <FSA8S_AmendData+0xe0>)
 8002868:	5c5b      	ldrb	r3, [r3, r1]
 800286a:	b29b      	uxth	r3, r3
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 8002870:	89fb      	ldrh	r3, [r7, #14]
 8002872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002876:	d308      	bcc.n	800288a <FSA8S_AmendData+0x6a>
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800287e:	d804      	bhi.n	800288a <FSA8S_AmendData+0x6a>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8002880:	89fb      	ldrh	r3, [r7, #14]
 8002882:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002886:	81fb      	strh	r3, [r7, #14]
 8002888:	e001      	b.n	800288e <FSA8S_AmendData+0x6e>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 800288e:	89fb      	ldrh	r3, [r7, #14]
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002898:	7b7b      	ldrb	r3, [r7, #13]
 800289a:	3b02      	subs	r3, #2
 800289c:	0fda      	lsrs	r2, r3, #31
 800289e:	4413      	add	r3, r2
 80028a0:	105b      	asrs	r3, r3, #1
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <FSA8S_AmendData+0xe0>)
 80028a6:	5c9b      	ldrb	r3, [r3, r2]
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002904 <FSA8S_AmendData+0xe4>
 80028b4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80028b8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8002904 <FSA8S_AmendData+0xe4>
 80028bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	7b7b      	ldrb	r3, [r7, #13]
 80028ca:	3b02      	subs	r3, #2
 80028cc:	0fd9      	lsrs	r1, r3, #31
 80028ce:	440b      	add	r3, r1
 80028d0:	105b      	asrs	r3, r3, #1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028da:	ee17 2a90 	vmov	r2, s15
 80028de:	b292      	uxth	r2, r2
 80028e0:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 80028e2:	7b7b      	ldrb	r3, [r7, #13]
 80028e4:	3302      	adds	r3, #2
 80028e6:	737b      	strb	r3, [r7, #13]
 80028e8:	7b7a      	ldrb	r2, [r7, #13]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7a1b      	ldrb	r3, [r3, #8]
 80028ee:	3b02      	subs	r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	db9f      	blt.n	8002834 <FSA8S_AmendData+0x14>
        }
    }
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	20000004 	.word	0x20000004
 8002904:	447a0000 	.word	0x447a0000

08002908 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <FSA8S_Init+0x12>
        return NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	e04a      	b.n	80029b0 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 800291a:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <FSA8S_Init+0xb0>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <FSA8S_Init+0x1e>
        return NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	e044      	b.n	80029b0 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 8002926:	2014      	movs	r0, #20
 8002928:	f00c f81e 	bl	800e968 <pvPortMalloc>
 800292c:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 800292e:	2020      	movs	r0, #32
 8002930:	f00c f81a 	bl	800e968 <pvPortMalloc>
 8002934:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 8002936:	201c      	movs	r0, #28
 8002938:	f00c f816 	bl	800e968 <pvPortMalloc>
 800293c:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00f      	beq.n	8002964 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2220      	movs	r2, #32
 8002954:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	220e      	movs	r2, #14
 8002960:	741a      	strb	r2, [r3, #16]
 8002962:	e00c      	b.n	800297e <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	f00c f80f 	bl	800e98c <vPortFree>
        vPortFree(hibus->data);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	4618      	mov	r0, r3
 8002974:	f00c f80a 	bl	800e98c <vPortFree>
        vPortFree(hibus);
 8002978:	6978      	ldr	r0, [r7, #20]
 800297a:	f00c f807 	bl	800e98c <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f7ff fed4 	bl	800272c <IBUS_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <FSA8S_Init+0xb0>)
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
        return hibus;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	e00d      	b.n	80029b0 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4618      	mov	r0, r3
 800299a:	f00b fff7 	bl	800e98c <vPortFree>
        vPortFree(hibus->data);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f00b fff2 	bl	800e98c <vPortFree>
        vPortFree(hibus);
 80029a8:	6978      	ldr	r0, [r7, #20]
 80029aa:	f00b ffef 	bl	800e98c <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 80029ae:	2300      	movs	r3, #0
    }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000bcc 	.word	0x20000bcc

080029bc <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e029      	b.n	8002a26 <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <FSA8S_ReadChannel+0x22>
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	2b0e      	cmp	r3, #14
 80029dc:	d901      	bls.n	80029e2 <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	e021      	b.n	8002a26 <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 80029e2:	bf00      	nop
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff febe 	bl	8002766 <FSA8S_CheckFirstBytes>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f6      	bne.n	80029e4 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fed2 	bl	80027a0 <FSA8S_Checksum>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8002a08:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002a0a:	e7ea      	b.n	80029e2 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 8002a0c:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ff06 	bl	8002820 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	881b      	ldrh	r3, [r3, #0]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af02      	add	r7, sp, #8
 8002a34:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <I2C_Init+0x12>
        return false;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e010      	b.n	8002a62 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6858      	ldr	r0, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7a19      	ldrb	r1, [r3, #8]
 8002a48:	f107 030f 	add.w	r3, r7, #15
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	9200      	str	r2, [sp, #0]
 8002a50:	2275      	movs	r2, #117	; 0x75
 8002a52:	f000 f80a 	bl	8002a6a <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b68      	cmp	r3, #104	; 0x68
 8002a5a:	d101      	bne.n	8002a60 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8002a60:	2300      	movs	r3, #0
    }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af04      	add	r7, sp, #16
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	72fb      	strb	r3, [r7, #11]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <I2C_Read+0x1c>
        return false;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e019      	b.n	8002aba <I2C_Read+0x50>
    }
    if (NULL == data) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <I2C_Read+0x26>
        return false;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e014      	b.n	8002aba <I2C_Read+0x50>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	b299      	uxth	r1, r3
 8002a94:	7abb      	ldrb	r3, [r7, #10]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	7e3b      	ldrb	r3, [r7, #24]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2064      	movs	r0, #100	; 0x64
 8002a9e:	9002      	str	r0, [sp, #8]
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f002 f8c5 	bl	8004c38 <HAL_I2C_Mem_Read>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <I2C_Read+0x4e>

        /* Data couldn't be read */
        return false;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <I2C_Read+0x50>
    } else {

        /* Data read successfully */
        return true;
 8002ab8:	2301      	movs	r3, #1
    }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b088      	sub	sp, #32
 8002ac6:	af04      	add	r7, sp, #16
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	72fb      	strb	r3, [r7, #11]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <I2C_Write+0x1c>
        return false;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e018      	b.n	8002b10 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <I2C_Write+0x26>
        return false;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e013      	b.n	8002b10 <I2C_Write+0x4e>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	b299      	uxth	r1, r3
 8002aec:	7abb      	ldrb	r3, [r7, #10]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	2364      	movs	r3, #100	; 0x64
 8002af2:	9302      	str	r3, [sp, #8]
 8002af4:	2301      	movs	r3, #1
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2301      	movs	r3, #1
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f001 ffa0 	bl	8004a44 <HAL_I2C_Mem_Write>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_Write+0x4c>

        /* Data couldn't be written */
        return false;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e000      	b.n	8002b10 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 8002b0e:	2301      	movs	r3, #1
    }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8002b20:	2014      	movs	r0, #20
 8002b22:	f00b ff21 	bl	800e968 <pvPortMalloc>
 8002b26:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 8002b28:	2004      	movs	r0, #4
 8002b2a:	f00b ff1d 	bl	800e968 <pvPortMalloc>
 8002b2e:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <GY87_InstanceInit+0x24>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f00b ff23 	bl	800e98c <vPortFree>
        vPortFree(hgy87);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f00b ff20 	bl	800e98c <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e01b      	b.n	8002b88 <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <GY87_InstanceInit+0x78>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	22d0      	movs	r2, #208	; 0xd0
 8002b62:	721a      	strb	r2, [r3, #8]
 8002b64:	e009      	b.n	8002b7a <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <GY87_InstanceInit+0x78>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	22d1      	movs	r2, #209	; 0xd1
 8002b78:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000bcd 	.word	0x20000bcd

08002b94 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8002b9c:	2340      	movs	r3, #64	; 0x40
 8002b9e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6858      	ldr	r0, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7a19      	ldrb	r1, [r3, #8]
 8002ba8:	f107 030f 	add.w	r3, r7, #15
 8002bac:	2200      	movs	r2, #0
 8002bae:	9200      	str	r2, [sp, #0]
 8002bb0:	226b      	movs	r2, #107	; 0x6b
 8002bb2:	f000 fa3d 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af02      	add	r7, sp, #8
 8002bc4:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6858      	ldr	r0, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7a19      	ldrb	r1, [r3, #8]
 8002bd2:	f107 030f 	add.w	r3, r7, #15
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	9200      	str	r2, [sp, #0]
 8002bda:	226b      	movs	r2, #107	; 0x6b
 8002bdc:	f000 fa28 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 8002bf0:	2318      	movs	r3, #24
 8002bf2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6858      	ldr	r0, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7a19      	ldrb	r1, [r3, #8]
 8002bfc:	f107 030f 	add.w	r3, r7, #15
 8002c00:	2201      	movs	r2, #1
 8002c02:	9200      	str	r2, [sp, #0]
 8002c04:	2219      	movs	r2, #25
 8002c06:	f000 fa13 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af02      	add	r7, sp, #8
 8002c18:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_0; // Full range
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6858      	ldr	r0, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7a19      	ldrb	r1, [r3, #8]
 8002c26:	f107 030f 	add.w	r3, r7, #15
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	9200      	str	r2, [sp, #0]
 8002c2e:	221b      	movs	r2, #27
 8002c30:	f000 f9fe 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_0; // Full range
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6858      	ldr	r0, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7a19      	ldrb	r1, [r3, #8]
 8002c50:	f107 030f 	add.w	r3, r7, #15
 8002c54:	2201      	movs	r2, #1
 8002c56:	9200      	str	r2, [sp, #0]
 8002c58:	221c      	movs	r2, #28
 8002c5a:	f000 f9e9 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = 0b00100010; // TODO
 8002c6e:	2322      	movs	r3, #34	; 0x22
 8002c70:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6858      	ldr	r0, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7a19      	ldrb	r1, [r3, #8]
 8002c7a:	f107 030f 	add.w	r3, r7, #15
 8002c7e:	2201      	movs	r2, #1
 8002c80:	9200      	str	r2, [sp, #0]
 8002c82:	226a      	movs	r2, #106	; 0x6a
 8002c84:	f000 f9d4 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6858      	ldr	r0, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7a19      	ldrb	r1, [r3, #8]
 8002ca4:	f107 030f 	add.w	r3, r7, #15
 8002ca8:	2200      	movs	r2, #0
 8002caa:	9200      	str	r2, [sp, #0]
 8002cac:	226a      	movs	r2, #106	; 0x6a
 8002cae:	f000 f9bf 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af02      	add	r7, sp, #8
 8002cc0:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6858      	ldr	r0, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7a19      	ldrb	r1, [r3, #8]
 8002cce:	f107 030f 	add.w	r3, r7, #15
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	9200      	str	r2, [sp, #0]
 8002cd6:	2237      	movs	r2, #55	; 0x37
 8002cd8:	f000 f9aa 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002cec:	2302      	movs	r3, #2
 8002cee:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6858      	ldr	r0, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7a19      	ldrb	r1, [r3, #8]
 8002cf8:	f107 030f 	add.w	r3, r7, #15
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	9200      	str	r2, [sp, #0]
 8002d00:	2237      	movs	r2, #55	; 0x37
 8002d02:	f000 f995 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af02      	add	r7, sp, #8
 8002d14:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = 0b00001101; // 400 kHz TODO
 8002d16:	230d      	movs	r3, #13
 8002d18:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6858      	ldr	r0, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7a19      	ldrb	r1, [r3, #8]
 8002d22:	f107 030f 	add.w	r3, r7, #15
 8002d26:	2201      	movs	r2, #1
 8002d28:	9200      	str	r2, [sp, #0]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f000 f980 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = QMC5883L_AUX_VAL_I2C_ADDR | 0x80;
 8002d40:	238d      	movs	r3, #141	; 0x8d
 8002d42:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6858      	ldr	r0, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7a19      	ldrb	r1, [r3, #8]
 8002d4c:	f107 030f 	add.w	r3, r7, #15
 8002d50:	2201      	movs	r2, #1
 8002d52:	9200      	str	r2, [sp, #0]
 8002d54:	2225      	movs	r2, #37	; 0x25
 8002d56:	f000 f96b 	bl	8003030 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6858      	ldr	r0, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7a19      	ldrb	r1, [r3, #8]
 8002d66:	f107 030f 	add.w	r3, r7, #15
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	9200      	str	r2, [sp, #0]
 8002d6e:	2226      	movs	r2, #38	; 0x26
 8002d70:	f000 f95e 	bl	8003030 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8002d74:	2386      	movs	r3, #134	; 0x86
 8002d76:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6858      	ldr	r0, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7a19      	ldrb	r1, [r3, #8]
 8002d80:	f107 030f 	add.w	r3, r7, #15
 8002d84:	2201      	movs	r2, #1
 8002d86:	9200      	str	r2, [sp, #0]
 8002d88:	2227      	movs	r2, #39	; 0x27
 8002d8a:	f000 f951 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <GY87_Configure>:
    //    /* Set slave BMP180 barometer number of registers to read*/
    //    regData = 0x80 | 0x06; // TODO
    //    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
}

static void GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fef8 	bl	8002b94 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff0a 	bl	8002bbe <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ff1c 	bl	8002be8 <MPU6050_SetSampleDivider>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff2e 	bl	8002c12 <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff40 	bl	8002c3c <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff67 	bl	8002c90 <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff79 	bl	8002cba <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f819 	bl	8002e00 <QMC5883L_TestConnection>
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f846 	bl	8002e60 <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f82b 	bl	8002e30 <BMP180_TestConnection>
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f86c 	bl	8002eb8 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff7f 	bl	8002ce4 <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff3d 	bl	8002c66 <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff8e 	bl	8002d0e <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ffa0 	bl	8002d38 <MPU6050_Configure_QMC5883l>

    //    /* Configure slave BMP180 barometer in MPU6050 */
    //    MPU6050_Configure_BMP180(hgy87);
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6858      	ldr	r0, [r3, #4]
 8002e0c:	f107 030f 	add.w	r3, r7, #15
 8002e10:	2201      	movs	r2, #1
 8002e12:	9200      	str	r2, [sp, #0]
 8002e14:	220d      	movs	r2, #13
 8002e16:	211a      	movs	r1, #26
 8002e18:	f000 f8e2 	bl	8002fe0 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2bff      	cmp	r3, #255	; 0xff
 8002e20:	d001      	beq.n	8002e26 <QMC5883L_TestConnection+0x26>
        return false;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 8002e26:	2301      	movs	r3, #1
    }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xD0, &regData, sizeof(regData));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6858      	ldr	r0, [r3, #4]
 8002e3c:	f107 030f 	add.w	r3, r7, #15
 8002e40:	2201      	movs	r2, #1
 8002e42:	9200      	str	r2, [sp, #0]
 8002e44:	22d0      	movs	r2, #208	; 0xd0
 8002e46:	21ee      	movs	r1, #238	; 0xee
 8002e48:	f000 f8ca 	bl	8002fe0 <MPU6050_ReadRegister>

    if (0x55 != regData) { // TODO
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b55      	cmp	r3, #85	; 0x55
 8002e50:	d001      	beq.n	8002e56 <BMP180_TestConnection+0x26>
        return false;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <BMP180_TestConnection+0x28>
    } else {
        return true;
 8002e56:	2301      	movs	r3, #1
    }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6858      	ldr	r0, [r3, #4]
 8002e70:	f107 030f 	add.w	r3, r7, #15
 8002e74:	2201      	movs	r2, #1
 8002e76:	9200      	str	r2, [sp, #0]
 8002e78:	220b      	movs	r2, #11
 8002e7a:	211a      	movs	r1, #26
 8002e7c:	f000 f8d8 	bl	8003030 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8002e80:	231d      	movs	r3, #29
 8002e82:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6858      	ldr	r0, [r3, #4]
 8002e88:	f107 030f 	add.w	r3, r7, #15
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	9200      	str	r2, [sp, #0]
 8002e90:	2209      	movs	r2, #9
 8002e92:	211a      	movs	r1, #26
 8002e94:	f000 f8cc 	bl	8003030 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6858      	ldr	r0, [r3, #4]
 8002ea0:	f107 030f 	add.w	r3, r7, #15
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	9200      	str	r2, [sp, #0]
 8002ea8:	220a      	movs	r2, #10
 8002eaa:	211a      	movs	r1, #26
 8002eac:	f000 f8c0 	bl	8003030 <MPU6050_WriteRegisterBitmasked>
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

    /* Configure BMP180 barometer */
    /* Read calibration data */
    BMP180_ReadCallibrationData(hgy87);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f805 	bl	8002ed0 <BMP180_ReadCallibrationData>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <BMP180_ReadCallibrationData>:

static void BMP180_ReadCallibrationData(GY87_HandleTypeDef_t * hgy87) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8002eec:	23aa      	movs	r3, #170	; 0xaa
 8002eee:	83fb      	strh	r3, [r7, #30]

    // HAL_I2C_Mem_Read(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, startRegisterAddress, 1, callibrationData, 22, HAL_MAX_DELAY);
    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, startRegisterAddress, callibrationData, sizeof(callibrationData));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6858      	ldr	r0, [r3, #4]
 8002ef4:	8bfb      	ldrh	r3, [r7, #30]
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	f107 0308 	add.w	r3, r7, #8
 8002efc:	2116      	movs	r1, #22
 8002efe:	9100      	str	r1, [sp, #0]
 8002f00:	2177      	movs	r1, #119	; 0x77
 8002f02:	f000 f86d 	bl	8002fe0 <MPU6050_ReadRegister>

    BMP180_CallibrationData.AC1 = ((callibrationData[0] << 8) | callibrationData[1]);
 8002f06:	7a3b      	ldrb	r3, [r7, #8]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	b21a      	sxth	r2, r3
 8002f0c:	7a7b      	ldrb	r3, [r7, #9]
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b21a      	sxth	r2, r3
 8002f14:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002f16:	801a      	strh	r2, [r3, #0]
    BMP180_CallibrationData.AC2 = ((callibrationData[2] << 8) | callibrationData[3]);
 8002f18:	7abb      	ldrb	r3, [r7, #10]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	b21a      	sxth	r2, r3
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
 8002f20:	b21b      	sxth	r3, r3
 8002f22:	4313      	orrs	r3, r2
 8002f24:	b21a      	sxth	r2, r3
 8002f26:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002f28:	805a      	strh	r2, [r3, #2]
    BMP180_CallibrationData.AC3 = ((callibrationData[4] << 8) | callibrationData[5]);
 8002f2a:	7b3b      	ldrb	r3, [r7, #12]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	b21a      	sxth	r2, r3
 8002f30:	7b7b      	ldrb	r3, [r7, #13]
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21a      	sxth	r2, r3
 8002f38:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002f3a:	809a      	strh	r2, [r3, #4]
    BMP180_CallibrationData.AC4 = ((callibrationData[6] << 8) | callibrationData[7]);
 8002f3c:	7bbb      	ldrb	r3, [r7, #14]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	b21a      	sxth	r2, r3
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	b21b      	sxth	r3, r3
 8002f46:	4313      	orrs	r3, r2
 8002f48:	b21b      	sxth	r3, r3
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002f4e:	80da      	strh	r2, [r3, #6]
    BMP180_CallibrationData.AC5 = ((callibrationData[8] << 8) | callibrationData[9]);
 8002f50:	7c3b      	ldrb	r3, [r7, #16]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	b21a      	sxth	r2, r3
 8002f56:	7c7b      	ldrb	r3, [r7, #17]
 8002f58:	b21b      	sxth	r3, r3
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002f62:	811a      	strh	r2, [r3, #8]
    BMP180_CallibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 8002f64:	7cbb      	ldrb	r3, [r7, #18]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	b21a      	sxth	r2, r3
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	b21b      	sxth	r3, r3
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002f76:	815a      	strh	r2, [r3, #10]
    BMP180_CallibrationData.B1 = ((callibrationData[12] << 8) | callibrationData[13]);
 8002f78:	7d3b      	ldrb	r3, [r7, #20]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	b21a      	sxth	r2, r3
 8002f7e:	7d7b      	ldrb	r3, [r7, #21]
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	4313      	orrs	r3, r2
 8002f84:	b21a      	sxth	r2, r3
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002f88:	819a      	strh	r2, [r3, #12]
    BMP180_CallibrationData.B2 = ((callibrationData[14] << 8) | callibrationData[15]);
 8002f8a:	7dbb      	ldrb	r3, [r7, #22]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	b21a      	sxth	r2, r3
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	b21b      	sxth	r3, r3
 8002f94:	4313      	orrs	r3, r2
 8002f96:	b21a      	sxth	r2, r3
 8002f98:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002f9a:	81da      	strh	r2, [r3, #14]
    BMP180_CallibrationData.MB = ((callibrationData[16] << 8) | callibrationData[17]);
 8002f9c:	7e3b      	ldrb	r3, [r7, #24]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	7e7b      	ldrb	r3, [r7, #25]
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002fac:	821a      	strh	r2, [r3, #16]
    BMP180_CallibrationData.MC = ((callibrationData[18] << 8) | callibrationData[19]);
 8002fae:	7ebb      	ldrb	r3, [r7, #26]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	b21a      	sxth	r2, r3
 8002fb4:	7efb      	ldrb	r3, [r7, #27]
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	b21a      	sxth	r2, r3
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002fbe:	825a      	strh	r2, [r3, #18]
    BMP180_CallibrationData.MD = ((callibrationData[20] << 8) | callibrationData[21]);
 8002fc0:	7f3b      	ldrb	r3, [r7, #28]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	b21a      	sxth	r2, r3
 8002fc6:	7f7b      	ldrb	r3, [r7, #29]
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	b21a      	sxth	r2, r3
 8002fce:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <BMP180_ReadCallibrationData+0x10c>)
 8002fd0:	829a      	strh	r2, [r3, #20]
}
 8002fd2:	bf00      	nop
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000bd0 	.word	0x20000bd0

08002fe0 <MPU6050_ReadRegister>:
    HAL_I2C_Mem_Read(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, 0xF6, 1, Temp_RAW, 2, 1000);

    return ((Temp_RAW[0] << 8) + Temp_RAW[1]);
}

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	72fb      	strb	r3, [r7, #11]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8002ff2:	7aba      	ldrb	r2, [r7, #10]
 8002ff4:	7af9      	ldrb	r1, [r7, #11]
 8002ff6:	7e3b      	ldrb	r3, [r7, #24]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f7ff fd34 	bl	8002a6a <I2C_Read>
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	72fb      	strb	r3, [r7, #11]
 8003018:	4613      	mov	r3, r2
 800301a:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 800301c:	7aba      	ldrb	r2, [r7, #10]
 800301e:	7af9      	ldrb	r1, [r7, #11]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff fd4d 	bl	8002ac2 <I2C_Write>
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	72fb      	strb	r3, [r7, #11]
 800303e:	4613      	mov	r3, r2
 8003040:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 8003042:	f107 0317 	add.w	r3, r7, #23
 8003046:	7aba      	ldrb	r2, [r7, #10]
 8003048:	7af9      	ldrb	r1, [r7, #11]
 800304a:	2001      	movs	r0, #1
 800304c:	9000      	str	r0, [sp, #0]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff ffc6 	bl	8002fe0 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8003054:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	4313      	orrs	r3, r2
 8003064:	b2db      	uxtb	r3, r3
 8003066:	75bb      	strb	r3, [r7, #22]
 8003068:	e00a      	b.n	8003080 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b25b      	sxtb	r3, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	b25a      	sxtb	r2, r3
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	b25b      	sxtb	r3, r3
 8003078:	4013      	ands	r3, r2
 800307a:	b25b      	sxtb	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8003080:	f107 0316 	add.w	r3, r7, #22
 8003084:	7aba      	ldrb	r2, [r7, #10]
 8003086:	7af9      	ldrb	r1, [r7, #11]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff ffbe 	bl	800300a <MPU6050_WriteRegister>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <GY87_Init+0x12>
        return NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e028      	b.n	80030fc <GY87_Init+0x64>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <GY87_Init+0x6c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d101      	bne.n	80030b6 <GY87_Init+0x1e>
        return NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e022      	b.n	80030fc <GY87_Init+0x64>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fd2e 	bl	8002b18 <GY87_InstanceInit>
 80030bc:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01a      	beq.n	80030fa <GY87_Init+0x62>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff fcb2 	bl	8002a2e <I2C_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <GY87_Init+0x4e>
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff fe60 	bl	8002d96 <GY87_Configure>

            instancesNumber++;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <GY87_Init+0x6c>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	3301      	adds	r3, #1
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <GY87_Init+0x6c>)
 80030e0:	701a      	strb	r2, [r3, #0]

            return hgy87;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	e00a      	b.n	80030fc <GY87_Init+0x64>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00b fc4e 	bl	800e98c <vPortFree>
            vPortFree(hgy87);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f00b fc4b 	bl	800e98c <vPortFree>
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
#endif
            return NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <GY87_Init+0x64>

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
#endif
        return NULL;
 80030fa:	2300      	movs	r3, #0
    }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000bcd 	.word	0x20000bcd

08003108 <GY87_ReadGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af02      	add	r7, sp, #8
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0250;
 8003112:	23c3      	movs	r3, #195	; 0xc3
 8003114:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d051      	beq.n	80031c0 <GY87_ReadGyroscope+0xb8>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d04e      	beq.n	80031c0 <GY87_ReadGyroscope+0xb8>

        /* Read gyroscope in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6858      	ldr	r0, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7a19      	ldrb	r1, [r3, #8]
 800312a:	f107 030c 	add.w	r3, r7, #12
 800312e:	2202      	movs	r2, #2
 8003130:	9200      	str	r2, [sp, #0]
 8003132:	2243      	movs	r2, #67	; 0x43
 8003134:	f7ff ff54 	bl	8002fe0 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8003138:	7b3b      	ldrb	r3, [r7, #12]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	b21a      	sxth	r2, r3
 800313e:	7b7b      	ldrb	r3, [r7, #13]
 8003140:	b21b      	sxth	r3, r3
 8003142:	4313      	orrs	r3, r2
 8003144:	b21b      	sxth	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800314c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003150:	b21a      	sxth	r2, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	801a      	strh	r2, [r3, #0]

        /* Read gyroscope in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6858      	ldr	r0, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7a19      	ldrb	r1, [r3, #8]
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	2202      	movs	r2, #2
 8003164:	9200      	str	r2, [sp, #0]
 8003166:	2245      	movs	r2, #69	; 0x45
 8003168:	f7ff ff3a 	bl	8002fe0 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 800316c:	7b3b      	ldrb	r3, [r7, #12]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	b21a      	sxth	r2, r3
 8003172:	7b7b      	ldrb	r3, [r7, #13]
 8003174:	b21b      	sxth	r3, r3
 8003176:	4313      	orrs	r3, r2
 8003178:	b21b      	sxth	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003180:	fb92 f3f3 	sdiv	r3, r2, r3
 8003184:	b21a      	sxth	r2, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	805a      	strh	r2, [r3, #2]

        /* Read gyroscope in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6858      	ldr	r0, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7a19      	ldrb	r1, [r3, #8]
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	2202      	movs	r2, #2
 8003198:	9200      	str	r2, [sp, #0]
 800319a:	2247      	movs	r2, #71	; 0x47
 800319c:	f7ff ff20 	bl	8002fe0 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 80031a0:	7b3b      	ldrb	r3, [r7, #12]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	b21a      	sxth	r2, r3
 80031a6:	7b7b      	ldrb	r3, [r7, #13]
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80031b8:	b21a      	sxth	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	809a      	strh	r2, [r3, #4]
 80031be:	e009      	b.n	80031d4 <GY87_ReadGyroscope+0xcc>

    } else {

        /* Wrong parameters */
        gyroscopeValues->gyroscopeX = 0;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->gyroscopeY = 0;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->gyroscopeZ = 0;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	809a      	strh	r2, [r3, #4]
    }
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <GY87_ReadAccelerometer>:

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_02;
 80031e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031ea:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d051      	beq.n	8003296 <GY87_ReadAccelerometer+0xba>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d04e      	beq.n	8003296 <GY87_ReadAccelerometer+0xba>

        /* Read accelerometer in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6858      	ldr	r0, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7a19      	ldrb	r1, [r3, #8]
 8003200:	f107 030c 	add.w	r3, r7, #12
 8003204:	2202      	movs	r2, #2
 8003206:	9200      	str	r2, [sp, #0]
 8003208:	223b      	movs	r2, #59	; 0x3b
 800320a:	f7ff fee9 	bl	8002fe0 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 800320e:	7b3b      	ldrb	r3, [r7, #12]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	b21a      	sxth	r2, r3
 8003214:	7b7b      	ldrb	r3, [r7, #13]
 8003216:	b21b      	sxth	r3, r3
 8003218:	4313      	orrs	r3, r2
 800321a:	b21b      	sxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003222:	fb92 f3f3 	sdiv	r3, r2, r3
 8003226:	b21a      	sxth	r2, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	801a      	strh	r2, [r3, #0]

        /* Read accelerometer in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6858      	ldr	r0, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7a19      	ldrb	r1, [r3, #8]
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2202      	movs	r2, #2
 800323a:	9200      	str	r2, [sp, #0]
 800323c:	223d      	movs	r2, #61	; 0x3d
 800323e:	f7ff fecf 	bl	8002fe0 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8003242:	7b3b      	ldrb	r3, [r7, #12]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	b21a      	sxth	r2, r3
 8003248:	7b7b      	ldrb	r3, [r7, #13]
 800324a:	b21b      	sxth	r3, r3
 800324c:	4313      	orrs	r3, r2
 800324e:	b21b      	sxth	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003256:	fb92 f3f3 	sdiv	r3, r2, r3
 800325a:	b21a      	sxth	r2, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	805a      	strh	r2, [r3, #2]

        /* Read accelerometer in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6858      	ldr	r0, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7a19      	ldrb	r1, [r3, #8]
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	2202      	movs	r2, #2
 800326e:	9200      	str	r2, [sp, #0]
 8003270:	223f      	movs	r2, #63	; 0x3f
 8003272:	f7ff feb5 	bl	8002fe0 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8003276:	7b3b      	ldrb	r3, [r7, #12]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	b21a      	sxth	r2, r3
 800327c:	7b7b      	ldrb	r3, [r7, #13]
 800327e:	b21b      	sxth	r3, r3
 8003280:	4313      	orrs	r3, r2
 8003282:	b21b      	sxth	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800328a:	fb92 f3f3 	sdiv	r3, r2, r3
 800328e:	b21a      	sxth	r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	809a      	strh	r2, [r3, #4]
 8003294:	e009      	b.n	80032aa <GY87_ReadAccelerometer+0xce>

    } else {
        /* Wrong parameters */
        accelerometerValues->accelerometerX = 0;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2200      	movs	r2, #0
 800329a:	801a      	strh	r2, [r3, #0]
        accelerometerValues->accelerometerY = 0;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	805a      	strh	r2, [r3, #2]
        accelerometerValues->accelerometerZ = 0;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2200      	movs	r2, #0
 80032a6:	809a      	strh	r2, [r3, #4]
    }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <GY87_ReadTemperatureSensor>:

int16_t GY87_ReadTemperatureSensor(GY87_HandleTypeDef_t * hgy87) {
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af02      	add	r7, sp, #8
 80032b8:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 80032ba:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80032be:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 80032c0:	2324      	movs	r3, #36	; 0x24
 80032c2:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hgy87) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <GY87_ReadTemperatureSensor+0x1c>
        return 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e01b      	b.n	8003306 <GY87_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6858      	ldr	r0, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7a19      	ldrb	r1, [r3, #8]
 80032d6:	f107 0308 	add.w	r3, r7, #8
 80032da:	2202      	movs	r2, #2
 80032dc:	9200      	str	r2, [sp, #0]
 80032de:	2241      	movs	r2, #65	; 0x41
 80032e0:	f7ff fe7e 	bl	8002fe0 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 80032e4:	7a3b      	ldrb	r3, [r7, #8]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	7a7b      	ldrb	r3, [r7, #9]
 80032ec:	b21b      	sxth	r3, r3
 80032ee:	4313      	orrs	r3, r2
 80032f0:	b21b      	sxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	89bb      	ldrh	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	b29b      	uxth	r3, r3
 8003304:	b21b      	sxth	r3, r3
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <GY87_ReadMagnetometer>:

void GY87_ReadMagnetometer(GY87_HandleTypeDef_t * hgy87, GY87_magnetometerValues_t * magnetometerValues) {
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af02      	add	r7, sp, #8
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 1;
 8003318:	2301      	movs	r3, #1
 800331a:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != magnetometerValues) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d051      	beq.n	80033c6 <GY87_ReadMagnetometer+0xb8>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04e      	beq.n	80033c6 <GY87_ReadMagnetometer+0xb8>

        /* Read magnetometer in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6858      	ldr	r0, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7a19      	ldrb	r1, [r3, #8]
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	2202      	movs	r2, #2
 8003336:	9200      	str	r2, [sp, #0]
 8003338:	2249      	movs	r2, #73	; 0x49
 800333a:	f7ff fe51 	bl	8002fe0 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 800333e:	7b7b      	ldrb	r3, [r7, #13]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	b21a      	sxth	r2, r3
 8003344:	7b3b      	ldrb	r3, [r7, #12]
 8003346:	b21b      	sxth	r3, r3
 8003348:	4313      	orrs	r3, r2
 800334a:	b21b      	sxth	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003352:	fb92 f3f3 	sdiv	r3, r2, r3
 8003356:	b21a      	sxth	r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	801a      	strh	r2, [r3, #0]

        /* Read magnetometer in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6858      	ldr	r0, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7a19      	ldrb	r1, [r3, #8]
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	2202      	movs	r2, #2
 800336a:	9200      	str	r2, [sp, #0]
 800336c:	224b      	movs	r2, #75	; 0x4b
 800336e:	f7ff fe37 	bl	8002fe0 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8003372:	7b7b      	ldrb	r3, [r7, #13]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	b21a      	sxth	r2, r3
 8003378:	7b3b      	ldrb	r3, [r7, #12]
 800337a:	b21b      	sxth	r3, r3
 800337c:	4313      	orrs	r3, r2
 800337e:	b21b      	sxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003386:	fb92 f3f3 	sdiv	r3, r2, r3
 800338a:	b21a      	sxth	r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	805a      	strh	r2, [r3, #2]

        /* Read magnetometer in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6858      	ldr	r0, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7a19      	ldrb	r1, [r3, #8]
 8003398:	f107 030c 	add.w	r3, r7, #12
 800339c:	2202      	movs	r2, #2
 800339e:	9200      	str	r2, [sp, #0]
 80033a0:	224d      	movs	r2, #77	; 0x4d
 80033a2:	f7ff fe1d 	bl	8002fe0 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 80033a6:	7b7b      	ldrb	r3, [r7, #13]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	b21a      	sxth	r2, r3
 80033ac:	7b3b      	ldrb	r3, [r7, #12]
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	4313      	orrs	r3, r2
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80033be:	b21a      	sxth	r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	809a      	strh	r2, [r3, #4]
 80033c4:	e009      	b.n	80033da <GY87_ReadMagnetometer+0xcc>

    } else {
        /* Wrong parameters */
        magnetometerValues->magnetometerX = 0;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2200      	movs	r2, #0
 80033ca:	801a      	strh	r2, [r3, #0]
        magnetometerValues->magnetometerY = 0;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	805a      	strh	r2, [r3, #2]
        magnetometerValues->magnetometerZ = 0;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	809a      	strh	r2, [r3, #4]
    }
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	0000      	movs	r0, r0
 80033e4:	0000      	movs	r0, r0
	...

080033e8 <GY87_ReadMagnetometerHeading>:

float GY87_ReadMagnetometerHeading(GY87_HandleTypeDef_t * hgy87) {
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

    /* Declare variable for compass heading */
    float heading;

    /* Check parameters */
    if (NULL != hgy87) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d04d      	beq.n	8003492 <GY87_ReadMagnetometerHeading+0xaa>

        GY87_ReadMagnetometer(hgy87, &magnetometerValues);
 80033f6:	f107 030c 	add.w	r3, r7, #12
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff86 	bl	800330e <GY87_ReadMagnetometer>

        /* Calculate heading */
        heading = atan2(-magnetometerValues.magnetometerY, -magnetometerValues.magnetometerX) * QMC5883L_RADIANS_TO_DEGREES_CONST + QMC5883L_MAGNETIC_DECLINATION + QMC5883L_CALIBRATION_OFFSET;
 8003402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003406:	425b      	negs	r3, r3
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd f893 	bl	8000534 <__aeabi_i2d>
 800340e:	4604      	mov	r4, r0
 8003410:	460d      	mov	r5, r1
 8003412:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003416:	425b      	negs	r3, r3
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f88b 	bl	8000534 <__aeabi_i2d>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	ec43 2b11 	vmov	d1, r2, r3
 8003426:	ec45 4b10 	vmov	d0, r4, r5
 800342a:	f00e fc8f 	bl	8011d4c <atan2>
 800342e:	ec51 0b10 	vmov	r0, r1, d0
 8003432:	a320      	add	r3, pc, #128	; (adr r3, 80034b4 <GY87_ReadMagnetometerHeading+0xcc>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f7fd f8e6 	bl	8000608 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	f7fc ff26 	bl	800029c <__adddf3>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <GY87_ReadMagnetometerHeading+0xc0>)
 800345e:	f7fc ff1d 	bl	800029c <__adddf3>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7fd fbc5 	bl	8000bf8 <__aeabi_d2f>
 800346e:	4603      	mov	r3, r0
 8003470:	617b      	str	r3, [r7, #20]

        /* Check if heading is within 0 and 360 degrees */
        if (heading < 0) {
 8003472:	edd7 7a05 	vldr	s15, [r7, #20]
 8003476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	d50a      	bpl.n	8003496 <GY87_ReadMagnetometerHeading+0xae>
            heading += 360;
 8003480:	edd7 7a05 	vldr	s15, [r7, #20]
 8003484:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80034ac <GY87_ReadMagnetometerHeading+0xc4>
 8003488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800348c:	edc7 7a05 	vstr	s15, [r7, #20]
 8003490:	e001      	b.n	8003496 <GY87_ReadMagnetometerHeading+0xae>
        }

    } else {

        heading = -1;
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <GY87_ReadMagnetometerHeading+0xc8>)
 8003494:	617b      	str	r3, [r7, #20]
    }

    return heading;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	ee07 3a90 	vmov	s15, r3
}
 800349c:	eeb0 0a67 	vmov.f32	s0, s15
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bdb0      	pop	{r4, r5, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	403a0000 	.word	0x403a0000
 80034ac:	43b40000 	.word	0x43b40000
 80034b0:	bf800000 	.word	0xbf800000
 80034b4:	1a63c1f8 	.word	0x1a63c1f8
 80034b8:	404ca5dc 	.word	0x404ca5dc

080034bc <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

    CDC_Transmit_FS(string, strlen((const char *)string));
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fc fedb 	bl	8000280 <strlen>
 80034ca:	4603      	mov	r3, r0
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f00b fb2b 	bl	800eb2c <CDC_Transmit_FS>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
int8_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b090      	sub	sp, #64	; 0x40
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]

    /* Check parameters */
    if (NULL == message) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <LOG+0x18>
        return -1;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034f6:	e049      	b.n	800358c <LOG+0xac>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d902      	bls.n	8003504 <LOG+0x24>
        return -1;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003502:	e043      	b.n	800358c <LOG+0xac>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	f107 0310 	add.w	r3, r7, #16
 800350c:	222e      	movs	r2, #46	; 0x2e
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f00c fd72 	bl	800fffa <memset>

    if (LOG_INFORMATION == logType) {
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d108      	bne.n	800352e <LOG+0x4e>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 800351c:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <LOG+0xb4>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	f107 030c 	add.w	r3, r7, #12
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f00c fd6f 	bl	801000a <strcat>
 800352c:	e022      	b.n	8003574 <LOG+0x94>
    } else if (LOG_DEBUGGING == logType) {
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d108      	bne.n	8003546 <LOG+0x66>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <LOG+0xb8>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	f107 030c 	add.w	r3, r7, #12
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f00c fd63 	bl	801000a <strcat>
 8003544:	e016      	b.n	8003574 <LOG+0x94>
    } else if (LOG_WARNING == logType) {
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d108      	bne.n	800355e <LOG+0x7e>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <LOG+0xbc>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f00c fd57 	bl	801000a <strcat>
 800355c:	e00a      	b.n	8003574 <LOG+0x94>
    } else if (LOG_ERROR == logType) {
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d107      	bne.n	8003574 <LOG+0x94>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8003564:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <LOG+0xc0>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f00c fd4b 	bl	801000a <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4618      	mov	r0, r3
 800357c:	f00c fd45 	bl	801000a <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 8003580:	f107 030c 	add.w	r3, r7, #12
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff99 	bl	80034bc <USB_Write>

    return 0;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3740      	adds	r7, #64	; 0x40
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000014 	.word	0x20000014
 8003598:	20000018 	.word	0x20000018
 800359c:	2000001c 	.word	0x2000001c
 80035a0:	20000020 	.word	0x20000020

080035a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_Init+0x40>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0d      	ldr	r2, [pc, #52]	; (80035e4 <HAL_Init+0x40>)
 80035ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_Init+0x40>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <HAL_Init+0x40>)
 80035ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_Init+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <HAL_Init+0x40>)
 80035c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035cc:	2003      	movs	r0, #3
 80035ce:	f000 fd13 	bl	8003ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d2:	200f      	movs	r0, #15
 80035d4:	f000 f808 	bl	80035e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d8:	f7fe fbe2 	bl	8001da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00

080035e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <HAL_InitTick+0x54>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_InitTick+0x58>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fd2f 	bl	800406a <HAL_SYSTICK_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e00e      	b.n	8003634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d80a      	bhi.n	8003632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800361c:	2200      	movs	r2, #0
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003624:	f000 fcf3 	bl	800400e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003628:	4a06      	ldr	r2, [pc, #24]	; (8003644 <HAL_InitTick+0x5c>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000000 	.word	0x20000000
 8003640:	20000028 	.word	0x20000028
 8003644:	20000024 	.word	0x20000024

08003648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_IncTick+0x20>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_IncTick+0x24>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4413      	add	r3, r2
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <HAL_IncTick+0x24>)
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000028 	.word	0x20000028
 800366c:	20000be8 	.word	0x20000be8

08003670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_GetTick+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000be8 	.word	0x20000be8

08003688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003690:	f7ff ffee 	bl	8003670 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a0:	d005      	beq.n	80036ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <HAL_Delay+0x44>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ae:	bf00      	nop
 80036b0:	f7ff ffde 	bl	8003670 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d8f7      	bhi.n	80036b0 <HAL_Delay+0x28>
  {
  }
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000028 	.word	0x20000028

080036d0 <HAL_ADC_Init>:
 *
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef * hadc) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]

    /* Check ADC handle */
    if (hadc == NULL) {
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_Init+0x16>
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e033      	b.n	800374e <HAL_ADC_Init+0x7e>

    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
        assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
    }

    if (hadc->State == HAL_ADC_STATE_RESET) {
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_ADC_Init+0x32>

        /* Init the low level hardware */
        hadc->MspInitCallback(hadc);
#else
        /* Init the low level hardware */
        HAL_ADC_MspInit(hadc);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe fb82 	bl	8001df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

        /* Initialize ADC error code */
        ADC_CLEAR_ERRORCODE(hadc);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Allocate lock resource and initialize it */
        hadc->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    /* Configuration of ADC parameters if previous preliminary actions are      */
    /* correctly completed.                                                     */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b00      	cmp	r3, #0
 800370c:	d118      	bne.n	8003740 <HAL_ADC_Init+0x70>
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003716:	f023 0302 	bic.w	r3, r3, #2
 800371a:	f043 0202 	orr.w	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set ADC parameters */
        ADC_Init(hadc);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fa86 	bl	8003c34 <ADC_Init>

        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
 800373e:	e001      	b.n	8003744 <HAL_ADC_Init+0x74>
    } else {
        tmp_hal_status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
    }

    /* Release Lock */
    __HAL_UNLOCK(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return tmp_hal_status;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_ADC_Start>:
 * @brief  Enables ADC and starts conversion of the regular channels.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef * hadc) {
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    __IO uint32_t counter = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

    /* Process locked */
    __HAL_LOCK(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_ADC_Start+0x1a>
 800376e:	2302      	movs	r3, #2
 8003770:	e097      	b.n	80038a2 <HAL_ADC_Start+0x14a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the ADC peripheral */
    /* Check if ADC peripheral is disabled in order to enable it and wait during
    Tstab time the ADC's stabilization */
    if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d018      	beq.n	80037ba <HAL_ADC_Start+0x62>
        /* Enable the Peripheral */
        __HAL_ADC_ENABLE(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	609a      	str	r2, [r3, #8]

        /* Delay for ADC stabilization time */
        /* Compute number of CPU cycles to wait for */
        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003798:	4b45      	ldr	r3, [pc, #276]	; (80038b0 <HAL_ADC_Start+0x158>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a45      	ldr	r2, [pc, #276]	; (80038b4 <HAL_ADC_Start+0x15c>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	0c9a      	lsrs	r2, r3, #18
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 80037ac:	e002      	b.n	80037b4 <HAL_ADC_Start+0x5c>
            counter--;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f9      	bne.n	80037ae <HAL_ADC_Start+0x56>
        }
    }

    /* Start conversion if ADC is effectively enabled */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d15f      	bne.n	8003888 <HAL_ADC_Start+0x130>
        /* Set ADC state                                                          */
        /* - Clear state bitfield related to regular group conversion results     */
        /* - Set state bitfield related to regular group operation                */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR, HAL_ADC_STATE_REG_BUSY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

        /* If conversions on group regular are also triggering group injected,    */
        /* update ADC state.                                                      */
        if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_ADC_Start+0xa2>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
        }

        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	d106      	bne.n	8003816 <HAL_ADC_Start+0xbe>
            /* Reset ADC error code fields related to conversions on group regular */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f023 0206 	bic.w	r2, r3, #6
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
 8003814:	e002      	b.n	800381c <HAL_ADC_Start+0xc4>
        } else {
            /* Reset ADC all error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential           */
        /* interruption, to let the process to ADC IRQ Handler.                   */
        __HAL_UNLOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Pointer to the common control register to which is belonging hadc    */
        /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
        /* control register)                                                    */
        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003824:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_ADC_Start+0x160>)
 8003826:	60fb      	str	r3, [r7, #12]

        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC operations) */
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003830:	601a      	str	r2, [r3, #0]

        /* Check if Multimode enabled */
        if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI)) {
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10f      	bne.n	800385e <HAL_ADC_Start+0x106>
#if defined(ADC2) && defined(ADC3)
            if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4))) {
#endif /* ADC2 || ADC3 */
                /* if no external trigger present enable software conversion of regular channels */
                if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d129      	bne.n	80038a0 <HAL_ADC_Start+0x148>
                    /* Enable the selected ADC software conversion for regular group */
                    hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e020      	b.n	80038a0 <HAL_ADC_Start+0x148>
#if defined(ADC2) && defined(ADC3)
            }
#endif /* ADC2 || ADC3 */
        } else {
            /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
            if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)) {
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <HAL_ADC_Start+0x164>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d11b      	bne.n	80038a0 <HAL_ADC_Start+0x148>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d114      	bne.n	80038a0 <HAL_ADC_Start+0x148>
                /* Enable the selected ADC software conversion for regular group */
                hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003884:	609a      	str	r2, [r3, #8]
 8003886:	e00b      	b.n	80038a0 <HAL_ADC_Start+0x148>
            }
        }
    } else {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Return function status */
    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000000 	.word	0x20000000
 80038b4:	431bde83 	.word	0x431bde83
 80038b8:	40012300 	.word	0x40012300
 80038bc:	40012000 	.word	0x40012000

080038c0 <HAL_ADC_PollForConversion>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  Timeout Timeout value in millisecond.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef * hadc, uint32_t Timeout) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
    uint32_t tickstart = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and polling for end of each conversion.     */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) && HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	d113      	bne.n	8003906 <HAL_ADC_PollForConversion+0x46>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ec:	d10b      	bne.n	8003906 <HAL_ADC_PollForConversion+0x46>
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f043 0220 	orr.w	r2, r3, #32
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e063      	b.n	80039ce <HAL_ADC_PollForConversion+0x10e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8003906:	f7ff feb3 	bl	8003670 <HAL_GetTick>
 800390a:	60f8      	str	r0, [r7, #12]

    /* Check End of conversion flag */
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 800390c:	e021      	b.n	8003952 <HAL_ADC_PollForConversion+0x92>
        /* Check if timeout is disabled (set to infinite wait) */
        if (Timeout != HAL_MAX_DELAY) {
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003914:	d01d      	beq.n	8003952 <HAL_ADC_PollForConversion+0x92>
            if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)) {
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <HAL_ADC_PollForConversion+0x6c>
 800391c:	f7ff fea8 	bl	8003670 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d212      	bcs.n	8003952 <HAL_ADC_PollForConversion+0x92>
                /* New check to avoid false timeout detection in case of preemption */
                if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d00b      	beq.n	8003952 <HAL_ADC_PollForConversion+0x92>
                    /* Update ADC state machine to timeout */
                    SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f043 0204 	orr.w	r2, r3, #4
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40

                    /* Process unlocked */
                    __HAL_UNLOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                    return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e03d      	b.n	80039ce <HAL_ADC_PollForConversion+0x10e>
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d1d6      	bne.n	800390e <HAL_ADC_PollForConversion+0x4e>
            }
        }
    }

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0212 	mvn.w	r2, #18
 8003968:	601a      	str	r2, [r3, #0]

    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.          */
    /* Note: On STM32F4, there is no independent flag of end of sequence.       */
    /*       The test of scan sequence on going is done either with scan        */
    /*       sequence disabled or with end of conversion flag set to            */
    /*       of end of sequence.                                                */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc) && (hadc->Init.ContinuousConvMode == DISABLE) && (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d123      	bne.n	80039cc <HAL_ADC_PollForConversion+0x10c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7e1b      	ldrb	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11f      	bne.n	80039cc <HAL_ADC_PollForConversion+0x10c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d006      	beq.n	80039a8 <HAL_ADC_PollForConversion+0xe8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d111      	bne.n	80039cc <HAL_ADC_PollForConversion+0x10c>
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_ADC_PollForConversion+0x10c>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
        }
    }

    /* Return ADC state */
    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_ADC_GetValue>:
 * @brief  Gets the converted value from data register of regular channel.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval Converted value
 */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef * hadc) {
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
    /* Return the selected ADC converted value */
    return hadc->Instance->DR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_ADC_ConfigChannel>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  sConfig ADC configuration structure.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef * hadc, ADC_ChannelConfTypeDef * sConfig) {
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
    __IO uint32_t counter = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

    /* Process locked */
    __HAL_LOCK(hadc);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x1c>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e105      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x228>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
    if (sConfig->Channel > ADC_CHANNEL_9) {
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	d925      	bls.n	8003a68 <HAL_ADC_ConfigChannel+0x78>
        /* Clear the old sample time */
        hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68d9      	ldr	r1, [r3, #12]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b1e      	subs	r3, #30
 8003a32:	2207      	movs	r2, #7
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43da      	mvns	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	400a      	ands	r2, r1
 8003a40:	60da      	str	r2, [r3, #12]

        /* Set the new sample time */
        hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68d9      	ldr	r1, [r3, #12]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	4603      	mov	r3, r0
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4403      	add	r3, r0
 8003a5a:	3b1e      	subs	r3, #30
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e022      	b.n	8003aae <HAL_ADC_ConfigChannel+0xbe>
    } else /* ADC_Channel include in ADC_Channel_[0..9] */
    {
        /* Clear the old sample time */
        hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6919      	ldr	r1, [r3, #16]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43da      	mvns	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	400a      	ands	r2, r1
 8003a8a:	611a      	str	r2, [r3, #16]

        /* Set the new sample time */
        hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6919      	ldr	r1, [r3, #16]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4403      	add	r3, r0
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	611a      	str	r2, [r3, #16]
    }

    /* For Rank 1 to 6 */
    if (sConfig->Rank < 7U) {
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d824      	bhi.n	8003b00 <HAL_ADC_ConfigChannel+0x110>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3b05      	subs	r3, #5
 8003ac8:	221f      	movs	r2, #31
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	3b05      	subs	r3, #5
 8003af2:	fa00 f203 	lsl.w	r2, r0, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34
 8003afe:	e04c      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 7 to 12 */
    else if (sConfig->Rank < 13U) {
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d824      	bhi.n	8003b52 <HAL_ADC_ConfigChannel+0x162>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	3b23      	subs	r3, #35	; 0x23
 8003b1a:	221f      	movs	r2, #31
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43da      	mvns	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	400a      	ands	r2, r1
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	4618      	mov	r0, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	3b23      	subs	r3, #35	; 0x23
 8003b44:	fa00 f203 	lsl.w	r2, r0, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b50:	e023      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 13 to 16 */
    else {
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	3b41      	subs	r3, #65	; 0x41
 8003b64:	221f      	movs	r2, #31
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	400a      	ands	r2, r1
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	4618      	mov	r0, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3b41      	subs	r3, #65	; 0x41
 8003b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b9a:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <HAL_ADC_ConfigChannel+0x234>)
 8003b9c:	60fb      	str	r3, [r7, #12]

    /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
    if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <HAL_ADC_ConfigChannel+0x238>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d109      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x1cc>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b12      	cmp	r3, #18
 8003bae:	d105      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x1cc>
        /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
        }
        /* Enable the VBAT channel*/
        tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	605a      	str	r2, [r3, #4]
    }

    /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
       Channel_17 is selected for VREFINT enable TSVREFE */
    if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_ADC_ConfigChannel+0x238>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d123      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x21e>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d003      	beq.n	8003bd6 <HAL_ADC_ConfigChannel+0x1e6>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b11      	cmp	r3, #17
 8003bd4:	d11b      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x21e>
        /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
        }
        /* Enable the Temperature sensor and VREFINT channel*/
        tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	605a      	str	r2, [r3, #4]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d111      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x21e>
            /* Delay for temperature sensor stabilization time */
            /* Compute number of CPU cycles to wait for */
            counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <HAL_ADC_ConfigChannel+0x23c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <HAL_ADC_ConfigChannel+0x240>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	0c9a      	lsrs	r2, r3, #18
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8003c00:	e002      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x218>
                counter--;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f9      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x212>
            }
        }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40012300 	.word	0x40012300
 8003c28:	40012000 	.word	0x40012000
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	431bde83 	.word	0x431bde83

08003c34 <ADC_Init>:
 *         in the ADC_InitStruct without initializing the ADC MSP.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
static void ADC_Init(ADC_HandleTypeDef * hadc) {
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

    /* Set ADC parameters */
    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c3c:	4b79      	ldr	r3, [pc, #484]	; (8003e24 <ADC_Init+0x1f0>)
 8003c3e:	60fb      	str	r3, [r7, #12]

    /* Set the ADC clock prescaler */
    tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	605a      	str	r2, [r3, #4]

    /* Set ADC scan mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c68:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	021a      	lsls	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]

    /* Set ADC resolution */
    hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c8c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= hadc->Init.Resolution;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]

    /* Set ADC data alignment */
    hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6899      	ldr	r1, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	4a58      	ldr	r2, [pc, #352]	; (8003e28 <ADC_Init+0x1f4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <ADC_Init+0xde>
        /* Select external trigger to start conversion */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cda:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	609a      	str	r2, [r3, #8]

        /* Select external trigger polarity */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cfc:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6899      	ldr	r1, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	e00f      	b.n	8003d32 <ADC_Init+0xfe>
    } else {
        /* Reset the external trigger */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d20:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d30:	609a      	str	r2, [r3, #8]
    }

    /* Enable or disable ADC continuous conversion mode */
    hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0202 	bic.w	r2, r2, #2
 8003d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6899      	ldr	r1, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7e1b      	ldrb	r3, [r3, #24]
 8003d4c:	005a      	lsls	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]

    if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01b      	beq.n	8003d98 <ADC_Init+0x164>
        assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

        /* Enable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d6e:	605a      	str	r2, [r3, #4]

        /* Set the number of channels to be converted in discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d7e:	605a      	str	r2, [r3, #4]
        hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	035a      	lsls	r2, r3, #13
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	e007      	b.n	8003da8 <ADC_Init+0x174>
    } else {
        /* Disable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da6:	605a      	str	r2, [r3, #4]
    }

    /* Set ADC number of conversion */
    hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	051a      	lsls	r2, r3, #20
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable or disable ADC DMA continuous request */
    hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ddc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6899      	ldr	r1, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dea:	025a      	lsls	r2, r3, #9
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]

    /* Enable or disable ADC end of conversion selection */
    hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6899      	ldr	r1, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	029a      	lsls	r2, r3, #10
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40012300 	.word	0x40012300
 8003e28:	0f000001 	.word	0x0f000001

08003e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e5e:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	60d3      	str	r3, [r2, #12]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <__NVIC_GetPriorityGrouping+0x18>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f003 0307 	and.w	r3, r3, #7
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	db0b      	blt.n	8003eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	f003 021f 	and.w	r2, r3, #31
 8003ea8:	4907      	ldr	r1, [pc, #28]	; (8003ec8 <__NVIC_EnableIRQ+0x38>)
 8003eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	db0a      	blt.n	8003ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	490c      	ldr	r1, [pc, #48]	; (8003f18 <__NVIC_SetPriority+0x4c>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef4:	e00a      	b.n	8003f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4908      	ldr	r1, [pc, #32]	; (8003f1c <__NVIC_SetPriority+0x50>)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3b04      	subs	r3, #4
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	440b      	add	r3, r1
 8003f0a:	761a      	strb	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf28      	it	cs
 8003f3e:	2304      	movcs	r3, #4
 8003f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d902      	bls.n	8003f50 <NVIC_EncodePriority+0x30>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3b03      	subs	r3, #3
 8003f4e:	e000      	b.n	8003f52 <NVIC_EncodePriority+0x32>
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	401a      	ands	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	43d9      	mvns	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	4313      	orrs	r3, r2
         );
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f8c:	f3bf 8f4f 	dsb	sy
}
 8003f90:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <__NVIC_SystemReset+0x24>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f9a:	4904      	ldr	r1, [pc, #16]	; (8003fac <__NVIC_SystemReset+0x24>)
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <__NVIC_SystemReset+0x28>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fa2:	f3bf 8f4f 	dsb	sy
}
 8003fa6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <__NVIC_SystemReset+0x20>
 8003fac:	e000ed00 	.word	0xe000ed00
 8003fb0:	05fa0004 	.word	0x05fa0004

08003fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc4:	d301      	bcc.n	8003fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00f      	b.n	8003fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fca:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <SysTick_Config+0x40>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fd2:	210f      	movs	r1, #15
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd8:	f7ff ff78 	bl	8003ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <SysTick_Config+0x40>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe2:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <SysTick_Config+0x40>)
 8003fe4:	2207      	movs	r2, #7
 8003fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	e000e010 	.word	0xe000e010

08003ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff13 	bl	8003e2c <__NVIC_SetPriorityGrouping>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b086      	sub	sp, #24
 8004012:	af00      	add	r7, sp, #0
 8004014:	4603      	mov	r3, r0
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004020:	f7ff ff28 	bl	8003e74 <__NVIC_GetPriorityGrouping>
 8004024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	6978      	ldr	r0, [r7, #20]
 800402c:	f7ff ff78 	bl	8003f20 <NVIC_EncodePriority>
 8004030:	4602      	mov	r2, r0
 8004032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff47 	bl	8003ecc <__NVIC_SetPriority>
}
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff1b 	bl	8003e90 <__NVIC_EnableIRQ>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004066:	f7ff ff8f 	bl	8003f88 <__NVIC_SystemReset>

0800406a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ff9e 	bl	8003fb4 <SysTick_Config>
 8004078:	4603      	mov	r3, r0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004090:	f7ff faee 	bl	8003670 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e099      	b.n	80041d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040c0:	e00f      	b.n	80040e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040c2:	f7ff fad5 	bl	8003670 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b05      	cmp	r3, #5
 80040ce:	d908      	bls.n	80040e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2203      	movs	r2, #3
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e078      	b.n	80041d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e8      	bne.n	80040c2 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4b38      	ldr	r3, [pc, #224]	; (80041dc <HAL_DMA_Init+0x158>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800410e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	2b04      	cmp	r3, #4
 800413a:	d107      	bne.n	800414c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	4313      	orrs	r3, r2
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0307 	bic.w	r3, r3, #7
 8004162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	2b04      	cmp	r3, #4
 8004174:	d117      	bne.n	80041a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8e5 	bl	8004358 <DMA_CheckFifoParam>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2240      	movs	r2, #64	; 0x40
 8004198:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e016      	b.n	80041d4 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f89c 	bl	80042ec <DMA_CalcBaseAndBitshift>
 80041b4:	4603      	mov	r3, r0
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	223f      	movs	r2, #63	; 0x3f
 80041be:	409a      	lsls	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	f010803f 	.word	0xf010803f

080041e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_DMA_Start_IT+0x26>
 8004202:	2302      	movs	r3, #2
 8004204:	e040      	b.n	8004288 <HAL_DMA_Start_IT+0xa8>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d12f      	bne.n	800427a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f82e 	bl	8004290 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004238:	223f      	movs	r2, #63	; 0x3f
 800423a:	409a      	lsls	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0216 	orr.w	r2, r2, #22
 800424e:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0208 	orr.w	r2, r2, #8
 8004266:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e005      	b.n	8004286 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d108      	bne.n	80042d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042ce:	e007      	b.n	80042e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	3b10      	subs	r3, #16
 80042fc:	4a14      	ldr	r2, [pc, #80]	; (8004350 <DMA_CalcBaseAndBitshift+0x64>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004306:	4a13      	ldr	r2, [pc, #76]	; (8004354 <DMA_CalcBaseAndBitshift+0x68>)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b03      	cmp	r3, #3
 8004318:	d909      	bls.n	800432e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004322:	f023 0303 	bic.w	r3, r3, #3
 8004326:	1d1a      	adds	r2, r3, #4
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	659a      	str	r2, [r3, #88]	; 0x58
 800432c:	e007      	b.n	800433e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	aaaaaaab 	.word	0xaaaaaaab
 8004354:	080124a4 	.word	0x080124a4

08004358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d11f      	bne.n	80043b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d856      	bhi.n	8004426 <DMA_CheckFifoParam+0xce>
 8004378:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <DMA_CheckFifoParam+0x28>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004391 	.word	0x08004391
 8004384:	080043a3 	.word	0x080043a3
 8004388:	08004391 	.word	0x08004391
 800438c:	08004427 	.word	0x08004427
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d046      	beq.n	800442a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a0:	e043      	b.n	800442a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043aa:	d140      	bne.n	800442e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b0:	e03d      	b.n	800442e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ba:	d121      	bne.n	8004400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d837      	bhi.n	8004432 <DMA_CheckFifoParam+0xda>
 80043c2:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <DMA_CheckFifoParam+0x70>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043df 	.word	0x080043df
 80043d0:	080043d9 	.word	0x080043d9
 80043d4:	080043f1 	.word	0x080043f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      break;
 80043dc:	e030      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d025      	beq.n	8004436 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ee:	e022      	b.n	8004436 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043f8:	d11f      	bne.n	800443a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fe:	e01c      	b.n	800443a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d903      	bls.n	800440e <DMA_CheckFifoParam+0xb6>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d003      	beq.n	8004414 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800440c:	e018      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
      break;
 8004412:	e015      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e00b      	b.n	800443e <DMA_CheckFifoParam+0xe6>
      break;
 8004426:	bf00      	nop
 8004428:	e00a      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 800442a:	bf00      	nop
 800442c:	e008      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 800442e:	bf00      	nop
 8004430:	e006      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 8004432:	bf00      	nop
 8004434:	e004      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 800443e:	bf00      	nop
    }
  }

  return status;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	e159      	b.n	8004720 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800446c:	2201      	movs	r2, #1
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	429a      	cmp	r2, r3
 8004486:	f040 8148 	bne.w	800471a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b01      	cmp	r3, #1
 8004494:	d005      	beq.n	80044a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d130      	bne.n	8004504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	2203      	movs	r2, #3
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044d8:	2201      	movs	r2, #1
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	f003 0201 	and.w	r2, r3, #1
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b03      	cmp	r3, #3
 800450e:	d017      	beq.n	8004540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	2203      	movs	r2, #3
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d123      	bne.n	8004594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	08da      	lsrs	r2, r3, #3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3208      	adds	r2, #8
 8004554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	220f      	movs	r2, #15
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	08da      	lsrs	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3208      	adds	r2, #8
 800458e:	69b9      	ldr	r1, [r7, #24]
 8004590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	2203      	movs	r2, #3
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0203 	and.w	r2, r3, #3
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80a2 	beq.w	800471a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	4b57      	ldr	r3, [pc, #348]	; (8004738 <HAL_GPIO_Init+0x2e8>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	4a56      	ldr	r2, [pc, #344]	; (8004738 <HAL_GPIO_Init+0x2e8>)
 80045e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e4:	6453      	str	r3, [r2, #68]	; 0x44
 80045e6:	4b54      	ldr	r3, [pc, #336]	; (8004738 <HAL_GPIO_Init+0x2e8>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045f2:	4a52      	ldr	r2, [pc, #328]	; (800473c <HAL_GPIO_Init+0x2ec>)
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	3302      	adds	r3, #2
 80045fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	220f      	movs	r2, #15
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a49      	ldr	r2, [pc, #292]	; (8004740 <HAL_GPIO_Init+0x2f0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d019      	beq.n	8004652 <HAL_GPIO_Init+0x202>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a48      	ldr	r2, [pc, #288]	; (8004744 <HAL_GPIO_Init+0x2f4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_GPIO_Init+0x1fe>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a47      	ldr	r2, [pc, #284]	; (8004748 <HAL_GPIO_Init+0x2f8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00d      	beq.n	800464a <HAL_GPIO_Init+0x1fa>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a46      	ldr	r2, [pc, #280]	; (800474c <HAL_GPIO_Init+0x2fc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <HAL_GPIO_Init+0x1f6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a45      	ldr	r2, [pc, #276]	; (8004750 <HAL_GPIO_Init+0x300>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_GPIO_Init+0x1f2>
 800463e:	2304      	movs	r3, #4
 8004640:	e008      	b.n	8004654 <HAL_GPIO_Init+0x204>
 8004642:	2307      	movs	r3, #7
 8004644:	e006      	b.n	8004654 <HAL_GPIO_Init+0x204>
 8004646:	2303      	movs	r3, #3
 8004648:	e004      	b.n	8004654 <HAL_GPIO_Init+0x204>
 800464a:	2302      	movs	r3, #2
 800464c:	e002      	b.n	8004654 <HAL_GPIO_Init+0x204>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <HAL_GPIO_Init+0x204>
 8004652:	2300      	movs	r3, #0
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	f002 0203 	and.w	r2, r2, #3
 800465a:	0092      	lsls	r2, r2, #2
 800465c:	4093      	lsls	r3, r2
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004664:	4935      	ldr	r1, [pc, #212]	; (800473c <HAL_GPIO_Init+0x2ec>)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	089b      	lsrs	r3, r3, #2
 800466a:	3302      	adds	r3, #2
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004672:	4b38      	ldr	r3, [pc, #224]	; (8004754 <HAL_GPIO_Init+0x304>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	43db      	mvns	r3, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004696:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <HAL_GPIO_Init+0x304>)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_GPIO_Init+0x304>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046c0:	4a24      	ldr	r2, [pc, #144]	; (8004754 <HAL_GPIO_Init+0x304>)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_GPIO_Init+0x304>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ea:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <HAL_GPIO_Init+0x304>)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046f0:	4b18      	ldr	r3, [pc, #96]	; (8004754 <HAL_GPIO_Init+0x304>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004714:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <HAL_GPIO_Init+0x304>)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3301      	adds	r3, #1
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2b0f      	cmp	r3, #15
 8004724:	f67f aea2 	bls.w	800446c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	3724      	adds	r7, #36	; 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800
 800473c:	40013800 	.word	0x40013800
 8004740:	40020000 	.word	0x40020000
 8004744:	40020400 	.word	0x40020400
 8004748:	40020800 	.word	0x40020800
 800474c:	40020c00 	.word	0x40020c00
 8004750:	40021000 	.word	0x40021000
 8004754:	40013c00 	.word	0x40013c00

08004758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
 8004774:	e001      	b.n	800477a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
 8004794:	4613      	mov	r3, r2
 8004796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004798:	787b      	ldrb	r3, [r7, #1]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047a4:	e003      	b.n	80047ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047a6:	887b      	ldrh	r3, [r7, #2]
 80047a8:	041a      	lsls	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	619a      	str	r2, [r3, #24]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e12b      	b.n	8004a26 <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd fb4c 	bl	8001e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2224      	movs	r2, #36	; 0x24
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800480e:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800481e:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8004820:	f002 fe38 	bl	8007494 <HAL_RCC_GetPCLK1Freq>
 8004824:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4a81      	ldr	r2, [pc, #516]	; (8004a30 <HAL_I2C_Init+0x274>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d807      	bhi.n	8004840 <HAL_I2C_Init+0x84>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a80      	ldr	r2, [pc, #512]	; (8004a34 <HAL_I2C_Init+0x278>)
 8004834:	4293      	cmp	r3, r2
 8004836:	bf94      	ite	ls
 8004838:	2301      	movls	r3, #1
 800483a:	2300      	movhi	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e006      	b.n	800484e <HAL_I2C_Init+0x92>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a7d      	ldr	r2, [pc, #500]	; (8004a38 <HAL_I2C_Init+0x27c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0e7      	b.n	8004a26 <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a78      	ldr	r2, [pc, #480]	; (8004a3c <HAL_I2C_Init+0x280>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	0c9b      	lsrs	r3, r3, #18
 8004860:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a6a      	ldr	r2, [pc, #424]	; (8004a30 <HAL_I2C_Init+0x274>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d802      	bhi.n	8004890 <HAL_I2C_Init+0xd4>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	3301      	adds	r3, #1
 800488e:	e009      	b.n	80048a4 <HAL_I2C_Init+0xe8>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	4a69      	ldr	r2, [pc, #420]	; (8004a40 <HAL_I2C_Init+0x284>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	099b      	lsrs	r3, r3, #6
 80048a2:	3301      	adds	r3, #1
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6213      	str	r3, [r2, #32]

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	495c      	ldr	r1, [pc, #368]	; (8004a30 <HAL_I2C_Init+0x274>)
 80048c0:	428b      	cmp	r3, r1
 80048c2:	d819      	bhi.n	80048f8 <HAL_I2C_Init+0x13c>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1e59      	subs	r1, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d2:	1c59      	adds	r1, r3, #1
 80048d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048d8:	400b      	ands	r3, r1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_I2C_Init+0x138>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1e59      	subs	r1, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f2:	e051      	b.n	8004998 <HAL_I2C_Init+0x1dc>
 80048f4:	2304      	movs	r3, #4
 80048f6:	e04f      	b.n	8004998 <HAL_I2C_Init+0x1dc>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d111      	bne.n	8004924 <HAL_I2C_Init+0x168>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1e58      	subs	r0, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6859      	ldr	r1, [r3, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	440b      	add	r3, r1
 800490e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004912:	3301      	adds	r3, #1
 8004914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e012      	b.n	800494a <HAL_I2C_Init+0x18e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1e58      	subs	r0, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	0099      	lsls	r1, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	fbb0 f3f3 	udiv	r3, r0, r3
 800493a:	3301      	adds	r3, #1
 800493c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_I2C_Init+0x196>
 800494e:	2301      	movs	r3, #1
 8004950:	e022      	b.n	8004998 <HAL_I2C_Init+0x1dc>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10e      	bne.n	8004978 <HAL_I2C_Init+0x1bc>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1e58      	subs	r0, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	440b      	add	r3, r1
 8004968:	fbb0 f3f3 	udiv	r3, r0, r3
 800496c:	3301      	adds	r3, #1
 800496e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004976:	e00f      	b.n	8004998 <HAL_I2C_Init+0x1dc>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e58      	subs	r0, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	0099      	lsls	r1, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	fbb0 f3f3 	udiv	r3, r0, r3
 800498e:	3301      	adds	r3, #1
 8004990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	6809      	ldr	r1, [r1, #0]
 800499c:	4313      	orrs	r3, r2
 800499e:	61cb      	str	r3, [r1, #28]

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6911      	ldr	r1, [r2, #16]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68d2      	ldr	r2, [r2, #12]
 80049d2:	4311      	orrs	r1, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	430b      	orrs	r3, r1
 80049da:	6093      	str	r3, [r2, #8]

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	60da      	str	r2, [r3, #12]

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	000186a0 	.word	0x000186a0
 8004a34:	001e847f 	.word	0x001e847f
 8004a38:	003d08ff 	.word	0x003d08ff
 8004a3c:	431bde83 	.word	0x431bde83
 8004a40:	10624dd3 	.word	0x10624dd3

08004a44 <HAL_I2C_Mem_Write>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	817b      	strh	r3, [r7, #10]
 8004a56:	460b      	mov	r3, r1
 8004a58:	813b      	strh	r3, [r7, #8]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8004a5e:	f7fe fe07 	bl	8003670 <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	f040 80d9 	bne.w	8004c24 <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2319      	movs	r3, #25
 8004a78:	2201      	movs	r2, #1
 8004a7a:	496d      	ldr	r1, [pc, #436]	; (8004c30 <HAL_I2C_Mem_Write+0x1ec>)
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fc7f 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x48>
            return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e0cc      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_I2C_Mem_Write+0x56>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e0c5      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d007      	beq.n	8004ac0 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ace:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2221      	movs	r2, #33	; 0x21
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4a4d      	ldr	r2, [pc, #308]	; (8004c34 <HAL_I2C_Mem_Write+0x1f0>)
 8004b00:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8004b02:	88f8      	ldrh	r0, [r7, #6]
 8004b04:	893a      	ldrh	r2, [r7, #8]
 8004b06:	8979      	ldrh	r1, [r7, #10]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	4603      	mov	r3, r0
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 fab6 	bl	8005084 <I2C_RequestMemoryWrite>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d052      	beq.n	8004bc4 <HAL_I2C_Mem_Write+0x180>
            return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e081      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fd00 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d107      	bne.n	8004b4a <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b48:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e06b      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	781a      	ldrb	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24

            /* Update counter */
            hi2c->XferSize--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	851a      	strh	r2, [r3, #40]	; 0x28
            hi2c->XferCount--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_I2C_Mem_Write+0x180>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d017      	beq.n	8004bc4 <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1aa      	bne.n	8004b22 <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fcec 	bl	80055ae <I2C_WaitOnBTFFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00d      	beq.n	8004bf8 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d107      	bne.n	8004bf4 <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf2:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e016      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e000      	b.n	8004c26 <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
    }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	00100002 	.word	0x00100002
 8004c34:	ffff0000 	.word	0xffff0000

08004c38 <HAL_I2C_Mem_Read>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	; 0x30
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	461a      	mov	r2, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	817b      	strh	r3, [r7, #10]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	813b      	strh	r3, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8004c52:	f7fe fd0d 	bl	8003670 <HAL_GetTick>
 8004c56:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	f040 8208 	bne.w	8005076 <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	2319      	movs	r3, #25
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	497b      	ldr	r1, [pc, #492]	; (8004e5c <HAL_I2C_Mem_Read+0x224>)
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fb85 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_Mem_Read+0x48>
            return HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e1fb      	b.n	8005078 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_I2C_Mem_Read+0x56>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e1f4      	b.n	8005078 <HAL_I2C_Mem_Read+0x440>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d007      	beq.n	8004cb4 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2222      	movs	r2, #34	; 0x22
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2240      	movs	r2, #64	; 0x40
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a5b      	ldr	r2, [pc, #364]	; (8004e60 <HAL_I2C_Mem_Read+0x228>)
 8004cf4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8004cf6:	88f8      	ldrh	r0, [r7, #6]
 8004cf8:	893a      	ldrh	r2, [r7, #8]
 8004cfa:	8979      	ldrh	r1, [r7, #10]
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	4603      	mov	r3, r0
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fa52 	bl	80051b0 <I2C_RequestMemoryRead>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Mem_Read+0xde>
            return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e1b0      	b.n	8005078 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d113      	bne.n	8004d46 <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e184      	b.n	8005050 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d11b      	bne.n	8004d86 <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e164      	b.n	8005050 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d11b      	bne.n	8004dc6 <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9c:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dac:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	e144      	b.n	8005050 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8004ddc:	e138      	b.n	8005050 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	f200 80f1 	bhi.w	8004fca <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d123      	bne.n	8004e38 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fc1b 	bl	8005630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e139      	b.n	8005078 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e36:	e10b      	b.n	8005050 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d14e      	bne.n	8004ede <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	2200      	movs	r2, #0
 8004e48:	4906      	ldr	r1, [pc, #24]	; (8004e64 <HAL_I2C_Mem_Read+0x22c>)
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fa98 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_I2C_Mem_Read+0x230>
                        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e10e      	b.n	8005078 <HAL_I2C_Mem_Read+0x440>
 8004e5a:	bf00      	nop
 8004e5c:	00100002 	.word	0x00100002
 8004e60:	ffff0000 	.word	0xffff0000
 8004e64:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e76:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004edc:	e0b8      	b.n	8005050 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4966      	ldr	r1, [pc, #408]	; (8005080 <HAL_I2C_Mem_Read+0x448>)
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fa49 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_I2C_Mem_Read+0x2c0>
                        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0bf      	b.n	8005078 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f06:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2200      	movs	r2, #0
 8004f42:	494f      	ldr	r1, [pc, #316]	; (8005080 <HAL_I2C_Mem_Read+0x448>)
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fa1b 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_I2C_Mem_Read+0x31c>
                        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e091      	b.n	8005078 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f62:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fc8:	e042      	b.n	8005050 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fb2e 	bl	8005630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e04c      	b.n	8005078 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b04      	cmp	r3, #4
 800501c:	d118      	bne.n	8005050 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	f47f aec2 	bne.w	8004dde <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
    }
}
 8005078:	4618      	mov	r0, r3
 800507a:	3728      	adds	r7, #40	; 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	00010004 	.word	0x00010004

08005084 <I2C_RequestMemoryWrite>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	4603      	mov	r3, r0
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	460b      	mov	r3, r1
 8005098:	813b      	strh	r3, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ac:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f960 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00d      	beq.n	80050e2 <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d4:	d103      	bne.n	80050de <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e05f      	b.n	80051a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050e2:	897b      	ldrh	r3, [r7, #10]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050f0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	492d      	ldr	r1, [pc, #180]	; (80051ac <I2C_RequestMemoryWrite+0x128>)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f998 	bl	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <I2C_RequestMemoryWrite+0x84>
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e04c      	b.n	80051a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800511e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005120:	6a39      	ldr	r1, [r7, #32]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fa02 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2b04      	cmp	r3, #4
 8005134:	d107      	bne.n	8005146 <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e02b      	b.n	80051a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005150:	893b      	ldrh	r3, [r7, #8]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	611a      	str	r2, [r3, #16]
 800515a:	e021      	b.n	80051a0 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800515c:	893b      	ldrh	r3, [r7, #8]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	b29b      	uxth	r3, r3
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	6a39      	ldr	r1, [r7, #32]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f9dc 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00d      	beq.n	8005196 <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	2b04      	cmp	r3, #4
 8005180:	d107      	bne.n	8005192 <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005190:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e005      	b.n	80051a2 <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005196:	893b      	ldrh	r3, [r7, #8]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	00010002 	.word	0x00010002

080051b0 <I2C_RequestMemoryRead>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	4608      	mov	r0, r1
 80051ba:	4611      	mov	r1, r2
 80051bc:	461a      	mov	r2, r3
 80051be:	4603      	mov	r3, r0
 80051c0:	817b      	strh	r3, [r7, #10]
 80051c2:	460b      	mov	r3, r1
 80051c4:	813b      	strh	r3, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051d8:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f8c2 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00d      	beq.n	800521e <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005210:	d103      	bne.n	800521a <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e0aa      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800522c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	4952      	ldr	r1, [pc, #328]	; (800537c <I2C_RequestMemoryRead+0x1cc>)
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f8fa 	bl	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <I2C_RequestMemoryRead+0x94>
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e097      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800525a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525c:	6a39      	ldr	r1, [r7, #32]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f964 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2b04      	cmp	r3, #4
 8005270:	d107      	bne.n	8005282 <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e076      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d105      	bne.n	8005298 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800528c:	893b      	ldrh	r3, [r7, #8]
 800528e:	b2da      	uxtb	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	611a      	str	r2, [r3, #16]
 8005296:	e021      	b.n	80052dc <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005298:	893b      	ldrh	r3, [r7, #8]
 800529a:	0a1b      	lsrs	r3, r3, #8
 800529c:	b29b      	uxth	r3, r3
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80052a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a8:	6a39      	ldr	r1, [r7, #32]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f93e 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00d      	beq.n	80052d2 <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d107      	bne.n	80052ce <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052cc:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e050      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052d2:	893b      	ldrh	r3, [r7, #8]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80052dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052de:	6a39      	ldr	r1, [r7, #32]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f923 	bl	800552c <I2C_WaitOnTXEFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00d      	beq.n	8005308 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d107      	bne.n	8005304 <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005302:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e035      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005316:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2200      	movs	r2, #0
 8005320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f82b 	bl	8005380 <I2C_WaitOnFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00d      	beq.n	800534c <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533e:	d103      	bne.n	8005348 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005346:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e013      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800534c:	897b      	ldrh	r3, [r7, #10]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	6a3a      	ldr	r2, [r7, #32]
 8005360:	4906      	ldr	r1, [pc, #24]	; (800537c <I2C_RequestMemoryRead+0x1cc>)
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f863 	bl	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <I2C_RequestMemoryRead+0x1c2>
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	00010002 	.word	0x00010002

08005380 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Status The new Flag status (SET or RESET).
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8005390:	e025      	b.n	80053de <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005398:	d021      	beq.n	80053de <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800539a:	f7fe f969 	bl	8003670 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d302      	bcc.n	80053b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d116      	bne.n	80053de <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e023      	b.n	8005426 <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d10d      	bne.n	8005404 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	e00c      	b.n	800541e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	43da      	mvns	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	429a      	cmp	r2, r3
 8005422:	d0b6      	beq.n	8005392 <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Flag specifies the I2C flag to check.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart) {
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 800543c:	e051      	b.n	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544c:	d123      	bne.n	8005496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545c:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005466:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f043 0204 	orr.w	r2, r3, #4
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e046      	b.n	8005524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549c:	d021      	beq.n	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800549e:	f7fe f8e7 	bl	8003670 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d116      	bne.n	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e020      	b.n	8005524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d10c      	bne.n	8005506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	43da      	mvns	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bf14      	ite	ne
 80054fe:	2301      	movne	r3, #1
 8005500:	2300      	moveq	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	e00b      	b.n	800551e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	43da      	mvns	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4013      	ands	r3, r2
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf14      	ite	ne
 8005518:	2301      	movne	r3, #1
 800551a:	2300      	moveq	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d18d      	bne.n	800543e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <I2C_WaitOnTXEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8005538:	e02d      	b.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f8ce 	bl	80056dc <I2C_IsAcknowledgeFailed>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e02d      	b.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005550:	d021      	beq.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8005552:	f7fe f88d 	bl	8003670 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d116      	bne.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e007      	b.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a0:	2b80      	cmp	r3, #128	; 0x80
 80055a2:	d1ca      	bne.n	800553a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <I2C_WaitOnBTFFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 80055ba:	e02d      	b.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f88d 	bl	80056dc <I2C_IsAcknowledgeFailed>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e02d      	b.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d2:	d021      	beq.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80055d4:	f7fe f84c 	bl	8003670 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d116      	bne.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	f043 0220 	orr.w	r2, r3, #32
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e007      	b.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d1ca      	bne.n	80055bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <I2C_WaitOnRXNEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 800563c:	e042      	b.n	80056c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b10      	cmp	r3, #16
 800564a:	d119      	bne.n	8005680 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0210 	mvn.w	r2, #16
 8005654:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e029      	b.n	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8005680:	f7fd fff6 	bl	8003670 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	d302      	bcc.n	8005696 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d116      	bne.n	80056c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e007      	b.n	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	d1b5      	bne.n	800563e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f2:	d11b      	bne.n	800572c <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056fc:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	f043 0204 	orr.w	r2, r3, #4
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e000      	b.n	800572e <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800573a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573c:	b08f      	sub	sp, #60	; 0x3c
 800573e:	af0a      	add	r7, sp, #40	; 0x28
 8005740:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e10f      	b.n	800596c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f009 fb28 	bl	800edbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2203      	movs	r2, #3
 8005770:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f003 f95f 	bl	8008a4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	687e      	ldr	r6, [r7, #4]
 8005798:	466d      	mov	r5, sp
 800579a:	f106 0410 	add.w	r4, r6, #16
 800579e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80057ae:	1d33      	adds	r3, r6, #4
 80057b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057b2:	6838      	ldr	r0, [r7, #0]
 80057b4:	f003 f836 	bl	8008824 <USB_CoreInit>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e0d0      	b.n	800596c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2100      	movs	r1, #0
 80057d0:	4618      	mov	r0, r3
 80057d2:	f003 f94d 	bl	8008a70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
 80057da:	e04a      	b.n	8005872 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057dc:	7bfa      	ldrb	r2, [r7, #15]
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	4613      	mov	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	333d      	adds	r3, #61	; 0x3d
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057f0:	7bfa      	ldrb	r2, [r7, #15]
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	333c      	adds	r3, #60	; 0x3c
 8005800:	7bfa      	ldrb	r2, [r7, #15]
 8005802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005804:	7bfa      	ldrb	r2, [r7, #15]
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	b298      	uxth	r0, r3
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4613      	mov	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	3344      	adds	r3, #68	; 0x44
 8005818:	4602      	mov	r2, r0
 800581a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800581c:	7bfa      	ldrb	r2, [r7, #15]
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	3340      	adds	r3, #64	; 0x40
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005830:	7bfa      	ldrb	r2, [r7, #15]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	3348      	adds	r3, #72	; 0x48
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005844:	7bfa      	ldrb	r2, [r7, #15]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	334c      	adds	r3, #76	; 0x4c
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005858:	7bfa      	ldrb	r2, [r7, #15]
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	3354      	adds	r3, #84	; 0x54
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	3301      	adds	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
 8005872:	7bfa      	ldrb	r2, [r7, #15]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d3af      	bcc.n	80057dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800587c:	2300      	movs	r3, #0
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	e044      	b.n	800590c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005882:	7bfa      	ldrb	r2, [r7, #15]
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80058aa:	7bfa      	ldrb	r2, [r7, #15]
 80058ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058ae:	7bfa      	ldrb	r2, [r7, #15]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058c4:	7bfa      	ldrb	r2, [r7, #15]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058da:	7bfa      	ldrb	r2, [r7, #15]
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058f0:	7bfa      	ldrb	r2, [r7, #15]
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	3301      	adds	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
 800590c:	7bfa      	ldrb	r2, [r7, #15]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d3b5      	bcc.n	8005882 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	687e      	ldr	r6, [r7, #4]
 800591e:	466d      	mov	r5, sp
 8005920:	f106 0410 	add.w	r4, r6, #16
 8005924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800592a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800592c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005930:	e885 0003 	stmia.w	r5, {r0, r1}
 8005934:	1d33      	adds	r3, r6, #4
 8005936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005938:	6838      	ldr	r0, [r7, #0]
 800593a:	f003 f8e5 	bl	8008b08 <USB_DevInit>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e00d      	b.n	800596c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f004 fa34 	bl	8009dd2 <USB_DevDisconnect>

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005974 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_PCD_Start+0x1c>
 800598c:	2302      	movs	r3, #2
 800598e:	e020      	b.n	80059d2 <HAL_PCD_Start+0x5e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	2b01      	cmp	r3, #1
 800599e:	d109      	bne.n	80059b4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d005      	beq.n	80059b4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f003 f837 	bl	8008a2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f004 f9e4 	bl	8009d90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059da:	b590      	push	{r4, r7, lr}
 80059dc:	b08d      	sub	sp, #52	; 0x34
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f004 faa2 	bl	8009f3a <USB_GetMode>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f040 848a 	bne.w	8006312 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f004 fa06 	bl	8009e14 <USB_ReadInterrupts>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8480 	beq.w	8006310 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f004 f9f3 	bl	8009e14 <USB_ReadInterrupts>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d107      	bne.n	8005a48 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695a      	ldr	r2, [r3, #20]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f002 0202 	and.w	r2, r2, #2
 8005a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f004 f9e1 	bl	8009e14 <USB_ReadInterrupts>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d161      	bne.n	8005b20 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0210 	bic.w	r2, r2, #16
 8005a6a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f003 020f 	and.w	r2, r3, #15
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	3304      	adds	r3, #4
 8005a8a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	0c5b      	lsrs	r3, r3, #17
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d124      	bne.n	8005ae2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d035      	beq.n	8005b10 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6a38      	ldr	r0, [r7, #32]
 8005ab8:	f004 f818 	bl	8009aec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	091b      	lsrs	r3, r3, #4
 8005ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ac8:	441a      	add	r2, r3
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6a1a      	ldr	r2, [r3, #32]
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	091b      	lsrs	r3, r3, #4
 8005ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ada:	441a      	add	r2, r3
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
 8005ae0:	e016      	b.n	8005b10 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	0c5b      	lsrs	r3, r3, #17
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	2b06      	cmp	r3, #6
 8005aec:	d110      	bne.n	8005b10 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005af4:	2208      	movs	r2, #8
 8005af6:	4619      	mov	r1, r3
 8005af8:	6a38      	ldr	r0, [r7, #32]
 8005afa:	f003 fff7 	bl	8009aec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6a1a      	ldr	r2, [r3, #32]
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b0a:	441a      	add	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0210 	orr.w	r2, r2, #16
 8005b1e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f004 f975 	bl	8009e14 <USB_ReadInterrupts>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b34:	f040 80a7 	bne.w	8005c86 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f004 f97a 	bl	8009e3a <USB_ReadDevAllOutEpInterrupt>
 8005b46:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005b48:	e099      	b.n	8005c7e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 808e 	beq.w	8005c72 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f004 f99e 	bl	8009ea2 <USB_ReadDevOutEPInterrupt>
 8005b66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2301      	movs	r3, #1
 8005b82:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fec2 	bl	8006910 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00c      	beq.n	8005bb0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 ff98 	bl	8006ae0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f003 0310 	and.w	r3, r3, #16
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2310      	movs	r3, #16
 8005bca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d030      	beq.n	8005c38 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bde:	2b80      	cmp	r3, #128	; 0x80
 8005be0:	d109      	bne.n	8005bf6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bf4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	3304      	adds	r3, #4
 8005c0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	78db      	ldrb	r3, [r3, #3]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d108      	bne.n	8005c26 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2200      	movs	r2, #0
 8005c18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f009 f9c7 	bl	800efb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	461a      	mov	r2, r3
 8005c34:	2302      	movs	r3, #2
 8005c36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2320      	movs	r3, #32
 8005c52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	3301      	adds	r3, #1
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f47f af62 	bne.w	8005b4a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f004 f8c2 	bl	8009e14 <USB_ReadInterrupts>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c9a:	f040 80db 	bne.w	8005e54 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f004 f8e3 	bl	8009e6e <USB_ReadDevAllInEpInterrupt>
 8005ca8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005cae:	e0cd      	b.n	8005e4c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 80c2 	beq.w	8005e40 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f004 f909 	bl	8009ede <USB_ReadDevInEPInterrupt>
 8005ccc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d057      	beq.n	8005d88 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	2201      	movs	r2, #1
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	69f9      	ldr	r1, [r7, #28]
 8005cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	461a      	mov	r2, r3
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d132      	bne.n	8005d7c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	334c      	adds	r3, #76	; 0x4c
 8005d26:	6819      	ldr	r1, [r3, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4403      	add	r3, r0
 8005d36:	3348      	adds	r3, #72	; 0x48
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4419      	add	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4403      	add	r3, r0
 8005d4a:	334c      	adds	r3, #76	; 0x4c
 8005d4c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d113      	bne.n	8005d7c <HAL_PCD_IRQHandler+0x3a2>
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	3354      	adds	r3, #84	; 0x54
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d108      	bne.n	8005d7c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d74:	461a      	mov	r2, r3
 8005d76:	2101      	movs	r1, #1
 8005d78:	f004 f910 	bl	8009f9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f009 f89b 	bl	800eebe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d008      	beq.n	8005da4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2308      	movs	r3, #8
 8005da2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2340      	movs	r3, #64	; 0x40
 8005dda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d023      	beq.n	8005e2e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005de8:	6a38      	ldr	r0, [r7, #32]
 8005dea:	f002 fff1 	bl	8008dd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df0:	4613      	mov	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	3338      	adds	r3, #56	; 0x38
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	3304      	adds	r3, #4
 8005e00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	78db      	ldrb	r3, [r3, #3]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d108      	bne.n	8005e1c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f009 f8de 	bl	800efd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fcdb 	bl	80067f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	3301      	adds	r3, #1
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f47f af2e 	bne.w	8005cb0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f003 ffdb 	bl	8009e14 <USB_ReadInterrupts>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e68:	d122      	bne.n	8005eb0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d108      	bne.n	8005e9a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fec2 	bl	8006c1c <HAL_PCDEx_LPM_Callback>
 8005e98:	e002      	b.n	8005ea0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f009 f87c 	bl	800ef98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695a      	ldr	r2, [r3, #20]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f003 ffad 	bl	8009e14 <USB_ReadInterrupts>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec4:	d112      	bne.n	8005eec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d102      	bne.n	8005edc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f009 f838 	bl	800ef4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695a      	ldr	r2, [r3, #20]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005eea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f003 ff8f 	bl	8009e14 <USB_ReadInterrupts>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	f040 80b7 	bne.w	8006072 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2110      	movs	r1, #16
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f002 ff56 	bl	8008dd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f24:	2300      	movs	r3, #0
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f28:	e046      	b.n	8005fb8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f36:	461a      	mov	r2, r3
 8005f38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fb0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d3b3      	bcc.n	8005f2a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005fd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d016      	beq.n	800600c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fee:	f043 030b 	orr.w	r3, r3, #11
 8005ff2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006004:	f043 030b 	orr.w	r3, r3, #11
 8006008:	6453      	str	r3, [r2, #68]	; 0x44
 800600a:	e015      	b.n	8006038 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800601e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006022:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006032:	f043 030b 	orr.w	r3, r3, #11
 8006036:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006046:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800604a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800605c:	461a      	mov	r2, r3
 800605e:	f003 ff9d 	bl	8009f9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f003 fecc 	bl	8009e14 <USB_ReadInterrupts>
 800607c:	4603      	mov	r3, r0
 800607e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006086:	d124      	bne.n	80060d2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f003 ff62 	bl	8009f56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f002 ff17 	bl	8008eca <USB_GetDevSpeed>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681c      	ldr	r4, [r3, #0]
 80060a8:	f001 f9e8 	bl	800747c <HAL_RCC_GetHCLKFreq>
 80060ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	4620      	mov	r0, r4
 80060b8:	f002 fc16 	bl	80088e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f008 ff26 	bl	800ef0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80060d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f003 fe9c 	bl	8009e14 <USB_ReadInterrupts>
 80060dc:	4603      	mov	r3, r0
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d10a      	bne.n	80060fc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f008 ff03 	bl	800eef2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f002 0208 	and.w	r2, r2, #8
 80060fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f003 fe87 	bl	8009e14 <USB_ReadInterrupts>
 8006106:	4603      	mov	r3, r0
 8006108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610c:	2b80      	cmp	r3, #128	; 0x80
 800610e:	d122      	bne.n	8006156 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800611c:	2301      	movs	r3, #1
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
 8006120:	e014      	b.n	800614c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006126:	4613      	mov	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d105      	bne.n	8006146 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	b2db      	uxtb	r3, r3
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fb27 	bl	8006794 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	3301      	adds	r3, #1
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006152:	429a      	cmp	r2, r3
 8006154:	d3e5      	bcc.n	8006122 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f003 fe5a 	bl	8009e14 <USB_ReadInterrupts>
 8006160:	4603      	mov	r3, r0
 8006162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800616a:	d13b      	bne.n	80061e4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800616c:	2301      	movs	r3, #1
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
 8006170:	e02b      	b.n	80061ca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	3340      	adds	r3, #64	; 0x40
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d115      	bne.n	80061c4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006198:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800619a:	2b00      	cmp	r3, #0
 800619c:	da12      	bge.n	80061c4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a2:	4613      	mov	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	333f      	adds	r3, #63	; 0x3f
 80061ae:	2201      	movs	r2, #1
 80061b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fae8 	bl	8006794 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	3301      	adds	r3, #1
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d3ce      	bcc.n	8006172 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80061e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f003 fe13 	bl	8009e14 <USB_ReadInterrupts>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061f8:	d155      	bne.n	80062a6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061fa:	2301      	movs	r3, #1
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
 80061fe:	e045      	b.n	800628c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006214:	4613      	mov	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d12e      	bne.n	8006286 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006228:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800622a:	2b00      	cmp	r3, #0
 800622c:	da2b      	bge.n	8006286 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800623a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800623e:	429a      	cmp	r2, r3
 8006240:	d121      	bne.n	8006286 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006246:	4613      	mov	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006282:	6053      	str	r3, [r2, #4]
            break;
 8006284:	e007      	b.n	8006296 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	3301      	adds	r3, #1
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	429a      	cmp	r2, r3
 8006294:	d3b4      	bcc.n	8006200 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80062a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f003 fdb2 	bl	8009e14 <USB_ReadInterrupts>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ba:	d10a      	bne.n	80062d2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f008 fe9d 	bl	800effc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80062d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f003 fd9c 	bl	8009e14 <USB_ReadInterrupts>
 80062dc:	4603      	mov	r3, r0
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d115      	bne.n	8006312 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f008 fe8d 	bl	800f018 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	e000      	b.n	8006312 <HAL_PCD_IRQHandler+0x938>
      return;
 8006310:	bf00      	nop
    }
  }
}
 8006312:	3734      	adds	r7, #52	; 0x34
 8006314:	46bd      	mov	sp, r7
 8006316:	bd90      	pop	{r4, r7, pc}

08006318 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_PCD_SetAddress+0x1a>
 800632e:	2302      	movs	r3, #2
 8006330:	e013      	b.n	800635a <HAL_PCD_SetAddress+0x42>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	78fa      	ldrb	r2, [r7, #3]
 800633e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	78fa      	ldrb	r2, [r7, #3]
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f003 fcfa 	bl	8009d44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	4608      	mov	r0, r1
 800636c:	4611      	mov	r1, r2
 800636e:	461a      	mov	r2, r3
 8006370:	4603      	mov	r3, r0
 8006372:	70fb      	strb	r3, [r7, #3]
 8006374:	460b      	mov	r3, r1
 8006376:	803b      	strh	r3, [r7, #0]
 8006378:	4613      	mov	r3, r2
 800637a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006384:	2b00      	cmp	r3, #0
 8006386:	da0f      	bge.n	80063a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	f003 020f 	and.w	r2, r3, #15
 800638e:	4613      	mov	r3, r2
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	3338      	adds	r3, #56	; 0x38
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	4413      	add	r3, r2
 800639c:	3304      	adds	r3, #4
 800639e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	705a      	strb	r2, [r3, #1]
 80063a6:	e00f      	b.n	80063c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	f003 020f 	and.w	r2, r3, #15
 80063ae:	4613      	mov	r3, r2
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4413      	add	r3, r2
 80063be:	3304      	adds	r3, #4
 80063c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80063d4:	883a      	ldrh	r2, [r7, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	78ba      	ldrb	r2, [r7, #2]
 80063de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80063f2:	78bb      	ldrb	r3, [r7, #2]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d102      	bne.n	80063fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_PCD_EP_Open+0xaa>
 8006408:	2302      	movs	r3, #2
 800640a:	e00e      	b.n	800642a <HAL_PCD_EP_Open+0xc8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68f9      	ldr	r1, [r7, #12]
 800641a:	4618      	mov	r0, r3
 800641c:	f002 fd7a 	bl	8008f14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006428:	7afb      	ldrb	r3, [r7, #11]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	460b      	mov	r3, r1
 800643c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800643e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006442:	2b00      	cmp	r3, #0
 8006444:	da0f      	bge.n	8006466 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	f003 020f 	and.w	r2, r3, #15
 800644c:	4613      	mov	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	3338      	adds	r3, #56	; 0x38
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	3304      	adds	r3, #4
 800645c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	705a      	strb	r2, [r3, #1]
 8006464:	e00f      	b.n	8006486 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	f003 020f 	and.w	r2, r3, #15
 800646c:	4613      	mov	r3, r2
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	4413      	add	r3, r2
 800647c:	3304      	adds	r3, #4
 800647e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_PCD_EP_Close+0x6e>
 800649c:	2302      	movs	r3, #2
 800649e:	e00e      	b.n	80064be <HAL_PCD_EP_Close+0x8c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68f9      	ldr	r1, [r7, #12]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f002 fdb8 	bl	8009024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
 80064d2:	460b      	mov	r3, r1
 80064d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064d6:	7afb      	ldrb	r3, [r7, #11]
 80064d8:	f003 020f 	and.w	r2, r3, #15
 80064dc:	4613      	mov	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	3304      	adds	r3, #4
 80064ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2200      	movs	r2, #0
 8006500:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2200      	movs	r2, #0
 8006506:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006508:	7afb      	ldrb	r3, [r7, #11]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	b2da      	uxtb	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d102      	bne.n	8006522 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	6979      	ldr	r1, [r7, #20]
 800653a:	f003 f897 	bl	800966c <USB_EP0StartXfer>
 800653e:	e008      	b.n	8006552 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	6979      	ldr	r1, [r7, #20]
 800654e:	f002 fe45 	bl	80091dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	f003 020f 	and.w	r2, r3, #15
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4613      	mov	r3, r2
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800657e:	681b      	ldr	r3, [r3, #0]
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	460b      	mov	r3, r1
 800659a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800659c:	7afb      	ldrb	r3, [r7, #11]
 800659e:	f003 020f 	and.w	r2, r3, #15
 80065a2:	4613      	mov	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	3338      	adds	r3, #56	; 0x38
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	3304      	adds	r3, #4
 80065b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2200      	movs	r2, #0
 80065c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2201      	movs	r2, #1
 80065ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065cc:	7afb      	ldrb	r3, [r7, #11]
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d102      	bne.n	80065e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	6979      	ldr	r1, [r7, #20]
 80065fe:	f003 f835 	bl	800966c <USB_EP0StartXfer>
 8006602:	e008      	b.n	8006616 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6818      	ldr	r0, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	6979      	ldr	r1, [r7, #20]
 8006612:	f002 fde3 	bl	80091dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	f003 020f 	and.w	r2, r3, #15
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d901      	bls.n	800663e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e050      	b.n	80066e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800663e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006642:	2b00      	cmp	r3, #0
 8006644:	da0f      	bge.n	8006666 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	f003 020f 	and.w	r2, r3, #15
 800664c:	4613      	mov	r3, r2
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	3338      	adds	r3, #56	; 0x38
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	4413      	add	r3, r2
 800665a:	3304      	adds	r3, #4
 800665c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	705a      	strb	r2, [r3, #1]
 8006664:	e00d      	b.n	8006682 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	4613      	mov	r3, r2
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	3304      	adds	r3, #4
 800667a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	b2da      	uxtb	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_PCD_EP_SetStall+0x82>
 800669e:	2302      	movs	r3, #2
 80066a0:	e01e      	b.n	80066e0 <HAL_PCD_EP_SetStall+0xc0>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f003 fa73 	bl	8009b9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	b2d9      	uxtb	r1, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80066d0:	461a      	mov	r2, r3
 80066d2:	f003 fc63 	bl	8009f9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d901      	bls.n	8006706 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e042      	b.n	800678c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800670a:	2b00      	cmp	r3, #0
 800670c:	da0f      	bge.n	800672e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	4613      	mov	r3, r2
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	3338      	adds	r3, #56	; 0x38
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	3304      	adds	r3, #4
 8006724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	705a      	strb	r2, [r3, #1]
 800672c:	e00f      	b.n	800674e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	f003 020f 	and.w	r2, r3, #15
 8006734:	4613      	mov	r3, r2
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	4413      	add	r3, r2
 8006744:	3304      	adds	r3, #4
 8006746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	b2da      	uxtb	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_PCD_EP_ClrStall+0x86>
 800676a:	2302      	movs	r3, #2
 800676c:	e00e      	b.n	800678c <HAL_PCD_EP_ClrStall+0xa4>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	4618      	mov	r0, r3
 800677e:	f003 fa7b 	bl	8009c78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80067a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da0c      	bge.n	80067c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 020f 	and.w	r2, r3, #15
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	3338      	adds	r3, #56	; 0x38
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4413      	add	r3, r2
 80067bc:	3304      	adds	r3, #4
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	e00c      	b.n	80067dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	f003 020f 	and.w	r2, r3, #15
 80067c8:	4613      	mov	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	4413      	add	r3, r2
 80067d8:	3304      	adds	r3, #4
 80067da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68f9      	ldr	r1, [r7, #12]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f003 f89a 	bl	800991c <USB_EPStopXfer>
 80067e8:	4603      	mov	r3, r0
 80067ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80067ec:	7afb      	ldrb	r3, [r7, #11]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b08a      	sub	sp, #40	; 0x28
 80067fa:	af02      	add	r7, sp, #8
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	3338      	adds	r3, #56	; 0x38
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	4413      	add	r3, r2
 800681a:	3304      	adds	r3, #4
 800681c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1a      	ldr	r2, [r3, #32]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	429a      	cmp	r2, r3
 8006828:	d901      	bls.n	800682e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e06c      	b.n	8006908 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	429a      	cmp	r2, r3
 8006842:	d902      	bls.n	800684a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	3303      	adds	r3, #3
 800684e:	089b      	lsrs	r3, r3, #2
 8006850:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006852:	e02b      	b.n	80068ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	429a      	cmp	r2, r3
 8006868:	d902      	bls.n	8006870 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	3303      	adds	r3, #3
 8006874:	089b      	lsrs	r3, r3, #2
 8006876:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6919      	ldr	r1, [r3, #16]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	b2da      	uxtb	r2, r3
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006888:	b2db      	uxtb	r3, r3
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	4603      	mov	r3, r0
 800688e:	6978      	ldr	r0, [r7, #20]
 8006890:	f003 f8ee 	bl	8009a70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	441a      	add	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a1a      	ldr	r2, [r3, #32]
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	441a      	add	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d809      	bhi.n	80068d6 <PCD_WriteEmptyTxFifo+0xe0>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d203      	bcs.n	80068d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1be      	bne.n	8006854 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d811      	bhi.n	8006906 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	2201      	movs	r2, #1
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	43db      	mvns	r3, r3
 80068fc:	6939      	ldr	r1, [r7, #16]
 80068fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006902:	4013      	ands	r3, r2
 8006904:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3720      	adds	r7, #32
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	333c      	adds	r3, #60	; 0x3c
 8006928:	3304      	adds	r3, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d17b      	bne.n	8006a3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d015      	beq.n	800697c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	4a61      	ldr	r2, [pc, #388]	; (8006ad8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	f240 80b9 	bls.w	8006acc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80b3 	beq.w	8006acc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	461a      	mov	r2, r3
 8006974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006978:	6093      	str	r3, [r2, #8]
 800697a:	e0a7      	b.n	8006acc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	461a      	mov	r2, r3
 8006994:	2320      	movs	r3, #32
 8006996:	6093      	str	r3, [r2, #8]
 8006998:	e098      	b.n	8006acc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f040 8093 	bne.w	8006acc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4a4b      	ldr	r2, [pc, #300]	; (8006ad8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d90f      	bls.n	80069ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c4:	461a      	mov	r2, r3
 80069c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ca:	6093      	str	r3, [r2, #8]
 80069cc:	e07e      	b.n	8006acc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	4613      	mov	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	4413      	add	r3, r2
 80069e0:	3304      	adds	r3, #4
 80069e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	0159      	lsls	r1, r3, #5
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	440b      	add	r3, r1
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069fa:	1ad2      	subs	r2, r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d114      	bne.n	8006a30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	f003 fabe 	bl	8009f9c <USB_EP0_OutStart>
 8006a20:	e006      	b.n	8006a30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	441a      	add	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f008 fa26 	bl	800ee88 <HAL_PCD_DataOutStageCallback>
 8006a3c:	e046      	b.n	8006acc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	4a26      	ldr	r2, [pc, #152]	; (8006adc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d124      	bne.n	8006a90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a62:	6093      	str	r3, [r2, #8]
 8006a64:	e032      	b.n	8006acc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	2320      	movs	r3, #32
 8006a80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f008 f9fd 	bl	800ee88 <HAL_PCD_DataOutStageCallback>
 8006a8e:	e01d      	b.n	8006acc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d114      	bne.n	8006ac0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2100      	movs	r1, #0
 8006abc:	f003 fa6e 	bl	8009f9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f008 f9de 	bl	800ee88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	4f54300a 	.word	0x4f54300a
 8006adc:	4f54310a 	.word	0x4f54310a

08006ae0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	333c      	adds	r3, #60	; 0x3c
 8006af8:	3304      	adds	r3, #4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d90e      	bls.n	8006b34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f008 f995 	bl	800ee64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a0a      	ldr	r2, [pc, #40]	; (8006b68 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d90c      	bls.n	8006b5c <PCD_EP_OutSetupPacket_int+0x7c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d108      	bne.n	8006b5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b54:	461a      	mov	r2, r3
 8006b56:	2101      	movs	r1, #1
 8006b58:	f003 fa20 	bl	8009f9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	4f54300a 	.word	0x4f54300a

08006b6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d107      	bne.n	8006b9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006b8a:	883b      	ldrh	r3, [r7, #0]
 8006b8c:	0419      	lsls	r1, r3, #16
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28
 8006b98:	e028      	b.n	8006bec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
 8006bac:	e00d      	b.n	8006bca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	3340      	adds	r3, #64	; 0x40
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	73fb      	strb	r3, [r7, #15]
 8006bca:	7bfa      	ldrb	r2, [r7, #15]
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d3ec      	bcc.n	8006bae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006bd4:	883b      	ldrh	r3, [r7, #0]
 8006bd6:	0418      	lsls	r0, r3, #16
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6819      	ldr	r1, [r3, #0]
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	4302      	orrs	r2, r0
 8006be4:	3340      	adds	r3, #64	; 0x40
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	887a      	ldrh	r2, [r7, #2]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e267      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d075      	beq.n	8006d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c52:	4b88      	ldr	r3, [pc, #544]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 030c 	and.w	r3, r3, #12
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d00c      	beq.n	8006c78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c5e:	4b85      	ldr	r3, [pc, #532]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c66:	2b08      	cmp	r3, #8
 8006c68:	d112      	bne.n	8006c90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c6a:	4b82      	ldr	r3, [pc, #520]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c76:	d10b      	bne.n	8006c90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c78:	4b7e      	ldr	r3, [pc, #504]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d05b      	beq.n	8006d3c <HAL_RCC_OscConfig+0x108>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d157      	bne.n	8006d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e242      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c98:	d106      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x74>
 8006c9a:	4b76      	ldr	r3, [pc, #472]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a75      	ldr	r2, [pc, #468]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	e01d      	b.n	8006ce4 <HAL_RCC_OscConfig+0xb0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cb0:	d10c      	bne.n	8006ccc <HAL_RCC_OscConfig+0x98>
 8006cb2:	4b70      	ldr	r3, [pc, #448]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a6f      	ldr	r2, [pc, #444]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	4b6d      	ldr	r3, [pc, #436]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6c      	ldr	r2, [pc, #432]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	e00b      	b.n	8006ce4 <HAL_RCC_OscConfig+0xb0>
 8006ccc:	4b69      	ldr	r3, [pc, #420]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a68      	ldr	r2, [pc, #416]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	4b66      	ldr	r3, [pc, #408]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a65      	ldr	r2, [pc, #404]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d013      	beq.n	8006d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cec:	f7fc fcc0 	bl	8003670 <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cf4:	f7fc fcbc 	bl	8003670 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b64      	cmp	r3, #100	; 0x64
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e207      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d06:	4b5b      	ldr	r3, [pc, #364]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0f0      	beq.n	8006cf4 <HAL_RCC_OscConfig+0xc0>
 8006d12:	e014      	b.n	8006d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d14:	f7fc fcac 	bl	8003670 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d1c:	f7fc fca8 	bl	8003670 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b64      	cmp	r3, #100	; 0x64
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e1f3      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d2e:	4b51      	ldr	r3, [pc, #324]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0xe8>
 8006d3a:	e000      	b.n	8006d3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d063      	beq.n	8006e12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d4a:	4b4a      	ldr	r3, [pc, #296]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 030c 	and.w	r3, r3, #12
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d56:	4b47      	ldr	r3, [pc, #284]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d11c      	bne.n	8006d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d62:	4b44      	ldr	r3, [pc, #272]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d116      	bne.n	8006d9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d6e:	4b41      	ldr	r3, [pc, #260]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <HAL_RCC_OscConfig+0x152>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d001      	beq.n	8006d86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e1c7      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d86:	4b3b      	ldr	r3, [pc, #236]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4937      	ldr	r1, [pc, #220]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d9a:	e03a      	b.n	8006e12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d020      	beq.n	8006de6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da4:	4b34      	ldr	r3, [pc, #208]	; (8006e78 <HAL_RCC_OscConfig+0x244>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006daa:	f7fc fc61 	bl	8003670 <HAL_GetTick>
 8006dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006db2:	f7fc fc5d 	bl	8003670 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e1a8      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc4:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f0      	beq.n	8006db2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd0:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4925      	ldr	r1, [pc, #148]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	600b      	str	r3, [r1, #0]
 8006de4:	e015      	b.n	8006e12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006de6:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <HAL_RCC_OscConfig+0x244>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fc fc40 	bl	8003670 <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006df4:	f7fc fc3c 	bl	8003670 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e187      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e06:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d036      	beq.n	8006e8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d016      	beq.n	8006e54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e26:	4b15      	ldr	r3, [pc, #84]	; (8006e7c <HAL_RCC_OscConfig+0x248>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2c:	f7fc fc20 	bl	8003670 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e34:	f7fc fc1c 	bl	8003670 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e167      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <HAL_RCC_OscConfig+0x240>)
 8006e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCC_OscConfig+0x200>
 8006e52:	e01b      	b.n	8006e8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e54:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <HAL_RCC_OscConfig+0x248>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e5a:	f7fc fc09 	bl	8003670 <HAL_GetTick>
 8006e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e60:	e00e      	b.n	8006e80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e62:	f7fc fc05 	bl	8003670 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d907      	bls.n	8006e80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e150      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
 8006e74:	40023800 	.word	0x40023800
 8006e78:	42470000 	.word	0x42470000
 8006e7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e80:	4b88      	ldr	r3, [pc, #544]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1ea      	bne.n	8006e62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8097 	beq.w	8006fc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e9e:	4b81      	ldr	r3, [pc, #516]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10f      	bne.n	8006eca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]
 8006eae:	4b7d      	ldr	r3, [pc, #500]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	4a7c      	ldr	r2, [pc, #496]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eba:	4b7a      	ldr	r3, [pc, #488]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec2:	60bb      	str	r3, [r7, #8]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eca:	4b77      	ldr	r3, [pc, #476]	; (80070a8 <HAL_RCC_OscConfig+0x474>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d118      	bne.n	8006f08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ed6:	4b74      	ldr	r3, [pc, #464]	; (80070a8 <HAL_RCC_OscConfig+0x474>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a73      	ldr	r2, [pc, #460]	; (80070a8 <HAL_RCC_OscConfig+0x474>)
 8006edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ee2:	f7fc fbc5 	bl	8003670 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eea:	f7fc fbc1 	bl	8003670 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e10c      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efc:	4b6a      	ldr	r3, [pc, #424]	; (80070a8 <HAL_RCC_OscConfig+0x474>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0f0      	beq.n	8006eea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d106      	bne.n	8006f1e <HAL_RCC_OscConfig+0x2ea>
 8006f10:	4b64      	ldr	r3, [pc, #400]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	4a63      	ldr	r2, [pc, #396]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f1c:	e01c      	b.n	8006f58 <HAL_RCC_OscConfig+0x324>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d10c      	bne.n	8006f40 <HAL_RCC_OscConfig+0x30c>
 8006f26:	4b5f      	ldr	r3, [pc, #380]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	4a5e      	ldr	r2, [pc, #376]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f2c:	f043 0304 	orr.w	r3, r3, #4
 8006f30:	6713      	str	r3, [r2, #112]	; 0x70
 8006f32:	4b5c      	ldr	r3, [pc, #368]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	4a5b      	ldr	r2, [pc, #364]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f3e:	e00b      	b.n	8006f58 <HAL_RCC_OscConfig+0x324>
 8006f40:	4b58      	ldr	r3, [pc, #352]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f44:	4a57      	ldr	r2, [pc, #348]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f4c:	4b55      	ldr	r3, [pc, #340]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f50:	4a54      	ldr	r2, [pc, #336]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f52:	f023 0304 	bic.w	r3, r3, #4
 8006f56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d015      	beq.n	8006f8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f60:	f7fc fb86 	bl	8003670 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f66:	e00a      	b.n	8006f7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f68:	f7fc fb82 	bl	8003670 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e0cb      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f7e:	4b49      	ldr	r3, [pc, #292]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0ee      	beq.n	8006f68 <HAL_RCC_OscConfig+0x334>
 8006f8a:	e014      	b.n	8006fb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f8c:	f7fc fb70 	bl	8003670 <HAL_GetTick>
 8006f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f94:	f7fc fb6c 	bl	8003670 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e0b5      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006faa:	4b3e      	ldr	r3, [pc, #248]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ee      	bne.n	8006f94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d105      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fbc:	4b39      	ldr	r3, [pc, #228]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	4a38      	ldr	r2, [pc, #224]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80a1 	beq.w	8007114 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fd2:	4b34      	ldr	r3, [pc, #208]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 030c 	and.w	r3, r3, #12
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d05c      	beq.n	8007098 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d141      	bne.n	800706a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fe6:	4b31      	ldr	r3, [pc, #196]	; (80070ac <HAL_RCC_OscConfig+0x478>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fec:	f7fc fb40 	bl	8003670 <HAL_GetTick>
 8006ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff4:	f7fc fb3c 	bl	8003670 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e087      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007006:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1f0      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	019b      	lsls	r3, r3, #6
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	3b01      	subs	r3, #1
 800702c:	041b      	lsls	r3, r3, #16
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	061b      	lsls	r3, r3, #24
 8007036:	491b      	ldr	r1, [pc, #108]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 8007038:	4313      	orrs	r3, r2
 800703a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800703c:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <HAL_RCC_OscConfig+0x478>)
 800703e:	2201      	movs	r2, #1
 8007040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007042:	f7fc fb15 	bl	8003670 <HAL_GetTick>
 8007046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007048:	e008      	b.n	800705c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800704a:	f7fc fb11 	bl	8003670 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d901      	bls.n	800705c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e05c      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800705c:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0f0      	beq.n	800704a <HAL_RCC_OscConfig+0x416>
 8007068:	e054      	b.n	8007114 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800706a:	4b10      	ldr	r3, [pc, #64]	; (80070ac <HAL_RCC_OscConfig+0x478>)
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007070:	f7fc fafe 	bl	8003670 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007078:	f7fc fafa 	bl	8003670 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e045      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800708a:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <HAL_RCC_OscConfig+0x470>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f0      	bne.n	8007078 <HAL_RCC_OscConfig+0x444>
 8007096:	e03d      	b.n	8007114 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d107      	bne.n	80070b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e038      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
 80070a4:	40023800 	.word	0x40023800
 80070a8:	40007000 	.word	0x40007000
 80070ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070b0:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <HAL_RCC_OscConfig+0x4ec>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d028      	beq.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d121      	bne.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d11a      	bne.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070e0:	4013      	ands	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d111      	bne.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	3b01      	subs	r3, #1
 80070fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d107      	bne.n	8007110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800710c:	429a      	cmp	r2, r3
 800710e:	d001      	beq.n	8007114 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40023800 	.word	0x40023800

08007124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e0cc      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007138:	4b68      	ldr	r3, [pc, #416]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d90c      	bls.n	8007160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007146:	4b65      	ldr	r3, [pc, #404]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714e:	4b63      	ldr	r3, [pc, #396]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	d001      	beq.n	8007160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e0b8      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d020      	beq.n	80071ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007178:	4b59      	ldr	r3, [pc, #356]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	4a58      	ldr	r2, [pc, #352]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007190:	4b53      	ldr	r3, [pc, #332]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	4a52      	ldr	r2, [pc, #328]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800719a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800719c:	4b50      	ldr	r3, [pc, #320]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	494d      	ldr	r1, [pc, #308]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d044      	beq.n	8007244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d107      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c2:	4b47      	ldr	r3, [pc, #284]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d119      	bne.n	8007202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e07f      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d003      	beq.n	80071e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d107      	bne.n	80071f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e2:	4b3f      	ldr	r3, [pc, #252]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e06f      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f2:	4b3b      	ldr	r3, [pc, #236]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e067      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007202:	4b37      	ldr	r3, [pc, #220]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f023 0203 	bic.w	r2, r3, #3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	4934      	ldr	r1, [pc, #208]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007210:	4313      	orrs	r3, r2
 8007212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007214:	f7fc fa2c 	bl	8003670 <HAL_GetTick>
 8007218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721a:	e00a      	b.n	8007232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800721c:	f7fc fa28 	bl	8003670 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	f241 3288 	movw	r2, #5000	; 0x1388
 800722a:	4293      	cmp	r3, r2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e04f      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007232:	4b2b      	ldr	r3, [pc, #172]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 020c 	and.w	r2, r3, #12
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	429a      	cmp	r2, r3
 8007242:	d1eb      	bne.n	800721c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007244:	4b25      	ldr	r3, [pc, #148]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d20c      	bcs.n	800726c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007252:	4b22      	ldr	r3, [pc, #136]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800725a:	4b20      	ldr	r3, [pc, #128]	; (80072dc <HAL_RCC_ClockConfig+0x1b8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d001      	beq.n	800726c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e032      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d008      	beq.n	800728a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007278:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4916      	ldr	r1, [pc, #88]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007286:	4313      	orrs	r3, r2
 8007288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007296:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	490e      	ldr	r1, [pc, #56]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072aa:	f000 f821 	bl	80072f0 <HAL_RCC_GetSysClockFreq>
 80072ae:	4602      	mov	r2, r0
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <HAL_RCC_ClockConfig+0x1bc>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	490a      	ldr	r1, [pc, #40]	; (80072e4 <HAL_RCC_ClockConfig+0x1c0>)
 80072bc:	5ccb      	ldrb	r3, [r1, r3]
 80072be:	fa22 f303 	lsr.w	r3, r2, r3
 80072c2:	4a09      	ldr	r2, [pc, #36]	; (80072e8 <HAL_RCC_ClockConfig+0x1c4>)
 80072c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072c6:	4b09      	ldr	r3, [pc, #36]	; (80072ec <HAL_RCC_ClockConfig+0x1c8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fc f98c 	bl	80035e8 <HAL_InitTick>

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	40023c00 	.word	0x40023c00
 80072e0:	40023800 	.word	0x40023800
 80072e4:	0801248c 	.word	0x0801248c
 80072e8:	20000000 	.word	0x20000000
 80072ec:	20000024 	.word	0x20000024

080072f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f4:	b090      	sub	sp, #64	; 0x40
 80072f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	637b      	str	r3, [r7, #52]	; 0x34
 80072fc:	2300      	movs	r3, #0
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007300:	2300      	movs	r3, #0
 8007302:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007308:	4b59      	ldr	r3, [pc, #356]	; (8007470 <HAL_RCC_GetSysClockFreq+0x180>)
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f003 030c 	and.w	r3, r3, #12
 8007310:	2b08      	cmp	r3, #8
 8007312:	d00d      	beq.n	8007330 <HAL_RCC_GetSysClockFreq+0x40>
 8007314:	2b08      	cmp	r3, #8
 8007316:	f200 80a1 	bhi.w	800745c <HAL_RCC_GetSysClockFreq+0x16c>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <HAL_RCC_GetSysClockFreq+0x34>
 800731e:	2b04      	cmp	r3, #4
 8007320:	d003      	beq.n	800732a <HAL_RCC_GetSysClockFreq+0x3a>
 8007322:	e09b      	b.n	800745c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007324:	4b53      	ldr	r3, [pc, #332]	; (8007474 <HAL_RCC_GetSysClockFreq+0x184>)
 8007326:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007328:	e09b      	b.n	8007462 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800732a:	4b53      	ldr	r3, [pc, #332]	; (8007478 <HAL_RCC_GetSysClockFreq+0x188>)
 800732c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800732e:	e098      	b.n	8007462 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007330:	4b4f      	ldr	r3, [pc, #316]	; (8007470 <HAL_RCC_GetSysClockFreq+0x180>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800733a:	4b4d      	ldr	r3, [pc, #308]	; (8007470 <HAL_RCC_GetSysClockFreq+0x180>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d028      	beq.n	8007398 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007346:	4b4a      	ldr	r3, [pc, #296]	; (8007470 <HAL_RCC_GetSysClockFreq+0x180>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	099b      	lsrs	r3, r3, #6
 800734c:	2200      	movs	r2, #0
 800734e:	623b      	str	r3, [r7, #32]
 8007350:	627a      	str	r2, [r7, #36]	; 0x24
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007358:	2100      	movs	r1, #0
 800735a:	4b47      	ldr	r3, [pc, #284]	; (8007478 <HAL_RCC_GetSysClockFreq+0x188>)
 800735c:	fb03 f201 	mul.w	r2, r3, r1
 8007360:	2300      	movs	r3, #0
 8007362:	fb00 f303 	mul.w	r3, r0, r3
 8007366:	4413      	add	r3, r2
 8007368:	4a43      	ldr	r2, [pc, #268]	; (8007478 <HAL_RCC_GetSysClockFreq+0x188>)
 800736a:	fba0 1202 	umull	r1, r2, r0, r2
 800736e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007370:	460a      	mov	r2, r1
 8007372:	62ba      	str	r2, [r7, #40]	; 0x28
 8007374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007376:	4413      	add	r3, r2
 8007378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	2200      	movs	r2, #0
 800737e:	61bb      	str	r3, [r7, #24]
 8007380:	61fa      	str	r2, [r7, #28]
 8007382:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007386:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800738a:	f7f9 fc85 	bl	8000c98 <__aeabi_uldivmod>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4613      	mov	r3, r2
 8007394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007396:	e053      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007398:	4b35      	ldr	r3, [pc, #212]	; (8007470 <HAL_RCC_GetSysClockFreq+0x180>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	099b      	lsrs	r3, r3, #6
 800739e:	2200      	movs	r2, #0
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	617a      	str	r2, [r7, #20]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80073aa:	f04f 0b00 	mov.w	fp, #0
 80073ae:	4652      	mov	r2, sl
 80073b0:	465b      	mov	r3, fp
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f04f 0100 	mov.w	r1, #0
 80073ba:	0159      	lsls	r1, r3, #5
 80073bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073c0:	0150      	lsls	r0, r2, #5
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	ebb2 080a 	subs.w	r8, r2, sl
 80073ca:	eb63 090b 	sbc.w	r9, r3, fp
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80073da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80073de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80073e2:	ebb2 0408 	subs.w	r4, r2, r8
 80073e6:	eb63 0509 	sbc.w	r5, r3, r9
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	f04f 0300 	mov.w	r3, #0
 80073f2:	00eb      	lsls	r3, r5, #3
 80073f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073f8:	00e2      	lsls	r2, r4, #3
 80073fa:	4614      	mov	r4, r2
 80073fc:	461d      	mov	r5, r3
 80073fe:	eb14 030a 	adds.w	r3, r4, sl
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	eb45 030b 	adc.w	r3, r5, fp
 8007408:	607b      	str	r3, [r7, #4]
 800740a:	f04f 0200 	mov.w	r2, #0
 800740e:	f04f 0300 	mov.w	r3, #0
 8007412:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007416:	4629      	mov	r1, r5
 8007418:	028b      	lsls	r3, r1, #10
 800741a:	4621      	mov	r1, r4
 800741c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007420:	4621      	mov	r1, r4
 8007422:	028a      	lsls	r2, r1, #10
 8007424:	4610      	mov	r0, r2
 8007426:	4619      	mov	r1, r3
 8007428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742a:	2200      	movs	r2, #0
 800742c:	60bb      	str	r3, [r7, #8]
 800742e:	60fa      	str	r2, [r7, #12]
 8007430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007434:	f7f9 fc30 	bl	8000c98 <__aeabi_uldivmod>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4613      	mov	r3, r2
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <HAL_RCC_GetSysClockFreq+0x180>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	0c1b      	lsrs	r3, r3, #16
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	3301      	adds	r3, #1
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	fbb2 f3f3 	udiv	r3, r2, r3
 8007458:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800745a:	e002      	b.n	8007462 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <HAL_RCC_GetSysClockFreq+0x184>)
 800745e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007464:	4618      	mov	r0, r3
 8007466:	3740      	adds	r7, #64	; 0x40
 8007468:	46bd      	mov	sp, r7
 800746a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800746e:	bf00      	nop
 8007470:	40023800 	.word	0x40023800
 8007474:	00f42400 	.word	0x00f42400
 8007478:	017d7840 	.word	0x017d7840

0800747c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007480:	4b03      	ldr	r3, [pc, #12]	; (8007490 <HAL_RCC_GetHCLKFreq+0x14>)
 8007482:	681b      	ldr	r3, [r3, #0]
}
 8007484:	4618      	mov	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000000 	.word	0x20000000

08007494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007498:	f7ff fff0 	bl	800747c <HAL_RCC_GetHCLKFreq>
 800749c:	4602      	mov	r2, r0
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	0a9b      	lsrs	r3, r3, #10
 80074a4:	f003 0307 	and.w	r3, r3, #7
 80074a8:	4903      	ldr	r1, [pc, #12]	; (80074b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074aa:	5ccb      	ldrb	r3, [r1, r3]
 80074ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40023800 	.word	0x40023800
 80074b8:	0801249c 	.word	0x0801249c

080074bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80074c0:	f7ff ffdc 	bl	800747c <HAL_RCC_GetHCLKFreq>
 80074c4:	4602      	mov	r2, r0
 80074c6:	4b05      	ldr	r3, [pc, #20]	; (80074dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	0b5b      	lsrs	r3, r3, #13
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	4903      	ldr	r1, [pc, #12]	; (80074e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074d2:	5ccb      	ldrb	r3, [r1, r3]
 80074d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074d8:	4618      	mov	r0, r3
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	40023800 	.word	0x40023800
 80074e0:	0801249c 	.word	0x0801249c

080074e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e041      	b.n	800757a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fa fd00 	bl	8001f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3304      	adds	r3, #4
 8007520:	4619      	mov	r1, r3
 8007522:	4610      	mov	r0, r2
 8007524:	f000 f9a0 	bl	8007868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <HAL_TIM_PWM_Start+0x24>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e022      	b.n	80075ee <HAL_TIM_PWM_Start+0x6a>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d109      	bne.n	80075c2 <HAL_TIM_PWM_Start+0x3e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	bf14      	ite	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	2300      	moveq	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	e015      	b.n	80075ee <HAL_TIM_PWM_Start+0x6a>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d109      	bne.n	80075dc <HAL_TIM_PWM_Start+0x58>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	bf14      	ite	ne
 80075d4:	2301      	movne	r3, #1
 80075d6:	2300      	moveq	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	e008      	b.n	80075ee <HAL_TIM_PWM_Start+0x6a>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e068      	b.n	80076c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <HAL_TIM_PWM_Start+0x82>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007604:	e013      	b.n	800762e <HAL_TIM_PWM_Start+0xaa>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b04      	cmp	r3, #4
 800760a:	d104      	bne.n	8007616 <HAL_TIM_PWM_Start+0x92>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007614:	e00b      	b.n	800762e <HAL_TIM_PWM_Start+0xaa>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b08      	cmp	r3, #8
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_Start+0xa2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007624:	e003      	b.n	800762e <HAL_TIM_PWM_Start+0xaa>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fb22 	bl	8007c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a23      	ldr	r2, [pc, #140]	; (80076d0 <HAL_TIM_PWM_Start+0x14c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d107      	bne.n	8007656 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1d      	ldr	r2, [pc, #116]	; (80076d0 <HAL_TIM_PWM_Start+0x14c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d018      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007668:	d013      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <HAL_TIM_PWM_Start+0x150>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00e      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a17      	ldr	r2, [pc, #92]	; (80076d8 <HAL_TIM_PWM_Start+0x154>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d009      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a16      	ldr	r2, [pc, #88]	; (80076dc <HAL_TIM_PWM_Start+0x158>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_TIM_PWM_Start+0x10e>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a14      	ldr	r2, [pc, #80]	; (80076e0 <HAL_TIM_PWM_Start+0x15c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d111      	bne.n	80076b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b06      	cmp	r3, #6
 80076a2:	d010      	beq.n	80076c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b4:	e007      	b.n	80076c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0201 	orr.w	r2, r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40010000 	.word	0x40010000
 80076d4:	40000400 	.word	0x40000400
 80076d8:	40000800 	.word	0x40000800
 80076dc:	40000c00 	.word	0x40000c00
 80076e0:	40014000 	.word	0x40014000

080076e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076fe:	2302      	movs	r3, #2
 8007700:	e0ae      	b.n	8007860 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b0c      	cmp	r3, #12
 800770e:	f200 809f 	bhi.w	8007850 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	0800774d 	.word	0x0800774d
 800771c:	08007851 	.word	0x08007851
 8007720:	08007851 	.word	0x08007851
 8007724:	08007851 	.word	0x08007851
 8007728:	0800778d 	.word	0x0800778d
 800772c:	08007851 	.word	0x08007851
 8007730:	08007851 	.word	0x08007851
 8007734:	08007851 	.word	0x08007851
 8007738:	080077cf 	.word	0x080077cf
 800773c:	08007851 	.word	0x08007851
 8007740:	08007851 	.word	0x08007851
 8007744:	08007851 	.word	0x08007851
 8007748:	0800780f 	.word	0x0800780f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 f908 	bl	8007968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0208 	orr.w	r2, r2, #8
 8007766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0204 	bic.w	r2, r2, #4
 8007776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6999      	ldr	r1, [r3, #24]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691a      	ldr	r2, [r3, #16]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	619a      	str	r2, [r3, #24]
      break;
 800778a:	e064      	b.n	8007856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 f94e 	bl	8007a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6999      	ldr	r1, [r3, #24]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	021a      	lsls	r2, r3, #8
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	619a      	str	r2, [r3, #24]
      break;
 80077cc:	e043      	b.n	8007856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f999 	bl	8007b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f042 0208 	orr.w	r2, r2, #8
 80077e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0204 	bic.w	r2, r2, #4
 80077f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69d9      	ldr	r1, [r3, #28]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	61da      	str	r2, [r3, #28]
      break;
 800780c:	e023      	b.n	8007856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 f9e3 	bl	8007be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69d9      	ldr	r1, [r3, #28]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	021a      	lsls	r2, r3, #8
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	61da      	str	r2, [r3, #28]
      break;
 800784e:	e002      	b.n	8007856 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	75fb      	strb	r3, [r7, #23]
      break;
 8007854:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a34      	ldr	r2, [pc, #208]	; (800794c <TIM_Base_SetConfig+0xe4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00f      	beq.n	80078a0 <TIM_Base_SetConfig+0x38>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007886:	d00b      	beq.n	80078a0 <TIM_Base_SetConfig+0x38>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a31      	ldr	r2, [pc, #196]	; (8007950 <TIM_Base_SetConfig+0xe8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d007      	beq.n	80078a0 <TIM_Base_SetConfig+0x38>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a30      	ldr	r2, [pc, #192]	; (8007954 <TIM_Base_SetConfig+0xec>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_Base_SetConfig+0x38>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a2f      	ldr	r2, [pc, #188]	; (8007958 <TIM_Base_SetConfig+0xf0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d108      	bne.n	80078b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a25      	ldr	r2, [pc, #148]	; (800794c <TIM_Base_SetConfig+0xe4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01b      	beq.n	80078f2 <TIM_Base_SetConfig+0x8a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c0:	d017      	beq.n	80078f2 <TIM_Base_SetConfig+0x8a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a22      	ldr	r2, [pc, #136]	; (8007950 <TIM_Base_SetConfig+0xe8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <TIM_Base_SetConfig+0x8a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a21      	ldr	r2, [pc, #132]	; (8007954 <TIM_Base_SetConfig+0xec>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00f      	beq.n	80078f2 <TIM_Base_SetConfig+0x8a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a20      	ldr	r2, [pc, #128]	; (8007958 <TIM_Base_SetConfig+0xf0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00b      	beq.n	80078f2 <TIM_Base_SetConfig+0x8a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a1f      	ldr	r2, [pc, #124]	; (800795c <TIM_Base_SetConfig+0xf4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d007      	beq.n	80078f2 <TIM_Base_SetConfig+0x8a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a1e      	ldr	r2, [pc, #120]	; (8007960 <TIM_Base_SetConfig+0xf8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_Base_SetConfig+0x8a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <TIM_Base_SetConfig+0xfc>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d108      	bne.n	8007904 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a08      	ldr	r2, [pc, #32]	; (800794c <TIM_Base_SetConfig+0xe4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d103      	bne.n	8007938 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	615a      	str	r2, [r3, #20]
}
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	40010000 	.word	0x40010000
 8007950:	40000400 	.word	0x40000400
 8007954:	40000800 	.word	0x40000800
 8007958:	40000c00 	.word	0x40000c00
 800795c:	40014000 	.word	0x40014000
 8007960:	40014400 	.word	0x40014400
 8007964:	40014800 	.word	0x40014800

08007968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f023 0201 	bic.w	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0303 	bic.w	r3, r3, #3
 800799e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f023 0302 	bic.w	r3, r3, #2
 80079b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a1c      	ldr	r2, [pc, #112]	; (8007a30 <TIM_OC1_SetConfig+0xc8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d10c      	bne.n	80079de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0308 	bic.w	r3, r3, #8
 80079ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 0304 	bic.w	r3, r3, #4
 80079dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <TIM_OC1_SetConfig+0xc8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d111      	bne.n	8007a0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	621a      	str	r2, [r3, #32]
}
 8007a24:	bf00      	nop
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	40010000 	.word	0x40010000

08007a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f023 0210 	bic.w	r2, r3, #16
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	021b      	lsls	r3, r3, #8
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f023 0320 	bic.w	r3, r3, #32
 8007a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a1e      	ldr	r2, [pc, #120]	; (8007b08 <TIM_OC2_SetConfig+0xd4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d10d      	bne.n	8007ab0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a15      	ldr	r2, [pc, #84]	; (8007b08 <TIM_OC2_SetConfig+0xd4>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d113      	bne.n	8007ae0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	621a      	str	r2, [r3, #32]
}
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40010000 	.word	0x40010000

08007b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	021b      	lsls	r3, r3, #8
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <TIM_OC3_SetConfig+0xd0>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d10d      	bne.n	8007b86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a14      	ldr	r2, [pc, #80]	; (8007bdc <TIM_OC3_SetConfig+0xd0>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d113      	bne.n	8007bb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	621a      	str	r2, [r3, #32]
}
 8007bd0:	bf00      	nop
 8007bd2:	371c      	adds	r7, #28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	40010000 	.word	0x40010000

08007be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	031b      	lsls	r3, r3, #12
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a10      	ldr	r2, [pc, #64]	; (8007c7c <TIM_OC4_SetConfig+0x9c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d109      	bne.n	8007c54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	019b      	lsls	r3, r3, #6
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	621a      	str	r2, [r3, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000

08007c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f003 031f 	and.w	r3, r3, #31
 8007c92:	2201      	movs	r2, #1
 8007c94:	fa02 f303 	lsl.w	r3, r2, r3
 8007c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a1a      	ldr	r2, [r3, #32]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a1a      	ldr	r2, [r3, #32]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	621a      	str	r2, [r3, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e050      	b.n	8007d86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a1c      	ldr	r2, [pc, #112]	; (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d018      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d30:	d013      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a18      	ldr	r2, [pc, #96]	; (8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00e      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a16      	ldr	r2, [pc, #88]	; (8007d9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d009      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a15      	ldr	r2, [pc, #84]	; (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a13      	ldr	r2, [pc, #76]	; (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d10c      	bne.n	8007d74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800
 8007da0:	40000c00 	.word	0x40000c00
 8007da4:	40014000 	.word	0x40014000

08007da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e03f      	b.n	8007e3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d106      	bne.n	8007dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7fa f91a 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2224      	movs	r2, #36	; 0x24
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 faa5 	bl	800833c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695a      	ldr	r2, [r3, #20]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d11d      	bne.n	8007e98 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_UART_Receive_DMA+0x26>
 8007e62:	88fb      	ldrh	r3, [r7, #6]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e016      	b.n	8007e9a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <HAL_UART_Receive_DMA+0x38>
 8007e76:	2302      	movs	r3, #2
 8007e78:	e00f      	b.n	8007e9a <HAL_UART_Receive_DMA+0x58>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e88:	88fb      	ldrh	r3, [r7, #6]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	68b9      	ldr	r1, [r7, #8]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 f92a 	bl	80080e8 <UART_Start_Receive_DMA>
 8007e94:	4603      	mov	r3, r0
 8007e96:	e000      	b.n	8007e9a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e98:	2302      	movs	r3, #2
  }
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b09c      	sub	sp, #112	; 0x70
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d172      	bne.n	8007ff8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f14:	2200      	movs	r2, #0
 8007f16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	330c      	adds	r3, #12
 8007f36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f38:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f3a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e5      	bne.n	8007f18 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3314      	adds	r3, #20
 8007f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5e:	f023 0301 	bic.w	r3, r3, #1
 8007f62:	667b      	str	r3, [r7, #100]	; 0x64
 8007f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3314      	adds	r3, #20
 8007f6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f6c:	647a      	str	r2, [r7, #68]	; 0x44
 8007f6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e5      	bne.n	8007f4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3314      	adds	r3, #20
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f96:	663b      	str	r3, [r7, #96]	; 0x60
 8007f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3314      	adds	r3, #20
 8007f9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fa0:	633a      	str	r2, [r7, #48]	; 0x30
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e5      	bne.n	8007f80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d119      	bne.n	8007ff8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	330c      	adds	r3, #12
 8007fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 0310 	bic.w	r3, r3, #16
 8007fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fe4:	61fa      	str	r2, [r7, #28]
 8007fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	69b9      	ldr	r1, [r7, #24]
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	e841 2300 	strex	r3, r2, [r1]
 8007ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e5      	bne.n	8007fc4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d106      	bne.n	800800e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008004:	4619      	mov	r1, r3
 8008006:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008008:	f7ff ff69 	bl	8007ede <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800800c:	e002      	b.n	8008014 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800800e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008010:	f7ff ff47 	bl	8007ea2 <HAL_UART_RxCpltCallback>
}
 8008014:	bf00      	nop
 8008016:	3770      	adds	r7, #112	; 0x70
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	2b01      	cmp	r3, #1
 8008030:	d108      	bne.n	8008044 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008036:	085b      	lsrs	r3, r3, #1
 8008038:	b29b      	uxth	r3, r3
 800803a:	4619      	mov	r1, r3
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff ff4e 	bl	8007ede <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008042:	e002      	b.n	800804a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff ff36 	bl	8007eb6 <HAL_UART_RxHalfCpltCallback>
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806e:	2b80      	cmp	r3, #128	; 0x80
 8008070:	bf0c      	ite	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	2300      	movne	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b21      	cmp	r3, #33	; 0x21
 8008084:	d108      	bne.n	8008098 <UART_DMAError+0x46>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008092:	68b8      	ldr	r0, [r7, #8]
 8008094:	f000 f8c6 	bl	8008224 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	bf0c      	ite	eq
 80080a6:	2301      	moveq	r3, #1
 80080a8:	2300      	movne	r3, #0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b22      	cmp	r3, #34	; 0x22
 80080b8:	d108      	bne.n	80080cc <UART_DMAError+0x7a>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2200      	movs	r2, #0
 80080c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80080c6:	68b8      	ldr	r0, [r7, #8]
 80080c8:	f000 f8d4 	bl	8008274 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	f043 0210 	orr.w	r2, r3, #16
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	f7ff fef6 	bl	8007eca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b098      	sub	sp, #96	; 0x60
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	88fa      	ldrh	r2, [r7, #6]
 8008100:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2222      	movs	r2, #34	; 0x22
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	4a40      	ldr	r2, [pc, #256]	; (8008218 <UART_Start_Receive_DMA+0x130>)
 8008116:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	4a3f      	ldr	r2, [pc, #252]	; (800821c <UART_Start_Receive_DMA+0x134>)
 800811e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	4a3e      	ldr	r2, [pc, #248]	; (8008220 <UART_Start_Receive_DMA+0x138>)
 8008126:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	2200      	movs	r2, #0
 800812e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	f7fc f84a 	bl	80041e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800814c:	2300      	movs	r3, #0
 800814e:	613b      	str	r3, [r7, #16]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	613b      	str	r3, [r7, #16]
 8008160:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d019      	beq.n	80081a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	330c      	adds	r3, #12
 8008178:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008188:	65bb      	str	r3, [r7, #88]	; 0x58
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	330c      	adds	r3, #12
 8008190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008192:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008194:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e5      	bne.n	8008172 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3314      	adds	r3, #20
 80081ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	f043 0301 	orr.w	r3, r3, #1
 80081bc:	657b      	str	r3, [r7, #84]	; 0x54
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3314      	adds	r3, #20
 80081c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80081c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3314      	adds	r3, #20
 80081e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	617b      	str	r3, [r7, #20]
   return(result);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f0:	653b      	str	r3, [r7, #80]	; 0x50
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3314      	adds	r3, #20
 80081f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081fa:	627a      	str	r2, [r7, #36]	; 0x24
 80081fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6a39      	ldr	r1, [r7, #32]
 8008200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	61fb      	str	r3, [r7, #28]
   return(result);
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e5      	bne.n	80081da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3760      	adds	r7, #96	; 0x60
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	08007ef7 	.word	0x08007ef7
 800821c:	0800801d 	.word	0x0800801d
 8008220:	08008053 	.word	0x08008053

08008224 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b089      	sub	sp, #36	; 0x24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	330c      	adds	r3, #12
 8008232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	60bb      	str	r3, [r7, #8]
   return(result);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	330c      	adds	r3, #12
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	61ba      	str	r2, [r7, #24]
 800824e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6979      	ldr	r1, [r7, #20]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	613b      	str	r3, [r7, #16]
   return(result);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e5      	bne.n	800822c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008268:	bf00      	nop
 800826a:	3724      	adds	r7, #36	; 0x24
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008274:	b480      	push	{r7}
 8008276:	b095      	sub	sp, #84	; 0x54
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	330c      	adds	r3, #12
 8008282:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	330c      	adds	r3, #12
 800829a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800829c:	643a      	str	r2, [r7, #64]	; 0x40
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e5      	bne.n	800827c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3314      	adds	r3, #20
 80082b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	61fb      	str	r3, [r7, #28]
   return(result);
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	f023 0301 	bic.w	r3, r3, #1
 80082c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3314      	adds	r3, #20
 80082ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e5      	bne.n	80082b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d119      	bne.n	8008320 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	330c      	adds	r3, #12
 80082f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f023 0310 	bic.w	r3, r3, #16
 8008302:	647b      	str	r3, [r7, #68]	; 0x44
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	330c      	adds	r3, #12
 800830a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800830c:	61ba      	str	r2, [r7, #24]
 800830e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	6979      	ldr	r1, [r7, #20]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	613b      	str	r3, [r7, #16]
   return(result);
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e5      	bne.n	80082ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800832e:	bf00      	nop
 8008330:	3754      	adds	r7, #84	; 0x54
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800833c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008340:	b0c0      	sub	sp, #256	; 0x100
 8008342:	af00      	add	r7, sp, #0
 8008344:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008358:	68d9      	ldr	r1, [r3, #12]
 800835a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	ea40 0301 	orr.w	r3, r0, r1
 8008364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	431a      	orrs	r2, r3
 8008374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	431a      	orrs	r2, r3
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008394:	f021 010c 	bic.w	r1, r1, #12
 8008398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083a2:	430b      	orrs	r3, r1
 80083a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80083b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b6:	6999      	ldr	r1, [r3, #24]
 80083b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	ea40 0301 	orr.w	r3, r0, r1
 80083c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4b8f      	ldr	r3, [pc, #572]	; (8008608 <UART_SetConfig+0x2cc>)
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d005      	beq.n	80083dc <UART_SetConfig+0xa0>
 80083d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	4b8d      	ldr	r3, [pc, #564]	; (800860c <UART_SetConfig+0x2d0>)
 80083d8:	429a      	cmp	r2, r3
 80083da:	d104      	bne.n	80083e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083dc:	f7ff f86e 	bl	80074bc <HAL_RCC_GetPCLK2Freq>
 80083e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80083e4:	e003      	b.n	80083ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083e6:	f7ff f855 	bl	8007494 <HAL_RCC_GetPCLK1Freq>
 80083ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f8:	f040 810c 	bne.w	8008614 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008400:	2200      	movs	r2, #0
 8008402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008406:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800840a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800840e:	4622      	mov	r2, r4
 8008410:	462b      	mov	r3, r5
 8008412:	1891      	adds	r1, r2, r2
 8008414:	65b9      	str	r1, [r7, #88]	; 0x58
 8008416:	415b      	adcs	r3, r3
 8008418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800841a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800841e:	4621      	mov	r1, r4
 8008420:	eb12 0801 	adds.w	r8, r2, r1
 8008424:	4629      	mov	r1, r5
 8008426:	eb43 0901 	adc.w	r9, r3, r1
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800843a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800843e:	4690      	mov	r8, r2
 8008440:	4699      	mov	r9, r3
 8008442:	4623      	mov	r3, r4
 8008444:	eb18 0303 	adds.w	r3, r8, r3
 8008448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800844c:	462b      	mov	r3, r5
 800844e:	eb49 0303 	adc.w	r3, r9, r3
 8008452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008462:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800846a:	460b      	mov	r3, r1
 800846c:	18db      	adds	r3, r3, r3
 800846e:	653b      	str	r3, [r7, #80]	; 0x50
 8008470:	4613      	mov	r3, r2
 8008472:	eb42 0303 	adc.w	r3, r2, r3
 8008476:	657b      	str	r3, [r7, #84]	; 0x54
 8008478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800847c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008480:	f7f8 fc0a 	bl	8000c98 <__aeabi_uldivmod>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4b61      	ldr	r3, [pc, #388]	; (8008610 <UART_SetConfig+0x2d4>)
 800848a:	fba3 2302 	umull	r2, r3, r3, r2
 800848e:	095b      	lsrs	r3, r3, #5
 8008490:	011c      	lsls	r4, r3, #4
 8008492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008496:	2200      	movs	r2, #0
 8008498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800849c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80084a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	1891      	adds	r1, r2, r2
 80084aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80084ac:	415b      	adcs	r3, r3
 80084ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084b4:	4641      	mov	r1, r8
 80084b6:	eb12 0a01 	adds.w	sl, r2, r1
 80084ba:	4649      	mov	r1, r9
 80084bc:	eb43 0b01 	adc.w	fp, r3, r1
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084d4:	4692      	mov	sl, r2
 80084d6:	469b      	mov	fp, r3
 80084d8:	4643      	mov	r3, r8
 80084da:	eb1a 0303 	adds.w	r3, sl, r3
 80084de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084e2:	464b      	mov	r3, r9
 80084e4:	eb4b 0303 	adc.w	r3, fp, r3
 80084e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008500:	460b      	mov	r3, r1
 8008502:	18db      	adds	r3, r3, r3
 8008504:	643b      	str	r3, [r7, #64]	; 0x40
 8008506:	4613      	mov	r3, r2
 8008508:	eb42 0303 	adc.w	r3, r2, r3
 800850c:	647b      	str	r3, [r7, #68]	; 0x44
 800850e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008512:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008516:	f7f8 fbbf 	bl	8000c98 <__aeabi_uldivmod>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4611      	mov	r1, r2
 8008520:	4b3b      	ldr	r3, [pc, #236]	; (8008610 <UART_SetConfig+0x2d4>)
 8008522:	fba3 2301 	umull	r2, r3, r3, r1
 8008526:	095b      	lsrs	r3, r3, #5
 8008528:	2264      	movs	r2, #100	; 0x64
 800852a:	fb02 f303 	mul.w	r3, r2, r3
 800852e:	1acb      	subs	r3, r1, r3
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008536:	4b36      	ldr	r3, [pc, #216]	; (8008610 <UART_SetConfig+0x2d4>)
 8008538:	fba3 2302 	umull	r2, r3, r3, r2
 800853c:	095b      	lsrs	r3, r3, #5
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008544:	441c      	add	r4, r3
 8008546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800854a:	2200      	movs	r2, #0
 800854c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008550:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008554:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008558:	4642      	mov	r2, r8
 800855a:	464b      	mov	r3, r9
 800855c:	1891      	adds	r1, r2, r2
 800855e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008560:	415b      	adcs	r3, r3
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008568:	4641      	mov	r1, r8
 800856a:	1851      	adds	r1, r2, r1
 800856c:	6339      	str	r1, [r7, #48]	; 0x30
 800856e:	4649      	mov	r1, r9
 8008570:	414b      	adcs	r3, r1
 8008572:	637b      	str	r3, [r7, #52]	; 0x34
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008580:	4659      	mov	r1, fp
 8008582:	00cb      	lsls	r3, r1, #3
 8008584:	4651      	mov	r1, sl
 8008586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800858a:	4651      	mov	r1, sl
 800858c:	00ca      	lsls	r2, r1, #3
 800858e:	4610      	mov	r0, r2
 8008590:	4619      	mov	r1, r3
 8008592:	4603      	mov	r3, r0
 8008594:	4642      	mov	r2, r8
 8008596:	189b      	adds	r3, r3, r2
 8008598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800859c:	464b      	mov	r3, r9
 800859e:	460a      	mov	r2, r1
 80085a0:	eb42 0303 	adc.w	r3, r2, r3
 80085a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80085b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085bc:	460b      	mov	r3, r1
 80085be:	18db      	adds	r3, r3, r3
 80085c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085c2:	4613      	mov	r3, r2
 80085c4:	eb42 0303 	adc.w	r3, r2, r3
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085d2:	f7f8 fb61 	bl	8000c98 <__aeabi_uldivmod>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4b0d      	ldr	r3, [pc, #52]	; (8008610 <UART_SetConfig+0x2d4>)
 80085dc:	fba3 1302 	umull	r1, r3, r3, r2
 80085e0:	095b      	lsrs	r3, r3, #5
 80085e2:	2164      	movs	r1, #100	; 0x64
 80085e4:	fb01 f303 	mul.w	r3, r1, r3
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	3332      	adds	r3, #50	; 0x32
 80085ee:	4a08      	ldr	r2, [pc, #32]	; (8008610 <UART_SetConfig+0x2d4>)
 80085f0:	fba2 2303 	umull	r2, r3, r2, r3
 80085f4:	095b      	lsrs	r3, r3, #5
 80085f6:	f003 0207 	and.w	r2, r3, #7
 80085fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4422      	add	r2, r4
 8008602:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008604:	e106      	b.n	8008814 <UART_SetConfig+0x4d8>
 8008606:	bf00      	nop
 8008608:	40011000 	.word	0x40011000
 800860c:	40011400 	.word	0x40011400
 8008610:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008618:	2200      	movs	r2, #0
 800861a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800861e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008622:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008626:	4642      	mov	r2, r8
 8008628:	464b      	mov	r3, r9
 800862a:	1891      	adds	r1, r2, r2
 800862c:	6239      	str	r1, [r7, #32]
 800862e:	415b      	adcs	r3, r3
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
 8008632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008636:	4641      	mov	r1, r8
 8008638:	1854      	adds	r4, r2, r1
 800863a:	4649      	mov	r1, r9
 800863c:	eb43 0501 	adc.w	r5, r3, r1
 8008640:	f04f 0200 	mov.w	r2, #0
 8008644:	f04f 0300 	mov.w	r3, #0
 8008648:	00eb      	lsls	r3, r5, #3
 800864a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800864e:	00e2      	lsls	r2, r4, #3
 8008650:	4614      	mov	r4, r2
 8008652:	461d      	mov	r5, r3
 8008654:	4643      	mov	r3, r8
 8008656:	18e3      	adds	r3, r4, r3
 8008658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800865c:	464b      	mov	r3, r9
 800865e:	eb45 0303 	adc.w	r3, r5, r3
 8008662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008672:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008676:	f04f 0200 	mov.w	r2, #0
 800867a:	f04f 0300 	mov.w	r3, #0
 800867e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008682:	4629      	mov	r1, r5
 8008684:	008b      	lsls	r3, r1, #2
 8008686:	4621      	mov	r1, r4
 8008688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800868c:	4621      	mov	r1, r4
 800868e:	008a      	lsls	r2, r1, #2
 8008690:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008694:	f7f8 fb00 	bl	8000c98 <__aeabi_uldivmod>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4b60      	ldr	r3, [pc, #384]	; (8008820 <UART_SetConfig+0x4e4>)
 800869e:	fba3 2302 	umull	r2, r3, r3, r2
 80086a2:	095b      	lsrs	r3, r3, #5
 80086a4:	011c      	lsls	r4, r3, #4
 80086a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80086b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80086b8:	4642      	mov	r2, r8
 80086ba:	464b      	mov	r3, r9
 80086bc:	1891      	adds	r1, r2, r2
 80086be:	61b9      	str	r1, [r7, #24]
 80086c0:	415b      	adcs	r3, r3
 80086c2:	61fb      	str	r3, [r7, #28]
 80086c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086c8:	4641      	mov	r1, r8
 80086ca:	1851      	adds	r1, r2, r1
 80086cc:	6139      	str	r1, [r7, #16]
 80086ce:	4649      	mov	r1, r9
 80086d0:	414b      	adcs	r3, r1
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	f04f 0300 	mov.w	r3, #0
 80086dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086e0:	4659      	mov	r1, fp
 80086e2:	00cb      	lsls	r3, r1, #3
 80086e4:	4651      	mov	r1, sl
 80086e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ea:	4651      	mov	r1, sl
 80086ec:	00ca      	lsls	r2, r1, #3
 80086ee:	4610      	mov	r0, r2
 80086f0:	4619      	mov	r1, r3
 80086f2:	4603      	mov	r3, r0
 80086f4:	4642      	mov	r2, r8
 80086f6:	189b      	adds	r3, r3, r2
 80086f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086fc:	464b      	mov	r3, r9
 80086fe:	460a      	mov	r2, r1
 8008700:	eb42 0303 	adc.w	r3, r2, r3
 8008704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	67bb      	str	r3, [r7, #120]	; 0x78
 8008712:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	f04f 0300 	mov.w	r3, #0
 800871c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008720:	4649      	mov	r1, r9
 8008722:	008b      	lsls	r3, r1, #2
 8008724:	4641      	mov	r1, r8
 8008726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800872a:	4641      	mov	r1, r8
 800872c:	008a      	lsls	r2, r1, #2
 800872e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008732:	f7f8 fab1 	bl	8000c98 <__aeabi_uldivmod>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4611      	mov	r1, r2
 800873c:	4b38      	ldr	r3, [pc, #224]	; (8008820 <UART_SetConfig+0x4e4>)
 800873e:	fba3 2301 	umull	r2, r3, r3, r1
 8008742:	095b      	lsrs	r3, r3, #5
 8008744:	2264      	movs	r2, #100	; 0x64
 8008746:	fb02 f303 	mul.w	r3, r2, r3
 800874a:	1acb      	subs	r3, r1, r3
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	3332      	adds	r3, #50	; 0x32
 8008750:	4a33      	ldr	r2, [pc, #204]	; (8008820 <UART_SetConfig+0x4e4>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	095b      	lsrs	r3, r3, #5
 8008758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800875c:	441c      	add	r4, r3
 800875e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008762:	2200      	movs	r2, #0
 8008764:	673b      	str	r3, [r7, #112]	; 0x70
 8008766:	677a      	str	r2, [r7, #116]	; 0x74
 8008768:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800876c:	4642      	mov	r2, r8
 800876e:	464b      	mov	r3, r9
 8008770:	1891      	adds	r1, r2, r2
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	415b      	adcs	r3, r3
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800877c:	4641      	mov	r1, r8
 800877e:	1851      	adds	r1, r2, r1
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	4649      	mov	r1, r9
 8008784:	414b      	adcs	r3, r1
 8008786:	607b      	str	r3, [r7, #4]
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008794:	4659      	mov	r1, fp
 8008796:	00cb      	lsls	r3, r1, #3
 8008798:	4651      	mov	r1, sl
 800879a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800879e:	4651      	mov	r1, sl
 80087a0:	00ca      	lsls	r2, r1, #3
 80087a2:	4610      	mov	r0, r2
 80087a4:	4619      	mov	r1, r3
 80087a6:	4603      	mov	r3, r0
 80087a8:	4642      	mov	r2, r8
 80087aa:	189b      	adds	r3, r3, r2
 80087ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80087ae:	464b      	mov	r3, r9
 80087b0:	460a      	mov	r2, r1
 80087b2:	eb42 0303 	adc.w	r3, r2, r3
 80087b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	663b      	str	r3, [r7, #96]	; 0x60
 80087c2:	667a      	str	r2, [r7, #100]	; 0x64
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80087d0:	4649      	mov	r1, r9
 80087d2:	008b      	lsls	r3, r1, #2
 80087d4:	4641      	mov	r1, r8
 80087d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087da:	4641      	mov	r1, r8
 80087dc:	008a      	lsls	r2, r1, #2
 80087de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80087e2:	f7f8 fa59 	bl	8000c98 <__aeabi_uldivmod>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4b0d      	ldr	r3, [pc, #52]	; (8008820 <UART_SetConfig+0x4e4>)
 80087ec:	fba3 1302 	umull	r1, r3, r3, r2
 80087f0:	095b      	lsrs	r3, r3, #5
 80087f2:	2164      	movs	r1, #100	; 0x64
 80087f4:	fb01 f303 	mul.w	r3, r1, r3
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	011b      	lsls	r3, r3, #4
 80087fc:	3332      	adds	r3, #50	; 0x32
 80087fe:	4a08      	ldr	r2, [pc, #32]	; (8008820 <UART_SetConfig+0x4e4>)
 8008800:	fba2 2303 	umull	r2, r3, r2, r3
 8008804:	095b      	lsrs	r3, r3, #5
 8008806:	f003 020f 	and.w	r2, r3, #15
 800880a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4422      	add	r2, r4
 8008812:	609a      	str	r2, [r3, #8]
}
 8008814:	bf00      	nop
 8008816:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800881a:	46bd      	mov	sp, r7
 800881c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008820:	51eb851f 	.word	0x51eb851f

08008824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008824:	b084      	sub	sp, #16
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	f107 001c 	add.w	r0, r7, #28
 8008832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	2b01      	cmp	r3, #1
 800883a:	d122      	bne.n	8008882 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008866:	2b01      	cmp	r3, #1
 8008868:	d105      	bne.n	8008876 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f001 fbee 	bl	800a058 <USB_CoreReset>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]
 8008880:	e01a      	b.n	80088b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 fbe2 	bl	800a058 <USB_CoreReset>
 8008894:	4603      	mov	r3, r0
 8008896:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	639a      	str	r2, [r3, #56]	; 0x38
 80088aa:	e005      	b.n	80088b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d10b      	bne.n	80088d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f043 0206 	orr.w	r2, r3, #6
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f043 0220 	orr.w	r2, r3, #32
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088e2:	b004      	add	sp, #16
 80088e4:	4770      	bx	lr
	...

080088e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4613      	mov	r3, r2
 80088f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d165      	bne.n	80089c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4a41      	ldr	r2, [pc, #260]	; (8008a04 <USB_SetTurnaroundTime+0x11c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d906      	bls.n	8008912 <USB_SetTurnaroundTime+0x2a>
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4a40      	ldr	r2, [pc, #256]	; (8008a08 <USB_SetTurnaroundTime+0x120>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d202      	bcs.n	8008912 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800890c:	230f      	movs	r3, #15
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e062      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	4a3c      	ldr	r2, [pc, #240]	; (8008a08 <USB_SetTurnaroundTime+0x120>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d306      	bcc.n	8008928 <USB_SetTurnaroundTime+0x40>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	4a3b      	ldr	r2, [pc, #236]	; (8008a0c <USB_SetTurnaroundTime+0x124>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d202      	bcs.n	8008928 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008922:	230e      	movs	r3, #14
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	e057      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	4a38      	ldr	r2, [pc, #224]	; (8008a0c <USB_SetTurnaroundTime+0x124>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d306      	bcc.n	800893e <USB_SetTurnaroundTime+0x56>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4a37      	ldr	r2, [pc, #220]	; (8008a10 <USB_SetTurnaroundTime+0x128>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d202      	bcs.n	800893e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008938:	230d      	movs	r3, #13
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e04c      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	4a33      	ldr	r2, [pc, #204]	; (8008a10 <USB_SetTurnaroundTime+0x128>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d306      	bcc.n	8008954 <USB_SetTurnaroundTime+0x6c>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4a32      	ldr	r2, [pc, #200]	; (8008a14 <USB_SetTurnaroundTime+0x12c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d802      	bhi.n	8008954 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800894e:	230c      	movs	r3, #12
 8008950:	617b      	str	r3, [r7, #20]
 8008952:	e041      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4a2f      	ldr	r2, [pc, #188]	; (8008a14 <USB_SetTurnaroundTime+0x12c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d906      	bls.n	800896a <USB_SetTurnaroundTime+0x82>
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4a2e      	ldr	r2, [pc, #184]	; (8008a18 <USB_SetTurnaroundTime+0x130>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d802      	bhi.n	800896a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008964:	230b      	movs	r3, #11
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e036      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4a2a      	ldr	r2, [pc, #168]	; (8008a18 <USB_SetTurnaroundTime+0x130>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d906      	bls.n	8008980 <USB_SetTurnaroundTime+0x98>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	4a29      	ldr	r2, [pc, #164]	; (8008a1c <USB_SetTurnaroundTime+0x134>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d802      	bhi.n	8008980 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800897a:	230a      	movs	r3, #10
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	e02b      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	4a26      	ldr	r2, [pc, #152]	; (8008a1c <USB_SetTurnaroundTime+0x134>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d906      	bls.n	8008996 <USB_SetTurnaroundTime+0xae>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4a25      	ldr	r2, [pc, #148]	; (8008a20 <USB_SetTurnaroundTime+0x138>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d202      	bcs.n	8008996 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008990:	2309      	movs	r3, #9
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	e020      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4a21      	ldr	r2, [pc, #132]	; (8008a20 <USB_SetTurnaroundTime+0x138>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d306      	bcc.n	80089ac <USB_SetTurnaroundTime+0xc4>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	4a20      	ldr	r2, [pc, #128]	; (8008a24 <USB_SetTurnaroundTime+0x13c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d802      	bhi.n	80089ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80089a6:	2308      	movs	r3, #8
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	e015      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <USB_SetTurnaroundTime+0x13c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d906      	bls.n	80089c2 <USB_SetTurnaroundTime+0xda>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	4a1c      	ldr	r2, [pc, #112]	; (8008a28 <USB_SetTurnaroundTime+0x140>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d202      	bcs.n	80089c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80089bc:	2307      	movs	r3, #7
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	e00a      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80089c2:	2306      	movs	r3, #6
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e007      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d102      	bne.n	80089d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80089ce:	2309      	movs	r3, #9
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	e001      	b.n	80089d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80089d4:	2309      	movs	r3, #9
 80089d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	68da      	ldr	r2, [r3, #12]
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	029b      	lsls	r3, r3, #10
 80089ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80089f0:	431a      	orrs	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	00d8acbf 	.word	0x00d8acbf
 8008a08:	00e4e1c0 	.word	0x00e4e1c0
 8008a0c:	00f42400 	.word	0x00f42400
 8008a10:	01067380 	.word	0x01067380
 8008a14:	011a499f 	.word	0x011a499f
 8008a18:	01312cff 	.word	0x01312cff
 8008a1c:	014ca43f 	.word	0x014ca43f
 8008a20:	016e3600 	.word	0x016e3600
 8008a24:	01a6ab1f 	.word	0x01a6ab1f
 8008a28:	01e84800 	.word	0x01e84800

08008a2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f043 0201 	orr.w	r2, r3, #1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f023 0201 	bic.w	r2, r3, #1
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d115      	bne.n	8008abe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	f7fa fdf2 	bl	8003688 <HAL_Delay>
      ms++;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fa45 	bl	8009f3a <USB_GetMode>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d01e      	beq.n	8008af4 <USB_SetCurrentMode+0x84>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b31      	cmp	r3, #49	; 0x31
 8008aba:	d9f0      	bls.n	8008a9e <USB_SetCurrentMode+0x2e>
 8008abc:	e01a      	b.n	8008af4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d115      	bne.n	8008af0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	f7fa fdd9 	bl	8003688 <HAL_Delay>
      ms++;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 fa2c 	bl	8009f3a <USB_GetMode>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <USB_SetCurrentMode+0x84>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b31      	cmp	r3, #49	; 0x31
 8008aec:	d9f0      	bls.n	8008ad0 <USB_SetCurrentMode+0x60>
 8008aee:	e001      	b.n	8008af4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e005      	b.n	8008b00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b32      	cmp	r3, #50	; 0x32
 8008af8:	d101      	bne.n	8008afe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b08:	b084      	sub	sp, #16
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b086      	sub	sp, #24
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b22:	2300      	movs	r3, #0
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	e009      	b.n	8008b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	3340      	adds	r3, #64	; 0x40
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	2200      	movs	r2, #0
 8008b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	613b      	str	r3, [r7, #16]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b0e      	cmp	r3, #14
 8008b40:	d9f2      	bls.n	8008b28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d11c      	bne.n	8008b82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b56:	f043 0302 	orr.w	r3, r3, #2
 8008b5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8008b80:	e00b      	b.n	8008b9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bac:	4619      	mov	r1, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	680b      	ldr	r3, [r1, #0]
 8008bb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d10c      	bne.n	8008bda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d104      	bne.n	8008bd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f965 	bl	8008e98 <USB_SetDevSpeed>
 8008bce:	e008      	b.n	8008be2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f960 	bl	8008e98 <USB_SetDevSpeed>
 8008bd8:	e003      	b.n	8008be2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bda:	2103      	movs	r1, #3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f95b 	bl	8008e98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008be2:	2110      	movs	r1, #16
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f8f3 	bl	8008dd0 <USB_FlushTxFifo>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f91f 	bl	8008e38 <USB_FlushRxFifo>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c16:	461a      	mov	r2, r3
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c22:	461a      	mov	r2, r3
 8008c24:	2300      	movs	r3, #0
 8008c26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	613b      	str	r3, [r7, #16]
 8008c2c:	e043      	b.n	8008cb6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c44:	d118      	bne.n	8008c78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10a      	bne.n	8008c62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	e013      	b.n	8008c8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	e008      	b.n	8008c8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c84:	461a      	mov	r2, r3
 8008c86:	2300      	movs	r3, #0
 8008c88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c96:	461a      	mov	r2, r3
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d3b7      	bcc.n	8008c2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	e043      	b.n	8008d4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cda:	d118      	bne.n	8008d0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	e013      	b.n	8008d20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d04:	461a      	mov	r2, r3
 8008d06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d0a:	6013      	str	r3, [r2, #0]
 8008d0c:	e008      	b.n	8008d20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	2300      	movs	r3, #0
 8008d30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	613b      	str	r3, [r7, #16]
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d3b7      	bcc.n	8008cc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d105      	bne.n	8008d88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f043 0210 	orr.w	r2, r3, #16
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	699a      	ldr	r2, [r3, #24]
 8008d8c:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <USB_DevInit+0x2c4>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	f043 0208 	orr.w	r2, r3, #8
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d107      	bne.n	8008dbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008db4:	f043 0304 	orr.w	r3, r3, #4
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dc8:	b004      	add	sp, #16
 8008dca:	4770      	bx	lr
 8008dcc:	803c3800 	.word	0x803c3800

08008dd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3301      	adds	r3, #1
 8008de2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4a13      	ldr	r2, [pc, #76]	; (8008e34 <USB_FlushTxFifo+0x64>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d901      	bls.n	8008df0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e01b      	b.n	8008e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	daf2      	bge.n	8008dde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	019b      	lsls	r3, r3, #6
 8008e00:	f043 0220 	orr.w	r2, r3, #32
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4a08      	ldr	r2, [pc, #32]	; (8008e34 <USB_FlushTxFifo+0x64>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d901      	bls.n	8008e1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e006      	b.n	8008e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	d0f0      	beq.n	8008e08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	00030d40 	.word	0x00030d40

08008e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4a11      	ldr	r2, [pc, #68]	; (8008e94 <USB_FlushRxFifo+0x5c>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d901      	bls.n	8008e56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e018      	b.n	8008e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	daf2      	bge.n	8008e44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2210      	movs	r2, #16
 8008e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a08      	ldr	r2, [pc, #32]	; (8008e94 <USB_FlushRxFifo+0x5c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d901      	bls.n	8008e7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e006      	b.n	8008e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0310 	and.w	r3, r3, #16
 8008e82:	2b10      	cmp	r3, #16
 8008e84:	d0f0      	beq.n	8008e68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	00030d40 	.word	0x00030d40

08008e98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	68f9      	ldr	r1, [r7, #12]
 8008eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b087      	sub	sp, #28
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 0306 	and.w	r3, r3, #6
 8008ee2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d102      	bne.n	8008ef0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008eea:	2300      	movs	r3, #0
 8008eec:	75fb      	strb	r3, [r7, #23]
 8008eee:	e00a      	b.n	8008f06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d002      	beq.n	8008efc <USB_GetDevSpeed+0x32>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2b06      	cmp	r3, #6
 8008efa:	d102      	bne.n	8008f02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008efc:	2302      	movs	r3, #2
 8008efe:	75fb      	strb	r3, [r7, #23]
 8008f00:	e001      	b.n	8008f06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f02:	230f      	movs	r3, #15
 8008f04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	371c      	adds	r7, #28
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	785b      	ldrb	r3, [r3, #1]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d13a      	bne.n	8008fa6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f36:	69da      	ldr	r2, [r3, #28]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	2101      	movs	r1, #1
 8008f42:	fa01 f303 	lsl.w	r3, r1, r3
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	68f9      	ldr	r1, [r7, #12]
 8008f4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d155      	bne.n	8009014 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	791b      	ldrb	r3, [r3, #4]
 8008f82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	059b      	lsls	r3, r3, #22
 8008f8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	0151      	lsls	r1, r2, #5
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	440a      	add	r2, r1
 8008f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	e036      	b.n	8009014 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fac:	69da      	ldr	r2, [r3, #28]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	f003 030f 	and.w	r3, r3, #15
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fbc:	041b      	lsls	r3, r3, #16
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d11a      	bne.n	8009014 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	015a      	lsls	r2, r3, #5
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	791b      	ldrb	r3, [r3, #4]
 8008ff8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	0151      	lsls	r1, r2, #5
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	440a      	add	r2, r1
 8009006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800900a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800900e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009012:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
	...

08009024 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d161      	bne.n	8009104 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009056:	d11f      	bne.n	8009098 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	0151      	lsls	r1, r2, #5
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	440a      	add	r2, r1
 800906e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009076:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	0151      	lsls	r1, r2, #5
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	440a      	add	r2, r1
 800908e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	2101      	movs	r1, #1
 80090aa:	fa01 f303 	lsl.w	r3, r1, r3
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	43db      	mvns	r3, r3
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b8:	4013      	ands	r3, r2
 80090ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c2:	69da      	ldr	r2, [r3, #28]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	2101      	movs	r1, #1
 80090ce:	fa01 f303 	lsl.w	r3, r1, r3
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	43db      	mvns	r3, r3
 80090d6:	68f9      	ldr	r1, [r7, #12]
 80090d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090dc:	4013      	ands	r3, r2
 80090de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	0159      	lsls	r1, r3, #5
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	440b      	add	r3, r1
 80090f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fa:	4619      	mov	r1, r3
 80090fc:	4b35      	ldr	r3, [pc, #212]	; (80091d4 <USB_DeactivateEndpoint+0x1b0>)
 80090fe:	4013      	ands	r3, r2
 8009100:	600b      	str	r3, [r1, #0]
 8009102:	e060      	b.n	80091c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800911a:	d11f      	bne.n	800915c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	0151      	lsls	r1, r2, #5
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	440a      	add	r2, r1
 8009132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800913a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	0151      	lsls	r1, r2, #5
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	440a      	add	r2, r1
 8009152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800915a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	f003 030f 	and.w	r3, r3, #15
 800916c:	2101      	movs	r1, #1
 800916e:	fa01 f303 	lsl.w	r3, r1, r3
 8009172:	041b      	lsls	r3, r3, #16
 8009174:	43db      	mvns	r3, r3
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800917c:	4013      	ands	r3, r2
 800917e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009186:	69da      	ldr	r2, [r3, #28]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	2101      	movs	r1, #1
 8009192:	fa01 f303 	lsl.w	r3, r1, r3
 8009196:	041b      	lsls	r3, r3, #16
 8009198:	43db      	mvns	r3, r3
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091a0:	4013      	ands	r3, r2
 80091a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	0159      	lsls	r1, r3, #5
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	440b      	add	r3, r1
 80091ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091be:	4619      	mov	r1, r3
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <USB_DeactivateEndpoint+0x1b4>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	ec337800 	.word	0xec337800
 80091d8:	eff37800 	.word	0xeff37800

080091dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08a      	sub	sp, #40	; 0x28
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	785b      	ldrb	r3, [r3, #1]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	f040 815c 	bne.w	80094b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d132      	bne.n	800926c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	0151      	lsls	r1, r2, #5
 8009218:	69fa      	ldr	r2, [r7, #28]
 800921a:	440a      	add	r2, r1
 800921c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	69fa      	ldr	r2, [r7, #28]
 800925e:	440a      	add	r2, r1
 8009260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009264:	0cdb      	lsrs	r3, r3, #19
 8009266:	04db      	lsls	r3, r3, #19
 8009268:	6113      	str	r3, [r2, #16]
 800926a:	e074      	b.n	8009356 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	0151      	lsls	r1, r2, #5
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	440a      	add	r2, r1
 8009282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009286:	0cdb      	lsrs	r3, r3, #19
 8009288:	04db      	lsls	r3, r3, #19
 800928a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	0151      	lsls	r1, r2, #5
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	440a      	add	r2, r1
 80092a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6999      	ldr	r1, [r3, #24]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	440b      	add	r3, r1
 80092c8:	1e59      	subs	r1, r3, #1
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80092d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80092d4:	4b9d      	ldr	r3, [pc, #628]	; (800954c <USB_EPStartXfer+0x370>)
 80092d6:	400b      	ands	r3, r1
 80092d8:	69b9      	ldr	r1, [r7, #24]
 80092da:	0148      	lsls	r0, r1, #5
 80092dc:	69f9      	ldr	r1, [r7, #28]
 80092de:	4401      	add	r1, r0
 80092e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092e4:	4313      	orrs	r3, r2
 80092e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f4:	691a      	ldr	r2, [r3, #16]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092fe:	69b9      	ldr	r1, [r7, #24]
 8009300:	0148      	lsls	r0, r1, #5
 8009302:	69f9      	ldr	r1, [r7, #28]
 8009304:	4401      	add	r1, r0
 8009306:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800930a:	4313      	orrs	r3, r2
 800930c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	791b      	ldrb	r3, [r3, #4]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d11f      	bne.n	8009356 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	0151      	lsls	r1, r2, #5
 8009328:	69fa      	ldr	r2, [r7, #28]
 800932a:	440a      	add	r2, r1
 800932c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009330:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009334:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	015a      	lsls	r2, r3, #5
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	4413      	add	r3, r2
 800933e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	0151      	lsls	r1, r2, #5
 8009348:	69fa      	ldr	r2, [r7, #28]
 800934a:	440a      	add	r2, r1
 800934c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009354:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d14b      	bne.n	80093f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d009      	beq.n	8009378 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009370:	461a      	mov	r2, r3
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	791b      	ldrb	r3, [r3, #4]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d128      	bne.n	80093d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938c:	2b00      	cmp	r3, #0
 800938e:	d110      	bne.n	80093b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	69fa      	ldr	r2, [r7, #28]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	e00f      	b.n	80093d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	0151      	lsls	r1, r2, #5
 80093c4:	69fa      	ldr	r2, [r7, #28]
 80093c6:	440a      	add	r2, r1
 80093c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	0151      	lsls	r1, r2, #5
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	440a      	add	r2, r1
 80093e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	e133      	b.n	800965c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	0151      	lsls	r1, r2, #5
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	440a      	add	r2, r1
 800940a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009412:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	791b      	ldrb	r3, [r3, #4]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d015      	beq.n	8009448 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 811b 	beq.w	800965c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	f003 030f 	and.w	r3, r3, #15
 8009436:	2101      	movs	r1, #1
 8009438:	fa01 f303 	lsl.w	r3, r1, r3
 800943c:	69f9      	ldr	r1, [r7, #28]
 800943e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009442:	4313      	orrs	r3, r2
 8009444:	634b      	str	r3, [r1, #52]	; 0x34
 8009446:	e109      	b.n	800965c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009454:	2b00      	cmp	r3, #0
 8009456:	d110      	bne.n	800947a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	0151      	lsls	r1, r2, #5
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	440a      	add	r2, r1
 800946e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	e00f      	b.n	800949a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	440a      	add	r2, r1
 8009490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009498:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	6919      	ldr	r1, [r3, #16]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	781a      	ldrb	r2, [r3, #0]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	b298      	uxth	r0, r3
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	4603      	mov	r3, r0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 fade 	bl	8009a70 <USB_WritePacket>
 80094b4:	e0d2      	b.n	800965c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d0:	0cdb      	lsrs	r3, r3, #19
 80094d2:	04db      	lsls	r3, r3, #19
 80094d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d126      	bne.n	8009550 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950e:	691a      	ldr	r2, [r3, #16]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009518:	69b9      	ldr	r1, [r7, #24]
 800951a:	0148      	lsls	r0, r1, #5
 800951c:	69f9      	ldr	r1, [r7, #28]
 800951e:	4401      	add	r1, r0
 8009520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009524:	4313      	orrs	r3, r2
 8009526:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	0151      	lsls	r1, r2, #5
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	440a      	add	r2, r1
 800953e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009546:	6113      	str	r3, [r2, #16]
 8009548:	e03a      	b.n	80095c0 <USB_EPStartXfer+0x3e4>
 800954a:	bf00      	nop
 800954c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	699a      	ldr	r2, [r3, #24]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	4413      	add	r3, r2
 800955a:	1e5a      	subs	r2, r3, #1
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	fbb2 f3f3 	udiv	r3, r2, r3
 8009564:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	8afa      	ldrh	r2, [r7, #22]
 800956c:	fb03 f202 	mul.w	r2, r3, r2
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009580:	691a      	ldr	r2, [r3, #16]
 8009582:	8afb      	ldrh	r3, [r7, #22]
 8009584:	04d9      	lsls	r1, r3, #19
 8009586:	4b38      	ldr	r3, [pc, #224]	; (8009668 <USB_EPStartXfer+0x48c>)
 8009588:	400b      	ands	r3, r1
 800958a:	69b9      	ldr	r1, [r7, #24]
 800958c:	0148      	lsls	r0, r1, #5
 800958e:	69f9      	ldr	r1, [r7, #28]
 8009590:	4401      	add	r1, r0
 8009592:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009596:	4313      	orrs	r3, r2
 8009598:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a6:	691a      	ldr	r2, [r3, #16]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b0:	69b9      	ldr	r1, [r7, #24]
 80095b2:	0148      	lsls	r0, r1, #5
 80095b4:	69f9      	ldr	r1, [r7, #28]
 80095b6:	4401      	add	r1, r0
 80095b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095bc:	4313      	orrs	r3, r2
 80095be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d10d      	bne.n	80095e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d009      	beq.n	80095e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6919      	ldr	r1, [r3, #16]
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095de:	460a      	mov	r2, r1
 80095e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	791b      	ldrb	r3, [r3, #4]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d128      	bne.n	800963c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d110      	bne.n	800961c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	4413      	add	r3, r2
 8009602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	0151      	lsls	r1, r2, #5
 800960c:	69fa      	ldr	r2, [r7, #28]
 800960e:	440a      	add	r2, r1
 8009610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009614:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009618:	6013      	str	r3, [r2, #0]
 800961a:	e00f      	b.n	800963c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	0151      	lsls	r1, r2, #5
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	440a      	add	r2, r1
 8009632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800963a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	4413      	add	r3, r2
 8009644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	0151      	lsls	r1, r2, #5
 800964e:	69fa      	ldr	r2, [r7, #28]
 8009650:	440a      	add	r2, r1
 8009652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009656:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800965a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	1ff80000 	.word	0x1ff80000

0800966c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	4613      	mov	r3, r2
 8009678:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b01      	cmp	r3, #1
 800968a:	f040 80ce 	bne.w	800982a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d132      	bne.n	80096fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	0151      	lsls	r1, r2, #5
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	440a      	add	r2, r1
 80096d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	0151      	lsls	r1, r2, #5
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	440a      	add	r2, r1
 80096f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096f4:	0cdb      	lsrs	r3, r3, #19
 80096f6:	04db      	lsls	r3, r3, #19
 80096f8:	6113      	str	r3, [r2, #16]
 80096fa:	e04e      	b.n	800979a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	0151      	lsls	r1, r2, #5
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	440a      	add	r2, r1
 8009712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009716:	0cdb      	lsrs	r3, r3, #19
 8009718:	04db      	lsls	r3, r3, #19
 800971a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	0151      	lsls	r1, r2, #5
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	440a      	add	r2, r1
 8009732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009736:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800973a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800973e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	699a      	ldr	r2, [r3, #24]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	429a      	cmp	r2, r3
 800974a:	d903      	bls.n	8009754 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	68da      	ldr	r2, [r3, #12]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	0151      	lsls	r1, r2, #5
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	440a      	add	r2, r1
 800976a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800978a:	6939      	ldr	r1, [r7, #16]
 800978c:	0148      	lsls	r0, r1, #5
 800978e:	6979      	ldr	r1, [r7, #20]
 8009790:	4401      	add	r1, r0
 8009792:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009796:	4313      	orrs	r3, r2
 8009798:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d11e      	bne.n	80097de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d009      	beq.n	80097bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b4:	461a      	mov	r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	0151      	lsls	r1, r2, #5
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	440a      	add	r2, r1
 80097d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	e097      	b.n	800990e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	0151      	lsls	r1, r2, #5
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	440a      	add	r2, r1
 80097f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8083 	beq.w	800990e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	2101      	movs	r1, #1
 800981a:	fa01 f303 	lsl.w	r3, r1, r3
 800981e:	6979      	ldr	r1, [r7, #20]
 8009820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009824:	4313      	orrs	r3, r2
 8009826:	634b      	str	r3, [r1, #52]	; 0x34
 8009828:	e071      	b.n	800990e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	0151      	lsls	r1, r2, #5
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	440a      	add	r2, r1
 8009840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009844:	0cdb      	lsrs	r3, r3, #19
 8009846:	04db      	lsls	r3, r3, #19
 8009848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	0151      	lsls	r1, r2, #5
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	440a      	add	r2, r1
 8009860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009864:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009868:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800986c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	68da      	ldr	r2, [r3, #12]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	0151      	lsls	r1, r2, #5
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	440a      	add	r2, r1
 800989c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b2:	691a      	ldr	r2, [r3, #16]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098bc:	6939      	ldr	r1, [r7, #16]
 80098be:	0148      	lsls	r0, r1, #5
 80098c0:	6979      	ldr	r1, [r7, #20]
 80098c2:	4401      	add	r1, r0
 80098c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098c8:	4313      	orrs	r3, r2
 80098ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d10d      	bne.n	80098ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d009      	beq.n	80098ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	6919      	ldr	r1, [r3, #16]
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ea:	460a      	mov	r2, r1
 80098ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	0151      	lsls	r1, r2, #5
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	440a      	add	r2, r1
 8009904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009908:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800990c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d14a      	bne.n	80099d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800994e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009952:	f040 8086 	bne.w	8009a62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	7812      	ldrb	r2, [r2, #0]
 800996a:	0151      	lsls	r1, r2, #5
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	440a      	add	r2, r1
 8009970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009974:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009978:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	7812      	ldrb	r2, [r2, #0]
 800998e:	0151      	lsls	r1, r2, #5
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	440a      	add	r2, r1
 8009994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800999c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d902      	bls.n	80099b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	75fb      	strb	r3, [r7, #23]
          break;
 80099b2:	e056      	b.n	8009a62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099cc:	d0e7      	beq.n	800999e <USB_EPStopXfer+0x82>
 80099ce:	e048      	b.n	8009a62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	015a      	lsls	r2, r3, #5
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	4413      	add	r3, r2
 80099da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099e8:	d13b      	bne.n	8009a62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	7812      	ldrb	r2, [r2, #0]
 80099fe:	0151      	lsls	r1, r2, #5
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	440a      	add	r2, r1
 8009a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	7812      	ldrb	r2, [r2, #0]
 8009a22:	0151      	lsls	r1, r2, #5
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	440a      	add	r2, r1
 8009a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3301      	adds	r3, #1
 8009a36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d902      	bls.n	8009a48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	75fb      	strb	r3, [r7, #23]
          break;
 8009a46:	e00c      	b.n	8009a62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a60:	d0e7      	beq.n	8009a32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	371c      	adds	r7, #28
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b089      	sub	sp, #36	; 0x24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	460b      	mov	r3, r1
 8009a80:	71fb      	strb	r3, [r7, #7]
 8009a82:	4613      	mov	r3, r2
 8009a84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d123      	bne.n	8009ade <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a96:	88bb      	ldrh	r3, [r7, #4]
 8009a98:	3303      	adds	r3, #3
 8009a9a:	089b      	lsrs	r3, r3, #2
 8009a9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	61bb      	str	r3, [r7, #24]
 8009aa2:	e018      	b.n	8009ad6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	031a      	lsls	r2, r3, #12
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	3301      	adds	r3, #1
 8009abc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	3301      	adds	r3, #1
 8009ace:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	61bb      	str	r3, [r7, #24]
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d3e2      	bcc.n	8009aa4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3724      	adds	r7, #36	; 0x24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b08b      	sub	sp, #44	; 0x2c
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	4613      	mov	r3, r2
 8009af8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b02:	88fb      	ldrh	r3, [r7, #6]
 8009b04:	089b      	lsrs	r3, r3, #2
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b0a:	88fb      	ldrh	r3, [r7, #6]
 8009b0c:	f003 0303 	and.w	r3, r3, #3
 8009b10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b12:	2300      	movs	r3, #0
 8009b14:	623b      	str	r3, [r7, #32]
 8009b16:	e014      	b.n	8009b42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	3301      	adds	r3, #1
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	3301      	adds	r3, #1
 8009b34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	3301      	adds	r3, #1
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	623b      	str	r3, [r7, #32]
 8009b42:	6a3a      	ldr	r2, [r7, #32]
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d3e6      	bcc.n	8009b18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b4a:	8bfb      	ldrh	r3, [r7, #30]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01e      	beq.n	8009b8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f107 0310 	add.w	r3, r7, #16
 8009b60:	6812      	ldr	r2, [r2, #0]
 8009b62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	701a      	strb	r2, [r3, #0]
      i++;
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	3301      	adds	r3, #1
 8009b80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b82:	8bfb      	ldrh	r3, [r7, #30]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b88:	8bfb      	ldrh	r3, [r7, #30]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1ea      	bne.n	8009b64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	372c      	adds	r7, #44	; 0x2c
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d12c      	bne.n	8009c12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	db12      	blt.n	8009bf0 <USB_EPSetStall+0x54>
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00f      	beq.n	8009bf0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	0151      	lsls	r1, r2, #5
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	440a      	add	r2, r1
 8009be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	0151      	lsls	r1, r2, #5
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	440a      	add	r2, r1
 8009c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	e02b      	b.n	8009c6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	db12      	blt.n	8009c4a <USB_EPSetStall+0xae>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00f      	beq.n	8009c4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	0151      	lsls	r1, r2, #5
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	440a      	add	r2, r1
 8009c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	0151      	lsls	r1, r2, #5
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	440a      	add	r2, r1
 8009c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d128      	bne.n	8009ce6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	0151      	lsls	r1, r2, #5
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	440a      	add	r2, r1
 8009caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	791b      	ldrb	r3, [r3, #4]
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d003      	beq.n	8009cc4 <USB_EPClearStall+0x4c>
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	791b      	ldrb	r3, [r3, #4]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d138      	bne.n	8009d36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce2:	6013      	str	r3, [r2, #0]
 8009ce4:	e027      	b.n	8009d36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	791b      	ldrb	r3, [r3, #4]
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d003      	beq.n	8009d16 <USB_EPClearStall+0x9e>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	791b      	ldrb	r3, [r3, #4]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d10f      	bne.n	8009d36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	0151      	lsls	r1, r2, #5
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	440a      	add	r2, r1
 8009d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	78fb      	ldrb	r3, [r7, #3]
 8009d72:	011b      	lsls	r3, r3, #4
 8009d74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d78:	68f9      	ldr	r1, [r7, #12]
 8009d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009daa:	f023 0303 	bic.w	r3, r3, #3
 8009dae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dbe:	f023 0302 	bic.w	r3, r3, #2
 8009dc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009dec:	f023 0303 	bic.w	r3, r3, #3
 8009df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e00:	f043 0302 	orr.w	r3, r3, #2
 8009e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4013      	ands	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	0c1b      	lsrs	r3, r3, #16
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b085      	sub	sp, #20
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	4013      	ands	r3, r2
 8009e90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	b29b      	uxth	r3, r3
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009eb2:	78fb      	ldrb	r3, [r7, #3]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ed0:	68bb      	ldr	r3, [r7, #8]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b087      	sub	sp, #28
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f02:	78fb      	ldrb	r3, [r7, #3]
 8009f04:	f003 030f 	and.w	r3, r3, #15
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f0e:	01db      	lsls	r3, r3, #7
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	4013      	ands	r3, r2
 8009f2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	f003 0301 	and.w	r3, r3, #1
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f74:	f023 0307 	bic.w	r3, r3, #7
 8009f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	333c      	adds	r3, #60	; 0x3c
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	4a26      	ldr	r2, [pc, #152]	; (800a054 <USB_EP0_OutStart+0xb8>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d90a      	bls.n	8009fd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fd0:	d101      	bne.n	8009fd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	e037      	b.n	800a046 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fdc:	461a      	mov	r2, r3
 8009fde:	2300      	movs	r3, #0
 8009fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a004:	f043 0318 	orr.w	r3, r3, #24
 800a008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a018:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a01c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a01e:	7afb      	ldrb	r3, [r7, #11]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d10f      	bne.n	800a044 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a02a:	461a      	mov	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a03e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	4f54300a 	.word	0x4f54300a

0800a058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4a13      	ldr	r2, [pc, #76]	; (800a0bc <USB_CoreReset+0x64>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d901      	bls.n	800a076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e01b      	b.n	800a0ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	daf2      	bge.n	800a064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a07e:	2300      	movs	r3, #0
 800a080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	f043 0201 	orr.w	r2, r3, #1
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3301      	adds	r3, #1
 800a092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	4a09      	ldr	r2, [pc, #36]	; (800a0bc <USB_CoreReset+0x64>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d901      	bls.n	800a0a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e006      	b.n	800a0ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d0f0      	beq.n	800a08e <USB_CoreReset+0x36>

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	00030d40 	.word	0x00030d40

0800a0c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a0d0:	f005 f93a 	bl	800f348 <USBD_static_malloc>
 800a0d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d109      	bne.n	800a0f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	32b0      	adds	r2, #176	; 0xb0
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	e0d4      	b.n	800a29a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a0f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f005 ff7f 	bl	800fffa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	32b0      	adds	r2, #176	; 0xb0
 800a106:	68f9      	ldr	r1, [r7, #12]
 800a108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	32b0      	adds	r2, #176	; 0xb0
 800a116:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	7c1b      	ldrb	r3, [r3, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d138      	bne.n	800a19a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a128:	4b5e      	ldr	r3, [pc, #376]	; (800a2a4 <USBD_CDC_Init+0x1e4>)
 800a12a:	7819      	ldrb	r1, [r3, #0]
 800a12c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a130:	2202      	movs	r2, #2
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f004 ffe5 	bl	800f102 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a138:	4b5a      	ldr	r3, [pc, #360]	; (800a2a4 <USBD_CDC_Init+0x1e4>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	f003 020f 	and.w	r2, r3, #15
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	440b      	add	r3, r1
 800a14c:	3324      	adds	r3, #36	; 0x24
 800a14e:	2201      	movs	r2, #1
 800a150:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a152:	4b55      	ldr	r3, [pc, #340]	; (800a2a8 <USBD_CDC_Init+0x1e8>)
 800a154:	7819      	ldrb	r1, [r3, #0]
 800a156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a15a:	2202      	movs	r2, #2
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f004 ffd0 	bl	800f102 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a162:	4b51      	ldr	r3, [pc, #324]	; (800a2a8 <USBD_CDC_Init+0x1e8>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	f003 020f 	and.w	r2, r3, #15
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	4613      	mov	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	440b      	add	r3, r1
 800a176:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a17a:	2201      	movs	r2, #1
 800a17c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a17e:	4b4b      	ldr	r3, [pc, #300]	; (800a2ac <USBD_CDC_Init+0x1ec>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	f003 020f 	and.w	r2, r3, #15
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	4613      	mov	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	440b      	add	r3, r1
 800a192:	3326      	adds	r3, #38	; 0x26
 800a194:	2210      	movs	r2, #16
 800a196:	801a      	strh	r2, [r3, #0]
 800a198:	e035      	b.n	800a206 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a19a:	4b42      	ldr	r3, [pc, #264]	; (800a2a4 <USBD_CDC_Init+0x1e4>)
 800a19c:	7819      	ldrb	r1, [r3, #0]
 800a19e:	2340      	movs	r3, #64	; 0x40
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f004 ffad 	bl	800f102 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a1a8:	4b3e      	ldr	r3, [pc, #248]	; (800a2a4 <USBD_CDC_Init+0x1e4>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	f003 020f 	and.w	r2, r3, #15
 800a1b0:	6879      	ldr	r1, [r7, #4]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3324      	adds	r3, #36	; 0x24
 800a1be:	2201      	movs	r2, #1
 800a1c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a1c2:	4b39      	ldr	r3, [pc, #228]	; (800a2a8 <USBD_CDC_Init+0x1e8>)
 800a1c4:	7819      	ldrb	r1, [r3, #0]
 800a1c6:	2340      	movs	r3, #64	; 0x40
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f004 ff99 	bl	800f102 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a1d0:	4b35      	ldr	r3, [pc, #212]	; (800a2a8 <USBD_CDC_Init+0x1e8>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	f003 020f 	and.w	r2, r3, #15
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	440b      	add	r3, r1
 800a1e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a1ec:	4b2f      	ldr	r3, [pc, #188]	; (800a2ac <USBD_CDC_Init+0x1ec>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	f003 020f 	and.w	r2, r3, #15
 800a1f4:	6879      	ldr	r1, [r7, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	3326      	adds	r3, #38	; 0x26
 800a202:	2210      	movs	r2, #16
 800a204:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a206:	4b29      	ldr	r3, [pc, #164]	; (800a2ac <USBD_CDC_Init+0x1ec>)
 800a208:	7819      	ldrb	r1, [r3, #0]
 800a20a:	2308      	movs	r3, #8
 800a20c:	2203      	movs	r2, #3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f004 ff77 	bl	800f102 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a214:	4b25      	ldr	r3, [pc, #148]	; (800a2ac <USBD_CDC_Init+0x1ec>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	f003 020f 	and.w	r2, r3, #15
 800a21c:	6879      	ldr	r1, [r7, #4]
 800a21e:	4613      	mov	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	440b      	add	r3, r1
 800a228:	3324      	adds	r3, #36	; 0x24
 800a22a:	2201      	movs	r2, #1
 800a22c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	33b0      	adds	r3, #176	; 0xb0
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a264:	2302      	movs	r3, #2
 800a266:	e018      	b.n	800a29a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	7c1b      	ldrb	r3, [r3, #16]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a270:	4b0d      	ldr	r3, [pc, #52]	; (800a2a8 <USBD_CDC_Init+0x1e8>)
 800a272:	7819      	ldrb	r1, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a27a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f005 f82e 	bl	800f2e0 <USBD_LL_PrepareReceive>
 800a284:	e008      	b.n	800a298 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a286:	4b08      	ldr	r3, [pc, #32]	; (800a2a8 <USBD_CDC_Init+0x1e8>)
 800a288:	7819      	ldrb	r1, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a290:	2340      	movs	r3, #64	; 0x40
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f005 f824 	bl	800f2e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	200000b3 	.word	0x200000b3
 800a2a8:	200000b4 	.word	0x200000b4
 800a2ac:	200000b5 	.word	0x200000b5

0800a2b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a2bc:	4b3a      	ldr	r3, [pc, #232]	; (800a3a8 <USBD_CDC_DeInit+0xf8>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f004 ff43 	bl	800f14e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a2c8:	4b37      	ldr	r3, [pc, #220]	; (800a3a8 <USBD_CDC_DeInit+0xf8>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	f003 020f 	and.w	r2, r3, #15
 800a2d0:	6879      	ldr	r1, [r7, #4]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	440b      	add	r3, r1
 800a2dc:	3324      	adds	r3, #36	; 0x24
 800a2de:	2200      	movs	r2, #0
 800a2e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a2e2:	4b32      	ldr	r3, [pc, #200]	; (800a3ac <USBD_CDC_DeInit+0xfc>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f004 ff30 	bl	800f14e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a2ee:	4b2f      	ldr	r3, [pc, #188]	; (800a3ac <USBD_CDC_DeInit+0xfc>)
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	f003 020f 	and.w	r2, r3, #15
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	440b      	add	r3, r1
 800a302:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a306:	2200      	movs	r2, #0
 800a308:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a30a:	4b29      	ldr	r3, [pc, #164]	; (800a3b0 <USBD_CDC_DeInit+0x100>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f004 ff1c 	bl	800f14e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a316:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <USBD_CDC_DeInit+0x100>)
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	f003 020f 	and.w	r2, r3, #15
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	4613      	mov	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	440b      	add	r3, r1
 800a32a:	3324      	adds	r3, #36	; 0x24
 800a32c:	2200      	movs	r2, #0
 800a32e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a330:	4b1f      	ldr	r3, [pc, #124]	; (800a3b0 <USBD_CDC_DeInit+0x100>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	f003 020f 	and.w	r2, r3, #15
 800a338:	6879      	ldr	r1, [r7, #4]
 800a33a:	4613      	mov	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	440b      	add	r3, r1
 800a344:	3326      	adds	r3, #38	; 0x26
 800a346:	2200      	movs	r2, #0
 800a348:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	32b0      	adds	r2, #176	; 0xb0
 800a354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d01f      	beq.n	800a39c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	33b0      	adds	r3, #176	; 0xb0
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	32b0      	adds	r2, #176	; 0xb0
 800a37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37e:	4618      	mov	r0, r3
 800a380:	f004 fff0 	bl	800f364 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	32b0      	adds	r2, #176	; 0xb0
 800a38e:	2100      	movs	r1, #0
 800a390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	200000b3 	.word	0x200000b3
 800a3ac:	200000b4 	.word	0x200000b4
 800a3b0:	200000b5 	.word	0x200000b5

0800a3b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	32b0      	adds	r2, #176	; 0xb0
 800a3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e0bf      	b.n	800a564 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d050      	beq.n	800a492 <USBD_CDC_Setup+0xde>
 800a3f0:	2b20      	cmp	r3, #32
 800a3f2:	f040 80af 	bne.w	800a554 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	88db      	ldrh	r3, [r3, #6]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d03a      	beq.n	800a474 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	b25b      	sxtb	r3, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	da1b      	bge.n	800a440 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	33b0      	adds	r3, #176	; 0xb0
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a41e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	88d2      	ldrh	r2, [r2, #6]
 800a424:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	88db      	ldrh	r3, [r3, #6]
 800a42a:	2b07      	cmp	r3, #7
 800a42c:	bf28      	it	cs
 800a42e:	2307      	movcs	r3, #7
 800a430:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	89fa      	ldrh	r2, [r7, #14]
 800a436:	4619      	mov	r1, r3
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f001 fd89 	bl	800bf50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a43e:	e090      	b.n	800a562 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	785a      	ldrb	r2, [r3, #1]
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	88db      	ldrh	r3, [r3, #6]
 800a44e:	2b3f      	cmp	r3, #63	; 0x3f
 800a450:	d803      	bhi.n	800a45a <USBD_CDC_Setup+0xa6>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	88db      	ldrh	r3, [r3, #6]
 800a456:	b2da      	uxtb	r2, r3
 800a458:	e000      	b.n	800a45c <USBD_CDC_Setup+0xa8>
 800a45a:	2240      	movs	r2, #64	; 0x40
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a462:	6939      	ldr	r1, [r7, #16]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a46a:	461a      	mov	r2, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f001 fd9b 	bl	800bfa8 <USBD_CtlPrepareRx>
      break;
 800a472:	e076      	b.n	800a562 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	33b0      	adds	r3, #176	; 0xb0
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	7850      	ldrb	r0, [r2, #1]
 800a48a:	2200      	movs	r2, #0
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	4798      	blx	r3
      break;
 800a490:	e067      	b.n	800a562 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	785b      	ldrb	r3, [r3, #1]
 800a496:	2b0b      	cmp	r3, #11
 800a498:	d851      	bhi.n	800a53e <USBD_CDC_Setup+0x18a>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <USBD_CDC_Setup+0xec>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4d1 	.word	0x0800a4d1
 800a4a4:	0800a54d 	.word	0x0800a54d
 800a4a8:	0800a53f 	.word	0x0800a53f
 800a4ac:	0800a53f 	.word	0x0800a53f
 800a4b0:	0800a53f 	.word	0x0800a53f
 800a4b4:	0800a53f 	.word	0x0800a53f
 800a4b8:	0800a53f 	.word	0x0800a53f
 800a4bc:	0800a53f 	.word	0x0800a53f
 800a4c0:	0800a53f 	.word	0x0800a53f
 800a4c4:	0800a53f 	.word	0x0800a53f
 800a4c8:	0800a4fb 	.word	0x0800a4fb
 800a4cc:	0800a525 	.word	0x0800a525
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d107      	bne.n	800a4ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a4dc:	f107 030a 	add.w	r3, r7, #10
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f001 fd33 	bl	800bf50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4ea:	e032      	b.n	800a552 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 fcbd 	bl	800be6e <USBD_CtlError>
            ret = USBD_FAIL;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	75fb      	strb	r3, [r7, #23]
          break;
 800a4f8:	e02b      	b.n	800a552 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b03      	cmp	r3, #3
 800a504:	d107      	bne.n	800a516 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a506:	f107 030d 	add.w	r3, r7, #13
 800a50a:	2201      	movs	r2, #1
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f001 fd1e 	bl	800bf50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a514:	e01d      	b.n	800a552 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 fca8 	bl	800be6e <USBD_CtlError>
            ret = USBD_FAIL;
 800a51e:	2303      	movs	r3, #3
 800a520:	75fb      	strb	r3, [r7, #23]
          break;
 800a522:	e016      	b.n	800a552 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d00f      	beq.n	800a550 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fc9b 	bl	800be6e <USBD_CtlError>
            ret = USBD_FAIL;
 800a538:	2303      	movs	r3, #3
 800a53a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a53c:	e008      	b.n	800a550 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f001 fc94 	bl	800be6e <USBD_CtlError>
          ret = USBD_FAIL;
 800a546:	2303      	movs	r3, #3
 800a548:	75fb      	strb	r3, [r7, #23]
          break;
 800a54a:	e002      	b.n	800a552 <USBD_CDC_Setup+0x19e>
          break;
 800a54c:	bf00      	nop
 800a54e:	e008      	b.n	800a562 <USBD_CDC_Setup+0x1ae>
          break;
 800a550:	bf00      	nop
      }
      break;
 800a552:	e006      	b.n	800a562 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f001 fc89 	bl	800be6e <USBD_CtlError>
      ret = USBD_FAIL;
 800a55c:	2303      	movs	r3, #3
 800a55e:	75fb      	strb	r3, [r7, #23]
      break;
 800a560:	bf00      	nop
  }

  return (uint8_t)ret;
 800a562:	7dfb      	ldrb	r3, [r7, #23]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	460b      	mov	r3, r1
 800a576:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a57e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	32b0      	adds	r2, #176	; 0xb0
 800a58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a592:	2303      	movs	r3, #3
 800a594:	e065      	b.n	800a662 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	32b0      	adds	r2, #176	; 0xb0
 800a5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a5a6:	78fb      	ldrb	r3, [r7, #3]
 800a5a8:	f003 020f 	and.w	r2, r3, #15
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	3318      	adds	r3, #24
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d02f      	beq.n	800a620 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	f003 020f 	and.w	r2, r3, #15
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	440b      	add	r3, r1
 800a5d2:	3318      	adds	r3, #24
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	78fb      	ldrb	r3, [r7, #3]
 800a5d8:	f003 010f 	and.w	r1, r3, #15
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	460b      	mov	r3, r1
 800a5e0:	00db      	lsls	r3, r3, #3
 800a5e2:	440b      	add	r3, r1
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4403      	add	r3, r0
 800a5e8:	3348      	adds	r3, #72	; 0x48
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	fbb2 f1f3 	udiv	r1, r2, r3
 800a5f0:	fb01 f303 	mul.w	r3, r1, r3
 800a5f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d112      	bne.n	800a620 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	f003 020f 	and.w	r2, r3, #15
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	440b      	add	r3, r1
 800a60c:	3318      	adds	r3, #24
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a612:	78f9      	ldrb	r1, [r7, #3]
 800a614:	2300      	movs	r3, #0
 800a616:	2200      	movs	r2, #0
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f004 fe40 	bl	800f29e <USBD_LL_Transmit>
 800a61e:	e01f      	b.n	800a660 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2200      	movs	r2, #0
 800a624:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	33b0      	adds	r3, #176	; 0xb0
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4413      	add	r3, r2
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d010      	beq.n	800a660 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	33b0      	adds	r3, #176	; 0xb0
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a65c:	78fa      	ldrb	r2, [r7, #3]
 800a65e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	460b      	mov	r3, r1
 800a674:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	32b0      	adds	r2, #176	; 0xb0
 800a680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a684:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	32b0      	adds	r2, #176	; 0xb0
 800a690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a698:	2303      	movs	r3, #3
 800a69a:	e01a      	b.n	800a6d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a69c:	78fb      	ldrb	r3, [r7, #3]
 800a69e:	4619      	mov	r1, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f004 fe3e 	bl	800f322 <USBD_LL_GetRxDataSize>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	33b0      	adds	r3, #176	; 0xb0
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	32b0      	adds	r2, #176	; 0xb0
 800a6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	e025      	b.n	800a748 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	33b0      	adds	r3, #176	; 0xb0
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01a      	beq.n	800a746 <USBD_CDC_EP0_RxReady+0x6c>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a716:	2bff      	cmp	r3, #255	; 0xff
 800a718:	d015      	beq.n	800a746 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	33b0      	adds	r3, #176	; 0xb0
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a732:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a73a:	b292      	uxth	r2, r2
 800a73c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	22ff      	movs	r2, #255	; 0xff
 800a742:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a758:	2182      	movs	r1, #130	; 0x82
 800a75a:	4818      	ldr	r0, [pc, #96]	; (800a7bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a75c:	f000 fd4f 	bl	800b1fe <USBD_GetEpDesc>
 800a760:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a762:	2101      	movs	r1, #1
 800a764:	4815      	ldr	r0, [pc, #84]	; (800a7bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a766:	f000 fd4a 	bl	800b1fe <USBD_GetEpDesc>
 800a76a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a76c:	2181      	movs	r1, #129	; 0x81
 800a76e:	4813      	ldr	r0, [pc, #76]	; (800a7bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a770:	f000 fd45 	bl	800b1fe <USBD_GetEpDesc>
 800a774:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2210      	movs	r2, #16
 800a780:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d006      	beq.n	800a796 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a790:	711a      	strb	r2, [r3, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d006      	beq.n	800a7aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7a4:	711a      	strb	r2, [r3, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2243      	movs	r2, #67	; 0x43
 800a7ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7b0:	4b02      	ldr	r3, [pc, #8]	; (800a7bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000070 	.word	0x20000070

0800a7c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7c8:	2182      	movs	r1, #130	; 0x82
 800a7ca:	4818      	ldr	r0, [pc, #96]	; (800a82c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a7cc:	f000 fd17 	bl	800b1fe <USBD_GetEpDesc>
 800a7d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	4815      	ldr	r0, [pc, #84]	; (800a82c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a7d6:	f000 fd12 	bl	800b1fe <USBD_GetEpDesc>
 800a7da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7dc:	2181      	movs	r1, #129	; 0x81
 800a7de:	4813      	ldr	r0, [pc, #76]	; (800a82c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a7e0:	f000 fd0d 	bl	800b1fe <USBD_GetEpDesc>
 800a7e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	2210      	movs	r2, #16
 800a7f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d006      	beq.n	800a806 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	711a      	strb	r2, [r3, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f042 0202 	orr.w	r2, r2, #2
 800a804:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d006      	beq.n	800a81a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	711a      	strb	r2, [r3, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f042 0202 	orr.w	r2, r2, #2
 800a818:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2243      	movs	r2, #67	; 0x43
 800a81e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a820:	4b02      	ldr	r3, [pc, #8]	; (800a82c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20000070 	.word	0x20000070

0800a830 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a838:	2182      	movs	r1, #130	; 0x82
 800a83a:	4818      	ldr	r0, [pc, #96]	; (800a89c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a83c:	f000 fcdf 	bl	800b1fe <USBD_GetEpDesc>
 800a840:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a842:	2101      	movs	r1, #1
 800a844:	4815      	ldr	r0, [pc, #84]	; (800a89c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a846:	f000 fcda 	bl	800b1fe <USBD_GetEpDesc>
 800a84a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a84c:	2181      	movs	r1, #129	; 0x81
 800a84e:	4813      	ldr	r0, [pc, #76]	; (800a89c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a850:	f000 fcd5 	bl	800b1fe <USBD_GetEpDesc>
 800a854:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	2210      	movs	r2, #16
 800a860:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d006      	beq.n	800a876 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a870:	711a      	strb	r2, [r3, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d006      	beq.n	800a88a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a884:	711a      	strb	r2, [r3, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2243      	movs	r2, #67	; 0x43
 800a88e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a890:	4b02      	ldr	r3, [pc, #8]	; (800a89c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a892:	4618      	mov	r0, r3
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	20000070 	.word	0x20000070

0800a8a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	220a      	movs	r2, #10
 800a8ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a8ae:	4b03      	ldr	r3, [pc, #12]	; (800a8bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	2000002c 	.word	0x2000002c

0800a8c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e009      	b.n	800a8e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	33b0      	adds	r3, #176	; 0xb0
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	32b0      	adds	r2, #176	; 0xb0
 800a90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a916:	2303      	movs	r3, #3
 800a918:	e008      	b.n	800a92c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	32b0      	adds	r2, #176	; 0xb0
 800a94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a950:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a958:	2303      	movs	r3, #3
 800a95a:	e004      	b.n	800a966 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
	...

0800a974 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	32b0      	adds	r2, #176	; 0xb0
 800a986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a98c:	2301      	movs	r3, #1
 800a98e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	32b0      	adds	r2, #176	; 0xb0
 800a99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e025      	b.n	800a9f2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d11f      	bne.n	800a9f0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a9b8:	4b10      	ldr	r3, [pc, #64]	; (800a9fc <USBD_CDC_TransmitPacket+0x88>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	f003 020f 	and.w	r2, r3, #15
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4403      	add	r3, r0
 800a9d2:	3318      	adds	r3, #24
 800a9d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a9d6:	4b09      	ldr	r3, [pc, #36]	; (800a9fc <USBD_CDC_TransmitPacket+0x88>)
 800a9d8:	7819      	ldrb	r1, [r3, #0]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f004 fc59 	bl	800f29e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	200000b3 	.word	0x200000b3

0800aa00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	32b0      	adds	r2, #176	; 0xb0
 800aa12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	32b0      	adds	r2, #176	; 0xb0
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e018      	b.n	800aa60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	7c1b      	ldrb	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10a      	bne.n	800aa4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <USBD_CDC_ReceivePacket+0x68>)
 800aa38:	7819      	ldrb	r1, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f004 fc4b 	bl	800f2e0 <USBD_LL_PrepareReceive>
 800aa4a:	e008      	b.n	800aa5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa4c:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <USBD_CDC_ReceivePacket+0x68>)
 800aa4e:	7819      	ldrb	r1, [r3, #0]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f004 fc41 	bl	800f2e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	200000b4 	.word	0x200000b4

0800aa6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	4613      	mov	r3, r2
 800aa78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e01f      	b.n	800aac4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d003      	beq.n	800aaaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	79fa      	ldrb	r2, [r7, #7]
 800aab6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f004 fabb 	bl	800f034 <USBD_LL_Init>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aad6:	2300      	movs	r3, #0
 800aad8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e025      	b.n	800ab30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	32ae      	adds	r2, #174	; 0xae
 800aaf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00f      	beq.n	800ab20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	32ae      	adds	r2, #174	; 0xae
 800ab0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab10:	f107 020e 	add.w	r2, r7, #14
 800ab14:	4610      	mov	r0, r2
 800ab16:	4798      	blx	r3
 800ab18:	4602      	mov	r2, r0
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f004 fac3 	bl	800f0cc <USBD_LL_Start>
 800ab46:	4603      	mov	r3, r0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d009      	beq.n	800ab94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	78fa      	ldrb	r2, [r7, #3]
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	4798      	blx	r3
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	78fa      	ldrb	r2, [r7, #3]
 800abb8:	4611      	mov	r1, r2
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	4798      	blx	r3
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800abc4:	2303      	movs	r3, #3
 800abc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f001 f908 	bl	800bdfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800abf8:	461a      	mov	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac06:	f003 031f 	and.w	r3, r3, #31
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d01a      	beq.n	800ac44 <USBD_LL_SetupStage+0x72>
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d822      	bhi.n	800ac58 <USBD_LL_SetupStage+0x86>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <USBD_LL_SetupStage+0x4a>
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d00a      	beq.n	800ac30 <USBD_LL_SetupStage+0x5e>
 800ac1a:	e01d      	b.n	800ac58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fb5f 	bl	800b2e8 <USBD_StdDevReq>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac2e:	e020      	b.n	800ac72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fbc7 	bl	800b3cc <USBD_StdItfReq>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73fb      	strb	r3, [r7, #15]
      break;
 800ac42:	e016      	b.n	800ac72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 fc29 	bl	800b4a4 <USBD_StdEPReq>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]
      break;
 800ac56:	e00c      	b.n	800ac72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f004 fa90 	bl	800f18c <USBD_LL_StallEP>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac70:	bf00      	nop
  }

  return ret;
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	460b      	mov	r3, r1
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d16e      	bne.n	800ad72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	f040 8098 	bne.w	800add8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	689a      	ldr	r2, [r3, #8]
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d913      	bls.n	800acdc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	689a      	ldr	r2, [r3, #8]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	1ad2      	subs	r2, r2, r3
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	4293      	cmp	r3, r2
 800accc:	bf28      	it	cs
 800acce:	4613      	movcs	r3, r2
 800acd0:	461a      	mov	r2, r3
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f001 f984 	bl	800bfe2 <USBD_CtlContinueRx>
 800acda:	e07d      	b.n	800add8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ace2:	f003 031f 	and.w	r3, r3, #31
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d014      	beq.n	800ad14 <USBD_LL_DataOutStage+0x98>
 800acea:	2b02      	cmp	r3, #2
 800acec:	d81d      	bhi.n	800ad2a <USBD_LL_DataOutStage+0xae>
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <USBD_LL_DataOutStage+0x7c>
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d003      	beq.n	800acfe <USBD_LL_DataOutStage+0x82>
 800acf6:	e018      	b.n	800ad2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	75bb      	strb	r3, [r7, #22]
            break;
 800acfc:	e018      	b.n	800ad30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	4619      	mov	r1, r3
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f000 fa5e 	bl	800b1ca <USBD_CoreFindIF>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	75bb      	strb	r3, [r7, #22]
            break;
 800ad12:	e00d      	b.n	800ad30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f000 fa60 	bl	800b1e4 <USBD_CoreFindEP>
 800ad24:	4603      	mov	r3, r0
 800ad26:	75bb      	strb	r3, [r7, #22]
            break;
 800ad28:	e002      	b.n	800ad30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	75bb      	strb	r3, [r7, #22]
            break;
 800ad2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ad30:	7dbb      	ldrb	r3, [r7, #22]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d119      	bne.n	800ad6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d113      	bne.n	800ad6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ad42:	7dba      	ldrb	r2, [r7, #22]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	32ae      	adds	r2, #174	; 0xae
 800ad48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00b      	beq.n	800ad6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ad52:	7dba      	ldrb	r2, [r7, #22]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ad5a:	7dba      	ldrb	r2, [r7, #22]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	32ae      	adds	r2, #174	; 0xae
 800ad60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f001 f94a 	bl	800c004 <USBD_CtlSendStatus>
 800ad70:	e032      	b.n	800add8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ad72:	7afb      	ldrb	r3, [r7, #11]
 800ad74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 fa31 	bl	800b1e4 <USBD_CoreFindEP>
 800ad82:	4603      	mov	r3, r0
 800ad84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad86:	7dbb      	ldrb	r3, [r7, #22]
 800ad88:	2bff      	cmp	r3, #255	; 0xff
 800ad8a:	d025      	beq.n	800add8 <USBD_LL_DataOutStage+0x15c>
 800ad8c:	7dbb      	ldrb	r3, [r7, #22]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d122      	bne.n	800add8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d117      	bne.n	800adce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ad9e:	7dba      	ldrb	r2, [r7, #22]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	32ae      	adds	r2, #174	; 0xae
 800ada4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00f      	beq.n	800adce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800adae:	7dba      	ldrb	r2, [r7, #22]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800adb6:	7dba      	ldrb	r2, [r7, #22]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	32ae      	adds	r2, #174	; 0xae
 800adbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	7afa      	ldrb	r2, [r7, #11]
 800adc4:	4611      	mov	r1, r2
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	4798      	blx	r3
 800adca:	4603      	mov	r3, r0
 800adcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	e000      	b.n	800adda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b086      	sub	sp, #24
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	460b      	mov	r3, r1
 800adec:	607a      	str	r2, [r7, #4]
 800adee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800adf0:	7afb      	ldrb	r3, [r7, #11]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d16f      	bne.n	800aed6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3314      	adds	r3, #20
 800adfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d15a      	bne.n	800aebc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d914      	bls.n	800ae3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	689a      	ldr	r2, [r3, #8]
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	1ad2      	subs	r2, r2, r3
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	461a      	mov	r2, r3
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f001 f8ac 	bl	800bf86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae2e:	2300      	movs	r3, #0
 800ae30:	2200      	movs	r2, #0
 800ae32:	2100      	movs	r1, #0
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f004 fa53 	bl	800f2e0 <USBD_LL_PrepareReceive>
 800ae3a:	e03f      	b.n	800aebc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	68da      	ldr	r2, [r3, #12]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d11c      	bne.n	800ae82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d316      	bcc.n	800ae82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d20f      	bcs.n	800ae82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae62:	2200      	movs	r2, #0
 800ae64:	2100      	movs	r1, #0
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f001 f88d 	bl	800bf86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae74:	2300      	movs	r3, #0
 800ae76:	2200      	movs	r2, #0
 800ae78:	2100      	movs	r1, #0
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f004 fa30 	bl	800f2e0 <USBD_LL_PrepareReceive>
 800ae80:	e01c      	b.n	800aebc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d10f      	bne.n	800aeae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d009      	beq.n	800aeae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeae:	2180      	movs	r1, #128	; 0x80
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f004 f96b 	bl	800f18c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f001 f8b7 	bl	800c02a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d03a      	beq.n	800af3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f7ff fe42 	bl	800ab50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aed4:	e032      	b.n	800af3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aed6:	7afb      	ldrb	r3, [r7, #11]
 800aed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	4619      	mov	r1, r3
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 f97f 	bl	800b1e4 <USBD_CoreFindEP>
 800aee6:	4603      	mov	r3, r0
 800aee8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	2bff      	cmp	r3, #255	; 0xff
 800aeee:	d025      	beq.n	800af3c <USBD_LL_DataInStage+0x15a>
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d122      	bne.n	800af3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d11c      	bne.n	800af3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af02:	7dfa      	ldrb	r2, [r7, #23]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	32ae      	adds	r2, #174	; 0xae
 800af08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d014      	beq.n	800af3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800af12:	7dfa      	ldrb	r2, [r7, #23]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af1a:	7dfa      	ldrb	r2, [r7, #23]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	32ae      	adds	r2, #174	; 0xae
 800af20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	7afa      	ldrb	r2, [r7, #11]
 800af28:	4611      	mov	r1, r2
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	4798      	blx	r3
 800af2e:	4603      	mov	r3, r0
 800af30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800af32:	7dbb      	ldrb	r3, [r7, #22]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800af38:	7dbb      	ldrb	r3, [r7, #22]
 800af3a:	e000      	b.n	800af3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d014      	beq.n	800afac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00e      	beq.n	800afac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	6852      	ldr	r2, [r2, #4]
 800af9a:	b2d2      	uxtb	r2, r2
 800af9c:	4611      	mov	r1, r2
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	4798      	blx	r3
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800afa8:	2303      	movs	r3, #3
 800afaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afac:	2340      	movs	r3, #64	; 0x40
 800afae:	2200      	movs	r2, #0
 800afb0:	2100      	movs	r1, #0
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f004 f8a5 	bl	800f102 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2240      	movs	r2, #64	; 0x40
 800afc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afc8:	2340      	movs	r3, #64	; 0x40
 800afca:	2200      	movs	r2, #0
 800afcc:	2180      	movs	r1, #128	; 0x80
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f004 f897 	bl	800f102 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2240      	movs	r2, #64	; 0x40
 800afde:	621a      	str	r2, [r3, #32]

  return ret;
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800afea:	b480      	push	{r7}
 800afec:	b083      	sub	sp, #12
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	460b      	mov	r3, r1
 800aff4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	78fa      	ldrb	r2, [r7, #3]
 800affa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b083      	sub	sp, #12
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2204      	movs	r2, #4
 800b024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	370c      	adds	r7, #12
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b036:	b480      	push	{r7}
 800b038:	b083      	sub	sp, #12
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b04      	cmp	r3, #4
 800b048:	d106      	bne.n	800b058 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b050:	b2da      	uxtb	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b082      	sub	sp, #8
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b03      	cmp	r3, #3
 800b078:	d110      	bne.n	800b09c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00b      	beq.n	800b09c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b08a:	69db      	ldr	r3, [r3, #28]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d005      	beq.n	800b09c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b082      	sub	sp, #8
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	32ae      	adds	r2, #174	; 0xae
 800b0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d101      	bne.n	800b0c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e01c      	b.n	800b102 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d115      	bne.n	800b100 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	32ae      	adds	r2, #174	; 0xae
 800b0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e2:	6a1b      	ldr	r3, [r3, #32]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00b      	beq.n	800b100 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	32ae      	adds	r2, #174	; 0xae
 800b0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	78fa      	ldrb	r2, [r7, #3]
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	460b      	mov	r3, r1
 800b114:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	32ae      	adds	r2, #174	; 0xae
 800b120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d101      	bne.n	800b12c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b128:	2303      	movs	r3, #3
 800b12a:	e01c      	b.n	800b166 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b03      	cmp	r3, #3
 800b136:	d115      	bne.n	800b164 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	32ae      	adds	r2, #174	; 0xae
 800b142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00b      	beq.n	800b164 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	32ae      	adds	r2, #174	; 0xae
 800b156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	78fa      	ldrb	r2, [r7, #3]
 800b15e:	4611      	mov	r1, r2
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00e      	beq.n	800b1c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	6852      	ldr	r2, [r2, #4]
 800b1ae:	b2d2      	uxtb	r2, r2
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	4798      	blx	r3
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b1d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b1f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b086      	sub	sp, #24
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	460b      	mov	r3, r1
 800b208:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	885b      	ldrh	r3, [r3, #2]
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	b29b      	uxth	r3, r3
 800b222:	429a      	cmp	r2, r3
 800b224:	d920      	bls.n	800b268 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b22e:	e013      	b.n	800b258 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b230:	f107 030a 	add.w	r3, r7, #10
 800b234:	4619      	mov	r1, r3
 800b236:	6978      	ldr	r0, [r7, #20]
 800b238:	f000 f81b 	bl	800b272 <USBD_GetNextDesc>
 800b23c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	785b      	ldrb	r3, [r3, #1]
 800b242:	2b05      	cmp	r3, #5
 800b244:	d108      	bne.n	800b258 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	789b      	ldrb	r3, [r3, #2]
 800b24e:	78fa      	ldrb	r2, [r7, #3]
 800b250:	429a      	cmp	r2, r3
 800b252:	d008      	beq.n	800b266 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b254:	2300      	movs	r3, #0
 800b256:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	885b      	ldrh	r3, [r3, #2]
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	897b      	ldrh	r3, [r7, #10]
 800b260:	429a      	cmp	r2, r3
 800b262:	d8e5      	bhi.n	800b230 <USBD_GetEpDesc+0x32>
 800b264:	e000      	b.n	800b268 <USBD_GetEpDesc+0x6a>
          break;
 800b266:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b268:	693b      	ldr	r3, [r7, #16]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b272:	b480      	push	{r7}
 800b274:	b085      	sub	sp, #20
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	881a      	ldrh	r2, [r3, #0]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	4413      	add	r3, r2
 800b28c:	b29a      	uxth	r2, r3
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4413      	add	r3, r2
 800b29c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b29e:	68fb      	ldr	r3, [r7, #12]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b2ca:	8a3b      	ldrh	r3, [r7, #16]
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	b21a      	sxth	r2, r3
 800b2d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	b21b      	sxth	r3, r3
 800b2d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b2da:	89fb      	ldrh	r3, [r7, #14]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	371c      	adds	r7, #28
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2fe:	2b40      	cmp	r3, #64	; 0x40
 800b300:	d005      	beq.n	800b30e <USBD_StdDevReq+0x26>
 800b302:	2b40      	cmp	r3, #64	; 0x40
 800b304:	d857      	bhi.n	800b3b6 <USBD_StdDevReq+0xce>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00f      	beq.n	800b32a <USBD_StdDevReq+0x42>
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	d153      	bne.n	800b3b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	32ae      	adds	r2, #174	; 0xae
 800b318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	4798      	blx	r3
 800b324:	4603      	mov	r3, r0
 800b326:	73fb      	strb	r3, [r7, #15]
      break;
 800b328:	e04a      	b.n	800b3c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	785b      	ldrb	r3, [r3, #1]
 800b32e:	2b09      	cmp	r3, #9
 800b330:	d83b      	bhi.n	800b3aa <USBD_StdDevReq+0xc2>
 800b332:	a201      	add	r2, pc, #4	; (adr r2, 800b338 <USBD_StdDevReq+0x50>)
 800b334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b338:	0800b38d 	.word	0x0800b38d
 800b33c:	0800b3a1 	.word	0x0800b3a1
 800b340:	0800b3ab 	.word	0x0800b3ab
 800b344:	0800b397 	.word	0x0800b397
 800b348:	0800b3ab 	.word	0x0800b3ab
 800b34c:	0800b36b 	.word	0x0800b36b
 800b350:	0800b361 	.word	0x0800b361
 800b354:	0800b3ab 	.word	0x0800b3ab
 800b358:	0800b383 	.word	0x0800b383
 800b35c:	0800b375 	.word	0x0800b375
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fa3c 	bl	800b7e0 <USBD_GetDescriptor>
          break;
 800b368:	e024      	b.n	800b3b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fba1 	bl	800bab4 <USBD_SetAddress>
          break;
 800b372:	e01f      	b.n	800b3b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fbe0 	bl	800bb3c <USBD_SetConfig>
 800b37c:	4603      	mov	r3, r0
 800b37e:	73fb      	strb	r3, [r7, #15]
          break;
 800b380:	e018      	b.n	800b3b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fc83 	bl	800bc90 <USBD_GetConfig>
          break;
 800b38a:	e013      	b.n	800b3b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b38c:	6839      	ldr	r1, [r7, #0]
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fcb4 	bl	800bcfc <USBD_GetStatus>
          break;
 800b394:	e00e      	b.n	800b3b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fce3 	bl	800bd64 <USBD_SetFeature>
          break;
 800b39e:	e009      	b.n	800b3b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fd07 	bl	800bdb6 <USBD_ClrFeature>
          break;
 800b3a8:	e004      	b.n	800b3b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fd5e 	bl	800be6e <USBD_CtlError>
          break;
 800b3b2:	bf00      	nop
      }
      break;
 800b3b4:	e004      	b.n	800b3c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b3b6:	6839      	ldr	r1, [r7, #0]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fd58 	bl	800be6e <USBD_CtlError>
      break;
 800b3be:	bf00      	nop
  }

  return ret;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop

0800b3cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3e2:	2b40      	cmp	r3, #64	; 0x40
 800b3e4:	d005      	beq.n	800b3f2 <USBD_StdItfReq+0x26>
 800b3e6:	2b40      	cmp	r3, #64	; 0x40
 800b3e8:	d852      	bhi.n	800b490 <USBD_StdItfReq+0xc4>
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <USBD_StdItfReq+0x26>
 800b3ee:	2b20      	cmp	r3, #32
 800b3f0:	d14e      	bne.n	800b490 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d840      	bhi.n	800b482 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	889b      	ldrh	r3, [r3, #4]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b01      	cmp	r3, #1
 800b408:	d836      	bhi.n	800b478 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	889b      	ldrh	r3, [r3, #4]
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff fed9 	bl	800b1ca <USBD_CoreFindIF>
 800b418:	4603      	mov	r3, r0
 800b41a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b41c:	7bbb      	ldrb	r3, [r7, #14]
 800b41e:	2bff      	cmp	r3, #255	; 0xff
 800b420:	d01d      	beq.n	800b45e <USBD_StdItfReq+0x92>
 800b422:	7bbb      	ldrb	r3, [r7, #14]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11a      	bne.n	800b45e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b428:	7bba      	ldrb	r2, [r7, #14]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	32ae      	adds	r2, #174	; 0xae
 800b42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00f      	beq.n	800b458 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b438:	7bba      	ldrb	r2, [r7, #14]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b440:	7bba      	ldrb	r2, [r7, #14]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	32ae      	adds	r2, #174	; 0xae
 800b446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	4798      	blx	r3
 800b452:	4603      	mov	r3, r0
 800b454:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b456:	e004      	b.n	800b462 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b458:	2303      	movs	r3, #3
 800b45a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b45c:	e001      	b.n	800b462 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b45e:	2303      	movs	r3, #3
 800b460:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	88db      	ldrh	r3, [r3, #6]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d110      	bne.n	800b48c <USBD_StdItfReq+0xc0>
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10d      	bne.n	800b48c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fdc7 	bl	800c004 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b476:	e009      	b.n	800b48c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fcf7 	bl	800be6e <USBD_CtlError>
          break;
 800b480:	e004      	b.n	800b48c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fcf2 	bl	800be6e <USBD_CtlError>
          break;
 800b48a:	e000      	b.n	800b48e <USBD_StdItfReq+0xc2>
          break;
 800b48c:	bf00      	nop
      }
      break;
 800b48e:	e004      	b.n	800b49a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fceb 	bl	800be6e <USBD_CtlError>
      break;
 800b498:	bf00      	nop
  }

  return ret;
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	889b      	ldrh	r3, [r3, #4]
 800b4b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4c0:	2b40      	cmp	r3, #64	; 0x40
 800b4c2:	d007      	beq.n	800b4d4 <USBD_StdEPReq+0x30>
 800b4c4:	2b40      	cmp	r3, #64	; 0x40
 800b4c6:	f200 817f 	bhi.w	800b7c8 <USBD_StdEPReq+0x324>
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d02a      	beq.n	800b524 <USBD_StdEPReq+0x80>
 800b4ce:	2b20      	cmp	r3, #32
 800b4d0:	f040 817a 	bne.w	800b7c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b4d4:	7bbb      	ldrb	r3, [r7, #14]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7ff fe83 	bl	800b1e4 <USBD_CoreFindEP>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4e2:	7b7b      	ldrb	r3, [r7, #13]
 800b4e4:	2bff      	cmp	r3, #255	; 0xff
 800b4e6:	f000 8174 	beq.w	800b7d2 <USBD_StdEPReq+0x32e>
 800b4ea:	7b7b      	ldrb	r3, [r7, #13]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f040 8170 	bne.w	800b7d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b4f2:	7b7a      	ldrb	r2, [r7, #13]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b4fa:	7b7a      	ldrb	r2, [r7, #13]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	32ae      	adds	r2, #174	; 0xae
 800b500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 8163 	beq.w	800b7d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b50c:	7b7a      	ldrb	r2, [r7, #13]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	32ae      	adds	r2, #174	; 0xae
 800b512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	4798      	blx	r3
 800b51e:	4603      	mov	r3, r0
 800b520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b522:	e156      	b.n	800b7d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	785b      	ldrb	r3, [r3, #1]
 800b528:	2b03      	cmp	r3, #3
 800b52a:	d008      	beq.n	800b53e <USBD_StdEPReq+0x9a>
 800b52c:	2b03      	cmp	r3, #3
 800b52e:	f300 8145 	bgt.w	800b7bc <USBD_StdEPReq+0x318>
 800b532:	2b00      	cmp	r3, #0
 800b534:	f000 809b 	beq.w	800b66e <USBD_StdEPReq+0x1ca>
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d03c      	beq.n	800b5b6 <USBD_StdEPReq+0x112>
 800b53c:	e13e      	b.n	800b7bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b02      	cmp	r3, #2
 800b548:	d002      	beq.n	800b550 <USBD_StdEPReq+0xac>
 800b54a:	2b03      	cmp	r3, #3
 800b54c:	d016      	beq.n	800b57c <USBD_StdEPReq+0xd8>
 800b54e:	e02c      	b.n	800b5aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b550:	7bbb      	ldrb	r3, [r7, #14]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00d      	beq.n	800b572 <USBD_StdEPReq+0xce>
 800b556:	7bbb      	ldrb	r3, [r7, #14]
 800b558:	2b80      	cmp	r3, #128	; 0x80
 800b55a:	d00a      	beq.n	800b572 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f003 fe13 	bl	800f18c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b566:	2180      	movs	r1, #128	; 0x80
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f003 fe0f 	bl	800f18c <USBD_LL_StallEP>
 800b56e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b570:	e020      	b.n	800b5b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fc7a 	bl	800be6e <USBD_CtlError>
              break;
 800b57a:	e01b      	b.n	800b5b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	885b      	ldrh	r3, [r3, #2]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10e      	bne.n	800b5a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00b      	beq.n	800b5a2 <USBD_StdEPReq+0xfe>
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	2b80      	cmp	r3, #128	; 0x80
 800b58e:	d008      	beq.n	800b5a2 <USBD_StdEPReq+0xfe>
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	88db      	ldrh	r3, [r3, #6]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d104      	bne.n	800b5a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b598:	7bbb      	ldrb	r3, [r7, #14]
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f003 fdf5 	bl	800f18c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fd2e 	bl	800c004 <USBD_CtlSendStatus>

              break;
 800b5a8:	e004      	b.n	800b5b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fc5e 	bl	800be6e <USBD_CtlError>
              break;
 800b5b2:	bf00      	nop
          }
          break;
 800b5b4:	e107      	b.n	800b7c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d002      	beq.n	800b5c8 <USBD_StdEPReq+0x124>
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	d016      	beq.n	800b5f4 <USBD_StdEPReq+0x150>
 800b5c6:	e04b      	b.n	800b660 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00d      	beq.n	800b5ea <USBD_StdEPReq+0x146>
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	2b80      	cmp	r3, #128	; 0x80
 800b5d2:	d00a      	beq.n	800b5ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5d4:	7bbb      	ldrb	r3, [r7, #14]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f003 fdd7 	bl	800f18c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5de:	2180      	movs	r1, #128	; 0x80
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f003 fdd3 	bl	800f18c <USBD_LL_StallEP>
 800b5e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5e8:	e040      	b.n	800b66c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fc3e 	bl	800be6e <USBD_CtlError>
              break;
 800b5f2:	e03b      	b.n	800b66c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	885b      	ldrh	r3, [r3, #2]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d136      	bne.n	800b66a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b602:	2b00      	cmp	r3, #0
 800b604:	d004      	beq.n	800b610 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f003 fddd 	bl	800f1ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fcf7 	bl	800c004 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	4619      	mov	r1, r3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7ff fde2 	bl	800b1e4 <USBD_CoreFindEP>
 800b620:	4603      	mov	r3, r0
 800b622:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b624:	7b7b      	ldrb	r3, [r7, #13]
 800b626:	2bff      	cmp	r3, #255	; 0xff
 800b628:	d01f      	beq.n	800b66a <USBD_StdEPReq+0x1c6>
 800b62a:	7b7b      	ldrb	r3, [r7, #13]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d11c      	bne.n	800b66a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b630:	7b7a      	ldrb	r2, [r7, #13]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b638:	7b7a      	ldrb	r2, [r7, #13]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	32ae      	adds	r2, #174	; 0xae
 800b63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d010      	beq.n	800b66a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b648:	7b7a      	ldrb	r2, [r7, #13]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	32ae      	adds	r2, #174	; 0xae
 800b64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	6839      	ldr	r1, [r7, #0]
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	4798      	blx	r3
 800b65a:	4603      	mov	r3, r0
 800b65c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b65e:	e004      	b.n	800b66a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fc03 	bl	800be6e <USBD_CtlError>
              break;
 800b668:	e000      	b.n	800b66c <USBD_StdEPReq+0x1c8>
              break;
 800b66a:	bf00      	nop
          }
          break;
 800b66c:	e0ab      	b.n	800b7c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2b02      	cmp	r3, #2
 800b678:	d002      	beq.n	800b680 <USBD_StdEPReq+0x1dc>
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	d032      	beq.n	800b6e4 <USBD_StdEPReq+0x240>
 800b67e:	e097      	b.n	800b7b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b680:	7bbb      	ldrb	r3, [r7, #14]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d007      	beq.n	800b696 <USBD_StdEPReq+0x1f2>
 800b686:	7bbb      	ldrb	r3, [r7, #14]
 800b688:	2b80      	cmp	r3, #128	; 0x80
 800b68a:	d004      	beq.n	800b696 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fbed 	bl	800be6e <USBD_CtlError>
                break;
 800b694:	e091      	b.n	800b7ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	da0b      	bge.n	800b6b6 <USBD_StdEPReq+0x212>
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
 800b6a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	3310      	adds	r3, #16
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	e00b      	b.n	800b6ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
 800b6b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6bc:	4613      	mov	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	2202      	movs	r2, #2
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fc37 	bl	800bf50 <USBD_CtlSendData>
              break;
 800b6e2:	e06a      	b.n	800b7ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	da11      	bge.n	800b710 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	f003 020f 	and.w	r2, r3, #15
 800b6f2:	6879      	ldr	r1, [r7, #4]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	4413      	add	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	440b      	add	r3, r1
 800b6fe:	3324      	adds	r3, #36	; 0x24
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d117      	bne.n	800b736 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fbb0 	bl	800be6e <USBD_CtlError>
                  break;
 800b70e:	e054      	b.n	800b7ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	f003 020f 	and.w	r2, r3, #15
 800b716:	6879      	ldr	r1, [r7, #4]
 800b718:	4613      	mov	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4413      	add	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	440b      	add	r3, r1
 800b722:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d104      	bne.n	800b736 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fb9d 	bl	800be6e <USBD_CtlError>
                  break;
 800b734:	e041      	b.n	800b7ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	da0b      	bge.n	800b756 <USBD_StdEPReq+0x2b2>
 800b73e:	7bbb      	ldrb	r3, [r7, #14]
 800b740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	3310      	adds	r3, #16
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	4413      	add	r3, r2
 800b752:	3304      	adds	r3, #4
 800b754:	e00b      	b.n	800b76e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b756:	7bbb      	ldrb	r3, [r7, #14]
 800b758:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b75c:	4613      	mov	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	4413      	add	r3, r2
 800b76c:	3304      	adds	r3, #4
 800b76e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d002      	beq.n	800b77c <USBD_StdEPReq+0x2d8>
 800b776:	7bbb      	ldrb	r3, [r7, #14]
 800b778:	2b80      	cmp	r3, #128	; 0x80
 800b77a:	d103      	bne.n	800b784 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2200      	movs	r2, #0
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	e00e      	b.n	800b7a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b784:	7bbb      	ldrb	r3, [r7, #14]
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f003 fd3d 	bl	800f208 <USBD_LL_IsStallEP>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d003      	beq.n	800b79c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2201      	movs	r2, #1
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	e002      	b.n	800b7a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fbd1 	bl	800bf50 <USBD_CtlSendData>
              break;
 800b7ae:	e004      	b.n	800b7ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fb5b 	bl	800be6e <USBD_CtlError>
              break;
 800b7b8:	bf00      	nop
          }
          break;
 800b7ba:	e004      	b.n	800b7c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fb55 	bl	800be6e <USBD_CtlError>
          break;
 800b7c4:	bf00      	nop
      }
      break;
 800b7c6:	e005      	b.n	800b7d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fb4f 	bl	800be6e <USBD_CtlError>
      break;
 800b7d0:	e000      	b.n	800b7d4 <USBD_StdEPReq+0x330>
      break;
 800b7d2:	bf00      	nop
  }

  return ret;
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	885b      	ldrh	r3, [r3, #2]
 800b7fa:	0a1b      	lsrs	r3, r3, #8
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	3b01      	subs	r3, #1
 800b800:	2b06      	cmp	r3, #6
 800b802:	f200 8128 	bhi.w	800ba56 <USBD_GetDescriptor+0x276>
 800b806:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <USBD_GetDescriptor+0x2c>)
 800b808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80c:	0800b829 	.word	0x0800b829
 800b810:	0800b841 	.word	0x0800b841
 800b814:	0800b881 	.word	0x0800b881
 800b818:	0800ba57 	.word	0x0800ba57
 800b81c:	0800ba57 	.word	0x0800ba57
 800b820:	0800b9f7 	.word	0x0800b9f7
 800b824:	0800ba23 	.word	0x0800ba23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	7c12      	ldrb	r2, [r2, #16]
 800b834:	f107 0108 	add.w	r1, r7, #8
 800b838:	4610      	mov	r0, r2
 800b83a:	4798      	blx	r3
 800b83c:	60f8      	str	r0, [r7, #12]
      break;
 800b83e:	e112      	b.n	800ba66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	7c1b      	ldrb	r3, [r3, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10d      	bne.n	800b864 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b850:	f107 0208 	add.w	r2, r7, #8
 800b854:	4610      	mov	r0, r2
 800b856:	4798      	blx	r3
 800b858:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	2202      	movs	r2, #2
 800b860:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b862:	e100      	b.n	800ba66 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	f107 0208 	add.w	r2, r7, #8
 800b870:	4610      	mov	r0, r2
 800b872:	4798      	blx	r3
 800b874:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	3301      	adds	r3, #1
 800b87a:	2202      	movs	r2, #2
 800b87c:	701a      	strb	r2, [r3, #0]
      break;
 800b87e:	e0f2      	b.n	800ba66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	885b      	ldrh	r3, [r3, #2]
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b05      	cmp	r3, #5
 800b888:	f200 80ac 	bhi.w	800b9e4 <USBD_GetDescriptor+0x204>
 800b88c:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <USBD_GetDescriptor+0xb4>)
 800b88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b892:	bf00      	nop
 800b894:	0800b8ad 	.word	0x0800b8ad
 800b898:	0800b8e1 	.word	0x0800b8e1
 800b89c:	0800b915 	.word	0x0800b915
 800b8a0:	0800b949 	.word	0x0800b949
 800b8a4:	0800b97d 	.word	0x0800b97d
 800b8a8:	0800b9b1 	.word	0x0800b9b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00b      	beq.n	800b8d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	7c12      	ldrb	r2, [r2, #16]
 800b8c4:	f107 0108 	add.w	r1, r7, #8
 800b8c8:	4610      	mov	r0, r2
 800b8ca:	4798      	blx	r3
 800b8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8ce:	e091      	b.n	800b9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 facb 	bl	800be6e <USBD_CtlError>
            err++;
 800b8d8:	7afb      	ldrb	r3, [r7, #11]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b8de:	e089      	b.n	800b9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00b      	beq.n	800b904 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	7c12      	ldrb	r2, [r2, #16]
 800b8f8:	f107 0108 	add.w	r1, r7, #8
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	4798      	blx	r3
 800b900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b902:	e077      	b.n	800b9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fab1 	bl	800be6e <USBD_CtlError>
            err++;
 800b90c:	7afb      	ldrb	r3, [r7, #11]
 800b90e:	3301      	adds	r3, #1
 800b910:	72fb      	strb	r3, [r7, #11]
          break;
 800b912:	e06f      	b.n	800b9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00b      	beq.n	800b938 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	7c12      	ldrb	r2, [r2, #16]
 800b92c:	f107 0108 	add.w	r1, r7, #8
 800b930:	4610      	mov	r0, r2
 800b932:	4798      	blx	r3
 800b934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b936:	e05d      	b.n	800b9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fa97 	bl	800be6e <USBD_CtlError>
            err++;
 800b940:	7afb      	ldrb	r3, [r7, #11]
 800b942:	3301      	adds	r3, #1
 800b944:	72fb      	strb	r3, [r7, #11]
          break;
 800b946:	e055      	b.n	800b9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00b      	beq.n	800b96c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	7c12      	ldrb	r2, [r2, #16]
 800b960:	f107 0108 	add.w	r1, r7, #8
 800b964:	4610      	mov	r0, r2
 800b966:	4798      	blx	r3
 800b968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b96a:	e043      	b.n	800b9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fa7d 	bl	800be6e <USBD_CtlError>
            err++;
 800b974:	7afb      	ldrb	r3, [r7, #11]
 800b976:	3301      	adds	r3, #1
 800b978:	72fb      	strb	r3, [r7, #11]
          break;
 800b97a:	e03b      	b.n	800b9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00b      	beq.n	800b9a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	7c12      	ldrb	r2, [r2, #16]
 800b994:	f107 0108 	add.w	r1, r7, #8
 800b998:	4610      	mov	r0, r2
 800b99a:	4798      	blx	r3
 800b99c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b99e:	e029      	b.n	800b9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fa63 	bl	800be6e <USBD_CtlError>
            err++;
 800b9a8:	7afb      	ldrb	r3, [r7, #11]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b9ae:	e021      	b.n	800b9f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00b      	beq.n	800b9d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	7c12      	ldrb	r2, [r2, #16]
 800b9c8:	f107 0108 	add.w	r1, r7, #8
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	4798      	blx	r3
 800b9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9d2:	e00f      	b.n	800b9f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fa49 	bl	800be6e <USBD_CtlError>
            err++;
 800b9dc:	7afb      	ldrb	r3, [r7, #11]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b9e2:	e007      	b.n	800b9f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fa41 	bl	800be6e <USBD_CtlError>
          err++;
 800b9ec:	7afb      	ldrb	r3, [r7, #11]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b9f2:	bf00      	nop
      }
      break;
 800b9f4:	e037      	b.n	800ba66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	7c1b      	ldrb	r3, [r3, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d109      	bne.n	800ba12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba06:	f107 0208 	add.w	r2, r7, #8
 800ba0a:	4610      	mov	r0, r2
 800ba0c:	4798      	blx	r3
 800ba0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba10:	e029      	b.n	800ba66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba12:	6839      	ldr	r1, [r7, #0]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 fa2a 	bl	800be6e <USBD_CtlError>
        err++;
 800ba1a:	7afb      	ldrb	r3, [r7, #11]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	72fb      	strb	r3, [r7, #11]
      break;
 800ba20:	e021      	b.n	800ba66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	7c1b      	ldrb	r3, [r3, #16]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10d      	bne.n	800ba46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba32:	f107 0208 	add.w	r2, r7, #8
 800ba36:	4610      	mov	r0, r2
 800ba38:	4798      	blx	r3
 800ba3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	2207      	movs	r2, #7
 800ba42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba44:	e00f      	b.n	800ba66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba46:	6839      	ldr	r1, [r7, #0]
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fa10 	bl	800be6e <USBD_CtlError>
        err++;
 800ba4e:	7afb      	ldrb	r3, [r7, #11]
 800ba50:	3301      	adds	r3, #1
 800ba52:	72fb      	strb	r3, [r7, #11]
      break;
 800ba54:	e007      	b.n	800ba66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ba56:	6839      	ldr	r1, [r7, #0]
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 fa08 	bl	800be6e <USBD_CtlError>
      err++;
 800ba5e:	7afb      	ldrb	r3, [r7, #11]
 800ba60:	3301      	adds	r3, #1
 800ba62:	72fb      	strb	r3, [r7, #11]
      break;
 800ba64:	bf00      	nop
  }

  if (err != 0U)
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d11e      	bne.n	800baaa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	88db      	ldrh	r3, [r3, #6]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d016      	beq.n	800baa2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ba74:	893b      	ldrh	r3, [r7, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00e      	beq.n	800ba98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	88da      	ldrh	r2, [r3, #6]
 800ba7e:	893b      	ldrh	r3, [r7, #8]
 800ba80:	4293      	cmp	r3, r2
 800ba82:	bf28      	it	cs
 800ba84:	4613      	movcs	r3, r2
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba8a:	893b      	ldrh	r3, [r7, #8]
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	68f9      	ldr	r1, [r7, #12]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fa5d 	bl	800bf50 <USBD_CtlSendData>
 800ba96:	e009      	b.n	800baac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f9e7 	bl	800be6e <USBD_CtlError>
 800baa0:	e004      	b.n	800baac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 faae 	bl	800c004 <USBD_CtlSendStatus>
 800baa8:	e000      	b.n	800baac <USBD_GetDescriptor+0x2cc>
    return;
 800baaa:	bf00      	nop
  }
}
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop

0800bab4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	889b      	ldrh	r3, [r3, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d131      	bne.n	800bb2a <USBD_SetAddress+0x76>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	88db      	ldrh	r3, [r3, #6]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d12d      	bne.n	800bb2a <USBD_SetAddress+0x76>
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	885b      	ldrh	r3, [r3, #2]
 800bad2:	2b7f      	cmp	r3, #127	; 0x7f
 800bad4:	d829      	bhi.n	800bb2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	885b      	ldrh	r3, [r3, #2]
 800bada:	b2db      	uxtb	r3, r3
 800badc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b03      	cmp	r3, #3
 800baec:	d104      	bne.n	800baf8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800baee:	6839      	ldr	r1, [r7, #0]
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 f9bc 	bl	800be6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf6:	e01d      	b.n	800bb34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	7bfa      	ldrb	r2, [r7, #15]
 800bafc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
 800bb02:	4619      	mov	r1, r3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f003 fbab 	bl	800f260 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fa7a 	bl	800c004 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d004      	beq.n	800bb20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2202      	movs	r2, #2
 800bb1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb1e:	e009      	b.n	800bb34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb28:	e004      	b.n	800bb34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f99e 	bl	800be6e <USBD_CtlError>
  }
}
 800bb32:	bf00      	nop
 800bb34:	bf00      	nop
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	885b      	ldrh	r3, [r3, #2]
 800bb4e:	b2da      	uxtb	r2, r3
 800bb50:	4b4e      	ldr	r3, [pc, #312]	; (800bc8c <USBD_SetConfig+0x150>)
 800bb52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb54:	4b4d      	ldr	r3, [pc, #308]	; (800bc8c <USBD_SetConfig+0x150>)
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d905      	bls.n	800bb68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f985 	bl	800be6e <USBD_CtlError>
    return USBD_FAIL;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e08c      	b.n	800bc82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d002      	beq.n	800bb7a <USBD_SetConfig+0x3e>
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	d029      	beq.n	800bbcc <USBD_SetConfig+0x90>
 800bb78:	e075      	b.n	800bc66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb7a:	4b44      	ldr	r3, [pc, #272]	; (800bc8c <USBD_SetConfig+0x150>)
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d020      	beq.n	800bbc4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bb82:	4b42      	ldr	r3, [pc, #264]	; (800bc8c <USBD_SetConfig+0x150>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb8c:	4b3f      	ldr	r3, [pc, #252]	; (800bc8c <USBD_SetConfig+0x150>)
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	4619      	mov	r1, r3
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7fe ffe7 	bl	800ab66 <USBD_SetClassConfig>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d008      	beq.n	800bbb4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f962 	bl	800be6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2202      	movs	r2, #2
 800bbae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbb2:	e065      	b.n	800bc80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fa25 	bl	800c004 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2203      	movs	r2, #3
 800bbbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbc2:	e05d      	b.n	800bc80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fa1d 	bl	800c004 <USBD_CtlSendStatus>
      break;
 800bbca:	e059      	b.n	800bc80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bbcc:	4b2f      	ldr	r3, [pc, #188]	; (800bc8c <USBD_SetConfig+0x150>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d112      	bne.n	800bbfa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bbdc:	4b2b      	ldr	r3, [pc, #172]	; (800bc8c <USBD_SetConfig+0x150>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbe6:	4b29      	ldr	r3, [pc, #164]	; (800bc8c <USBD_SetConfig+0x150>)
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	4619      	mov	r1, r3
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7fe ffd6 	bl	800ab9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fa06 	bl	800c004 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbf8:	e042      	b.n	800bc80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bbfa:	4b24      	ldr	r3, [pc, #144]	; (800bc8c <USBD_SetConfig+0x150>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d02a      	beq.n	800bc5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7fe ffc4 	bl	800ab9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc16:	4b1d      	ldr	r3, [pc, #116]	; (800bc8c <USBD_SetConfig+0x150>)
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc20:	4b1a      	ldr	r3, [pc, #104]	; (800bc8c <USBD_SetConfig+0x150>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7fe ff9d 	bl	800ab66 <USBD_SetClassConfig>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00f      	beq.n	800bc56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f918 	bl	800be6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7fe ffa9 	bl	800ab9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bc54:	e014      	b.n	800bc80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f9d4 	bl	800c004 <USBD_CtlSendStatus>
      break;
 800bc5c:	e010      	b.n	800bc80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 f9d0 	bl	800c004 <USBD_CtlSendStatus>
      break;
 800bc64:	e00c      	b.n	800bc80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f900 	bl	800be6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc6e:	4b07      	ldr	r3, [pc, #28]	; (800bc8c <USBD_SetConfig+0x150>)
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7fe ff92 	bl	800ab9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc7e:	bf00      	nop
  }

  return ret;
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	20000bec 	.word	0x20000bec

0800bc90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	88db      	ldrh	r3, [r3, #6]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d004      	beq.n	800bcac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bca2:	6839      	ldr	r1, [r7, #0]
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 f8e2 	bl	800be6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcaa:	e023      	b.n	800bcf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	dc02      	bgt.n	800bcbe <USBD_GetConfig+0x2e>
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	dc03      	bgt.n	800bcc4 <USBD_GetConfig+0x34>
 800bcbc:	e015      	b.n	800bcea <USBD_GetConfig+0x5a>
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d00b      	beq.n	800bcda <USBD_GetConfig+0x4a>
 800bcc2:	e012      	b.n	800bcea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	3308      	adds	r3, #8
 800bcce:	2201      	movs	r2, #1
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 f93c 	bl	800bf50 <USBD_CtlSendData>
        break;
 800bcd8:	e00c      	b.n	800bcf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	3304      	adds	r3, #4
 800bcde:	2201      	movs	r2, #1
 800bce0:	4619      	mov	r1, r3
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f934 	bl	800bf50 <USBD_CtlSendData>
        break;
 800bce8:	e004      	b.n	800bcf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bcea:	6839      	ldr	r1, [r7, #0]
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f8be 	bl	800be6e <USBD_CtlError>
        break;
 800bcf2:	bf00      	nop
}
 800bcf4:	bf00      	nop
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d81e      	bhi.n	800bd52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	88db      	ldrh	r3, [r3, #6]
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d004      	beq.n	800bd26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd1c:	6839      	ldr	r1, [r7, #0]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f8a5 	bl	800be6e <USBD_CtlError>
        break;
 800bd24:	e01a      	b.n	800bd5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d005      	beq.n	800bd42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	f043 0202 	orr.w	r2, r3, #2
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	330c      	adds	r3, #12
 800bd46:	2202      	movs	r2, #2
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f900 	bl	800bf50 <USBD_CtlSendData>
      break;
 800bd50:	e004      	b.n	800bd5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f88a 	bl	800be6e <USBD_CtlError>
      break;
 800bd5a:	bf00      	nop
  }
}
 800bd5c:	bf00      	nop
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	885b      	ldrh	r3, [r3, #2]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d107      	bne.n	800bd86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 f940 	bl	800c004 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bd84:	e013      	b.n	800bdae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	885b      	ldrh	r3, [r3, #2]
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d10b      	bne.n	800bda6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	889b      	ldrh	r3, [r3, #4]
 800bd92:	0a1b      	lsrs	r3, r3, #8
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f930 	bl	800c004 <USBD_CtlSendStatus>
}
 800bda4:	e003      	b.n	800bdae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 f860 	bl	800be6e <USBD_CtlError>
}
 800bdae:	bf00      	nop
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b082      	sub	sp, #8
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d80b      	bhi.n	800bde6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	885b      	ldrh	r3, [r3, #2]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d10c      	bne.n	800bdf0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f910 	bl	800c004 <USBD_CtlSendStatus>
      }
      break;
 800bde4:	e004      	b.n	800bdf0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f840 	bl	800be6e <USBD_CtlError>
      break;
 800bdee:	e000      	b.n	800bdf2 <USBD_ClrFeature+0x3c>
      break;
 800bdf0:	bf00      	nop
  }
}
 800bdf2:	bf00      	nop
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b084      	sub	sp, #16
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	781a      	ldrb	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3301      	adds	r3, #1
 800be14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	781a      	ldrb	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3301      	adds	r3, #1
 800be22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f7ff fa41 	bl	800b2ac <SWAPBYTE>
 800be2a:	4603      	mov	r3, r0
 800be2c:	461a      	mov	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3301      	adds	r3, #1
 800be36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	3301      	adds	r3, #1
 800be3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7ff fa34 	bl	800b2ac <SWAPBYTE>
 800be44:	4603      	mov	r3, r0
 800be46:	461a      	mov	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3301      	adds	r3, #1
 800be50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3301      	adds	r3, #1
 800be56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f7ff fa27 	bl	800b2ac <SWAPBYTE>
 800be5e:	4603      	mov	r3, r0
 800be60:	461a      	mov	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	80da      	strh	r2, [r3, #6]
}
 800be66:	bf00      	nop
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b082      	sub	sp, #8
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be78:	2180      	movs	r1, #128	; 0x80
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f003 f986 	bl	800f18c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be80:	2100      	movs	r1, #0
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f003 f982 	bl	800f18c <USBD_LL_StallEP>
}
 800be88:	bf00      	nop
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be9c:	2300      	movs	r3, #0
 800be9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d036      	beq.n	800bf14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800beaa:	6938      	ldr	r0, [r7, #16]
 800beac:	f000 f836 	bl	800bf1c <USBD_GetLen>
 800beb0:	4603      	mov	r3, r0
 800beb2:	3301      	adds	r3, #1
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	b29a      	uxth	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bebe:	7dfb      	ldrb	r3, [r7, #23]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	4413      	add	r3, r2
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	7812      	ldrb	r2, [r2, #0]
 800bec8:	701a      	strb	r2, [r3, #0]
  idx++;
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	3301      	adds	r3, #1
 800bece:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	4413      	add	r3, r2
 800bed6:	2203      	movs	r2, #3
 800bed8:	701a      	strb	r2, [r3, #0]
  idx++;
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	3301      	adds	r3, #1
 800bede:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bee0:	e013      	b.n	800bf0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bee2:	7dfb      	ldrb	r3, [r7, #23]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	4413      	add	r3, r2
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	7812      	ldrb	r2, [r2, #0]
 800beec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	3301      	adds	r3, #1
 800bef2:	613b      	str	r3, [r7, #16]
    idx++;
 800bef4:	7dfb      	ldrb	r3, [r7, #23]
 800bef6:	3301      	adds	r3, #1
 800bef8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800befa:	7dfb      	ldrb	r3, [r7, #23]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	4413      	add	r3, r2
 800bf00:	2200      	movs	r2, #0
 800bf02:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf04:	7dfb      	ldrb	r3, [r7, #23]
 800bf06:	3301      	adds	r3, #1
 800bf08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1e7      	bne.n	800bee2 <USBD_GetString+0x52>
 800bf12:	e000      	b.n	800bf16 <USBD_GetString+0x86>
    return;
 800bf14:	bf00      	nop
  }
}
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf24:	2300      	movs	r3, #0
 800bf26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf2c:	e005      	b.n	800bf3a <USBD_GetLen+0x1e>
  {
    len++;
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	3301      	adds	r3, #1
 800bf32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	3301      	adds	r3, #1
 800bf38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1f5      	bne.n	800bf2e <USBD_GetLen+0x12>
  }

  return len;
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	2100      	movs	r1, #0
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f003 f991 	bl	800f29e <USBD_LL_Transmit>

  return USBD_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	60f8      	str	r0, [r7, #12]
 800bf8e:	60b9      	str	r1, [r7, #8]
 800bf90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	2100      	movs	r1, #0
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f003 f980 	bl	800f29e <USBD_LL_Transmit>

  return USBD_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f003 f984 	bl	800f2e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	60f8      	str	r0, [r7, #12]
 800bfea:	60b9      	str	r1, [r7, #8]
 800bfec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	2100      	movs	r1, #0
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f003 f973 	bl	800f2e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2204      	movs	r2, #4
 800c010:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c014:	2300      	movs	r3, #0
 800c016:	2200      	movs	r2, #0
 800c018:	2100      	movs	r1, #0
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f003 f93f 	bl	800f29e <USBD_LL_Transmit>

  return USBD_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3708      	adds	r7, #8
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b082      	sub	sp, #8
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2205      	movs	r2, #5
 800c036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c03a:	2300      	movs	r3, #0
 800c03c:	2200      	movs	r2, #0
 800c03e:	2100      	movs	r1, #0
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f003 f94d 	bl	800f2e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <makeFreeRtosPriority>:
#endif

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority(osPriority priority) {
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	4603      	mov	r3, r0
 800c058:	80fb      	strh	r3, [r7, #6]
    unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60fb      	str	r3, [r7, #12]

    if (priority != osPriorityError) {
 800c05e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c062:	2b84      	cmp	r3, #132	; 0x84
 800c064:	d005      	beq.n	800c072 <makeFreeRtosPriority+0x22>
        fpriority += (priority - osPriorityIdle);
 800c066:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	4413      	add	r3, r2
 800c06e:	3303      	adds	r3, #3
 800c070:	60fb      	str	r3, [r7, #12]
    }

    return fpriority;
 800c072:	68fb      	ldr	r3, [r7, #12]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <osKernelStart>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval status code that indicates the execution status of the function
 * @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
 */
osStatus osKernelStart(void) {
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
    vTaskStartScheduler();
 800c084:	f001 f8ea 	bl	800d25c <vTaskStartScheduler>

    return osOK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <osThreadCreate>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval thread ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
 */
osThreadId osThreadCreate(const osThreadDef_t * thread_def, void * argument) {
 800c08e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c090:	b089      	sub	sp, #36	; 0x24
 800c092:	af04      	add	r7, sp, #16
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	6039      	str	r1, [r7, #0]
    TaskHandle_t handle;

#if (configSUPPORT_STATIC_ALLOCATION == 1) && (configSUPPORT_DYNAMIC_ALLOCATION == 1)
    if ((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	695b      	ldr	r3, [r3, #20]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d020      	beq.n	800c0e2 <osThreadCreate+0x54>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d01c      	beq.n	800c0e2 <osThreadCreate+0x54>
        handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), thread_def->buffer, thread_def->controlblock);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	685c      	ldr	r4, [r3, #4]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681d      	ldr	r5, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	691e      	ldr	r6, [r3, #16]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7ff ffc8 	bl	800c050 <makeFreeRtosPriority>
 800c0c0:	4601      	mov	r1, r0
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	6992      	ldr	r2, [r2, #24]
 800c0ca:	9202      	str	r2, [sp, #8]
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	9100      	str	r1, [sp, #0]
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	4632      	mov	r2, r6
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f000 fdd6 	bl	800cc88 <xTaskCreateStatic>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	e01c      	b.n	800c11c <osThreadCreate+0x8e>
    } else {
        if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	685c      	ldr	r4, [r3, #4]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681d      	ldr	r5, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	b29e      	uxth	r6, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7ff ffaa 	bl	800c050 <makeFreeRtosPriority>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	f107 030c 	add.w	r3, r7, #12
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	9200      	str	r2, [sp, #0]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	4632      	mov	r2, r6
 800c10a:	4629      	mov	r1, r5
 800c10c:	4620      	mov	r0, r4
 800c10e:	f000 fe18 	bl	800cd42 <xTaskCreate>
 800c112:	4603      	mov	r3, r0
 800c114:	2b01      	cmp	r3, #1
 800c116:	d001      	beq.n	800c11c <osThreadCreate+0x8e>
            return NULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	e000      	b.n	800c11e <osThreadCreate+0x90>
    if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
        return NULL;
    }
#endif

    return handle;
 800c11c:	68fb      	ldr	r3, [r7, #12]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c126 <osDelay>:
/**
 * @brief   Wait for Timeout (Time Delay)
 * @param   millisec      time delay value
 * @retval  status code that indicates the execution status of the function.
 */
osStatus osDelay(uint32_t millisec) {
 800c126:	b580      	push	{r7, lr}
 800c128:	b084      	sub	sp, #16
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
    TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	60fb      	str	r3, [r7, #12]

    vTaskDelay(ticks ? ticks : 1); /* Minimum delay = 1 tick */
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d001      	beq.n	800c13c <osDelay+0x16>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	e000      	b.n	800c13e <osDelay+0x18>
 800c13c:	2301      	movs	r3, #1
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 ffc6 	bl	800d0d0 <vTaskDelay>

    return osOK;
 800c144:	2300      	movs	r3, #0
#else
    (void)millisec;

    return osErrorResource;
#endif
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <vListInitialise>:

/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t * const pxList) {
 800c14e:	b480      	push	{r7}
 800c150:	b083      	sub	sp, #12
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f103 0208 	add.w	r2, r3, #8
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c166:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd);     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f103 0208 	add.w	r2, r3, #8
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f103 0208 	add.w	r2, r3, #8
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = (UBaseType_t)0U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
    listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
 800c182:	bf00      	nop
 800c184:	370c      	adds	r7, #12
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t * const pxItem) {
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	689a      	ldr	r2, [r3, #8]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	1c5a      	adds	r2, r3, #1
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	601a      	str	r2, [r3, #0]
}
 800c1e4:	bf00      	nop
 800c1e6:	3714      	adds	r7, #20
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	60bb      	str	r3, [r7, #8]
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if (xValueOfInsertion == portMAX_DELAY) {
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c206:	d103      	bne.n	800c210 <vListInsert+0x20>
        pxIterator = pxList->xListEnd.pxPrevious;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	60fb      	str	r3, [r7, #12]
 800c20e:	e00c      	b.n	800c22a <vListInsert+0x3a>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3308      	adds	r3, #8
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	e002      	b.n	800c21e <vListInsert+0x2e>
             pxIterator = pxIterator->pxNext) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */ /*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	60fb      	str	r3, [r7, #12]
        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	429a      	cmp	r2, r3
 800c228:	d2f6      	bcs.n	800c218 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	601a      	str	r2, [r3, #0]
}
 800c256:	bf00      	nop
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t * const pxItemToRemove) {
 800c262:	b480      	push	{r7}
 800c264:	b085      	sub	sp, #20
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
    item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6892      	ldr	r2, [r2, #8]
 800c278:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	6852      	ldr	r2, [r2, #4]
 800c282:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if (pxList->pxIndex == pxItemToRemove) {
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d103      	bne.n	800c296 <uxListRemove+0x34>
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	689a      	ldr	r2, [r3, #8]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	605a      	str	r2, [r3, #4]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	611a      	str	r2, [r3, #16]
    (pxList->uxNumberOfItems)--;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	1e5a      	subs	r2, r3, #1
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3714      	adds	r7, #20
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
	...

0800c2b8 <xQueueGenericReset>:
        }                                                                                                                                                                                                                                                \
    }                                                                                                                                                                                                                                                    \
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	60fb      	str	r3, [r7, #12]

    configASSERT(pxQueue);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10a      	bne.n	800c2e2 <xQueueGenericReset+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800c2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	60bb      	str	r3, [r7, #8]
}
 800c2de:	bf00      	nop
 800c2e0:	e7fe      	b.n	800c2e0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800c2e2:	f002 fa1f 	bl	800e724 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ee:	68f9      	ldr	r1, [r7, #12]
 800c2f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c2f2:	fb01 f303 	mul.w	r3, r1, r3
 800c2f6:	441a      	add	r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ((pxQueue->uxLength - 1U) * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c312:	3b01      	subs	r3, #1
 800c314:	68f9      	ldr	r1, [r7, #12]
 800c316:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c318:	fb01 f303 	mul.w	r3, r1, r3
 800c31c:	441a      	add	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	22ff      	movs	r2, #255	; 0xff
 800c326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	22ff      	movs	r2, #255	; 0xff
 800c32e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if (xNewQueue == pdFALSE) {
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d114      	bne.n	800c362 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
            the tasks will remain blocked as after this function exits the queue
            will still be empty.  If there are tasks blocked waiting to write to
            the queue, then one should be unblocked as after this function exits
            it will be possible to write to it. */
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d01a      	beq.n	800c376 <xQueueGenericReset+0xbe>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3310      	adds	r3, #16
 800c344:	4618      	mov	r0, r3
 800c346:	f001 fa0d 	bl	800d764 <xTaskRemoveFromEventList>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d012      	beq.n	800c376 <xQueueGenericReset+0xbe>
                    queueYIELD_IF_USING_PREEMPTION();
 800c350:	4b0c      	ldr	r3, [pc, #48]	; (800c384 <xQueueGenericReset+0xcc>)
 800c352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c356:	601a      	str	r2, [r3, #0]
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	e009      	b.n	800c376 <xQueueGenericReset+0xbe>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        } else {
            /* Ensure the event queues start in the correct state. */
            vListInitialise(&(pxQueue->xTasksWaitingToSend));
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3310      	adds	r3, #16
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fef1 	bl	800c14e <vListInitialise>
            vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3324      	adds	r3, #36	; 0x24
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff feec 	bl	800c14e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800c376:	f002 fa05 	bl	800e784 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
    versions. */
    return pdPASS;
 800c37a:	2301      	movs	r3, #1
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	e000ed04 	.word	0xe000ed04

0800c388 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

QueueHandle_t xQueueGenericCreateStatic(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, StaticQueue_t * pxStaticQueue, const uint8_t ucQueueType) {
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08e      	sub	sp, #56	; 0x38
 800c38c:	af02      	add	r7, sp, #8
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
    Queue_t * pxNewQueue;

    configASSERT(uxQueueLength > (UBaseType_t)0);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <xQueueGenericCreateStatic+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <xQueueGenericCreateStatic+0x28>

    /* The StaticQueue_t structure and the queue storage area must be
    supplied. */
    configASSERT(pxStaticQueue != NULL);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10a      	bne.n	800c3ce <xQueueGenericCreateStatic+0x46>
    __asm volatile("	mov %0, %1												\n"
 800c3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3bc:	f383 8811 	msr	BASEPRI, r3
 800c3c0:	f3bf 8f6f 	isb	sy
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3ca:	bf00      	nop
 800c3cc:	e7fe      	b.n	800c3cc <xQueueGenericCreateStatic+0x44>

    /* A queue storage area should be provided if the item size is not 0, and
    should not be provided if the item size is 0. */
    configASSERT(!((pucQueueStorage != NULL) && (uxItemSize == 0)));
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <xQueueGenericCreateStatic+0x52>
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <xQueueGenericCreateStatic+0x56>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e000      	b.n	800c3e0 <xQueueGenericCreateStatic+0x58>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10a      	bne.n	800c3fa <xQueueGenericCreateStatic+0x72>
    __asm volatile("	mov %0, %1												\n"
 800c3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	623b      	str	r3, [r7, #32]
}
 800c3f6:	bf00      	nop
 800c3f8:	e7fe      	b.n	800c3f8 <xQueueGenericCreateStatic+0x70>
    configASSERT(!((pucQueueStorage == NULL) && (uxItemSize != 0)));
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <xQueueGenericCreateStatic+0x7e>
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <xQueueGenericCreateStatic+0x82>
 800c406:	2301      	movs	r3, #1
 800c408:	e000      	b.n	800c40c <xQueueGenericCreateStatic+0x84>
 800c40a:	2300      	movs	r3, #0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10a      	bne.n	800c426 <xQueueGenericCreateStatic+0x9e>
    __asm volatile("	mov %0, %1												\n"
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	61fb      	str	r3, [r7, #28]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <xQueueGenericCreateStatic+0x9c>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticQueue_t or StaticSemaphore_t equals the size of
        the real queue and semaphore structures. */
        volatile size_t xSize = sizeof(StaticQueue_t);
 800c426:	2348      	movs	r3, #72	; 0x48
 800c428:	617b      	str	r3, [r7, #20]
        configASSERT(xSize == sizeof(Queue_t));
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	2b48      	cmp	r3, #72	; 0x48
 800c42e:	d00a      	beq.n	800c446 <xQueueGenericCreateStatic+0xbe>
    __asm volatile("	mov %0, %1												\n"
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	61bb      	str	r3, [r7, #24]
}
 800c442:	bf00      	nop
 800c444:	e7fe      	b.n	800c444 <xQueueGenericCreateStatic+0xbc>
        (void)xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c446:	697b      	ldr	r3, [r7, #20]
#endif /* configASSERT_DEFINED */

    /* The address of a statically allocated queue was passed in, use it.
    The address of a statically allocated storage area was also passed in
    but is already set. */
    pxNewQueue = (Queue_t *)pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (pxNewQueue != NULL) {
 800c44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00d      	beq.n	800c46e <xQueueGenericCreateStatic+0xe6>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
        {
            /* Queues can be allocated wither statically or dynamically, so
            note this queue was allocated statically in case the queue is
            later deleted. */
            pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c454:	2201      	movs	r2, #1
 800c456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
 800c45a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	4613      	mov	r3, r2
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f000 f805 	bl	800c478 <prvInitialiseNewQueue>
    } else {
        traceQUEUE_CREATE_FAILED(ucQueueType);
        mtCOVERAGE_TEST_MARKER();
    }

    return pxNewQueue;
 800c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c470:	4618      	mov	r0, r3
 800c472:	3730      	adds	r7, #48	; 0x30
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <prvInitialiseNewQueue>:
}

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, const uint8_t ucQueueType, Queue_t * pxNewQueue) {
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
    configUSE_TRACE_FACILITY not be set to 1. */
    (void)ucQueueType;

    if (uxItemSize == (UBaseType_t)0) {
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d103      	bne.n	800c494 <prvInitialiseNewQueue+0x1c>
        /* No RAM was allocated for the queue storage area, but PC head cannot
        be set to NULL because NULL is used as a key to say the queue is used as
        a mutex.  Therefore just set pcHead to point to the queue as a benign
        value that is known to be within the memory map. */
        pxNewQueue->pcHead = (int8_t *)pxNewQueue;
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	69ba      	ldr	r2, [r7, #24]
 800c490:	601a      	str	r2, [r3, #0]
 800c492:	e002      	b.n	800c49a <prvInitialiseNewQueue+0x22>
    } else {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
    defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	641a      	str	r2, [r3, #64]	; 0x40
    (void)xQueueGenericReset(pxNewQueue, pdTRUE);
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	69b8      	ldr	r0, [r7, #24]
 800c4aa:	f7ff ff05 	bl	800c2b8 <xQueueGenericReset>
#if (configUSE_QUEUE_SETS == 1)
    { pxNewQueue->pxQueueSetContainer = NULL; }
#endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE(pxNewQueue);
}
 800c4ae:	bf00      	nop
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <xQueueGenericSend>:
}

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition) {
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b08e      	sub	sp, #56	; 0x38
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	607a      	str	r2, [r7, #4]
 800c4c4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT(pxQueue);
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10a      	bne.n	800c4ea <xQueueGenericSend+0x32>
    __asm volatile("	mov %0, %1												\n"
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <xQueueGenericSend+0x30>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d103      	bne.n	800c4f8 <xQueueGenericSend+0x40>
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d101      	bne.n	800c4fc <xQueueGenericSend+0x44>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e000      	b.n	800c4fe <xQueueGenericSend+0x46>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <xQueueGenericSend+0x60>
    __asm volatile("	mov %0, %1												\n"
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c514:	bf00      	nop
 800c516:	e7fe      	b.n	800c516 <xQueueGenericSend+0x5e>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d103      	bne.n	800c526 <xQueueGenericSend+0x6e>
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c522:	2b01      	cmp	r3, #1
 800c524:	d101      	bne.n	800c52a <xQueueGenericSend+0x72>
 800c526:	2301      	movs	r3, #1
 800c528:	e000      	b.n	800c52c <xQueueGenericSend+0x74>
 800c52a:	2300      	movs	r3, #0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10a      	bne.n	800c546 <xQueueGenericSend+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	623b      	str	r3, [r7, #32]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <xQueueGenericSend+0x8c>
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800c546:	f001 fac9 	bl	800dadc <xTaskGetSchedulerState>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <xQueueGenericSend+0x9e>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <xQueueGenericSend+0xa2>
 800c556:	2301      	movs	r3, #1
 800c558:	e000      	b.n	800c55c <xQueueGenericSend+0xa4>
 800c55a:	2300      	movs	r3, #0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10a      	bne.n	800c576 <xQueueGenericSend+0xbe>
    __asm volatile("	mov %0, %1												\n"
 800c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	61fb      	str	r3, [r7, #28]
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xQueueGenericSend+0xbc>

    /*lint -save -e904 This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800c576:	f002 f8d5 	bl	800e724 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
            highest priority task wanting to access the queue.  If the head item
            in the queue is to be overwritten then it does not matter if the
            queue is full. */
            if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c582:	429a      	cmp	r2, r3
 800c584:	d302      	bcc.n	800c58c <xQueueGenericSend+0xd4>
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d129      	bne.n	800c5e0 <xQueueGenericSend+0x128>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	68b9      	ldr	r1, [r7, #8]
 800c590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c592:	f000 fa0b 	bl	800c9ac <prvCopyDataToQueue>
 800c596:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                    queue then unblock it now. */
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d010      	beq.n	800c5c2 <xQueueGenericSend+0x10a>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a2:	3324      	adds	r3, #36	; 0x24
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f001 f8dd 	bl	800d764 <xTaskRemoveFromEventList>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d013      	beq.n	800c5d8 <xQueueGenericSend+0x120>
                            /* The unblocked task has a priority higher than
                            our own so yield immediately.  Yes it is ok to do
                            this from within the critical section - the kernel
                            takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c5b0:	4b3f      	ldr	r3, [pc, #252]	; (800c6b0 <xQueueGenericSend+0x1f8>)
 800c5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	e00a      	b.n	800c5d8 <xQueueGenericSend+0x120>
                        } else {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    } else if (xYieldRequired != pdFALSE) {
 800c5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d007      	beq.n	800c5d8 <xQueueGenericSend+0x120>
                        /* This path is a special case that will only get
                        executed if the task was holding multiple mutexes and
                        the mutexes were given back in an order that is
                        different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c5c8:	4b39      	ldr	r3, [pc, #228]	; (800c6b0 <xQueueGenericSend+0x1f8>)
 800c5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
#endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c5d8:	f002 f8d4 	bl	800e784 <vPortExitCritical>
                return pdPASS;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e063      	b.n	800c6a8 <xQueueGenericSend+0x1f0>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d103      	bne.n	800c5ee <xQueueGenericSend+0x136>
                    /* The queue was full and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c5e6:	f002 f8cd 	bl	800e784 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                    the function. */
                    traceQUEUE_SEND_FAILED(pxQueue);
                    return errQUEUE_FULL;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e05c      	b.n	800c6a8 <xQueueGenericSend+0x1f0>
                } else if (xEntryTimeSet == pdFALSE) {
 800c5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d106      	bne.n	800c602 <xQueueGenericSend+0x14a>
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800c5f4:	f107 0314 	add.w	r3, r7, #20
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f001 f915 	bl	800d828 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c5fe:	2301      	movs	r3, #1
 800c600:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c602:	f002 f8bf 	bl	800e784 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800c606:	f000 fe8f 	bl	800d328 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800c60a:	f002 f88b 	bl	800e724 <vPortEnterCritical>
 800c60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c614:	b25b      	sxtb	r3, r3
 800c616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c61a:	d103      	bne.n	800c624 <xQueueGenericSend+0x16c>
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	2200      	movs	r2, #0
 800c620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c62a:	b25b      	sxtb	r3, r3
 800c62c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c630:	d103      	bne.n	800c63a <xQueueGenericSend+0x182>
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	2200      	movs	r2, #0
 800c636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c63a:	f002 f8a3 	bl	800e784 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800c63e:	1d3a      	adds	r2, r7, #4
 800c640:	f107 0314 	add.w	r3, r7, #20
 800c644:	4611      	mov	r1, r2
 800c646:	4618      	mov	r0, r3
 800c648:	f001 f904 	bl	800d854 <xTaskCheckForTimeOut>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d124      	bne.n	800c69c <xQueueGenericSend+0x1e4>
            if (prvIsQueueFull(pxQueue) != pdFALSE) {
 800c652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c654:	f000 faa2 	bl	800cb9c <prvIsQueueFull>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d018      	beq.n	800c690 <xQueueGenericSend+0x1d8>
                traceBLOCKING_ON_QUEUE_SEND(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	3310      	adds	r3, #16
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f001 f82c 	bl	800d6c4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                event list.  It is possible that interrupts occurring now
                remove this task from the event list again - but as the
                scheduler is suspended the task will go onto the pending
                ready last instead of the actual ready list. */
                prvUnlockQueue(pxQueue);
 800c66c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c66e:	f000 fa2d 	bl	800cacc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                ready list into the ready list - so it is feasible that this
                task is already in a ready list before it yields - in which
                case the yield will not cause a context switch unless there
                is also a higher priority task in the pending ready list. */
                if (xTaskResumeAll() == pdFALSE) {
 800c672:	f000 fe67 	bl	800d344 <xTaskResumeAll>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f47f af7c 	bne.w	800c576 <xQueueGenericSend+0xbe>
                    portYIELD_WITHIN_API();
 800c67e:	4b0c      	ldr	r3, [pc, #48]	; (800c6b0 <xQueueGenericSend+0x1f8>)
 800c680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	e772      	b.n	800c576 <xQueueGenericSend+0xbe>
                }
            } else {
                /* Try again. */
                prvUnlockQueue(pxQueue);
 800c690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c692:	f000 fa1b 	bl	800cacc <prvUnlockQueue>
                (void)xTaskResumeAll();
 800c696:	f000 fe55 	bl	800d344 <xTaskResumeAll>
 800c69a:	e76c      	b.n	800c576 <xQueueGenericSend+0xbe>
            }
        } else {
            /* The timeout has expired. */
            prvUnlockQueue(pxQueue);
 800c69c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c69e:	f000 fa15 	bl	800cacc <prvUnlockQueue>
            (void)xTaskResumeAll();
 800c6a2:	f000 fe4f 	bl	800d344 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED(pxQueue);
            return errQUEUE_FULL;
 800c6a6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3738      	adds	r7, #56	; 0x38
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	e000ed04 	.word	0xe000ed04

0800c6b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition) {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b090      	sub	sp, #64	; 0x40
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
 800c6c0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT(pxQueue);
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10a      	bne.n	800c6e2 <xQueueGenericSendFromISR+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800c6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d0:	f383 8811 	msr	BASEPRI, r3
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c6de:	bf00      	nop
 800c6e0:	e7fe      	b.n	800c6e0 <xQueueGenericSendFromISR+0x2c>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d103      	bne.n	800c6f0 <xQueueGenericSendFromISR+0x3c>
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <xQueueGenericSendFromISR+0x40>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e000      	b.n	800c6f6 <xQueueGenericSendFromISR+0x42>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10a      	bne.n	800c710 <xQueueGenericSendFromISR+0x5c>
    __asm volatile("	mov %0, %1												\n"
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c70c:	bf00      	nop
 800c70e:	e7fe      	b.n	800c70e <xQueueGenericSendFromISR+0x5a>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	2b02      	cmp	r3, #2
 800c714:	d103      	bne.n	800c71e <xQueueGenericSendFromISR+0x6a>
 800c716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d101      	bne.n	800c722 <xQueueGenericSendFromISR+0x6e>
 800c71e:	2301      	movs	r3, #1
 800c720:	e000      	b.n	800c724 <xQueueGenericSendFromISR+0x70>
 800c722:	2300      	movs	r3, #0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10a      	bne.n	800c73e <xQueueGenericSendFromISR+0x8a>
    __asm volatile("	mov %0, %1												\n"
 800c728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	623b      	str	r3, [r7, #32]
}
 800c73a:	bf00      	nop
 800c73c:	e7fe      	b.n	800c73c <xQueueGenericSendFromISR+0x88>
    that have been assigned a priority at or (logically) below the maximum
    system call	interrupt priority.  FreeRTOS maintains a separate interrupt
    safe API to ensure interrupt entry is as fast and as simple as possible.
    More information (albeit Cortex-M specific) is provided on the following
    link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c73e:	f002 f8d3 	bl	800e8e8 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void) {
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile("	mrs %0, basepri											\n"
 800c742:	f3ef 8211 	mrs	r2, BASEPRI
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	61fa      	str	r2, [r7, #28]
 800c758:	61bb      	str	r3, [r7, #24]
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");

    /* This return will not be reached but is necessary to prevent compiler
    warnings. */
    return ulOriginalBASEPRI;
 800c75a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
    in the queue.  Also don't directly wake a task that was blocked on a queue
    read, instead return a flag to say whether a context switch is required or
    not (i.e. has a task with a higher priority than us been woken by this
    post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c75c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c766:	429a      	cmp	r2, r3
 800c768:	d302      	bcc.n	800c770 <xQueueGenericSendFromISR+0xbc>
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d12f      	bne.n	800c7d0 <xQueueGenericSendFromISR+0x11c>
            const int8_t cTxLock = pxQueue->cTxLock;
 800c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
            semaphore or mutex.  That means prvCopyDataToQueue() cannot result
            in a task disinheriting a priority and prvCopyDataToQueue() can be
            called here even though the disinherit function does not check if
            the scheduler is suspended before accessing the ready lists. */
            (void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	68b9      	ldr	r1, [r7, #8]
 800c784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c786:	f000 f911 	bl	800c9ac <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
            be done when the queue is unlocked later. */
            if (cTxLock == queueUNLOCKED) {
 800c78a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c78e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c792:	d112      	bne.n	800c7ba <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d016      	beq.n	800c7ca <xQueueGenericSendFromISR+0x116>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	3324      	adds	r3, #36	; 0x24
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 ffdf 	bl	800d764 <xTaskRemoveFromEventList>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00e      	beq.n	800c7ca <xQueueGenericSendFromISR+0x116>
                            /* The task waiting has a higher priority so record that a
                            context	switch is required. */
                            if (pxHigherPriorityTaskWoken != NULL) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00b      	beq.n	800c7ca <xQueueGenericSendFromISR+0x116>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	e007      	b.n	800c7ca <xQueueGenericSendFromISR+0x116>
                }
#endif /* configUSE_QUEUE_SETS */
            } else {
                /* Increment the lock count so the task that unlocks the queue
                knows that data was posted while it was locked. */
                pxQueue->cTxLock = (int8_t)(cTxLock + 1);
 800c7ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c7be:	3301      	adds	r3, #1
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	b25a      	sxtb	r2, r3
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800c7ce:	e001      	b.n	800c7d4 <xQueueGenericSendFromISR+0x120>
        } else {
            traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue);
            xReturn = errQUEUE_FULL;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue) {
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	f383 8811 	msr	BASEPRI, r3
}
 800c7de:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

    return xReturn;
 800c7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3740      	adds	r7, #64	; 0x40
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <xQueueReceive>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait) {
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08c      	sub	sp, #48	; 0x30
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT((pxQueue));
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	2b00      	cmp	r3, #0
 800c804:	d10a      	bne.n	800c81c <xQueueReceive+0x30>
    __asm volatile("	mov %0, %1												\n"
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	623b      	str	r3, [r7, #32]
}
 800c818:	bf00      	nop
 800c81a:	e7fe      	b.n	800c81a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
    is zero (so no data is copied into the buffer. */
    configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d103      	bne.n	800c82a <xQueueReceive+0x3e>
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c826:	2b00      	cmp	r3, #0
 800c828:	d101      	bne.n	800c82e <xQueueReceive+0x42>
 800c82a:	2301      	movs	r3, #1
 800c82c:	e000      	b.n	800c830 <xQueueReceive+0x44>
 800c82e:	2300      	movs	r3, #0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10a      	bne.n	800c84a <xQueueReceive+0x5e>
    __asm volatile("	mov %0, %1												\n"
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	61fb      	str	r3, [r7, #28]
}
 800c846:	bf00      	nop
 800c848:	e7fe      	b.n	800c848 <xQueueReceive+0x5c>

/* Cannot block if the scheduler is suspended. */
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800c84a:	f001 f947 	bl	800dadc <xTaskGetSchedulerState>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d102      	bne.n	800c85a <xQueueReceive+0x6e>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <xQueueReceive+0x72>
 800c85a:	2301      	movs	r3, #1
 800c85c:	e000      	b.n	800c860 <xQueueReceive+0x74>
 800c85e:	2300      	movs	r3, #0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10a      	bne.n	800c87a <xQueueReceive+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	61bb      	str	r3, [r7, #24]
}
 800c876:	bf00      	nop
 800c878:	e7fe      	b.n	800c878 <xQueueReceive+0x8c>

    /*lint -save -e904  This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800c87a:	f001 ff53 	bl	800e724 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c882:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
            must be the highest priority task wanting to access the queue. */
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c886:	2b00      	cmp	r3, #0
 800c888:	d01f      	beq.n	800c8ca <xQueueReceive+0xde>
                /* Data available, remove one item. */
                prvCopyDataFromQueue(pxQueue, pvBuffer);
 800c88a:	68b9      	ldr	r1, [r7, #8]
 800c88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c88e:	f000 f8f7 	bl	800ca80 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE(pxQueue);
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	1e5a      	subs	r2, r3, #1
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                post to the queue?  If so, unblock the highest priority waiting
                task. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00f      	beq.n	800c8c2 <xQueueReceive+0xd6>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a4:	3310      	adds	r3, #16
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 ff5c 	bl	800d764 <xTaskRemoveFromEventList>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d007      	beq.n	800c8c2 <xQueueReceive+0xd6>
                        queueYIELD_IF_USING_PREEMPTION();
 800c8b2:	4b3d      	ldr	r3, [pc, #244]	; (800c9a8 <xQueueReceive+0x1bc>)
 800c8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	f3bf 8f6f 	isb	sy
                    }
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c8c2:	f001 ff5f 	bl	800e784 <vPortExitCritical>
                return pdPASS;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e069      	b.n	800c99e <xQueueReceive+0x1b2>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d103      	bne.n	800c8d8 <xQueueReceive+0xec>
                    /* The queue was empty and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c8d0:	f001 ff58 	bl	800e784 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED(pxQueue);
                    return errQUEUE_EMPTY;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	e062      	b.n	800c99e <xQueueReceive+0x1b2>
                } else if (xEntryTimeSet == pdFALSE) {
 800c8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d106      	bne.n	800c8ec <xQueueReceive+0x100>
                    /* The queue was empty and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800c8de:	f107 0310 	add.w	r3, r7, #16
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 ffa0 	bl	800d828 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c8ec:	f001 ff4a 	bl	800e784 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800c8f0:	f000 fd1a 	bl	800d328 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800c8f4:	f001 ff16 	bl	800e724 <vPortEnterCritical>
 800c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8fe:	b25b      	sxtb	r3, r3
 800c900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c904:	d103      	bne.n	800c90e <xQueueReceive+0x122>
 800c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c914:	b25b      	sxtb	r3, r3
 800c916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c91a:	d103      	bne.n	800c924 <xQueueReceive+0x138>
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c924:	f001 ff2e 	bl	800e784 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800c928:	1d3a      	adds	r2, r7, #4
 800c92a:	f107 0310 	add.w	r3, r7, #16
 800c92e:	4611      	mov	r1, r2
 800c930:	4618      	mov	r0, r3
 800c932:	f000 ff8f 	bl	800d854 <xTaskCheckForTimeOut>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d123      	bne.n	800c984 <xQueueReceive+0x198>
            /* The timeout has not expired.  If the queue is still empty place
            the task on the list of tasks waiting to receive from the queue. */
            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800c93c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c93e:	f000 f917 	bl	800cb70 <prvIsQueueEmpty>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d017      	beq.n	800c978 <xQueueReceive+0x18c>
                traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
 800c948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94a:	3324      	adds	r3, #36	; 0x24
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	4611      	mov	r1, r2
 800c950:	4618      	mov	r0, r3
 800c952:	f000 feb7 	bl	800d6c4 <vTaskPlaceOnEventList>
                prvUnlockQueue(pxQueue);
 800c956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c958:	f000 f8b8 	bl	800cacc <prvUnlockQueue>
                if (xTaskResumeAll() == pdFALSE) {
 800c95c:	f000 fcf2 	bl	800d344 <xTaskResumeAll>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d189      	bne.n	800c87a <xQueueReceive+0x8e>
                    portYIELD_WITHIN_API();
 800c966:	4b10      	ldr	r3, [pc, #64]	; (800c9a8 <xQueueReceive+0x1bc>)
 800c968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c96c:	601a      	str	r2, [r3, #0]
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	f3bf 8f6f 	isb	sy
 800c976:	e780      	b.n	800c87a <xQueueReceive+0x8e>
                    mtCOVERAGE_TEST_MARKER();
                }
            } else {
                /* The queue contains data again.  Loop back to try and read the
                data. */
                prvUnlockQueue(pxQueue);
 800c978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c97a:	f000 f8a7 	bl	800cacc <prvUnlockQueue>
                (void)xTaskResumeAll();
 800c97e:	f000 fce1 	bl	800d344 <xTaskResumeAll>
 800c982:	e77a      	b.n	800c87a <xQueueReceive+0x8e>
            }
        } else {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
            back and attempt to read the data. */
            prvUnlockQueue(pxQueue);
 800c984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c986:	f000 f8a1 	bl	800cacc <prvUnlockQueue>
            (void)xTaskResumeAll();
 800c98a:	f000 fcdb 	bl	800d344 <xTaskResumeAll>

            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800c98e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c990:	f000 f8ee 	bl	800cb70 <prvIsQueueEmpty>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	f43f af6f 	beq.w	800c87a <xQueueReceive+0x8e>
                traceQUEUE_RECEIVE_FAILED(pxQueue);
                return errQUEUE_EMPTY;
 800c99c:	2300      	movs	r3, #0
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3730      	adds	r7, #48	; 0x30
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	e000ed04 	.word	0xe000ed04

0800c9ac <prvCopyDataToQueue>:
}

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t * const pxQueue, const void * pvItemToQueue, const BaseType_t xPosition) {
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c0:	613b      	str	r3, [r7, #16]

    if (pxQueue->uxItemSize == (UBaseType_t)0) {
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10d      	bne.n	800c9e6 <prvCopyDataToQueue+0x3a>
#if (configUSE_MUTEXES == 1)
        {
            if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d14d      	bne.n	800ca6e <prvCopyDataToQueue+0xc2>
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit(pxQueue->u.xSemaphore.xMutexHolder);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f001 f89e 	bl	800db18 <xTaskPriorityDisinherit>
 800c9dc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	609a      	str	r2, [r3, #8]
 800c9e4:	e043      	b.n	800ca6e <prvCopyDataToQueue+0xc2>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_MUTEXES */
    } else if (xPosition == queueSEND_TO_BACK) {
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d119      	bne.n	800ca20 <prvCopyDataToQueue+0x74>
        (void)memcpy((void *)pxQueue->pcWriteTo, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6858      	ldr	r0, [r3, #4]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	68b9      	ldr	r1, [r7, #8]
 800c9f8:	f003 fb9c 	bl	8010134 <memcpy>
                                                                                                 memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                            /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca04:	441a      	add	r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	605a      	str	r2, [r3, #4]
        if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail)                                   /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d32b      	bcc.n	800ca6e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	605a      	str	r2, [r3, #4]
 800ca1e:	e026      	b.n	800ca6e <prvCopyDataToQueue+0xc2>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        (void)memcpy((void *)pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	68d8      	ldr	r0, [r3, #12]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca28:	461a      	mov	r2, r3
 800ca2a:	68b9      	ldr	r1, [r7, #8]
 800ca2c:	f003 fb82 	bl	8010134 <memcpy>
                                                                                                           no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	68da      	ldr	r2, [r3, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca38:	425b      	negs	r3, r3
 800ca3a:	441a      	add	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	68da      	ldr	r2, [r3, #12]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d207      	bcs.n	800ca5c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	689a      	ldr	r2, [r3, #8]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca54:	425b      	negs	r3, r3
 800ca56:	441a      	add	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        if (xPosition == queueOVERWRITE) {
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	d105      	bne.n	800ca6e <prvCopyDataToQueue+0xc2>
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <prvCopyDataToQueue+0xc2>
                /* An item is not being added but overwritten, so subtract
                one from the recorded number of items in the queue so when
                one is added again below the number of recorded items remains
                correct. */
                --uxMessagesWaiting;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	613b      	str	r3, [r7, #16]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800ca76:	697b      	ldr	r3, [r7, #20]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3718      	adds	r7, #24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t * const pxQueue, void * const pvBuffer) {
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
    if (pxQueue->uxItemSize != (UBaseType_t)0) {
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d018      	beq.n	800cac4 <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;          /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68da      	ldr	r2, [r3, #12]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9a:	441a      	add	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68da      	ldr	r2, [r3, #12]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d303      	bcc.n	800cab4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68d9      	ldr	r1, [r3, #12]
                     (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800cabc:	461a      	mov	r2, r3
 800cabe:	6838      	ldr	r0, [r7, #0]
 800cac0:	f003 fb38 	bl	8010134 <memcpy>
                                                      required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    }
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t * const pxQueue) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
    removed from the queue while the queue was locked.  When a queue is
    locked items can be added or removed, but the event lists cannot be
    updated. */
    taskENTER_CRITICAL();
 800cad4:	f001 fe26 	bl	800e724 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cade:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800cae0:	e011      	b.n	800cb06 <prvUnlockQueue+0x3a>
            }
#else  /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                the pending ready list as the scheduler is still suspended. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d012      	beq.n	800cb10 <prvUnlockQueue+0x44>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3324      	adds	r3, #36	; 0x24
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fe38 	bl	800d764 <xTaskRemoveFromEventList>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <prvUnlockQueue+0x32>
                        /* The task waiting has a higher priority so record that
                        a context switch is required. */
                        vTaskMissedYield();
 800cafa:	f000 ff0d 	bl	800d918 <vTaskMissedYield>
                    break;
                }
            }
#endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	3b01      	subs	r3, #1
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	73fb      	strb	r3, [r7, #15]
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800cb06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	dce9      	bgt.n	800cae2 <prvUnlockQueue+0x16>
 800cb0e:	e000      	b.n	800cb12 <prvUnlockQueue+0x46>
                    break;
 800cb10:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	22ff      	movs	r2, #255	; 0xff
 800cb16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800cb1a:	f001 fe33 	bl	800e784 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800cb1e:	f001 fe01 	bl	800e724 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb28:	73bb      	strb	r3, [r7, #14]

        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800cb2a:	e011      	b.n	800cb50 <prvUnlockQueue+0x84>
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d012      	beq.n	800cb5a <prvUnlockQueue+0x8e>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	3310      	adds	r3, #16
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fe13 	bl	800d764 <xTaskRemoveFromEventList>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d001      	beq.n	800cb48 <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 800cb44:	f000 fee8 	bl	800d918 <vTaskMissedYield>
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cb48:	7bbb      	ldrb	r3, [r7, #14]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	73bb      	strb	r3, [r7, #14]
        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800cb50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	dce9      	bgt.n	800cb2c <prvUnlockQueue+0x60>
 800cb58:	e000      	b.n	800cb5c <prvUnlockQueue+0x90>
            } else {
                break;
 800cb5a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	22ff      	movs	r2, #255	; 0xff
 800cb60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800cb64:	f001 fe0e 	bl	800e784 <vPortExitCritical>
}
 800cb68:	bf00      	nop
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t * pxQueue) {
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cb78:	f001 fdd4 	bl	800e724 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d102      	bne.n	800cb8a <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 800cb84:	2301      	movs	r3, #1
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	e001      	b.n	800cb8e <prvIsQueueEmpty+0x1e>
        } else {
            xReturn = pdFALSE;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cb8e:	f001 fdf9 	bl	800e784 <vPortExitCritical>

    return xReturn;
 800cb92:	68fb      	ldr	r3, [r7, #12]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <prvIsQueueFull>:

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t * pxQueue) {
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cba4:	f001 fdbe 	bl	800e724 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d102      	bne.n	800cbba <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	e001      	b.n	800cbbe <prvIsQueueFull+0x22>
        } else {
            xReturn = pdFALSE;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cbbe:	f001 fde1 	bl	800e784 <vPortExitCritical>

    return xReturn;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if (configQUEUE_REGISTRY_SIZE > 0)

void vQueueAddToRegistry(QueueHandle_t xQueue, const char * pcQueueName) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
    UBaseType_t ux;

    /* See if there is an empty space in the registry.  A NULL name denotes
    a free slot. */
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60fb      	str	r3, [r7, #12]
 800cbda:	e014      	b.n	800cc06 <vQueueAddToRegistry+0x3a>
        if (xQueueRegistry[ux].pcQueueName == NULL) {
 800cbdc:	4a0f      	ldr	r2, [pc, #60]	; (800cc1c <vQueueAddToRegistry+0x50>)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10b      	bne.n	800cc00 <vQueueAddToRegistry+0x34>
            /* Store the information on this queue. */
            xQueueRegistry[ux].pcQueueName = pcQueueName;
 800cbe8:	490c      	ldr	r1, [pc, #48]	; (800cc1c <vQueueAddToRegistry+0x50>)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            xQueueRegistry[ux].xHandle = xQueue;
 800cbf2:	4a0a      	ldr	r2, [pc, #40]	; (800cc1c <vQueueAddToRegistry+0x50>)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	4413      	add	r3, r2
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD(xQueue, pcQueueName);
            break;
 800cbfe:	e006      	b.n	800cc0e <vQueueAddToRegistry+0x42>
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	3301      	adds	r3, #1
 800cc04:	60fb      	str	r3, [r7, #12]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b07      	cmp	r3, #7
 800cc0a:	d9e7      	bls.n	800cbdc <vQueueAddToRegistry+0x10>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800cc0c:	bf00      	nop
 800cc0e:	bf00      	nop
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	20000bf0 	.word	0x20000bf0

0800cc20 <vQueueWaitForMessageRestricted>:
#endif /* configQUEUE_REGISTRY_SIZE */
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	617b      	str	r3, [r7, #20]
    will not actually cause the task to block, just place it on a blocked
    list.  It will not block until the scheduler is unlocked - at which
    time a yield will be performed.  If an item is added to the queue while
    the queue is locked, and the calling task blocks on the queue, then the
    calling task will be immediately unblocked when the queue is unlocked. */
    prvLockQueue(pxQueue);
 800cc30:	f001 fd78 	bl	800e724 <vPortEnterCritical>
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc3a:	b25b      	sxtb	r3, r3
 800cc3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc40:	d103      	bne.n	800cc4a <vQueueWaitForMessageRestricted+0x2a>
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	2200      	movs	r2, #0
 800cc46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc50:	b25b      	sxtb	r3, r3
 800cc52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc56:	d103      	bne.n	800cc60 <vQueueWaitForMessageRestricted+0x40>
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc60:	f001 fd90 	bl	800e784 <vPortExitCritical>
    if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d106      	bne.n	800cc7a <vQueueWaitForMessageRestricted+0x5a>
        /* There is nothing in the queue, block for the specified period. */
        vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	3324      	adds	r3, #36	; 0x24
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	68b9      	ldr	r1, [r7, #8]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fd49 	bl	800d70c <vTaskPlaceOnEventListRestricted>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
    prvUnlockQueue(pxQueue);
 800cc7a:	6978      	ldr	r0, [r7, #20]
 800cc7c:	f7ff ff26 	bl	800cacc <prvUnlockQueue>
}
 800cc80:	bf00      	nop
 800cc82:	3718      	adds	r7, #24
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <xTaskCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                               const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, StackType_t * const puxStackBuffer, StaticTask_t * const pxTaskBuffer) {
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08e      	sub	sp, #56	; 0x38
 800cc8c:	af04      	add	r7, sp, #16
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]
    TCB_t * pxNewTCB;
    TaskHandle_t xReturn;

    configASSERT(puxStackBuffer != NULL);
 800cc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10a      	bne.n	800ccb2 <xTaskCreateStatic+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	623b      	str	r3, [r7, #32]
}
 800ccae:	bf00      	nop
 800ccb0:	e7fe      	b.n	800ccb0 <xTaskCreateStatic+0x28>
    configASSERT(pxTaskBuffer != NULL);
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10a      	bne.n	800ccce <xTaskCreateStatic+0x46>
    __asm volatile("	mov %0, %1												\n"
 800ccb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbc:	f383 8811 	msr	BASEPRI, r3
 800ccc0:	f3bf 8f6f 	isb	sy
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	61fb      	str	r3, [r7, #28]
}
 800ccca:	bf00      	nop
 800cccc:	e7fe      	b.n	800cccc <xTaskCreateStatic+0x44>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticTask_t equals the size of the real task
        structure. */
        volatile size_t xSize = sizeof(StaticTask_t);
 800ccce:	2364      	movs	r3, #100	; 0x64
 800ccd0:	613b      	str	r3, [r7, #16]
        configASSERT(xSize == sizeof(TCB_t));
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	2b64      	cmp	r3, #100	; 0x64
 800ccd6:	d00a      	beq.n	800ccee <xTaskCreateStatic+0x66>
    __asm volatile("	mov %0, %1												\n"
 800ccd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	61bb      	str	r3, [r7, #24]
}
 800ccea:	bf00      	nop
 800ccec:	e7fe      	b.n	800ccec <xTaskCreateStatic+0x64>
        (void)xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ccee:	693b      	ldr	r3, [r7, #16]
    }
#endif /* configASSERT_DEFINED */

    if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d01e      	beq.n	800cd34 <xTaskCreateStatic+0xac>
 800ccf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01b      	beq.n	800cd34 <xTaskCreateStatic+0xac>
        /* The memory used for the task's TCB and stack are passed into this
        function - use them. */
        pxNewTCB = (TCB_t *)pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	627b      	str	r3, [r7, #36]	; 0x24
        pxNewTCB->pxStack = (StackType_t *)puxStackBuffer;
 800cd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd04:	631a      	str	r2, [r3, #48]	; 0x30

#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created statically in case the task is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd08:	2202      	movs	r2, #2
 800cd0a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
 800cd0e:	2300      	movs	r3, #0
 800cd10:	9303      	str	r3, [sp, #12]
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	9302      	str	r3, [sp, #8]
 800cd16:	f107 0314 	add.w	r3, r7, #20
 800cd1a:	9301      	str	r3, [sp, #4]
 800cd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	68b9      	ldr	r1, [r7, #8]
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f000 f850 	bl	800cdcc <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800cd2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd2e:	f000 f8d5 	bl	800cedc <prvAddNewTaskToReadyList>
 800cd32:	e001      	b.n	800cd38 <xTaskCreateStatic+0xb0>
    } else {
        xReturn = NULL;
 800cd34:	2300      	movs	r3, #0
 800cd36:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800cd38:	697b      	ldr	r3, [r7, #20]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3728      	adds	r7, #40	; 0x28
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <xTaskCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                       const configSTACK_DEPTH_TYPE usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask) {
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b08c      	sub	sp, #48	; 0x30
 800cd46:	af04      	add	r7, sp, #16
 800cd48:	60f8      	str	r0, [r7, #12]
 800cd4a:	60b9      	str	r1, [r7, #8]
 800cd4c:	603b      	str	r3, [r7, #0]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	80fb      	strh	r3, [r7, #6]
#else  /* portSTACK_GROWTH */
    {
        StackType_t * pxStack;

        /* Allocate space for the stack used by the task being created. */
        pxStack = pvPortMalloc((((size_t)usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd52:	88fb      	ldrh	r3, [r7, #6]
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4618      	mov	r0, r3
 800cd58:	f001 fe06 	bl	800e968 <pvPortMalloc>
 800cd5c:	6178      	str	r0, [r7, #20]

        if (pxStack != NULL) {
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00e      	beq.n	800cd82 <xTaskCreate+0x40>
            /* Allocate space for the TCB. */
            pxNewTCB = (TCB_t *)pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd64:	2064      	movs	r0, #100	; 0x64
 800cd66:	f001 fdff 	bl	800e968 <pvPortMalloc>
 800cd6a:	61f8      	str	r0, [r7, #28]

            if (pxNewTCB != NULL) {
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d003      	beq.n	800cd7a <xTaskCreate+0x38>
                /* Store the stack location in the TCB. */
                pxNewTCB->pxStack = pxStack;
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	697a      	ldr	r2, [r7, #20]
 800cd76:	631a      	str	r2, [r3, #48]	; 0x30
 800cd78:	e005      	b.n	800cd86 <xTaskCreate+0x44>
            } else {
                /* The stack cannot be used as the TCB was not created.  Free
                it again. */
                vPortFree(pxStack);
 800cd7a:	6978      	ldr	r0, [r7, #20]
 800cd7c:	f001 fe06 	bl	800e98c <vPortFree>
 800cd80:	e001      	b.n	800cd86 <xTaskCreate+0x44>
            }
        } else {
            pxNewTCB = NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	61fb      	str	r3, [r7, #28]
        }
    }
#endif /* portSTACK_GROWTH */

    if (pxNewTCB != NULL) {
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d017      	beq.n	800cdbc <xTaskCreate+0x7a>
#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created dynamically in case it is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t)usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
 800cd94:	88fa      	ldrh	r2, [r7, #6]
 800cd96:	2300      	movs	r3, #0
 800cd98:	9303      	str	r3, [sp, #12]
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	9302      	str	r3, [sp, #8]
 800cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	68b9      	ldr	r1, [r7, #8]
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f000 f80e 	bl	800cdcc <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800cdb0:	69f8      	ldr	r0, [r7, #28]
 800cdb2:	f000 f893 	bl	800cedc <prvAddNewTaskToReadyList>
        xReturn = pdPASS;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	61bb      	str	r3, [r7, #24]
 800cdba:	e002      	b.n	800cdc2 <xTaskCreate+0x80>
    } else {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cdbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdc0:	61bb      	str	r3, [r7, #24]
    }

    return xReturn;
 800cdc2:	69bb      	ldr	r3, [r7, #24]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3720      	adds	r7, #32
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <prvInitialiseNewTask>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                 const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, TCB_t * pxNewTCB, const MemoryRegion_t * const xRegions) {
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
grows from high memory to low (as per the 80x86) or vice versa.
portSTACK_GROWTH is used to make the result positive or negative as required
by the port. */
#if (portSTACK_GROWTH < 0)
    {
        pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t)1]);
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cde4:	3b01      	subs	r3, #1
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack) & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK))); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	f023 0307 	bic.w	r3, r3, #7
 800cdf2:	61bb      	str	r3, [r7, #24]
                                                                                                                                        differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT((((portPOINTER_SIZE_TYPE)pxTopOfStack & (portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK) == 0UL));
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00a      	beq.n	800ce14 <prvInitialiseNewTask+0x48>
    __asm volatile("	mov %0, %1												\n"
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	617b      	str	r3, [r7, #20]
}
 800ce10:	bf00      	nop
 800ce12:	e7fe      	b.n	800ce12 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    }
#endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if (pcName != NULL) {
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d01f      	beq.n	800ce5a <prvInitialiseNewTask+0x8e>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	61fb      	str	r3, [r7, #28]
 800ce1e:	e012      	b.n	800ce46 <prvInitialiseNewTask+0x7a>
            pxNewTCB->pcTaskName[x] = pcName[x];
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	4413      	add	r3, r2
 800ce26:	7819      	ldrb	r1, [r3, #0]
 800ce28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	3334      	adds	r3, #52	; 0x34
 800ce30:	460a      	mov	r2, r1
 800ce32:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
            configMAX_TASK_NAME_LEN characters just in case the memory after the
            string is not accessible (extremely unlikely). */
            if (pcName[x] == (char)0x00) {
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	4413      	add	r3, r2
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d006      	beq.n	800ce4e <prvInitialiseNewTask+0x82>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	3301      	adds	r3, #1
 800ce44:	61fb      	str	r3, [r7, #28]
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	2b1f      	cmp	r3, #31
 800ce4a:	d9e9      	bls.n	800ce20 <prvInitialiseNewTask+0x54>
 800ce4c:	e000      	b.n	800ce50 <prvInitialiseNewTask+0x84>
                break;
 800ce4e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
        was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
 800ce50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce52:	2200      	movs	r2, #0
 800ce54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800ce58:	e003      	b.n	800ce62 <prvInitialiseNewTask+0x96>
    } else {
        /* The task has not been given a name, so just ensure there is a NULL
        terminator when it is read out. */
        pxNewTCB->pcTaskName[0] = 0x00;
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
    remove the privilege bit if one is present. */
    if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
 800ce62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce64:	2b06      	cmp	r3, #6
 800ce66:	d901      	bls.n	800ce6c <prvInitialiseNewTask+0xa0>
        uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
 800ce68:	2306      	movs	r3, #6
 800ce6a:	62bb      	str	r3, [r7, #40]	; 0x28
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce70:	62da      	str	r2, [r3, #44]	; 0x2c
#if (configUSE_MUTEXES == 1)
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800ce72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce76:	655a      	str	r2, [r3, #84]	; 0x54
        pxNewTCB->uxMutexesHeld = 0;
 800ce78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	659a      	str	r2, [r3, #88]	; 0x58
    }
#endif /* configUSE_MUTEXES */

    vListInitialiseItem(&(pxNewTCB->xStateListItem));
 800ce7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce80:	3304      	adds	r3, #4
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7ff f983 	bl	800c18e <vListInitialiseItem>
    vListInitialiseItem(&(pxNewTCB->xEventListItem));
 800ce88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8a:	3318      	adds	r3, #24
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7ff f97e 	bl	800c18e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
    back to	the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce96:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	f1c3 0207 	rsb	r2, r3, #7
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cea6:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

#if (configUSE_TASK_NOTIFICATIONS == 1)
    {
        pxNewTCB->ulNotifiedValue = 0;
 800cea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceaa:	2200      	movs	r2, #0
 800ceac:	65da      	str	r2, [r3, #92]	; 0x5c
        pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
#endif /* portSTACK_GROWTH */
        }
#else  /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	68f9      	ldr	r1, [r7, #12]
 800ceba:	69b8      	ldr	r0, [r7, #24]
 800cebc:	f001 fb02 	bl	800e4c4 <pxPortInitialiseStack>
 800cec0:	4602      	mov	r2, r0
 800cec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec4:	601a      	str	r2, [r3, #0]
        }
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
#endif /* portUSING_MPU_WRAPPERS */

    if (pxCreatedTask != NULL) {
 800cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <prvInitialiseNewTask+0x106>
        /* Pass the handle out in an anonymous way.  The handle can be used to
        change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = (TaskHandle_t)pxNewTCB;
 800cecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ced0:	601a      	str	r2, [r3, #0]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ced2:	bf00      	nop
 800ced4:	3720      	adds	r7, #32
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
	...

0800cedc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t * pxNewTCB) {
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
    updated. */
    taskENTER_CRITICAL();
 800cee4:	f001 fc1e 	bl	800e724 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800cee8:	4b2a      	ldr	r3, [pc, #168]	; (800cf94 <prvAddNewTaskToReadyList+0xb8>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3301      	adds	r3, #1
 800ceee:	4a29      	ldr	r2, [pc, #164]	; (800cf94 <prvAddNewTaskToReadyList+0xb8>)
 800cef0:	6013      	str	r3, [r2, #0]
        if (pxCurrentTCB == NULL) {
 800cef2:	4b29      	ldr	r3, [pc, #164]	; (800cf98 <prvAddNewTaskToReadyList+0xbc>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d109      	bne.n	800cf0e <prvAddNewTaskToReadyList+0x32>
            /* There are no other tasks, or all the other tasks are in
            the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800cefa:	4a27      	ldr	r2, [pc, #156]	; (800cf98 <prvAddNewTaskToReadyList+0xbc>)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6013      	str	r3, [r2, #0]

            if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
 800cf00:	4b24      	ldr	r3, [pc, #144]	; (800cf94 <prvAddNewTaskToReadyList+0xb8>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d110      	bne.n	800cf2a <prvAddNewTaskToReadyList+0x4e>
                /* This is the first task to be created so do the preliminary
                initialisation required.  We will not recover if this call
                fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800cf08:	f000 fd2a 	bl	800d960 <prvInitialiseTaskLists>
 800cf0c:	e00d      	b.n	800cf2a <prvAddNewTaskToReadyList+0x4e>
            }
        } else {
            /* If the scheduler is not already running, make this task the
            current task if it is the highest priority task to be created
            so far. */
            if (xSchedulerRunning == pdFALSE) {
 800cf0e:	4b23      	ldr	r3, [pc, #140]	; (800cf9c <prvAddNewTaskToReadyList+0xc0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d109      	bne.n	800cf2a <prvAddNewTaskToReadyList+0x4e>
                if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 800cf16:	4b20      	ldr	r3, [pc, #128]	; (800cf98 <prvAddNewTaskToReadyList+0xbc>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d802      	bhi.n	800cf2a <prvAddNewTaskToReadyList+0x4e>
                    pxCurrentTCB = pxNewTCB;
 800cf24:	4a1c      	ldr	r2, [pc, #112]	; (800cf98 <prvAddNewTaskToReadyList+0xbc>)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6013      	str	r3, [r2, #0]
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800cf2a:	4b1d      	ldr	r3, [pc, #116]	; (800cfa0 <prvAddNewTaskToReadyList+0xc4>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	4a1b      	ldr	r2, [pc, #108]	; (800cfa0 <prvAddNewTaskToReadyList+0xc4>)
 800cf32:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
#endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE(pxNewTCB);

        prvAddTaskToReadyList(pxNewTCB);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	2201      	movs	r2, #1
 800cf3a:	409a      	lsls	r2, r3
 800cf3c:	4b19      	ldr	r3, [pc, #100]	; (800cfa4 <prvAddNewTaskToReadyList+0xc8>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4313      	orrs	r3, r2
 800cf42:	4a18      	ldr	r2, [pc, #96]	; (800cfa4 <prvAddNewTaskToReadyList+0xc8>)
 800cf44:	6013      	str	r3, [r2, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4a15      	ldr	r2, [pc, #84]	; (800cfa8 <prvAddNewTaskToReadyList+0xcc>)
 800cf54:	441a      	add	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	3304      	adds	r3, #4
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	f7ff f923 	bl	800c1a8 <vListInsertEnd>

        portSETUP_TCB(pxNewTCB);
    }
    taskEXIT_CRITICAL();
 800cf62:	f001 fc0f 	bl	800e784 <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800cf66:	4b0d      	ldr	r3, [pc, #52]	; (800cf9c <prvAddNewTaskToReadyList+0xc0>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00e      	beq.n	800cf8c <prvAddNewTaskToReadyList+0xb0>
        /* If the created task is of a higher priority than the current task
        then it should run now. */
        if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 800cf6e:	4b0a      	ldr	r3, [pc, #40]	; (800cf98 <prvAddNewTaskToReadyList+0xbc>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d207      	bcs.n	800cf8c <prvAddNewTaskToReadyList+0xb0>
            taskYIELD_IF_USING_PREEMPTION();
 800cf7c:	4b0b      	ldr	r3, [pc, #44]	; (800cfac <prvAddNewTaskToReadyList+0xd0>)
 800cf7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	20000d30 	.word	0x20000d30
 800cf98:	20000c30 	.word	0x20000c30
 800cf9c:	20000d3c 	.word	0x20000d3c
 800cfa0:	20000d4c 	.word	0x20000d4c
 800cfa4:	20000d38 	.word	0x20000d38
 800cfa8:	20000c34 	.word	0x20000c34
 800cfac:	e000ed04 	.word	0xe000ed04

0800cfb0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

void vTaskDelete(TaskHandle_t xTaskToDelete) {
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800cfb8:	f001 fbb4 	bl	800e724 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the calling task that is
        being deleted. */
        pxTCB = prvGetTCBFromHandle(xTaskToDelete);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d102      	bne.n	800cfc8 <vTaskDelete+0x18>
 800cfc2:	4b39      	ldr	r3, [pc, #228]	; (800d0a8 <vTaskDelete+0xf8>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	e000      	b.n	800cfca <vTaskDelete+0x1a>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	60fb      	str	r3, [r7, #12]

        /* Remove task from the ready/delayed list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff f946 	bl	800c262 <uxListRemove>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d115      	bne.n	800d008 <vTaskDelete+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe0:	4932      	ldr	r1, [pc, #200]	; (800d0ac <vTaskDelete+0xfc>)
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	440b      	add	r3, r1
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10a      	bne.n	800d008 <vTaskDelete+0x58>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff6:	2201      	movs	r2, #1
 800cff8:	fa02 f303 	lsl.w	r3, r2, r3
 800cffc:	43da      	mvns	r2, r3
 800cffe:	4b2c      	ldr	r3, [pc, #176]	; (800d0b0 <vTaskDelete+0x100>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4013      	ands	r3, r2
 800d004:	4a2a      	ldr	r2, [pc, #168]	; (800d0b0 <vTaskDelete+0x100>)
 800d006:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d004      	beq.n	800d01a <vTaskDelete+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3318      	adds	r3, #24
 800d014:	4618      	mov	r0, r3
 800d016:	f7ff f924 	bl	800c262 <uxListRemove>

        /* Increment the uxTaskNumber also so kernel aware debuggers can
        detect that the task lists need re-generating.  This is done before
        portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
        not return. */
        uxTaskNumber++;
 800d01a:	4b26      	ldr	r3, [pc, #152]	; (800d0b4 <vTaskDelete+0x104>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	3301      	adds	r3, #1
 800d020:	4a24      	ldr	r2, [pc, #144]	; (800d0b4 <vTaskDelete+0x104>)
 800d022:	6013      	str	r3, [r2, #0]

        if (pxTCB == pxCurrentTCB) {
 800d024:	4b20      	ldr	r3, [pc, #128]	; (800d0a8 <vTaskDelete+0xf8>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d10b      	bne.n	800d046 <vTaskDelete+0x96>
            /* A task is deleting itself.  This cannot complete within the
            task itself, as a context switch to another task is required.
            Place the task in the termination list.  The idle task will
            check the termination list and free up any memory allocated by
            the scheduler for the TCB and stack of the deleted task. */
            vListInsertEnd(&xTasksWaitingTermination, &(pxTCB->xStateListItem));
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3304      	adds	r3, #4
 800d032:	4619      	mov	r1, r3
 800d034:	4820      	ldr	r0, [pc, #128]	; (800d0b8 <vTaskDelete+0x108>)
 800d036:	f7ff f8b7 	bl	800c1a8 <vListInsertEnd>

            /* Increment the ucTasksDeleted variable so the idle task knows
            there is a task that has been deleted and that it should therefore
            check the xTasksWaitingTermination list. */
            ++uxDeletedTasksWaitingCleanUp;
 800d03a:	4b20      	ldr	r3, [pc, #128]	; (800d0bc <vTaskDelete+0x10c>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3301      	adds	r3, #1
 800d040:	4a1e      	ldr	r2, [pc, #120]	; (800d0bc <vTaskDelete+0x10c>)
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	e009      	b.n	800d05a <vTaskDelete+0xaa>
            after which it is not possible to yield away from this task -
            hence xYieldPending is used to latch that a context switch is
            required. */
            portPRE_TASK_DELETE_HOOK(pxTCB, &xYieldPending);
        } else {
            --uxCurrentNumberOfTasks;
 800d046:	4b1e      	ldr	r3, [pc, #120]	; (800d0c0 <vTaskDelete+0x110>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4a1c      	ldr	r2, [pc, #112]	; (800d0c0 <vTaskDelete+0x110>)
 800d04e:	6013      	str	r3, [r2, #0]
            traceTASK_DELETE(pxTCB);
            prvDeleteTCB(pxTCB);
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f000 fcf3 	bl	800da3c <prvDeleteTCB>

            /* Reset the next expected unblock time in case it referred to
            the task that has just been deleted. */
            prvResetNextTaskUnblockTime();
 800d056:	f000 fd21 	bl	800da9c <prvResetNextTaskUnblockTime>
        }
    }
    taskEXIT_CRITICAL();
 800d05a:	f001 fb93 	bl	800e784 <vPortExitCritical>

    /* Force a reschedule if it is the currently running task that has just
    been deleted. */
    if (xSchedulerRunning != pdFALSE) {
 800d05e:	4b19      	ldr	r3, [pc, #100]	; (800d0c4 <vTaskDelete+0x114>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d01b      	beq.n	800d09e <vTaskDelete+0xee>
        if (pxTCB == pxCurrentTCB) {
 800d066:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <vTaskDelete+0xf8>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d116      	bne.n	800d09e <vTaskDelete+0xee>
            configASSERT(uxSchedulerSuspended == 0);
 800d070:	4b15      	ldr	r3, [pc, #84]	; (800d0c8 <vTaskDelete+0x118>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00a      	beq.n	800d08e <vTaskDelete+0xde>
    __asm volatile("	mov %0, %1												\n"
 800d078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	60bb      	str	r3, [r7, #8]
}
 800d08a:	bf00      	nop
 800d08c:	e7fe      	b.n	800d08c <vTaskDelete+0xdc>
            portYIELD_WITHIN_API();
 800d08e:	4b0f      	ldr	r3, [pc, #60]	; (800d0cc <vTaskDelete+0x11c>)
 800d090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d094:	601a      	str	r2, [r3, #0]
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	f3bf 8f6f 	isb	sy
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800d09e:	bf00      	nop
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20000c30 	.word	0x20000c30
 800d0ac:	20000c34 	.word	0x20000c34
 800d0b0:	20000d38 	.word	0x20000d38
 800d0b4:	20000d4c 	.word	0x20000d4c
 800d0b8:	20000d04 	.word	0x20000d04
 800d0bc:	20000d18 	.word	0x20000d18
 800d0c0:	20000d30 	.word	0x20000d30
 800d0c4:	20000d3c 	.word	0x20000d3c
 800d0c8:	20000d58 	.word	0x20000d58
 800d0cc:	e000ed04 	.word	0xe000ed04

0800d0d0 <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelay == 1)

void vTaskDelay(const TickType_t xTicksToDelay) {
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	60fb      	str	r3, [r7, #12]

    /* A delay time of zero just forces a reschedule. */
    if (xTicksToDelay > (TickType_t)0U) {
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d017      	beq.n	800d112 <vTaskDelay+0x42>
        configASSERT(uxSchedulerSuspended == 0);
 800d0e2:	4b13      	ldr	r3, [pc, #76]	; (800d130 <vTaskDelay+0x60>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00a      	beq.n	800d100 <vTaskDelay+0x30>
    __asm volatile("	mov %0, %1												\n"
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	60bb      	str	r3, [r7, #8]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <vTaskDelay+0x2e>
        vTaskSuspendAll();
 800d100:	f000 f912 	bl	800d328 <vTaskSuspendAll>
            list or removed from the blocked list until the scheduler
            is resumed.

            This task cannot be in an event list as it is the currently
            executing task. */
            prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 800d104:	2100      	movs	r1, #0
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 fd8c 	bl	800dc24 <prvAddCurrentTaskToDelayedList>
        }
        xAlreadyYielded = xTaskResumeAll();
 800d10c:	f000 f91a 	bl	800d344 <xTaskResumeAll>
 800d110:	60f8      	str	r0, [r7, #12]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Force a reschedule if xTaskResumeAll has not already done so, we may
    have put ourselves to sleep. */
    if (xAlreadyYielded == pdFALSE) {
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d107      	bne.n	800d128 <vTaskDelay+0x58>
        portYIELD_WITHIN_API();
 800d118:	4b06      	ldr	r3, [pc, #24]	; (800d134 <vTaskDelay+0x64>)
 800d11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	f3bf 8f6f 	isb	sy
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d128:	bf00      	nop
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	20000d58 	.word	0x20000d58
 800d134:	e000ed04 	.word	0xe000ed04

0800d138 <vTaskSuspend>:
#endif /* INCLUDE_vTaskPrioritySet */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskSuspend == 1)

void vTaskSuspend(TaskHandle_t xTaskToSuspend) {
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800d140:	f001 faf0 	bl	800e724 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the running task that is
        being suspended. */
        pxTCB = prvGetTCBFromHandle(xTaskToSuspend);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d102      	bne.n	800d150 <vTaskSuspend+0x18>
 800d14a:	4b3c      	ldr	r3, [pc, #240]	; (800d23c <vTaskSuspend+0x104>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	e000      	b.n	800d152 <vTaskSuspend+0x1a>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	60fb      	str	r3, [r7, #12]

        traceTASK_SUSPEND(pxTCB);

        /* Remove task from the ready/delayed list and place in the
        suspended list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	3304      	adds	r3, #4
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff f882 	bl	800c262 <uxListRemove>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d115      	bne.n	800d190 <vTaskSuspend+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d168:	4935      	ldr	r1, [pc, #212]	; (800d240 <vTaskSuspend+0x108>)
 800d16a:	4613      	mov	r3, r2
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	4413      	add	r3, r2
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	440b      	add	r3, r1
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10a      	bne.n	800d190 <vTaskSuspend+0x58>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17e:	2201      	movs	r2, #1
 800d180:	fa02 f303 	lsl.w	r3, r2, r3
 800d184:	43da      	mvns	r2, r3
 800d186:	4b2f      	ldr	r3, [pc, #188]	; (800d244 <vTaskSuspend+0x10c>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4013      	ands	r3, r2
 800d18c:	4a2d      	ldr	r2, [pc, #180]	; (800d244 <vTaskSuspend+0x10c>)
 800d18e:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d194:	2b00      	cmp	r3, #0
 800d196:	d004      	beq.n	800d1a2 <vTaskSuspend+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3318      	adds	r3, #24
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff f860 	bl	800c262 <uxListRemove>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        vListInsertEnd(&xSuspendedTaskList, &(pxTCB->xStateListItem));
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	4827      	ldr	r0, [pc, #156]	; (800d248 <vTaskSuspend+0x110>)
 800d1aa:	f7fe fffd 	bl	800c1a8 <vListInsertEnd>

#if (configUSE_TASK_NOTIFICATIONS == 1)
        {
            if (pxTCB->ucNotifyState == taskWAITING_NOTIFICATION) {
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d103      	bne.n	800d1c2 <vTaskSuspend+0x8a>
                /* The task was blocked to wait for a notification, but is
                now suspended, so no notification was received. */
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
        }
#endif
    }
    taskEXIT_CRITICAL();
 800d1c2:	f001 fadf 	bl	800e784 <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800d1c6:	4b21      	ldr	r3, [pc, #132]	; (800d24c <vTaskSuspend+0x114>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d005      	beq.n	800d1da <vTaskSuspend+0xa2>
        /* Reset the next expected unblock time in case it referred to the
        task that is now in the Suspended state. */
        taskENTER_CRITICAL();
 800d1ce:	f001 faa9 	bl	800e724 <vPortEnterCritical>
        { prvResetNextTaskUnblockTime(); }
 800d1d2:	f000 fc63 	bl	800da9c <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 800d1d6:	f001 fad5 	bl	800e784 <vPortExitCritical>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    if (pxTCB == pxCurrentTCB) {
 800d1da:	4b18      	ldr	r3, [pc, #96]	; (800d23c <vTaskSuspend+0x104>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d127      	bne.n	800d234 <vTaskSuspend+0xfc>
        if (xSchedulerRunning != pdFALSE) {
 800d1e4:	4b19      	ldr	r3, [pc, #100]	; (800d24c <vTaskSuspend+0x114>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d017      	beq.n	800d21c <vTaskSuspend+0xe4>
            /* The current task has just been suspended. */
            configASSERT(uxSchedulerSuspended == 0);
 800d1ec:	4b18      	ldr	r3, [pc, #96]	; (800d250 <vTaskSuspend+0x118>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00a      	beq.n	800d20a <vTaskSuspend+0xd2>
    __asm volatile("	mov %0, %1												\n"
 800d1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f8:	f383 8811 	msr	BASEPRI, r3
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	60bb      	str	r3, [r7, #8]
}
 800d206:	bf00      	nop
 800d208:	e7fe      	b.n	800d208 <vTaskSuspend+0xd0>
            portYIELD_WITHIN_API();
 800d20a:	4b12      	ldr	r3, [pc, #72]	; (800d254 <vTaskSuspend+0x11c>)
 800d20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d210:	601a      	str	r2, [r3, #0]
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	f3bf 8f6f 	isb	sy
            }
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d21a:	e00b      	b.n	800d234 <vTaskSuspend+0xfc>
            if (listCURRENT_LIST_LENGTH(&xSuspendedTaskList) == uxCurrentNumberOfTasks) /*lint !e931 Right has no side effect, just volatile. */
 800d21c:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <vTaskSuspend+0x110>)
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	4b0d      	ldr	r3, [pc, #52]	; (800d258 <vTaskSuspend+0x120>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	429a      	cmp	r2, r3
 800d226:	d103      	bne.n	800d230 <vTaskSuspend+0xf8>
                pxCurrentTCB = NULL;
 800d228:	4b04      	ldr	r3, [pc, #16]	; (800d23c <vTaskSuspend+0x104>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	601a      	str	r2, [r3, #0]
}
 800d22e:	e001      	b.n	800d234 <vTaskSuspend+0xfc>
                vTaskSwitchContext();
 800d230:	f000 f9ec 	bl	800d60c <vTaskSwitchContext>
}
 800d234:	bf00      	nop
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	20000c30 	.word	0x20000c30
 800d240:	20000c34 	.word	0x20000c34
 800d244:	20000d38 	.word	0x20000d38
 800d248:	20000d1c 	.word	0x20000d1c
 800d24c:	20000d3c 	.word	0x20000d3c
 800d250:	20000d58 	.word	0x20000d58
 800d254:	e000ed04 	.word	0xe000ed04
 800d258:	20000d30 	.word	0x20000d30

0800d25c <vTaskStartScheduler>:
}

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b08a      	sub	sp, #40	; 0x28
 800d260:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

/* Add the idle task at the lowest priority. */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d262:	2300      	movs	r3, #0
 800d264:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
        address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
 800d26a:	463a      	mov	r2, r7
 800d26c:	1d39      	adds	r1, r7, #4
 800d26e:	f107 0308 	add.w	r3, r7, #8
 800d272:	4618      	mov	r0, r3
 800d274:	f7f4 faf4 	bl	8001860 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic(prvIdleTask, configIDLE_TASK_NAME, ulIdleTaskStackSize, (void *)NULL, /*lint !e961.  The cast is not redundant for all compilers. */
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	9202      	str	r2, [sp, #8]
 800d280:	9301      	str	r3, [sp, #4]
 800d282:	2300      	movs	r3, #0
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	2300      	movs	r3, #0
 800d288:	460a      	mov	r2, r1
 800d28a:	4921      	ldr	r1, [pc, #132]	; (800d310 <vTaskStartScheduler+0xb4>)
 800d28c:	4821      	ldr	r0, [pc, #132]	; (800d314 <vTaskStartScheduler+0xb8>)
 800d28e:	f7ff fcfb 	bl	800cc88 <xTaskCreateStatic>
 800d292:	4603      	mov	r3, r0
 800d294:	4a20      	ldr	r2, [pc, #128]	; (800d318 <vTaskStartScheduler+0xbc>)
 800d296:	6013      	str	r3, [r2, #0]
                                            portPRIVILEGE_BIT,                                                    /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                            pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer);                          /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if (xIdleTaskHandle != NULL) {
 800d298:	4b1f      	ldr	r3, [pc, #124]	; (800d318 <vTaskStartScheduler+0xbc>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <vTaskStartScheduler+0x4a>
            xReturn = pdPASS;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	617b      	str	r3, [r7, #20]
 800d2a4:	e001      	b.n	800d2aa <vTaskStartScheduler+0x4e>
        } else {
            xReturn = pdFAIL;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	617b      	str	r3, [r7, #20]
    }
#endif /* configSUPPORT_STATIC_ALLOCATION */

#if (configUSE_TIMERS == 1)
    {
        if (xReturn == pdPASS) {
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d102      	bne.n	800d2b6 <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
 800d2b0:	f000 fd1e 	bl	800dcf0 <xTimerCreateTimerTask>
 800d2b4:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif /* configUSE_TIMERS */

    if (xReturn == pdPASS) {
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d116      	bne.n	800d2ea <vTaskStartScheduler+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	613b      	str	r3, [r7, #16]
}
 800d2ce:	bf00      	nop
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800d2d0:	4b12      	ldr	r3, [pc, #72]	; (800d31c <vTaskStartScheduler+0xc0>)
 800d2d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2d6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d2d8:	4b11      	ldr	r3, [pc, #68]	; (800d320 <vTaskStartScheduler+0xc4>)
 800d2da:	2201      	movs	r2, #1
 800d2dc:	601a      	str	r2, [r3, #0]
        xTickCount = (TickType_t)configINITIAL_TICK_COUNT;
 800d2de:	4b11      	ldr	r3, [pc, #68]	; (800d324 <vTaskStartScheduler+0xc8>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
        portable interface. */
        if (xPortStartScheduler() != pdFALSE) {
 800d2e4:	f001 f97c 	bl	800e5e0 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
    meaning xIdleTaskHandle is not used anywhere else. */
    (void)xIdleTaskHandle;
}
 800d2e8:	e00e      	b.n	800d308 <vTaskStartScheduler+0xac>
        configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2f0:	d10a      	bne.n	800d308 <vTaskStartScheduler+0xac>
    __asm volatile("	mov %0, %1												\n"
 800d2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	60fb      	str	r3, [r7, #12]
}
 800d304:	bf00      	nop
 800d306:	e7fe      	b.n	800d306 <vTaskStartScheduler+0xaa>
}
 800d308:	bf00      	nop
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	0801242c 	.word	0x0801242c
 800d314:	0800d931 	.word	0x0800d931
 800d318:	20000d54 	.word	0x20000d54
 800d31c:	20000d50 	.word	0x20000d50
 800d320:	20000d3c 	.word	0x20000d3c
 800d324:	20000d34 	.word	0x20000d34

0800d328 <vTaskSuspendAll>:
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 800d328:	b480      	push	{r7}
 800d32a:	af00      	add	r7, sp, #0
    do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
    is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d32c:	4b04      	ldr	r3, [pc, #16]	; (800d340 <vTaskSuspendAll+0x18>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3301      	adds	r3, #1
 800d332:	4a03      	ldr	r2, [pc, #12]	; (800d340 <vTaskSuspendAll+0x18>)
 800d334:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
    the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d336:	bf00      	nop
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	20000d58 	.word	0x20000d58

0800d344 <xTaskResumeAll>:
}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d34a:	2300      	movs	r3, #0
 800d34c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d34e:	2300      	movs	r3, #0
 800d350:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
    previous call to vTaskSuspendAll(). */
    configASSERT(uxSchedulerSuspended);
 800d352:	4b41      	ldr	r3, [pc, #260]	; (800d458 <xTaskResumeAll+0x114>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10a      	bne.n	800d370 <xTaskResumeAll+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	603b      	str	r3, [r7, #0]
}
 800d36c:	bf00      	nop
 800d36e:	e7fe      	b.n	800d36e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
    list while the scheduler was suspended.  If this was the case then the
    removed task will have been added to the xPendingReadyList.  Once the
    scheduler has been resumed it is safe to move all the pending ready
    tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d370:	f001 f9d8 	bl	800e724 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d374:	4b38      	ldr	r3, [pc, #224]	; (800d458 <xTaskResumeAll+0x114>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3b01      	subs	r3, #1
 800d37a:	4a37      	ldr	r2, [pc, #220]	; (800d458 <xTaskResumeAll+0x114>)
 800d37c:	6013      	str	r3, [r2, #0]

        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d37e:	4b36      	ldr	r3, [pc, #216]	; (800d458 <xTaskResumeAll+0x114>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d161      	bne.n	800d44a <xTaskResumeAll+0x106>
            if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
 800d386:	4b35      	ldr	r3, [pc, #212]	; (800d45c <xTaskResumeAll+0x118>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d05d      	beq.n	800d44a <xTaskResumeAll+0x106>
                /* Move any readied tasks from the pending list into the
                appropriate ready list. */
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800d38e:	e02e      	b.n	800d3ee <xTaskResumeAll+0xaa>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800d390:	4b33      	ldr	r3, [pc, #204]	; (800d460 <xTaskResumeAll+0x11c>)
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	60fb      	str	r3, [r7, #12]
                        (&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                    (void)uxListRemove(&(pxTCB->xEventListItem));
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	3318      	adds	r3, #24
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fe ff60 	bl	800c262 <uxListRemove>
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe ff5b 	bl	800c262 <uxListRemove>
                    prvAddTaskToReadyList(pxTCB);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	409a      	lsls	r2, r3
 800d3b4:	4b2b      	ldr	r3, [pc, #172]	; (800d464 <xTaskResumeAll+0x120>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	4a2a      	ldr	r2, [pc, #168]	; (800d464 <xTaskResumeAll+0x120>)
 800d3bc:	6013      	str	r3, [r2, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	4413      	add	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4a27      	ldr	r2, [pc, #156]	; (800d468 <xTaskResumeAll+0x124>)
 800d3cc:	441a      	add	r2, r3
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	f7fe fee7 	bl	800c1a8 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                    task then a yield must be performed. */
                    if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3de:	4b23      	ldr	r3, [pc, #140]	; (800d46c <xTaskResumeAll+0x128>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d302      	bcc.n	800d3ee <xTaskResumeAll+0xaa>
                        xYieldPending = pdTRUE;
 800d3e8:	4b21      	ldr	r3, [pc, #132]	; (800d470 <xTaskResumeAll+0x12c>)
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	601a      	str	r2, [r3, #0]
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800d3ee:	4b1c      	ldr	r3, [pc, #112]	; (800d460 <xTaskResumeAll+0x11c>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1cc      	bne.n	800d390 <xTaskResumeAll+0x4c>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (pxTCB != NULL) {
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d001      	beq.n	800d400 <xTaskResumeAll+0xbc>
                    which may have prevented the next unblock time from being
                    re-calculated, in which case re-calculate it now.  Mainly
                    important for low power tickless implementations, where
                    this can prevent an unnecessary exit from low power
                    state. */
                    prvResetNextTaskUnblockTime();
 800d3fc:	f000 fb4e 	bl	800da9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                they should be processed now.  This ensures the tick count does
                not	slip, and that any delayed tasks are resumed at the correct
                time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d400:	4b1c      	ldr	r3, [pc, #112]	; (800d474 <xTaskResumeAll+0x130>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	607b      	str	r3, [r7, #4]

                    if (xPendedCounts > (TickType_t)0U) {
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d010      	beq.n	800d42e <xTaskResumeAll+0xea>
                        do {
                            if (xTaskIncrementTick() != pdFALSE) {
 800d40c:	f000 f846 	bl	800d49c <xTaskIncrementTick>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <xTaskResumeAll+0xd8>
                                xYieldPending = pdTRUE;
 800d416:	4b16      	ldr	r3, [pc, #88]	; (800d470 <xTaskResumeAll+0x12c>)
 800d418:	2201      	movs	r2, #1
 800d41a:	601a      	str	r2, [r3, #0]
                            } else {
                                mtCOVERAGE_TEST_MARKER();
                            }
                            --xPendedCounts;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3b01      	subs	r3, #1
 800d420:	607b      	str	r3, [r7, #4]
                        } while (xPendedCounts > (TickType_t)0U);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d1f1      	bne.n	800d40c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800d428:	4b12      	ldr	r3, [pc, #72]	; (800d474 <xTaskResumeAll+0x130>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	601a      	str	r2, [r3, #0]
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (xYieldPending != pdFALSE) {
 800d42e:	4b10      	ldr	r3, [pc, #64]	; (800d470 <xTaskResumeAll+0x12c>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d009      	beq.n	800d44a <xTaskResumeAll+0x106>
#if (configUSE_PREEMPTION != 0)
                    { xAlreadyYielded = pdTRUE; }
 800d436:	2301      	movs	r3, #1
 800d438:	60bb      	str	r3, [r7, #8]
#endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d43a:	4b0f      	ldr	r3, [pc, #60]	; (800d478 <xTaskResumeAll+0x134>)
 800d43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d440:	601a      	str	r2, [r3, #0]
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	f3bf 8f6f 	isb	sy
            }
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d44a:	f001 f99b 	bl	800e784 <vPortExitCritical>

    return xAlreadyYielded;
 800d44e:	68bb      	ldr	r3, [r7, #8]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20000d58 	.word	0x20000d58
 800d45c:	20000d30 	.word	0x20000d30
 800d460:	20000cf0 	.word	0x20000cf0
 800d464:	20000d38 	.word	0x20000d38
 800d468:	20000c34 	.word	0x20000c34
 800d46c:	20000c30 	.word	0x20000c30
 800d470:	20000d44 	.word	0x20000d44
 800d474:	20000d40 	.word	0x20000d40
 800d478:	e000ed04 	.word	0xe000ed04

0800d47c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    { xTicks = xTickCount; }
 800d482:	4b05      	ldr	r3, [pc, #20]	; (800d498 <xTaskGetTickCount+0x1c>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	607b      	str	r3, [r7, #4]
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d488:	687b      	ldr	r3, [r7, #4]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	20000d34 	.word	0x20000d34

0800d49c <xTaskIncrementTick>:
}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
    Increments the tick then checks to see if the new tick value will cause any
    tasks to be unblocked. */
    traceTASK_INCREMENT_TICK(xTickCount);
    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d4a6:	4b4e      	ldr	r3, [pc, #312]	; (800d5e0 <xTaskIncrementTick+0x144>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f040 808e 	bne.w	800d5cc <xTaskIncrementTick+0x130>
        /* Minor optimisation.  The tick count cannot change in this
        block. */
        const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
 800d4b0:	4b4c      	ldr	r3, [pc, #304]	; (800d5e4 <xTaskIncrementTick+0x148>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
        delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d4b8:	4a4a      	ldr	r2, [pc, #296]	; (800d5e4 <xTaskIncrementTick+0x148>)
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	6013      	str	r3, [r2, #0]

        if (xConstTickCount == (TickType_t)0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d120      	bne.n	800d506 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800d4c4:	4b48      	ldr	r3, [pc, #288]	; (800d5e8 <xTaskIncrementTick+0x14c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00a      	beq.n	800d4e4 <xTaskIncrementTick+0x48>
    __asm volatile("	mov %0, %1												\n"
 800d4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	603b      	str	r3, [r7, #0]
}
 800d4e0:	bf00      	nop
 800d4e2:	e7fe      	b.n	800d4e2 <xTaskIncrementTick+0x46>
 800d4e4:	4b40      	ldr	r3, [pc, #256]	; (800d5e8 <xTaskIncrementTick+0x14c>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	60fb      	str	r3, [r7, #12]
 800d4ea:	4b40      	ldr	r3, [pc, #256]	; (800d5ec <xTaskIncrementTick+0x150>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a3e      	ldr	r2, [pc, #248]	; (800d5e8 <xTaskIncrementTick+0x14c>)
 800d4f0:	6013      	str	r3, [r2, #0]
 800d4f2:	4a3e      	ldr	r2, [pc, #248]	; (800d5ec <xTaskIncrementTick+0x150>)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	6013      	str	r3, [r2, #0]
 800d4f8:	4b3d      	ldr	r3, [pc, #244]	; (800d5f0 <xTaskIncrementTick+0x154>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	4a3c      	ldr	r2, [pc, #240]	; (800d5f0 <xTaskIncrementTick+0x154>)
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	f000 facb 	bl	800da9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
        the	queue in the order of their wake time - meaning once one task
        has been found whose block time has not expired there is no need to
        look any further down the list. */
        if (xConstTickCount >= xNextTaskUnblockTime) {
 800d506:	4b3b      	ldr	r3, [pc, #236]	; (800d5f4 <xTaskIncrementTick+0x158>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	693a      	ldr	r2, [r7, #16]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d348      	bcc.n	800d5a2 <xTaskIncrementTick+0x106>
            for (;;) {
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800d510:	4b35      	ldr	r3, [pc, #212]	; (800d5e8 <xTaskIncrementTick+0x14c>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d104      	bne.n	800d524 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                    to the maximum possible value so it is extremely
                    unlikely that the
                    if( xTickCount >= xNextTaskUnblockTime ) test will pass
                    next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d51a:	4b36      	ldr	r3, [pc, #216]	; (800d5f4 <xTaskIncrementTick+0x158>)
 800d51c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d520:	601a      	str	r2, [r3, #0]
                    break;
 800d522:	e03e      	b.n	800d5a2 <xTaskIncrementTick+0x106>
                    /* The delayed list is not empty, get the value of the
                    item at the head of the delayed list.  This is the time
                    at which the task at the head of the delayed list must
                    be removed from the Blocked state. */
                    pxTCB =
                        listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d524:	4b30      	ldr	r3, [pc, #192]	; (800d5e8 <xTaskIncrementTick+0x14c>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68db      	ldr	r3, [r3, #12]
                    pxTCB =
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	607b      	str	r3, [r7, #4]

                    if (xConstTickCount < xItemValue) {
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d203      	bcs.n	800d544 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                        item value is the time at which the task at the head
                        of the blocked list must be removed from the Blocked
                        state -	so record the item value in
                        xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d53c:	4a2d      	ldr	r2, [pc, #180]	; (800d5f4 <xTaskIncrementTick+0x158>)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d542:	e02e      	b.n	800d5a2 <xTaskIncrementTick+0x106>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	3304      	adds	r3, #4
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe fe8a 	bl	800c262 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                    it from the event list. */
                    if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d552:	2b00      	cmp	r3, #0
 800d554:	d004      	beq.n	800d560 <xTaskIncrementTick+0xc4>
                        (void)uxListRemove(&(pxTCB->xEventListItem));
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	3318      	adds	r3, #24
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fe fe81 	bl	800c262 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                    list. */
                    prvAddTaskToReadyList(pxTCB);
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d564:	2201      	movs	r2, #1
 800d566:	409a      	lsls	r2, r3
 800d568:	4b23      	ldr	r3, [pc, #140]	; (800d5f8 <xTaskIncrementTick+0x15c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	4a22      	ldr	r2, [pc, #136]	; (800d5f8 <xTaskIncrementTick+0x15c>)
 800d570:	6013      	str	r3, [r2, #0]
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d576:	4613      	mov	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	4a1f      	ldr	r2, [pc, #124]	; (800d5fc <xTaskIncrementTick+0x160>)
 800d580:	441a      	add	r2, r3
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	3304      	adds	r3, #4
 800d586:	4619      	mov	r1, r3
 800d588:	4610      	mov	r0, r2
 800d58a:	f7fe fe0d 	bl	800c1a8 <vListInsertEnd>
                    {
                        /* Preemption is on, but a context switch should
                        only be performed if the unblocked task has a
                        priority that is equal to or higher than the
                        currently executing task. */
                        if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d592:	4b1b      	ldr	r3, [pc, #108]	; (800d600 <xTaskIncrementTick+0x164>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d598:	429a      	cmp	r2, r3
 800d59a:	d3b9      	bcc.n	800d510 <xTaskIncrementTick+0x74>
                            xSwitchRequired = pdTRUE;
 800d59c:	2301      	movs	r3, #1
 800d59e:	617b      	str	r3, [r7, #20]
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800d5a0:	e7b6      	b.n	800d510 <xTaskIncrementTick+0x74>
/* Tasks of equal priority to the currently running task will share
processing time (time slice) if preemption is on, and the application
writer has not explicitly turned time slicing off. */
#if ((configUSE_PREEMPTION == 1) && (configUSE_TIME_SLICING == 1))
        {
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
 800d5a2:	4b17      	ldr	r3, [pc, #92]	; (800d600 <xTaskIncrementTick+0x164>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a8:	4914      	ldr	r1, [pc, #80]	; (800d5fc <xTaskIncrementTick+0x160>)
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	4413      	add	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	440b      	add	r3, r1
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d901      	bls.n	800d5be <xTaskIncrementTick+0x122>
                xSwitchRequired = pdTRUE;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	617b      	str	r3, [r7, #20]
        }
#endif /* configUSE_TICK_HOOK */

#if (configUSE_PREEMPTION == 1)
        {
            if (xYieldPending != pdFALSE) {
 800d5be:	4b11      	ldr	r3, [pc, #68]	; (800d604 <xTaskIncrementTick+0x168>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d007      	beq.n	800d5d6 <xTaskIncrementTick+0x13a>
                xSwitchRequired = pdTRUE;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	617b      	str	r3, [r7, #20]
 800d5ca:	e004      	b.n	800d5d6 <xTaskIncrementTick+0x13a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_PREEMPTION */
    } else {
        ++xPendedTicks;
 800d5cc:	4b0e      	ldr	r3, [pc, #56]	; (800d608 <xTaskIncrementTick+0x16c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	4a0d      	ldr	r2, [pc, #52]	; (800d608 <xTaskIncrementTick+0x16c>)
 800d5d4:	6013      	str	r3, [r2, #0]
#if (configUSE_TICK_HOOK == 1)
        { vApplicationTickHook(); }
#endif
    }

    return xSwitchRequired;
 800d5d6:	697b      	ldr	r3, [r7, #20]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	20000d58 	.word	0x20000d58
 800d5e4:	20000d34 	.word	0x20000d34
 800d5e8:	20000ce8 	.word	0x20000ce8
 800d5ec:	20000cec 	.word	0x20000cec
 800d5f0:	20000d48 	.word	0x20000d48
 800d5f4:	20000d50 	.word	0x20000d50
 800d5f8:	20000d38 	.word	0x20000d38
 800d5fc:	20000c34 	.word	0x20000c34
 800d600:	20000c30 	.word	0x20000c30
 800d604:	20000d44 	.word	0x20000d44
 800d608:	20000d40 	.word	0x20000d40

0800d60c <vTaskSwitchContext>:
}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 800d60c:	b480      	push	{r7}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
    if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
 800d612:	4b27      	ldr	r3, [pc, #156]	; (800d6b0 <vTaskSwitchContext+0xa4>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d003      	beq.n	800d622 <vTaskSwitchContext+0x16>
        /* The scheduler is currently suspended - do not allow a context
        switch. */
        xYieldPending = pdTRUE;
 800d61a:	4b26      	ldr	r3, [pc, #152]	; (800d6b4 <vTaskSwitchContext+0xa8>)
 800d61c:	2201      	movs	r2, #1
 800d61e:	601a      	str	r2, [r3, #0]
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800d620:	e03f      	b.n	800d6a2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800d622:	4b24      	ldr	r3, [pc, #144]	; (800d6b4 <vTaskSwitchContext+0xa8>)
 800d624:	2200      	movs	r2, #0
 800d626:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d628:	4b23      	ldr	r3, [pc, #140]	; (800d6b8 <vTaskSwitchContext+0xac>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	60fb      	str	r3, [r7, #12]
    __asm volatile("clz %0, %1" : "=r"(ucReturn) : "r"(ulBitmap) : "memory");
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	fab3 f383 	clz	r3, r3
 800d634:	72fb      	strb	r3, [r7, #11]
    return ucReturn;
 800d636:	7afb      	ldrb	r3, [r7, #11]
 800d638:	f1c3 031f 	rsb	r3, r3, #31
 800d63c:	617b      	str	r3, [r7, #20]
 800d63e:	491f      	ldr	r1, [pc, #124]	; (800d6bc <vTaskSwitchContext+0xb0>)
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	4613      	mov	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4413      	add	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	440b      	add	r3, r1
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d10a      	bne.n	800d668 <vTaskSwitchContext+0x5c>
    __asm volatile("	mov %0, %1												\n"
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	f383 8811 	msr	BASEPRI, r3
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	607b      	str	r3, [r7, #4]
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <vTaskSwitchContext+0x5a>
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	4613      	mov	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	4413      	add	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4a12      	ldr	r2, [pc, #72]	; (800d6bc <vTaskSwitchContext+0xb0>)
 800d674:	4413      	add	r3, r2
 800d676:	613b      	str	r3, [r7, #16]
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	605a      	str	r2, [r3, #4]
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	3308      	adds	r3, #8
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d104      	bne.n	800d698 <vTaskSwitchContext+0x8c>
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	605a      	str	r2, [r3, #4]
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	4a08      	ldr	r2, [pc, #32]	; (800d6c0 <vTaskSwitchContext+0xb4>)
 800d6a0:	6013      	str	r3, [r2, #0]
}
 800d6a2:	bf00      	nop
 800d6a4:	371c      	adds	r7, #28
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	20000d58 	.word	0x20000d58
 800d6b4:	20000d44 	.word	0x20000d44
 800d6b8:	20000d38 	.word	0x20000d38
 800d6bc:	20000c34 	.word	0x20000c34
 800d6c0:	20000c30 	.word	0x20000c30

0800d6c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t * const pxEventList, const TickType_t xTicksToWait) {
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
    configASSERT(pxEventList);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10a      	bne.n	800d6ea <vTaskPlaceOnEventList+0x26>
    __asm volatile("	mov %0, %1												\n"
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	60fb      	str	r3, [r7, #12]
}
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
    This is placed in the list in priority order so the highest priority task
    is the first to be woken by the event.  The queue that contains the event
    list is locked, preventing simultaneous access from interrupts. */
    vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 800d6ea:	4b07      	ldr	r3, [pc, #28]	; (800d708 <vTaskPlaceOnEventList+0x44>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	3318      	adds	r3, #24
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7fe fd7c 	bl	800c1f0 <vListInsert>

    prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	6838      	ldr	r0, [r7, #0]
 800d6fc:	f000 fa92 	bl	800dc24 <prvAddCurrentTaskToDelayedList>
}
 800d700:	bf00      	nop
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	20000c30 	.word	0x20000c30

0800d70c <vTaskPlaceOnEventListRestricted>:
}
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vTaskPlaceOnEventListRestricted(List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
    configASSERT(pxEventList);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10a      	bne.n	800d734 <vTaskPlaceOnEventListRestricted+0x28>
    __asm volatile("	mov %0, %1												\n"
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	617b      	str	r3, [r7, #20]
}
 800d730:	bf00      	nop
 800d732:	e7fe      	b.n	800d732 <vTaskPlaceOnEventListRestricted+0x26>

    /* Place the event list item of the TCB in the appropriate event list.
    In this case it is assume that this is the only task that is going to
    be waiting on this event list, so the faster vListInsertEnd() function
    can be used in place of vListInsert. */
    vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 800d734:	4b0a      	ldr	r3, [pc, #40]	; (800d760 <vTaskPlaceOnEventListRestricted+0x54>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	3318      	adds	r3, #24
 800d73a:	4619      	mov	r1, r3
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7fe fd33 	bl	800c1a8 <vListInsertEnd>

    /* If the task should block indefinitely then set the block time to a
    value that will be recognised as an indefinite delay inside the
    prvAddCurrentTaskToDelayedList() function. */
    if (xWaitIndefinitely != pdFALSE) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d002      	beq.n	800d74e <vTaskPlaceOnEventListRestricted+0x42>
        xTicksToWait = portMAX_DELAY;
 800d748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d74c:	60bb      	str	r3, [r7, #8]
    }

    traceTASK_DELAY_UNTIL((xTickCount + xTicksToWait));
    prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 800d74e:	6879      	ldr	r1, [r7, #4]
 800d750:	68b8      	ldr	r0, [r7, #8]
 800d752:	f000 fa67 	bl	800dc24 <prvAddCurrentTaskToDelayedList>
}
 800d756:	bf00      	nop
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	20000c30 	.word	0x20000c30

0800d764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t * const pxEventList) {
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
    get called - the lock count on the queue will get modified instead.  This
    means exclusive access to the event list is guaranteed here.

    This function assumes that a check has already been made to ensure that
    pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	613b      	str	r3, [r7, #16]
    configASSERT(pxUnblockedTCB);
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10a      	bne.n	800d790 <xTaskRemoveFromEventList+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	60fb      	str	r3, [r7, #12]
}
 800d78c:	bf00      	nop
 800d78e:	e7fe      	b.n	800d78e <xTaskRemoveFromEventList+0x2a>
    (void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	3318      	adds	r3, #24
 800d794:	4618      	mov	r0, r3
 800d796:	f7fe fd64 	bl	800c262 <uxListRemove>

    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d79a:	4b1d      	ldr	r3, [pc, #116]	; (800d810 <xTaskRemoveFromEventList+0xac>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d11c      	bne.n	800d7dc <xTaskRemoveFromEventList+0x78>
        (void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fe fd5b 	bl	800c262 <uxListRemove>
        prvAddTaskToReadyList(pxUnblockedTCB);
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	409a      	lsls	r2, r3
 800d7b4:	4b17      	ldr	r3, [pc, #92]	; (800d814 <xTaskRemoveFromEventList+0xb0>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	4a16      	ldr	r2, [pc, #88]	; (800d814 <xTaskRemoveFromEventList+0xb0>)
 800d7bc:	6013      	str	r3, [r2, #0]
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	009b      	lsls	r3, r3, #2
 800d7c6:	4413      	add	r3, r2
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	4a13      	ldr	r2, [pc, #76]	; (800d818 <xTaskRemoveFromEventList+0xb4>)
 800d7cc:	441a      	add	r2, r3
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	3304      	adds	r3, #4
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	4610      	mov	r0, r2
 800d7d6:	f7fe fce7 	bl	800c1a8 <vListInsertEnd>
 800d7da:	e005      	b.n	800d7e8 <xTaskRemoveFromEventList+0x84>
        }
#endif
    } else {
        /* The delayed and ready lists cannot be accessed, so hold this task
        pending until the scheduler is resumed. */
        vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	3318      	adds	r3, #24
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	480e      	ldr	r0, [pc, #56]	; (800d81c <xTaskRemoveFromEventList+0xb8>)
 800d7e4:	f7fe fce0 	bl	800c1a8 <vListInsertEnd>
    }

    if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ec:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <xTaskRemoveFromEventList+0xbc>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d905      	bls.n	800d802 <xTaskRemoveFromEventList+0x9e>
        /* Return true if the task removed from the event list has a higher
        priority than the calling task.  This allows the calling task to know if
        it should force a context switch now. */
        xReturn = pdTRUE;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
        "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800d7fa:	4b0a      	ldr	r3, [pc, #40]	; (800d824 <xTaskRemoveFromEventList+0xc0>)
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	e001      	b.n	800d806 <xTaskRemoveFromEventList+0xa2>
    } else {
        xReturn = pdFALSE;
 800d802:	2300      	movs	r3, #0
 800d804:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800d806:	697b      	ldr	r3, [r7, #20]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3718      	adds	r7, #24
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	20000d58 	.word	0x20000d58
 800d814:	20000d38 	.word	0x20000d38
 800d818:	20000c34 	.word	0x20000c34
 800d81c:	20000cf0 	.word	0x20000cf0
 800d820:	20000c30 	.word	0x20000c30
 800d824:	20000d44 	.word	0x20000d44

0800d828 <vTaskInternalSetTimeOutState>:
    }
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t * const pxTimeOut) {
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d830:	4b06      	ldr	r3, [pc, #24]	; (800d84c <vTaskInternalSetTimeOutState+0x24>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800d838:	4b05      	ldr	r3, [pc, #20]	; (800d850 <vTaskInternalSetTimeOutState+0x28>)
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	605a      	str	r2, [r3, #4]
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	20000d48 	.word	0x20000d48
 800d850:	20000d34 	.word	0x20000d34

0800d854 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait) {
 800d854:	b580      	push	{r7, lr}
 800d856:	b088      	sub	sp, #32
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT(pxTimeOut);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10a      	bne.n	800d87a <xTaskCheckForTimeOut+0x26>
    __asm volatile("	mov %0, %1												\n"
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	613b      	str	r3, [r7, #16]
}
 800d876:	bf00      	nop
 800d878:	e7fe      	b.n	800d878 <xTaskCheckForTimeOut+0x24>
    configASSERT(pxTicksToWait);
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10a      	bne.n	800d896 <xTaskCheckForTimeOut+0x42>
    __asm volatile("	mov %0, %1												\n"
 800d880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	60fb      	str	r3, [r7, #12]
}
 800d892:	bf00      	nop
 800d894:	e7fe      	b.n	800d894 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800d896:	f000 ff45 	bl	800e724 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800d89a:	4b1d      	ldr	r3, [pc, #116]	; (800d910 <xTaskCheckForTimeOut+0xbc>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	69ba      	ldr	r2, [r7, #24]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	617b      	str	r3, [r7, #20]
            xReturn = pdTRUE;
        } else
#endif

#if (INCLUDE_vTaskSuspend == 1)
            if (*pxTicksToWait == portMAX_DELAY) {
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8b2:	d102      	bne.n	800d8ba <xTaskCheckForTimeOut+0x66>
            /* If INCLUDE_vTaskSuspend is set to 1 and the block time
            specified is the maximum block time then the task should block
            indefinitely, and therefore never time out. */
            xReturn = pdFALSE;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	61fb      	str	r3, [r7, #28]
 800d8b8:	e023      	b.n	800d902 <xTaskCheckForTimeOut+0xae>
        } else
#endif

            if ((xNumOfOverflows != pxTimeOut->xOverflowCount) && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	4b15      	ldr	r3, [pc, #84]	; (800d914 <xTaskCheckForTimeOut+0xc0>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d007      	beq.n	800d8d6 <xTaskCheckForTimeOut+0x82>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	69ba      	ldr	r2, [r7, #24]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d302      	bcc.n	800d8d6 <xTaskCheckForTimeOut+0x82>
            /* The tick count is greater than the time at which
            vTaskSetTimeout() was called, but has also overflowed since
            vTaskSetTimeOut() was called.  It must have wrapped all the way
            around and gone past again. This passed since vTaskSetTimeout()
            was called. */
            xReturn = pdTRUE;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	61fb      	str	r3, [r7, #28]
 800d8d4:	e015      	b.n	800d902 <xTaskCheckForTimeOut+0xae>
        } else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	697a      	ldr	r2, [r7, #20]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d20b      	bcs.n	800d8f8 <xTaskCheckForTimeOut+0xa4>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	1ad2      	subs	r2, r2, r3
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState(pxTimeOut);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff ff9b 	bl	800d828 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	61fb      	str	r3, [r7, #28]
 800d8f6:	e004      	b.n	800d902 <xTaskCheckForTimeOut+0xae>
        } else {
            *pxTicksToWait = 0;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800d8fe:	2301      	movs	r3, #1
 800d900:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800d902:	f000 ff3f 	bl	800e784 <vPortExitCritical>

    return xReturn;
 800d906:	69fb      	ldr	r3, [r7, #28]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3720      	adds	r7, #32
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	20000d34 	.word	0x20000d34
 800d914:	20000d48 	.word	0x20000d48

0800d918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 800d918:	b480      	push	{r7}
 800d91a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800d91c:	4b03      	ldr	r3, [pc, #12]	; (800d92c <vTaskMissedYield+0x14>)
 800d91e:	2201      	movs	r2, #1
 800d920:	601a      	str	r2, [r3, #0]
}
 800d922:	bf00      	nop
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr
 800d92c:	20000d44 	.word	0x20000d44

0800d930 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION(prvIdleTask, pvParameters) {
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
    portALLOCATE_SECURE_CONTEXT(configMINIMAL_SECURE_STACK_SIZE);

    for (;;) {
        /* See if any tasks have deleted themselves - if so then the idle task
        is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800d938:	f000 f852 	bl	800d9e0 <prvCheckTasksWaitingTermination>

            A critical region is not required here as we are just reading from
            the list, and an occasional incorrect value will not matter.  If
            the ready list at the idle priority contains more than one task
            then a task other than the idle task is ready to execute. */
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
 800d93c:	4b06      	ldr	r3, [pc, #24]	; (800d958 <prvIdleTask+0x28>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d9f9      	bls.n	800d938 <prvIdleTask+0x8>
                taskYIELD();
 800d944:	4b05      	ldr	r3, [pc, #20]	; (800d95c <prvIdleTask+0x2c>)
 800d946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94a:	601a      	str	r2, [r3, #0]
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800d954:	e7f0      	b.n	800d938 <prvIdleTask+0x8>
 800d956:	bf00      	nop
 800d958:	20000c34 	.word	0x20000c34
 800d95c:	e000ed04 	.word	0xe000ed04

0800d960 <prvInitialiseTaskLists>:
}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800d966:	2300      	movs	r3, #0
 800d968:	607b      	str	r3, [r7, #4]
 800d96a:	e00c      	b.n	800d986 <prvInitialiseTaskLists+0x26>
        vListInitialise(&(pxReadyTasksLists[uxPriority]));
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	4613      	mov	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4413      	add	r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4a12      	ldr	r2, [pc, #72]	; (800d9c0 <prvInitialiseTaskLists+0x60>)
 800d978:	4413      	add	r3, r2
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fe fbe7 	bl	800c14e <vListInitialise>
    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	3301      	adds	r3, #1
 800d984:	607b      	str	r3, [r7, #4]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b06      	cmp	r3, #6
 800d98a:	d9ef      	bls.n	800d96c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise(&xDelayedTaskList1);
 800d98c:	480d      	ldr	r0, [pc, #52]	; (800d9c4 <prvInitialiseTaskLists+0x64>)
 800d98e:	f7fe fbde 	bl	800c14e <vListInitialise>
    vListInitialise(&xDelayedTaskList2);
 800d992:	480d      	ldr	r0, [pc, #52]	; (800d9c8 <prvInitialiseTaskLists+0x68>)
 800d994:	f7fe fbdb 	bl	800c14e <vListInitialise>
    vListInitialise(&xPendingReadyList);
 800d998:	480c      	ldr	r0, [pc, #48]	; (800d9cc <prvInitialiseTaskLists+0x6c>)
 800d99a:	f7fe fbd8 	bl	800c14e <vListInitialise>

#if (INCLUDE_vTaskDelete == 1)
    { vListInitialise(&xTasksWaitingTermination); }
 800d99e:	480c      	ldr	r0, [pc, #48]	; (800d9d0 <prvInitialiseTaskLists+0x70>)
 800d9a0:	f7fe fbd5 	bl	800c14e <vListInitialise>
#endif /* INCLUDE_vTaskDelete */

#if (INCLUDE_vTaskSuspend == 1)
    { vListInitialise(&xSuspendedTaskList); }
 800d9a4:	480b      	ldr	r0, [pc, #44]	; (800d9d4 <prvInitialiseTaskLists+0x74>)
 800d9a6:	f7fe fbd2 	bl	800c14e <vListInitialise>
#endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
    using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800d9aa:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <prvInitialiseTaskLists+0x78>)
 800d9ac:	4a05      	ldr	r2, [pc, #20]	; (800d9c4 <prvInitialiseTaskLists+0x64>)
 800d9ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9b0:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <prvInitialiseTaskLists+0x7c>)
 800d9b2:	4a05      	ldr	r2, [pc, #20]	; (800d9c8 <prvInitialiseTaskLists+0x68>)
 800d9b4:	601a      	str	r2, [r3, #0]
}
 800d9b6:	bf00      	nop
 800d9b8:	3708      	adds	r7, #8
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	20000c34 	.word	0x20000c34
 800d9c4:	20000cc0 	.word	0x20000cc0
 800d9c8:	20000cd4 	.word	0x20000cd4
 800d9cc:	20000cf0 	.word	0x20000cf0
 800d9d0:	20000d04 	.word	0x20000d04
 800d9d4:	20000d1c 	.word	0x20000d1c
 800d9d8:	20000ce8 	.word	0x20000ce8
 800d9dc:	20000cec 	.word	0x20000cec

0800d9e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
        being called too often in the idle task. */
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800d9e6:	e019      	b.n	800da1c <prvCheckTasksWaitingTermination+0x3c>
            taskENTER_CRITICAL();
 800d9e8:	f000 fe9c 	bl	800e724 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800d9ec:	4b10      	ldr	r3, [pc, #64]	; (800da30 <prvCheckTasksWaitingTermination+0x50>)
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	607b      	str	r3, [r7, #4]
                    (&xTasksWaitingTermination)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                (void)uxListRemove(&(pxTCB->xStateListItem));
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fe fc32 	bl	800c262 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800d9fe:	4b0d      	ldr	r3, [pc, #52]	; (800da34 <prvCheckTasksWaitingTermination+0x54>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	3b01      	subs	r3, #1
 800da04:	4a0b      	ldr	r2, [pc, #44]	; (800da34 <prvCheckTasksWaitingTermination+0x54>)
 800da06:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800da08:	4b0b      	ldr	r3, [pc, #44]	; (800da38 <prvCheckTasksWaitingTermination+0x58>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3b01      	subs	r3, #1
 800da0e:	4a0a      	ldr	r2, [pc, #40]	; (800da38 <prvCheckTasksWaitingTermination+0x58>)
 800da10:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800da12:	f000 feb7 	bl	800e784 <vPortExitCritical>

            prvDeleteTCB(pxTCB);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 f810 	bl	800da3c <prvDeleteTCB>
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800da1c:	4b06      	ldr	r3, [pc, #24]	; (800da38 <prvCheckTasksWaitingTermination+0x58>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d1e1      	bne.n	800d9e8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
#endif /* INCLUDE_vTaskDelete */
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	20000d04 	.word	0x20000d04
 800da34:	20000d30 	.word	0x20000d30
 800da38:	20000d18 	.word	0x20000d18

0800da3c <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

static void prvDeleteTCB(TCB_t * pxTCB) {
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
#elif (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
    {
        /* The task could have been allocated statically or dynamically, so
        check what was statically allocated before trying to free the
        memory. */
        if (pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d108      	bne.n	800da60 <prvDeleteTCB+0x24>
            /* Both the stack and TCB were allocated dynamically, so both
            must be freed. */
            vPortFree(pxTCB->pxStack);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da52:	4618      	mov	r0, r3
 800da54:	f000 ff9a 	bl	800e98c <vPortFree>
            vPortFree(pxTCB);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 ff97 	bl	800e98c <vPortFree>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif                                                 /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800da5e:	e018      	b.n	800da92 <prvDeleteTCB+0x56>
        } else if (pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800da66:	2b01      	cmp	r3, #1
 800da68:	d103      	bne.n	800da72 <prvDeleteTCB+0x36>
            vPortFree(pxTCB);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 ff8e 	bl	800e98c <vPortFree>
}
 800da70:	e00f      	b.n	800da92 <prvDeleteTCB+0x56>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d00a      	beq.n	800da92 <prvDeleteTCB+0x56>
    __asm volatile("	mov %0, %1												\n"
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	60fb      	str	r3, [r7, #12]
}
 800da8e:	bf00      	nop
 800da90:	e7fe      	b.n	800da90 <prvDeleteTCB+0x54>
}
 800da92:	bf00      	nop
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;

    if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800daa2:	4b0c      	ldr	r3, [pc, #48]	; (800dad4 <prvResetNextTaskUnblockTime+0x38>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d104      	bne.n	800dab6 <prvResetNextTaskUnblockTime+0x1a>
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
        the maximum possible value so it is	extremely unlikely that the
        if( xTickCount >= xNextTaskUnblockTime ) test will pass until
        there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800daac:	4b0a      	ldr	r3, [pc, #40]	; (800dad8 <prvResetNextTaskUnblockTime+0x3c>)
 800daae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dab2:	601a      	str	r2, [r3, #0]
        which the task at the head of the delayed list should be removed
        from the Blocked state. */
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    }
}
 800dab4:	e008      	b.n	800dac8 <prvResetNextTaskUnblockTime+0x2c>
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab6:	4b07      	ldr	r3, [pc, #28]	; (800dad4 <prvResetNextTaskUnblockTime+0x38>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	607b      	str	r3, [r7, #4]
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	4a04      	ldr	r2, [pc, #16]	; (800dad8 <prvResetNextTaskUnblockTime+0x3c>)
 800dac6:	6013      	str	r3, [r2, #0]
}
 800dac8:	bf00      	nop
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	20000ce8 	.word	0x20000ce8
 800dad8:	20000d50 	.word	0x20000d50

0800dadc <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))

BaseType_t xTaskGetSchedulerState(void) {
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if (xSchedulerRunning == pdFALSE) {
 800dae2:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <xTaskGetSchedulerState+0x34>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d102      	bne.n	800daf0 <xTaskGetSchedulerState+0x14>
        xReturn = taskSCHEDULER_NOT_STARTED;
 800daea:	2301      	movs	r3, #1
 800daec:	607b      	str	r3, [r7, #4]
 800daee:	e008      	b.n	800db02 <xTaskGetSchedulerState+0x26>
    } else {
        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800daf0:	4b08      	ldr	r3, [pc, #32]	; (800db14 <xTaskGetSchedulerState+0x38>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d102      	bne.n	800dafe <xTaskGetSchedulerState+0x22>
            xReturn = taskSCHEDULER_RUNNING;
 800daf8:	2302      	movs	r3, #2
 800dafa:	607b      	str	r3, [r7, #4]
 800dafc:	e001      	b.n	800db02 <xTaskGetSchedulerState+0x26>
        } else {
            xReturn = taskSCHEDULER_SUSPENDED;
 800dafe:	2300      	movs	r3, #0
 800db00:	607b      	str	r3, [r7, #4]
        }
    }

    return xReturn;
 800db02:	687b      	ldr	r3, [r7, #4]
}
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	20000d3c 	.word	0x20000d3c
 800db14:	20000d58 	.word	0x20000d58

0800db18 <xTaskPriorityDisinherit>:
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

#if (configUSE_MUTEXES == 1)

BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder) {
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
    TCB_t * const pxTCB = pxMutexHolder;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	613b      	str	r3, [r7, #16]
    BaseType_t xReturn = pdFALSE;
 800db24:	2300      	movs	r3, #0
 800db26:	617b      	str	r3, [r7, #20]

    if (pxMutexHolder != NULL) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d06e      	beq.n	800dc0c <xTaskPriorityDisinherit+0xf4>
        /* A task can only have an inherited priority if it holds the mutex.
        If the mutex is held by a task then it cannot be given from an
        interrupt, and if a mutex is given by the holding task then it must
        be the running state task. */
        configASSERT(pxTCB == pxCurrentTCB);
 800db2e:	4b3a      	ldr	r3, [pc, #232]	; (800dc18 <xTaskPriorityDisinherit+0x100>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	429a      	cmp	r2, r3
 800db36:	d00a      	beq.n	800db4e <xTaskPriorityDisinherit+0x36>
    __asm volatile("	mov %0, %1												\n"
 800db38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	60fb      	str	r3, [r7, #12]
}
 800db4a:	bf00      	nop
 800db4c:	e7fe      	b.n	800db4c <xTaskPriorityDisinherit+0x34>
        configASSERT(pxTCB->uxMutexesHeld);
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10a      	bne.n	800db6c <xTaskPriorityDisinherit+0x54>
    __asm volatile("	mov %0, %1												\n"
 800db56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5a:	f383 8811 	msr	BASEPRI, r3
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f3bf 8f4f 	dsb	sy
 800db66:	60bb      	str	r3, [r7, #8]
}
 800db68:	bf00      	nop
 800db6a:	e7fe      	b.n	800db6a <xTaskPriorityDisinherit+0x52>
        (pxTCB->uxMutexesHeld)--;
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db70:	1e5a      	subs	r2, r3, #1
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	659a      	str	r2, [r3, #88]	; 0x58

        /* Has the holder of the mutex inherited the priority of another
        task? */
        if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db7e:	429a      	cmp	r2, r3
 800db80:	d044      	beq.n	800dc0c <xTaskPriorityDisinherit+0xf4>
            /* Only disinherit if no other mutexes are held. */
            if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db86:	2b00      	cmp	r3, #0
 800db88:	d140      	bne.n	800dc0c <xTaskPriorityDisinherit+0xf4>
                /* A task can only have an inherited priority if it holds
                the mutex.  If the mutex is held by a task then it cannot be
                given from an interrupt, and if a mutex is given by the
                holding task then it must be the running state task.  Remove
                the holding task from the ready/delayed list. */
                if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	3304      	adds	r3, #4
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fe fb67 	bl	800c262 <uxListRemove>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d115      	bne.n	800dbc6 <xTaskPriorityDisinherit+0xae>
                    taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db9e:	491f      	ldr	r1, [pc, #124]	; (800dc1c <xTaskPriorityDisinherit+0x104>)
 800dba0:	4613      	mov	r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	4413      	add	r3, r2
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	440b      	add	r3, r1
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10a      	bne.n	800dbc6 <xTaskPriorityDisinherit+0xae>
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbba:	43da      	mvns	r2, r3
 800dbbc:	4b18      	ldr	r3, [pc, #96]	; (800dc20 <xTaskPriorityDisinherit+0x108>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	4a17      	ldr	r2, [pc, #92]	; (800dc20 <xTaskPriorityDisinherit+0x108>)
 800dbc4:	6013      	str	r3, [r2, #0]
                }

                /* Disinherit the priority before adding the task into the
                new	ready list. */
                traceTASK_PRIORITY_DISINHERIT(pxTCB, pxTCB->uxBasePriority);
                pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Reset the event list item value.  It cannot be in use for
                any other purpose if this task is running, and it must be
                running to give back the mutex. */
                listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)pxTCB->uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd2:	f1c3 0207 	rsb	r2, r3, #7
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	619a      	str	r2, [r3, #24]
                prvAddTaskToReadyList(pxTCB);
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbde:	2201      	movs	r2, #1
 800dbe0:	409a      	lsls	r2, r3
 800dbe2:	4b0f      	ldr	r3, [pc, #60]	; (800dc20 <xTaskPriorityDisinherit+0x108>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	4a0d      	ldr	r2, [pc, #52]	; (800dc20 <xTaskPriorityDisinherit+0x108>)
 800dbea:	6013      	str	r3, [r2, #0]
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4a08      	ldr	r2, [pc, #32]	; (800dc1c <xTaskPriorityDisinherit+0x104>)
 800dbfa:	441a      	add	r2, r3
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	3304      	adds	r3, #4
 800dc00:	4619      	mov	r1, r3
 800dc02:	4610      	mov	r0, r2
 800dc04:	f7fe fad0 	bl	800c1a8 <vListInsertEnd>
                in an order different to that in which they were taken.
                If a context switch did not occur when the first mutex was
                returned, even if a task was waiting on it, then a context
                switch should occur when the last mutex is returned whether
                a task is waiting on it or not. */
                xReturn = pdTRUE;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	617b      	str	r3, [r7, #20]
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
 800dc0c:	697b      	ldr	r3, [r7, #20]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	20000c30 	.word	0x20000c30
 800dc1c:	20000c34 	.word	0x20000c34
 800dc20:	20000d38 	.word	0x20000d38

0800dc24 <prvAddCurrentTaskToDelayedList>:
}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely) {
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800dc2e:	4b29      	ldr	r3, [pc, #164]	; (800dcd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	60fb      	str	r3, [r7, #12]
    }
#endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
 800dc34:	4b28      	ldr	r3, [pc, #160]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe fb11 	bl	800c262 <uxListRemove>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10b      	bne.n	800dc5e <prvAddCurrentTaskToDelayedList+0x3a>
        /* The current task must be in a ready list, so there is no need to
        check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY(pxCurrentTCB->uxPriority,
 800dc46:	4b24      	ldr	r3, [pc, #144]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc52:	43da      	mvns	r2, r3
 800dc54:	4b21      	ldr	r3, [pc, #132]	; (800dcdc <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4013      	ands	r3, r2
 800dc5a:	4a20      	ldr	r2, [pc, #128]	; (800dcdc <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc5c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

#if (INCLUDE_vTaskSuspend == 1)
    {
        if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc64:	d10a      	bne.n	800dc7c <prvAddCurrentTaskToDelayedList+0x58>
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d007      	beq.n	800dc7c <prvAddCurrentTaskToDelayedList+0x58>
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
 800dc6c:	4b1a      	ldr	r3, [pc, #104]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	3304      	adds	r3, #4
 800dc72:	4619      	mov	r1, r3
 800dc74:	481a      	ldr	r0, [pc, #104]	; (800dce0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dc76:	f7fe fa97 	bl	800c1a8 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        (void)xCanBlockIndefinitely;
    }
#endif /* INCLUDE_vTaskSuspend */
}
 800dc7a:	e026      	b.n	800dcca <prvAddCurrentTaskToDelayedList+0xa6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4413      	add	r3, r2
 800dc82:	60bb      	str	r3, [r7, #8]
            listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
 800dc84:	4b14      	ldr	r3, [pc, #80]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	605a      	str	r2, [r3, #4]
            if (xTimeToWake < xConstTickCount) {
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d209      	bcs.n	800dca8 <prvAddCurrentTaskToDelayedList+0x84>
                vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800dc94:	4b13      	ldr	r3, [pc, #76]	; (800dce4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	4b0f      	ldr	r3, [pc, #60]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4610      	mov	r0, r2
 800dca2:	f7fe faa5 	bl	800c1f0 <vListInsert>
}
 800dca6:	e010      	b.n	800dcca <prvAddCurrentTaskToDelayedList+0xa6>
                vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800dca8:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	4b0a      	ldr	r3, [pc, #40]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	f7fe fa9b 	bl	800c1f0 <vListInsert>
                if (xTimeToWake < xNextTaskUnblockTime) {
 800dcba:	4b0c      	ldr	r3, [pc, #48]	; (800dcec <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d202      	bcs.n	800dcca <prvAddCurrentTaskToDelayedList+0xa6>
                    xNextTaskUnblockTime = xTimeToWake;
 800dcc4:	4a09      	ldr	r2, [pc, #36]	; (800dcec <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	6013      	str	r3, [r2, #0]
}
 800dcca:	bf00      	nop
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20000d34 	.word	0x20000d34
 800dcd8:	20000c30 	.word	0x20000c30
 800dcdc:	20000d38 	.word	0x20000d38
 800dce0:	20000d1c 	.word	0x20000d1c
 800dce4:	20000cec 	.word	0x20000cec
 800dce8:	20000ce8 	.word	0x20000ce8
 800dcec:	20000d50 	.word	0x20000d50

0800dcf0 <xTimerCreateTimerTask>:
 */
static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void) {
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08a      	sub	sp, #40	; 0x28
 800dcf4:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdFAIL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	617b      	str	r3, [r7, #20]

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
 800dcfa:	f000 fb63 	bl	800e3c4 <prvCheckForValidListAndQueue>

    if (xTimerQueue != NULL) {
 800dcfe:	4b1c      	ldr	r3, [pc, #112]	; (800dd70 <xTimerCreateTimerTask+0x80>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d021      	beq.n	800dd4a <xTimerCreateTimerTask+0x5a>
#if (configSUPPORT_STATIC_ALLOCATION == 1)
        {
            StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	60fb      	str	r3, [r7, #12]
            StackType_t * pxTimerTaskStackBuffer = NULL;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	60bb      	str	r3, [r7, #8]
            uint32_t ulTimerTaskStackSize;

            vApplicationGetTimerTaskMemory(&pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize);
 800dd0e:	1d3a      	adds	r2, r7, #4
 800dd10:	f107 0108 	add.w	r1, r7, #8
 800dd14:	f107 030c 	add.w	r3, r7, #12
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7f3 fdbb 	bl	8001894 <vApplicationGetTimerTaskMemory>
            xTimerTaskHandle = xTaskCreateStatic(prvTimerTask, configTIMER_SERVICE_TASK_NAME, ulTimerTaskStackSize, NULL, ((UBaseType_t)configTIMER_TASK_PRIORITY) | portPRIVILEGE_BIT, pxTimerTaskStackBuffer, pxTimerTaskTCBBuffer);
 800dd1e:	6879      	ldr	r1, [r7, #4]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	9202      	str	r2, [sp, #8]
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	2302      	movs	r3, #2
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	460a      	mov	r2, r1
 800dd30:	4910      	ldr	r1, [pc, #64]	; (800dd74 <xTimerCreateTimerTask+0x84>)
 800dd32:	4811      	ldr	r0, [pc, #68]	; (800dd78 <xTimerCreateTimerTask+0x88>)
 800dd34:	f7fe ffa8 	bl	800cc88 <xTaskCreateStatic>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	4a10      	ldr	r2, [pc, #64]	; (800dd7c <xTimerCreateTimerTask+0x8c>)
 800dd3c:	6013      	str	r3, [r2, #0]

            if (xTimerTaskHandle != NULL) {
 800dd3e:	4b0f      	ldr	r3, [pc, #60]	; (800dd7c <xTimerCreateTimerTask+0x8c>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d001      	beq.n	800dd4a <xTimerCreateTimerTask+0x5a>
                xReturn = pdPASS;
 800dd46:	2301      	movs	r3, #1
 800dd48:	617b      	str	r3, [r7, #20]
#endif /* configSUPPORT_STATIC_ALLOCATION */
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT(xReturn);
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10a      	bne.n	800dd66 <xTimerCreateTimerTask+0x76>
    __asm volatile("	mov %0, %1												\n"
 800dd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	613b      	str	r3, [r7, #16]
}
 800dd62:	bf00      	nop
 800dd64:	e7fe      	b.n	800dd64 <xTimerCreateTimerTask+0x74>
    return xReturn;
 800dd66:	697b      	ldr	r3, [r7, #20]
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3718      	adds	r7, #24
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	20000d8c 	.word	0x20000d8c
 800dd74:	08012434 	.word	0x08012434
 800dd78:	0800dfa5 	.word	0x0800dfa5
 800dd7c:	20000d90 	.word	0x20000d90

0800dd80 <xTimerCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

TimerHandle_t xTimerCreate(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                           const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b088      	sub	sp, #32
 800dd84:	af02      	add	r7, sp, #8
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
 800dd8c:	603b      	str	r3, [r7, #0]
    Timer_t * pxNewTimer;

    pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dd8e:	2028      	movs	r0, #40	; 0x28
 800dd90:	f000 fdea 	bl	800e968 <pvPortMalloc>
 800dd94:	6178      	str	r0, [r7, #20]

    if (pxNewTimer != NULL) {
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d00d      	beq.n	800ddb8 <xTimerCreate+0x38>
        /* Status is thus far zero as the timer is not created statically
        and has not been started.  The auto-reload bit may get set in
        prvInitialiseNewTimer. */
        pxNewTimer->ucStatus = 0x00;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        prvInitialiseNewTimer(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer);
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	9301      	str	r3, [sp, #4]
 800dda8:	6a3b      	ldr	r3, [r7, #32]
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	68b9      	ldr	r1, [r7, #8]
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f000 f805 	bl	800ddc2 <prvInitialiseNewTimer>
    }

    return pxNewTimer;
 800ddb8:	697b      	ldr	r3, [r7, #20]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3718      	adds	r7, #24
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <prvInitialiseNewTimer>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) {
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b086      	sub	sp, #24
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	60f8      	str	r0, [r7, #12]
 800ddca:	60b9      	str	r1, [r7, #8]
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	603b      	str	r3, [r7, #0]
    /* 0 is not a valid value for xTimerPeriodInTicks. */
    configASSERT((xTimerPeriodInTicks > 0));
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d10a      	bne.n	800ddec <prvInitialiseNewTimer+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800ddd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	617b      	str	r3, [r7, #20]
}
 800dde8:	bf00      	nop
 800ddea:	e7fe      	b.n	800ddea <prvInitialiseNewTimer+0x28>

    if (pxNewTimer != NULL) {
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d01e      	beq.n	800de30 <prvInitialiseNewTimer+0x6e>
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
 800ddf2:	f000 fae7 	bl	800e3c4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0a:	6a3a      	ldr	r2, [r7, #32]
 800de0c:	621a      	str	r2, [r3, #32]
        vListInitialiseItem(&(pxNewTimer->xTimerListItem));
 800de0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de10:	3304      	adds	r3, #4
 800de12:	4618      	mov	r0, r3
 800de14:	f7fe f9bb 	bl	800c18e <vListInitialiseItem>
        if (uxAutoReload != pdFALSE) {
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d008      	beq.n	800de30 <prvInitialiseNewTimer+0x6e>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de24:	f043 0304 	orr.w	r3, r3, #4
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        traceTIMER_CREATE(pxNewTimer);
    }
}
 800de30:	bf00      	nop
 800de32:	3718      	adds	r7, #24
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait) {
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08a      	sub	sp, #40	; 0x28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 800de46:	2300      	movs	r3, #0
 800de48:	627b      	str	r3, [r7, #36]	; 0x24
    DaemonTaskMessage_t xMessage;

    configASSERT(xTimer);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10a      	bne.n	800de66 <xTimerGenericCommand+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	623b      	str	r3, [r7, #32]
}
 800de62:	bf00      	nop
 800de64:	e7fe      	b.n	800de64 <xTimerGenericCommand+0x2c>

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if (xTimerQueue != NULL) {
 800de66:	4b1a      	ldr	r3, [pc, #104]	; (800ded0 <xTimerGenericCommand+0x98>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d02a      	beq.n	800dec4 <xTimerGenericCommand+0x8c>
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	617b      	str	r3, [r7, #20]
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	61bb      	str	r3, [r7, #24]
        xMessage.u.xTimerParameters.pxTimer = xTimer;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	61fb      	str	r3, [r7, #28]

        if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	2b05      	cmp	r3, #5
 800de7e:	dc18      	bgt.n	800deb2 <xTimerGenericCommand+0x7a>
            if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 800de80:	f7ff fe2c 	bl	800dadc <xTaskGetSchedulerState>
 800de84:	4603      	mov	r3, r0
 800de86:	2b02      	cmp	r3, #2
 800de88:	d109      	bne.n	800de9e <xTimerGenericCommand+0x66>
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
 800de8a:	4b11      	ldr	r3, [pc, #68]	; (800ded0 <xTimerGenericCommand+0x98>)
 800de8c:	6818      	ldr	r0, [r3, #0]
 800de8e:	f107 0114 	add.w	r1, r7, #20
 800de92:	2300      	movs	r3, #0
 800de94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de96:	f7fe fb0f 	bl	800c4b8 <xQueueGenericSend>
 800de9a:	6278      	str	r0, [r7, #36]	; 0x24
 800de9c:	e012      	b.n	800dec4 <xTimerGenericCommand+0x8c>
            } else {
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
 800de9e:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <xTimerGenericCommand+0x98>)
 800dea0:	6818      	ldr	r0, [r3, #0]
 800dea2:	f107 0114 	add.w	r1, r7, #20
 800dea6:	2300      	movs	r3, #0
 800dea8:	2200      	movs	r2, #0
 800deaa:	f7fe fb05 	bl	800c4b8 <xQueueGenericSend>
 800deae:	6278      	str	r0, [r7, #36]	; 0x24
 800deb0:	e008      	b.n	800dec4 <xTimerGenericCommand+0x8c>
            }
        } else {
            xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
 800deb2:	4b07      	ldr	r3, [pc, #28]	; (800ded0 <xTimerGenericCommand+0x98>)
 800deb4:	6818      	ldr	r0, [r3, #0]
 800deb6:	f107 0114 	add.w	r1, r7, #20
 800deba:	2300      	movs	r3, #0
 800debc:	683a      	ldr	r2, [r7, #0]
 800debe:	f7fe fbf9 	bl	800c6b4 <xQueueGenericSendFromISR>
 800dec2:	6278      	str	r0, [r7, #36]	; 0x24
        traceTIMER_COMMAND_SEND(xTimer, xCommandID, xOptionalValue, xReturn);
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
 800dec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3728      	adds	r7, #40	; 0x28
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	20000d8c 	.word	0x20000d8c

0800ded4 <xTimerGetPeriod>:
    configASSERT((xTimerTaskHandle != NULL));
    return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod(TimerHandle_t xTimer) {
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
    Timer_t * pxTimer = xTimer;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d10a      	bne.n	800defc <xTimerGetPeriod+0x28>
    __asm volatile("	mov %0, %1												\n"
 800dee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deea:	f383 8811 	msr	BASEPRI, r3
 800deee:	f3bf 8f6f 	isb	sy
 800def2:	f3bf 8f4f 	dsb	sy
 800def6:	60bb      	str	r3, [r7, #8]
}
 800def8:	bf00      	nop
 800defa:	e7fe      	b.n	800defa <xTimerGetPeriod+0x26>
    return pxTimer->xTimerPeriodInTicks;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	699b      	ldr	r3, [r3, #24]
}
 800df00:	4618      	mov	r0, r3
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <prvProcessExpiredTimer>:
    configASSERT(xTimer);
    return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime, const TickType_t xTimeNow) {
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b088      	sub	sp, #32
 800df10:	af02      	add	r7, sp, #8
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
    BaseType_t xResult;
    Timer_t * const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800df16:	4b22      	ldr	r3, [pc, #136]	; (800dfa0 <prvProcessExpiredTimer+0x94>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    (void)uxListRemove(&(pxTimer->xTimerListItem));
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	3304      	adds	r3, #4
 800df24:	4618      	mov	r0, r3
 800df26:	f7fe f99c 	bl	800c262 <uxListRemove>
    traceTIMER_EXPIRED(pxTimer);

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df30:	f003 0304 	and.w	r3, r3, #4
 800df34:	2b00      	cmp	r3, #0
 800df36:	d022      	beq.n	800df7e <prvProcessExpiredTimer+0x72>
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if (prvInsertTimerInActiveList(pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime) != pdFALSE) {
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	699a      	ldr	r2, [r3, #24]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	18d1      	adds	r1, r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	683a      	ldr	r2, [r7, #0]
 800df44:	6978      	ldr	r0, [r7, #20]
 800df46:	f000 f8d1 	bl	800e0ec <prvInsertTimerInActiveList>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d01f      	beq.n	800df90 <prvProcessExpiredTimer+0x84>
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800df50:	2300      	movs	r3, #0
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	2300      	movs	r3, #0
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	2100      	movs	r1, #0
 800df5a:	6978      	ldr	r0, [r7, #20]
 800df5c:	f7ff ff6c 	bl	800de38 <xTimerGenericCommand>
 800df60:	6138      	str	r0, [r7, #16]
            configASSERT(xResult);
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d113      	bne.n	800df90 <prvProcessExpiredTimer+0x84>
    __asm volatile("	mov %0, %1												\n"
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	60fb      	str	r3, [r7, #12]
}
 800df7a:	bf00      	nop
 800df7c:	e7fe      	b.n	800df7c <prvProcessExpiredTimer+0x70>
            (void)xResult;
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df84:	f023 0301 	bic.w	r3, r3, #1
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	6a1b      	ldr	r3, [r3, #32]
 800df94:	6978      	ldr	r0, [r7, #20]
 800df96:	4798      	blx	r3
}
 800df98:	bf00      	nop
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	20000d84 	.word	0x20000d84

0800dfa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION(prvTimerTask, pvParameters) {
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

    for (;;) {
        /* Query the timers list to see if it contains any timers, and if so,
        obtain the time at which the next timer will expire. */
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800dfac:	f107 0308 	add.w	r3, r7, #8
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 f857 	bl	800e064 <prvGetNextExpireTime>
 800dfb6:	60f8      	str	r0, [r7, #12]

        /* If a timer has expired, process it.  Otherwise, block this task
        until either a timer does expire, or a command is received. */
        prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	4619      	mov	r1, r3
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f000 f803 	bl	800dfc8 <prvProcessTimerOrBlockTask>

        /* Empty the command queue. */
        prvProcessReceivedCommands();
 800dfc2:	f000 f8d5 	bl	800e170 <prvProcessReceivedCommands>
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800dfc6:	e7f1      	b.n	800dfac <prvTimerTask+0x8>

0800dfc8 <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime, BaseType_t xListWasEmpty) {
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeNow;
    BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
 800dfd2:	f7ff f9a9 	bl	800d328 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800dfd6:	f107 0308 	add.w	r3, r7, #8
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 f866 	bl	800e0ac <prvSampleTimeNow>
 800dfe0:	60f8      	str	r0, [r7, #12]
        if (xTimerListsWereSwitched == pdFALSE) {
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d130      	bne.n	800e04a <prvProcessTimerOrBlockTask+0x82>
            /* The tick count has not overflowed, has the timer expired? */
            if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10a      	bne.n	800e004 <prvProcessTimerOrBlockTask+0x3c>
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d806      	bhi.n	800e004 <prvProcessTimerOrBlockTask+0x3c>
                (void)xTaskResumeAll();
 800dff6:	f7ff f9a5 	bl	800d344 <xTaskResumeAll>
                prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
 800dffa:	68f9      	ldr	r1, [r7, #12]
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff ff85 	bl	800df0c <prvProcessExpiredTimer>
            }
        } else {
            (void)xTaskResumeAll();
        }
    }
}
 800e002:	e024      	b.n	800e04e <prvProcessTimerOrBlockTask+0x86>
                if (xListWasEmpty != pdFALSE) {
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d008      	beq.n	800e01c <prvProcessTimerOrBlockTask+0x54>
                    xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
 800e00a:	4b13      	ldr	r3, [pc, #76]	; (800e058 <prvProcessTimerOrBlockTask+0x90>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d101      	bne.n	800e018 <prvProcessTimerOrBlockTask+0x50>
 800e014:	2301      	movs	r3, #1
 800e016:	e000      	b.n	800e01a <prvProcessTimerOrBlockTask+0x52>
 800e018:	2300      	movs	r3, #0
 800e01a:	603b      	str	r3, [r7, #0]
                vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
 800e01c:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <prvProcessTimerOrBlockTask+0x94>)
 800e01e:	6818      	ldr	r0, [r3, #0]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	683a      	ldr	r2, [r7, #0]
 800e028:	4619      	mov	r1, r3
 800e02a:	f7fe fdf9 	bl	800cc20 <vQueueWaitForMessageRestricted>
                if (xTaskResumeAll() == pdFALSE) {
 800e02e:	f7ff f989 	bl	800d344 <xTaskResumeAll>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10a      	bne.n	800e04e <prvProcessTimerOrBlockTask+0x86>
                    portYIELD_WITHIN_API();
 800e038:	4b09      	ldr	r3, [pc, #36]	; (800e060 <prvProcessTimerOrBlockTask+0x98>)
 800e03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e03e:	601a      	str	r2, [r3, #0]
 800e040:	f3bf 8f4f 	dsb	sy
 800e044:	f3bf 8f6f 	isb	sy
}
 800e048:	e001      	b.n	800e04e <prvProcessTimerOrBlockTask+0x86>
            (void)xTaskResumeAll();
 800e04a:	f7ff f97b 	bl	800d344 <xTaskResumeAll>
}
 800e04e:	bf00      	nop
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20000d88 	.word	0x20000d88
 800e05c:	20000d8c 	.word	0x20000d8c
 800e060:	e000ed04 	.word	0xe000ed04

0800e064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t * const pxListWasEmpty) {
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
 800e06c:	4b0e      	ldr	r3, [pc, #56]	; (800e0a8 <prvGetNextExpireTime+0x44>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d101      	bne.n	800e07a <prvGetNextExpireTime+0x16>
 800e076:	2201      	movs	r2, #1
 800e078:	e000      	b.n	800e07c <prvGetNextExpireTime+0x18>
 800e07a:	2200      	movs	r2, #0
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	601a      	str	r2, [r3, #0]
    if (*pxListWasEmpty == pdFALSE) {
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d105      	bne.n	800e094 <prvGetNextExpireTime+0x30>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800e088:	4b07      	ldr	r3, [pc, #28]	; (800e0a8 <prvGetNextExpireTime+0x44>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	60fb      	str	r3, [r7, #12]
 800e092:	e001      	b.n	800e098 <prvGetNextExpireTime+0x34>
    } else {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = (TickType_t)0U;
 800e094:	2300      	movs	r3, #0
 800e096:	60fb      	str	r3, [r7, #12]
    }

    return xNextExpireTime;
 800e098:	68fb      	ldr	r3, [r7, #12]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	20000d84 	.word	0x20000d84

0800e0ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t * const pxTimerListsWereSwitched) {
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
    TickType_t xTimeNow;
    PRIVILEGED_DATA static TickType_t xLastTime = (TickType_t)0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
 800e0b4:	f7ff f9e2 	bl	800d47c <xTaskGetTickCount>
 800e0b8:	60f8      	str	r0, [r7, #12]

    if (xTimeNow < xLastTime) {
 800e0ba:	4b0b      	ldr	r3, [pc, #44]	; (800e0e8 <prvSampleTimeNow+0x3c>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d205      	bcs.n	800e0d0 <prvSampleTimeNow+0x24>
        prvSwitchTimerLists();
 800e0c4:	f000 f91a 	bl	800e2fc <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	601a      	str	r2, [r3, #0]
 800e0ce:	e002      	b.n	800e0d6 <prvSampleTimeNow+0x2a>
    } else {
        *pxTimerListsWereSwitched = pdFALSE;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	601a      	str	r2, [r3, #0]
    }

    xLastTime = xTimeNow;
 800e0d6:	4a04      	ldr	r2, [pc, #16]	; (800e0e8 <prvSampleTimeNow+0x3c>)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6013      	str	r3, [r2, #0]

    return xTimeNow;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20000d94 	.word	0x20000d94

0800e0ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime) {
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	603b      	str	r3, [r7, #0]
    BaseType_t xProcessTimerNow = pdFALSE;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	617b      	str	r3, [r7, #20]

    listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	605a      	str	r2, [r3, #4]
    listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	611a      	str	r2, [r3, #16]

    if (xNextExpiryTime <= xTimeNow) {
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d812      	bhi.n	800e138 <prvInsertTimerInActiveList+0x4c>
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if (((TickType_t)(xTimeNow - xCommandTime)) >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	1ad2      	subs	r2, r2, r3
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d302      	bcc.n	800e126 <prvInsertTimerInActiveList+0x3a>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
 800e120:	2301      	movs	r3, #1
 800e122:	617b      	str	r3, [r7, #20]
 800e124:	e01b      	b.n	800e15e <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
 800e126:	4b10      	ldr	r3, [pc, #64]	; (800e168 <prvInsertTimerInActiveList+0x7c>)
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	3304      	adds	r3, #4
 800e12e:	4619      	mov	r1, r3
 800e130:	4610      	mov	r0, r2
 800e132:	f7fe f85d 	bl	800c1f0 <vListInsert>
 800e136:	e012      	b.n	800e15e <prvInsertTimerInActiveList+0x72>
        }
    } else {
        if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d206      	bcs.n	800e14e <prvInsertTimerInActiveList+0x62>
 800e140:	68ba      	ldr	r2, [r7, #8]
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	429a      	cmp	r2, r3
 800e146:	d302      	bcc.n	800e14e <prvInsertTimerInActiveList+0x62>
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
 800e148:	2301      	movs	r3, #1
 800e14a:	617b      	str	r3, [r7, #20]
 800e14c:	e007      	b.n	800e15e <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800e14e:	4b07      	ldr	r3, [pc, #28]	; (800e16c <prvInsertTimerInActiveList+0x80>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	3304      	adds	r3, #4
 800e156:	4619      	mov	r1, r3
 800e158:	4610      	mov	r0, r2
 800e15a:	f7fe f849 	bl	800c1f0 <vListInsert>
        }
    }

    return xProcessTimerNow;
 800e15e:	697b      	ldr	r3, [r7, #20]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	20000d88 	.word	0x20000d88
 800e16c:	20000d84 	.word	0x20000d84

0800e170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void) {
 800e170:	b580      	push	{r7, lr}
 800e172:	b08c      	sub	sp, #48	; 0x30
 800e174:	af02      	add	r7, sp, #8
    DaemonTaskMessage_t xMessage;
    Timer_t * pxTimer;
    BaseType_t xTimerListsWereSwitched, xResult;
    TickType_t xTimeNow;

    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e176:	e0ae      	b.n	800e2d6 <prvProcessReceivedCommands+0x166>
        }
#endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if (xMessage.xMessageID >= (BaseType_t)0) {
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f2c0 80ab 	blt.w	800e2d6 <prvProcessReceivedCommands+0x166>
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	627b      	str	r3, [r7, #36]	; 0x24

            if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem)) == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	695b      	ldr	r3, [r3, #20]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d004      	beq.n	800e196 <prvProcessReceivedCommands+0x26>
            {
                /* The timer is in a list, remove it. */
                (void)uxListRemove(&(pxTimer->xTimerListItem));
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18e:	3304      	adds	r3, #4
 800e190:	4618      	mov	r0, r3
 800e192:	f7fe f866 	bl	800c262 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800e196:	1d3b      	adds	r3, r7, #4
 800e198:	4618      	mov	r0, r3
 800e19a:	f7ff ff87 	bl	800e0ac <prvSampleTimeNow>
 800e19e:	6238      	str	r0, [r7, #32]

            switch (xMessage.xMessageID) {
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	2b09      	cmp	r3, #9
 800e1a4:	f200 8096 	bhi.w	800e2d4 <prvProcessReceivedCommands+0x164>
 800e1a8:	a201      	add	r2, pc, #4	; (adr r2, 800e1b0 <prvProcessReceivedCommands+0x40>)
 800e1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ae:	bf00      	nop
 800e1b0:	0800e1d9 	.word	0x0800e1d9
 800e1b4:	0800e1d9 	.word	0x0800e1d9
 800e1b8:	0800e1d9 	.word	0x0800e1d9
 800e1bc:	0800e24d 	.word	0x0800e24d
 800e1c0:	0800e261 	.word	0x0800e261
 800e1c4:	0800e2ab 	.word	0x0800e2ab
 800e1c8:	0800e1d9 	.word	0x0800e1d9
 800e1cc:	0800e1d9 	.word	0x0800e1d9
 800e1d0:	0800e24d 	.word	0x0800e24d
 800e1d4:	0800e261 	.word	0x0800e261
            case tmrCOMMAND_START_FROM_ISR:
            case tmrCOMMAND_RESET:
            case tmrCOMMAND_RESET_FROM_ISR:
            case tmrCOMMAND_START_DONT_TRACE:
                /* Start or restart a timer. */
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1de:	f043 0301 	orr.w	r3, r3, #1
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                if (prvInsertTimerInActiveList(pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue) != pdFALSE) {
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	18d1      	adds	r1, r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	6a3a      	ldr	r2, [r7, #32]
 800e1f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1f8:	f7ff ff78 	bl	800e0ec <prvInsertTimerInActiveList>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d069      	beq.n	800e2d6 <prvProcessReceivedCommands+0x166>
                    /* The timer expired before it was added to the active
                    timer list.  Process it now. */
                    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e204:	6a1b      	ldr	r3, [r3, #32]
 800e206:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e208:	4798      	blx	r3
                    traceTIMER_EXPIRED(pxTimer);

                    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e210:	f003 0304 	and.w	r3, r3, #4
 800e214:	2b00      	cmp	r3, #0
 800e216:	d05e      	beq.n	800e2d6 <prvProcessReceivedCommands+0x166>
                        xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY);
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	699b      	ldr	r3, [r3, #24]
 800e21e:	441a      	add	r2, r3
 800e220:	2300      	movs	r3, #0
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	2300      	movs	r3, #0
 800e226:	2100      	movs	r1, #0
 800e228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e22a:	f7ff fe05 	bl	800de38 <xTimerGenericCommand>
 800e22e:	61f8      	str	r0, [r7, #28]
                        configASSERT(xResult);
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d14f      	bne.n	800e2d6 <prvProcessReceivedCommands+0x166>
    __asm volatile("	mov %0, %1												\n"
 800e236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23a:	f383 8811 	msr	BASEPRI, r3
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	61bb      	str	r3, [r7, #24]
}
 800e248:	bf00      	nop
 800e24a:	e7fe      	b.n	800e24a <prvProcessReceivedCommands+0xda>
                break;

            case tmrCOMMAND_STOP:
            case tmrCOMMAND_STOP_FROM_ISR:
                /* The timer has already been removed from the active list. */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e252:	f023 0301 	bic.w	r3, r3, #1
 800e256:	b2da      	uxtb	r2, r3
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                break;
 800e25e:	e03a      	b.n	800e2d6 <prvProcessReceivedCommands+0x166>

            case tmrCOMMAND_CHANGE_PERIOD:
            case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e266:	f043 0301 	orr.w	r3, r3, #1
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	619a      	str	r2, [r3, #24]
                configASSERT((pxTimer->xTimerPeriodInTicks > 0));
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10a      	bne.n	800e296 <prvProcessReceivedCommands+0x126>
    __asm volatile("	mov %0, %1												\n"
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	617b      	str	r3, [r7, #20]
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <prvProcessReceivedCommands+0x124>
                be longer or shorter than the old one.  The command time is
                therefore set to the current time, and as the period cannot
                be zero the next expiry time can only be in the future,
                meaning (unlike for the xTimerStart() case above) there is
                no fail case that needs to be handled here. */
                (void)prvInsertTimerInActiveList(pxTimer, (xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow, xTimeNow);
 800e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e298:	699a      	ldr	r2, [r3, #24]
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	18d1      	adds	r1, r2, r3
 800e29e:	6a3b      	ldr	r3, [r7, #32]
 800e2a0:	6a3a      	ldr	r2, [r7, #32]
 800e2a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2a4:	f7ff ff22 	bl	800e0ec <prvInsertTimerInActiveList>
                break;
 800e2a8:	e015      	b.n	800e2d6 <prvProcessReceivedCommands+0x166>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            {
                /* The timer has already been removed from the active list,
                just free up the memory if the memory was dynamically
                allocated. */
                if ((pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED) == (uint8_t)0) {
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e2b0:	f003 0302 	and.w	r3, r3, #2
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d103      	bne.n	800e2c0 <prvProcessReceivedCommands+0x150>
                    vPortFree(pxTimer);
 800e2b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2ba:	f000 fb67 	bl	800e98c <vPortFree>
 800e2be:	e00a      	b.n	800e2d6 <prvProcessReceivedCommands+0x166>
                } else {
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e2c6:	f023 0301 	bic.w	r3, r3, #1
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                no need to free the memory - just mark the timer as
                "not active". */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
            }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
            break;
 800e2d2:	e000      	b.n	800e2d6 <prvProcessReceivedCommands+0x166>

            default:
                /* Don't expect to get here. */
                break;
 800e2d4:	bf00      	nop
    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2d6:	4b08      	ldr	r3, [pc, #32]	; (800e2f8 <prvProcessReceivedCommands+0x188>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f107 0108 	add.w	r1, r7, #8
 800e2de:	2200      	movs	r2, #0
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fe fa83 	bl	800c7ec <xQueueReceive>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f47f af45 	bne.w	800e178 <prvProcessReceivedCommands+0x8>
            }
        }
    }
}
 800e2ee:	bf00      	nop
 800e2f0:	bf00      	nop
 800e2f2:	3728      	adds	r7, #40	; 0x28
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	20000d8c 	.word	0x20000d8c

0800e2fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void) {
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b088      	sub	sp, #32
 800e300:	af02      	add	r7, sp, #8

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800e302:	e048      	b.n	800e396 <prvSwitchTimerLists+0x9a>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800e304:	4b2d      	ldr	r3, [pc, #180]	; (800e3bc <prvSwitchTimerLists+0xc0>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	613b      	str	r3, [r7, #16]

        /* Remove the timer from the list. */
        pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800e30e:	4b2b      	ldr	r3, [pc, #172]	; (800e3bc <prvSwitchTimerLists+0xc0>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	60fb      	str	r3, [r7, #12]
            pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        (void)uxListRemove(&(pxTimer->xTimerListItem));
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	3304      	adds	r3, #4
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fd ffa0 	bl	800c262 <uxListRemove>
        traceTIMER_EXPIRED(pxTimer);

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6a1b      	ldr	r3, [r3, #32]
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	4798      	blx	r3

        if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e330:	f003 0304 	and.w	r3, r3, #4
 800e334:	2b00      	cmp	r3, #0
 800e336:	d02e      	beq.n	800e396 <prvSwitchTimerLists+0x9a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	4413      	add	r3, r2
 800e340:	60bb      	str	r3, [r7, #8]
            if (xReloadTime > xNextExpireTime) {
 800e342:	68ba      	ldr	r2, [r7, #8]
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	429a      	cmp	r2, r3
 800e348:	d90e      	bls.n	800e368 <prvSwitchTimerLists+0x6c>
                listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	605a      	str	r2, [r3, #4]
                listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	611a      	str	r2, [r3, #16]
                vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800e356:	4b19      	ldr	r3, [pc, #100]	; (800e3bc <prvSwitchTimerLists+0xc0>)
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	3304      	adds	r3, #4
 800e35e:	4619      	mov	r1, r3
 800e360:	4610      	mov	r0, r2
 800e362:	f7fd ff45 	bl	800c1f0 <vListInsert>
 800e366:	e016      	b.n	800e396 <prvSwitchTimerLists+0x9a>
            } else {
                xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800e368:	2300      	movs	r3, #0
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	2300      	movs	r3, #0
 800e36e:	693a      	ldr	r2, [r7, #16]
 800e370:	2100      	movs	r1, #0
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f7ff fd60 	bl	800de38 <xTimerGenericCommand>
 800e378:	6078      	str	r0, [r7, #4]
                configASSERT(xResult);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10a      	bne.n	800e396 <prvSwitchTimerLists+0x9a>
    __asm volatile("	mov %0, %1												\n"
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	603b      	str	r3, [r7, #0]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <prvSwitchTimerLists+0x98>
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800e396:	4b09      	ldr	r3, [pc, #36]	; (800e3bc <prvSwitchTimerLists+0xc0>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1b1      	bne.n	800e304 <prvSwitchTimerLists+0x8>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
 800e3a0:	4b06      	ldr	r3, [pc, #24]	; (800e3bc <prvSwitchTimerLists+0xc0>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	617b      	str	r3, [r7, #20]
    pxCurrentTimerList = pxOverflowTimerList;
 800e3a6:	4b06      	ldr	r3, [pc, #24]	; (800e3c0 <prvSwitchTimerLists+0xc4>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a04      	ldr	r2, [pc, #16]	; (800e3bc <prvSwitchTimerLists+0xc0>)
 800e3ac:	6013      	str	r3, [r2, #0]
    pxOverflowTimerList = pxTemp;
 800e3ae:	4a04      	ldr	r2, [pc, #16]	; (800e3c0 <prvSwitchTimerLists+0xc4>)
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	6013      	str	r3, [r2, #0]
}
 800e3b4:	bf00      	nop
 800e3b6:	3718      	adds	r7, #24
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	20000d84 	.word	0x20000d84
 800e3c0:	20000d88 	.word	0x20000d88

0800e3c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void) {
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af02      	add	r7, sp, #8
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
 800e3ca:	f000 f9ab 	bl	800e724 <vPortEnterCritical>
    {
        if (xTimerQueue == NULL) {
 800e3ce:	4b15      	ldr	r3, [pc, #84]	; (800e424 <prvCheckForValidListAndQueue+0x60>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d120      	bne.n	800e418 <prvCheckForValidListAndQueue+0x54>
            vListInitialise(&xActiveTimerList1);
 800e3d6:	4814      	ldr	r0, [pc, #80]	; (800e428 <prvCheckForValidListAndQueue+0x64>)
 800e3d8:	f7fd feb9 	bl	800c14e <vListInitialise>
            vListInitialise(&xActiveTimerList2);
 800e3dc:	4813      	ldr	r0, [pc, #76]	; (800e42c <prvCheckForValidListAndQueue+0x68>)
 800e3de:	f7fd feb6 	bl	800c14e <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
 800e3e2:	4b13      	ldr	r3, [pc, #76]	; (800e430 <prvCheckForValidListAndQueue+0x6c>)
 800e3e4:	4a10      	ldr	r2, [pc, #64]	; (800e428 <prvCheckForValidListAndQueue+0x64>)
 800e3e6:	601a      	str	r2, [r3, #0]
            pxOverflowTimerList = &xActiveTimerList2;
 800e3e8:	4b12      	ldr	r3, [pc, #72]	; (800e434 <prvCheckForValidListAndQueue+0x70>)
 800e3ea:	4a10      	ldr	r2, [pc, #64]	; (800e42c <prvCheckForValidListAndQueue+0x68>)
 800e3ec:	601a      	str	r2, [r3, #0]
                /* The timer queue is allocated statically in case
                configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                static StaticQueue_t xStaticTimerQueue;                                                                   /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                static uint8_t ucStaticTimerQueueStorage[(size_t)configTIMER_QUEUE_LENGTH * sizeof(DaemonTaskMessage_t)]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                xTimerQueue = xQueueCreateStatic((UBaseType_t)configTIMER_QUEUE_LENGTH, (UBaseType_t)sizeof(DaemonTaskMessage_t), &(ucStaticTimerQueueStorage[0]), &xStaticTimerQueue);
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	4b11      	ldr	r3, [pc, #68]	; (800e438 <prvCheckForValidListAndQueue+0x74>)
 800e3f4:	4a11      	ldr	r2, [pc, #68]	; (800e43c <prvCheckForValidListAndQueue+0x78>)
 800e3f6:	210c      	movs	r1, #12
 800e3f8:	200a      	movs	r0, #10
 800e3fa:	f7fd ffc5 	bl	800c388 <xQueueGenericCreateStatic>
 800e3fe:	4603      	mov	r3, r0
 800e400:	4a08      	ldr	r2, [pc, #32]	; (800e424 <prvCheckForValidListAndQueue+0x60>)
 800e402:	6013      	str	r3, [r2, #0]
            }
#endif

#if (configQUEUE_REGISTRY_SIZE > 0)
            {
                if (xTimerQueue != NULL) {
 800e404:	4b07      	ldr	r3, [pc, #28]	; (800e424 <prvCheckForValidListAndQueue+0x60>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d005      	beq.n	800e418 <prvCheckForValidListAndQueue+0x54>
                    vQueueAddToRegistry(xTimerQueue, "TmrQ");
 800e40c:	4b05      	ldr	r3, [pc, #20]	; (800e424 <prvCheckForValidListAndQueue+0x60>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	490b      	ldr	r1, [pc, #44]	; (800e440 <prvCheckForValidListAndQueue+0x7c>)
 800e412:	4618      	mov	r0, r3
 800e414:	f7fe fbda 	bl	800cbcc <vQueueAddToRegistry>
#endif /* configQUEUE_REGISTRY_SIZE */
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800e418:	f000 f9b4 	bl	800e784 <vPortExitCritical>
}
 800e41c:	bf00      	nop
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	20000d8c 	.word	0x20000d8c
 800e428:	20000d5c 	.word	0x20000d5c
 800e42c:	20000d70 	.word	0x20000d70
 800e430:	20000d84 	.word	0x20000d84
 800e434:	20000d88 	.word	0x20000d88
 800e438:	20000e10 	.word	0x20000e10
 800e43c:	20000d98 	.word	0x20000d98
 800e440:	0801243c 	.word	0x0801243c

0800e444 <pvTimerGetTimerID>:

    return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void * pvTimerGetTimerID(const TimerHandle_t xTimer) {
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
    Timer_t * const pxTimer = xTimer;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	617b      	str	r3, [r7, #20]
    void * pvReturn;

    configASSERT(xTimer);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10a      	bne.n	800e46c <pvTimerGetTimerID+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	60fb      	str	r3, [r7, #12]
}
 800e468:	bf00      	nop
 800e46a:	e7fe      	b.n	800e46a <pvTimerGetTimerID+0x26>

    taskENTER_CRITICAL();
 800e46c:	f000 f95a 	bl	800e724 <vPortEnterCritical>
    { pvReturn = pxTimer->pvTimerID; }
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	69db      	ldr	r3, [r3, #28]
 800e474:	613b      	str	r3, [r7, #16]
    taskEXIT_CRITICAL();
 800e476:	f000 f985 	bl	800e784 <vPortExitCritical>

    return pvReturn;
 800e47a:	693b      	ldr	r3, [r7, #16]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3718      	adds	r7, #24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID(TimerHandle_t xTimer, void * pvNewID) {
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
    Timer_t * const pxTimer = xTimer;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10a      	bne.n	800e4ae <vTimerSetTimerID+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800e498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	60bb      	str	r3, [r7, #8]
}
 800e4aa:	bf00      	nop
 800e4ac:	e7fe      	b.n	800e4ac <vTimerSetTimerID+0x28>

    taskENTER_CRITICAL();
 800e4ae:	f000 f939 	bl	800e724 <vPortEnterCritical>
    { pxTimer->pvTimerID = pvNewID; }
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	683a      	ldr	r2, [r7, #0]
 800e4b6:	61da      	str	r2, [r3, #28]
    taskEXIT_CRITICAL();
 800e4b8:	f000 f964 	bl	800e784 <vPortExitCritical>
}
 800e4bc:	bf00      	nop
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <pxPortInitialiseStack>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack(StackType_t * pxTopOfStack, TaskFunction_t pxCode, void * pvParameters) {
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
    interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
    of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	3b04      	subs	r3, #4
 800e4d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	3b04      	subs	r3, #4
 800e4e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	f023 0201 	bic.w	r2, r3, #1
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	3b04      	subs	r3, #4
 800e4f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
 800e4f4:	4a0c      	ldr	r2, [pc, #48]	; (800e528 <pxPortInitialiseStack+0x64>)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                         /* R12, R3, R2 and R1. */
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	3b14      	subs	r3, #20
 800e4fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)pvParameters; /* R0 */
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
    own exec return value. */
    pxTopOfStack--;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	3b04      	subs	r3, #4
 800e50a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f06f 0202 	mvn.w	r2, #2
 800e512:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	3b20      	subs	r3, #32
 800e518:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800e51a:	68fb      	ldr	r3, [r7, #12]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	0800e52d 	.word	0x0800e52d

0800e52c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 800e52c:	b480      	push	{r7}
 800e52e:	b085      	sub	sp, #20
 800e530:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	607b      	str	r3, [r7, #4]
    its caller as there is nothing to return to.  If a task wants to exit it
    should instead call vTaskDelete( NULL ).

    Artificially force an assert() to be triggered if configASSERT() is
    defined, then stop here so application writers can catch the error. */
    configASSERT(uxCriticalNesting == ~0UL);
 800e536:	4b12      	ldr	r3, [pc, #72]	; (800e580 <prvTaskExitError+0x54>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e53e:	d00a      	beq.n	800e556 <prvTaskExitError+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800e540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e544:	f383 8811 	msr	BASEPRI, r3
 800e548:	f3bf 8f6f 	isb	sy
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	60fb      	str	r3, [r7, #12]
}
 800e552:	bf00      	nop
 800e554:	e7fe      	b.n	800e554 <prvTaskExitError+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	60bb      	str	r3, [r7, #8]
}
 800e568:	bf00      	nop
    portDISABLE_INTERRUPTS();
    while (ulDummy == 0) {
 800e56a:	bf00      	nop
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d0fc      	beq.n	800e56c <prvTaskExitError+0x40>
        about code appearing after this function is called - making ulDummy
        volatile makes the compiler think the function could return and
        therefore not output an 'unreachable code' warning for code that appears
        after it. */
    }
}
 800e572:	bf00      	nop
 800e574:	bf00      	nop
 800e576:	3714      	adds	r7, #20
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr
 800e580:	200000b8 	.word	0x200000b8
	...

0800e590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
    __asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 800e590:	4b07      	ldr	r3, [pc, #28]	; (800e5b0 <pxCurrentTCBConst2>)
 800e592:	6819      	ldr	r1, [r3, #0]
 800e594:	6808      	ldr	r0, [r1, #0]
 800e596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59a:	f380 8809 	msr	PSP, r0
 800e59e:	f3bf 8f6f 	isb	sy
 800e5a2:	f04f 0000 	mov.w	r0, #0
 800e5a6:	f380 8811 	msr	BASEPRI, r0
 800e5aa:	4770      	bx	lr
 800e5ac:	f3af 8000 	nop.w

0800e5b0 <pxCurrentTCBConst2>:
 800e5b0:	20000c30 	.word	0x20000c30
                   "	msr	basepri, r0					\n"
                   "	bx r14							\n"
                   "									\n"
                   "	.align 4						\n"
                   "pxCurrentTCBConst2: .word pxCurrentTCB				\n");
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop

0800e5b8 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
    /* Start the first task.  This also clears the bit that indicates the FPU is
    in use in case the FPU was used before the scheduler was started - which
    would otherwise result in the unnecessary leaving of space in the SVC stack
    for lazy saving of FPU registers. */
    __asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 800e5b8:	4808      	ldr	r0, [pc, #32]	; (800e5dc <prvPortStartFirstTask+0x24>)
 800e5ba:	6800      	ldr	r0, [r0, #0]
 800e5bc:	6800      	ldr	r0, [r0, #0]
 800e5be:	f380 8808 	msr	MSP, r0
 800e5c2:	f04f 0000 	mov.w	r0, #0
 800e5c6:	f380 8814 	msr	CONTROL, r0
 800e5ca:	b662      	cpsie	i
 800e5cc:	b661      	cpsie	f
 800e5ce:	f3bf 8f4f 	dsb	sy
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	df00      	svc	0
 800e5d8:	bf00      	nop
                   " cpsie f				\n"
                   " dsb					\n"
                   " isb					\n"
                   " svc 0					\n" /* System call to start first task. */
                   " nop					\n");
}
 800e5da:	bf00      	nop
 800e5dc:	e000ed08 	.word	0xe000ed08

0800e5e0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b086      	sub	sp, #24
 800e5e4:	af00      	add	r7, sp, #0
    configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

    /* This port can be used on all revisions of the Cortex-M7 core other than
    the r0p1 parts.  r0p1 parts should use the port from the
    /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 800e5e6:	4b46      	ldr	r3, [pc, #280]	; (800e700 <xPortStartScheduler+0x120>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4a46      	ldr	r2, [pc, #280]	; (800e704 <xPortStartScheduler+0x124>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d10a      	bne.n	800e606 <xPortStartScheduler+0x26>
    __asm volatile("	mov %0, %1												\n"
 800e5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f4:	f383 8811 	msr	BASEPRI, r3
 800e5f8:	f3bf 8f6f 	isb	sy
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	613b      	str	r3, [r7, #16]
}
 800e602:	bf00      	nop
 800e604:	e7fe      	b.n	800e604 <xPortStartScheduler+0x24>
    configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 800e606:	4b3e      	ldr	r3, [pc, #248]	; (800e700 <xPortStartScheduler+0x120>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a3f      	ldr	r2, [pc, #252]	; (800e708 <xPortStartScheduler+0x128>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d10a      	bne.n	800e626 <xPortStartScheduler+0x46>
    __asm volatile("	mov %0, %1												\n"
 800e610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e614:	f383 8811 	msr	BASEPRI, r3
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	60fb      	str	r3, [r7, #12]
}
 800e622:	bf00      	nop
 800e624:	e7fe      	b.n	800e624 <xPortStartScheduler+0x44>

#if (configASSERT_DEFINED == 1)
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = (volatile uint8_t * const)(portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER);
 800e626:	4b39      	ldr	r3, [pc, #228]	; (800e70c <xPortStartScheduler+0x12c>)
 800e628:	617b      	str	r3, [r7, #20]
        functions can be called.  ISR safe functions are those that end in
        "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
        ensure interrupt entry is as fast and simple as possible.

        Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
        possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	22ff      	movs	r2, #255	; 0xff
 800e636:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e640:	78fb      	ldrb	r3, [r7, #3]
 800e642:	b2db      	uxtb	r3, r3
 800e644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e648:	b2da      	uxtb	r2, r3
 800e64a:	4b31      	ldr	r3, [pc, #196]	; (800e710 <xPortStartScheduler+0x130>)
 800e64c:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
        of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e64e:	4b31      	ldr	r3, [pc, #196]	; (800e714 <xPortStartScheduler+0x134>)
 800e650:	2207      	movs	r2, #7
 800e652:	601a      	str	r2, [r3, #0]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800e654:	e009      	b.n	800e66a <xPortStartScheduler+0x8a>
            ulMaxPRIGROUPValue--;
 800e656:	4b2f      	ldr	r3, [pc, #188]	; (800e714 <xPortStartScheduler+0x134>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3b01      	subs	r3, #1
 800e65c:	4a2d      	ldr	r2, [pc, #180]	; (800e714 <xPortStartScheduler+0x134>)
 800e65e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= (uint8_t)0x01;
 800e660:	78fb      	ldrb	r3, [r7, #3]
 800e662:	b2db      	uxtb	r3, r3
 800e664:	005b      	lsls	r3, r3, #1
 800e666:	b2db      	uxtb	r3, r3
 800e668:	70fb      	strb	r3, [r7, #3]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800e66a:	78fb      	ldrb	r3, [r7, #3]
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e672:	2b80      	cmp	r3, #128	; 0x80
 800e674:	d0ef      	beq.n	800e656 <xPortStartScheduler+0x76>
#ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
            priority bits matches the number of priority bits actually queried
            from the hardware. */
            configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
 800e676:	4b27      	ldr	r3, [pc, #156]	; (800e714 <xPortStartScheduler+0x134>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f1c3 0307 	rsb	r3, r3, #7
 800e67e:	2b04      	cmp	r3, #4
 800e680:	d00a      	beq.n	800e698 <xPortStartScheduler+0xb8>
    __asm volatile("	mov %0, %1												\n"
 800e682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e686:	f383 8811 	msr	BASEPRI, r3
 800e68a:	f3bf 8f6f 	isb	sy
 800e68e:	f3bf 8f4f 	dsb	sy
 800e692:	60bb      	str	r3, [r7, #8]
}
 800e694:	bf00      	nop
 800e696:	e7fe      	b.n	800e696 <xPortStartScheduler+0xb6>
        }
#endif

        /* Shift the priority group value back to its position within the AIRCR
        register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e698:	4b1e      	ldr	r3, [pc, #120]	; (800e714 <xPortStartScheduler+0x134>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	021b      	lsls	r3, r3, #8
 800e69e:	4a1d      	ldr	r2, [pc, #116]	; (800e714 <xPortStartScheduler+0x134>)
 800e6a0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6a2:	4b1c      	ldr	r3, [pc, #112]	; (800e714 <xPortStartScheduler+0x134>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6aa:	4a1a      	ldr	r2, [pc, #104]	; (800e714 <xPortStartScheduler+0x134>)
 800e6ac:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
        value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	701a      	strb	r2, [r3, #0]
    }
#endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6b6:	4b18      	ldr	r3, [pc, #96]	; (800e718 <xPortStartScheduler+0x138>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a17      	ldr	r2, [pc, #92]	; (800e718 <xPortStartScheduler+0x138>)
 800e6bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6c0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6c2:	4b15      	ldr	r3, [pc, #84]	; (800e718 <xPortStartScheduler+0x138>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a14      	ldr	r2, [pc, #80]	; (800e718 <xPortStartScheduler+0x138>)
 800e6c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6cc:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
    here already. */
    vPortSetupTimerInterrupt();
 800e6ce:	f000 f8dd 	bl	800e88c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800e6d2:	4b12      	ldr	r3, [pc, #72]	; (800e71c <xPortStartScheduler+0x13c>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800e6d8:	f000 f8fc 	bl	800e8d4 <vPortEnableVFP>

    /* Lazy save always. */
    *(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 800e6dc:	4b10      	ldr	r3, [pc, #64]	; (800e720 <xPortStartScheduler+0x140>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a0f      	ldr	r2, [pc, #60]	; (800e720 <xPortStartScheduler+0x140>)
 800e6e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6e6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800e6e8:	f7ff ff66 	bl	800e5b8 <prvPortStartFirstTask>
    exit error function to prevent compiler warnings about a static function
    not being called in the case that the application writer overrides this
    functionality by defining configTASK_RETURN_ADDRESS.  Call
    vTaskSwitchContext() so link time optimisation does not remove the
    symbol. */
    vTaskSwitchContext();
 800e6ec:	f7fe ff8e 	bl	800d60c <vTaskSwitchContext>
    prvTaskExitError();
 800e6f0:	f7ff ff1c 	bl	800e52c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3718      	adds	r7, #24
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	e000ed00 	.word	0xe000ed00
 800e704:	410fc271 	.word	0x410fc271
 800e708:	410fc270 	.word	0x410fc270
 800e70c:	e000e400 	.word	0xe000e400
 800e710:	20000e58 	.word	0x20000e58
 800e714:	20000e5c 	.word	0x20000e5c
 800e718:	e000ed20 	.word	0xe000ed20
 800e71c:	200000b8 	.word	0x200000b8
 800e720:	e000ef34 	.word	0xe000ef34

0800e724 <vPortEnterCritical>:
    Artificially force an assert. */
    configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800e72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	607b      	str	r3, [r7, #4]
}
 800e73c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800e73e:	4b0f      	ldr	r3, [pc, #60]	; (800e77c <vPortEnterCritical+0x58>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	3301      	adds	r3, #1
 800e744:	4a0d      	ldr	r2, [pc, #52]	; (800e77c <vPortEnterCritical+0x58>)
 800e746:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
    assert() if it is being called from an interrupt context.  Only API
    functions that end in "FromISR" can be used in an interrupt.  Only assert if
    the critical nesting count is 1 to protect against recursive calls if the
    assert function also uses a critical section. */
    if (uxCriticalNesting == 1) {
 800e748:	4b0c      	ldr	r3, [pc, #48]	; (800e77c <vPortEnterCritical+0x58>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d10f      	bne.n	800e770 <vPortEnterCritical+0x4c>
        configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
 800e750:	4b0b      	ldr	r3, [pc, #44]	; (800e780 <vPortEnterCritical+0x5c>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	b2db      	uxtb	r3, r3
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00a      	beq.n	800e770 <vPortEnterCritical+0x4c>
    __asm volatile("	mov %0, %1												\n"
 800e75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	603b      	str	r3, [r7, #0]
}
 800e76c:	bf00      	nop
 800e76e:	e7fe      	b.n	800e76e <vPortEnterCritical+0x4a>
    }
}
 800e770:	bf00      	nop
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr
 800e77c:	200000b8 	.word	0x200000b8
 800e780:	e000ed04 	.word	0xe000ed04

0800e784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
    configASSERT(uxCriticalNesting);
 800e78a:	4b12      	ldr	r3, [pc, #72]	; (800e7d4 <vPortExitCritical+0x50>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d10a      	bne.n	800e7a8 <vPortExitCritical+0x24>
    __asm volatile("	mov %0, %1												\n"
 800e792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e796:	f383 8811 	msr	BASEPRI, r3
 800e79a:	f3bf 8f6f 	isb	sy
 800e79e:	f3bf 8f4f 	dsb	sy
 800e7a2:	607b      	str	r3, [r7, #4]
}
 800e7a4:	bf00      	nop
 800e7a6:	e7fe      	b.n	800e7a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800e7a8:	4b0a      	ldr	r3, [pc, #40]	; (800e7d4 <vPortExitCritical+0x50>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	3b01      	subs	r3, #1
 800e7ae:	4a09      	ldr	r2, [pc, #36]	; (800e7d4 <vPortExitCritical+0x50>)
 800e7b0:	6013      	str	r3, [r2, #0]
    if (uxCriticalNesting == 0) {
 800e7b2:	4b08      	ldr	r3, [pc, #32]	; (800e7d4 <vPortExitCritical+0x50>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d105      	bne.n	800e7c6 <vPortExitCritical+0x42>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	f383 8811 	msr	BASEPRI, r3
}
 800e7c4:	bf00      	nop
        portENABLE_INTERRUPTS();
    }
}
 800e7c6:	bf00      	nop
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	200000b8 	.word	0x200000b8
	...

0800e7e0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
    /* This is a naked function. */

    __asm volatile("	mrs r0, psp							\n"
 800e7e0:	f3ef 8009 	mrs	r0, PSP
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	4b15      	ldr	r3, [pc, #84]	; (800e840 <pxCurrentTCBConst>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	f01e 0f10 	tst.w	lr, #16
 800e7f0:	bf08      	it	eq
 800e7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fa:	6010      	str	r0, [r2, #0]
 800e7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e800:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e804:	f380 8811 	msr	BASEPRI, r0
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f7fe fefc 	bl	800d60c <vTaskSwitchContext>
 800e814:	f04f 0000 	mov.w	r0, #0
 800e818:	f380 8811 	msr	BASEPRI, r0
 800e81c:	bc09      	pop	{r0, r3}
 800e81e:	6819      	ldr	r1, [r3, #0]
 800e820:	6808      	ldr	r0, [r1, #0]
 800e822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e826:	f01e 0f10 	tst.w	lr, #16
 800e82a:	bf08      	it	eq
 800e82c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e830:	f380 8809 	msr	PSP, r0
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	f3af 8000 	nop.w

0800e840 <pxCurrentTCBConst>:
 800e840:	20000c30 	.word	0x20000c30
                   "										\n"
                   "	bx r14								\n"
                   "										\n"
                   "	.align 4							\n"
                   "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop

0800e848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800e84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	607b      	str	r3, [r7, #4]
}
 800e860:	bf00      	nop
    save and then restore the interrupt mask value as its value is already
    known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if (xTaskIncrementTick() != pdFALSE) {
 800e862:	f7fe fe1b 	bl	800d49c <xTaskIncrementTick>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d003      	beq.n	800e874 <xPortSysTickHandler+0x2c>
            /* A context switch is required.  Context switching is performed in
            the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e86c:	4b06      	ldr	r3, [pc, #24]	; (800e888 <xPortSysTickHandler+0x40>)
 800e86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e872:	601a      	str	r2, [r3, #0]
 800e874:	2300      	movs	r3, #0
 800e876:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	f383 8811 	msr	BASEPRI, r3
}
 800e87e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800e880:	bf00      	nop
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	e000ed04 	.word	0xe000ed04

0800e88c <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt(void) {
 800e88c:	b480      	push	{r7}
 800e88e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / (configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ);
    }
#endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e890:	4b0b      	ldr	r3, [pc, #44]	; (800e8c0 <vPortSetupTimerInterrupt+0x34>)
 800e892:	2200      	movs	r2, #0
 800e894:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e896:	4b0b      	ldr	r3, [pc, #44]	; (800e8c4 <vPortSetupTimerInterrupt+0x38>)
 800e898:	2200      	movs	r2, #0
 800e89a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800e89c:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <vPortSetupTimerInterrupt+0x3c>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a0a      	ldr	r2, [pc, #40]	; (800e8cc <vPortSetupTimerInterrupt+0x40>)
 800e8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8a6:	099b      	lsrs	r3, r3, #6
 800e8a8:	4a09      	ldr	r2, [pc, #36]	; (800e8d0 <vPortSetupTimerInterrupt+0x44>)
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
 800e8ae:	4b04      	ldr	r3, [pc, #16]	; (800e8c0 <vPortSetupTimerInterrupt+0x34>)
 800e8b0:	2207      	movs	r2, #7
 800e8b2:	601a      	str	r2, [r3, #0]
}
 800e8b4:	bf00      	nop
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	e000e010 	.word	0xe000e010
 800e8c4:	e000e018 	.word	0xe000e018
 800e8c8:	20000000 	.word	0x20000000
 800e8cc:	10624dd3 	.word	0x10624dd3
 800e8d0:	e000e014 	.word	0xe000e014

0800e8d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
    __asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 800e8d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8e4 <vPortEnableVFP+0x10>
 800e8d8:	6801      	ldr	r1, [r0, #0]
 800e8da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8de:	6001      	str	r1, [r0, #0]
 800e8e0:	4770      	bx	lr
                   "	ldr r1, [r0]				\n"
                   "								\n"
                   "	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
                   "	str r1, [r0]				\n"
                   "	bx r14						");
}
 800e8e2:	bf00      	nop
 800e8e4:	e000ed88 	.word	0xe000ed88

0800e8e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if (configASSERT_DEFINED == 1)

void vPortValidateInterruptPriority(void) {
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
    uint32_t ulCurrentInterrupt;
    uint8_t ucCurrentPriority;

    /* Obtain the number of the currently executing interrupt. */
    __asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
 800e8ee:	f3ef 8305 	mrs	r3, IPSR
 800e8f2:	60fb      	str	r3, [r7, #12]

    /* Is the interrupt number a user defined interrupt? */
    if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2b0f      	cmp	r3, #15
 800e8f8:	d914      	bls.n	800e924 <vPortValidateInterruptPriority+0x3c>
        /* Look up the interrupt's priority. */
        ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 800e8fa:	4a17      	ldr	r2, [pc, #92]	; (800e958 <vPortValidateInterruptPriority+0x70>)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	4413      	add	r3, r2
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	72fb      	strb	r3, [r7, #11]
        interrupt entry is as fast and simple as possible.

        The following links provide detailed information:
        http://www.freertos.org/RTOS-Cortex-M3-M4.html
        http://www.freertos.org/FAQHelp.html */
        configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 800e904:	4b15      	ldr	r3, [pc, #84]	; (800e95c <vPortValidateInterruptPriority+0x74>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	7afa      	ldrb	r2, [r7, #11]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d20a      	bcs.n	800e924 <vPortValidateInterruptPriority+0x3c>
    __asm volatile("	mov %0, %1												\n"
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	607b      	str	r3, [r7, #4]
}
 800e920:	bf00      	nop
 800e922:	e7fe      	b.n	800e922 <vPortValidateInterruptPriority+0x3a>
    configuration then the correct setting can be achieved on all Cortex-M
    devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
    scheduler.  Note however that some vendor specific peripheral libraries
    assume a non-zero priority group setting, in which cases using a value
    of zero will result in unpredictable behaviour. */
    configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
 800e924:	4b0e      	ldr	r3, [pc, #56]	; (800e960 <vPortValidateInterruptPriority+0x78>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e92c:	4b0d      	ldr	r3, [pc, #52]	; (800e964 <vPortValidateInterruptPriority+0x7c>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	429a      	cmp	r2, r3
 800e932:	d90a      	bls.n	800e94a <vPortValidateInterruptPriority+0x62>
    __asm volatile("	mov %0, %1												\n"
 800e934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e938:	f383 8811 	msr	BASEPRI, r3
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	603b      	str	r3, [r7, #0]
}
 800e946:	bf00      	nop
 800e948:	e7fe      	b.n	800e948 <vPortValidateInterruptPriority+0x60>
}
 800e94a:	bf00      	nop
 800e94c:	3714      	adds	r7, #20
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	e000e3f0 	.word	0xe000e3f0
 800e95c:	20000e58 	.word	0x20000e58
 800e960:	e000ed0c 	.word	0xe000ed0c
 800e964:	20000e5c 	.word	0x20000e5c

0800e968 <pvPortMalloc>:
#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc(size_t xWantedSize) {
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800e970:	f7fe fcda 	bl	800d328 <vTaskSuspendAll>
    {
        pvReturn = malloc(xWantedSize);
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 fd2b 	bl	800f3d0 <malloc>
 800e97a:	4603      	mov	r3, r0
 800e97c:	60fb      	str	r3, [r7, #12]
        traceMALLOC(pvReturn, xWantedSize);
    }
    (void)xTaskResumeAll();
 800e97e:	f7fe fce1 	bl	800d344 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
#endif

    return pvReturn;
 800e982:	68fb      	ldr	r3, [r7, #12]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void * pv) {
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
    if (pv) {
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d006      	beq.n	800e9a8 <vPortFree+0x1c>
        vTaskSuspendAll();
 800e99a:	f7fe fcc5 	bl	800d328 <vTaskSuspendAll>
        {
            free(pv);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 fd1e 	bl	800f3e0 <free>
            traceFREE(pv, 0);
        }
        (void)xTaskResumeAll();
 800e9a4:	f7fe fcce 	bl	800d344 <xTaskResumeAll>
    }
}
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	4912      	ldr	r1, [pc, #72]	; (800ea00 <MX_USB_DEVICE_Init+0x50>)
 800e9b8:	4812      	ldr	r0, [pc, #72]	; (800ea04 <MX_USB_DEVICE_Init+0x54>)
 800e9ba:	f7fc f857 	bl	800aa6c <USBD_Init>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d001      	beq.n	800e9c8 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800e9c4:	f7f3 f9e4 	bl	8001d90 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e9c8:	490f      	ldr	r1, [pc, #60]	; (800ea08 <MX_USB_DEVICE_Init+0x58>)
 800e9ca:	480e      	ldr	r0, [pc, #56]	; (800ea04 <MX_USB_DEVICE_Init+0x54>)
 800e9cc:	f7fc f87e 	bl	800aacc <USBD_RegisterClass>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d001      	beq.n	800e9da <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800e9d6:	f7f3 f9db 	bl	8001d90 <Error_Handler>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e9da:	490c      	ldr	r1, [pc, #48]	; (800ea0c <MX_USB_DEVICE_Init+0x5c>)
 800e9dc:	4809      	ldr	r0, [pc, #36]	; (800ea04 <MX_USB_DEVICE_Init+0x54>)
 800e9de:	f7fb ff6f 	bl	800a8c0 <USBD_CDC_RegisterInterface>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800e9e8:	f7f3 f9d2 	bl	8001d90 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e9ec:	4805      	ldr	r0, [pc, #20]	; (800ea04 <MX_USB_DEVICE_Init+0x54>)
 800e9ee:	f7fc f8a3 	bl	800ab38 <USBD_Start>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800e9f8:	f7f3 f9ca 	bl	8001d90 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e9fc:	bf00      	nop
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	200000d0 	.word	0x200000d0
 800ea04:	20000e60 	.word	0x20000e60
 800ea08:	20000038 	.word	0x20000038
 800ea0c:	200000bc 	.word	0x200000bc

0800ea10 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800ea10:	b580      	push	{r7, lr}
 800ea12:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ea14:	2200      	movs	r2, #0
 800ea16:	4905      	ldr	r1, [pc, #20]	; (800ea2c <CDC_Init_FS+0x1c>)
 800ea18:	4805      	ldr	r0, [pc, #20]	; (800ea30 <CDC_Init_FS+0x20>)
 800ea1a:	f7fb ff6b 	bl	800a8f4 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ea1e:	4905      	ldr	r1, [pc, #20]	; (800ea34 <CDC_Init_FS+0x24>)
 800ea20:	4803      	ldr	r0, [pc, #12]	; (800ea30 <CDC_Init_FS+0x20>)
 800ea22:	f7fb ff89 	bl	800a938 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800ea26:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	2000153c 	.word	0x2000153c
 800ea30:	20000e60 	.word	0x20000e60
 800ea34:	2000113c 	.word	0x2000113c

0800ea38 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800ea38:	b480      	push	{r7}
 800ea3a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800ea3c:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t * pbuf, uint16_t length) {
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	4603      	mov	r3, r0
 800ea50:	6039      	str	r1, [r7, #0]
 800ea52:	71fb      	strb	r3, [r7, #7]
 800ea54:	4613      	mov	r3, r2
 800ea56:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd) {
 800ea58:	79fb      	ldrb	r3, [r7, #7]
 800ea5a:	2b23      	cmp	r3, #35	; 0x23
 800ea5c:	d84a      	bhi.n	800eaf4 <CDC_Control_FS+0xac>
 800ea5e:	a201      	add	r2, pc, #4	; (adr r2, 800ea64 <CDC_Control_FS+0x1c>)
 800ea60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea64:	0800eaf5 	.word	0x0800eaf5
 800ea68:	0800eaf5 	.word	0x0800eaf5
 800ea6c:	0800eaf5 	.word	0x0800eaf5
 800ea70:	0800eaf5 	.word	0x0800eaf5
 800ea74:	0800eaf5 	.word	0x0800eaf5
 800ea78:	0800eaf5 	.word	0x0800eaf5
 800ea7c:	0800eaf5 	.word	0x0800eaf5
 800ea80:	0800eaf5 	.word	0x0800eaf5
 800ea84:	0800eaf5 	.word	0x0800eaf5
 800ea88:	0800eaf5 	.word	0x0800eaf5
 800ea8c:	0800eaf5 	.word	0x0800eaf5
 800ea90:	0800eaf5 	.word	0x0800eaf5
 800ea94:	0800eaf5 	.word	0x0800eaf5
 800ea98:	0800eaf5 	.word	0x0800eaf5
 800ea9c:	0800eaf5 	.word	0x0800eaf5
 800eaa0:	0800eaf5 	.word	0x0800eaf5
 800eaa4:	0800eaf5 	.word	0x0800eaf5
 800eaa8:	0800eaf5 	.word	0x0800eaf5
 800eaac:	0800eaf5 	.word	0x0800eaf5
 800eab0:	0800eaf5 	.word	0x0800eaf5
 800eab4:	0800eaf5 	.word	0x0800eaf5
 800eab8:	0800eaf5 	.word	0x0800eaf5
 800eabc:	0800eaf5 	.word	0x0800eaf5
 800eac0:	0800eaf5 	.word	0x0800eaf5
 800eac4:	0800eaf5 	.word	0x0800eaf5
 800eac8:	0800eaf5 	.word	0x0800eaf5
 800eacc:	0800eaf5 	.word	0x0800eaf5
 800ead0:	0800eaf5 	.word	0x0800eaf5
 800ead4:	0800eaf5 	.word	0x0800eaf5
 800ead8:	0800eaf5 	.word	0x0800eaf5
 800eadc:	0800eaf5 	.word	0x0800eaf5
 800eae0:	0800eaf5 	.word	0x0800eaf5
 800eae4:	0800eaf5 	.word	0x0800eaf5
 800eae8:	0800eaf5 	.word	0x0800eaf5
 800eaec:	0800eaf5 	.word	0x0800eaf5
 800eaf0:	0800eaf5 	.word	0x0800eaf5
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800eaf4:	bf00      	nop
    }

    return (USBD_OK);
 800eaf6:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t * Buf, uint32_t * Len) {
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eb0e:	6879      	ldr	r1, [r7, #4]
 800eb10:	4805      	ldr	r0, [pc, #20]	; (800eb28 <CDC_Receive_FS+0x24>)
 800eb12:	f7fb ff11 	bl	800a938 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eb16:	4804      	ldr	r0, [pc, #16]	; (800eb28 <CDC_Receive_FS+0x24>)
 800eb18:	f7fb ff72 	bl	800aa00 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800eb1c:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	20000e60 	.word	0x20000e60

0800eb2c <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t * Buf, uint16_t Len) {
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800eb3c:	4b0d      	ldr	r3, [pc, #52]	; (800eb74 <CDC_Transmit_FS+0x48>)
 800eb3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb42:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e00b      	b.n	800eb6a <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eb52:	887b      	ldrh	r3, [r7, #2]
 800eb54:	461a      	mov	r2, r3
 800eb56:	6879      	ldr	r1, [r7, #4]
 800eb58:	4806      	ldr	r0, [pc, #24]	; (800eb74 <CDC_Transmit_FS+0x48>)
 800eb5a:	f7fb fecb 	bl	800a8f4 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eb5e:	4805      	ldr	r0, [pc, #20]	; (800eb74 <CDC_Transmit_FS+0x48>)
 800eb60:	f7fb ff08 	bl	800a974 <USBD_CDC_TransmitPacket>
 800eb64:	4603      	mov	r3, r0
 800eb66:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 800eb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	20000e60 	.word	0x20000e60

0800eb78 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t * Buf, uint32_t * Len, uint8_t epnum) {
 800eb78:	b480      	push	{r7}
 800eb7a:	b087      	sub	sp, #28
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	4613      	mov	r3, r2
 800eb84:	71fb      	strb	r3, [r7, #7]
    uint8_t result = USBD_OK;
 800eb86:	2300      	movs	r3, #0
 800eb88:	75fb      	strb	r3, [r7, #23]
    /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
    /* USER CODE END 13 */
    return result;
 800eb8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	371c      	adds	r7, #28
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
	...

0800eb9c <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	4603      	mov	r3, r0
 800eba4:	6039      	str	r1, [r7, #0]
 800eba6:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	2212      	movs	r2, #18
 800ebac:	801a      	strh	r2, [r3, #0]
    return USBD_FS_DeviceDesc;
 800ebae:	4b03      	ldr	r3, [pc, #12]	; (800ebbc <USBD_FS_DeviceDescriptor+0x20>)
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	200000ec 	.word	0x200000ec

0800ebc0 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	6039      	str	r1, [r7, #0]
 800ebca:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2204      	movs	r2, #4
 800ebd0:	801a      	strh	r2, [r3, #0]
    return USBD_LangIDDesc;
 800ebd2:	4b03      	ldr	r3, [pc, #12]	; (800ebe0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	370c      	adds	r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr
 800ebe0:	20000100 	.word	0x20000100

0800ebe4 <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	4603      	mov	r3, r0
 800ebec:	6039      	str	r1, [r7, #0]
 800ebee:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800ebf0:	79fb      	ldrb	r3, [r7, #7]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d105      	bne.n	800ec02 <USBD_FS_ProductStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	4907      	ldr	r1, [pc, #28]	; (800ec18 <USBD_FS_ProductStrDescriptor+0x34>)
 800ebfa:	4808      	ldr	r0, [pc, #32]	; (800ec1c <USBD_FS_ProductStrDescriptor+0x38>)
 800ebfc:	f7fd f948 	bl	800be90 <USBD_GetString>
 800ec00:	e004      	b.n	800ec0c <USBD_FS_ProductStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec02:	683a      	ldr	r2, [r7, #0]
 800ec04:	4904      	ldr	r1, [pc, #16]	; (800ec18 <USBD_FS_ProductStrDescriptor+0x34>)
 800ec06:	4805      	ldr	r0, [pc, #20]	; (800ec1c <USBD_FS_ProductStrDescriptor+0x38>)
 800ec08:	f7fd f942 	bl	800be90 <USBD_GetString>
    }
    return USBD_StrDesc;
 800ec0c:	4b02      	ldr	r3, [pc, #8]	; (800ec18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3708      	adds	r7, #8
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	2000193c 	.word	0x2000193c
 800ec1c:	08012444 	.word	0x08012444

0800ec20 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	4603      	mov	r3, r0
 800ec28:	6039      	str	r1, [r7, #0]
 800ec2a:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec2c:	683a      	ldr	r2, [r7, #0]
 800ec2e:	4904      	ldr	r1, [pc, #16]	; (800ec40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ec30:	4804      	ldr	r0, [pc, #16]	; (800ec44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ec32:	f7fd f92d 	bl	800be90 <USBD_GetString>
    return USBD_StrDesc;
 800ec36:	4b02      	ldr	r3, [pc, #8]	; (800ec40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	2000193c 	.word	0x2000193c
 800ec44:	0801245c 	.word	0x0801245c

0800ec48 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	6039      	str	r1, [r7, #0]
 800ec52:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = USB_SIZ_STRING_SERIAL;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	221a      	movs	r2, #26
 800ec58:	801a      	strh	r2, [r3, #0]

    /* Update the serial number string descriptor with the data from the unique
     * ID */
    Get_SerialNum();
 800ec5a:	f000 f843 	bl	800ece4 <Get_SerialNum>
    /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

    /* USER CODE END USBD_FS_SerialStrDescriptor */
    return (uint8_t *)USBD_StringSerial;
 800ec5e:	4b02      	ldr	r3, [pc, #8]	; (800ec68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20000104 	.word	0x20000104

0800ec6c <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	4603      	mov	r3, r0
 800ec74:	6039      	str	r1, [r7, #0]
 800ec76:	71fb      	strb	r3, [r7, #7]
    if (speed == USBD_SPEED_HIGH) {
 800ec78:	79fb      	ldrb	r3, [r7, #7]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d105      	bne.n	800ec8a <USBD_FS_ConfigStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec7e:	683a      	ldr	r2, [r7, #0]
 800ec80:	4907      	ldr	r1, [pc, #28]	; (800eca0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec82:	4808      	ldr	r0, [pc, #32]	; (800eca4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec84:	f7fd f904 	bl	800be90 <USBD_GetString>
 800ec88:	e004      	b.n	800ec94 <USBD_FS_ConfigStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec8a:	683a      	ldr	r2, [r7, #0]
 800ec8c:	4904      	ldr	r1, [pc, #16]	; (800eca0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec8e:	4805      	ldr	r0, [pc, #20]	; (800eca4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec90:	f7fd f8fe 	bl	800be90 <USBD_GetString>
    }
    return USBD_StrDesc;
 800ec94:	4b02      	ldr	r3, [pc, #8]	; (800eca0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3708      	adds	r7, #8
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	2000193c 	.word	0x2000193c
 800eca4:	08012470 	.word	0x08012470

0800eca8 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	4603      	mov	r3, r0
 800ecb0:	6039      	str	r1, [r7, #0]
 800ecb2:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d105      	bne.n	800ecc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ecba:	683a      	ldr	r2, [r7, #0]
 800ecbc:	4907      	ldr	r1, [pc, #28]	; (800ecdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ecbe:	4808      	ldr	r0, [pc, #32]	; (800ece0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ecc0:	f7fd f8e6 	bl	800be90 <USBD_GetString>
 800ecc4:	e004      	b.n	800ecd0 <USBD_FS_InterfaceStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ecc6:	683a      	ldr	r2, [r7, #0]
 800ecc8:	4904      	ldr	r1, [pc, #16]	; (800ecdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ecca:	4805      	ldr	r0, [pc, #20]	; (800ece0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eccc:	f7fd f8e0 	bl	800be90 <USBD_GetString>
    }
    return USBD_StrDesc;
 800ecd0:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	2000193c 	.word	0x2000193c
 800ece0:	0801247c 	.word	0x0801247c

0800ece4 <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
    uint32_t deviceserial0;
    uint32_t deviceserial1;
    uint32_t deviceserial2;

    deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800ecea:	4b0f      	ldr	r3, [pc, #60]	; (800ed28 <Get_SerialNum+0x44>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	60fb      	str	r3, [r7, #12]
    deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800ecf0:	4b0e      	ldr	r3, [pc, #56]	; (800ed2c <Get_SerialNum+0x48>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	60bb      	str	r3, [r7, #8]
    deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800ecf6:	4b0e      	ldr	r3, [pc, #56]	; (800ed30 <Get_SerialNum+0x4c>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	607b      	str	r3, [r7, #4]

    deviceserial0 += deviceserial2;
 800ecfc:	68fa      	ldr	r2, [r7, #12]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4413      	add	r3, r2
 800ed02:	60fb      	str	r3, [r7, #12]

    if (deviceserial0 != 0) {
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d009      	beq.n	800ed1e <Get_SerialNum+0x3a>
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed0a:	2208      	movs	r2, #8
 800ed0c:	4909      	ldr	r1, [pc, #36]	; (800ed34 <Get_SerialNum+0x50>)
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	f000 f814 	bl	800ed3c <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed14:	2204      	movs	r2, #4
 800ed16:	4908      	ldr	r1, [pc, #32]	; (800ed38 <Get_SerialNum+0x54>)
 800ed18:	68b8      	ldr	r0, [r7, #8]
 800ed1a:	f000 f80f 	bl	800ed3c <IntToUnicode>
    }
}
 800ed1e:	bf00      	nop
 800ed20:	3710      	adds	r7, #16
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	1fff7a10 	.word	0x1fff7a10
 800ed2c:	1fff7a14 	.word	0x1fff7a14
 800ed30:	1fff7a18 	.word	0x1fff7a18
 800ed34:	20000106 	.word	0x20000106
 800ed38:	20000116 	.word	0x20000116

0800ed3c <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 800ed3c:	b480      	push	{r7}
 800ed3e:	b087      	sub	sp, #28
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	4613      	mov	r3, r2
 800ed48:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	75fb      	strb	r3, [r7, #23]

    for (idx = 0; idx < len; idx++) {
 800ed4e:	2300      	movs	r3, #0
 800ed50:	75fb      	strb	r3, [r7, #23]
 800ed52:	e027      	b.n	800eda4 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	0f1b      	lsrs	r3, r3, #28
 800ed58:	2b09      	cmp	r3, #9
 800ed5a:	d80b      	bhi.n	800ed74 <IntToUnicode+0x38>
            pbuf[2 * idx] = (value >> 28) + '0';
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	0f1b      	lsrs	r3, r3, #28
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	7dfb      	ldrb	r3, [r7, #23]
 800ed64:	005b      	lsls	r3, r3, #1
 800ed66:	4619      	mov	r1, r3
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	440b      	add	r3, r1
 800ed6c:	3230      	adds	r2, #48	; 0x30
 800ed6e:	b2d2      	uxtb	r2, r2
 800ed70:	701a      	strb	r2, [r3, #0]
 800ed72:	e00a      	b.n	800ed8a <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	0f1b      	lsrs	r3, r3, #28
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	7dfb      	ldrb	r3, [r7, #23]
 800ed7c:	005b      	lsls	r3, r3, #1
 800ed7e:	4619      	mov	r1, r3
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	440b      	add	r3, r1
 800ed84:	3237      	adds	r2, #55	; 0x37
 800ed86:	b2d2      	uxtb	r2, r2
 800ed88:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	011b      	lsls	r3, r3, #4
 800ed8e:	60fb      	str	r3, [r7, #12]

        pbuf[2 * idx + 1] = 0;
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
 800ed92:	005b      	lsls	r3, r3, #1
 800ed94:	3301      	adds	r3, #1
 800ed96:	68ba      	ldr	r2, [r7, #8]
 800ed98:	4413      	add	r3, r2
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < len; idx++) {
 800ed9e:	7dfb      	ldrb	r3, [r7, #23]
 800eda0:	3301      	adds	r3, #1
 800eda2:	75fb      	strb	r3, [r7, #23]
 800eda4:	7dfa      	ldrb	r2, [r7, #23]
 800eda6:	79fb      	ldrb	r3, [r7, #7]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d3d3      	bcc.n	800ed54 <IntToUnicode+0x18>
    }
}
 800edac:	bf00      	nop
 800edae:	bf00      	nop
 800edb0:	371c      	adds	r7, #28
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr
	...

0800edbc <HAL_PCD_MspInit>:
/*******************************************************************************
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef * pcdHandle) {
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b08a      	sub	sp, #40	; 0x28
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800edc4:	f107 0314 	add.w	r3, r7, #20
 800edc8:	2200      	movs	r2, #0
 800edca:	601a      	str	r2, [r3, #0]
 800edcc:	605a      	str	r2, [r3, #4]
 800edce:	609a      	str	r2, [r3, #8]
 800edd0:	60da      	str	r2, [r3, #12]
 800edd2:	611a      	str	r2, [r3, #16]
    if (pcdHandle->Instance == USB_OTG_FS) {
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eddc:	d13a      	bne.n	800ee54 <HAL_PCD_MspInit+0x98>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

        /* USER CODE END USB_OTG_FS_MspInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800edde:	2300      	movs	r3, #0
 800ede0:	613b      	str	r3, [r7, #16]
 800ede2:	4b1e      	ldr	r3, [pc, #120]	; (800ee5c <HAL_PCD_MspInit+0xa0>)
 800ede4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede6:	4a1d      	ldr	r2, [pc, #116]	; (800ee5c <HAL_PCD_MspInit+0xa0>)
 800ede8:	f043 0301 	orr.w	r3, r3, #1
 800edec:	6313      	str	r3, [r2, #48]	; 0x30
 800edee:	4b1b      	ldr	r3, [pc, #108]	; (800ee5c <HAL_PCD_MspInit+0xa0>)
 800edf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	613b      	str	r3, [r7, #16]
 800edf8:	693b      	ldr	r3, [r7, #16]
        /**USB_OTG_FS GPIO Configuration
        PA11     ------> USB_OTG_FS_DM
        PA12     ------> USB_OTG_FS_DP
        */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800edfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800edfe:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee00:	2302      	movs	r3, #2
 800ee02:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee04:	2300      	movs	r3, #0
 800ee06:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee08:	2303      	movs	r3, #3
 800ee0a:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ee0c:	230a      	movs	r3, #10
 800ee0e:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee10:	f107 0314 	add.w	r3, r7, #20
 800ee14:	4619      	mov	r1, r3
 800ee16:	4812      	ldr	r0, [pc, #72]	; (800ee60 <HAL_PCD_MspInit+0xa4>)
 800ee18:	f7f5 fb1a 	bl	8004450 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ee1c:	4b0f      	ldr	r3, [pc, #60]	; (800ee5c <HAL_PCD_MspInit+0xa0>)
 800ee1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee20:	4a0e      	ldr	r2, [pc, #56]	; (800ee5c <HAL_PCD_MspInit+0xa0>)
 800ee22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee26:	6353      	str	r3, [r2, #52]	; 0x34
 800ee28:	2300      	movs	r3, #0
 800ee2a:	60fb      	str	r3, [r7, #12]
 800ee2c:	4b0b      	ldr	r3, [pc, #44]	; (800ee5c <HAL_PCD_MspInit+0xa0>)
 800ee2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee30:	4a0a      	ldr	r2, [pc, #40]	; (800ee5c <HAL_PCD_MspInit+0xa0>)
 800ee32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee36:	6453      	str	r3, [r2, #68]	; 0x44
 800ee38:	4b08      	ldr	r3, [pc, #32]	; (800ee5c <HAL_PCD_MspInit+0xa0>)
 800ee3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee40:	60fb      	str	r3, [r7, #12]
 800ee42:	68fb      	ldr	r3, [r7, #12]

        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ee44:	2200      	movs	r2, #0
 800ee46:	2105      	movs	r1, #5
 800ee48:	2043      	movs	r0, #67	; 0x43
 800ee4a:	f7f5 f8e0 	bl	800400e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee4e:	2043      	movs	r0, #67	; 0x43
 800ee50:	f7f5 f8f9 	bl	8004046 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 800ee54:	bf00      	nop
 800ee56:	3728      	adds	r7, #40	; 0x28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	40023800 	.word	0x40023800
 800ee60:	40020000 	.word	0x40020000

0800ee64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f7fb fea9 	bl	800abd2 <USBD_LL_SetupStage>
}
 800ee80:	bf00      	nop
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	460b      	mov	r3, r1
 800ee92:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee9a:	78fa      	ldrb	r2, [r7, #3]
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	4413      	add	r3, r2
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	440b      	add	r3, r1
 800eea8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	78fb      	ldrb	r3, [r7, #3]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	f7fb fee3 	bl	800ac7c <USBD_LL_DataOutStage>
}
 800eeb6:	bf00      	nop
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b082      	sub	sp, #8
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
 800eec6:	460b      	mov	r3, r1
 800eec8:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eed0:	78fa      	ldrb	r2, [r7, #3]
 800eed2:	6879      	ldr	r1, [r7, #4]
 800eed4:	4613      	mov	r3, r2
 800eed6:	00db      	lsls	r3, r3, #3
 800eed8:	4413      	add	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	440b      	add	r3, r1
 800eede:	334c      	adds	r3, #76	; 0x4c
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	78fb      	ldrb	r3, [r7, #3]
 800eee4:	4619      	mov	r1, r3
 800eee6:	f7fb ff7c 	bl	800ade2 <USBD_LL_DataInStage>
}
 800eeea:	bf00      	nop
 800eeec:	3708      	adds	r7, #8
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b082      	sub	sp, #8
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fc f8b0 	bl	800b066 <USBD_LL_SOF>
}
 800ef06:	bf00      	nop
 800ef08:	3708      	adds	r7, #8
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b084      	sub	sp, #16
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ef16:	2301      	movs	r3, #1
 800ef18:	73fb      	strb	r3, [r7, #15]

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	2b02      	cmp	r3, #2
 800ef20:	d001      	beq.n	800ef26 <HAL_PCD_ResetCallback+0x18>
        Error_Handler();
 800ef22:	f7f2 ff35 	bl	8001d90 <Error_Handler>
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef2c:	7bfa      	ldrb	r2, [r7, #15]
 800ef2e:	4611      	mov	r1, r2
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fc f85a 	bl	800afea <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fc f802 	bl	800af46 <USBD_LL_Reset>
}
 800ef42:	bf00      	nop
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
	...

0800ef4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fc f855 	bl	800b00a <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	6812      	ldr	r2, [r2, #0]
 800ef6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ef72:	f043 0301 	orr.w	r3, r3, #1
 800ef76:	6013      	str	r3, [r2, #0]
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6a1b      	ldr	r3, [r3, #32]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d005      	beq.n	800ef8c <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef80:	4b04      	ldr	r3, [pc, #16]	; (800ef94 <HAL_PCD_SuspendCallback+0x48>)
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	4a03      	ldr	r2, [pc, #12]	; (800ef94 <HAL_PCD_SuspendCallback+0x48>)
 800ef86:	f043 0306 	orr.w	r3, r3, #6
 800ef8a:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	e000ed00 	.word	0xe000ed00

0800ef98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fc f845 	bl	800b036 <USBD_LL_Resume>
}
 800efac:	bf00      	nop
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	460b      	mov	r3, r1
 800efbe:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efc6:	78fa      	ldrb	r2, [r7, #3]
 800efc8:	4611      	mov	r1, r2
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fc f89d 	bl	800b10a <USBD_LL_IsoOUTIncomplete>
}
 800efd0:	bf00      	nop
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	460b      	mov	r3, r1
 800efe2:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efea:	78fa      	ldrb	r2, [r7, #3]
 800efec:	4611      	mov	r1, r2
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fc f859 	bl	800b0a6 <USBD_LL_IsoINIncomplete>
}
 800eff4:	bf00      	nop
 800eff6:	3708      	adds	r7, #8
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fc f8af 	bl	800b16e <USBD_LL_DevConnected>
}
 800f010:	bf00      	nop
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f026:	4618      	mov	r0, r3
 800f028:	f7fc f8ac 	bl	800b184 <USBD_LL_DevDisconnected>
}
 800f02c:	bf00      	nop
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <USBD_LL_Init>:
/**
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev) {
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d13c      	bne.n	800f0be <USBD_LL_Init+0x8a>
        /* Link the driver to the stack. */
        hpcd_USB_OTG_FS.pData = pdev;
 800f044:	4a20      	ldr	r2, [pc, #128]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
        pdev->pData = &hpcd_USB_OTG_FS;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4a1e      	ldr	r2, [pc, #120]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f050:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f054:	4b1c      	ldr	r3, [pc, #112]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f056:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f05a:	601a      	str	r2, [r3, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f05c:	4b1a      	ldr	r3, [pc, #104]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f05e:	2204      	movs	r2, #4
 800f060:	605a      	str	r2, [r3, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f062:	4b19      	ldr	r3, [pc, #100]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f064:	2202      	movs	r2, #2
 800f066:	60da      	str	r2, [r3, #12]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f068:	4b17      	ldr	r3, [pc, #92]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	611a      	str	r2, [r3, #16]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f06e:	4b16      	ldr	r3, [pc, #88]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f070:	2202      	movs	r2, #2
 800f072:	619a      	str	r2, [r3, #24]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f074:	4b14      	ldr	r3, [pc, #80]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f076:	2200      	movs	r2, #0
 800f078:	61da      	str	r2, [r3, #28]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f07a:	4b13      	ldr	r3, [pc, #76]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f07c:	2200      	movs	r2, #0
 800f07e:	621a      	str	r2, [r3, #32]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f080:	4b11      	ldr	r3, [pc, #68]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f082:	2200      	movs	r2, #0
 800f084:	625a      	str	r2, [r3, #36]	; 0x24
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f086:	4b10      	ldr	r3, [pc, #64]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f088:	2200      	movs	r2, #0
 800f08a:	62da      	str	r2, [r3, #44]	; 0x2c
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f08c:	4b0e      	ldr	r3, [pc, #56]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f08e:	2200      	movs	r2, #0
 800f090:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800f092:	480d      	ldr	r0, [pc, #52]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f094:	f7f6 fb51 	bl	800573a <HAL_PCD_Init>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d001      	beq.n	800f0a2 <USBD_LL_Init+0x6e>
            Error_Handler();
 800f09e:	f7f2 fe77 	bl	8001d90 <Error_Handler>
        HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
        HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
        HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
        HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f0a2:	2180      	movs	r1, #128	; 0x80
 800f0a4:	4808      	ldr	r0, [pc, #32]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f0a6:	f7f7 fda8 	bl	8006bfa <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f0aa:	2240      	movs	r2, #64	; 0x40
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	4806      	ldr	r0, [pc, #24]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f0b0:	f7f7 fd5c 	bl	8006b6c <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f0b4:	2280      	movs	r2, #128	; 0x80
 800f0b6:	2101      	movs	r1, #1
 800f0b8:	4803      	ldr	r0, [pc, #12]	; (800f0c8 <USBD_LL_Init+0x94>)
 800f0ba:	f7f7 fd57 	bl	8006b6c <HAL_PCDEx_SetTxFiFo>
    }
    return USBD_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	20001b3c 	.word	0x20001b3c

0800f0cc <USBD_LL_Start>:
/**
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev) {
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_Start(pdev->pData);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7f6 fc46 	bl	8005974 <HAL_PCD_Start>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 f942 	bl	800f378 <USBD_Get_USB_Status>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f0f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <USBD_LL_OpenEP>:
 * @param  ep_addr: Endpoint number
 * @param  ep_type: Endpoint type
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps) {
 800f102:	b580      	push	{r7, lr}
 800f104:	b084      	sub	sp, #16
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	4608      	mov	r0, r1
 800f10c:	4611      	mov	r1, r2
 800f10e:	461a      	mov	r2, r3
 800f110:	4603      	mov	r3, r0
 800f112:	70fb      	strb	r3, [r7, #3]
 800f114:	460b      	mov	r3, r1
 800f116:	70bb      	strb	r3, [r7, #2]
 800f118:	4613      	mov	r3, r2
 800f11a:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f12a:	78bb      	ldrb	r3, [r7, #2]
 800f12c:	883a      	ldrh	r2, [r7, #0]
 800f12e:	78f9      	ldrb	r1, [r7, #3]
 800f130:	f7f7 f917 	bl	8006362 <HAL_PCD_EP_Open>
 800f134:	4603      	mov	r3, r0
 800f136:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f138:	7bfb      	ldrb	r3, [r7, #15]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f000 f91c 	bl	800f378 <USBD_Get_USB_Status>
 800f140:	4603      	mov	r3, r0
 800f142:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f144:	7bbb      	ldrb	r3, [r7, #14]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3710      	adds	r7, #16
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <USBD_LL_CloseEP>:
 * @brief  Closes an endpoint of the low level driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800f14e:	b580      	push	{r7, lr}
 800f150:	b084      	sub	sp, #16
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
 800f156:	460b      	mov	r3, r1
 800f158:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f15a:	2300      	movs	r3, #0
 800f15c:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f168:	78fa      	ldrb	r2, [r7, #3]
 800f16a:	4611      	mov	r1, r2
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7f7 f960 	bl	8006432 <HAL_PCD_EP_Close>
 800f172:	4603      	mov	r3, r0
 800f174:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f176:	7bfb      	ldrb	r3, [r7, #15]
 800f178:	4618      	mov	r0, r3
 800f17a:	f000 f8fd 	bl	800f378 <USBD_Get_USB_Status>
 800f17e:	4603      	mov	r3, r0
 800f180:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f182:	7bbb      	ldrb	r3, [r7, #14]
}
 800f184:	4618      	mov	r0, r3
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	460b      	mov	r3, r1
 800f196:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f198:	2300      	movs	r3, #0
 800f19a:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f19c:	2300      	movs	r3, #0
 800f19e:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1a6:	78fa      	ldrb	r2, [r7, #3]
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7f7 fa38 	bl	8006620 <HAL_PCD_EP_SetStall>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f1b4:	7bfb      	ldrb	r3, [r7, #15]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f000 f8de 	bl	800f378 <USBD_Get_USB_Status>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <USBD_LL_ClearStallEP>:
 * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b084      	sub	sp, #16
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1e4:	78fa      	ldrb	r2, [r7, #3]
 800f1e6:	4611      	mov	r1, r2
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7f7 fa7d 	bl	80066e8 <HAL_PCD_EP_ClrStall>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f1f2:	7bfb      	ldrb	r3, [r7, #15]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f000 f8bf 	bl	800f378 <USBD_Get_USB_Status>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f1fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f21a:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80) {
 800f21c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f220:	2b00      	cmp	r3, #0
 800f222:	da0b      	bge.n	800f23c <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f224:	78fb      	ldrb	r3, [r7, #3]
 800f226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f22a:	68f9      	ldr	r1, [r7, #12]
 800f22c:	4613      	mov	r3, r2
 800f22e:	00db      	lsls	r3, r3, #3
 800f230:	4413      	add	r3, r2
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	440b      	add	r3, r1
 800f236:	333e      	adds	r3, #62	; 0x3e
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	e00b      	b.n	800f254 <USBD_LL_IsStallEP+0x4c>
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f23c:	78fb      	ldrb	r3, [r7, #3]
 800f23e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f242:	68f9      	ldr	r1, [r7, #12]
 800f244:	4613      	mov	r3, r2
 800f246:	00db      	lsls	r3, r3, #3
 800f248:	4413      	add	r3, r2
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	440b      	add	r3, r1
 800f24e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f252:	781b      	ldrb	r3, [r3, #0]
    }
}
 800f254:	4618      	mov	r0, r3
 800f256:	3714      	adds	r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr

0800f260 <USBD_LL_SetUSBAddress>:
 * @brief  Assigns a USB address to the device.
 * @param  pdev: Device handle
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev, uint8_t dev_addr) {
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	460b      	mov	r3, r1
 800f26a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f26c:	2300      	movs	r3, #0
 800f26e:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f270:	2300      	movs	r3, #0
 800f272:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f27a:	78fa      	ldrb	r2, [r7, #3]
 800f27c:	4611      	mov	r1, r2
 800f27e:	4618      	mov	r0, r3
 800f280:	f7f7 f84a 	bl	8006318 <HAL_PCD_SetAddress>
 800f284:	4603      	mov	r3, r0
 800f286:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f288:	7bfb      	ldrb	r3, [r7, #15]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f000 f874 	bl	800f378 <USBD_Get_USB_Status>
 800f290:	4603      	mov	r3, r0
 800f292:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f294:	7bbb      	ldrb	r3, [r7, #14]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <USBD_LL_Transmit>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b086      	sub	sp, #24
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	60f8      	str	r0, [r7, #12]
 800f2a6:	607a      	str	r2, [r7, #4]
 800f2a8:	603b      	str	r3, [r7, #0]
 800f2aa:	460b      	mov	r3, r1
 800f2ac:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f2bc:	7af9      	ldrb	r1, [r7, #11]
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	f7f7 f963 	bl	800658c <HAL_PCD_EP_Transmit>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f2ca:	7dfb      	ldrb	r3, [r7, #23]
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f000 f853 	bl	800f378 <USBD_Get_USB_Status>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 800f2d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3718      	adds	r7, #24
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <USBD_LL_PrepareReceive>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	607a      	str	r2, [r7, #4]
 800f2ea:	603b      	str	r3, [r7, #0]
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f2fe:	7af9      	ldrb	r1, [r7, #11]
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	f7f7 f8df 	bl	80064c6 <HAL_PCD_EP_Receive>
 800f308:	4603      	mov	r3, r0
 800f30a:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f30c:	7dfb      	ldrb	r3, [r7, #23]
 800f30e:	4618      	mov	r0, r3
 800f310:	f000 f832 	bl	800f378 <USBD_Get_USB_Status>
 800f314:	4603      	mov	r3, r0
 800f316:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 800f318:	7dbb      	ldrb	r3, [r7, #22]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3718      	adds	r7, #24
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <USBD_LL_GetRxDataSize>:
 * @brief  Returns the last transferred packet size.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800f322:	b580      	push	{r7, lr}
 800f324:	b082      	sub	sp, #8
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	460b      	mov	r3, r1
 800f32c:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f334:	78fa      	ldrb	r2, [r7, #3]
 800f336:	4611      	mov	r1, r2
 800f338:	4618      	mov	r0, r3
 800f33a:	f7f7 f90f 	bl	800655c <HAL_PCD_EP_GetRxCount>
 800f33e:	4603      	mov	r3, r0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <USBD_static_malloc>:
/**
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void * USBD_static_malloc(uint32_t size) {
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
    return mem;
 800f350:	4b03      	ldr	r3, [pc, #12]	; (800f360 <USBD_static_malloc+0x18>)
}
 800f352:	4618      	mov	r0, r3
 800f354:	370c      	adds	r7, #12
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	20002048 	.word	0x20002048

0800f364 <USBD_static_free>:
/**
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void * p) {
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
}
 800f36c:	bf00      	nop
 800f36e:	370c      	adds	r7, #12
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr

0800f378 <USBD_Get_USB_Status>:
/**
 * @brief  Returns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
 800f378:	b480      	push	{r7}
 800f37a:	b085      	sub	sp, #20
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	4603      	mov	r3, r0
 800f380:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f382:	2300      	movs	r3, #0
 800f384:	73fb      	strb	r3, [r7, #15]

    switch (hal_status) {
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	2b03      	cmp	r3, #3
 800f38a:	d817      	bhi.n	800f3bc <USBD_Get_USB_Status+0x44>
 800f38c:	a201      	add	r2, pc, #4	; (adr r2, 800f394 <USBD_Get_USB_Status+0x1c>)
 800f38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f392:	bf00      	nop
 800f394:	0800f3a5 	.word	0x0800f3a5
 800f398:	0800f3ab 	.word	0x0800f3ab
 800f39c:	0800f3b1 	.word	0x0800f3b1
 800f3a0:	0800f3b7 	.word	0x0800f3b7
    case HAL_OK:
        usb_status = USBD_OK;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	73fb      	strb	r3, [r7, #15]
        break;
 800f3a8:	e00b      	b.n	800f3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR:
        usb_status = USBD_FAIL;
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	73fb      	strb	r3, [r7, #15]
        break;
 800f3ae:	e008      	b.n	800f3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	73fb      	strb	r3, [r7, #15]
        break;
 800f3b4:	e005      	b.n	800f3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT:
        usb_status = USBD_FAIL;
 800f3b6:	2303      	movs	r3, #3
 800f3b8:	73fb      	strb	r3, [r7, #15]
        break;
 800f3ba:	e002      	b.n	800f3c2 <USBD_Get_USB_Status+0x4a>
    default:
        usb_status = USBD_FAIL;
 800f3bc:	2303      	movs	r3, #3
 800f3be:	73fb      	strb	r3, [r7, #15]
        break;
 800f3c0:	bf00      	nop
    }
    return usb_status;
 800f3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <malloc>:
 800f3d0:	4b02      	ldr	r3, [pc, #8]	; (800f3dc <malloc+0xc>)
 800f3d2:	4601      	mov	r1, r0
 800f3d4:	6818      	ldr	r0, [r3, #0]
 800f3d6:	f000 b82b 	b.w	800f430 <_malloc_r>
 800f3da:	bf00      	nop
 800f3dc:	20000178 	.word	0x20000178

0800f3e0 <free>:
 800f3e0:	4b02      	ldr	r3, [pc, #8]	; (800f3ec <free+0xc>)
 800f3e2:	4601      	mov	r1, r0
 800f3e4:	6818      	ldr	r0, [r3, #0]
 800f3e6:	f001 bd2d 	b.w	8010e44 <_free_r>
 800f3ea:	bf00      	nop
 800f3ec:	20000178 	.word	0x20000178

0800f3f0 <sbrk_aligned>:
 800f3f0:	b570      	push	{r4, r5, r6, lr}
 800f3f2:	4e0e      	ldr	r6, [pc, #56]	; (800f42c <sbrk_aligned+0x3c>)
 800f3f4:	460c      	mov	r4, r1
 800f3f6:	6831      	ldr	r1, [r6, #0]
 800f3f8:	4605      	mov	r5, r0
 800f3fa:	b911      	cbnz	r1, 800f402 <sbrk_aligned+0x12>
 800f3fc:	f000 fe4c 	bl	8010098 <_sbrk_r>
 800f400:	6030      	str	r0, [r6, #0]
 800f402:	4621      	mov	r1, r4
 800f404:	4628      	mov	r0, r5
 800f406:	f000 fe47 	bl	8010098 <_sbrk_r>
 800f40a:	1c43      	adds	r3, r0, #1
 800f40c:	d00a      	beq.n	800f424 <sbrk_aligned+0x34>
 800f40e:	1cc4      	adds	r4, r0, #3
 800f410:	f024 0403 	bic.w	r4, r4, #3
 800f414:	42a0      	cmp	r0, r4
 800f416:	d007      	beq.n	800f428 <sbrk_aligned+0x38>
 800f418:	1a21      	subs	r1, r4, r0
 800f41a:	4628      	mov	r0, r5
 800f41c:	f000 fe3c 	bl	8010098 <_sbrk_r>
 800f420:	3001      	adds	r0, #1
 800f422:	d101      	bne.n	800f428 <sbrk_aligned+0x38>
 800f424:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f428:	4620      	mov	r0, r4
 800f42a:	bd70      	pop	{r4, r5, r6, pc}
 800f42c:	2000226c 	.word	0x2000226c

0800f430 <_malloc_r>:
 800f430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f434:	1ccd      	adds	r5, r1, #3
 800f436:	f025 0503 	bic.w	r5, r5, #3
 800f43a:	3508      	adds	r5, #8
 800f43c:	2d0c      	cmp	r5, #12
 800f43e:	bf38      	it	cc
 800f440:	250c      	movcc	r5, #12
 800f442:	2d00      	cmp	r5, #0
 800f444:	4607      	mov	r7, r0
 800f446:	db01      	blt.n	800f44c <_malloc_r+0x1c>
 800f448:	42a9      	cmp	r1, r5
 800f44a:	d905      	bls.n	800f458 <_malloc_r+0x28>
 800f44c:	230c      	movs	r3, #12
 800f44e:	603b      	str	r3, [r7, #0]
 800f450:	2600      	movs	r6, #0
 800f452:	4630      	mov	r0, r6
 800f454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f458:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f52c <_malloc_r+0xfc>
 800f45c:	f000 f868 	bl	800f530 <__malloc_lock>
 800f460:	f8d8 3000 	ldr.w	r3, [r8]
 800f464:	461c      	mov	r4, r3
 800f466:	bb5c      	cbnz	r4, 800f4c0 <_malloc_r+0x90>
 800f468:	4629      	mov	r1, r5
 800f46a:	4638      	mov	r0, r7
 800f46c:	f7ff ffc0 	bl	800f3f0 <sbrk_aligned>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	4604      	mov	r4, r0
 800f474:	d155      	bne.n	800f522 <_malloc_r+0xf2>
 800f476:	f8d8 4000 	ldr.w	r4, [r8]
 800f47a:	4626      	mov	r6, r4
 800f47c:	2e00      	cmp	r6, #0
 800f47e:	d145      	bne.n	800f50c <_malloc_r+0xdc>
 800f480:	2c00      	cmp	r4, #0
 800f482:	d048      	beq.n	800f516 <_malloc_r+0xe6>
 800f484:	6823      	ldr	r3, [r4, #0]
 800f486:	4631      	mov	r1, r6
 800f488:	4638      	mov	r0, r7
 800f48a:	eb04 0903 	add.w	r9, r4, r3
 800f48e:	f000 fe03 	bl	8010098 <_sbrk_r>
 800f492:	4581      	cmp	r9, r0
 800f494:	d13f      	bne.n	800f516 <_malloc_r+0xe6>
 800f496:	6821      	ldr	r1, [r4, #0]
 800f498:	1a6d      	subs	r5, r5, r1
 800f49a:	4629      	mov	r1, r5
 800f49c:	4638      	mov	r0, r7
 800f49e:	f7ff ffa7 	bl	800f3f0 <sbrk_aligned>
 800f4a2:	3001      	adds	r0, #1
 800f4a4:	d037      	beq.n	800f516 <_malloc_r+0xe6>
 800f4a6:	6823      	ldr	r3, [r4, #0]
 800f4a8:	442b      	add	r3, r5
 800f4aa:	6023      	str	r3, [r4, #0]
 800f4ac:	f8d8 3000 	ldr.w	r3, [r8]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d038      	beq.n	800f526 <_malloc_r+0xf6>
 800f4b4:	685a      	ldr	r2, [r3, #4]
 800f4b6:	42a2      	cmp	r2, r4
 800f4b8:	d12b      	bne.n	800f512 <_malloc_r+0xe2>
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	605a      	str	r2, [r3, #4]
 800f4be:	e00f      	b.n	800f4e0 <_malloc_r+0xb0>
 800f4c0:	6822      	ldr	r2, [r4, #0]
 800f4c2:	1b52      	subs	r2, r2, r5
 800f4c4:	d41f      	bmi.n	800f506 <_malloc_r+0xd6>
 800f4c6:	2a0b      	cmp	r2, #11
 800f4c8:	d917      	bls.n	800f4fa <_malloc_r+0xca>
 800f4ca:	1961      	adds	r1, r4, r5
 800f4cc:	42a3      	cmp	r3, r4
 800f4ce:	6025      	str	r5, [r4, #0]
 800f4d0:	bf18      	it	ne
 800f4d2:	6059      	strne	r1, [r3, #4]
 800f4d4:	6863      	ldr	r3, [r4, #4]
 800f4d6:	bf08      	it	eq
 800f4d8:	f8c8 1000 	streq.w	r1, [r8]
 800f4dc:	5162      	str	r2, [r4, r5]
 800f4de:	604b      	str	r3, [r1, #4]
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	f104 060b 	add.w	r6, r4, #11
 800f4e6:	f000 f829 	bl	800f53c <__malloc_unlock>
 800f4ea:	f026 0607 	bic.w	r6, r6, #7
 800f4ee:	1d23      	adds	r3, r4, #4
 800f4f0:	1af2      	subs	r2, r6, r3
 800f4f2:	d0ae      	beq.n	800f452 <_malloc_r+0x22>
 800f4f4:	1b9b      	subs	r3, r3, r6
 800f4f6:	50a3      	str	r3, [r4, r2]
 800f4f8:	e7ab      	b.n	800f452 <_malloc_r+0x22>
 800f4fa:	42a3      	cmp	r3, r4
 800f4fc:	6862      	ldr	r2, [r4, #4]
 800f4fe:	d1dd      	bne.n	800f4bc <_malloc_r+0x8c>
 800f500:	f8c8 2000 	str.w	r2, [r8]
 800f504:	e7ec      	b.n	800f4e0 <_malloc_r+0xb0>
 800f506:	4623      	mov	r3, r4
 800f508:	6864      	ldr	r4, [r4, #4]
 800f50a:	e7ac      	b.n	800f466 <_malloc_r+0x36>
 800f50c:	4634      	mov	r4, r6
 800f50e:	6876      	ldr	r6, [r6, #4]
 800f510:	e7b4      	b.n	800f47c <_malloc_r+0x4c>
 800f512:	4613      	mov	r3, r2
 800f514:	e7cc      	b.n	800f4b0 <_malloc_r+0x80>
 800f516:	230c      	movs	r3, #12
 800f518:	603b      	str	r3, [r7, #0]
 800f51a:	4638      	mov	r0, r7
 800f51c:	f000 f80e 	bl	800f53c <__malloc_unlock>
 800f520:	e797      	b.n	800f452 <_malloc_r+0x22>
 800f522:	6025      	str	r5, [r4, #0]
 800f524:	e7dc      	b.n	800f4e0 <_malloc_r+0xb0>
 800f526:	605b      	str	r3, [r3, #4]
 800f528:	deff      	udf	#255	; 0xff
 800f52a:	bf00      	nop
 800f52c:	20002268 	.word	0x20002268

0800f530 <__malloc_lock>:
 800f530:	4801      	ldr	r0, [pc, #4]	; (800f538 <__malloc_lock+0x8>)
 800f532:	f000 bdfd 	b.w	8010130 <__retarget_lock_acquire_recursive>
 800f536:	bf00      	nop
 800f538:	200023b0 	.word	0x200023b0

0800f53c <__malloc_unlock>:
 800f53c:	4801      	ldr	r0, [pc, #4]	; (800f544 <__malloc_unlock+0x8>)
 800f53e:	f000 bdf8 	b.w	8010132 <__retarget_lock_release_recursive>
 800f542:	bf00      	nop
 800f544:	200023b0 	.word	0x200023b0

0800f548 <__cvt>:
 800f548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f54c:	ec55 4b10 	vmov	r4, r5, d0
 800f550:	2d00      	cmp	r5, #0
 800f552:	460e      	mov	r6, r1
 800f554:	4619      	mov	r1, r3
 800f556:	462b      	mov	r3, r5
 800f558:	bfbb      	ittet	lt
 800f55a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f55e:	461d      	movlt	r5, r3
 800f560:	2300      	movge	r3, #0
 800f562:	232d      	movlt	r3, #45	; 0x2d
 800f564:	700b      	strb	r3, [r1, #0]
 800f566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f568:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f56c:	4691      	mov	r9, r2
 800f56e:	f023 0820 	bic.w	r8, r3, #32
 800f572:	bfbc      	itt	lt
 800f574:	4622      	movlt	r2, r4
 800f576:	4614      	movlt	r4, r2
 800f578:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f57c:	d005      	beq.n	800f58a <__cvt+0x42>
 800f57e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f582:	d100      	bne.n	800f586 <__cvt+0x3e>
 800f584:	3601      	adds	r6, #1
 800f586:	2102      	movs	r1, #2
 800f588:	e000      	b.n	800f58c <__cvt+0x44>
 800f58a:	2103      	movs	r1, #3
 800f58c:	ab03      	add	r3, sp, #12
 800f58e:	9301      	str	r3, [sp, #4]
 800f590:	ab02      	add	r3, sp, #8
 800f592:	9300      	str	r3, [sp, #0]
 800f594:	ec45 4b10 	vmov	d0, r4, r5
 800f598:	4653      	mov	r3, sl
 800f59a:	4632      	mov	r2, r6
 800f59c:	f000 fe60 	bl	8010260 <_dtoa_r>
 800f5a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f5a4:	4607      	mov	r7, r0
 800f5a6:	d102      	bne.n	800f5ae <__cvt+0x66>
 800f5a8:	f019 0f01 	tst.w	r9, #1
 800f5ac:	d022      	beq.n	800f5f4 <__cvt+0xac>
 800f5ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f5b2:	eb07 0906 	add.w	r9, r7, r6
 800f5b6:	d110      	bne.n	800f5da <__cvt+0x92>
 800f5b8:	783b      	ldrb	r3, [r7, #0]
 800f5ba:	2b30      	cmp	r3, #48	; 0x30
 800f5bc:	d10a      	bne.n	800f5d4 <__cvt+0x8c>
 800f5be:	2200      	movs	r2, #0
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	f7f1 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 800f5ca:	b918      	cbnz	r0, 800f5d4 <__cvt+0x8c>
 800f5cc:	f1c6 0601 	rsb	r6, r6, #1
 800f5d0:	f8ca 6000 	str.w	r6, [sl]
 800f5d4:	f8da 3000 	ldr.w	r3, [sl]
 800f5d8:	4499      	add	r9, r3
 800f5da:	2200      	movs	r2, #0
 800f5dc:	2300      	movs	r3, #0
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7f1 fa79 	bl	8000ad8 <__aeabi_dcmpeq>
 800f5e6:	b108      	cbz	r0, 800f5ec <__cvt+0xa4>
 800f5e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5ec:	2230      	movs	r2, #48	; 0x30
 800f5ee:	9b03      	ldr	r3, [sp, #12]
 800f5f0:	454b      	cmp	r3, r9
 800f5f2:	d307      	bcc.n	800f604 <__cvt+0xbc>
 800f5f4:	9b03      	ldr	r3, [sp, #12]
 800f5f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5f8:	1bdb      	subs	r3, r3, r7
 800f5fa:	4638      	mov	r0, r7
 800f5fc:	6013      	str	r3, [r2, #0]
 800f5fe:	b004      	add	sp, #16
 800f600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f604:	1c59      	adds	r1, r3, #1
 800f606:	9103      	str	r1, [sp, #12]
 800f608:	701a      	strb	r2, [r3, #0]
 800f60a:	e7f0      	b.n	800f5ee <__cvt+0xa6>

0800f60c <__exponent>:
 800f60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f60e:	4603      	mov	r3, r0
 800f610:	2900      	cmp	r1, #0
 800f612:	bfb8      	it	lt
 800f614:	4249      	neglt	r1, r1
 800f616:	f803 2b02 	strb.w	r2, [r3], #2
 800f61a:	bfb4      	ite	lt
 800f61c:	222d      	movlt	r2, #45	; 0x2d
 800f61e:	222b      	movge	r2, #43	; 0x2b
 800f620:	2909      	cmp	r1, #9
 800f622:	7042      	strb	r2, [r0, #1]
 800f624:	dd2a      	ble.n	800f67c <__exponent+0x70>
 800f626:	f10d 0207 	add.w	r2, sp, #7
 800f62a:	4617      	mov	r7, r2
 800f62c:	260a      	movs	r6, #10
 800f62e:	4694      	mov	ip, r2
 800f630:	fb91 f5f6 	sdiv	r5, r1, r6
 800f634:	fb06 1415 	mls	r4, r6, r5, r1
 800f638:	3430      	adds	r4, #48	; 0x30
 800f63a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f63e:	460c      	mov	r4, r1
 800f640:	2c63      	cmp	r4, #99	; 0x63
 800f642:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f646:	4629      	mov	r1, r5
 800f648:	dcf1      	bgt.n	800f62e <__exponent+0x22>
 800f64a:	3130      	adds	r1, #48	; 0x30
 800f64c:	f1ac 0402 	sub.w	r4, ip, #2
 800f650:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f654:	1c41      	adds	r1, r0, #1
 800f656:	4622      	mov	r2, r4
 800f658:	42ba      	cmp	r2, r7
 800f65a:	d30a      	bcc.n	800f672 <__exponent+0x66>
 800f65c:	f10d 0209 	add.w	r2, sp, #9
 800f660:	eba2 020c 	sub.w	r2, r2, ip
 800f664:	42bc      	cmp	r4, r7
 800f666:	bf88      	it	hi
 800f668:	2200      	movhi	r2, #0
 800f66a:	4413      	add	r3, r2
 800f66c:	1a18      	subs	r0, r3, r0
 800f66e:	b003      	add	sp, #12
 800f670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f672:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f676:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f67a:	e7ed      	b.n	800f658 <__exponent+0x4c>
 800f67c:	2330      	movs	r3, #48	; 0x30
 800f67e:	3130      	adds	r1, #48	; 0x30
 800f680:	7083      	strb	r3, [r0, #2]
 800f682:	70c1      	strb	r1, [r0, #3]
 800f684:	1d03      	adds	r3, r0, #4
 800f686:	e7f1      	b.n	800f66c <__exponent+0x60>

0800f688 <_printf_float>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	ed2d 8b02 	vpush	{d8}
 800f690:	b08d      	sub	sp, #52	; 0x34
 800f692:	460c      	mov	r4, r1
 800f694:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f698:	4616      	mov	r6, r2
 800f69a:	461f      	mov	r7, r3
 800f69c:	4605      	mov	r5, r0
 800f69e:	f000 fcc3 	bl	8010028 <_localeconv_r>
 800f6a2:	f8d0 a000 	ldr.w	sl, [r0]
 800f6a6:	4650      	mov	r0, sl
 800f6a8:	f7f0 fdea 	bl	8000280 <strlen>
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	930a      	str	r3, [sp, #40]	; 0x28
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	9305      	str	r3, [sp, #20]
 800f6b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f6b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f6bc:	3307      	adds	r3, #7
 800f6be:	f023 0307 	bic.w	r3, r3, #7
 800f6c2:	f103 0208 	add.w	r2, r3, #8
 800f6c6:	f8c8 2000 	str.w	r2, [r8]
 800f6ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f6d2:	9307      	str	r3, [sp, #28]
 800f6d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f6d8:	ee08 0a10 	vmov	s16, r0
 800f6dc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f6e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6e4:	4b9e      	ldr	r3, [pc, #632]	; (800f960 <_printf_float+0x2d8>)
 800f6e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6ea:	f7f1 fa27 	bl	8000b3c <__aeabi_dcmpun>
 800f6ee:	bb88      	cbnz	r0, 800f754 <_printf_float+0xcc>
 800f6f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6f4:	4b9a      	ldr	r3, [pc, #616]	; (800f960 <_printf_float+0x2d8>)
 800f6f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6fa:	f7f1 fa01 	bl	8000b00 <__aeabi_dcmple>
 800f6fe:	bb48      	cbnz	r0, 800f754 <_printf_float+0xcc>
 800f700:	2200      	movs	r2, #0
 800f702:	2300      	movs	r3, #0
 800f704:	4640      	mov	r0, r8
 800f706:	4649      	mov	r1, r9
 800f708:	f7f1 f9f0 	bl	8000aec <__aeabi_dcmplt>
 800f70c:	b110      	cbz	r0, 800f714 <_printf_float+0x8c>
 800f70e:	232d      	movs	r3, #45	; 0x2d
 800f710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f714:	4a93      	ldr	r2, [pc, #588]	; (800f964 <_printf_float+0x2dc>)
 800f716:	4b94      	ldr	r3, [pc, #592]	; (800f968 <_printf_float+0x2e0>)
 800f718:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f71c:	bf94      	ite	ls
 800f71e:	4690      	movls	r8, r2
 800f720:	4698      	movhi	r8, r3
 800f722:	2303      	movs	r3, #3
 800f724:	6123      	str	r3, [r4, #16]
 800f726:	9b05      	ldr	r3, [sp, #20]
 800f728:	f023 0304 	bic.w	r3, r3, #4
 800f72c:	6023      	str	r3, [r4, #0]
 800f72e:	f04f 0900 	mov.w	r9, #0
 800f732:	9700      	str	r7, [sp, #0]
 800f734:	4633      	mov	r3, r6
 800f736:	aa0b      	add	r2, sp, #44	; 0x2c
 800f738:	4621      	mov	r1, r4
 800f73a:	4628      	mov	r0, r5
 800f73c:	f000 f9da 	bl	800faf4 <_printf_common>
 800f740:	3001      	adds	r0, #1
 800f742:	f040 8090 	bne.w	800f866 <_printf_float+0x1de>
 800f746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f74a:	b00d      	add	sp, #52	; 0x34
 800f74c:	ecbd 8b02 	vpop	{d8}
 800f750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f754:	4642      	mov	r2, r8
 800f756:	464b      	mov	r3, r9
 800f758:	4640      	mov	r0, r8
 800f75a:	4649      	mov	r1, r9
 800f75c:	f7f1 f9ee 	bl	8000b3c <__aeabi_dcmpun>
 800f760:	b140      	cbz	r0, 800f774 <_printf_float+0xec>
 800f762:	464b      	mov	r3, r9
 800f764:	2b00      	cmp	r3, #0
 800f766:	bfbc      	itt	lt
 800f768:	232d      	movlt	r3, #45	; 0x2d
 800f76a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f76e:	4a7f      	ldr	r2, [pc, #508]	; (800f96c <_printf_float+0x2e4>)
 800f770:	4b7f      	ldr	r3, [pc, #508]	; (800f970 <_printf_float+0x2e8>)
 800f772:	e7d1      	b.n	800f718 <_printf_float+0x90>
 800f774:	6863      	ldr	r3, [r4, #4]
 800f776:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f77a:	9206      	str	r2, [sp, #24]
 800f77c:	1c5a      	adds	r2, r3, #1
 800f77e:	d13f      	bne.n	800f800 <_printf_float+0x178>
 800f780:	2306      	movs	r3, #6
 800f782:	6063      	str	r3, [r4, #4]
 800f784:	9b05      	ldr	r3, [sp, #20]
 800f786:	6861      	ldr	r1, [r4, #4]
 800f788:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f78c:	2300      	movs	r3, #0
 800f78e:	9303      	str	r3, [sp, #12]
 800f790:	ab0a      	add	r3, sp, #40	; 0x28
 800f792:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f796:	ab09      	add	r3, sp, #36	; 0x24
 800f798:	ec49 8b10 	vmov	d0, r8, r9
 800f79c:	9300      	str	r3, [sp, #0]
 800f79e:	6022      	str	r2, [r4, #0]
 800f7a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	f7ff fecf 	bl	800f548 <__cvt>
 800f7aa:	9b06      	ldr	r3, [sp, #24]
 800f7ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7ae:	2b47      	cmp	r3, #71	; 0x47
 800f7b0:	4680      	mov	r8, r0
 800f7b2:	d108      	bne.n	800f7c6 <_printf_float+0x13e>
 800f7b4:	1cc8      	adds	r0, r1, #3
 800f7b6:	db02      	blt.n	800f7be <_printf_float+0x136>
 800f7b8:	6863      	ldr	r3, [r4, #4]
 800f7ba:	4299      	cmp	r1, r3
 800f7bc:	dd41      	ble.n	800f842 <_printf_float+0x1ba>
 800f7be:	f1ab 0302 	sub.w	r3, fp, #2
 800f7c2:	fa5f fb83 	uxtb.w	fp, r3
 800f7c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f7ca:	d820      	bhi.n	800f80e <_printf_float+0x186>
 800f7cc:	3901      	subs	r1, #1
 800f7ce:	465a      	mov	r2, fp
 800f7d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f7d4:	9109      	str	r1, [sp, #36]	; 0x24
 800f7d6:	f7ff ff19 	bl	800f60c <__exponent>
 800f7da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7dc:	1813      	adds	r3, r2, r0
 800f7de:	2a01      	cmp	r2, #1
 800f7e0:	4681      	mov	r9, r0
 800f7e2:	6123      	str	r3, [r4, #16]
 800f7e4:	dc02      	bgt.n	800f7ec <_printf_float+0x164>
 800f7e6:	6822      	ldr	r2, [r4, #0]
 800f7e8:	07d2      	lsls	r2, r2, #31
 800f7ea:	d501      	bpl.n	800f7f0 <_printf_float+0x168>
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	6123      	str	r3, [r4, #16]
 800f7f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d09c      	beq.n	800f732 <_printf_float+0xaa>
 800f7f8:	232d      	movs	r3, #45	; 0x2d
 800f7fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7fe:	e798      	b.n	800f732 <_printf_float+0xaa>
 800f800:	9a06      	ldr	r2, [sp, #24]
 800f802:	2a47      	cmp	r2, #71	; 0x47
 800f804:	d1be      	bne.n	800f784 <_printf_float+0xfc>
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1bc      	bne.n	800f784 <_printf_float+0xfc>
 800f80a:	2301      	movs	r3, #1
 800f80c:	e7b9      	b.n	800f782 <_printf_float+0xfa>
 800f80e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f812:	d118      	bne.n	800f846 <_printf_float+0x1be>
 800f814:	2900      	cmp	r1, #0
 800f816:	6863      	ldr	r3, [r4, #4]
 800f818:	dd0b      	ble.n	800f832 <_printf_float+0x1aa>
 800f81a:	6121      	str	r1, [r4, #16]
 800f81c:	b913      	cbnz	r3, 800f824 <_printf_float+0x19c>
 800f81e:	6822      	ldr	r2, [r4, #0]
 800f820:	07d0      	lsls	r0, r2, #31
 800f822:	d502      	bpl.n	800f82a <_printf_float+0x1a2>
 800f824:	3301      	adds	r3, #1
 800f826:	440b      	add	r3, r1
 800f828:	6123      	str	r3, [r4, #16]
 800f82a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f82c:	f04f 0900 	mov.w	r9, #0
 800f830:	e7de      	b.n	800f7f0 <_printf_float+0x168>
 800f832:	b913      	cbnz	r3, 800f83a <_printf_float+0x1b2>
 800f834:	6822      	ldr	r2, [r4, #0]
 800f836:	07d2      	lsls	r2, r2, #31
 800f838:	d501      	bpl.n	800f83e <_printf_float+0x1b6>
 800f83a:	3302      	adds	r3, #2
 800f83c:	e7f4      	b.n	800f828 <_printf_float+0x1a0>
 800f83e:	2301      	movs	r3, #1
 800f840:	e7f2      	b.n	800f828 <_printf_float+0x1a0>
 800f842:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f848:	4299      	cmp	r1, r3
 800f84a:	db05      	blt.n	800f858 <_printf_float+0x1d0>
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	6121      	str	r1, [r4, #16]
 800f850:	07d8      	lsls	r0, r3, #31
 800f852:	d5ea      	bpl.n	800f82a <_printf_float+0x1a2>
 800f854:	1c4b      	adds	r3, r1, #1
 800f856:	e7e7      	b.n	800f828 <_printf_float+0x1a0>
 800f858:	2900      	cmp	r1, #0
 800f85a:	bfd4      	ite	le
 800f85c:	f1c1 0202 	rsble	r2, r1, #2
 800f860:	2201      	movgt	r2, #1
 800f862:	4413      	add	r3, r2
 800f864:	e7e0      	b.n	800f828 <_printf_float+0x1a0>
 800f866:	6823      	ldr	r3, [r4, #0]
 800f868:	055a      	lsls	r2, r3, #21
 800f86a:	d407      	bmi.n	800f87c <_printf_float+0x1f4>
 800f86c:	6923      	ldr	r3, [r4, #16]
 800f86e:	4642      	mov	r2, r8
 800f870:	4631      	mov	r1, r6
 800f872:	4628      	mov	r0, r5
 800f874:	47b8      	blx	r7
 800f876:	3001      	adds	r0, #1
 800f878:	d12c      	bne.n	800f8d4 <_printf_float+0x24c>
 800f87a:	e764      	b.n	800f746 <_printf_float+0xbe>
 800f87c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f880:	f240 80e0 	bls.w	800fa44 <_printf_float+0x3bc>
 800f884:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f888:	2200      	movs	r2, #0
 800f88a:	2300      	movs	r3, #0
 800f88c:	f7f1 f924 	bl	8000ad8 <__aeabi_dcmpeq>
 800f890:	2800      	cmp	r0, #0
 800f892:	d034      	beq.n	800f8fe <_printf_float+0x276>
 800f894:	4a37      	ldr	r2, [pc, #220]	; (800f974 <_printf_float+0x2ec>)
 800f896:	2301      	movs	r3, #1
 800f898:	4631      	mov	r1, r6
 800f89a:	4628      	mov	r0, r5
 800f89c:	47b8      	blx	r7
 800f89e:	3001      	adds	r0, #1
 800f8a0:	f43f af51 	beq.w	800f746 <_printf_float+0xbe>
 800f8a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	db02      	blt.n	800f8b2 <_printf_float+0x22a>
 800f8ac:	6823      	ldr	r3, [r4, #0]
 800f8ae:	07d8      	lsls	r0, r3, #31
 800f8b0:	d510      	bpl.n	800f8d4 <_printf_float+0x24c>
 800f8b2:	ee18 3a10 	vmov	r3, s16
 800f8b6:	4652      	mov	r2, sl
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	47b8      	blx	r7
 800f8be:	3001      	adds	r0, #1
 800f8c0:	f43f af41 	beq.w	800f746 <_printf_float+0xbe>
 800f8c4:	f04f 0800 	mov.w	r8, #0
 800f8c8:	f104 091a 	add.w	r9, r4, #26
 800f8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ce:	3b01      	subs	r3, #1
 800f8d0:	4543      	cmp	r3, r8
 800f8d2:	dc09      	bgt.n	800f8e8 <_printf_float+0x260>
 800f8d4:	6823      	ldr	r3, [r4, #0]
 800f8d6:	079b      	lsls	r3, r3, #30
 800f8d8:	f100 8107 	bmi.w	800faea <_printf_float+0x462>
 800f8dc:	68e0      	ldr	r0, [r4, #12]
 800f8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8e0:	4298      	cmp	r0, r3
 800f8e2:	bfb8      	it	lt
 800f8e4:	4618      	movlt	r0, r3
 800f8e6:	e730      	b.n	800f74a <_printf_float+0xc2>
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	464a      	mov	r2, r9
 800f8ec:	4631      	mov	r1, r6
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	47b8      	blx	r7
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	f43f af27 	beq.w	800f746 <_printf_float+0xbe>
 800f8f8:	f108 0801 	add.w	r8, r8, #1
 800f8fc:	e7e6      	b.n	800f8cc <_printf_float+0x244>
 800f8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f900:	2b00      	cmp	r3, #0
 800f902:	dc39      	bgt.n	800f978 <_printf_float+0x2f0>
 800f904:	4a1b      	ldr	r2, [pc, #108]	; (800f974 <_printf_float+0x2ec>)
 800f906:	2301      	movs	r3, #1
 800f908:	4631      	mov	r1, r6
 800f90a:	4628      	mov	r0, r5
 800f90c:	47b8      	blx	r7
 800f90e:	3001      	adds	r0, #1
 800f910:	f43f af19 	beq.w	800f746 <_printf_float+0xbe>
 800f914:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f918:	4313      	orrs	r3, r2
 800f91a:	d102      	bne.n	800f922 <_printf_float+0x29a>
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	07d9      	lsls	r1, r3, #31
 800f920:	d5d8      	bpl.n	800f8d4 <_printf_float+0x24c>
 800f922:	ee18 3a10 	vmov	r3, s16
 800f926:	4652      	mov	r2, sl
 800f928:	4631      	mov	r1, r6
 800f92a:	4628      	mov	r0, r5
 800f92c:	47b8      	blx	r7
 800f92e:	3001      	adds	r0, #1
 800f930:	f43f af09 	beq.w	800f746 <_printf_float+0xbe>
 800f934:	f04f 0900 	mov.w	r9, #0
 800f938:	f104 0a1a 	add.w	sl, r4, #26
 800f93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f93e:	425b      	negs	r3, r3
 800f940:	454b      	cmp	r3, r9
 800f942:	dc01      	bgt.n	800f948 <_printf_float+0x2c0>
 800f944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f946:	e792      	b.n	800f86e <_printf_float+0x1e6>
 800f948:	2301      	movs	r3, #1
 800f94a:	4652      	mov	r2, sl
 800f94c:	4631      	mov	r1, r6
 800f94e:	4628      	mov	r0, r5
 800f950:	47b8      	blx	r7
 800f952:	3001      	adds	r0, #1
 800f954:	f43f aef7 	beq.w	800f746 <_printf_float+0xbe>
 800f958:	f109 0901 	add.w	r9, r9, #1
 800f95c:	e7ee      	b.n	800f93c <_printf_float+0x2b4>
 800f95e:	bf00      	nop
 800f960:	7fefffff 	.word	0x7fefffff
 800f964:	080124ac 	.word	0x080124ac
 800f968:	080124b0 	.word	0x080124b0
 800f96c:	080124b4 	.word	0x080124b4
 800f970:	080124b8 	.word	0x080124b8
 800f974:	080124bc 	.word	0x080124bc
 800f978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f97a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f97c:	429a      	cmp	r2, r3
 800f97e:	bfa8      	it	ge
 800f980:	461a      	movge	r2, r3
 800f982:	2a00      	cmp	r2, #0
 800f984:	4691      	mov	r9, r2
 800f986:	dc37      	bgt.n	800f9f8 <_printf_float+0x370>
 800f988:	f04f 0b00 	mov.w	fp, #0
 800f98c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f990:	f104 021a 	add.w	r2, r4, #26
 800f994:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f996:	9305      	str	r3, [sp, #20]
 800f998:	eba3 0309 	sub.w	r3, r3, r9
 800f99c:	455b      	cmp	r3, fp
 800f99e:	dc33      	bgt.n	800fa08 <_printf_float+0x380>
 800f9a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	db3b      	blt.n	800fa20 <_printf_float+0x398>
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	07da      	lsls	r2, r3, #31
 800f9ac:	d438      	bmi.n	800fa20 <_printf_float+0x398>
 800f9ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f9b2:	eba2 0903 	sub.w	r9, r2, r3
 800f9b6:	9b05      	ldr	r3, [sp, #20]
 800f9b8:	1ad2      	subs	r2, r2, r3
 800f9ba:	4591      	cmp	r9, r2
 800f9bc:	bfa8      	it	ge
 800f9be:	4691      	movge	r9, r2
 800f9c0:	f1b9 0f00 	cmp.w	r9, #0
 800f9c4:	dc35      	bgt.n	800fa32 <_printf_float+0x3aa>
 800f9c6:	f04f 0800 	mov.w	r8, #0
 800f9ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9ce:	f104 0a1a 	add.w	sl, r4, #26
 800f9d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9d6:	1a9b      	subs	r3, r3, r2
 800f9d8:	eba3 0309 	sub.w	r3, r3, r9
 800f9dc:	4543      	cmp	r3, r8
 800f9de:	f77f af79 	ble.w	800f8d4 <_printf_float+0x24c>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	4652      	mov	r2, sl
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	47b8      	blx	r7
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	f43f aeaa 	beq.w	800f746 <_printf_float+0xbe>
 800f9f2:	f108 0801 	add.w	r8, r8, #1
 800f9f6:	e7ec      	b.n	800f9d2 <_printf_float+0x34a>
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	4631      	mov	r1, r6
 800f9fc:	4642      	mov	r2, r8
 800f9fe:	4628      	mov	r0, r5
 800fa00:	47b8      	blx	r7
 800fa02:	3001      	adds	r0, #1
 800fa04:	d1c0      	bne.n	800f988 <_printf_float+0x300>
 800fa06:	e69e      	b.n	800f746 <_printf_float+0xbe>
 800fa08:	2301      	movs	r3, #1
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	9205      	str	r2, [sp, #20]
 800fa10:	47b8      	blx	r7
 800fa12:	3001      	adds	r0, #1
 800fa14:	f43f ae97 	beq.w	800f746 <_printf_float+0xbe>
 800fa18:	9a05      	ldr	r2, [sp, #20]
 800fa1a:	f10b 0b01 	add.w	fp, fp, #1
 800fa1e:	e7b9      	b.n	800f994 <_printf_float+0x30c>
 800fa20:	ee18 3a10 	vmov	r3, s16
 800fa24:	4652      	mov	r2, sl
 800fa26:	4631      	mov	r1, r6
 800fa28:	4628      	mov	r0, r5
 800fa2a:	47b8      	blx	r7
 800fa2c:	3001      	adds	r0, #1
 800fa2e:	d1be      	bne.n	800f9ae <_printf_float+0x326>
 800fa30:	e689      	b.n	800f746 <_printf_float+0xbe>
 800fa32:	9a05      	ldr	r2, [sp, #20]
 800fa34:	464b      	mov	r3, r9
 800fa36:	4442      	add	r2, r8
 800fa38:	4631      	mov	r1, r6
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	47b8      	blx	r7
 800fa3e:	3001      	adds	r0, #1
 800fa40:	d1c1      	bne.n	800f9c6 <_printf_float+0x33e>
 800fa42:	e680      	b.n	800f746 <_printf_float+0xbe>
 800fa44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa46:	2a01      	cmp	r2, #1
 800fa48:	dc01      	bgt.n	800fa4e <_printf_float+0x3c6>
 800fa4a:	07db      	lsls	r3, r3, #31
 800fa4c:	d53a      	bpl.n	800fac4 <_printf_float+0x43c>
 800fa4e:	2301      	movs	r3, #1
 800fa50:	4642      	mov	r2, r8
 800fa52:	4631      	mov	r1, r6
 800fa54:	4628      	mov	r0, r5
 800fa56:	47b8      	blx	r7
 800fa58:	3001      	adds	r0, #1
 800fa5a:	f43f ae74 	beq.w	800f746 <_printf_float+0xbe>
 800fa5e:	ee18 3a10 	vmov	r3, s16
 800fa62:	4652      	mov	r2, sl
 800fa64:	4631      	mov	r1, r6
 800fa66:	4628      	mov	r0, r5
 800fa68:	47b8      	blx	r7
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	f43f ae6b 	beq.w	800f746 <_printf_float+0xbe>
 800fa70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa74:	2200      	movs	r2, #0
 800fa76:	2300      	movs	r3, #0
 800fa78:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fa7c:	f7f1 f82c 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa80:	b9d8      	cbnz	r0, 800faba <_printf_float+0x432>
 800fa82:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800fa86:	f108 0201 	add.w	r2, r8, #1
 800fa8a:	4631      	mov	r1, r6
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	47b8      	blx	r7
 800fa90:	3001      	adds	r0, #1
 800fa92:	d10e      	bne.n	800fab2 <_printf_float+0x42a>
 800fa94:	e657      	b.n	800f746 <_printf_float+0xbe>
 800fa96:	2301      	movs	r3, #1
 800fa98:	4652      	mov	r2, sl
 800fa9a:	4631      	mov	r1, r6
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	47b8      	blx	r7
 800faa0:	3001      	adds	r0, #1
 800faa2:	f43f ae50 	beq.w	800f746 <_printf_float+0xbe>
 800faa6:	f108 0801 	add.w	r8, r8, #1
 800faaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faac:	3b01      	subs	r3, #1
 800faae:	4543      	cmp	r3, r8
 800fab0:	dcf1      	bgt.n	800fa96 <_printf_float+0x40e>
 800fab2:	464b      	mov	r3, r9
 800fab4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fab8:	e6da      	b.n	800f870 <_printf_float+0x1e8>
 800faba:	f04f 0800 	mov.w	r8, #0
 800fabe:	f104 0a1a 	add.w	sl, r4, #26
 800fac2:	e7f2      	b.n	800faaa <_printf_float+0x422>
 800fac4:	2301      	movs	r3, #1
 800fac6:	4642      	mov	r2, r8
 800fac8:	e7df      	b.n	800fa8a <_printf_float+0x402>
 800faca:	2301      	movs	r3, #1
 800facc:	464a      	mov	r2, r9
 800face:	4631      	mov	r1, r6
 800fad0:	4628      	mov	r0, r5
 800fad2:	47b8      	blx	r7
 800fad4:	3001      	adds	r0, #1
 800fad6:	f43f ae36 	beq.w	800f746 <_printf_float+0xbe>
 800fada:	f108 0801 	add.w	r8, r8, #1
 800fade:	68e3      	ldr	r3, [r4, #12]
 800fae0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fae2:	1a5b      	subs	r3, r3, r1
 800fae4:	4543      	cmp	r3, r8
 800fae6:	dcf0      	bgt.n	800faca <_printf_float+0x442>
 800fae8:	e6f8      	b.n	800f8dc <_printf_float+0x254>
 800faea:	f04f 0800 	mov.w	r8, #0
 800faee:	f104 0919 	add.w	r9, r4, #25
 800faf2:	e7f4      	b.n	800fade <_printf_float+0x456>

0800faf4 <_printf_common>:
 800faf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faf8:	4616      	mov	r6, r2
 800fafa:	4699      	mov	r9, r3
 800fafc:	688a      	ldr	r2, [r1, #8]
 800fafe:	690b      	ldr	r3, [r1, #16]
 800fb00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb04:	4293      	cmp	r3, r2
 800fb06:	bfb8      	it	lt
 800fb08:	4613      	movlt	r3, r2
 800fb0a:	6033      	str	r3, [r6, #0]
 800fb0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb10:	4607      	mov	r7, r0
 800fb12:	460c      	mov	r4, r1
 800fb14:	b10a      	cbz	r2, 800fb1a <_printf_common+0x26>
 800fb16:	3301      	adds	r3, #1
 800fb18:	6033      	str	r3, [r6, #0]
 800fb1a:	6823      	ldr	r3, [r4, #0]
 800fb1c:	0699      	lsls	r1, r3, #26
 800fb1e:	bf42      	ittt	mi
 800fb20:	6833      	ldrmi	r3, [r6, #0]
 800fb22:	3302      	addmi	r3, #2
 800fb24:	6033      	strmi	r3, [r6, #0]
 800fb26:	6825      	ldr	r5, [r4, #0]
 800fb28:	f015 0506 	ands.w	r5, r5, #6
 800fb2c:	d106      	bne.n	800fb3c <_printf_common+0x48>
 800fb2e:	f104 0a19 	add.w	sl, r4, #25
 800fb32:	68e3      	ldr	r3, [r4, #12]
 800fb34:	6832      	ldr	r2, [r6, #0]
 800fb36:	1a9b      	subs	r3, r3, r2
 800fb38:	42ab      	cmp	r3, r5
 800fb3a:	dc26      	bgt.n	800fb8a <_printf_common+0x96>
 800fb3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb40:	1e13      	subs	r3, r2, #0
 800fb42:	6822      	ldr	r2, [r4, #0]
 800fb44:	bf18      	it	ne
 800fb46:	2301      	movne	r3, #1
 800fb48:	0692      	lsls	r2, r2, #26
 800fb4a:	d42b      	bmi.n	800fba4 <_printf_common+0xb0>
 800fb4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb50:	4649      	mov	r1, r9
 800fb52:	4638      	mov	r0, r7
 800fb54:	47c0      	blx	r8
 800fb56:	3001      	adds	r0, #1
 800fb58:	d01e      	beq.n	800fb98 <_printf_common+0xa4>
 800fb5a:	6823      	ldr	r3, [r4, #0]
 800fb5c:	6922      	ldr	r2, [r4, #16]
 800fb5e:	f003 0306 	and.w	r3, r3, #6
 800fb62:	2b04      	cmp	r3, #4
 800fb64:	bf02      	ittt	eq
 800fb66:	68e5      	ldreq	r5, [r4, #12]
 800fb68:	6833      	ldreq	r3, [r6, #0]
 800fb6a:	1aed      	subeq	r5, r5, r3
 800fb6c:	68a3      	ldr	r3, [r4, #8]
 800fb6e:	bf0c      	ite	eq
 800fb70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb74:	2500      	movne	r5, #0
 800fb76:	4293      	cmp	r3, r2
 800fb78:	bfc4      	itt	gt
 800fb7a:	1a9b      	subgt	r3, r3, r2
 800fb7c:	18ed      	addgt	r5, r5, r3
 800fb7e:	2600      	movs	r6, #0
 800fb80:	341a      	adds	r4, #26
 800fb82:	42b5      	cmp	r5, r6
 800fb84:	d11a      	bne.n	800fbbc <_printf_common+0xc8>
 800fb86:	2000      	movs	r0, #0
 800fb88:	e008      	b.n	800fb9c <_printf_common+0xa8>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	4652      	mov	r2, sl
 800fb8e:	4649      	mov	r1, r9
 800fb90:	4638      	mov	r0, r7
 800fb92:	47c0      	blx	r8
 800fb94:	3001      	adds	r0, #1
 800fb96:	d103      	bne.n	800fba0 <_printf_common+0xac>
 800fb98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fba0:	3501      	adds	r5, #1
 800fba2:	e7c6      	b.n	800fb32 <_printf_common+0x3e>
 800fba4:	18e1      	adds	r1, r4, r3
 800fba6:	1c5a      	adds	r2, r3, #1
 800fba8:	2030      	movs	r0, #48	; 0x30
 800fbaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbae:	4422      	add	r2, r4
 800fbb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbb8:	3302      	adds	r3, #2
 800fbba:	e7c7      	b.n	800fb4c <_printf_common+0x58>
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	4622      	mov	r2, r4
 800fbc0:	4649      	mov	r1, r9
 800fbc2:	4638      	mov	r0, r7
 800fbc4:	47c0      	blx	r8
 800fbc6:	3001      	adds	r0, #1
 800fbc8:	d0e6      	beq.n	800fb98 <_printf_common+0xa4>
 800fbca:	3601      	adds	r6, #1
 800fbcc:	e7d9      	b.n	800fb82 <_printf_common+0x8e>
	...

0800fbd0 <_printf_i>:
 800fbd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbd4:	7e0f      	ldrb	r7, [r1, #24]
 800fbd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fbd8:	2f78      	cmp	r7, #120	; 0x78
 800fbda:	4691      	mov	r9, r2
 800fbdc:	4680      	mov	r8, r0
 800fbde:	460c      	mov	r4, r1
 800fbe0:	469a      	mov	sl, r3
 800fbe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fbe6:	d807      	bhi.n	800fbf8 <_printf_i+0x28>
 800fbe8:	2f62      	cmp	r7, #98	; 0x62
 800fbea:	d80a      	bhi.n	800fc02 <_printf_i+0x32>
 800fbec:	2f00      	cmp	r7, #0
 800fbee:	f000 80d4 	beq.w	800fd9a <_printf_i+0x1ca>
 800fbf2:	2f58      	cmp	r7, #88	; 0x58
 800fbf4:	f000 80c0 	beq.w	800fd78 <_printf_i+0x1a8>
 800fbf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc00:	e03a      	b.n	800fc78 <_printf_i+0xa8>
 800fc02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc06:	2b15      	cmp	r3, #21
 800fc08:	d8f6      	bhi.n	800fbf8 <_printf_i+0x28>
 800fc0a:	a101      	add	r1, pc, #4	; (adr r1, 800fc10 <_printf_i+0x40>)
 800fc0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc10:	0800fc69 	.word	0x0800fc69
 800fc14:	0800fc7d 	.word	0x0800fc7d
 800fc18:	0800fbf9 	.word	0x0800fbf9
 800fc1c:	0800fbf9 	.word	0x0800fbf9
 800fc20:	0800fbf9 	.word	0x0800fbf9
 800fc24:	0800fbf9 	.word	0x0800fbf9
 800fc28:	0800fc7d 	.word	0x0800fc7d
 800fc2c:	0800fbf9 	.word	0x0800fbf9
 800fc30:	0800fbf9 	.word	0x0800fbf9
 800fc34:	0800fbf9 	.word	0x0800fbf9
 800fc38:	0800fbf9 	.word	0x0800fbf9
 800fc3c:	0800fd81 	.word	0x0800fd81
 800fc40:	0800fca9 	.word	0x0800fca9
 800fc44:	0800fd3b 	.word	0x0800fd3b
 800fc48:	0800fbf9 	.word	0x0800fbf9
 800fc4c:	0800fbf9 	.word	0x0800fbf9
 800fc50:	0800fda3 	.word	0x0800fda3
 800fc54:	0800fbf9 	.word	0x0800fbf9
 800fc58:	0800fca9 	.word	0x0800fca9
 800fc5c:	0800fbf9 	.word	0x0800fbf9
 800fc60:	0800fbf9 	.word	0x0800fbf9
 800fc64:	0800fd43 	.word	0x0800fd43
 800fc68:	682b      	ldr	r3, [r5, #0]
 800fc6a:	1d1a      	adds	r2, r3, #4
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	602a      	str	r2, [r5, #0]
 800fc70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e09f      	b.n	800fdbc <_printf_i+0x1ec>
 800fc7c:	6820      	ldr	r0, [r4, #0]
 800fc7e:	682b      	ldr	r3, [r5, #0]
 800fc80:	0607      	lsls	r7, r0, #24
 800fc82:	f103 0104 	add.w	r1, r3, #4
 800fc86:	6029      	str	r1, [r5, #0]
 800fc88:	d501      	bpl.n	800fc8e <_printf_i+0xbe>
 800fc8a:	681e      	ldr	r6, [r3, #0]
 800fc8c:	e003      	b.n	800fc96 <_printf_i+0xc6>
 800fc8e:	0646      	lsls	r6, r0, #25
 800fc90:	d5fb      	bpl.n	800fc8a <_printf_i+0xba>
 800fc92:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fc96:	2e00      	cmp	r6, #0
 800fc98:	da03      	bge.n	800fca2 <_printf_i+0xd2>
 800fc9a:	232d      	movs	r3, #45	; 0x2d
 800fc9c:	4276      	negs	r6, r6
 800fc9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fca2:	485a      	ldr	r0, [pc, #360]	; (800fe0c <_printf_i+0x23c>)
 800fca4:	230a      	movs	r3, #10
 800fca6:	e012      	b.n	800fcce <_printf_i+0xfe>
 800fca8:	682b      	ldr	r3, [r5, #0]
 800fcaa:	6820      	ldr	r0, [r4, #0]
 800fcac:	1d19      	adds	r1, r3, #4
 800fcae:	6029      	str	r1, [r5, #0]
 800fcb0:	0605      	lsls	r5, r0, #24
 800fcb2:	d501      	bpl.n	800fcb8 <_printf_i+0xe8>
 800fcb4:	681e      	ldr	r6, [r3, #0]
 800fcb6:	e002      	b.n	800fcbe <_printf_i+0xee>
 800fcb8:	0641      	lsls	r1, r0, #25
 800fcba:	d5fb      	bpl.n	800fcb4 <_printf_i+0xe4>
 800fcbc:	881e      	ldrh	r6, [r3, #0]
 800fcbe:	4853      	ldr	r0, [pc, #332]	; (800fe0c <_printf_i+0x23c>)
 800fcc0:	2f6f      	cmp	r7, #111	; 0x6f
 800fcc2:	bf0c      	ite	eq
 800fcc4:	2308      	moveq	r3, #8
 800fcc6:	230a      	movne	r3, #10
 800fcc8:	2100      	movs	r1, #0
 800fcca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcce:	6865      	ldr	r5, [r4, #4]
 800fcd0:	60a5      	str	r5, [r4, #8]
 800fcd2:	2d00      	cmp	r5, #0
 800fcd4:	bfa2      	ittt	ge
 800fcd6:	6821      	ldrge	r1, [r4, #0]
 800fcd8:	f021 0104 	bicge.w	r1, r1, #4
 800fcdc:	6021      	strge	r1, [r4, #0]
 800fcde:	b90e      	cbnz	r6, 800fce4 <_printf_i+0x114>
 800fce0:	2d00      	cmp	r5, #0
 800fce2:	d04b      	beq.n	800fd7c <_printf_i+0x1ac>
 800fce4:	4615      	mov	r5, r2
 800fce6:	fbb6 f1f3 	udiv	r1, r6, r3
 800fcea:	fb03 6711 	mls	r7, r3, r1, r6
 800fcee:	5dc7      	ldrb	r7, [r0, r7]
 800fcf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fcf4:	4637      	mov	r7, r6
 800fcf6:	42bb      	cmp	r3, r7
 800fcf8:	460e      	mov	r6, r1
 800fcfa:	d9f4      	bls.n	800fce6 <_printf_i+0x116>
 800fcfc:	2b08      	cmp	r3, #8
 800fcfe:	d10b      	bne.n	800fd18 <_printf_i+0x148>
 800fd00:	6823      	ldr	r3, [r4, #0]
 800fd02:	07de      	lsls	r6, r3, #31
 800fd04:	d508      	bpl.n	800fd18 <_printf_i+0x148>
 800fd06:	6923      	ldr	r3, [r4, #16]
 800fd08:	6861      	ldr	r1, [r4, #4]
 800fd0a:	4299      	cmp	r1, r3
 800fd0c:	bfde      	ittt	le
 800fd0e:	2330      	movle	r3, #48	; 0x30
 800fd10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fd18:	1b52      	subs	r2, r2, r5
 800fd1a:	6122      	str	r2, [r4, #16]
 800fd1c:	f8cd a000 	str.w	sl, [sp]
 800fd20:	464b      	mov	r3, r9
 800fd22:	aa03      	add	r2, sp, #12
 800fd24:	4621      	mov	r1, r4
 800fd26:	4640      	mov	r0, r8
 800fd28:	f7ff fee4 	bl	800faf4 <_printf_common>
 800fd2c:	3001      	adds	r0, #1
 800fd2e:	d14a      	bne.n	800fdc6 <_printf_i+0x1f6>
 800fd30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd34:	b004      	add	sp, #16
 800fd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd3a:	6823      	ldr	r3, [r4, #0]
 800fd3c:	f043 0320 	orr.w	r3, r3, #32
 800fd40:	6023      	str	r3, [r4, #0]
 800fd42:	4833      	ldr	r0, [pc, #204]	; (800fe10 <_printf_i+0x240>)
 800fd44:	2778      	movs	r7, #120	; 0x78
 800fd46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	6829      	ldr	r1, [r5, #0]
 800fd4e:	061f      	lsls	r7, r3, #24
 800fd50:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd54:	d402      	bmi.n	800fd5c <_printf_i+0x18c>
 800fd56:	065f      	lsls	r7, r3, #25
 800fd58:	bf48      	it	mi
 800fd5a:	b2b6      	uxthmi	r6, r6
 800fd5c:	07df      	lsls	r7, r3, #31
 800fd5e:	bf48      	it	mi
 800fd60:	f043 0320 	orrmi.w	r3, r3, #32
 800fd64:	6029      	str	r1, [r5, #0]
 800fd66:	bf48      	it	mi
 800fd68:	6023      	strmi	r3, [r4, #0]
 800fd6a:	b91e      	cbnz	r6, 800fd74 <_printf_i+0x1a4>
 800fd6c:	6823      	ldr	r3, [r4, #0]
 800fd6e:	f023 0320 	bic.w	r3, r3, #32
 800fd72:	6023      	str	r3, [r4, #0]
 800fd74:	2310      	movs	r3, #16
 800fd76:	e7a7      	b.n	800fcc8 <_printf_i+0xf8>
 800fd78:	4824      	ldr	r0, [pc, #144]	; (800fe0c <_printf_i+0x23c>)
 800fd7a:	e7e4      	b.n	800fd46 <_printf_i+0x176>
 800fd7c:	4615      	mov	r5, r2
 800fd7e:	e7bd      	b.n	800fcfc <_printf_i+0x12c>
 800fd80:	682b      	ldr	r3, [r5, #0]
 800fd82:	6826      	ldr	r6, [r4, #0]
 800fd84:	6961      	ldr	r1, [r4, #20]
 800fd86:	1d18      	adds	r0, r3, #4
 800fd88:	6028      	str	r0, [r5, #0]
 800fd8a:	0635      	lsls	r5, r6, #24
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	d501      	bpl.n	800fd94 <_printf_i+0x1c4>
 800fd90:	6019      	str	r1, [r3, #0]
 800fd92:	e002      	b.n	800fd9a <_printf_i+0x1ca>
 800fd94:	0670      	lsls	r0, r6, #25
 800fd96:	d5fb      	bpl.n	800fd90 <_printf_i+0x1c0>
 800fd98:	8019      	strh	r1, [r3, #0]
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	6123      	str	r3, [r4, #16]
 800fd9e:	4615      	mov	r5, r2
 800fda0:	e7bc      	b.n	800fd1c <_printf_i+0x14c>
 800fda2:	682b      	ldr	r3, [r5, #0]
 800fda4:	1d1a      	adds	r2, r3, #4
 800fda6:	602a      	str	r2, [r5, #0]
 800fda8:	681d      	ldr	r5, [r3, #0]
 800fdaa:	6862      	ldr	r2, [r4, #4]
 800fdac:	2100      	movs	r1, #0
 800fdae:	4628      	mov	r0, r5
 800fdb0:	f7f0 fa16 	bl	80001e0 <memchr>
 800fdb4:	b108      	cbz	r0, 800fdba <_printf_i+0x1ea>
 800fdb6:	1b40      	subs	r0, r0, r5
 800fdb8:	6060      	str	r0, [r4, #4]
 800fdba:	6863      	ldr	r3, [r4, #4]
 800fdbc:	6123      	str	r3, [r4, #16]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdc4:	e7aa      	b.n	800fd1c <_printf_i+0x14c>
 800fdc6:	6923      	ldr	r3, [r4, #16]
 800fdc8:	462a      	mov	r2, r5
 800fdca:	4649      	mov	r1, r9
 800fdcc:	4640      	mov	r0, r8
 800fdce:	47d0      	blx	sl
 800fdd0:	3001      	adds	r0, #1
 800fdd2:	d0ad      	beq.n	800fd30 <_printf_i+0x160>
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	079b      	lsls	r3, r3, #30
 800fdd8:	d413      	bmi.n	800fe02 <_printf_i+0x232>
 800fdda:	68e0      	ldr	r0, [r4, #12]
 800fddc:	9b03      	ldr	r3, [sp, #12]
 800fdde:	4298      	cmp	r0, r3
 800fde0:	bfb8      	it	lt
 800fde2:	4618      	movlt	r0, r3
 800fde4:	e7a6      	b.n	800fd34 <_printf_i+0x164>
 800fde6:	2301      	movs	r3, #1
 800fde8:	4632      	mov	r2, r6
 800fdea:	4649      	mov	r1, r9
 800fdec:	4640      	mov	r0, r8
 800fdee:	47d0      	blx	sl
 800fdf0:	3001      	adds	r0, #1
 800fdf2:	d09d      	beq.n	800fd30 <_printf_i+0x160>
 800fdf4:	3501      	adds	r5, #1
 800fdf6:	68e3      	ldr	r3, [r4, #12]
 800fdf8:	9903      	ldr	r1, [sp, #12]
 800fdfa:	1a5b      	subs	r3, r3, r1
 800fdfc:	42ab      	cmp	r3, r5
 800fdfe:	dcf2      	bgt.n	800fde6 <_printf_i+0x216>
 800fe00:	e7eb      	b.n	800fdda <_printf_i+0x20a>
 800fe02:	2500      	movs	r5, #0
 800fe04:	f104 0619 	add.w	r6, r4, #25
 800fe08:	e7f5      	b.n	800fdf6 <_printf_i+0x226>
 800fe0a:	bf00      	nop
 800fe0c:	080124be 	.word	0x080124be
 800fe10:	080124cf 	.word	0x080124cf

0800fe14 <std>:
 800fe14:	2300      	movs	r3, #0
 800fe16:	b510      	push	{r4, lr}
 800fe18:	4604      	mov	r4, r0
 800fe1a:	e9c0 3300 	strd	r3, r3, [r0]
 800fe1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe22:	6083      	str	r3, [r0, #8]
 800fe24:	8181      	strh	r1, [r0, #12]
 800fe26:	6643      	str	r3, [r0, #100]	; 0x64
 800fe28:	81c2      	strh	r2, [r0, #14]
 800fe2a:	6183      	str	r3, [r0, #24]
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	2208      	movs	r2, #8
 800fe30:	305c      	adds	r0, #92	; 0x5c
 800fe32:	f000 f8e2 	bl	800fffa <memset>
 800fe36:	4b05      	ldr	r3, [pc, #20]	; (800fe4c <std+0x38>)
 800fe38:	6263      	str	r3, [r4, #36]	; 0x24
 800fe3a:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <std+0x3c>)
 800fe3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe3e:	4b05      	ldr	r3, [pc, #20]	; (800fe54 <std+0x40>)
 800fe40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe42:	4b05      	ldr	r3, [pc, #20]	; (800fe58 <std+0x44>)
 800fe44:	6224      	str	r4, [r4, #32]
 800fe46:	6323      	str	r3, [r4, #48]	; 0x30
 800fe48:	bd10      	pop	{r4, pc}
 800fe4a:	bf00      	nop
 800fe4c:	0800ff75 	.word	0x0800ff75
 800fe50:	0800ff97 	.word	0x0800ff97
 800fe54:	0800ffcf 	.word	0x0800ffcf
 800fe58:	0800fff3 	.word	0x0800fff3

0800fe5c <stdio_exit_handler>:
 800fe5c:	4a02      	ldr	r2, [pc, #8]	; (800fe68 <stdio_exit_handler+0xc>)
 800fe5e:	4903      	ldr	r1, [pc, #12]	; (800fe6c <stdio_exit_handler+0x10>)
 800fe60:	4803      	ldr	r0, [pc, #12]	; (800fe70 <stdio_exit_handler+0x14>)
 800fe62:	f000 b869 	b.w	800ff38 <_fwalk_sglue>
 800fe66:	bf00      	nop
 800fe68:	20000120 	.word	0x20000120
 800fe6c:	080116e1 	.word	0x080116e1
 800fe70:	2000012c 	.word	0x2000012c

0800fe74 <cleanup_stdio>:
 800fe74:	6841      	ldr	r1, [r0, #4]
 800fe76:	4b0c      	ldr	r3, [pc, #48]	; (800fea8 <cleanup_stdio+0x34>)
 800fe78:	4299      	cmp	r1, r3
 800fe7a:	b510      	push	{r4, lr}
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	d001      	beq.n	800fe84 <cleanup_stdio+0x10>
 800fe80:	f001 fc2e 	bl	80116e0 <_fflush_r>
 800fe84:	68a1      	ldr	r1, [r4, #8]
 800fe86:	4b09      	ldr	r3, [pc, #36]	; (800feac <cleanup_stdio+0x38>)
 800fe88:	4299      	cmp	r1, r3
 800fe8a:	d002      	beq.n	800fe92 <cleanup_stdio+0x1e>
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f001 fc27 	bl	80116e0 <_fflush_r>
 800fe92:	68e1      	ldr	r1, [r4, #12]
 800fe94:	4b06      	ldr	r3, [pc, #24]	; (800feb0 <cleanup_stdio+0x3c>)
 800fe96:	4299      	cmp	r1, r3
 800fe98:	d004      	beq.n	800fea4 <cleanup_stdio+0x30>
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fea0:	f001 bc1e 	b.w	80116e0 <_fflush_r>
 800fea4:	bd10      	pop	{r4, pc}
 800fea6:	bf00      	nop
 800fea8:	20002270 	.word	0x20002270
 800feac:	200022d8 	.word	0x200022d8
 800feb0:	20002340 	.word	0x20002340

0800feb4 <global_stdio_init.part.0>:
 800feb4:	b510      	push	{r4, lr}
 800feb6:	4b0b      	ldr	r3, [pc, #44]	; (800fee4 <global_stdio_init.part.0+0x30>)
 800feb8:	4c0b      	ldr	r4, [pc, #44]	; (800fee8 <global_stdio_init.part.0+0x34>)
 800feba:	4a0c      	ldr	r2, [pc, #48]	; (800feec <global_stdio_init.part.0+0x38>)
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	4620      	mov	r0, r4
 800fec0:	2200      	movs	r2, #0
 800fec2:	2104      	movs	r1, #4
 800fec4:	f7ff ffa6 	bl	800fe14 <std>
 800fec8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fecc:	2201      	movs	r2, #1
 800fece:	2109      	movs	r1, #9
 800fed0:	f7ff ffa0 	bl	800fe14 <std>
 800fed4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fed8:	2202      	movs	r2, #2
 800feda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fede:	2112      	movs	r1, #18
 800fee0:	f7ff bf98 	b.w	800fe14 <std>
 800fee4:	200023a8 	.word	0x200023a8
 800fee8:	20002270 	.word	0x20002270
 800feec:	0800fe5d 	.word	0x0800fe5d

0800fef0 <__sfp_lock_acquire>:
 800fef0:	4801      	ldr	r0, [pc, #4]	; (800fef8 <__sfp_lock_acquire+0x8>)
 800fef2:	f000 b91d 	b.w	8010130 <__retarget_lock_acquire_recursive>
 800fef6:	bf00      	nop
 800fef8:	200023b1 	.word	0x200023b1

0800fefc <__sfp_lock_release>:
 800fefc:	4801      	ldr	r0, [pc, #4]	; (800ff04 <__sfp_lock_release+0x8>)
 800fefe:	f000 b918 	b.w	8010132 <__retarget_lock_release_recursive>
 800ff02:	bf00      	nop
 800ff04:	200023b1 	.word	0x200023b1

0800ff08 <__sinit>:
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	f7ff fff0 	bl	800fef0 <__sfp_lock_acquire>
 800ff10:	6a23      	ldr	r3, [r4, #32]
 800ff12:	b11b      	cbz	r3, 800ff1c <__sinit+0x14>
 800ff14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff18:	f7ff bff0 	b.w	800fefc <__sfp_lock_release>
 800ff1c:	4b04      	ldr	r3, [pc, #16]	; (800ff30 <__sinit+0x28>)
 800ff1e:	6223      	str	r3, [r4, #32]
 800ff20:	4b04      	ldr	r3, [pc, #16]	; (800ff34 <__sinit+0x2c>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d1f5      	bne.n	800ff14 <__sinit+0xc>
 800ff28:	f7ff ffc4 	bl	800feb4 <global_stdio_init.part.0>
 800ff2c:	e7f2      	b.n	800ff14 <__sinit+0xc>
 800ff2e:	bf00      	nop
 800ff30:	0800fe75 	.word	0x0800fe75
 800ff34:	200023a8 	.word	0x200023a8

0800ff38 <_fwalk_sglue>:
 800ff38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff3c:	4607      	mov	r7, r0
 800ff3e:	4688      	mov	r8, r1
 800ff40:	4614      	mov	r4, r2
 800ff42:	2600      	movs	r6, #0
 800ff44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff48:	f1b9 0901 	subs.w	r9, r9, #1
 800ff4c:	d505      	bpl.n	800ff5a <_fwalk_sglue+0x22>
 800ff4e:	6824      	ldr	r4, [r4, #0]
 800ff50:	2c00      	cmp	r4, #0
 800ff52:	d1f7      	bne.n	800ff44 <_fwalk_sglue+0xc>
 800ff54:	4630      	mov	r0, r6
 800ff56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff5a:	89ab      	ldrh	r3, [r5, #12]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d907      	bls.n	800ff70 <_fwalk_sglue+0x38>
 800ff60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff64:	3301      	adds	r3, #1
 800ff66:	d003      	beq.n	800ff70 <_fwalk_sglue+0x38>
 800ff68:	4629      	mov	r1, r5
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	47c0      	blx	r8
 800ff6e:	4306      	orrs	r6, r0
 800ff70:	3568      	adds	r5, #104	; 0x68
 800ff72:	e7e9      	b.n	800ff48 <_fwalk_sglue+0x10>

0800ff74 <__sread>:
 800ff74:	b510      	push	{r4, lr}
 800ff76:	460c      	mov	r4, r1
 800ff78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff7c:	f000 f87a 	bl	8010074 <_read_r>
 800ff80:	2800      	cmp	r0, #0
 800ff82:	bfab      	itete	ge
 800ff84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff86:	89a3      	ldrhlt	r3, [r4, #12]
 800ff88:	181b      	addge	r3, r3, r0
 800ff8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff8e:	bfac      	ite	ge
 800ff90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff92:	81a3      	strhlt	r3, [r4, #12]
 800ff94:	bd10      	pop	{r4, pc}

0800ff96 <__swrite>:
 800ff96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff9a:	461f      	mov	r7, r3
 800ff9c:	898b      	ldrh	r3, [r1, #12]
 800ff9e:	05db      	lsls	r3, r3, #23
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	460c      	mov	r4, r1
 800ffa4:	4616      	mov	r6, r2
 800ffa6:	d505      	bpl.n	800ffb4 <__swrite+0x1e>
 800ffa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffac:	2302      	movs	r3, #2
 800ffae:	2200      	movs	r2, #0
 800ffb0:	f000 f84e 	bl	8010050 <_lseek_r>
 800ffb4:	89a3      	ldrh	r3, [r4, #12]
 800ffb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffbe:	81a3      	strh	r3, [r4, #12]
 800ffc0:	4632      	mov	r2, r6
 800ffc2:	463b      	mov	r3, r7
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffca:	f000 b875 	b.w	80100b8 <_write_r>

0800ffce <__sseek>:
 800ffce:	b510      	push	{r4, lr}
 800ffd0:	460c      	mov	r4, r1
 800ffd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffd6:	f000 f83b 	bl	8010050 <_lseek_r>
 800ffda:	1c43      	adds	r3, r0, #1
 800ffdc:	89a3      	ldrh	r3, [r4, #12]
 800ffde:	bf15      	itete	ne
 800ffe0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ffe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ffea:	81a3      	strheq	r3, [r4, #12]
 800ffec:	bf18      	it	ne
 800ffee:	81a3      	strhne	r3, [r4, #12]
 800fff0:	bd10      	pop	{r4, pc}

0800fff2 <__sclose>:
 800fff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fff6:	f000 b81b 	b.w	8010030 <_close_r>

0800fffa <memset>:
 800fffa:	4402      	add	r2, r0
 800fffc:	4603      	mov	r3, r0
 800fffe:	4293      	cmp	r3, r2
 8010000:	d100      	bne.n	8010004 <memset+0xa>
 8010002:	4770      	bx	lr
 8010004:	f803 1b01 	strb.w	r1, [r3], #1
 8010008:	e7f9      	b.n	800fffe <memset+0x4>

0801000a <strcat>:
 801000a:	b510      	push	{r4, lr}
 801000c:	4602      	mov	r2, r0
 801000e:	7814      	ldrb	r4, [r2, #0]
 8010010:	4613      	mov	r3, r2
 8010012:	3201      	adds	r2, #1
 8010014:	2c00      	cmp	r4, #0
 8010016:	d1fa      	bne.n	801000e <strcat+0x4>
 8010018:	3b01      	subs	r3, #1
 801001a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801001e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010022:	2a00      	cmp	r2, #0
 8010024:	d1f9      	bne.n	801001a <strcat+0x10>
 8010026:	bd10      	pop	{r4, pc}

08010028 <_localeconv_r>:
 8010028:	4800      	ldr	r0, [pc, #0]	; (801002c <_localeconv_r+0x4>)
 801002a:	4770      	bx	lr
 801002c:	2000026c 	.word	0x2000026c

08010030 <_close_r>:
 8010030:	b538      	push	{r3, r4, r5, lr}
 8010032:	4d06      	ldr	r5, [pc, #24]	; (801004c <_close_r+0x1c>)
 8010034:	2300      	movs	r3, #0
 8010036:	4604      	mov	r4, r0
 8010038:	4608      	mov	r0, r1
 801003a:	602b      	str	r3, [r5, #0]
 801003c:	f7f2 f8e9 	bl	8002212 <_close>
 8010040:	1c43      	adds	r3, r0, #1
 8010042:	d102      	bne.n	801004a <_close_r+0x1a>
 8010044:	682b      	ldr	r3, [r5, #0]
 8010046:	b103      	cbz	r3, 801004a <_close_r+0x1a>
 8010048:	6023      	str	r3, [r4, #0]
 801004a:	bd38      	pop	{r3, r4, r5, pc}
 801004c:	200023ac 	.word	0x200023ac

08010050 <_lseek_r>:
 8010050:	b538      	push	{r3, r4, r5, lr}
 8010052:	4d07      	ldr	r5, [pc, #28]	; (8010070 <_lseek_r+0x20>)
 8010054:	4604      	mov	r4, r0
 8010056:	4608      	mov	r0, r1
 8010058:	4611      	mov	r1, r2
 801005a:	2200      	movs	r2, #0
 801005c:	602a      	str	r2, [r5, #0]
 801005e:	461a      	mov	r2, r3
 8010060:	f7f2 f8fe 	bl	8002260 <_lseek>
 8010064:	1c43      	adds	r3, r0, #1
 8010066:	d102      	bne.n	801006e <_lseek_r+0x1e>
 8010068:	682b      	ldr	r3, [r5, #0]
 801006a:	b103      	cbz	r3, 801006e <_lseek_r+0x1e>
 801006c:	6023      	str	r3, [r4, #0]
 801006e:	bd38      	pop	{r3, r4, r5, pc}
 8010070:	200023ac 	.word	0x200023ac

08010074 <_read_r>:
 8010074:	b538      	push	{r3, r4, r5, lr}
 8010076:	4d07      	ldr	r5, [pc, #28]	; (8010094 <_read_r+0x20>)
 8010078:	4604      	mov	r4, r0
 801007a:	4608      	mov	r0, r1
 801007c:	4611      	mov	r1, r2
 801007e:	2200      	movs	r2, #0
 8010080:	602a      	str	r2, [r5, #0]
 8010082:	461a      	mov	r2, r3
 8010084:	f7f2 f88c 	bl	80021a0 <_read>
 8010088:	1c43      	adds	r3, r0, #1
 801008a:	d102      	bne.n	8010092 <_read_r+0x1e>
 801008c:	682b      	ldr	r3, [r5, #0]
 801008e:	b103      	cbz	r3, 8010092 <_read_r+0x1e>
 8010090:	6023      	str	r3, [r4, #0]
 8010092:	bd38      	pop	{r3, r4, r5, pc}
 8010094:	200023ac 	.word	0x200023ac

08010098 <_sbrk_r>:
 8010098:	b538      	push	{r3, r4, r5, lr}
 801009a:	4d06      	ldr	r5, [pc, #24]	; (80100b4 <_sbrk_r+0x1c>)
 801009c:	2300      	movs	r3, #0
 801009e:	4604      	mov	r4, r0
 80100a0:	4608      	mov	r0, r1
 80100a2:	602b      	str	r3, [r5, #0]
 80100a4:	f7f2 f8ea 	bl	800227c <_sbrk>
 80100a8:	1c43      	adds	r3, r0, #1
 80100aa:	d102      	bne.n	80100b2 <_sbrk_r+0x1a>
 80100ac:	682b      	ldr	r3, [r5, #0]
 80100ae:	b103      	cbz	r3, 80100b2 <_sbrk_r+0x1a>
 80100b0:	6023      	str	r3, [r4, #0]
 80100b2:	bd38      	pop	{r3, r4, r5, pc}
 80100b4:	200023ac 	.word	0x200023ac

080100b8 <_write_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4d07      	ldr	r5, [pc, #28]	; (80100d8 <_write_r+0x20>)
 80100bc:	4604      	mov	r4, r0
 80100be:	4608      	mov	r0, r1
 80100c0:	4611      	mov	r1, r2
 80100c2:	2200      	movs	r2, #0
 80100c4:	602a      	str	r2, [r5, #0]
 80100c6:	461a      	mov	r2, r3
 80100c8:	f7f2 f887 	bl	80021da <_write>
 80100cc:	1c43      	adds	r3, r0, #1
 80100ce:	d102      	bne.n	80100d6 <_write_r+0x1e>
 80100d0:	682b      	ldr	r3, [r5, #0]
 80100d2:	b103      	cbz	r3, 80100d6 <_write_r+0x1e>
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	bd38      	pop	{r3, r4, r5, pc}
 80100d8:	200023ac 	.word	0x200023ac

080100dc <__errno>:
 80100dc:	4b01      	ldr	r3, [pc, #4]	; (80100e4 <__errno+0x8>)
 80100de:	6818      	ldr	r0, [r3, #0]
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	20000178 	.word	0x20000178

080100e8 <__libc_init_array>:
 80100e8:	b570      	push	{r4, r5, r6, lr}
 80100ea:	4d0d      	ldr	r5, [pc, #52]	; (8010120 <__libc_init_array+0x38>)
 80100ec:	4c0d      	ldr	r4, [pc, #52]	; (8010124 <__libc_init_array+0x3c>)
 80100ee:	1b64      	subs	r4, r4, r5
 80100f0:	10a4      	asrs	r4, r4, #2
 80100f2:	2600      	movs	r6, #0
 80100f4:	42a6      	cmp	r6, r4
 80100f6:	d109      	bne.n	801010c <__libc_init_array+0x24>
 80100f8:	4d0b      	ldr	r5, [pc, #44]	; (8010128 <__libc_init_array+0x40>)
 80100fa:	4c0c      	ldr	r4, [pc, #48]	; (801012c <__libc_init_array+0x44>)
 80100fc:	f002 f89a 	bl	8012234 <_init>
 8010100:	1b64      	subs	r4, r4, r5
 8010102:	10a4      	asrs	r4, r4, #2
 8010104:	2600      	movs	r6, #0
 8010106:	42a6      	cmp	r6, r4
 8010108:	d105      	bne.n	8010116 <__libc_init_array+0x2e>
 801010a:	bd70      	pop	{r4, r5, r6, pc}
 801010c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010110:	4798      	blx	r3
 8010112:	3601      	adds	r6, #1
 8010114:	e7ee      	b.n	80100f4 <__libc_init_array+0xc>
 8010116:	f855 3b04 	ldr.w	r3, [r5], #4
 801011a:	4798      	blx	r3
 801011c:	3601      	adds	r6, #1
 801011e:	e7f2      	b.n	8010106 <__libc_init_array+0x1e>
 8010120:	08012898 	.word	0x08012898
 8010124:	08012898 	.word	0x08012898
 8010128:	08012898 	.word	0x08012898
 801012c:	0801289c 	.word	0x0801289c

08010130 <__retarget_lock_acquire_recursive>:
 8010130:	4770      	bx	lr

08010132 <__retarget_lock_release_recursive>:
 8010132:	4770      	bx	lr

08010134 <memcpy>:
 8010134:	440a      	add	r2, r1
 8010136:	4291      	cmp	r1, r2
 8010138:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801013c:	d100      	bne.n	8010140 <memcpy+0xc>
 801013e:	4770      	bx	lr
 8010140:	b510      	push	{r4, lr}
 8010142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010146:	f803 4f01 	strb.w	r4, [r3, #1]!
 801014a:	4291      	cmp	r1, r2
 801014c:	d1f9      	bne.n	8010142 <memcpy+0xe>
 801014e:	bd10      	pop	{r4, pc}

08010150 <quorem>:
 8010150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010154:	6903      	ldr	r3, [r0, #16]
 8010156:	690c      	ldr	r4, [r1, #16]
 8010158:	42a3      	cmp	r3, r4
 801015a:	4607      	mov	r7, r0
 801015c:	db7e      	blt.n	801025c <quorem+0x10c>
 801015e:	3c01      	subs	r4, #1
 8010160:	f101 0814 	add.w	r8, r1, #20
 8010164:	f100 0514 	add.w	r5, r0, #20
 8010168:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801016c:	9301      	str	r3, [sp, #4]
 801016e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010176:	3301      	adds	r3, #1
 8010178:	429a      	cmp	r2, r3
 801017a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801017e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010182:	fbb2 f6f3 	udiv	r6, r2, r3
 8010186:	d331      	bcc.n	80101ec <quorem+0x9c>
 8010188:	f04f 0e00 	mov.w	lr, #0
 801018c:	4640      	mov	r0, r8
 801018e:	46ac      	mov	ip, r5
 8010190:	46f2      	mov	sl, lr
 8010192:	f850 2b04 	ldr.w	r2, [r0], #4
 8010196:	b293      	uxth	r3, r2
 8010198:	fb06 e303 	mla	r3, r6, r3, lr
 801019c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80101a0:	0c1a      	lsrs	r2, r3, #16
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	ebaa 0303 	sub.w	r3, sl, r3
 80101a8:	f8dc a000 	ldr.w	sl, [ip]
 80101ac:	fa13 f38a 	uxtah	r3, r3, sl
 80101b0:	fb06 220e 	mla	r2, r6, lr, r2
 80101b4:	9300      	str	r3, [sp, #0]
 80101b6:	9b00      	ldr	r3, [sp, #0]
 80101b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80101bc:	b292      	uxth	r2, r2
 80101be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80101c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80101c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80101ca:	4581      	cmp	r9, r0
 80101cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101d0:	f84c 3b04 	str.w	r3, [ip], #4
 80101d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80101d8:	d2db      	bcs.n	8010192 <quorem+0x42>
 80101da:	f855 300b 	ldr.w	r3, [r5, fp]
 80101de:	b92b      	cbnz	r3, 80101ec <quorem+0x9c>
 80101e0:	9b01      	ldr	r3, [sp, #4]
 80101e2:	3b04      	subs	r3, #4
 80101e4:	429d      	cmp	r5, r3
 80101e6:	461a      	mov	r2, r3
 80101e8:	d32c      	bcc.n	8010244 <quorem+0xf4>
 80101ea:	613c      	str	r4, [r7, #16]
 80101ec:	4638      	mov	r0, r7
 80101ee:	f001 f8f1 	bl	80113d4 <__mcmp>
 80101f2:	2800      	cmp	r0, #0
 80101f4:	db22      	blt.n	801023c <quorem+0xec>
 80101f6:	3601      	adds	r6, #1
 80101f8:	4629      	mov	r1, r5
 80101fa:	2000      	movs	r0, #0
 80101fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8010200:	f8d1 c000 	ldr.w	ip, [r1]
 8010204:	b293      	uxth	r3, r2
 8010206:	1ac3      	subs	r3, r0, r3
 8010208:	0c12      	lsrs	r2, r2, #16
 801020a:	fa13 f38c 	uxtah	r3, r3, ip
 801020e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010212:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010216:	b29b      	uxth	r3, r3
 8010218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801021c:	45c1      	cmp	r9, r8
 801021e:	f841 3b04 	str.w	r3, [r1], #4
 8010222:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010226:	d2e9      	bcs.n	80101fc <quorem+0xac>
 8010228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801022c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010230:	b922      	cbnz	r2, 801023c <quorem+0xec>
 8010232:	3b04      	subs	r3, #4
 8010234:	429d      	cmp	r5, r3
 8010236:	461a      	mov	r2, r3
 8010238:	d30a      	bcc.n	8010250 <quorem+0x100>
 801023a:	613c      	str	r4, [r7, #16]
 801023c:	4630      	mov	r0, r6
 801023e:	b003      	add	sp, #12
 8010240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010244:	6812      	ldr	r2, [r2, #0]
 8010246:	3b04      	subs	r3, #4
 8010248:	2a00      	cmp	r2, #0
 801024a:	d1ce      	bne.n	80101ea <quorem+0x9a>
 801024c:	3c01      	subs	r4, #1
 801024e:	e7c9      	b.n	80101e4 <quorem+0x94>
 8010250:	6812      	ldr	r2, [r2, #0]
 8010252:	3b04      	subs	r3, #4
 8010254:	2a00      	cmp	r2, #0
 8010256:	d1f0      	bne.n	801023a <quorem+0xea>
 8010258:	3c01      	subs	r4, #1
 801025a:	e7eb      	b.n	8010234 <quorem+0xe4>
 801025c:	2000      	movs	r0, #0
 801025e:	e7ee      	b.n	801023e <quorem+0xee>

08010260 <_dtoa_r>:
 8010260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010264:	ed2d 8b04 	vpush	{d8-d9}
 8010268:	69c5      	ldr	r5, [r0, #28]
 801026a:	b093      	sub	sp, #76	; 0x4c
 801026c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010270:	ec57 6b10 	vmov	r6, r7, d0
 8010274:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010278:	9107      	str	r1, [sp, #28]
 801027a:	4604      	mov	r4, r0
 801027c:	920a      	str	r2, [sp, #40]	; 0x28
 801027e:	930d      	str	r3, [sp, #52]	; 0x34
 8010280:	b975      	cbnz	r5, 80102a0 <_dtoa_r+0x40>
 8010282:	2010      	movs	r0, #16
 8010284:	f7ff f8a4 	bl	800f3d0 <malloc>
 8010288:	4602      	mov	r2, r0
 801028a:	61e0      	str	r0, [r4, #28]
 801028c:	b920      	cbnz	r0, 8010298 <_dtoa_r+0x38>
 801028e:	4bae      	ldr	r3, [pc, #696]	; (8010548 <_dtoa_r+0x2e8>)
 8010290:	21ef      	movs	r1, #239	; 0xef
 8010292:	48ae      	ldr	r0, [pc, #696]	; (801054c <_dtoa_r+0x2ec>)
 8010294:	f001 fa4c 	bl	8011730 <__assert_func>
 8010298:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801029c:	6005      	str	r5, [r0, #0]
 801029e:	60c5      	str	r5, [r0, #12]
 80102a0:	69e3      	ldr	r3, [r4, #28]
 80102a2:	6819      	ldr	r1, [r3, #0]
 80102a4:	b151      	cbz	r1, 80102bc <_dtoa_r+0x5c>
 80102a6:	685a      	ldr	r2, [r3, #4]
 80102a8:	604a      	str	r2, [r1, #4]
 80102aa:	2301      	movs	r3, #1
 80102ac:	4093      	lsls	r3, r2
 80102ae:	608b      	str	r3, [r1, #8]
 80102b0:	4620      	mov	r0, r4
 80102b2:	f000 fe53 	bl	8010f5c <_Bfree>
 80102b6:	69e3      	ldr	r3, [r4, #28]
 80102b8:	2200      	movs	r2, #0
 80102ba:	601a      	str	r2, [r3, #0]
 80102bc:	1e3b      	subs	r3, r7, #0
 80102be:	bfbb      	ittet	lt
 80102c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80102c4:	9303      	strlt	r3, [sp, #12]
 80102c6:	2300      	movge	r3, #0
 80102c8:	2201      	movlt	r2, #1
 80102ca:	bfac      	ite	ge
 80102cc:	f8c8 3000 	strge.w	r3, [r8]
 80102d0:	f8c8 2000 	strlt.w	r2, [r8]
 80102d4:	4b9e      	ldr	r3, [pc, #632]	; (8010550 <_dtoa_r+0x2f0>)
 80102d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80102da:	ea33 0308 	bics.w	r3, r3, r8
 80102de:	d11b      	bne.n	8010318 <_dtoa_r+0xb8>
 80102e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80102e6:	6013      	str	r3, [r2, #0]
 80102e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80102ec:	4333      	orrs	r3, r6
 80102ee:	f000 8593 	beq.w	8010e18 <_dtoa_r+0xbb8>
 80102f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102f4:	b963      	cbnz	r3, 8010310 <_dtoa_r+0xb0>
 80102f6:	4b97      	ldr	r3, [pc, #604]	; (8010554 <_dtoa_r+0x2f4>)
 80102f8:	e027      	b.n	801034a <_dtoa_r+0xea>
 80102fa:	4b97      	ldr	r3, [pc, #604]	; (8010558 <_dtoa_r+0x2f8>)
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	3308      	adds	r3, #8
 8010300:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010302:	6013      	str	r3, [r2, #0]
 8010304:	9800      	ldr	r0, [sp, #0]
 8010306:	b013      	add	sp, #76	; 0x4c
 8010308:	ecbd 8b04 	vpop	{d8-d9}
 801030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010310:	4b90      	ldr	r3, [pc, #576]	; (8010554 <_dtoa_r+0x2f4>)
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	3303      	adds	r3, #3
 8010316:	e7f3      	b.n	8010300 <_dtoa_r+0xa0>
 8010318:	ed9d 7b02 	vldr	d7, [sp, #8]
 801031c:	2200      	movs	r2, #0
 801031e:	ec51 0b17 	vmov	r0, r1, d7
 8010322:	eeb0 8a47 	vmov.f32	s16, s14
 8010326:	eef0 8a67 	vmov.f32	s17, s15
 801032a:	2300      	movs	r3, #0
 801032c:	f7f0 fbd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8010330:	4681      	mov	r9, r0
 8010332:	b160      	cbz	r0, 801034e <_dtoa_r+0xee>
 8010334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010336:	2301      	movs	r3, #1
 8010338:	6013      	str	r3, [r2, #0]
 801033a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801033c:	2b00      	cmp	r3, #0
 801033e:	f000 8568 	beq.w	8010e12 <_dtoa_r+0xbb2>
 8010342:	4b86      	ldr	r3, [pc, #536]	; (801055c <_dtoa_r+0x2fc>)
 8010344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010346:	6013      	str	r3, [r2, #0]
 8010348:	3b01      	subs	r3, #1
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	e7da      	b.n	8010304 <_dtoa_r+0xa4>
 801034e:	aa10      	add	r2, sp, #64	; 0x40
 8010350:	a911      	add	r1, sp, #68	; 0x44
 8010352:	4620      	mov	r0, r4
 8010354:	eeb0 0a48 	vmov.f32	s0, s16
 8010358:	eef0 0a68 	vmov.f32	s1, s17
 801035c:	f001 f8e0 	bl	8011520 <__d2b>
 8010360:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010364:	4682      	mov	sl, r0
 8010366:	2d00      	cmp	r5, #0
 8010368:	d07f      	beq.n	801046a <_dtoa_r+0x20a>
 801036a:	ee18 3a90 	vmov	r3, s17
 801036e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010372:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010376:	ec51 0b18 	vmov	r0, r1, d8
 801037a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801037e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010382:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010386:	4619      	mov	r1, r3
 8010388:	2200      	movs	r2, #0
 801038a:	4b75      	ldr	r3, [pc, #468]	; (8010560 <_dtoa_r+0x300>)
 801038c:	f7ef ff84 	bl	8000298 <__aeabi_dsub>
 8010390:	a367      	add	r3, pc, #412	; (adr r3, 8010530 <_dtoa_r+0x2d0>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	f7f0 f937 	bl	8000608 <__aeabi_dmul>
 801039a:	a367      	add	r3, pc, #412	; (adr r3, 8010538 <_dtoa_r+0x2d8>)
 801039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a0:	f7ef ff7c 	bl	800029c <__adddf3>
 80103a4:	4606      	mov	r6, r0
 80103a6:	4628      	mov	r0, r5
 80103a8:	460f      	mov	r7, r1
 80103aa:	f7f0 f8c3 	bl	8000534 <__aeabi_i2d>
 80103ae:	a364      	add	r3, pc, #400	; (adr r3, 8010540 <_dtoa_r+0x2e0>)
 80103b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b4:	f7f0 f928 	bl	8000608 <__aeabi_dmul>
 80103b8:	4602      	mov	r2, r0
 80103ba:	460b      	mov	r3, r1
 80103bc:	4630      	mov	r0, r6
 80103be:	4639      	mov	r1, r7
 80103c0:	f7ef ff6c 	bl	800029c <__adddf3>
 80103c4:	4606      	mov	r6, r0
 80103c6:	460f      	mov	r7, r1
 80103c8:	f7f0 fbce 	bl	8000b68 <__aeabi_d2iz>
 80103cc:	2200      	movs	r2, #0
 80103ce:	4683      	mov	fp, r0
 80103d0:	2300      	movs	r3, #0
 80103d2:	4630      	mov	r0, r6
 80103d4:	4639      	mov	r1, r7
 80103d6:	f7f0 fb89 	bl	8000aec <__aeabi_dcmplt>
 80103da:	b148      	cbz	r0, 80103f0 <_dtoa_r+0x190>
 80103dc:	4658      	mov	r0, fp
 80103de:	f7f0 f8a9 	bl	8000534 <__aeabi_i2d>
 80103e2:	4632      	mov	r2, r6
 80103e4:	463b      	mov	r3, r7
 80103e6:	f7f0 fb77 	bl	8000ad8 <__aeabi_dcmpeq>
 80103ea:	b908      	cbnz	r0, 80103f0 <_dtoa_r+0x190>
 80103ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80103f0:	f1bb 0f16 	cmp.w	fp, #22
 80103f4:	d857      	bhi.n	80104a6 <_dtoa_r+0x246>
 80103f6:	4b5b      	ldr	r3, [pc, #364]	; (8010564 <_dtoa_r+0x304>)
 80103f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80103fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010400:	ec51 0b18 	vmov	r0, r1, d8
 8010404:	f7f0 fb72 	bl	8000aec <__aeabi_dcmplt>
 8010408:	2800      	cmp	r0, #0
 801040a:	d04e      	beq.n	80104aa <_dtoa_r+0x24a>
 801040c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010410:	2300      	movs	r3, #0
 8010412:	930c      	str	r3, [sp, #48]	; 0x30
 8010414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010416:	1b5b      	subs	r3, r3, r5
 8010418:	1e5a      	subs	r2, r3, #1
 801041a:	bf45      	ittet	mi
 801041c:	f1c3 0301 	rsbmi	r3, r3, #1
 8010420:	9305      	strmi	r3, [sp, #20]
 8010422:	2300      	movpl	r3, #0
 8010424:	2300      	movmi	r3, #0
 8010426:	9206      	str	r2, [sp, #24]
 8010428:	bf54      	ite	pl
 801042a:	9305      	strpl	r3, [sp, #20]
 801042c:	9306      	strmi	r3, [sp, #24]
 801042e:	f1bb 0f00 	cmp.w	fp, #0
 8010432:	db3c      	blt.n	80104ae <_dtoa_r+0x24e>
 8010434:	9b06      	ldr	r3, [sp, #24]
 8010436:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801043a:	445b      	add	r3, fp
 801043c:	9306      	str	r3, [sp, #24]
 801043e:	2300      	movs	r3, #0
 8010440:	9308      	str	r3, [sp, #32]
 8010442:	9b07      	ldr	r3, [sp, #28]
 8010444:	2b09      	cmp	r3, #9
 8010446:	d868      	bhi.n	801051a <_dtoa_r+0x2ba>
 8010448:	2b05      	cmp	r3, #5
 801044a:	bfc4      	itt	gt
 801044c:	3b04      	subgt	r3, #4
 801044e:	9307      	strgt	r3, [sp, #28]
 8010450:	9b07      	ldr	r3, [sp, #28]
 8010452:	f1a3 0302 	sub.w	r3, r3, #2
 8010456:	bfcc      	ite	gt
 8010458:	2500      	movgt	r5, #0
 801045a:	2501      	movle	r5, #1
 801045c:	2b03      	cmp	r3, #3
 801045e:	f200 8085 	bhi.w	801056c <_dtoa_r+0x30c>
 8010462:	e8df f003 	tbb	[pc, r3]
 8010466:	3b2e      	.short	0x3b2e
 8010468:	5839      	.short	0x5839
 801046a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801046e:	441d      	add	r5, r3
 8010470:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010474:	2b20      	cmp	r3, #32
 8010476:	bfc1      	itttt	gt
 8010478:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801047c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010480:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010484:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010488:	bfd6      	itet	le
 801048a:	f1c3 0320 	rsble	r3, r3, #32
 801048e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010492:	fa06 f003 	lslle.w	r0, r6, r3
 8010496:	f7f0 f83d 	bl	8000514 <__aeabi_ui2d>
 801049a:	2201      	movs	r2, #1
 801049c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80104a0:	3d01      	subs	r5, #1
 80104a2:	920e      	str	r2, [sp, #56]	; 0x38
 80104a4:	e76f      	b.n	8010386 <_dtoa_r+0x126>
 80104a6:	2301      	movs	r3, #1
 80104a8:	e7b3      	b.n	8010412 <_dtoa_r+0x1b2>
 80104aa:	900c      	str	r0, [sp, #48]	; 0x30
 80104ac:	e7b2      	b.n	8010414 <_dtoa_r+0x1b4>
 80104ae:	9b05      	ldr	r3, [sp, #20]
 80104b0:	eba3 030b 	sub.w	r3, r3, fp
 80104b4:	9305      	str	r3, [sp, #20]
 80104b6:	f1cb 0300 	rsb	r3, fp, #0
 80104ba:	9308      	str	r3, [sp, #32]
 80104bc:	2300      	movs	r3, #0
 80104be:	930b      	str	r3, [sp, #44]	; 0x2c
 80104c0:	e7bf      	b.n	8010442 <_dtoa_r+0x1e2>
 80104c2:	2300      	movs	r3, #0
 80104c4:	9309      	str	r3, [sp, #36]	; 0x24
 80104c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	dc52      	bgt.n	8010572 <_dtoa_r+0x312>
 80104cc:	2301      	movs	r3, #1
 80104ce:	9301      	str	r3, [sp, #4]
 80104d0:	9304      	str	r3, [sp, #16]
 80104d2:	461a      	mov	r2, r3
 80104d4:	920a      	str	r2, [sp, #40]	; 0x28
 80104d6:	e00b      	b.n	80104f0 <_dtoa_r+0x290>
 80104d8:	2301      	movs	r3, #1
 80104da:	e7f3      	b.n	80104c4 <_dtoa_r+0x264>
 80104dc:	2300      	movs	r3, #0
 80104de:	9309      	str	r3, [sp, #36]	; 0x24
 80104e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104e2:	445b      	add	r3, fp
 80104e4:	9301      	str	r3, [sp, #4]
 80104e6:	3301      	adds	r3, #1
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	9304      	str	r3, [sp, #16]
 80104ec:	bfb8      	it	lt
 80104ee:	2301      	movlt	r3, #1
 80104f0:	69e0      	ldr	r0, [r4, #28]
 80104f2:	2100      	movs	r1, #0
 80104f4:	2204      	movs	r2, #4
 80104f6:	f102 0614 	add.w	r6, r2, #20
 80104fa:	429e      	cmp	r6, r3
 80104fc:	d93d      	bls.n	801057a <_dtoa_r+0x31a>
 80104fe:	6041      	str	r1, [r0, #4]
 8010500:	4620      	mov	r0, r4
 8010502:	f000 fceb 	bl	8010edc <_Balloc>
 8010506:	9000      	str	r0, [sp, #0]
 8010508:	2800      	cmp	r0, #0
 801050a:	d139      	bne.n	8010580 <_dtoa_r+0x320>
 801050c:	4b16      	ldr	r3, [pc, #88]	; (8010568 <_dtoa_r+0x308>)
 801050e:	4602      	mov	r2, r0
 8010510:	f240 11af 	movw	r1, #431	; 0x1af
 8010514:	e6bd      	b.n	8010292 <_dtoa_r+0x32>
 8010516:	2301      	movs	r3, #1
 8010518:	e7e1      	b.n	80104de <_dtoa_r+0x27e>
 801051a:	2501      	movs	r5, #1
 801051c:	2300      	movs	r3, #0
 801051e:	9307      	str	r3, [sp, #28]
 8010520:	9509      	str	r5, [sp, #36]	; 0x24
 8010522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010526:	9301      	str	r3, [sp, #4]
 8010528:	9304      	str	r3, [sp, #16]
 801052a:	2200      	movs	r2, #0
 801052c:	2312      	movs	r3, #18
 801052e:	e7d1      	b.n	80104d4 <_dtoa_r+0x274>
 8010530:	636f4361 	.word	0x636f4361
 8010534:	3fd287a7 	.word	0x3fd287a7
 8010538:	8b60c8b3 	.word	0x8b60c8b3
 801053c:	3fc68a28 	.word	0x3fc68a28
 8010540:	509f79fb 	.word	0x509f79fb
 8010544:	3fd34413 	.word	0x3fd34413
 8010548:	080124ed 	.word	0x080124ed
 801054c:	08012504 	.word	0x08012504
 8010550:	7ff00000 	.word	0x7ff00000
 8010554:	080124e9 	.word	0x080124e9
 8010558:	080124e0 	.word	0x080124e0
 801055c:	080124bd 	.word	0x080124bd
 8010560:	3ff80000 	.word	0x3ff80000
 8010564:	080125f0 	.word	0x080125f0
 8010568:	0801255c 	.word	0x0801255c
 801056c:	2301      	movs	r3, #1
 801056e:	9309      	str	r3, [sp, #36]	; 0x24
 8010570:	e7d7      	b.n	8010522 <_dtoa_r+0x2c2>
 8010572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010574:	9301      	str	r3, [sp, #4]
 8010576:	9304      	str	r3, [sp, #16]
 8010578:	e7ba      	b.n	80104f0 <_dtoa_r+0x290>
 801057a:	3101      	adds	r1, #1
 801057c:	0052      	lsls	r2, r2, #1
 801057e:	e7ba      	b.n	80104f6 <_dtoa_r+0x296>
 8010580:	69e3      	ldr	r3, [r4, #28]
 8010582:	9a00      	ldr	r2, [sp, #0]
 8010584:	601a      	str	r2, [r3, #0]
 8010586:	9b04      	ldr	r3, [sp, #16]
 8010588:	2b0e      	cmp	r3, #14
 801058a:	f200 80a8 	bhi.w	80106de <_dtoa_r+0x47e>
 801058e:	2d00      	cmp	r5, #0
 8010590:	f000 80a5 	beq.w	80106de <_dtoa_r+0x47e>
 8010594:	f1bb 0f00 	cmp.w	fp, #0
 8010598:	dd38      	ble.n	801060c <_dtoa_r+0x3ac>
 801059a:	4bc0      	ldr	r3, [pc, #768]	; (801089c <_dtoa_r+0x63c>)
 801059c:	f00b 020f 	and.w	r2, fp, #15
 80105a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80105a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80105ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80105b0:	d019      	beq.n	80105e6 <_dtoa_r+0x386>
 80105b2:	4bbb      	ldr	r3, [pc, #748]	; (80108a0 <_dtoa_r+0x640>)
 80105b4:	ec51 0b18 	vmov	r0, r1, d8
 80105b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80105bc:	f7f0 f94e 	bl	800085c <__aeabi_ddiv>
 80105c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105c4:	f008 080f 	and.w	r8, r8, #15
 80105c8:	2503      	movs	r5, #3
 80105ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80108a0 <_dtoa_r+0x640>
 80105ce:	f1b8 0f00 	cmp.w	r8, #0
 80105d2:	d10a      	bne.n	80105ea <_dtoa_r+0x38a>
 80105d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105d8:	4632      	mov	r2, r6
 80105da:	463b      	mov	r3, r7
 80105dc:	f7f0 f93e 	bl	800085c <__aeabi_ddiv>
 80105e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105e4:	e02b      	b.n	801063e <_dtoa_r+0x3de>
 80105e6:	2502      	movs	r5, #2
 80105e8:	e7ef      	b.n	80105ca <_dtoa_r+0x36a>
 80105ea:	f018 0f01 	tst.w	r8, #1
 80105ee:	d008      	beq.n	8010602 <_dtoa_r+0x3a2>
 80105f0:	4630      	mov	r0, r6
 80105f2:	4639      	mov	r1, r7
 80105f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80105f8:	f7f0 f806 	bl	8000608 <__aeabi_dmul>
 80105fc:	3501      	adds	r5, #1
 80105fe:	4606      	mov	r6, r0
 8010600:	460f      	mov	r7, r1
 8010602:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010606:	f109 0908 	add.w	r9, r9, #8
 801060a:	e7e0      	b.n	80105ce <_dtoa_r+0x36e>
 801060c:	f000 809f 	beq.w	801074e <_dtoa_r+0x4ee>
 8010610:	f1cb 0600 	rsb	r6, fp, #0
 8010614:	4ba1      	ldr	r3, [pc, #644]	; (801089c <_dtoa_r+0x63c>)
 8010616:	4fa2      	ldr	r7, [pc, #648]	; (80108a0 <_dtoa_r+0x640>)
 8010618:	f006 020f 	and.w	r2, r6, #15
 801061c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010624:	ec51 0b18 	vmov	r0, r1, d8
 8010628:	f7ef ffee 	bl	8000608 <__aeabi_dmul>
 801062c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010630:	1136      	asrs	r6, r6, #4
 8010632:	2300      	movs	r3, #0
 8010634:	2502      	movs	r5, #2
 8010636:	2e00      	cmp	r6, #0
 8010638:	d17e      	bne.n	8010738 <_dtoa_r+0x4d8>
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1d0      	bne.n	80105e0 <_dtoa_r+0x380>
 801063e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010640:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010644:	2b00      	cmp	r3, #0
 8010646:	f000 8084 	beq.w	8010752 <_dtoa_r+0x4f2>
 801064a:	4b96      	ldr	r3, [pc, #600]	; (80108a4 <_dtoa_r+0x644>)
 801064c:	2200      	movs	r2, #0
 801064e:	4640      	mov	r0, r8
 8010650:	4649      	mov	r1, r9
 8010652:	f7f0 fa4b 	bl	8000aec <__aeabi_dcmplt>
 8010656:	2800      	cmp	r0, #0
 8010658:	d07b      	beq.n	8010752 <_dtoa_r+0x4f2>
 801065a:	9b04      	ldr	r3, [sp, #16]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d078      	beq.n	8010752 <_dtoa_r+0x4f2>
 8010660:	9b01      	ldr	r3, [sp, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	dd39      	ble.n	80106da <_dtoa_r+0x47a>
 8010666:	4b90      	ldr	r3, [pc, #576]	; (80108a8 <_dtoa_r+0x648>)
 8010668:	2200      	movs	r2, #0
 801066a:	4640      	mov	r0, r8
 801066c:	4649      	mov	r1, r9
 801066e:	f7ef ffcb 	bl	8000608 <__aeabi_dmul>
 8010672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010676:	9e01      	ldr	r6, [sp, #4]
 8010678:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801067c:	3501      	adds	r5, #1
 801067e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010682:	4628      	mov	r0, r5
 8010684:	f7ef ff56 	bl	8000534 <__aeabi_i2d>
 8010688:	4642      	mov	r2, r8
 801068a:	464b      	mov	r3, r9
 801068c:	f7ef ffbc 	bl	8000608 <__aeabi_dmul>
 8010690:	4b86      	ldr	r3, [pc, #536]	; (80108ac <_dtoa_r+0x64c>)
 8010692:	2200      	movs	r2, #0
 8010694:	f7ef fe02 	bl	800029c <__adddf3>
 8010698:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801069c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106a0:	9303      	str	r3, [sp, #12]
 80106a2:	2e00      	cmp	r6, #0
 80106a4:	d158      	bne.n	8010758 <_dtoa_r+0x4f8>
 80106a6:	4b82      	ldr	r3, [pc, #520]	; (80108b0 <_dtoa_r+0x650>)
 80106a8:	2200      	movs	r2, #0
 80106aa:	4640      	mov	r0, r8
 80106ac:	4649      	mov	r1, r9
 80106ae:	f7ef fdf3 	bl	8000298 <__aeabi_dsub>
 80106b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106b6:	4680      	mov	r8, r0
 80106b8:	4689      	mov	r9, r1
 80106ba:	f7f0 fa35 	bl	8000b28 <__aeabi_dcmpgt>
 80106be:	2800      	cmp	r0, #0
 80106c0:	f040 8296 	bne.w	8010bf0 <_dtoa_r+0x990>
 80106c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80106c8:	4640      	mov	r0, r8
 80106ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106ce:	4649      	mov	r1, r9
 80106d0:	f7f0 fa0c 	bl	8000aec <__aeabi_dcmplt>
 80106d4:	2800      	cmp	r0, #0
 80106d6:	f040 8289 	bne.w	8010bec <_dtoa_r+0x98c>
 80106da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80106de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f2c0 814e 	blt.w	8010982 <_dtoa_r+0x722>
 80106e6:	f1bb 0f0e 	cmp.w	fp, #14
 80106ea:	f300 814a 	bgt.w	8010982 <_dtoa_r+0x722>
 80106ee:	4b6b      	ldr	r3, [pc, #428]	; (801089c <_dtoa_r+0x63c>)
 80106f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80106f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80106f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f280 80dc 	bge.w	80108b8 <_dtoa_r+0x658>
 8010700:	9b04      	ldr	r3, [sp, #16]
 8010702:	2b00      	cmp	r3, #0
 8010704:	f300 80d8 	bgt.w	80108b8 <_dtoa_r+0x658>
 8010708:	f040 826f 	bne.w	8010bea <_dtoa_r+0x98a>
 801070c:	4b68      	ldr	r3, [pc, #416]	; (80108b0 <_dtoa_r+0x650>)
 801070e:	2200      	movs	r2, #0
 8010710:	4640      	mov	r0, r8
 8010712:	4649      	mov	r1, r9
 8010714:	f7ef ff78 	bl	8000608 <__aeabi_dmul>
 8010718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801071c:	f7f0 f9fa 	bl	8000b14 <__aeabi_dcmpge>
 8010720:	9e04      	ldr	r6, [sp, #16]
 8010722:	4637      	mov	r7, r6
 8010724:	2800      	cmp	r0, #0
 8010726:	f040 8245 	bne.w	8010bb4 <_dtoa_r+0x954>
 801072a:	9d00      	ldr	r5, [sp, #0]
 801072c:	2331      	movs	r3, #49	; 0x31
 801072e:	f805 3b01 	strb.w	r3, [r5], #1
 8010732:	f10b 0b01 	add.w	fp, fp, #1
 8010736:	e241      	b.n	8010bbc <_dtoa_r+0x95c>
 8010738:	07f2      	lsls	r2, r6, #31
 801073a:	d505      	bpl.n	8010748 <_dtoa_r+0x4e8>
 801073c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010740:	f7ef ff62 	bl	8000608 <__aeabi_dmul>
 8010744:	3501      	adds	r5, #1
 8010746:	2301      	movs	r3, #1
 8010748:	1076      	asrs	r6, r6, #1
 801074a:	3708      	adds	r7, #8
 801074c:	e773      	b.n	8010636 <_dtoa_r+0x3d6>
 801074e:	2502      	movs	r5, #2
 8010750:	e775      	b.n	801063e <_dtoa_r+0x3de>
 8010752:	9e04      	ldr	r6, [sp, #16]
 8010754:	465f      	mov	r7, fp
 8010756:	e792      	b.n	801067e <_dtoa_r+0x41e>
 8010758:	9900      	ldr	r1, [sp, #0]
 801075a:	4b50      	ldr	r3, [pc, #320]	; (801089c <_dtoa_r+0x63c>)
 801075c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010760:	4431      	add	r1, r6
 8010762:	9102      	str	r1, [sp, #8]
 8010764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010766:	eeb0 9a47 	vmov.f32	s18, s14
 801076a:	eef0 9a67 	vmov.f32	s19, s15
 801076e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010776:	2900      	cmp	r1, #0
 8010778:	d044      	beq.n	8010804 <_dtoa_r+0x5a4>
 801077a:	494e      	ldr	r1, [pc, #312]	; (80108b4 <_dtoa_r+0x654>)
 801077c:	2000      	movs	r0, #0
 801077e:	f7f0 f86d 	bl	800085c <__aeabi_ddiv>
 8010782:	ec53 2b19 	vmov	r2, r3, d9
 8010786:	f7ef fd87 	bl	8000298 <__aeabi_dsub>
 801078a:	9d00      	ldr	r5, [sp, #0]
 801078c:	ec41 0b19 	vmov	d9, r0, r1
 8010790:	4649      	mov	r1, r9
 8010792:	4640      	mov	r0, r8
 8010794:	f7f0 f9e8 	bl	8000b68 <__aeabi_d2iz>
 8010798:	4606      	mov	r6, r0
 801079a:	f7ef fecb 	bl	8000534 <__aeabi_i2d>
 801079e:	4602      	mov	r2, r0
 80107a0:	460b      	mov	r3, r1
 80107a2:	4640      	mov	r0, r8
 80107a4:	4649      	mov	r1, r9
 80107a6:	f7ef fd77 	bl	8000298 <__aeabi_dsub>
 80107aa:	3630      	adds	r6, #48	; 0x30
 80107ac:	f805 6b01 	strb.w	r6, [r5], #1
 80107b0:	ec53 2b19 	vmov	r2, r3, d9
 80107b4:	4680      	mov	r8, r0
 80107b6:	4689      	mov	r9, r1
 80107b8:	f7f0 f998 	bl	8000aec <__aeabi_dcmplt>
 80107bc:	2800      	cmp	r0, #0
 80107be:	d164      	bne.n	801088a <_dtoa_r+0x62a>
 80107c0:	4642      	mov	r2, r8
 80107c2:	464b      	mov	r3, r9
 80107c4:	4937      	ldr	r1, [pc, #220]	; (80108a4 <_dtoa_r+0x644>)
 80107c6:	2000      	movs	r0, #0
 80107c8:	f7ef fd66 	bl	8000298 <__aeabi_dsub>
 80107cc:	ec53 2b19 	vmov	r2, r3, d9
 80107d0:	f7f0 f98c 	bl	8000aec <__aeabi_dcmplt>
 80107d4:	2800      	cmp	r0, #0
 80107d6:	f040 80b6 	bne.w	8010946 <_dtoa_r+0x6e6>
 80107da:	9b02      	ldr	r3, [sp, #8]
 80107dc:	429d      	cmp	r5, r3
 80107de:	f43f af7c 	beq.w	80106da <_dtoa_r+0x47a>
 80107e2:	4b31      	ldr	r3, [pc, #196]	; (80108a8 <_dtoa_r+0x648>)
 80107e4:	ec51 0b19 	vmov	r0, r1, d9
 80107e8:	2200      	movs	r2, #0
 80107ea:	f7ef ff0d 	bl	8000608 <__aeabi_dmul>
 80107ee:	4b2e      	ldr	r3, [pc, #184]	; (80108a8 <_dtoa_r+0x648>)
 80107f0:	ec41 0b19 	vmov	d9, r0, r1
 80107f4:	2200      	movs	r2, #0
 80107f6:	4640      	mov	r0, r8
 80107f8:	4649      	mov	r1, r9
 80107fa:	f7ef ff05 	bl	8000608 <__aeabi_dmul>
 80107fe:	4680      	mov	r8, r0
 8010800:	4689      	mov	r9, r1
 8010802:	e7c5      	b.n	8010790 <_dtoa_r+0x530>
 8010804:	ec51 0b17 	vmov	r0, r1, d7
 8010808:	f7ef fefe 	bl	8000608 <__aeabi_dmul>
 801080c:	9b02      	ldr	r3, [sp, #8]
 801080e:	9d00      	ldr	r5, [sp, #0]
 8010810:	930f      	str	r3, [sp, #60]	; 0x3c
 8010812:	ec41 0b19 	vmov	d9, r0, r1
 8010816:	4649      	mov	r1, r9
 8010818:	4640      	mov	r0, r8
 801081a:	f7f0 f9a5 	bl	8000b68 <__aeabi_d2iz>
 801081e:	4606      	mov	r6, r0
 8010820:	f7ef fe88 	bl	8000534 <__aeabi_i2d>
 8010824:	3630      	adds	r6, #48	; 0x30
 8010826:	4602      	mov	r2, r0
 8010828:	460b      	mov	r3, r1
 801082a:	4640      	mov	r0, r8
 801082c:	4649      	mov	r1, r9
 801082e:	f7ef fd33 	bl	8000298 <__aeabi_dsub>
 8010832:	f805 6b01 	strb.w	r6, [r5], #1
 8010836:	9b02      	ldr	r3, [sp, #8]
 8010838:	429d      	cmp	r5, r3
 801083a:	4680      	mov	r8, r0
 801083c:	4689      	mov	r9, r1
 801083e:	f04f 0200 	mov.w	r2, #0
 8010842:	d124      	bne.n	801088e <_dtoa_r+0x62e>
 8010844:	4b1b      	ldr	r3, [pc, #108]	; (80108b4 <_dtoa_r+0x654>)
 8010846:	ec51 0b19 	vmov	r0, r1, d9
 801084a:	f7ef fd27 	bl	800029c <__adddf3>
 801084e:	4602      	mov	r2, r0
 8010850:	460b      	mov	r3, r1
 8010852:	4640      	mov	r0, r8
 8010854:	4649      	mov	r1, r9
 8010856:	f7f0 f967 	bl	8000b28 <__aeabi_dcmpgt>
 801085a:	2800      	cmp	r0, #0
 801085c:	d173      	bne.n	8010946 <_dtoa_r+0x6e6>
 801085e:	ec53 2b19 	vmov	r2, r3, d9
 8010862:	4914      	ldr	r1, [pc, #80]	; (80108b4 <_dtoa_r+0x654>)
 8010864:	2000      	movs	r0, #0
 8010866:	f7ef fd17 	bl	8000298 <__aeabi_dsub>
 801086a:	4602      	mov	r2, r0
 801086c:	460b      	mov	r3, r1
 801086e:	4640      	mov	r0, r8
 8010870:	4649      	mov	r1, r9
 8010872:	f7f0 f93b 	bl	8000aec <__aeabi_dcmplt>
 8010876:	2800      	cmp	r0, #0
 8010878:	f43f af2f 	beq.w	80106da <_dtoa_r+0x47a>
 801087c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801087e:	1e6b      	subs	r3, r5, #1
 8010880:	930f      	str	r3, [sp, #60]	; 0x3c
 8010882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010886:	2b30      	cmp	r3, #48	; 0x30
 8010888:	d0f8      	beq.n	801087c <_dtoa_r+0x61c>
 801088a:	46bb      	mov	fp, r7
 801088c:	e04a      	b.n	8010924 <_dtoa_r+0x6c4>
 801088e:	4b06      	ldr	r3, [pc, #24]	; (80108a8 <_dtoa_r+0x648>)
 8010890:	f7ef feba 	bl	8000608 <__aeabi_dmul>
 8010894:	4680      	mov	r8, r0
 8010896:	4689      	mov	r9, r1
 8010898:	e7bd      	b.n	8010816 <_dtoa_r+0x5b6>
 801089a:	bf00      	nop
 801089c:	080125f0 	.word	0x080125f0
 80108a0:	080125c8 	.word	0x080125c8
 80108a4:	3ff00000 	.word	0x3ff00000
 80108a8:	40240000 	.word	0x40240000
 80108ac:	401c0000 	.word	0x401c0000
 80108b0:	40140000 	.word	0x40140000
 80108b4:	3fe00000 	.word	0x3fe00000
 80108b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80108bc:	9d00      	ldr	r5, [sp, #0]
 80108be:	4642      	mov	r2, r8
 80108c0:	464b      	mov	r3, r9
 80108c2:	4630      	mov	r0, r6
 80108c4:	4639      	mov	r1, r7
 80108c6:	f7ef ffc9 	bl	800085c <__aeabi_ddiv>
 80108ca:	f7f0 f94d 	bl	8000b68 <__aeabi_d2iz>
 80108ce:	9001      	str	r0, [sp, #4]
 80108d0:	f7ef fe30 	bl	8000534 <__aeabi_i2d>
 80108d4:	4642      	mov	r2, r8
 80108d6:	464b      	mov	r3, r9
 80108d8:	f7ef fe96 	bl	8000608 <__aeabi_dmul>
 80108dc:	4602      	mov	r2, r0
 80108de:	460b      	mov	r3, r1
 80108e0:	4630      	mov	r0, r6
 80108e2:	4639      	mov	r1, r7
 80108e4:	f7ef fcd8 	bl	8000298 <__aeabi_dsub>
 80108e8:	9e01      	ldr	r6, [sp, #4]
 80108ea:	9f04      	ldr	r7, [sp, #16]
 80108ec:	3630      	adds	r6, #48	; 0x30
 80108ee:	f805 6b01 	strb.w	r6, [r5], #1
 80108f2:	9e00      	ldr	r6, [sp, #0]
 80108f4:	1bae      	subs	r6, r5, r6
 80108f6:	42b7      	cmp	r7, r6
 80108f8:	4602      	mov	r2, r0
 80108fa:	460b      	mov	r3, r1
 80108fc:	d134      	bne.n	8010968 <_dtoa_r+0x708>
 80108fe:	f7ef fccd 	bl	800029c <__adddf3>
 8010902:	4642      	mov	r2, r8
 8010904:	464b      	mov	r3, r9
 8010906:	4606      	mov	r6, r0
 8010908:	460f      	mov	r7, r1
 801090a:	f7f0 f90d 	bl	8000b28 <__aeabi_dcmpgt>
 801090e:	b9c8      	cbnz	r0, 8010944 <_dtoa_r+0x6e4>
 8010910:	4642      	mov	r2, r8
 8010912:	464b      	mov	r3, r9
 8010914:	4630      	mov	r0, r6
 8010916:	4639      	mov	r1, r7
 8010918:	f7f0 f8de 	bl	8000ad8 <__aeabi_dcmpeq>
 801091c:	b110      	cbz	r0, 8010924 <_dtoa_r+0x6c4>
 801091e:	9b01      	ldr	r3, [sp, #4]
 8010920:	07db      	lsls	r3, r3, #31
 8010922:	d40f      	bmi.n	8010944 <_dtoa_r+0x6e4>
 8010924:	4651      	mov	r1, sl
 8010926:	4620      	mov	r0, r4
 8010928:	f000 fb18 	bl	8010f5c <_Bfree>
 801092c:	2300      	movs	r3, #0
 801092e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010930:	702b      	strb	r3, [r5, #0]
 8010932:	f10b 0301 	add.w	r3, fp, #1
 8010936:	6013      	str	r3, [r2, #0]
 8010938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801093a:	2b00      	cmp	r3, #0
 801093c:	f43f ace2 	beq.w	8010304 <_dtoa_r+0xa4>
 8010940:	601d      	str	r5, [r3, #0]
 8010942:	e4df      	b.n	8010304 <_dtoa_r+0xa4>
 8010944:	465f      	mov	r7, fp
 8010946:	462b      	mov	r3, r5
 8010948:	461d      	mov	r5, r3
 801094a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801094e:	2a39      	cmp	r2, #57	; 0x39
 8010950:	d106      	bne.n	8010960 <_dtoa_r+0x700>
 8010952:	9a00      	ldr	r2, [sp, #0]
 8010954:	429a      	cmp	r2, r3
 8010956:	d1f7      	bne.n	8010948 <_dtoa_r+0x6e8>
 8010958:	9900      	ldr	r1, [sp, #0]
 801095a:	2230      	movs	r2, #48	; 0x30
 801095c:	3701      	adds	r7, #1
 801095e:	700a      	strb	r2, [r1, #0]
 8010960:	781a      	ldrb	r2, [r3, #0]
 8010962:	3201      	adds	r2, #1
 8010964:	701a      	strb	r2, [r3, #0]
 8010966:	e790      	b.n	801088a <_dtoa_r+0x62a>
 8010968:	4ba3      	ldr	r3, [pc, #652]	; (8010bf8 <_dtoa_r+0x998>)
 801096a:	2200      	movs	r2, #0
 801096c:	f7ef fe4c 	bl	8000608 <__aeabi_dmul>
 8010970:	2200      	movs	r2, #0
 8010972:	2300      	movs	r3, #0
 8010974:	4606      	mov	r6, r0
 8010976:	460f      	mov	r7, r1
 8010978:	f7f0 f8ae 	bl	8000ad8 <__aeabi_dcmpeq>
 801097c:	2800      	cmp	r0, #0
 801097e:	d09e      	beq.n	80108be <_dtoa_r+0x65e>
 8010980:	e7d0      	b.n	8010924 <_dtoa_r+0x6c4>
 8010982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010984:	2a00      	cmp	r2, #0
 8010986:	f000 80ca 	beq.w	8010b1e <_dtoa_r+0x8be>
 801098a:	9a07      	ldr	r2, [sp, #28]
 801098c:	2a01      	cmp	r2, #1
 801098e:	f300 80ad 	bgt.w	8010aec <_dtoa_r+0x88c>
 8010992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010994:	2a00      	cmp	r2, #0
 8010996:	f000 80a5 	beq.w	8010ae4 <_dtoa_r+0x884>
 801099a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801099e:	9e08      	ldr	r6, [sp, #32]
 80109a0:	9d05      	ldr	r5, [sp, #20]
 80109a2:	9a05      	ldr	r2, [sp, #20]
 80109a4:	441a      	add	r2, r3
 80109a6:	9205      	str	r2, [sp, #20]
 80109a8:	9a06      	ldr	r2, [sp, #24]
 80109aa:	2101      	movs	r1, #1
 80109ac:	441a      	add	r2, r3
 80109ae:	4620      	mov	r0, r4
 80109b0:	9206      	str	r2, [sp, #24]
 80109b2:	f000 fb89 	bl	80110c8 <__i2b>
 80109b6:	4607      	mov	r7, r0
 80109b8:	b165      	cbz	r5, 80109d4 <_dtoa_r+0x774>
 80109ba:	9b06      	ldr	r3, [sp, #24]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	dd09      	ble.n	80109d4 <_dtoa_r+0x774>
 80109c0:	42ab      	cmp	r3, r5
 80109c2:	9a05      	ldr	r2, [sp, #20]
 80109c4:	bfa8      	it	ge
 80109c6:	462b      	movge	r3, r5
 80109c8:	1ad2      	subs	r2, r2, r3
 80109ca:	9205      	str	r2, [sp, #20]
 80109cc:	9a06      	ldr	r2, [sp, #24]
 80109ce:	1aed      	subs	r5, r5, r3
 80109d0:	1ad3      	subs	r3, r2, r3
 80109d2:	9306      	str	r3, [sp, #24]
 80109d4:	9b08      	ldr	r3, [sp, #32]
 80109d6:	b1f3      	cbz	r3, 8010a16 <_dtoa_r+0x7b6>
 80109d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f000 80a3 	beq.w	8010b26 <_dtoa_r+0x8c6>
 80109e0:	2e00      	cmp	r6, #0
 80109e2:	dd10      	ble.n	8010a06 <_dtoa_r+0x7a6>
 80109e4:	4639      	mov	r1, r7
 80109e6:	4632      	mov	r2, r6
 80109e8:	4620      	mov	r0, r4
 80109ea:	f000 fc2d 	bl	8011248 <__pow5mult>
 80109ee:	4652      	mov	r2, sl
 80109f0:	4601      	mov	r1, r0
 80109f2:	4607      	mov	r7, r0
 80109f4:	4620      	mov	r0, r4
 80109f6:	f000 fb7d 	bl	80110f4 <__multiply>
 80109fa:	4651      	mov	r1, sl
 80109fc:	4680      	mov	r8, r0
 80109fe:	4620      	mov	r0, r4
 8010a00:	f000 faac 	bl	8010f5c <_Bfree>
 8010a04:	46c2      	mov	sl, r8
 8010a06:	9b08      	ldr	r3, [sp, #32]
 8010a08:	1b9a      	subs	r2, r3, r6
 8010a0a:	d004      	beq.n	8010a16 <_dtoa_r+0x7b6>
 8010a0c:	4651      	mov	r1, sl
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f000 fc1a 	bl	8011248 <__pow5mult>
 8010a14:	4682      	mov	sl, r0
 8010a16:	2101      	movs	r1, #1
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f000 fb55 	bl	80110c8 <__i2b>
 8010a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	4606      	mov	r6, r0
 8010a24:	f340 8081 	ble.w	8010b2a <_dtoa_r+0x8ca>
 8010a28:	461a      	mov	r2, r3
 8010a2a:	4601      	mov	r1, r0
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f000 fc0b 	bl	8011248 <__pow5mult>
 8010a32:	9b07      	ldr	r3, [sp, #28]
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	4606      	mov	r6, r0
 8010a38:	dd7a      	ble.n	8010b30 <_dtoa_r+0x8d0>
 8010a3a:	f04f 0800 	mov.w	r8, #0
 8010a3e:	6933      	ldr	r3, [r6, #16]
 8010a40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010a44:	6918      	ldr	r0, [r3, #16]
 8010a46:	f000 faf1 	bl	801102c <__hi0bits>
 8010a4a:	f1c0 0020 	rsb	r0, r0, #32
 8010a4e:	9b06      	ldr	r3, [sp, #24]
 8010a50:	4418      	add	r0, r3
 8010a52:	f010 001f 	ands.w	r0, r0, #31
 8010a56:	f000 8094 	beq.w	8010b82 <_dtoa_r+0x922>
 8010a5a:	f1c0 0320 	rsb	r3, r0, #32
 8010a5e:	2b04      	cmp	r3, #4
 8010a60:	f340 8085 	ble.w	8010b6e <_dtoa_r+0x90e>
 8010a64:	9b05      	ldr	r3, [sp, #20]
 8010a66:	f1c0 001c 	rsb	r0, r0, #28
 8010a6a:	4403      	add	r3, r0
 8010a6c:	9305      	str	r3, [sp, #20]
 8010a6e:	9b06      	ldr	r3, [sp, #24]
 8010a70:	4403      	add	r3, r0
 8010a72:	4405      	add	r5, r0
 8010a74:	9306      	str	r3, [sp, #24]
 8010a76:	9b05      	ldr	r3, [sp, #20]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	dd05      	ble.n	8010a88 <_dtoa_r+0x828>
 8010a7c:	4651      	mov	r1, sl
 8010a7e:	461a      	mov	r2, r3
 8010a80:	4620      	mov	r0, r4
 8010a82:	f000 fc3b 	bl	80112fc <__lshift>
 8010a86:	4682      	mov	sl, r0
 8010a88:	9b06      	ldr	r3, [sp, #24]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dd05      	ble.n	8010a9a <_dtoa_r+0x83a>
 8010a8e:	4631      	mov	r1, r6
 8010a90:	461a      	mov	r2, r3
 8010a92:	4620      	mov	r0, r4
 8010a94:	f000 fc32 	bl	80112fc <__lshift>
 8010a98:	4606      	mov	r6, r0
 8010a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d072      	beq.n	8010b86 <_dtoa_r+0x926>
 8010aa0:	4631      	mov	r1, r6
 8010aa2:	4650      	mov	r0, sl
 8010aa4:	f000 fc96 	bl	80113d4 <__mcmp>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	da6c      	bge.n	8010b86 <_dtoa_r+0x926>
 8010aac:	2300      	movs	r3, #0
 8010aae:	4651      	mov	r1, sl
 8010ab0:	220a      	movs	r2, #10
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f000 fa74 	bl	8010fa0 <__multadd>
 8010ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010abe:	4682      	mov	sl, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f000 81b0 	beq.w	8010e26 <_dtoa_r+0xbc6>
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	4639      	mov	r1, r7
 8010aca:	220a      	movs	r2, #10
 8010acc:	4620      	mov	r0, r4
 8010ace:	f000 fa67 	bl	8010fa0 <__multadd>
 8010ad2:	9b01      	ldr	r3, [sp, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	4607      	mov	r7, r0
 8010ad8:	f300 8096 	bgt.w	8010c08 <_dtoa_r+0x9a8>
 8010adc:	9b07      	ldr	r3, [sp, #28]
 8010ade:	2b02      	cmp	r3, #2
 8010ae0:	dc59      	bgt.n	8010b96 <_dtoa_r+0x936>
 8010ae2:	e091      	b.n	8010c08 <_dtoa_r+0x9a8>
 8010ae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010ae6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010aea:	e758      	b.n	801099e <_dtoa_r+0x73e>
 8010aec:	9b04      	ldr	r3, [sp, #16]
 8010aee:	1e5e      	subs	r6, r3, #1
 8010af0:	9b08      	ldr	r3, [sp, #32]
 8010af2:	42b3      	cmp	r3, r6
 8010af4:	bfbf      	itttt	lt
 8010af6:	9b08      	ldrlt	r3, [sp, #32]
 8010af8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010afa:	9608      	strlt	r6, [sp, #32]
 8010afc:	1af3      	sublt	r3, r6, r3
 8010afe:	bfb4      	ite	lt
 8010b00:	18d2      	addlt	r2, r2, r3
 8010b02:	1b9e      	subge	r6, r3, r6
 8010b04:	9b04      	ldr	r3, [sp, #16]
 8010b06:	bfbc      	itt	lt
 8010b08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010b0a:	2600      	movlt	r6, #0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	bfb7      	itett	lt
 8010b10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010b14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010b18:	1a9d      	sublt	r5, r3, r2
 8010b1a:	2300      	movlt	r3, #0
 8010b1c:	e741      	b.n	80109a2 <_dtoa_r+0x742>
 8010b1e:	9e08      	ldr	r6, [sp, #32]
 8010b20:	9d05      	ldr	r5, [sp, #20]
 8010b22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010b24:	e748      	b.n	80109b8 <_dtoa_r+0x758>
 8010b26:	9a08      	ldr	r2, [sp, #32]
 8010b28:	e770      	b.n	8010a0c <_dtoa_r+0x7ac>
 8010b2a:	9b07      	ldr	r3, [sp, #28]
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	dc19      	bgt.n	8010b64 <_dtoa_r+0x904>
 8010b30:	9b02      	ldr	r3, [sp, #8]
 8010b32:	b9bb      	cbnz	r3, 8010b64 <_dtoa_r+0x904>
 8010b34:	9b03      	ldr	r3, [sp, #12]
 8010b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b3a:	b99b      	cbnz	r3, 8010b64 <_dtoa_r+0x904>
 8010b3c:	9b03      	ldr	r3, [sp, #12]
 8010b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b42:	0d1b      	lsrs	r3, r3, #20
 8010b44:	051b      	lsls	r3, r3, #20
 8010b46:	b183      	cbz	r3, 8010b6a <_dtoa_r+0x90a>
 8010b48:	9b05      	ldr	r3, [sp, #20]
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	9305      	str	r3, [sp, #20]
 8010b4e:	9b06      	ldr	r3, [sp, #24]
 8010b50:	3301      	adds	r3, #1
 8010b52:	9306      	str	r3, [sp, #24]
 8010b54:	f04f 0801 	mov.w	r8, #1
 8010b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	f47f af6f 	bne.w	8010a3e <_dtoa_r+0x7de>
 8010b60:	2001      	movs	r0, #1
 8010b62:	e774      	b.n	8010a4e <_dtoa_r+0x7ee>
 8010b64:	f04f 0800 	mov.w	r8, #0
 8010b68:	e7f6      	b.n	8010b58 <_dtoa_r+0x8f8>
 8010b6a:	4698      	mov	r8, r3
 8010b6c:	e7f4      	b.n	8010b58 <_dtoa_r+0x8f8>
 8010b6e:	d082      	beq.n	8010a76 <_dtoa_r+0x816>
 8010b70:	9a05      	ldr	r2, [sp, #20]
 8010b72:	331c      	adds	r3, #28
 8010b74:	441a      	add	r2, r3
 8010b76:	9205      	str	r2, [sp, #20]
 8010b78:	9a06      	ldr	r2, [sp, #24]
 8010b7a:	441a      	add	r2, r3
 8010b7c:	441d      	add	r5, r3
 8010b7e:	9206      	str	r2, [sp, #24]
 8010b80:	e779      	b.n	8010a76 <_dtoa_r+0x816>
 8010b82:	4603      	mov	r3, r0
 8010b84:	e7f4      	b.n	8010b70 <_dtoa_r+0x910>
 8010b86:	9b04      	ldr	r3, [sp, #16]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	dc37      	bgt.n	8010bfc <_dtoa_r+0x99c>
 8010b8c:	9b07      	ldr	r3, [sp, #28]
 8010b8e:	2b02      	cmp	r3, #2
 8010b90:	dd34      	ble.n	8010bfc <_dtoa_r+0x99c>
 8010b92:	9b04      	ldr	r3, [sp, #16]
 8010b94:	9301      	str	r3, [sp, #4]
 8010b96:	9b01      	ldr	r3, [sp, #4]
 8010b98:	b963      	cbnz	r3, 8010bb4 <_dtoa_r+0x954>
 8010b9a:	4631      	mov	r1, r6
 8010b9c:	2205      	movs	r2, #5
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f000 f9fe 	bl	8010fa0 <__multadd>
 8010ba4:	4601      	mov	r1, r0
 8010ba6:	4606      	mov	r6, r0
 8010ba8:	4650      	mov	r0, sl
 8010baa:	f000 fc13 	bl	80113d4 <__mcmp>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	f73f adbb 	bgt.w	801072a <_dtoa_r+0x4ca>
 8010bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bb6:	9d00      	ldr	r5, [sp, #0]
 8010bb8:	ea6f 0b03 	mvn.w	fp, r3
 8010bbc:	f04f 0800 	mov.w	r8, #0
 8010bc0:	4631      	mov	r1, r6
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f000 f9ca 	bl	8010f5c <_Bfree>
 8010bc8:	2f00      	cmp	r7, #0
 8010bca:	f43f aeab 	beq.w	8010924 <_dtoa_r+0x6c4>
 8010bce:	f1b8 0f00 	cmp.w	r8, #0
 8010bd2:	d005      	beq.n	8010be0 <_dtoa_r+0x980>
 8010bd4:	45b8      	cmp	r8, r7
 8010bd6:	d003      	beq.n	8010be0 <_dtoa_r+0x980>
 8010bd8:	4641      	mov	r1, r8
 8010bda:	4620      	mov	r0, r4
 8010bdc:	f000 f9be 	bl	8010f5c <_Bfree>
 8010be0:	4639      	mov	r1, r7
 8010be2:	4620      	mov	r0, r4
 8010be4:	f000 f9ba 	bl	8010f5c <_Bfree>
 8010be8:	e69c      	b.n	8010924 <_dtoa_r+0x6c4>
 8010bea:	2600      	movs	r6, #0
 8010bec:	4637      	mov	r7, r6
 8010bee:	e7e1      	b.n	8010bb4 <_dtoa_r+0x954>
 8010bf0:	46bb      	mov	fp, r7
 8010bf2:	4637      	mov	r7, r6
 8010bf4:	e599      	b.n	801072a <_dtoa_r+0x4ca>
 8010bf6:	bf00      	nop
 8010bf8:	40240000 	.word	0x40240000
 8010bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f000 80c8 	beq.w	8010d94 <_dtoa_r+0xb34>
 8010c04:	9b04      	ldr	r3, [sp, #16]
 8010c06:	9301      	str	r3, [sp, #4]
 8010c08:	2d00      	cmp	r5, #0
 8010c0a:	dd05      	ble.n	8010c18 <_dtoa_r+0x9b8>
 8010c0c:	4639      	mov	r1, r7
 8010c0e:	462a      	mov	r2, r5
 8010c10:	4620      	mov	r0, r4
 8010c12:	f000 fb73 	bl	80112fc <__lshift>
 8010c16:	4607      	mov	r7, r0
 8010c18:	f1b8 0f00 	cmp.w	r8, #0
 8010c1c:	d05b      	beq.n	8010cd6 <_dtoa_r+0xa76>
 8010c1e:	6879      	ldr	r1, [r7, #4]
 8010c20:	4620      	mov	r0, r4
 8010c22:	f000 f95b 	bl	8010edc <_Balloc>
 8010c26:	4605      	mov	r5, r0
 8010c28:	b928      	cbnz	r0, 8010c36 <_dtoa_r+0x9d6>
 8010c2a:	4b83      	ldr	r3, [pc, #524]	; (8010e38 <_dtoa_r+0xbd8>)
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010c32:	f7ff bb2e 	b.w	8010292 <_dtoa_r+0x32>
 8010c36:	693a      	ldr	r2, [r7, #16]
 8010c38:	3202      	adds	r2, #2
 8010c3a:	0092      	lsls	r2, r2, #2
 8010c3c:	f107 010c 	add.w	r1, r7, #12
 8010c40:	300c      	adds	r0, #12
 8010c42:	f7ff fa77 	bl	8010134 <memcpy>
 8010c46:	2201      	movs	r2, #1
 8010c48:	4629      	mov	r1, r5
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f000 fb56 	bl	80112fc <__lshift>
 8010c50:	9b00      	ldr	r3, [sp, #0]
 8010c52:	3301      	adds	r3, #1
 8010c54:	9304      	str	r3, [sp, #16]
 8010c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	9308      	str	r3, [sp, #32]
 8010c5e:	9b02      	ldr	r3, [sp, #8]
 8010c60:	f003 0301 	and.w	r3, r3, #1
 8010c64:	46b8      	mov	r8, r7
 8010c66:	9306      	str	r3, [sp, #24]
 8010c68:	4607      	mov	r7, r0
 8010c6a:	9b04      	ldr	r3, [sp, #16]
 8010c6c:	4631      	mov	r1, r6
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	4650      	mov	r0, sl
 8010c72:	9301      	str	r3, [sp, #4]
 8010c74:	f7ff fa6c 	bl	8010150 <quorem>
 8010c78:	4641      	mov	r1, r8
 8010c7a:	9002      	str	r0, [sp, #8]
 8010c7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010c80:	4650      	mov	r0, sl
 8010c82:	f000 fba7 	bl	80113d4 <__mcmp>
 8010c86:	463a      	mov	r2, r7
 8010c88:	9005      	str	r0, [sp, #20]
 8010c8a:	4631      	mov	r1, r6
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f000 fbbd 	bl	801140c <__mdiff>
 8010c92:	68c2      	ldr	r2, [r0, #12]
 8010c94:	4605      	mov	r5, r0
 8010c96:	bb02      	cbnz	r2, 8010cda <_dtoa_r+0xa7a>
 8010c98:	4601      	mov	r1, r0
 8010c9a:	4650      	mov	r0, sl
 8010c9c:	f000 fb9a 	bl	80113d4 <__mcmp>
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	4629      	mov	r1, r5
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8010ca8:	f000 f958 	bl	8010f5c <_Bfree>
 8010cac:	9b07      	ldr	r3, [sp, #28]
 8010cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cb0:	9d04      	ldr	r5, [sp, #16]
 8010cb2:	ea43 0102 	orr.w	r1, r3, r2
 8010cb6:	9b06      	ldr	r3, [sp, #24]
 8010cb8:	4319      	orrs	r1, r3
 8010cba:	d110      	bne.n	8010cde <_dtoa_r+0xa7e>
 8010cbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010cc0:	d029      	beq.n	8010d16 <_dtoa_r+0xab6>
 8010cc2:	9b05      	ldr	r3, [sp, #20]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	dd02      	ble.n	8010cce <_dtoa_r+0xa6e>
 8010cc8:	9b02      	ldr	r3, [sp, #8]
 8010cca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010cce:	9b01      	ldr	r3, [sp, #4]
 8010cd0:	f883 9000 	strb.w	r9, [r3]
 8010cd4:	e774      	b.n	8010bc0 <_dtoa_r+0x960>
 8010cd6:	4638      	mov	r0, r7
 8010cd8:	e7ba      	b.n	8010c50 <_dtoa_r+0x9f0>
 8010cda:	2201      	movs	r2, #1
 8010cdc:	e7e1      	b.n	8010ca2 <_dtoa_r+0xa42>
 8010cde:	9b05      	ldr	r3, [sp, #20]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	db04      	blt.n	8010cee <_dtoa_r+0xa8e>
 8010ce4:	9907      	ldr	r1, [sp, #28]
 8010ce6:	430b      	orrs	r3, r1
 8010ce8:	9906      	ldr	r1, [sp, #24]
 8010cea:	430b      	orrs	r3, r1
 8010cec:	d120      	bne.n	8010d30 <_dtoa_r+0xad0>
 8010cee:	2a00      	cmp	r2, #0
 8010cf0:	dded      	ble.n	8010cce <_dtoa_r+0xa6e>
 8010cf2:	4651      	mov	r1, sl
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f000 fb00 	bl	80112fc <__lshift>
 8010cfc:	4631      	mov	r1, r6
 8010cfe:	4682      	mov	sl, r0
 8010d00:	f000 fb68 	bl	80113d4 <__mcmp>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	dc03      	bgt.n	8010d10 <_dtoa_r+0xab0>
 8010d08:	d1e1      	bne.n	8010cce <_dtoa_r+0xa6e>
 8010d0a:	f019 0f01 	tst.w	r9, #1
 8010d0e:	d0de      	beq.n	8010cce <_dtoa_r+0xa6e>
 8010d10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010d14:	d1d8      	bne.n	8010cc8 <_dtoa_r+0xa68>
 8010d16:	9a01      	ldr	r2, [sp, #4]
 8010d18:	2339      	movs	r3, #57	; 0x39
 8010d1a:	7013      	strb	r3, [r2, #0]
 8010d1c:	462b      	mov	r3, r5
 8010d1e:	461d      	mov	r5, r3
 8010d20:	3b01      	subs	r3, #1
 8010d22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010d26:	2a39      	cmp	r2, #57	; 0x39
 8010d28:	d06c      	beq.n	8010e04 <_dtoa_r+0xba4>
 8010d2a:	3201      	adds	r2, #1
 8010d2c:	701a      	strb	r2, [r3, #0]
 8010d2e:	e747      	b.n	8010bc0 <_dtoa_r+0x960>
 8010d30:	2a00      	cmp	r2, #0
 8010d32:	dd07      	ble.n	8010d44 <_dtoa_r+0xae4>
 8010d34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010d38:	d0ed      	beq.n	8010d16 <_dtoa_r+0xab6>
 8010d3a:	9a01      	ldr	r2, [sp, #4]
 8010d3c:	f109 0301 	add.w	r3, r9, #1
 8010d40:	7013      	strb	r3, [r2, #0]
 8010d42:	e73d      	b.n	8010bc0 <_dtoa_r+0x960>
 8010d44:	9b04      	ldr	r3, [sp, #16]
 8010d46:	9a08      	ldr	r2, [sp, #32]
 8010d48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d043      	beq.n	8010dd8 <_dtoa_r+0xb78>
 8010d50:	4651      	mov	r1, sl
 8010d52:	2300      	movs	r3, #0
 8010d54:	220a      	movs	r2, #10
 8010d56:	4620      	mov	r0, r4
 8010d58:	f000 f922 	bl	8010fa0 <__multadd>
 8010d5c:	45b8      	cmp	r8, r7
 8010d5e:	4682      	mov	sl, r0
 8010d60:	f04f 0300 	mov.w	r3, #0
 8010d64:	f04f 020a 	mov.w	r2, #10
 8010d68:	4641      	mov	r1, r8
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	d107      	bne.n	8010d7e <_dtoa_r+0xb1e>
 8010d6e:	f000 f917 	bl	8010fa0 <__multadd>
 8010d72:	4680      	mov	r8, r0
 8010d74:	4607      	mov	r7, r0
 8010d76:	9b04      	ldr	r3, [sp, #16]
 8010d78:	3301      	adds	r3, #1
 8010d7a:	9304      	str	r3, [sp, #16]
 8010d7c:	e775      	b.n	8010c6a <_dtoa_r+0xa0a>
 8010d7e:	f000 f90f 	bl	8010fa0 <__multadd>
 8010d82:	4639      	mov	r1, r7
 8010d84:	4680      	mov	r8, r0
 8010d86:	2300      	movs	r3, #0
 8010d88:	220a      	movs	r2, #10
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f000 f908 	bl	8010fa0 <__multadd>
 8010d90:	4607      	mov	r7, r0
 8010d92:	e7f0      	b.n	8010d76 <_dtoa_r+0xb16>
 8010d94:	9b04      	ldr	r3, [sp, #16]
 8010d96:	9301      	str	r3, [sp, #4]
 8010d98:	9d00      	ldr	r5, [sp, #0]
 8010d9a:	4631      	mov	r1, r6
 8010d9c:	4650      	mov	r0, sl
 8010d9e:	f7ff f9d7 	bl	8010150 <quorem>
 8010da2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010da6:	9b00      	ldr	r3, [sp, #0]
 8010da8:	f805 9b01 	strb.w	r9, [r5], #1
 8010dac:	1aea      	subs	r2, r5, r3
 8010dae:	9b01      	ldr	r3, [sp, #4]
 8010db0:	4293      	cmp	r3, r2
 8010db2:	dd07      	ble.n	8010dc4 <_dtoa_r+0xb64>
 8010db4:	4651      	mov	r1, sl
 8010db6:	2300      	movs	r3, #0
 8010db8:	220a      	movs	r2, #10
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f000 f8f0 	bl	8010fa0 <__multadd>
 8010dc0:	4682      	mov	sl, r0
 8010dc2:	e7ea      	b.n	8010d9a <_dtoa_r+0xb3a>
 8010dc4:	9b01      	ldr	r3, [sp, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	bfc8      	it	gt
 8010dca:	461d      	movgt	r5, r3
 8010dcc:	9b00      	ldr	r3, [sp, #0]
 8010dce:	bfd8      	it	le
 8010dd0:	2501      	movle	r5, #1
 8010dd2:	441d      	add	r5, r3
 8010dd4:	f04f 0800 	mov.w	r8, #0
 8010dd8:	4651      	mov	r1, sl
 8010dda:	2201      	movs	r2, #1
 8010ddc:	4620      	mov	r0, r4
 8010dde:	f000 fa8d 	bl	80112fc <__lshift>
 8010de2:	4631      	mov	r1, r6
 8010de4:	4682      	mov	sl, r0
 8010de6:	f000 faf5 	bl	80113d4 <__mcmp>
 8010dea:	2800      	cmp	r0, #0
 8010dec:	dc96      	bgt.n	8010d1c <_dtoa_r+0xabc>
 8010dee:	d102      	bne.n	8010df6 <_dtoa_r+0xb96>
 8010df0:	f019 0f01 	tst.w	r9, #1
 8010df4:	d192      	bne.n	8010d1c <_dtoa_r+0xabc>
 8010df6:	462b      	mov	r3, r5
 8010df8:	461d      	mov	r5, r3
 8010dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dfe:	2a30      	cmp	r2, #48	; 0x30
 8010e00:	d0fa      	beq.n	8010df8 <_dtoa_r+0xb98>
 8010e02:	e6dd      	b.n	8010bc0 <_dtoa_r+0x960>
 8010e04:	9a00      	ldr	r2, [sp, #0]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d189      	bne.n	8010d1e <_dtoa_r+0xabe>
 8010e0a:	f10b 0b01 	add.w	fp, fp, #1
 8010e0e:	2331      	movs	r3, #49	; 0x31
 8010e10:	e796      	b.n	8010d40 <_dtoa_r+0xae0>
 8010e12:	4b0a      	ldr	r3, [pc, #40]	; (8010e3c <_dtoa_r+0xbdc>)
 8010e14:	f7ff ba99 	b.w	801034a <_dtoa_r+0xea>
 8010e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f47f aa6d 	bne.w	80102fa <_dtoa_r+0x9a>
 8010e20:	4b07      	ldr	r3, [pc, #28]	; (8010e40 <_dtoa_r+0xbe0>)
 8010e22:	f7ff ba92 	b.w	801034a <_dtoa_r+0xea>
 8010e26:	9b01      	ldr	r3, [sp, #4]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	dcb5      	bgt.n	8010d98 <_dtoa_r+0xb38>
 8010e2c:	9b07      	ldr	r3, [sp, #28]
 8010e2e:	2b02      	cmp	r3, #2
 8010e30:	f73f aeb1 	bgt.w	8010b96 <_dtoa_r+0x936>
 8010e34:	e7b0      	b.n	8010d98 <_dtoa_r+0xb38>
 8010e36:	bf00      	nop
 8010e38:	0801255c 	.word	0x0801255c
 8010e3c:	080124bc 	.word	0x080124bc
 8010e40:	080124e0 	.word	0x080124e0

08010e44 <_free_r>:
 8010e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e46:	2900      	cmp	r1, #0
 8010e48:	d044      	beq.n	8010ed4 <_free_r+0x90>
 8010e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e4e:	9001      	str	r0, [sp, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f1a1 0404 	sub.w	r4, r1, #4
 8010e56:	bfb8      	it	lt
 8010e58:	18e4      	addlt	r4, r4, r3
 8010e5a:	f7fe fb69 	bl	800f530 <__malloc_lock>
 8010e5e:	4a1e      	ldr	r2, [pc, #120]	; (8010ed8 <_free_r+0x94>)
 8010e60:	9801      	ldr	r0, [sp, #4]
 8010e62:	6813      	ldr	r3, [r2, #0]
 8010e64:	b933      	cbnz	r3, 8010e74 <_free_r+0x30>
 8010e66:	6063      	str	r3, [r4, #4]
 8010e68:	6014      	str	r4, [r2, #0]
 8010e6a:	b003      	add	sp, #12
 8010e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e70:	f7fe bb64 	b.w	800f53c <__malloc_unlock>
 8010e74:	42a3      	cmp	r3, r4
 8010e76:	d908      	bls.n	8010e8a <_free_r+0x46>
 8010e78:	6825      	ldr	r5, [r4, #0]
 8010e7a:	1961      	adds	r1, r4, r5
 8010e7c:	428b      	cmp	r3, r1
 8010e7e:	bf01      	itttt	eq
 8010e80:	6819      	ldreq	r1, [r3, #0]
 8010e82:	685b      	ldreq	r3, [r3, #4]
 8010e84:	1949      	addeq	r1, r1, r5
 8010e86:	6021      	streq	r1, [r4, #0]
 8010e88:	e7ed      	b.n	8010e66 <_free_r+0x22>
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	b10b      	cbz	r3, 8010e94 <_free_r+0x50>
 8010e90:	42a3      	cmp	r3, r4
 8010e92:	d9fa      	bls.n	8010e8a <_free_r+0x46>
 8010e94:	6811      	ldr	r1, [r2, #0]
 8010e96:	1855      	adds	r5, r2, r1
 8010e98:	42a5      	cmp	r5, r4
 8010e9a:	d10b      	bne.n	8010eb4 <_free_r+0x70>
 8010e9c:	6824      	ldr	r4, [r4, #0]
 8010e9e:	4421      	add	r1, r4
 8010ea0:	1854      	adds	r4, r2, r1
 8010ea2:	42a3      	cmp	r3, r4
 8010ea4:	6011      	str	r1, [r2, #0]
 8010ea6:	d1e0      	bne.n	8010e6a <_free_r+0x26>
 8010ea8:	681c      	ldr	r4, [r3, #0]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	6053      	str	r3, [r2, #4]
 8010eae:	440c      	add	r4, r1
 8010eb0:	6014      	str	r4, [r2, #0]
 8010eb2:	e7da      	b.n	8010e6a <_free_r+0x26>
 8010eb4:	d902      	bls.n	8010ebc <_free_r+0x78>
 8010eb6:	230c      	movs	r3, #12
 8010eb8:	6003      	str	r3, [r0, #0]
 8010eba:	e7d6      	b.n	8010e6a <_free_r+0x26>
 8010ebc:	6825      	ldr	r5, [r4, #0]
 8010ebe:	1961      	adds	r1, r4, r5
 8010ec0:	428b      	cmp	r3, r1
 8010ec2:	bf04      	itt	eq
 8010ec4:	6819      	ldreq	r1, [r3, #0]
 8010ec6:	685b      	ldreq	r3, [r3, #4]
 8010ec8:	6063      	str	r3, [r4, #4]
 8010eca:	bf04      	itt	eq
 8010ecc:	1949      	addeq	r1, r1, r5
 8010ece:	6021      	streq	r1, [r4, #0]
 8010ed0:	6054      	str	r4, [r2, #4]
 8010ed2:	e7ca      	b.n	8010e6a <_free_r+0x26>
 8010ed4:	b003      	add	sp, #12
 8010ed6:	bd30      	pop	{r4, r5, pc}
 8010ed8:	20002268 	.word	0x20002268

08010edc <_Balloc>:
 8010edc:	b570      	push	{r4, r5, r6, lr}
 8010ede:	69c6      	ldr	r6, [r0, #28]
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	460d      	mov	r5, r1
 8010ee4:	b976      	cbnz	r6, 8010f04 <_Balloc+0x28>
 8010ee6:	2010      	movs	r0, #16
 8010ee8:	f7fe fa72 	bl	800f3d0 <malloc>
 8010eec:	4602      	mov	r2, r0
 8010eee:	61e0      	str	r0, [r4, #28]
 8010ef0:	b920      	cbnz	r0, 8010efc <_Balloc+0x20>
 8010ef2:	4b18      	ldr	r3, [pc, #96]	; (8010f54 <_Balloc+0x78>)
 8010ef4:	4818      	ldr	r0, [pc, #96]	; (8010f58 <_Balloc+0x7c>)
 8010ef6:	216b      	movs	r1, #107	; 0x6b
 8010ef8:	f000 fc1a 	bl	8011730 <__assert_func>
 8010efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f00:	6006      	str	r6, [r0, #0]
 8010f02:	60c6      	str	r6, [r0, #12]
 8010f04:	69e6      	ldr	r6, [r4, #28]
 8010f06:	68f3      	ldr	r3, [r6, #12]
 8010f08:	b183      	cbz	r3, 8010f2c <_Balloc+0x50>
 8010f0a:	69e3      	ldr	r3, [r4, #28]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f12:	b9b8      	cbnz	r0, 8010f44 <_Balloc+0x68>
 8010f14:	2101      	movs	r1, #1
 8010f16:	fa01 f605 	lsl.w	r6, r1, r5
 8010f1a:	1d72      	adds	r2, r6, #5
 8010f1c:	0092      	lsls	r2, r2, #2
 8010f1e:	4620      	mov	r0, r4
 8010f20:	f000 fc24 	bl	801176c <_calloc_r>
 8010f24:	b160      	cbz	r0, 8010f40 <_Balloc+0x64>
 8010f26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f2a:	e00e      	b.n	8010f4a <_Balloc+0x6e>
 8010f2c:	2221      	movs	r2, #33	; 0x21
 8010f2e:	2104      	movs	r1, #4
 8010f30:	4620      	mov	r0, r4
 8010f32:	f000 fc1b 	bl	801176c <_calloc_r>
 8010f36:	69e3      	ldr	r3, [r4, #28]
 8010f38:	60f0      	str	r0, [r6, #12]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d1e4      	bne.n	8010f0a <_Balloc+0x2e>
 8010f40:	2000      	movs	r0, #0
 8010f42:	bd70      	pop	{r4, r5, r6, pc}
 8010f44:	6802      	ldr	r2, [r0, #0]
 8010f46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f50:	e7f7      	b.n	8010f42 <_Balloc+0x66>
 8010f52:	bf00      	nop
 8010f54:	080124ed 	.word	0x080124ed
 8010f58:	0801256d 	.word	0x0801256d

08010f5c <_Bfree>:
 8010f5c:	b570      	push	{r4, r5, r6, lr}
 8010f5e:	69c6      	ldr	r6, [r0, #28]
 8010f60:	4605      	mov	r5, r0
 8010f62:	460c      	mov	r4, r1
 8010f64:	b976      	cbnz	r6, 8010f84 <_Bfree+0x28>
 8010f66:	2010      	movs	r0, #16
 8010f68:	f7fe fa32 	bl	800f3d0 <malloc>
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	61e8      	str	r0, [r5, #28]
 8010f70:	b920      	cbnz	r0, 8010f7c <_Bfree+0x20>
 8010f72:	4b09      	ldr	r3, [pc, #36]	; (8010f98 <_Bfree+0x3c>)
 8010f74:	4809      	ldr	r0, [pc, #36]	; (8010f9c <_Bfree+0x40>)
 8010f76:	218f      	movs	r1, #143	; 0x8f
 8010f78:	f000 fbda 	bl	8011730 <__assert_func>
 8010f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f80:	6006      	str	r6, [r0, #0]
 8010f82:	60c6      	str	r6, [r0, #12]
 8010f84:	b13c      	cbz	r4, 8010f96 <_Bfree+0x3a>
 8010f86:	69eb      	ldr	r3, [r5, #28]
 8010f88:	6862      	ldr	r2, [r4, #4]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f90:	6021      	str	r1, [r4, #0]
 8010f92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f96:	bd70      	pop	{r4, r5, r6, pc}
 8010f98:	080124ed 	.word	0x080124ed
 8010f9c:	0801256d 	.word	0x0801256d

08010fa0 <__multadd>:
 8010fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa4:	690d      	ldr	r5, [r1, #16]
 8010fa6:	4607      	mov	r7, r0
 8010fa8:	460c      	mov	r4, r1
 8010faa:	461e      	mov	r6, r3
 8010fac:	f101 0c14 	add.w	ip, r1, #20
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	f8dc 3000 	ldr.w	r3, [ip]
 8010fb6:	b299      	uxth	r1, r3
 8010fb8:	fb02 6101 	mla	r1, r2, r1, r6
 8010fbc:	0c1e      	lsrs	r6, r3, #16
 8010fbe:	0c0b      	lsrs	r3, r1, #16
 8010fc0:	fb02 3306 	mla	r3, r2, r6, r3
 8010fc4:	b289      	uxth	r1, r1
 8010fc6:	3001      	adds	r0, #1
 8010fc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010fcc:	4285      	cmp	r5, r0
 8010fce:	f84c 1b04 	str.w	r1, [ip], #4
 8010fd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010fd6:	dcec      	bgt.n	8010fb2 <__multadd+0x12>
 8010fd8:	b30e      	cbz	r6, 801101e <__multadd+0x7e>
 8010fda:	68a3      	ldr	r3, [r4, #8]
 8010fdc:	42ab      	cmp	r3, r5
 8010fde:	dc19      	bgt.n	8011014 <__multadd+0x74>
 8010fe0:	6861      	ldr	r1, [r4, #4]
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	3101      	adds	r1, #1
 8010fe6:	f7ff ff79 	bl	8010edc <_Balloc>
 8010fea:	4680      	mov	r8, r0
 8010fec:	b928      	cbnz	r0, 8010ffa <__multadd+0x5a>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	4b0c      	ldr	r3, [pc, #48]	; (8011024 <__multadd+0x84>)
 8010ff2:	480d      	ldr	r0, [pc, #52]	; (8011028 <__multadd+0x88>)
 8010ff4:	21ba      	movs	r1, #186	; 0xba
 8010ff6:	f000 fb9b 	bl	8011730 <__assert_func>
 8010ffa:	6922      	ldr	r2, [r4, #16]
 8010ffc:	3202      	adds	r2, #2
 8010ffe:	f104 010c 	add.w	r1, r4, #12
 8011002:	0092      	lsls	r2, r2, #2
 8011004:	300c      	adds	r0, #12
 8011006:	f7ff f895 	bl	8010134 <memcpy>
 801100a:	4621      	mov	r1, r4
 801100c:	4638      	mov	r0, r7
 801100e:	f7ff ffa5 	bl	8010f5c <_Bfree>
 8011012:	4644      	mov	r4, r8
 8011014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011018:	3501      	adds	r5, #1
 801101a:	615e      	str	r6, [r3, #20]
 801101c:	6125      	str	r5, [r4, #16]
 801101e:	4620      	mov	r0, r4
 8011020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011024:	0801255c 	.word	0x0801255c
 8011028:	0801256d 	.word	0x0801256d

0801102c <__hi0bits>:
 801102c:	0c03      	lsrs	r3, r0, #16
 801102e:	041b      	lsls	r3, r3, #16
 8011030:	b9d3      	cbnz	r3, 8011068 <__hi0bits+0x3c>
 8011032:	0400      	lsls	r0, r0, #16
 8011034:	2310      	movs	r3, #16
 8011036:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801103a:	bf04      	itt	eq
 801103c:	0200      	lsleq	r0, r0, #8
 801103e:	3308      	addeq	r3, #8
 8011040:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011044:	bf04      	itt	eq
 8011046:	0100      	lsleq	r0, r0, #4
 8011048:	3304      	addeq	r3, #4
 801104a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801104e:	bf04      	itt	eq
 8011050:	0080      	lsleq	r0, r0, #2
 8011052:	3302      	addeq	r3, #2
 8011054:	2800      	cmp	r0, #0
 8011056:	db05      	blt.n	8011064 <__hi0bits+0x38>
 8011058:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801105c:	f103 0301 	add.w	r3, r3, #1
 8011060:	bf08      	it	eq
 8011062:	2320      	moveq	r3, #32
 8011064:	4618      	mov	r0, r3
 8011066:	4770      	bx	lr
 8011068:	2300      	movs	r3, #0
 801106a:	e7e4      	b.n	8011036 <__hi0bits+0xa>

0801106c <__lo0bits>:
 801106c:	6803      	ldr	r3, [r0, #0]
 801106e:	f013 0207 	ands.w	r2, r3, #7
 8011072:	d00c      	beq.n	801108e <__lo0bits+0x22>
 8011074:	07d9      	lsls	r1, r3, #31
 8011076:	d422      	bmi.n	80110be <__lo0bits+0x52>
 8011078:	079a      	lsls	r2, r3, #30
 801107a:	bf49      	itett	mi
 801107c:	085b      	lsrmi	r3, r3, #1
 801107e:	089b      	lsrpl	r3, r3, #2
 8011080:	6003      	strmi	r3, [r0, #0]
 8011082:	2201      	movmi	r2, #1
 8011084:	bf5c      	itt	pl
 8011086:	6003      	strpl	r3, [r0, #0]
 8011088:	2202      	movpl	r2, #2
 801108a:	4610      	mov	r0, r2
 801108c:	4770      	bx	lr
 801108e:	b299      	uxth	r1, r3
 8011090:	b909      	cbnz	r1, 8011096 <__lo0bits+0x2a>
 8011092:	0c1b      	lsrs	r3, r3, #16
 8011094:	2210      	movs	r2, #16
 8011096:	b2d9      	uxtb	r1, r3
 8011098:	b909      	cbnz	r1, 801109e <__lo0bits+0x32>
 801109a:	3208      	adds	r2, #8
 801109c:	0a1b      	lsrs	r3, r3, #8
 801109e:	0719      	lsls	r1, r3, #28
 80110a0:	bf04      	itt	eq
 80110a2:	091b      	lsreq	r3, r3, #4
 80110a4:	3204      	addeq	r2, #4
 80110a6:	0799      	lsls	r1, r3, #30
 80110a8:	bf04      	itt	eq
 80110aa:	089b      	lsreq	r3, r3, #2
 80110ac:	3202      	addeq	r2, #2
 80110ae:	07d9      	lsls	r1, r3, #31
 80110b0:	d403      	bmi.n	80110ba <__lo0bits+0x4e>
 80110b2:	085b      	lsrs	r3, r3, #1
 80110b4:	f102 0201 	add.w	r2, r2, #1
 80110b8:	d003      	beq.n	80110c2 <__lo0bits+0x56>
 80110ba:	6003      	str	r3, [r0, #0]
 80110bc:	e7e5      	b.n	801108a <__lo0bits+0x1e>
 80110be:	2200      	movs	r2, #0
 80110c0:	e7e3      	b.n	801108a <__lo0bits+0x1e>
 80110c2:	2220      	movs	r2, #32
 80110c4:	e7e1      	b.n	801108a <__lo0bits+0x1e>
	...

080110c8 <__i2b>:
 80110c8:	b510      	push	{r4, lr}
 80110ca:	460c      	mov	r4, r1
 80110cc:	2101      	movs	r1, #1
 80110ce:	f7ff ff05 	bl	8010edc <_Balloc>
 80110d2:	4602      	mov	r2, r0
 80110d4:	b928      	cbnz	r0, 80110e2 <__i2b+0x1a>
 80110d6:	4b05      	ldr	r3, [pc, #20]	; (80110ec <__i2b+0x24>)
 80110d8:	4805      	ldr	r0, [pc, #20]	; (80110f0 <__i2b+0x28>)
 80110da:	f240 1145 	movw	r1, #325	; 0x145
 80110de:	f000 fb27 	bl	8011730 <__assert_func>
 80110e2:	2301      	movs	r3, #1
 80110e4:	6144      	str	r4, [r0, #20]
 80110e6:	6103      	str	r3, [r0, #16]
 80110e8:	bd10      	pop	{r4, pc}
 80110ea:	bf00      	nop
 80110ec:	0801255c 	.word	0x0801255c
 80110f0:	0801256d 	.word	0x0801256d

080110f4 <__multiply>:
 80110f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f8:	4691      	mov	r9, r2
 80110fa:	690a      	ldr	r2, [r1, #16]
 80110fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011100:	429a      	cmp	r2, r3
 8011102:	bfb8      	it	lt
 8011104:	460b      	movlt	r3, r1
 8011106:	460c      	mov	r4, r1
 8011108:	bfbc      	itt	lt
 801110a:	464c      	movlt	r4, r9
 801110c:	4699      	movlt	r9, r3
 801110e:	6927      	ldr	r7, [r4, #16]
 8011110:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011114:	68a3      	ldr	r3, [r4, #8]
 8011116:	6861      	ldr	r1, [r4, #4]
 8011118:	eb07 060a 	add.w	r6, r7, sl
 801111c:	42b3      	cmp	r3, r6
 801111e:	b085      	sub	sp, #20
 8011120:	bfb8      	it	lt
 8011122:	3101      	addlt	r1, #1
 8011124:	f7ff feda 	bl	8010edc <_Balloc>
 8011128:	b930      	cbnz	r0, 8011138 <__multiply+0x44>
 801112a:	4602      	mov	r2, r0
 801112c:	4b44      	ldr	r3, [pc, #272]	; (8011240 <__multiply+0x14c>)
 801112e:	4845      	ldr	r0, [pc, #276]	; (8011244 <__multiply+0x150>)
 8011130:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011134:	f000 fafc 	bl	8011730 <__assert_func>
 8011138:	f100 0514 	add.w	r5, r0, #20
 801113c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011140:	462b      	mov	r3, r5
 8011142:	2200      	movs	r2, #0
 8011144:	4543      	cmp	r3, r8
 8011146:	d321      	bcc.n	801118c <__multiply+0x98>
 8011148:	f104 0314 	add.w	r3, r4, #20
 801114c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011150:	f109 0314 	add.w	r3, r9, #20
 8011154:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011158:	9202      	str	r2, [sp, #8]
 801115a:	1b3a      	subs	r2, r7, r4
 801115c:	3a15      	subs	r2, #21
 801115e:	f022 0203 	bic.w	r2, r2, #3
 8011162:	3204      	adds	r2, #4
 8011164:	f104 0115 	add.w	r1, r4, #21
 8011168:	428f      	cmp	r7, r1
 801116a:	bf38      	it	cc
 801116c:	2204      	movcc	r2, #4
 801116e:	9201      	str	r2, [sp, #4]
 8011170:	9a02      	ldr	r2, [sp, #8]
 8011172:	9303      	str	r3, [sp, #12]
 8011174:	429a      	cmp	r2, r3
 8011176:	d80c      	bhi.n	8011192 <__multiply+0x9e>
 8011178:	2e00      	cmp	r6, #0
 801117a:	dd03      	ble.n	8011184 <__multiply+0x90>
 801117c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011180:	2b00      	cmp	r3, #0
 8011182:	d05b      	beq.n	801123c <__multiply+0x148>
 8011184:	6106      	str	r6, [r0, #16]
 8011186:	b005      	add	sp, #20
 8011188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801118c:	f843 2b04 	str.w	r2, [r3], #4
 8011190:	e7d8      	b.n	8011144 <__multiply+0x50>
 8011192:	f8b3 a000 	ldrh.w	sl, [r3]
 8011196:	f1ba 0f00 	cmp.w	sl, #0
 801119a:	d024      	beq.n	80111e6 <__multiply+0xf2>
 801119c:	f104 0e14 	add.w	lr, r4, #20
 80111a0:	46a9      	mov	r9, r5
 80111a2:	f04f 0c00 	mov.w	ip, #0
 80111a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80111aa:	f8d9 1000 	ldr.w	r1, [r9]
 80111ae:	fa1f fb82 	uxth.w	fp, r2
 80111b2:	b289      	uxth	r1, r1
 80111b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80111b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80111bc:	f8d9 2000 	ldr.w	r2, [r9]
 80111c0:	4461      	add	r1, ip
 80111c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80111c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80111ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80111ce:	b289      	uxth	r1, r1
 80111d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80111d4:	4577      	cmp	r7, lr
 80111d6:	f849 1b04 	str.w	r1, [r9], #4
 80111da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80111de:	d8e2      	bhi.n	80111a6 <__multiply+0xb2>
 80111e0:	9a01      	ldr	r2, [sp, #4]
 80111e2:	f845 c002 	str.w	ip, [r5, r2]
 80111e6:	9a03      	ldr	r2, [sp, #12]
 80111e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80111ec:	3304      	adds	r3, #4
 80111ee:	f1b9 0f00 	cmp.w	r9, #0
 80111f2:	d021      	beq.n	8011238 <__multiply+0x144>
 80111f4:	6829      	ldr	r1, [r5, #0]
 80111f6:	f104 0c14 	add.w	ip, r4, #20
 80111fa:	46ae      	mov	lr, r5
 80111fc:	f04f 0a00 	mov.w	sl, #0
 8011200:	f8bc b000 	ldrh.w	fp, [ip]
 8011204:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011208:	fb09 220b 	mla	r2, r9, fp, r2
 801120c:	4452      	add	r2, sl
 801120e:	b289      	uxth	r1, r1
 8011210:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011214:	f84e 1b04 	str.w	r1, [lr], #4
 8011218:	f85c 1b04 	ldr.w	r1, [ip], #4
 801121c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011220:	f8be 1000 	ldrh.w	r1, [lr]
 8011224:	fb09 110a 	mla	r1, r9, sl, r1
 8011228:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801122c:	4567      	cmp	r7, ip
 801122e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011232:	d8e5      	bhi.n	8011200 <__multiply+0x10c>
 8011234:	9a01      	ldr	r2, [sp, #4]
 8011236:	50a9      	str	r1, [r5, r2]
 8011238:	3504      	adds	r5, #4
 801123a:	e799      	b.n	8011170 <__multiply+0x7c>
 801123c:	3e01      	subs	r6, #1
 801123e:	e79b      	b.n	8011178 <__multiply+0x84>
 8011240:	0801255c 	.word	0x0801255c
 8011244:	0801256d 	.word	0x0801256d

08011248 <__pow5mult>:
 8011248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801124c:	4615      	mov	r5, r2
 801124e:	f012 0203 	ands.w	r2, r2, #3
 8011252:	4606      	mov	r6, r0
 8011254:	460f      	mov	r7, r1
 8011256:	d007      	beq.n	8011268 <__pow5mult+0x20>
 8011258:	4c25      	ldr	r4, [pc, #148]	; (80112f0 <__pow5mult+0xa8>)
 801125a:	3a01      	subs	r2, #1
 801125c:	2300      	movs	r3, #0
 801125e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011262:	f7ff fe9d 	bl	8010fa0 <__multadd>
 8011266:	4607      	mov	r7, r0
 8011268:	10ad      	asrs	r5, r5, #2
 801126a:	d03d      	beq.n	80112e8 <__pow5mult+0xa0>
 801126c:	69f4      	ldr	r4, [r6, #28]
 801126e:	b97c      	cbnz	r4, 8011290 <__pow5mult+0x48>
 8011270:	2010      	movs	r0, #16
 8011272:	f7fe f8ad 	bl	800f3d0 <malloc>
 8011276:	4602      	mov	r2, r0
 8011278:	61f0      	str	r0, [r6, #28]
 801127a:	b928      	cbnz	r0, 8011288 <__pow5mult+0x40>
 801127c:	4b1d      	ldr	r3, [pc, #116]	; (80112f4 <__pow5mult+0xac>)
 801127e:	481e      	ldr	r0, [pc, #120]	; (80112f8 <__pow5mult+0xb0>)
 8011280:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011284:	f000 fa54 	bl	8011730 <__assert_func>
 8011288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801128c:	6004      	str	r4, [r0, #0]
 801128e:	60c4      	str	r4, [r0, #12]
 8011290:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011298:	b94c      	cbnz	r4, 80112ae <__pow5mult+0x66>
 801129a:	f240 2171 	movw	r1, #625	; 0x271
 801129e:	4630      	mov	r0, r6
 80112a0:	f7ff ff12 	bl	80110c8 <__i2b>
 80112a4:	2300      	movs	r3, #0
 80112a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80112aa:	4604      	mov	r4, r0
 80112ac:	6003      	str	r3, [r0, #0]
 80112ae:	f04f 0900 	mov.w	r9, #0
 80112b2:	07eb      	lsls	r3, r5, #31
 80112b4:	d50a      	bpl.n	80112cc <__pow5mult+0x84>
 80112b6:	4639      	mov	r1, r7
 80112b8:	4622      	mov	r2, r4
 80112ba:	4630      	mov	r0, r6
 80112bc:	f7ff ff1a 	bl	80110f4 <__multiply>
 80112c0:	4639      	mov	r1, r7
 80112c2:	4680      	mov	r8, r0
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7ff fe49 	bl	8010f5c <_Bfree>
 80112ca:	4647      	mov	r7, r8
 80112cc:	106d      	asrs	r5, r5, #1
 80112ce:	d00b      	beq.n	80112e8 <__pow5mult+0xa0>
 80112d0:	6820      	ldr	r0, [r4, #0]
 80112d2:	b938      	cbnz	r0, 80112e4 <__pow5mult+0x9c>
 80112d4:	4622      	mov	r2, r4
 80112d6:	4621      	mov	r1, r4
 80112d8:	4630      	mov	r0, r6
 80112da:	f7ff ff0b 	bl	80110f4 <__multiply>
 80112de:	6020      	str	r0, [r4, #0]
 80112e0:	f8c0 9000 	str.w	r9, [r0]
 80112e4:	4604      	mov	r4, r0
 80112e6:	e7e4      	b.n	80112b2 <__pow5mult+0x6a>
 80112e8:	4638      	mov	r0, r7
 80112ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ee:	bf00      	nop
 80112f0:	080126b8 	.word	0x080126b8
 80112f4:	080124ed 	.word	0x080124ed
 80112f8:	0801256d 	.word	0x0801256d

080112fc <__lshift>:
 80112fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011300:	460c      	mov	r4, r1
 8011302:	6849      	ldr	r1, [r1, #4]
 8011304:	6923      	ldr	r3, [r4, #16]
 8011306:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801130a:	68a3      	ldr	r3, [r4, #8]
 801130c:	4607      	mov	r7, r0
 801130e:	4691      	mov	r9, r2
 8011310:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011314:	f108 0601 	add.w	r6, r8, #1
 8011318:	42b3      	cmp	r3, r6
 801131a:	db0b      	blt.n	8011334 <__lshift+0x38>
 801131c:	4638      	mov	r0, r7
 801131e:	f7ff fddd 	bl	8010edc <_Balloc>
 8011322:	4605      	mov	r5, r0
 8011324:	b948      	cbnz	r0, 801133a <__lshift+0x3e>
 8011326:	4602      	mov	r2, r0
 8011328:	4b28      	ldr	r3, [pc, #160]	; (80113cc <__lshift+0xd0>)
 801132a:	4829      	ldr	r0, [pc, #164]	; (80113d0 <__lshift+0xd4>)
 801132c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011330:	f000 f9fe 	bl	8011730 <__assert_func>
 8011334:	3101      	adds	r1, #1
 8011336:	005b      	lsls	r3, r3, #1
 8011338:	e7ee      	b.n	8011318 <__lshift+0x1c>
 801133a:	2300      	movs	r3, #0
 801133c:	f100 0114 	add.w	r1, r0, #20
 8011340:	f100 0210 	add.w	r2, r0, #16
 8011344:	4618      	mov	r0, r3
 8011346:	4553      	cmp	r3, sl
 8011348:	db33      	blt.n	80113b2 <__lshift+0xb6>
 801134a:	6920      	ldr	r0, [r4, #16]
 801134c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011350:	f104 0314 	add.w	r3, r4, #20
 8011354:	f019 091f 	ands.w	r9, r9, #31
 8011358:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801135c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011360:	d02b      	beq.n	80113ba <__lshift+0xbe>
 8011362:	f1c9 0e20 	rsb	lr, r9, #32
 8011366:	468a      	mov	sl, r1
 8011368:	2200      	movs	r2, #0
 801136a:	6818      	ldr	r0, [r3, #0]
 801136c:	fa00 f009 	lsl.w	r0, r0, r9
 8011370:	4310      	orrs	r0, r2
 8011372:	f84a 0b04 	str.w	r0, [sl], #4
 8011376:	f853 2b04 	ldr.w	r2, [r3], #4
 801137a:	459c      	cmp	ip, r3
 801137c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011380:	d8f3      	bhi.n	801136a <__lshift+0x6e>
 8011382:	ebac 0304 	sub.w	r3, ip, r4
 8011386:	3b15      	subs	r3, #21
 8011388:	f023 0303 	bic.w	r3, r3, #3
 801138c:	3304      	adds	r3, #4
 801138e:	f104 0015 	add.w	r0, r4, #21
 8011392:	4584      	cmp	ip, r0
 8011394:	bf38      	it	cc
 8011396:	2304      	movcc	r3, #4
 8011398:	50ca      	str	r2, [r1, r3]
 801139a:	b10a      	cbz	r2, 80113a0 <__lshift+0xa4>
 801139c:	f108 0602 	add.w	r6, r8, #2
 80113a0:	3e01      	subs	r6, #1
 80113a2:	4638      	mov	r0, r7
 80113a4:	612e      	str	r6, [r5, #16]
 80113a6:	4621      	mov	r1, r4
 80113a8:	f7ff fdd8 	bl	8010f5c <_Bfree>
 80113ac:	4628      	mov	r0, r5
 80113ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80113b6:	3301      	adds	r3, #1
 80113b8:	e7c5      	b.n	8011346 <__lshift+0x4a>
 80113ba:	3904      	subs	r1, #4
 80113bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80113c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80113c4:	459c      	cmp	ip, r3
 80113c6:	d8f9      	bhi.n	80113bc <__lshift+0xc0>
 80113c8:	e7ea      	b.n	80113a0 <__lshift+0xa4>
 80113ca:	bf00      	nop
 80113cc:	0801255c 	.word	0x0801255c
 80113d0:	0801256d 	.word	0x0801256d

080113d4 <__mcmp>:
 80113d4:	b530      	push	{r4, r5, lr}
 80113d6:	6902      	ldr	r2, [r0, #16]
 80113d8:	690c      	ldr	r4, [r1, #16]
 80113da:	1b12      	subs	r2, r2, r4
 80113dc:	d10e      	bne.n	80113fc <__mcmp+0x28>
 80113de:	f100 0314 	add.w	r3, r0, #20
 80113e2:	3114      	adds	r1, #20
 80113e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80113e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80113ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80113f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80113f4:	42a5      	cmp	r5, r4
 80113f6:	d003      	beq.n	8011400 <__mcmp+0x2c>
 80113f8:	d305      	bcc.n	8011406 <__mcmp+0x32>
 80113fa:	2201      	movs	r2, #1
 80113fc:	4610      	mov	r0, r2
 80113fe:	bd30      	pop	{r4, r5, pc}
 8011400:	4283      	cmp	r3, r0
 8011402:	d3f3      	bcc.n	80113ec <__mcmp+0x18>
 8011404:	e7fa      	b.n	80113fc <__mcmp+0x28>
 8011406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801140a:	e7f7      	b.n	80113fc <__mcmp+0x28>

0801140c <__mdiff>:
 801140c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011410:	460c      	mov	r4, r1
 8011412:	4606      	mov	r6, r0
 8011414:	4611      	mov	r1, r2
 8011416:	4620      	mov	r0, r4
 8011418:	4690      	mov	r8, r2
 801141a:	f7ff ffdb 	bl	80113d4 <__mcmp>
 801141e:	1e05      	subs	r5, r0, #0
 8011420:	d110      	bne.n	8011444 <__mdiff+0x38>
 8011422:	4629      	mov	r1, r5
 8011424:	4630      	mov	r0, r6
 8011426:	f7ff fd59 	bl	8010edc <_Balloc>
 801142a:	b930      	cbnz	r0, 801143a <__mdiff+0x2e>
 801142c:	4b3a      	ldr	r3, [pc, #232]	; (8011518 <__mdiff+0x10c>)
 801142e:	4602      	mov	r2, r0
 8011430:	f240 2137 	movw	r1, #567	; 0x237
 8011434:	4839      	ldr	r0, [pc, #228]	; (801151c <__mdiff+0x110>)
 8011436:	f000 f97b 	bl	8011730 <__assert_func>
 801143a:	2301      	movs	r3, #1
 801143c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011444:	bfa4      	itt	ge
 8011446:	4643      	movge	r3, r8
 8011448:	46a0      	movge	r8, r4
 801144a:	4630      	mov	r0, r6
 801144c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011450:	bfa6      	itte	ge
 8011452:	461c      	movge	r4, r3
 8011454:	2500      	movge	r5, #0
 8011456:	2501      	movlt	r5, #1
 8011458:	f7ff fd40 	bl	8010edc <_Balloc>
 801145c:	b920      	cbnz	r0, 8011468 <__mdiff+0x5c>
 801145e:	4b2e      	ldr	r3, [pc, #184]	; (8011518 <__mdiff+0x10c>)
 8011460:	4602      	mov	r2, r0
 8011462:	f240 2145 	movw	r1, #581	; 0x245
 8011466:	e7e5      	b.n	8011434 <__mdiff+0x28>
 8011468:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801146c:	6926      	ldr	r6, [r4, #16]
 801146e:	60c5      	str	r5, [r0, #12]
 8011470:	f104 0914 	add.w	r9, r4, #20
 8011474:	f108 0514 	add.w	r5, r8, #20
 8011478:	f100 0e14 	add.w	lr, r0, #20
 801147c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011480:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011484:	f108 0210 	add.w	r2, r8, #16
 8011488:	46f2      	mov	sl, lr
 801148a:	2100      	movs	r1, #0
 801148c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011490:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011494:	fa11 f88b 	uxtah	r8, r1, fp
 8011498:	b299      	uxth	r1, r3
 801149a:	0c1b      	lsrs	r3, r3, #16
 801149c:	eba8 0801 	sub.w	r8, r8, r1
 80114a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80114a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80114a8:	fa1f f888 	uxth.w	r8, r8
 80114ac:	1419      	asrs	r1, r3, #16
 80114ae:	454e      	cmp	r6, r9
 80114b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80114b4:	f84a 3b04 	str.w	r3, [sl], #4
 80114b8:	d8e8      	bhi.n	801148c <__mdiff+0x80>
 80114ba:	1b33      	subs	r3, r6, r4
 80114bc:	3b15      	subs	r3, #21
 80114be:	f023 0303 	bic.w	r3, r3, #3
 80114c2:	3304      	adds	r3, #4
 80114c4:	3415      	adds	r4, #21
 80114c6:	42a6      	cmp	r6, r4
 80114c8:	bf38      	it	cc
 80114ca:	2304      	movcc	r3, #4
 80114cc:	441d      	add	r5, r3
 80114ce:	4473      	add	r3, lr
 80114d0:	469e      	mov	lr, r3
 80114d2:	462e      	mov	r6, r5
 80114d4:	4566      	cmp	r6, ip
 80114d6:	d30e      	bcc.n	80114f6 <__mdiff+0xea>
 80114d8:	f10c 0203 	add.w	r2, ip, #3
 80114dc:	1b52      	subs	r2, r2, r5
 80114de:	f022 0203 	bic.w	r2, r2, #3
 80114e2:	3d03      	subs	r5, #3
 80114e4:	45ac      	cmp	ip, r5
 80114e6:	bf38      	it	cc
 80114e8:	2200      	movcc	r2, #0
 80114ea:	4413      	add	r3, r2
 80114ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80114f0:	b17a      	cbz	r2, 8011512 <__mdiff+0x106>
 80114f2:	6107      	str	r7, [r0, #16]
 80114f4:	e7a4      	b.n	8011440 <__mdiff+0x34>
 80114f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80114fa:	fa11 f288 	uxtah	r2, r1, r8
 80114fe:	1414      	asrs	r4, r2, #16
 8011500:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011504:	b292      	uxth	r2, r2
 8011506:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801150a:	f84e 2b04 	str.w	r2, [lr], #4
 801150e:	1421      	asrs	r1, r4, #16
 8011510:	e7e0      	b.n	80114d4 <__mdiff+0xc8>
 8011512:	3f01      	subs	r7, #1
 8011514:	e7ea      	b.n	80114ec <__mdiff+0xe0>
 8011516:	bf00      	nop
 8011518:	0801255c 	.word	0x0801255c
 801151c:	0801256d 	.word	0x0801256d

08011520 <__d2b>:
 8011520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011524:	460f      	mov	r7, r1
 8011526:	2101      	movs	r1, #1
 8011528:	ec59 8b10 	vmov	r8, r9, d0
 801152c:	4616      	mov	r6, r2
 801152e:	f7ff fcd5 	bl	8010edc <_Balloc>
 8011532:	4604      	mov	r4, r0
 8011534:	b930      	cbnz	r0, 8011544 <__d2b+0x24>
 8011536:	4602      	mov	r2, r0
 8011538:	4b24      	ldr	r3, [pc, #144]	; (80115cc <__d2b+0xac>)
 801153a:	4825      	ldr	r0, [pc, #148]	; (80115d0 <__d2b+0xb0>)
 801153c:	f240 310f 	movw	r1, #783	; 0x30f
 8011540:	f000 f8f6 	bl	8011730 <__assert_func>
 8011544:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801154c:	bb2d      	cbnz	r5, 801159a <__d2b+0x7a>
 801154e:	9301      	str	r3, [sp, #4]
 8011550:	f1b8 0300 	subs.w	r3, r8, #0
 8011554:	d026      	beq.n	80115a4 <__d2b+0x84>
 8011556:	4668      	mov	r0, sp
 8011558:	9300      	str	r3, [sp, #0]
 801155a:	f7ff fd87 	bl	801106c <__lo0bits>
 801155e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011562:	b1e8      	cbz	r0, 80115a0 <__d2b+0x80>
 8011564:	f1c0 0320 	rsb	r3, r0, #32
 8011568:	fa02 f303 	lsl.w	r3, r2, r3
 801156c:	430b      	orrs	r3, r1
 801156e:	40c2      	lsrs	r2, r0
 8011570:	6163      	str	r3, [r4, #20]
 8011572:	9201      	str	r2, [sp, #4]
 8011574:	9b01      	ldr	r3, [sp, #4]
 8011576:	61a3      	str	r3, [r4, #24]
 8011578:	2b00      	cmp	r3, #0
 801157a:	bf14      	ite	ne
 801157c:	2202      	movne	r2, #2
 801157e:	2201      	moveq	r2, #1
 8011580:	6122      	str	r2, [r4, #16]
 8011582:	b1bd      	cbz	r5, 80115b4 <__d2b+0x94>
 8011584:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011588:	4405      	add	r5, r0
 801158a:	603d      	str	r5, [r7, #0]
 801158c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011590:	6030      	str	r0, [r6, #0]
 8011592:	4620      	mov	r0, r4
 8011594:	b003      	add	sp, #12
 8011596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801159a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801159e:	e7d6      	b.n	801154e <__d2b+0x2e>
 80115a0:	6161      	str	r1, [r4, #20]
 80115a2:	e7e7      	b.n	8011574 <__d2b+0x54>
 80115a4:	a801      	add	r0, sp, #4
 80115a6:	f7ff fd61 	bl	801106c <__lo0bits>
 80115aa:	9b01      	ldr	r3, [sp, #4]
 80115ac:	6163      	str	r3, [r4, #20]
 80115ae:	3020      	adds	r0, #32
 80115b0:	2201      	movs	r2, #1
 80115b2:	e7e5      	b.n	8011580 <__d2b+0x60>
 80115b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80115b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80115bc:	6038      	str	r0, [r7, #0]
 80115be:	6918      	ldr	r0, [r3, #16]
 80115c0:	f7ff fd34 	bl	801102c <__hi0bits>
 80115c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80115c8:	e7e2      	b.n	8011590 <__d2b+0x70>
 80115ca:	bf00      	nop
 80115cc:	0801255c 	.word	0x0801255c
 80115d0:	0801256d 	.word	0x0801256d

080115d4 <__sflush_r>:
 80115d4:	898a      	ldrh	r2, [r1, #12]
 80115d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115da:	4605      	mov	r5, r0
 80115dc:	0710      	lsls	r0, r2, #28
 80115de:	460c      	mov	r4, r1
 80115e0:	d458      	bmi.n	8011694 <__sflush_r+0xc0>
 80115e2:	684b      	ldr	r3, [r1, #4]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	dc05      	bgt.n	80115f4 <__sflush_r+0x20>
 80115e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	dc02      	bgt.n	80115f4 <__sflush_r+0x20>
 80115ee:	2000      	movs	r0, #0
 80115f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115f6:	2e00      	cmp	r6, #0
 80115f8:	d0f9      	beq.n	80115ee <__sflush_r+0x1a>
 80115fa:	2300      	movs	r3, #0
 80115fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011600:	682f      	ldr	r7, [r5, #0]
 8011602:	6a21      	ldr	r1, [r4, #32]
 8011604:	602b      	str	r3, [r5, #0]
 8011606:	d032      	beq.n	801166e <__sflush_r+0x9a>
 8011608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801160a:	89a3      	ldrh	r3, [r4, #12]
 801160c:	075a      	lsls	r2, r3, #29
 801160e:	d505      	bpl.n	801161c <__sflush_r+0x48>
 8011610:	6863      	ldr	r3, [r4, #4]
 8011612:	1ac0      	subs	r0, r0, r3
 8011614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011616:	b10b      	cbz	r3, 801161c <__sflush_r+0x48>
 8011618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801161a:	1ac0      	subs	r0, r0, r3
 801161c:	2300      	movs	r3, #0
 801161e:	4602      	mov	r2, r0
 8011620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011622:	6a21      	ldr	r1, [r4, #32]
 8011624:	4628      	mov	r0, r5
 8011626:	47b0      	blx	r6
 8011628:	1c43      	adds	r3, r0, #1
 801162a:	89a3      	ldrh	r3, [r4, #12]
 801162c:	d106      	bne.n	801163c <__sflush_r+0x68>
 801162e:	6829      	ldr	r1, [r5, #0]
 8011630:	291d      	cmp	r1, #29
 8011632:	d82b      	bhi.n	801168c <__sflush_r+0xb8>
 8011634:	4a29      	ldr	r2, [pc, #164]	; (80116dc <__sflush_r+0x108>)
 8011636:	410a      	asrs	r2, r1
 8011638:	07d6      	lsls	r6, r2, #31
 801163a:	d427      	bmi.n	801168c <__sflush_r+0xb8>
 801163c:	2200      	movs	r2, #0
 801163e:	6062      	str	r2, [r4, #4]
 8011640:	04d9      	lsls	r1, r3, #19
 8011642:	6922      	ldr	r2, [r4, #16]
 8011644:	6022      	str	r2, [r4, #0]
 8011646:	d504      	bpl.n	8011652 <__sflush_r+0x7e>
 8011648:	1c42      	adds	r2, r0, #1
 801164a:	d101      	bne.n	8011650 <__sflush_r+0x7c>
 801164c:	682b      	ldr	r3, [r5, #0]
 801164e:	b903      	cbnz	r3, 8011652 <__sflush_r+0x7e>
 8011650:	6560      	str	r0, [r4, #84]	; 0x54
 8011652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011654:	602f      	str	r7, [r5, #0]
 8011656:	2900      	cmp	r1, #0
 8011658:	d0c9      	beq.n	80115ee <__sflush_r+0x1a>
 801165a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801165e:	4299      	cmp	r1, r3
 8011660:	d002      	beq.n	8011668 <__sflush_r+0x94>
 8011662:	4628      	mov	r0, r5
 8011664:	f7ff fbee 	bl	8010e44 <_free_r>
 8011668:	2000      	movs	r0, #0
 801166a:	6360      	str	r0, [r4, #52]	; 0x34
 801166c:	e7c0      	b.n	80115f0 <__sflush_r+0x1c>
 801166e:	2301      	movs	r3, #1
 8011670:	4628      	mov	r0, r5
 8011672:	47b0      	blx	r6
 8011674:	1c41      	adds	r1, r0, #1
 8011676:	d1c8      	bne.n	801160a <__sflush_r+0x36>
 8011678:	682b      	ldr	r3, [r5, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d0c5      	beq.n	801160a <__sflush_r+0x36>
 801167e:	2b1d      	cmp	r3, #29
 8011680:	d001      	beq.n	8011686 <__sflush_r+0xb2>
 8011682:	2b16      	cmp	r3, #22
 8011684:	d101      	bne.n	801168a <__sflush_r+0xb6>
 8011686:	602f      	str	r7, [r5, #0]
 8011688:	e7b1      	b.n	80115ee <__sflush_r+0x1a>
 801168a:	89a3      	ldrh	r3, [r4, #12]
 801168c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011690:	81a3      	strh	r3, [r4, #12]
 8011692:	e7ad      	b.n	80115f0 <__sflush_r+0x1c>
 8011694:	690f      	ldr	r7, [r1, #16]
 8011696:	2f00      	cmp	r7, #0
 8011698:	d0a9      	beq.n	80115ee <__sflush_r+0x1a>
 801169a:	0793      	lsls	r3, r2, #30
 801169c:	680e      	ldr	r6, [r1, #0]
 801169e:	bf08      	it	eq
 80116a0:	694b      	ldreq	r3, [r1, #20]
 80116a2:	600f      	str	r7, [r1, #0]
 80116a4:	bf18      	it	ne
 80116a6:	2300      	movne	r3, #0
 80116a8:	eba6 0807 	sub.w	r8, r6, r7
 80116ac:	608b      	str	r3, [r1, #8]
 80116ae:	f1b8 0f00 	cmp.w	r8, #0
 80116b2:	dd9c      	ble.n	80115ee <__sflush_r+0x1a>
 80116b4:	6a21      	ldr	r1, [r4, #32]
 80116b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116b8:	4643      	mov	r3, r8
 80116ba:	463a      	mov	r2, r7
 80116bc:	4628      	mov	r0, r5
 80116be:	47b0      	blx	r6
 80116c0:	2800      	cmp	r0, #0
 80116c2:	dc06      	bgt.n	80116d2 <__sflush_r+0xfe>
 80116c4:	89a3      	ldrh	r3, [r4, #12]
 80116c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116ca:	81a3      	strh	r3, [r4, #12]
 80116cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116d0:	e78e      	b.n	80115f0 <__sflush_r+0x1c>
 80116d2:	4407      	add	r7, r0
 80116d4:	eba8 0800 	sub.w	r8, r8, r0
 80116d8:	e7e9      	b.n	80116ae <__sflush_r+0xda>
 80116da:	bf00      	nop
 80116dc:	dfbffffe 	.word	0xdfbffffe

080116e0 <_fflush_r>:
 80116e0:	b538      	push	{r3, r4, r5, lr}
 80116e2:	690b      	ldr	r3, [r1, #16]
 80116e4:	4605      	mov	r5, r0
 80116e6:	460c      	mov	r4, r1
 80116e8:	b913      	cbnz	r3, 80116f0 <_fflush_r+0x10>
 80116ea:	2500      	movs	r5, #0
 80116ec:	4628      	mov	r0, r5
 80116ee:	bd38      	pop	{r3, r4, r5, pc}
 80116f0:	b118      	cbz	r0, 80116fa <_fflush_r+0x1a>
 80116f2:	6a03      	ldr	r3, [r0, #32]
 80116f4:	b90b      	cbnz	r3, 80116fa <_fflush_r+0x1a>
 80116f6:	f7fe fc07 	bl	800ff08 <__sinit>
 80116fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d0f3      	beq.n	80116ea <_fflush_r+0xa>
 8011702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011704:	07d0      	lsls	r0, r2, #31
 8011706:	d404      	bmi.n	8011712 <_fflush_r+0x32>
 8011708:	0599      	lsls	r1, r3, #22
 801170a:	d402      	bmi.n	8011712 <_fflush_r+0x32>
 801170c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801170e:	f7fe fd0f 	bl	8010130 <__retarget_lock_acquire_recursive>
 8011712:	4628      	mov	r0, r5
 8011714:	4621      	mov	r1, r4
 8011716:	f7ff ff5d 	bl	80115d4 <__sflush_r>
 801171a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801171c:	07da      	lsls	r2, r3, #31
 801171e:	4605      	mov	r5, r0
 8011720:	d4e4      	bmi.n	80116ec <_fflush_r+0xc>
 8011722:	89a3      	ldrh	r3, [r4, #12]
 8011724:	059b      	lsls	r3, r3, #22
 8011726:	d4e1      	bmi.n	80116ec <_fflush_r+0xc>
 8011728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801172a:	f7fe fd02 	bl	8010132 <__retarget_lock_release_recursive>
 801172e:	e7dd      	b.n	80116ec <_fflush_r+0xc>

08011730 <__assert_func>:
 8011730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011732:	4614      	mov	r4, r2
 8011734:	461a      	mov	r2, r3
 8011736:	4b09      	ldr	r3, [pc, #36]	; (801175c <__assert_func+0x2c>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	4605      	mov	r5, r0
 801173c:	68d8      	ldr	r0, [r3, #12]
 801173e:	b14c      	cbz	r4, 8011754 <__assert_func+0x24>
 8011740:	4b07      	ldr	r3, [pc, #28]	; (8011760 <__assert_func+0x30>)
 8011742:	9100      	str	r1, [sp, #0]
 8011744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011748:	4906      	ldr	r1, [pc, #24]	; (8011764 <__assert_func+0x34>)
 801174a:	462b      	mov	r3, r5
 801174c:	f000 f844 	bl	80117d8 <fiprintf>
 8011750:	f000 f854 	bl	80117fc <abort>
 8011754:	4b04      	ldr	r3, [pc, #16]	; (8011768 <__assert_func+0x38>)
 8011756:	461c      	mov	r4, r3
 8011758:	e7f3      	b.n	8011742 <__assert_func+0x12>
 801175a:	bf00      	nop
 801175c:	20000178 	.word	0x20000178
 8011760:	080126ce 	.word	0x080126ce
 8011764:	080126db 	.word	0x080126db
 8011768:	08012709 	.word	0x08012709

0801176c <_calloc_r>:
 801176c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801176e:	fba1 2402 	umull	r2, r4, r1, r2
 8011772:	b94c      	cbnz	r4, 8011788 <_calloc_r+0x1c>
 8011774:	4611      	mov	r1, r2
 8011776:	9201      	str	r2, [sp, #4]
 8011778:	f7fd fe5a 	bl	800f430 <_malloc_r>
 801177c:	9a01      	ldr	r2, [sp, #4]
 801177e:	4605      	mov	r5, r0
 8011780:	b930      	cbnz	r0, 8011790 <_calloc_r+0x24>
 8011782:	4628      	mov	r0, r5
 8011784:	b003      	add	sp, #12
 8011786:	bd30      	pop	{r4, r5, pc}
 8011788:	220c      	movs	r2, #12
 801178a:	6002      	str	r2, [r0, #0]
 801178c:	2500      	movs	r5, #0
 801178e:	e7f8      	b.n	8011782 <_calloc_r+0x16>
 8011790:	4621      	mov	r1, r4
 8011792:	f7fe fc32 	bl	800fffa <memset>
 8011796:	e7f4      	b.n	8011782 <_calloc_r+0x16>

08011798 <__ascii_mbtowc>:
 8011798:	b082      	sub	sp, #8
 801179a:	b901      	cbnz	r1, 801179e <__ascii_mbtowc+0x6>
 801179c:	a901      	add	r1, sp, #4
 801179e:	b142      	cbz	r2, 80117b2 <__ascii_mbtowc+0x1a>
 80117a0:	b14b      	cbz	r3, 80117b6 <__ascii_mbtowc+0x1e>
 80117a2:	7813      	ldrb	r3, [r2, #0]
 80117a4:	600b      	str	r3, [r1, #0]
 80117a6:	7812      	ldrb	r2, [r2, #0]
 80117a8:	1e10      	subs	r0, r2, #0
 80117aa:	bf18      	it	ne
 80117ac:	2001      	movne	r0, #1
 80117ae:	b002      	add	sp, #8
 80117b0:	4770      	bx	lr
 80117b2:	4610      	mov	r0, r2
 80117b4:	e7fb      	b.n	80117ae <__ascii_mbtowc+0x16>
 80117b6:	f06f 0001 	mvn.w	r0, #1
 80117ba:	e7f8      	b.n	80117ae <__ascii_mbtowc+0x16>

080117bc <__ascii_wctomb>:
 80117bc:	b149      	cbz	r1, 80117d2 <__ascii_wctomb+0x16>
 80117be:	2aff      	cmp	r2, #255	; 0xff
 80117c0:	bf85      	ittet	hi
 80117c2:	238a      	movhi	r3, #138	; 0x8a
 80117c4:	6003      	strhi	r3, [r0, #0]
 80117c6:	700a      	strbls	r2, [r1, #0]
 80117c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80117cc:	bf98      	it	ls
 80117ce:	2001      	movls	r0, #1
 80117d0:	4770      	bx	lr
 80117d2:	4608      	mov	r0, r1
 80117d4:	4770      	bx	lr
	...

080117d8 <fiprintf>:
 80117d8:	b40e      	push	{r1, r2, r3}
 80117da:	b503      	push	{r0, r1, lr}
 80117dc:	4601      	mov	r1, r0
 80117de:	ab03      	add	r3, sp, #12
 80117e0:	4805      	ldr	r0, [pc, #20]	; (80117f8 <fiprintf+0x20>)
 80117e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80117e6:	6800      	ldr	r0, [r0, #0]
 80117e8:	9301      	str	r3, [sp, #4]
 80117ea:	f000 f837 	bl	801185c <_vfiprintf_r>
 80117ee:	b002      	add	sp, #8
 80117f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80117f4:	b003      	add	sp, #12
 80117f6:	4770      	bx	lr
 80117f8:	20000178 	.word	0x20000178

080117fc <abort>:
 80117fc:	b508      	push	{r3, lr}
 80117fe:	2006      	movs	r0, #6
 8011800:	f000 fa04 	bl	8011c0c <raise>
 8011804:	2001      	movs	r0, #1
 8011806:	f7f0 fcc1 	bl	800218c <_exit>

0801180a <__sfputc_r>:
 801180a:	6893      	ldr	r3, [r2, #8]
 801180c:	3b01      	subs	r3, #1
 801180e:	2b00      	cmp	r3, #0
 8011810:	b410      	push	{r4}
 8011812:	6093      	str	r3, [r2, #8]
 8011814:	da08      	bge.n	8011828 <__sfputc_r+0x1e>
 8011816:	6994      	ldr	r4, [r2, #24]
 8011818:	42a3      	cmp	r3, r4
 801181a:	db01      	blt.n	8011820 <__sfputc_r+0x16>
 801181c:	290a      	cmp	r1, #10
 801181e:	d103      	bne.n	8011828 <__sfputc_r+0x1e>
 8011820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011824:	f000 b934 	b.w	8011a90 <__swbuf_r>
 8011828:	6813      	ldr	r3, [r2, #0]
 801182a:	1c58      	adds	r0, r3, #1
 801182c:	6010      	str	r0, [r2, #0]
 801182e:	7019      	strb	r1, [r3, #0]
 8011830:	4608      	mov	r0, r1
 8011832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011836:	4770      	bx	lr

08011838 <__sfputs_r>:
 8011838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801183a:	4606      	mov	r6, r0
 801183c:	460f      	mov	r7, r1
 801183e:	4614      	mov	r4, r2
 8011840:	18d5      	adds	r5, r2, r3
 8011842:	42ac      	cmp	r4, r5
 8011844:	d101      	bne.n	801184a <__sfputs_r+0x12>
 8011846:	2000      	movs	r0, #0
 8011848:	e007      	b.n	801185a <__sfputs_r+0x22>
 801184a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801184e:	463a      	mov	r2, r7
 8011850:	4630      	mov	r0, r6
 8011852:	f7ff ffda 	bl	801180a <__sfputc_r>
 8011856:	1c43      	adds	r3, r0, #1
 8011858:	d1f3      	bne.n	8011842 <__sfputs_r+0xa>
 801185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801185c <_vfiprintf_r>:
 801185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011860:	460d      	mov	r5, r1
 8011862:	b09d      	sub	sp, #116	; 0x74
 8011864:	4614      	mov	r4, r2
 8011866:	4698      	mov	r8, r3
 8011868:	4606      	mov	r6, r0
 801186a:	b118      	cbz	r0, 8011874 <_vfiprintf_r+0x18>
 801186c:	6a03      	ldr	r3, [r0, #32]
 801186e:	b90b      	cbnz	r3, 8011874 <_vfiprintf_r+0x18>
 8011870:	f7fe fb4a 	bl	800ff08 <__sinit>
 8011874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011876:	07d9      	lsls	r1, r3, #31
 8011878:	d405      	bmi.n	8011886 <_vfiprintf_r+0x2a>
 801187a:	89ab      	ldrh	r3, [r5, #12]
 801187c:	059a      	lsls	r2, r3, #22
 801187e:	d402      	bmi.n	8011886 <_vfiprintf_r+0x2a>
 8011880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011882:	f7fe fc55 	bl	8010130 <__retarget_lock_acquire_recursive>
 8011886:	89ab      	ldrh	r3, [r5, #12]
 8011888:	071b      	lsls	r3, r3, #28
 801188a:	d501      	bpl.n	8011890 <_vfiprintf_r+0x34>
 801188c:	692b      	ldr	r3, [r5, #16]
 801188e:	b99b      	cbnz	r3, 80118b8 <_vfiprintf_r+0x5c>
 8011890:	4629      	mov	r1, r5
 8011892:	4630      	mov	r0, r6
 8011894:	f000 f93a 	bl	8011b0c <__swsetup_r>
 8011898:	b170      	cbz	r0, 80118b8 <_vfiprintf_r+0x5c>
 801189a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801189c:	07dc      	lsls	r4, r3, #31
 801189e:	d504      	bpl.n	80118aa <_vfiprintf_r+0x4e>
 80118a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118a4:	b01d      	add	sp, #116	; 0x74
 80118a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118aa:	89ab      	ldrh	r3, [r5, #12]
 80118ac:	0598      	lsls	r0, r3, #22
 80118ae:	d4f7      	bmi.n	80118a0 <_vfiprintf_r+0x44>
 80118b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118b2:	f7fe fc3e 	bl	8010132 <__retarget_lock_release_recursive>
 80118b6:	e7f3      	b.n	80118a0 <_vfiprintf_r+0x44>
 80118b8:	2300      	movs	r3, #0
 80118ba:	9309      	str	r3, [sp, #36]	; 0x24
 80118bc:	2320      	movs	r3, #32
 80118be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80118c6:	2330      	movs	r3, #48	; 0x30
 80118c8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011a7c <_vfiprintf_r+0x220>
 80118cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118d0:	f04f 0901 	mov.w	r9, #1
 80118d4:	4623      	mov	r3, r4
 80118d6:	469a      	mov	sl, r3
 80118d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118dc:	b10a      	cbz	r2, 80118e2 <_vfiprintf_r+0x86>
 80118de:	2a25      	cmp	r2, #37	; 0x25
 80118e0:	d1f9      	bne.n	80118d6 <_vfiprintf_r+0x7a>
 80118e2:	ebba 0b04 	subs.w	fp, sl, r4
 80118e6:	d00b      	beq.n	8011900 <_vfiprintf_r+0xa4>
 80118e8:	465b      	mov	r3, fp
 80118ea:	4622      	mov	r2, r4
 80118ec:	4629      	mov	r1, r5
 80118ee:	4630      	mov	r0, r6
 80118f0:	f7ff ffa2 	bl	8011838 <__sfputs_r>
 80118f4:	3001      	adds	r0, #1
 80118f6:	f000 80a9 	beq.w	8011a4c <_vfiprintf_r+0x1f0>
 80118fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118fc:	445a      	add	r2, fp
 80118fe:	9209      	str	r2, [sp, #36]	; 0x24
 8011900:	f89a 3000 	ldrb.w	r3, [sl]
 8011904:	2b00      	cmp	r3, #0
 8011906:	f000 80a1 	beq.w	8011a4c <_vfiprintf_r+0x1f0>
 801190a:	2300      	movs	r3, #0
 801190c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011914:	f10a 0a01 	add.w	sl, sl, #1
 8011918:	9304      	str	r3, [sp, #16]
 801191a:	9307      	str	r3, [sp, #28]
 801191c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011920:	931a      	str	r3, [sp, #104]	; 0x68
 8011922:	4654      	mov	r4, sl
 8011924:	2205      	movs	r2, #5
 8011926:	f814 1b01 	ldrb.w	r1, [r4], #1
 801192a:	4854      	ldr	r0, [pc, #336]	; (8011a7c <_vfiprintf_r+0x220>)
 801192c:	f7ee fc58 	bl	80001e0 <memchr>
 8011930:	9a04      	ldr	r2, [sp, #16]
 8011932:	b9d8      	cbnz	r0, 801196c <_vfiprintf_r+0x110>
 8011934:	06d1      	lsls	r1, r2, #27
 8011936:	bf44      	itt	mi
 8011938:	2320      	movmi	r3, #32
 801193a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801193e:	0713      	lsls	r3, r2, #28
 8011940:	bf44      	itt	mi
 8011942:	232b      	movmi	r3, #43	; 0x2b
 8011944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011948:	f89a 3000 	ldrb.w	r3, [sl]
 801194c:	2b2a      	cmp	r3, #42	; 0x2a
 801194e:	d015      	beq.n	801197c <_vfiprintf_r+0x120>
 8011950:	9a07      	ldr	r2, [sp, #28]
 8011952:	4654      	mov	r4, sl
 8011954:	2000      	movs	r0, #0
 8011956:	f04f 0c0a 	mov.w	ip, #10
 801195a:	4621      	mov	r1, r4
 801195c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011960:	3b30      	subs	r3, #48	; 0x30
 8011962:	2b09      	cmp	r3, #9
 8011964:	d94d      	bls.n	8011a02 <_vfiprintf_r+0x1a6>
 8011966:	b1b0      	cbz	r0, 8011996 <_vfiprintf_r+0x13a>
 8011968:	9207      	str	r2, [sp, #28]
 801196a:	e014      	b.n	8011996 <_vfiprintf_r+0x13a>
 801196c:	eba0 0308 	sub.w	r3, r0, r8
 8011970:	fa09 f303 	lsl.w	r3, r9, r3
 8011974:	4313      	orrs	r3, r2
 8011976:	9304      	str	r3, [sp, #16]
 8011978:	46a2      	mov	sl, r4
 801197a:	e7d2      	b.n	8011922 <_vfiprintf_r+0xc6>
 801197c:	9b03      	ldr	r3, [sp, #12]
 801197e:	1d19      	adds	r1, r3, #4
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	9103      	str	r1, [sp, #12]
 8011984:	2b00      	cmp	r3, #0
 8011986:	bfbb      	ittet	lt
 8011988:	425b      	neglt	r3, r3
 801198a:	f042 0202 	orrlt.w	r2, r2, #2
 801198e:	9307      	strge	r3, [sp, #28]
 8011990:	9307      	strlt	r3, [sp, #28]
 8011992:	bfb8      	it	lt
 8011994:	9204      	strlt	r2, [sp, #16]
 8011996:	7823      	ldrb	r3, [r4, #0]
 8011998:	2b2e      	cmp	r3, #46	; 0x2e
 801199a:	d10c      	bne.n	80119b6 <_vfiprintf_r+0x15a>
 801199c:	7863      	ldrb	r3, [r4, #1]
 801199e:	2b2a      	cmp	r3, #42	; 0x2a
 80119a0:	d134      	bne.n	8011a0c <_vfiprintf_r+0x1b0>
 80119a2:	9b03      	ldr	r3, [sp, #12]
 80119a4:	1d1a      	adds	r2, r3, #4
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	9203      	str	r2, [sp, #12]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	bfb8      	it	lt
 80119ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80119b2:	3402      	adds	r4, #2
 80119b4:	9305      	str	r3, [sp, #20]
 80119b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011a8c <_vfiprintf_r+0x230>
 80119ba:	7821      	ldrb	r1, [r4, #0]
 80119bc:	2203      	movs	r2, #3
 80119be:	4650      	mov	r0, sl
 80119c0:	f7ee fc0e 	bl	80001e0 <memchr>
 80119c4:	b138      	cbz	r0, 80119d6 <_vfiprintf_r+0x17a>
 80119c6:	9b04      	ldr	r3, [sp, #16]
 80119c8:	eba0 000a 	sub.w	r0, r0, sl
 80119cc:	2240      	movs	r2, #64	; 0x40
 80119ce:	4082      	lsls	r2, r0
 80119d0:	4313      	orrs	r3, r2
 80119d2:	3401      	adds	r4, #1
 80119d4:	9304      	str	r3, [sp, #16]
 80119d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119da:	4829      	ldr	r0, [pc, #164]	; (8011a80 <_vfiprintf_r+0x224>)
 80119dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119e0:	2206      	movs	r2, #6
 80119e2:	f7ee fbfd 	bl	80001e0 <memchr>
 80119e6:	2800      	cmp	r0, #0
 80119e8:	d03f      	beq.n	8011a6a <_vfiprintf_r+0x20e>
 80119ea:	4b26      	ldr	r3, [pc, #152]	; (8011a84 <_vfiprintf_r+0x228>)
 80119ec:	bb1b      	cbnz	r3, 8011a36 <_vfiprintf_r+0x1da>
 80119ee:	9b03      	ldr	r3, [sp, #12]
 80119f0:	3307      	adds	r3, #7
 80119f2:	f023 0307 	bic.w	r3, r3, #7
 80119f6:	3308      	adds	r3, #8
 80119f8:	9303      	str	r3, [sp, #12]
 80119fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119fc:	443b      	add	r3, r7
 80119fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011a00:	e768      	b.n	80118d4 <_vfiprintf_r+0x78>
 8011a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a06:	460c      	mov	r4, r1
 8011a08:	2001      	movs	r0, #1
 8011a0a:	e7a6      	b.n	801195a <_vfiprintf_r+0xfe>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	3401      	adds	r4, #1
 8011a10:	9305      	str	r3, [sp, #20]
 8011a12:	4619      	mov	r1, r3
 8011a14:	f04f 0c0a 	mov.w	ip, #10
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a1e:	3a30      	subs	r2, #48	; 0x30
 8011a20:	2a09      	cmp	r2, #9
 8011a22:	d903      	bls.n	8011a2c <_vfiprintf_r+0x1d0>
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d0c6      	beq.n	80119b6 <_vfiprintf_r+0x15a>
 8011a28:	9105      	str	r1, [sp, #20]
 8011a2a:	e7c4      	b.n	80119b6 <_vfiprintf_r+0x15a>
 8011a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a30:	4604      	mov	r4, r0
 8011a32:	2301      	movs	r3, #1
 8011a34:	e7f0      	b.n	8011a18 <_vfiprintf_r+0x1bc>
 8011a36:	ab03      	add	r3, sp, #12
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	462a      	mov	r2, r5
 8011a3c:	4b12      	ldr	r3, [pc, #72]	; (8011a88 <_vfiprintf_r+0x22c>)
 8011a3e:	a904      	add	r1, sp, #16
 8011a40:	4630      	mov	r0, r6
 8011a42:	f7fd fe21 	bl	800f688 <_printf_float>
 8011a46:	4607      	mov	r7, r0
 8011a48:	1c78      	adds	r0, r7, #1
 8011a4a:	d1d6      	bne.n	80119fa <_vfiprintf_r+0x19e>
 8011a4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a4e:	07d9      	lsls	r1, r3, #31
 8011a50:	d405      	bmi.n	8011a5e <_vfiprintf_r+0x202>
 8011a52:	89ab      	ldrh	r3, [r5, #12]
 8011a54:	059a      	lsls	r2, r3, #22
 8011a56:	d402      	bmi.n	8011a5e <_vfiprintf_r+0x202>
 8011a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a5a:	f7fe fb6a 	bl	8010132 <__retarget_lock_release_recursive>
 8011a5e:	89ab      	ldrh	r3, [r5, #12]
 8011a60:	065b      	lsls	r3, r3, #25
 8011a62:	f53f af1d 	bmi.w	80118a0 <_vfiprintf_r+0x44>
 8011a66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a68:	e71c      	b.n	80118a4 <_vfiprintf_r+0x48>
 8011a6a:	ab03      	add	r3, sp, #12
 8011a6c:	9300      	str	r3, [sp, #0]
 8011a6e:	462a      	mov	r2, r5
 8011a70:	4b05      	ldr	r3, [pc, #20]	; (8011a88 <_vfiprintf_r+0x22c>)
 8011a72:	a904      	add	r1, sp, #16
 8011a74:	4630      	mov	r0, r6
 8011a76:	f7fe f8ab 	bl	800fbd0 <_printf_i>
 8011a7a:	e7e4      	b.n	8011a46 <_vfiprintf_r+0x1ea>
 8011a7c:	0801280b 	.word	0x0801280b
 8011a80:	08012815 	.word	0x08012815
 8011a84:	0800f689 	.word	0x0800f689
 8011a88:	08011839 	.word	0x08011839
 8011a8c:	08012811 	.word	0x08012811

08011a90 <__swbuf_r>:
 8011a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a92:	460e      	mov	r6, r1
 8011a94:	4614      	mov	r4, r2
 8011a96:	4605      	mov	r5, r0
 8011a98:	b118      	cbz	r0, 8011aa2 <__swbuf_r+0x12>
 8011a9a:	6a03      	ldr	r3, [r0, #32]
 8011a9c:	b90b      	cbnz	r3, 8011aa2 <__swbuf_r+0x12>
 8011a9e:	f7fe fa33 	bl	800ff08 <__sinit>
 8011aa2:	69a3      	ldr	r3, [r4, #24]
 8011aa4:	60a3      	str	r3, [r4, #8]
 8011aa6:	89a3      	ldrh	r3, [r4, #12]
 8011aa8:	071a      	lsls	r2, r3, #28
 8011aaa:	d525      	bpl.n	8011af8 <__swbuf_r+0x68>
 8011aac:	6923      	ldr	r3, [r4, #16]
 8011aae:	b31b      	cbz	r3, 8011af8 <__swbuf_r+0x68>
 8011ab0:	6823      	ldr	r3, [r4, #0]
 8011ab2:	6922      	ldr	r2, [r4, #16]
 8011ab4:	1a98      	subs	r0, r3, r2
 8011ab6:	6963      	ldr	r3, [r4, #20]
 8011ab8:	b2f6      	uxtb	r6, r6
 8011aba:	4283      	cmp	r3, r0
 8011abc:	4637      	mov	r7, r6
 8011abe:	dc04      	bgt.n	8011aca <__swbuf_r+0x3a>
 8011ac0:	4621      	mov	r1, r4
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	f7ff fe0c 	bl	80116e0 <_fflush_r>
 8011ac8:	b9e0      	cbnz	r0, 8011b04 <__swbuf_r+0x74>
 8011aca:	68a3      	ldr	r3, [r4, #8]
 8011acc:	3b01      	subs	r3, #1
 8011ace:	60a3      	str	r3, [r4, #8]
 8011ad0:	6823      	ldr	r3, [r4, #0]
 8011ad2:	1c5a      	adds	r2, r3, #1
 8011ad4:	6022      	str	r2, [r4, #0]
 8011ad6:	701e      	strb	r6, [r3, #0]
 8011ad8:	6962      	ldr	r2, [r4, #20]
 8011ada:	1c43      	adds	r3, r0, #1
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d004      	beq.n	8011aea <__swbuf_r+0x5a>
 8011ae0:	89a3      	ldrh	r3, [r4, #12]
 8011ae2:	07db      	lsls	r3, r3, #31
 8011ae4:	d506      	bpl.n	8011af4 <__swbuf_r+0x64>
 8011ae6:	2e0a      	cmp	r6, #10
 8011ae8:	d104      	bne.n	8011af4 <__swbuf_r+0x64>
 8011aea:	4621      	mov	r1, r4
 8011aec:	4628      	mov	r0, r5
 8011aee:	f7ff fdf7 	bl	80116e0 <_fflush_r>
 8011af2:	b938      	cbnz	r0, 8011b04 <__swbuf_r+0x74>
 8011af4:	4638      	mov	r0, r7
 8011af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011af8:	4621      	mov	r1, r4
 8011afa:	4628      	mov	r0, r5
 8011afc:	f000 f806 	bl	8011b0c <__swsetup_r>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d0d5      	beq.n	8011ab0 <__swbuf_r+0x20>
 8011b04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011b08:	e7f4      	b.n	8011af4 <__swbuf_r+0x64>
	...

08011b0c <__swsetup_r>:
 8011b0c:	b538      	push	{r3, r4, r5, lr}
 8011b0e:	4b2a      	ldr	r3, [pc, #168]	; (8011bb8 <__swsetup_r+0xac>)
 8011b10:	4605      	mov	r5, r0
 8011b12:	6818      	ldr	r0, [r3, #0]
 8011b14:	460c      	mov	r4, r1
 8011b16:	b118      	cbz	r0, 8011b20 <__swsetup_r+0x14>
 8011b18:	6a03      	ldr	r3, [r0, #32]
 8011b1a:	b90b      	cbnz	r3, 8011b20 <__swsetup_r+0x14>
 8011b1c:	f7fe f9f4 	bl	800ff08 <__sinit>
 8011b20:	89a3      	ldrh	r3, [r4, #12]
 8011b22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b26:	0718      	lsls	r0, r3, #28
 8011b28:	d422      	bmi.n	8011b70 <__swsetup_r+0x64>
 8011b2a:	06d9      	lsls	r1, r3, #27
 8011b2c:	d407      	bmi.n	8011b3e <__swsetup_r+0x32>
 8011b2e:	2309      	movs	r3, #9
 8011b30:	602b      	str	r3, [r5, #0]
 8011b32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b36:	81a3      	strh	r3, [r4, #12]
 8011b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b3c:	e034      	b.n	8011ba8 <__swsetup_r+0x9c>
 8011b3e:	0758      	lsls	r0, r3, #29
 8011b40:	d512      	bpl.n	8011b68 <__swsetup_r+0x5c>
 8011b42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b44:	b141      	cbz	r1, 8011b58 <__swsetup_r+0x4c>
 8011b46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b4a:	4299      	cmp	r1, r3
 8011b4c:	d002      	beq.n	8011b54 <__swsetup_r+0x48>
 8011b4e:	4628      	mov	r0, r5
 8011b50:	f7ff f978 	bl	8010e44 <_free_r>
 8011b54:	2300      	movs	r3, #0
 8011b56:	6363      	str	r3, [r4, #52]	; 0x34
 8011b58:	89a3      	ldrh	r3, [r4, #12]
 8011b5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b5e:	81a3      	strh	r3, [r4, #12]
 8011b60:	2300      	movs	r3, #0
 8011b62:	6063      	str	r3, [r4, #4]
 8011b64:	6923      	ldr	r3, [r4, #16]
 8011b66:	6023      	str	r3, [r4, #0]
 8011b68:	89a3      	ldrh	r3, [r4, #12]
 8011b6a:	f043 0308 	orr.w	r3, r3, #8
 8011b6e:	81a3      	strh	r3, [r4, #12]
 8011b70:	6923      	ldr	r3, [r4, #16]
 8011b72:	b94b      	cbnz	r3, 8011b88 <__swsetup_r+0x7c>
 8011b74:	89a3      	ldrh	r3, [r4, #12]
 8011b76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b7e:	d003      	beq.n	8011b88 <__swsetup_r+0x7c>
 8011b80:	4621      	mov	r1, r4
 8011b82:	4628      	mov	r0, r5
 8011b84:	f000 f884 	bl	8011c90 <__smakebuf_r>
 8011b88:	89a0      	ldrh	r0, [r4, #12]
 8011b8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b8e:	f010 0301 	ands.w	r3, r0, #1
 8011b92:	d00a      	beq.n	8011baa <__swsetup_r+0x9e>
 8011b94:	2300      	movs	r3, #0
 8011b96:	60a3      	str	r3, [r4, #8]
 8011b98:	6963      	ldr	r3, [r4, #20]
 8011b9a:	425b      	negs	r3, r3
 8011b9c:	61a3      	str	r3, [r4, #24]
 8011b9e:	6923      	ldr	r3, [r4, #16]
 8011ba0:	b943      	cbnz	r3, 8011bb4 <__swsetup_r+0xa8>
 8011ba2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011ba6:	d1c4      	bne.n	8011b32 <__swsetup_r+0x26>
 8011ba8:	bd38      	pop	{r3, r4, r5, pc}
 8011baa:	0781      	lsls	r1, r0, #30
 8011bac:	bf58      	it	pl
 8011bae:	6963      	ldrpl	r3, [r4, #20]
 8011bb0:	60a3      	str	r3, [r4, #8]
 8011bb2:	e7f4      	b.n	8011b9e <__swsetup_r+0x92>
 8011bb4:	2000      	movs	r0, #0
 8011bb6:	e7f7      	b.n	8011ba8 <__swsetup_r+0x9c>
 8011bb8:	20000178 	.word	0x20000178

08011bbc <_raise_r>:
 8011bbc:	291f      	cmp	r1, #31
 8011bbe:	b538      	push	{r3, r4, r5, lr}
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	460d      	mov	r5, r1
 8011bc4:	d904      	bls.n	8011bd0 <_raise_r+0x14>
 8011bc6:	2316      	movs	r3, #22
 8011bc8:	6003      	str	r3, [r0, #0]
 8011bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bce:	bd38      	pop	{r3, r4, r5, pc}
 8011bd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011bd2:	b112      	cbz	r2, 8011bda <_raise_r+0x1e>
 8011bd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bd8:	b94b      	cbnz	r3, 8011bee <_raise_r+0x32>
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f000 f830 	bl	8011c40 <_getpid_r>
 8011be0:	462a      	mov	r2, r5
 8011be2:	4601      	mov	r1, r0
 8011be4:	4620      	mov	r0, r4
 8011be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bea:	f000 b817 	b.w	8011c1c <_kill_r>
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	d00a      	beq.n	8011c08 <_raise_r+0x4c>
 8011bf2:	1c59      	adds	r1, r3, #1
 8011bf4:	d103      	bne.n	8011bfe <_raise_r+0x42>
 8011bf6:	2316      	movs	r3, #22
 8011bf8:	6003      	str	r3, [r0, #0]
 8011bfa:	2001      	movs	r0, #1
 8011bfc:	e7e7      	b.n	8011bce <_raise_r+0x12>
 8011bfe:	2400      	movs	r4, #0
 8011c00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011c04:	4628      	mov	r0, r5
 8011c06:	4798      	blx	r3
 8011c08:	2000      	movs	r0, #0
 8011c0a:	e7e0      	b.n	8011bce <_raise_r+0x12>

08011c0c <raise>:
 8011c0c:	4b02      	ldr	r3, [pc, #8]	; (8011c18 <raise+0xc>)
 8011c0e:	4601      	mov	r1, r0
 8011c10:	6818      	ldr	r0, [r3, #0]
 8011c12:	f7ff bfd3 	b.w	8011bbc <_raise_r>
 8011c16:	bf00      	nop
 8011c18:	20000178 	.word	0x20000178

08011c1c <_kill_r>:
 8011c1c:	b538      	push	{r3, r4, r5, lr}
 8011c1e:	4d07      	ldr	r5, [pc, #28]	; (8011c3c <_kill_r+0x20>)
 8011c20:	2300      	movs	r3, #0
 8011c22:	4604      	mov	r4, r0
 8011c24:	4608      	mov	r0, r1
 8011c26:	4611      	mov	r1, r2
 8011c28:	602b      	str	r3, [r5, #0]
 8011c2a:	f7f0 fa9f 	bl	800216c <_kill>
 8011c2e:	1c43      	adds	r3, r0, #1
 8011c30:	d102      	bne.n	8011c38 <_kill_r+0x1c>
 8011c32:	682b      	ldr	r3, [r5, #0]
 8011c34:	b103      	cbz	r3, 8011c38 <_kill_r+0x1c>
 8011c36:	6023      	str	r3, [r4, #0]
 8011c38:	bd38      	pop	{r3, r4, r5, pc}
 8011c3a:	bf00      	nop
 8011c3c:	200023ac 	.word	0x200023ac

08011c40 <_getpid_r>:
 8011c40:	f7f0 ba8c 	b.w	800215c <_getpid>

08011c44 <__swhatbuf_r>:
 8011c44:	b570      	push	{r4, r5, r6, lr}
 8011c46:	460c      	mov	r4, r1
 8011c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c4c:	2900      	cmp	r1, #0
 8011c4e:	b096      	sub	sp, #88	; 0x58
 8011c50:	4615      	mov	r5, r2
 8011c52:	461e      	mov	r6, r3
 8011c54:	da0d      	bge.n	8011c72 <__swhatbuf_r+0x2e>
 8011c56:	89a3      	ldrh	r3, [r4, #12]
 8011c58:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011c5c:	f04f 0100 	mov.w	r1, #0
 8011c60:	bf0c      	ite	eq
 8011c62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011c66:	2340      	movne	r3, #64	; 0x40
 8011c68:	2000      	movs	r0, #0
 8011c6a:	6031      	str	r1, [r6, #0]
 8011c6c:	602b      	str	r3, [r5, #0]
 8011c6e:	b016      	add	sp, #88	; 0x58
 8011c70:	bd70      	pop	{r4, r5, r6, pc}
 8011c72:	466a      	mov	r2, sp
 8011c74:	f000 f848 	bl	8011d08 <_fstat_r>
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	dbec      	blt.n	8011c56 <__swhatbuf_r+0x12>
 8011c7c:	9901      	ldr	r1, [sp, #4]
 8011c7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011c82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011c86:	4259      	negs	r1, r3
 8011c88:	4159      	adcs	r1, r3
 8011c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c8e:	e7eb      	b.n	8011c68 <__swhatbuf_r+0x24>

08011c90 <__smakebuf_r>:
 8011c90:	898b      	ldrh	r3, [r1, #12]
 8011c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c94:	079d      	lsls	r5, r3, #30
 8011c96:	4606      	mov	r6, r0
 8011c98:	460c      	mov	r4, r1
 8011c9a:	d507      	bpl.n	8011cac <__smakebuf_r+0x1c>
 8011c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ca0:	6023      	str	r3, [r4, #0]
 8011ca2:	6123      	str	r3, [r4, #16]
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	6163      	str	r3, [r4, #20]
 8011ca8:	b002      	add	sp, #8
 8011caa:	bd70      	pop	{r4, r5, r6, pc}
 8011cac:	ab01      	add	r3, sp, #4
 8011cae:	466a      	mov	r2, sp
 8011cb0:	f7ff ffc8 	bl	8011c44 <__swhatbuf_r>
 8011cb4:	9900      	ldr	r1, [sp, #0]
 8011cb6:	4605      	mov	r5, r0
 8011cb8:	4630      	mov	r0, r6
 8011cba:	f7fd fbb9 	bl	800f430 <_malloc_r>
 8011cbe:	b948      	cbnz	r0, 8011cd4 <__smakebuf_r+0x44>
 8011cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cc4:	059a      	lsls	r2, r3, #22
 8011cc6:	d4ef      	bmi.n	8011ca8 <__smakebuf_r+0x18>
 8011cc8:	f023 0303 	bic.w	r3, r3, #3
 8011ccc:	f043 0302 	orr.w	r3, r3, #2
 8011cd0:	81a3      	strh	r3, [r4, #12]
 8011cd2:	e7e3      	b.n	8011c9c <__smakebuf_r+0xc>
 8011cd4:	89a3      	ldrh	r3, [r4, #12]
 8011cd6:	6020      	str	r0, [r4, #0]
 8011cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cdc:	81a3      	strh	r3, [r4, #12]
 8011cde:	9b00      	ldr	r3, [sp, #0]
 8011ce0:	6163      	str	r3, [r4, #20]
 8011ce2:	9b01      	ldr	r3, [sp, #4]
 8011ce4:	6120      	str	r0, [r4, #16]
 8011ce6:	b15b      	cbz	r3, 8011d00 <__smakebuf_r+0x70>
 8011ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cec:	4630      	mov	r0, r6
 8011cee:	f000 f81d 	bl	8011d2c <_isatty_r>
 8011cf2:	b128      	cbz	r0, 8011d00 <__smakebuf_r+0x70>
 8011cf4:	89a3      	ldrh	r3, [r4, #12]
 8011cf6:	f023 0303 	bic.w	r3, r3, #3
 8011cfa:	f043 0301 	orr.w	r3, r3, #1
 8011cfe:	81a3      	strh	r3, [r4, #12]
 8011d00:	89a3      	ldrh	r3, [r4, #12]
 8011d02:	431d      	orrs	r5, r3
 8011d04:	81a5      	strh	r5, [r4, #12]
 8011d06:	e7cf      	b.n	8011ca8 <__smakebuf_r+0x18>

08011d08 <_fstat_r>:
 8011d08:	b538      	push	{r3, r4, r5, lr}
 8011d0a:	4d07      	ldr	r5, [pc, #28]	; (8011d28 <_fstat_r+0x20>)
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	4604      	mov	r4, r0
 8011d10:	4608      	mov	r0, r1
 8011d12:	4611      	mov	r1, r2
 8011d14:	602b      	str	r3, [r5, #0]
 8011d16:	f7f0 fa88 	bl	800222a <_fstat>
 8011d1a:	1c43      	adds	r3, r0, #1
 8011d1c:	d102      	bne.n	8011d24 <_fstat_r+0x1c>
 8011d1e:	682b      	ldr	r3, [r5, #0]
 8011d20:	b103      	cbz	r3, 8011d24 <_fstat_r+0x1c>
 8011d22:	6023      	str	r3, [r4, #0]
 8011d24:	bd38      	pop	{r3, r4, r5, pc}
 8011d26:	bf00      	nop
 8011d28:	200023ac 	.word	0x200023ac

08011d2c <_isatty_r>:
 8011d2c:	b538      	push	{r3, r4, r5, lr}
 8011d2e:	4d06      	ldr	r5, [pc, #24]	; (8011d48 <_isatty_r+0x1c>)
 8011d30:	2300      	movs	r3, #0
 8011d32:	4604      	mov	r4, r0
 8011d34:	4608      	mov	r0, r1
 8011d36:	602b      	str	r3, [r5, #0]
 8011d38:	f7f0 fa87 	bl	800224a <_isatty>
 8011d3c:	1c43      	adds	r3, r0, #1
 8011d3e:	d102      	bne.n	8011d46 <_isatty_r+0x1a>
 8011d40:	682b      	ldr	r3, [r5, #0]
 8011d42:	b103      	cbz	r3, 8011d46 <_isatty_r+0x1a>
 8011d44:	6023      	str	r3, [r4, #0]
 8011d46:	bd38      	pop	{r3, r4, r5, pc}
 8011d48:	200023ac 	.word	0x200023ac

08011d4c <atan2>:
 8011d4c:	f000 b800 	b.w	8011d50 <__ieee754_atan2>

08011d50 <__ieee754_atan2>:
 8011d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d54:	ec57 6b11 	vmov	r6, r7, d1
 8011d58:	4273      	negs	r3, r6
 8011d5a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8011ed8 <__ieee754_atan2+0x188>
 8011d5e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011d62:	4333      	orrs	r3, r6
 8011d64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011d68:	4543      	cmp	r3, r8
 8011d6a:	ec51 0b10 	vmov	r0, r1, d0
 8011d6e:	ee11 5a10 	vmov	r5, s2
 8011d72:	d80a      	bhi.n	8011d8a <__ieee754_atan2+0x3a>
 8011d74:	4244      	negs	r4, r0
 8011d76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d7a:	4304      	orrs	r4, r0
 8011d7c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011d80:	4544      	cmp	r4, r8
 8011d82:	ee10 9a10 	vmov	r9, s0
 8011d86:	468e      	mov	lr, r1
 8011d88:	d907      	bls.n	8011d9a <__ieee754_atan2+0x4a>
 8011d8a:	4632      	mov	r2, r6
 8011d8c:	463b      	mov	r3, r7
 8011d8e:	f7ee fa85 	bl	800029c <__adddf3>
 8011d92:	ec41 0b10 	vmov	d0, r0, r1
 8011d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d9a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011d9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011da2:	4334      	orrs	r4, r6
 8011da4:	d103      	bne.n	8011dae <__ieee754_atan2+0x5e>
 8011da6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011daa:	f000 b899 	b.w	8011ee0 <atan>
 8011dae:	17bc      	asrs	r4, r7, #30
 8011db0:	f004 0402 	and.w	r4, r4, #2
 8011db4:	ea53 0909 	orrs.w	r9, r3, r9
 8011db8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011dbc:	d107      	bne.n	8011dce <__ieee754_atan2+0x7e>
 8011dbe:	2c02      	cmp	r4, #2
 8011dc0:	d05f      	beq.n	8011e82 <__ieee754_atan2+0x132>
 8011dc2:	2c03      	cmp	r4, #3
 8011dc4:	d1e5      	bne.n	8011d92 <__ieee754_atan2+0x42>
 8011dc6:	a140      	add	r1, pc, #256	; (adr r1, 8011ec8 <__ieee754_atan2+0x178>)
 8011dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dcc:	e7e1      	b.n	8011d92 <__ieee754_atan2+0x42>
 8011dce:	4315      	orrs	r5, r2
 8011dd0:	d106      	bne.n	8011de0 <__ieee754_atan2+0x90>
 8011dd2:	f1be 0f00 	cmp.w	lr, #0
 8011dd6:	da5f      	bge.n	8011e98 <__ieee754_atan2+0x148>
 8011dd8:	a13d      	add	r1, pc, #244	; (adr r1, 8011ed0 <__ieee754_atan2+0x180>)
 8011dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dde:	e7d8      	b.n	8011d92 <__ieee754_atan2+0x42>
 8011de0:	4542      	cmp	r2, r8
 8011de2:	d10f      	bne.n	8011e04 <__ieee754_atan2+0xb4>
 8011de4:	4293      	cmp	r3, r2
 8011de6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011dea:	d107      	bne.n	8011dfc <__ieee754_atan2+0xac>
 8011dec:	2c02      	cmp	r4, #2
 8011dee:	d84c      	bhi.n	8011e8a <__ieee754_atan2+0x13a>
 8011df0:	4b33      	ldr	r3, [pc, #204]	; (8011ec0 <__ieee754_atan2+0x170>)
 8011df2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011dfa:	e7ca      	b.n	8011d92 <__ieee754_atan2+0x42>
 8011dfc:	2c02      	cmp	r4, #2
 8011dfe:	d848      	bhi.n	8011e92 <__ieee754_atan2+0x142>
 8011e00:	4b30      	ldr	r3, [pc, #192]	; (8011ec4 <__ieee754_atan2+0x174>)
 8011e02:	e7f6      	b.n	8011df2 <__ieee754_atan2+0xa2>
 8011e04:	4543      	cmp	r3, r8
 8011e06:	d0e4      	beq.n	8011dd2 <__ieee754_atan2+0x82>
 8011e08:	1a9b      	subs	r3, r3, r2
 8011e0a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011e0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011e12:	da1e      	bge.n	8011e52 <__ieee754_atan2+0x102>
 8011e14:	2f00      	cmp	r7, #0
 8011e16:	da01      	bge.n	8011e1c <__ieee754_atan2+0xcc>
 8011e18:	323c      	adds	r2, #60	; 0x3c
 8011e1a:	db1e      	blt.n	8011e5a <__ieee754_atan2+0x10a>
 8011e1c:	4632      	mov	r2, r6
 8011e1e:	463b      	mov	r3, r7
 8011e20:	f7ee fd1c 	bl	800085c <__aeabi_ddiv>
 8011e24:	ec41 0b10 	vmov	d0, r0, r1
 8011e28:	f000 f9fa 	bl	8012220 <fabs>
 8011e2c:	f000 f858 	bl	8011ee0 <atan>
 8011e30:	ec51 0b10 	vmov	r0, r1, d0
 8011e34:	2c01      	cmp	r4, #1
 8011e36:	d013      	beq.n	8011e60 <__ieee754_atan2+0x110>
 8011e38:	2c02      	cmp	r4, #2
 8011e3a:	d015      	beq.n	8011e68 <__ieee754_atan2+0x118>
 8011e3c:	2c00      	cmp	r4, #0
 8011e3e:	d0a8      	beq.n	8011d92 <__ieee754_atan2+0x42>
 8011e40:	a317      	add	r3, pc, #92	; (adr r3, 8011ea0 <__ieee754_atan2+0x150>)
 8011e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e46:	f7ee fa27 	bl	8000298 <__aeabi_dsub>
 8011e4a:	a317      	add	r3, pc, #92	; (adr r3, 8011ea8 <__ieee754_atan2+0x158>)
 8011e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e50:	e014      	b.n	8011e7c <__ieee754_atan2+0x12c>
 8011e52:	a117      	add	r1, pc, #92	; (adr r1, 8011eb0 <__ieee754_atan2+0x160>)
 8011e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e58:	e7ec      	b.n	8011e34 <__ieee754_atan2+0xe4>
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	e7e9      	b.n	8011e34 <__ieee754_atan2+0xe4>
 8011e60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e64:	4619      	mov	r1, r3
 8011e66:	e794      	b.n	8011d92 <__ieee754_atan2+0x42>
 8011e68:	a30d      	add	r3, pc, #52	; (adr r3, 8011ea0 <__ieee754_atan2+0x150>)
 8011e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6e:	f7ee fa13 	bl	8000298 <__aeabi_dsub>
 8011e72:	4602      	mov	r2, r0
 8011e74:	460b      	mov	r3, r1
 8011e76:	a10c      	add	r1, pc, #48	; (adr r1, 8011ea8 <__ieee754_atan2+0x158>)
 8011e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e7c:	f7ee fa0c 	bl	8000298 <__aeabi_dsub>
 8011e80:	e787      	b.n	8011d92 <__ieee754_atan2+0x42>
 8011e82:	a109      	add	r1, pc, #36	; (adr r1, 8011ea8 <__ieee754_atan2+0x158>)
 8011e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e88:	e783      	b.n	8011d92 <__ieee754_atan2+0x42>
 8011e8a:	a10b      	add	r1, pc, #44	; (adr r1, 8011eb8 <__ieee754_atan2+0x168>)
 8011e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e90:	e77f      	b.n	8011d92 <__ieee754_atan2+0x42>
 8011e92:	2000      	movs	r0, #0
 8011e94:	2100      	movs	r1, #0
 8011e96:	e77c      	b.n	8011d92 <__ieee754_atan2+0x42>
 8011e98:	a105      	add	r1, pc, #20	; (adr r1, 8011eb0 <__ieee754_atan2+0x160>)
 8011e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e9e:	e778      	b.n	8011d92 <__ieee754_atan2+0x42>
 8011ea0:	33145c07 	.word	0x33145c07
 8011ea4:	3ca1a626 	.word	0x3ca1a626
 8011ea8:	54442d18 	.word	0x54442d18
 8011eac:	400921fb 	.word	0x400921fb
 8011eb0:	54442d18 	.word	0x54442d18
 8011eb4:	3ff921fb 	.word	0x3ff921fb
 8011eb8:	54442d18 	.word	0x54442d18
 8011ebc:	3fe921fb 	.word	0x3fe921fb
 8011ec0:	08012820 	.word	0x08012820
 8011ec4:	08012838 	.word	0x08012838
 8011ec8:	54442d18 	.word	0x54442d18
 8011ecc:	c00921fb 	.word	0xc00921fb
 8011ed0:	54442d18 	.word	0x54442d18
 8011ed4:	bff921fb 	.word	0xbff921fb
 8011ed8:	7ff00000 	.word	0x7ff00000
 8011edc:	00000000 	.word	0x00000000

08011ee0 <atan>:
 8011ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee4:	ec55 4b10 	vmov	r4, r5, d0
 8011ee8:	4bc3      	ldr	r3, [pc, #780]	; (80121f8 <atan+0x318>)
 8011eea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011eee:	429e      	cmp	r6, r3
 8011ef0:	46ab      	mov	fp, r5
 8011ef2:	dd18      	ble.n	8011f26 <atan+0x46>
 8011ef4:	4bc1      	ldr	r3, [pc, #772]	; (80121fc <atan+0x31c>)
 8011ef6:	429e      	cmp	r6, r3
 8011ef8:	dc01      	bgt.n	8011efe <atan+0x1e>
 8011efa:	d109      	bne.n	8011f10 <atan+0x30>
 8011efc:	b144      	cbz	r4, 8011f10 <atan+0x30>
 8011efe:	4622      	mov	r2, r4
 8011f00:	462b      	mov	r3, r5
 8011f02:	4620      	mov	r0, r4
 8011f04:	4629      	mov	r1, r5
 8011f06:	f7ee f9c9 	bl	800029c <__adddf3>
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	460d      	mov	r5, r1
 8011f0e:	e006      	b.n	8011f1e <atan+0x3e>
 8011f10:	f1bb 0f00 	cmp.w	fp, #0
 8011f14:	f300 8131 	bgt.w	801217a <atan+0x29a>
 8011f18:	a59b      	add	r5, pc, #620	; (adr r5, 8012188 <atan+0x2a8>)
 8011f1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011f1e:	ec45 4b10 	vmov	d0, r4, r5
 8011f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f26:	4bb6      	ldr	r3, [pc, #728]	; (8012200 <atan+0x320>)
 8011f28:	429e      	cmp	r6, r3
 8011f2a:	dc14      	bgt.n	8011f56 <atan+0x76>
 8011f2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011f30:	429e      	cmp	r6, r3
 8011f32:	dc0d      	bgt.n	8011f50 <atan+0x70>
 8011f34:	a396      	add	r3, pc, #600	; (adr r3, 8012190 <atan+0x2b0>)
 8011f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3a:	ee10 0a10 	vmov	r0, s0
 8011f3e:	4629      	mov	r1, r5
 8011f40:	f7ee f9ac 	bl	800029c <__adddf3>
 8011f44:	4baf      	ldr	r3, [pc, #700]	; (8012204 <atan+0x324>)
 8011f46:	2200      	movs	r2, #0
 8011f48:	f7ee fdee 	bl	8000b28 <__aeabi_dcmpgt>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	d1e6      	bne.n	8011f1e <atan+0x3e>
 8011f50:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011f54:	e02b      	b.n	8011fae <atan+0xce>
 8011f56:	f000 f963 	bl	8012220 <fabs>
 8011f5a:	4bab      	ldr	r3, [pc, #684]	; (8012208 <atan+0x328>)
 8011f5c:	429e      	cmp	r6, r3
 8011f5e:	ec55 4b10 	vmov	r4, r5, d0
 8011f62:	f300 80bf 	bgt.w	80120e4 <atan+0x204>
 8011f66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011f6a:	429e      	cmp	r6, r3
 8011f6c:	f300 80a0 	bgt.w	80120b0 <atan+0x1d0>
 8011f70:	ee10 2a10 	vmov	r2, s0
 8011f74:	ee10 0a10 	vmov	r0, s0
 8011f78:	462b      	mov	r3, r5
 8011f7a:	4629      	mov	r1, r5
 8011f7c:	f7ee f98e 	bl	800029c <__adddf3>
 8011f80:	4ba0      	ldr	r3, [pc, #640]	; (8012204 <atan+0x324>)
 8011f82:	2200      	movs	r2, #0
 8011f84:	f7ee f988 	bl	8000298 <__aeabi_dsub>
 8011f88:	2200      	movs	r2, #0
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	460f      	mov	r7, r1
 8011f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f92:	4620      	mov	r0, r4
 8011f94:	4629      	mov	r1, r5
 8011f96:	f7ee f981 	bl	800029c <__adddf3>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	4639      	mov	r1, r7
 8011fa2:	f7ee fc5b 	bl	800085c <__aeabi_ddiv>
 8011fa6:	f04f 0a00 	mov.w	sl, #0
 8011faa:	4604      	mov	r4, r0
 8011fac:	460d      	mov	r5, r1
 8011fae:	4622      	mov	r2, r4
 8011fb0:	462b      	mov	r3, r5
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	4629      	mov	r1, r5
 8011fb6:	f7ee fb27 	bl	8000608 <__aeabi_dmul>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	4680      	mov	r8, r0
 8011fc0:	4689      	mov	r9, r1
 8011fc2:	f7ee fb21 	bl	8000608 <__aeabi_dmul>
 8011fc6:	a374      	add	r3, pc, #464	; (adr r3, 8012198 <atan+0x2b8>)
 8011fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fcc:	4606      	mov	r6, r0
 8011fce:	460f      	mov	r7, r1
 8011fd0:	f7ee fb1a 	bl	8000608 <__aeabi_dmul>
 8011fd4:	a372      	add	r3, pc, #456	; (adr r3, 80121a0 <atan+0x2c0>)
 8011fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fda:	f7ee f95f 	bl	800029c <__adddf3>
 8011fde:	4632      	mov	r2, r6
 8011fe0:	463b      	mov	r3, r7
 8011fe2:	f7ee fb11 	bl	8000608 <__aeabi_dmul>
 8011fe6:	a370      	add	r3, pc, #448	; (adr r3, 80121a8 <atan+0x2c8>)
 8011fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fec:	f7ee f956 	bl	800029c <__adddf3>
 8011ff0:	4632      	mov	r2, r6
 8011ff2:	463b      	mov	r3, r7
 8011ff4:	f7ee fb08 	bl	8000608 <__aeabi_dmul>
 8011ff8:	a36d      	add	r3, pc, #436	; (adr r3, 80121b0 <atan+0x2d0>)
 8011ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffe:	f7ee f94d 	bl	800029c <__adddf3>
 8012002:	4632      	mov	r2, r6
 8012004:	463b      	mov	r3, r7
 8012006:	f7ee faff 	bl	8000608 <__aeabi_dmul>
 801200a:	a36b      	add	r3, pc, #428	; (adr r3, 80121b8 <atan+0x2d8>)
 801200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012010:	f7ee f944 	bl	800029c <__adddf3>
 8012014:	4632      	mov	r2, r6
 8012016:	463b      	mov	r3, r7
 8012018:	f7ee faf6 	bl	8000608 <__aeabi_dmul>
 801201c:	a368      	add	r3, pc, #416	; (adr r3, 80121c0 <atan+0x2e0>)
 801201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012022:	f7ee f93b 	bl	800029c <__adddf3>
 8012026:	4642      	mov	r2, r8
 8012028:	464b      	mov	r3, r9
 801202a:	f7ee faed 	bl	8000608 <__aeabi_dmul>
 801202e:	a366      	add	r3, pc, #408	; (adr r3, 80121c8 <atan+0x2e8>)
 8012030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012034:	4680      	mov	r8, r0
 8012036:	4689      	mov	r9, r1
 8012038:	4630      	mov	r0, r6
 801203a:	4639      	mov	r1, r7
 801203c:	f7ee fae4 	bl	8000608 <__aeabi_dmul>
 8012040:	a363      	add	r3, pc, #396	; (adr r3, 80121d0 <atan+0x2f0>)
 8012042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012046:	f7ee f927 	bl	8000298 <__aeabi_dsub>
 801204a:	4632      	mov	r2, r6
 801204c:	463b      	mov	r3, r7
 801204e:	f7ee fadb 	bl	8000608 <__aeabi_dmul>
 8012052:	a361      	add	r3, pc, #388	; (adr r3, 80121d8 <atan+0x2f8>)
 8012054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012058:	f7ee f91e 	bl	8000298 <__aeabi_dsub>
 801205c:	4632      	mov	r2, r6
 801205e:	463b      	mov	r3, r7
 8012060:	f7ee fad2 	bl	8000608 <__aeabi_dmul>
 8012064:	a35e      	add	r3, pc, #376	; (adr r3, 80121e0 <atan+0x300>)
 8012066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206a:	f7ee f915 	bl	8000298 <__aeabi_dsub>
 801206e:	4632      	mov	r2, r6
 8012070:	463b      	mov	r3, r7
 8012072:	f7ee fac9 	bl	8000608 <__aeabi_dmul>
 8012076:	a35c      	add	r3, pc, #368	; (adr r3, 80121e8 <atan+0x308>)
 8012078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207c:	f7ee f90c 	bl	8000298 <__aeabi_dsub>
 8012080:	4632      	mov	r2, r6
 8012082:	463b      	mov	r3, r7
 8012084:	f7ee fac0 	bl	8000608 <__aeabi_dmul>
 8012088:	4602      	mov	r2, r0
 801208a:	460b      	mov	r3, r1
 801208c:	4640      	mov	r0, r8
 801208e:	4649      	mov	r1, r9
 8012090:	f7ee f904 	bl	800029c <__adddf3>
 8012094:	4622      	mov	r2, r4
 8012096:	462b      	mov	r3, r5
 8012098:	f7ee fab6 	bl	8000608 <__aeabi_dmul>
 801209c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80120a0:	4602      	mov	r2, r0
 80120a2:	460b      	mov	r3, r1
 80120a4:	d14b      	bne.n	801213e <atan+0x25e>
 80120a6:	4620      	mov	r0, r4
 80120a8:	4629      	mov	r1, r5
 80120aa:	f7ee f8f5 	bl	8000298 <__aeabi_dsub>
 80120ae:	e72c      	b.n	8011f0a <atan+0x2a>
 80120b0:	ee10 0a10 	vmov	r0, s0
 80120b4:	4b53      	ldr	r3, [pc, #332]	; (8012204 <atan+0x324>)
 80120b6:	2200      	movs	r2, #0
 80120b8:	4629      	mov	r1, r5
 80120ba:	f7ee f8ed 	bl	8000298 <__aeabi_dsub>
 80120be:	4b51      	ldr	r3, [pc, #324]	; (8012204 <atan+0x324>)
 80120c0:	4606      	mov	r6, r0
 80120c2:	460f      	mov	r7, r1
 80120c4:	2200      	movs	r2, #0
 80120c6:	4620      	mov	r0, r4
 80120c8:	4629      	mov	r1, r5
 80120ca:	f7ee f8e7 	bl	800029c <__adddf3>
 80120ce:	4602      	mov	r2, r0
 80120d0:	460b      	mov	r3, r1
 80120d2:	4630      	mov	r0, r6
 80120d4:	4639      	mov	r1, r7
 80120d6:	f7ee fbc1 	bl	800085c <__aeabi_ddiv>
 80120da:	f04f 0a01 	mov.w	sl, #1
 80120de:	4604      	mov	r4, r0
 80120e0:	460d      	mov	r5, r1
 80120e2:	e764      	b.n	8011fae <atan+0xce>
 80120e4:	4b49      	ldr	r3, [pc, #292]	; (801220c <atan+0x32c>)
 80120e6:	429e      	cmp	r6, r3
 80120e8:	da1d      	bge.n	8012126 <atan+0x246>
 80120ea:	ee10 0a10 	vmov	r0, s0
 80120ee:	4b48      	ldr	r3, [pc, #288]	; (8012210 <atan+0x330>)
 80120f0:	2200      	movs	r2, #0
 80120f2:	4629      	mov	r1, r5
 80120f4:	f7ee f8d0 	bl	8000298 <__aeabi_dsub>
 80120f8:	4b45      	ldr	r3, [pc, #276]	; (8012210 <atan+0x330>)
 80120fa:	4606      	mov	r6, r0
 80120fc:	460f      	mov	r7, r1
 80120fe:	2200      	movs	r2, #0
 8012100:	4620      	mov	r0, r4
 8012102:	4629      	mov	r1, r5
 8012104:	f7ee fa80 	bl	8000608 <__aeabi_dmul>
 8012108:	4b3e      	ldr	r3, [pc, #248]	; (8012204 <atan+0x324>)
 801210a:	2200      	movs	r2, #0
 801210c:	f7ee f8c6 	bl	800029c <__adddf3>
 8012110:	4602      	mov	r2, r0
 8012112:	460b      	mov	r3, r1
 8012114:	4630      	mov	r0, r6
 8012116:	4639      	mov	r1, r7
 8012118:	f7ee fba0 	bl	800085c <__aeabi_ddiv>
 801211c:	f04f 0a02 	mov.w	sl, #2
 8012120:	4604      	mov	r4, r0
 8012122:	460d      	mov	r5, r1
 8012124:	e743      	b.n	8011fae <atan+0xce>
 8012126:	462b      	mov	r3, r5
 8012128:	ee10 2a10 	vmov	r2, s0
 801212c:	4939      	ldr	r1, [pc, #228]	; (8012214 <atan+0x334>)
 801212e:	2000      	movs	r0, #0
 8012130:	f7ee fb94 	bl	800085c <__aeabi_ddiv>
 8012134:	f04f 0a03 	mov.w	sl, #3
 8012138:	4604      	mov	r4, r0
 801213a:	460d      	mov	r5, r1
 801213c:	e737      	b.n	8011fae <atan+0xce>
 801213e:	4b36      	ldr	r3, [pc, #216]	; (8012218 <atan+0x338>)
 8012140:	4e36      	ldr	r6, [pc, #216]	; (801221c <atan+0x33c>)
 8012142:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214a:	f7ee f8a5 	bl	8000298 <__aeabi_dsub>
 801214e:	4622      	mov	r2, r4
 8012150:	462b      	mov	r3, r5
 8012152:	f7ee f8a1 	bl	8000298 <__aeabi_dsub>
 8012156:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801215a:	4602      	mov	r2, r0
 801215c:	460b      	mov	r3, r1
 801215e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012162:	f7ee f899 	bl	8000298 <__aeabi_dsub>
 8012166:	f1bb 0f00 	cmp.w	fp, #0
 801216a:	4604      	mov	r4, r0
 801216c:	460d      	mov	r5, r1
 801216e:	f6bf aed6 	bge.w	8011f1e <atan+0x3e>
 8012172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012176:	461d      	mov	r5, r3
 8012178:	e6d1      	b.n	8011f1e <atan+0x3e>
 801217a:	a51d      	add	r5, pc, #116	; (adr r5, 80121f0 <atan+0x310>)
 801217c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012180:	e6cd      	b.n	8011f1e <atan+0x3e>
 8012182:	bf00      	nop
 8012184:	f3af 8000 	nop.w
 8012188:	54442d18 	.word	0x54442d18
 801218c:	bff921fb 	.word	0xbff921fb
 8012190:	8800759c 	.word	0x8800759c
 8012194:	7e37e43c 	.word	0x7e37e43c
 8012198:	e322da11 	.word	0xe322da11
 801219c:	3f90ad3a 	.word	0x3f90ad3a
 80121a0:	24760deb 	.word	0x24760deb
 80121a4:	3fa97b4b 	.word	0x3fa97b4b
 80121a8:	a0d03d51 	.word	0xa0d03d51
 80121ac:	3fb10d66 	.word	0x3fb10d66
 80121b0:	c54c206e 	.word	0xc54c206e
 80121b4:	3fb745cd 	.word	0x3fb745cd
 80121b8:	920083ff 	.word	0x920083ff
 80121bc:	3fc24924 	.word	0x3fc24924
 80121c0:	5555550d 	.word	0x5555550d
 80121c4:	3fd55555 	.word	0x3fd55555
 80121c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80121cc:	bfa2b444 	.word	0xbfa2b444
 80121d0:	52defd9a 	.word	0x52defd9a
 80121d4:	3fadde2d 	.word	0x3fadde2d
 80121d8:	af749a6d 	.word	0xaf749a6d
 80121dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80121e0:	fe231671 	.word	0xfe231671
 80121e4:	3fbc71c6 	.word	0x3fbc71c6
 80121e8:	9998ebc4 	.word	0x9998ebc4
 80121ec:	3fc99999 	.word	0x3fc99999
 80121f0:	54442d18 	.word	0x54442d18
 80121f4:	3ff921fb 	.word	0x3ff921fb
 80121f8:	440fffff 	.word	0x440fffff
 80121fc:	7ff00000 	.word	0x7ff00000
 8012200:	3fdbffff 	.word	0x3fdbffff
 8012204:	3ff00000 	.word	0x3ff00000
 8012208:	3ff2ffff 	.word	0x3ff2ffff
 801220c:	40038000 	.word	0x40038000
 8012210:	3ff80000 	.word	0x3ff80000
 8012214:	bff00000 	.word	0xbff00000
 8012218:	08012870 	.word	0x08012870
 801221c:	08012850 	.word	0x08012850

08012220 <fabs>:
 8012220:	ec51 0b10 	vmov	r0, r1, d0
 8012224:	ee10 2a10 	vmov	r2, s0
 8012228:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801222c:	ec43 2b10 	vmov	d0, r2, r3
 8012230:	4770      	bx	lr
	...

08012234 <_init>:
 8012234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012236:	bf00      	nop
 8012238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801223a:	bc08      	pop	{r3}
 801223c:	469e      	mov	lr, r3
 801223e:	4770      	bx	lr

08012240 <_fini>:
 8012240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012242:	bf00      	nop
 8012244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012246:	bc08      	pop	{r3}
 8012248:	469e      	mov	lr, r3
 801224a:	4770      	bx	lr
