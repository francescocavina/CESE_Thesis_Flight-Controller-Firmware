
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000895c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bac  08008bac  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb4  08008bb4  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000161c  2000014c  08008d08  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001768  08008d08  00021768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001287a  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034cc  00000000  00000000  00032a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  00035f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae3  00000000  00000000  00036d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b97  00000000  00000000  00037863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014071  00000000  00000000  000503fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088f83  00000000  00000000  0006446b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f5c  00000000  00000000  000ed3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000f134c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ae4 	.word	0x08008ae4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08008ae4 	.word	0x08008ae4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fbb7 	bl	8000cf4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f83d 	bl	8000604 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8e9 	bl	8000760 <MX_GPIO_Init>
  MX_DMA_Init();
 800058e:	f000 f8cd 	bl	800072c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000592:	f007 f8eb 	bl	800776c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f89f 	bl	80006d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint8_t buffer[32];
    uint8_t str[32] = {0};
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	619a      	str	r2, [r3, #24]
    uint8_t channel = CHANNEL_3;
 80005b2:	2303      	movs	r3, #3
 80005b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    iBus_HandleTypeDef_t * rc_controller = FSA8S_RC_Init(&huart2, buffer);
 80005b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005bc:	4619      	mov	r1, r3
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <main+0x80>)
 80005c0:	f000 fb4e 	bl	8000c60 <FSA8S_RC_Init>
 80005c4:	64b8      	str	r0, [r7, #72]	; 0x48

    while (1) {
        uint16_t value = FSA8S_RC_ReadChannel(rc_controller, channel);
 80005c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005ca:	4619      	mov	r1, r3
 80005cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80005ce:	f000 fb75 	bl	8000cbc <FSA8S_RC_ReadChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        sprintf(str, "Channel %d: %d\r\n", channel, value);
 80005d8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80005e0:	1d38      	adds	r0, r7, #4
 80005e2:	4907      	ldr	r1, [pc, #28]	; (8000600 <main+0x84>)
 80005e4:	f007 fe86 	bl	80082f4 <siprintf>

        CDC_Transmit_FS(str, sizeof(str));
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2120      	movs	r1, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f007 f97b 	bl	80078e8 <CDC_Transmit_FS>

        HAL_Delay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f000 fbef 	bl	8000dd8 <HAL_Delay>
    while (1) {
 80005fa:	e7e4      	b.n	80005c6 <main+0x4a>
 80005fc:	20000168 	.word	0x20000168
 8000600:	08008afc 	.word	0x08008afc

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fe8e 	bl	8008334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000650:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <SystemClock_Config+0xd0>)
 8000652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000678:	230f      	movs	r3, #15
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800067c:	2390      	movs	r3, #144	; 0x90
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000680:	2304      	movs	r3, #4
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000684:	2305      	movs	r3, #5
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fac1 	bl	8002c14 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000698:	f000 f88a 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fd23 	bl	8003104 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c4:	f000 f874 	bl	80007b0 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART2_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2204      	movs	r2, #4
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000710:	f002 fed8 	bl	80034c4 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f849 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000168 	.word	0x20000168
 8000728:	40004400 	.word	0x40004400

0800072c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_DMA_Init+0x30>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <MX_DMA_Init+0x30>)
 800073c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_DMA_Init+0x30>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_GPIO_Init+0x4c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <MX_GPIO_Init+0x4c>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_GPIO_Init+0x4c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_GPIO_Init+0x4c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <MX_GPIO_Init+0x4c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_GPIO_Init+0x4c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <HAL_MspInit+0x4c>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a30      	ldr	r2, [pc, #192]	; (80008f0 <HAL_UART_MspInit+0xe0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d15a      	bne.n	80008e8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a2e      	ldr	r2, [pc, #184]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800086a:	230c      	movs	r3, #12
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087a:	2307      	movs	r3, #7
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	481c      	ldr	r0, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0xe8>)
 8000886:	f000 fdc3 	bl	8001410 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <HAL_UART_MspInit+0xec>)
 800088c:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <HAL_UART_MspInit+0xf0>)
 800088e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <HAL_UART_MspInit+0xec>)
 8000892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000896:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_UART_MspInit+0xec>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008ce:	f000 fbb9 	bl	8001044 <HAL_DMA_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80008d8:	f7ff ff6a 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_UART_MspInit+0xec>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	200001ac 	.word	0x200001ac
 8000900:	40026088 	.word	0x40026088

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 fa22 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <OTG_FS_IRQHandler+0x10>)
 800095e:	f001 f82b 	bl	80019b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000ef4 	.word	0x20000ef4

0800096c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d207      	bcs.n	80009ac <_sbrk+0x40>
        errno = ENOMEM;
 800099c:	f007 fce2 	bl	8008364 <__errno>
 80009a0:	4603      	mov	r3, r0
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009aa:	e009      	b.n	80009c0 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <_sbrk+0x64>)
 80009bc:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20010000 	.word	0x20010000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	2000020c 	.word	0x2000020c
 80009d4:	20001768 	.word	0x20001768

080009d8 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a18:	4c0b      	ldr	r4, [pc, #44]	; (8000a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a26:	f7ff ffd7 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f007 fca1 	bl	8008370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fda5 	bl	800057c <main>
  bx  lr
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000a40:	08008bbc 	.word	0x08008bbc
  ldr r2, =_sbss
 8000a44:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000a48:	20001768 	.word	0x20001768

08000a4c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <MX_UART_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t MX_UART_Init(UART_HandleTypeDef * huart) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    /* BEGIN MODIFY 1*/
    huart->Instance = FSA8S_RC_UART_INSTANCE;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <MX_UART_Init+0x54>)
 8000a5c:	601a      	str	r2, [r3, #0]
    huart->Init.BaudRate = 115200;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_RX;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
    /* Initialize UART peripheral with function located on the "stm32f4xx_hal_uart.c"
     * file, taking the previously defined UART handle as argument.
     */

    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_UART_Init(huart)) {
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f002 fd1a 	bl	80034c4 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_UART_Init+0x4a>
        /* END MODIFY 2 */
        return false;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <MX_UART_Init+0x4c>
    }

    return true;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
	 * HAL_DMA_Init() on the "stm32f4xx_hal_dma.c" file which sets all the configuration.
	 */

    /* DMA controller clock enable */
    /* BEGIN MODIFY 3 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_DMA_Init+0x30>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <MX_DMA_Init+0x30>)
 8000ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_DMA_Init+0x30>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
    /* END MODIFY 3 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <iBus_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
bool_t iBus_Init(iBus_HandleTypeDef_t * hibus) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    MX_DMA_Init();
 8000ae4:	f7ff ffe0 	bl	8000aa8 <MX_DMA_Init>

    if (!MX_UART_Init(hibus->huart)) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ffaf 	bl	8000a50 <MX_UART_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f083 0301 	eor.w	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <iBus_Init+0x26>
        return false;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e00f      	b.n	8000b22 <iBus_Init+0x46>
    }

    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6859      	ldr	r1, [r3, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7a1b      	ldrb	r3, [r3, #8]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	f002 fd24 	bl	800355e <HAL_UART_Receive_DMA>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <iBus_Init+0x44>
        /* END MODIFY 4 */
        return false;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e000      	b.n	8000b22 <iBus_Init+0x46>
    }

    return true;
 8000b20:	2301      	movs	r3, #1
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <FSA8S_RC_CheckFirstByte>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_RC_CheckFirstByte(iBus_HandleTypeDef_t * hibus) {
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b20      	cmp	r3, #32
 8000b3a:	d107      	bne.n	8000b4c <FSA8S_RC_CheckFirstByte+0x22>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b40      	cmp	r3, #64	; 0x40
 8000b46:	d101      	bne.n	8000b4c <FSA8S_RC_CheckFirstByte+0x22>
        return true;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <FSA8S_RC_CheckFirstByte+0x24>
    } else {
        return false;
 8000b4c:	2300      	movs	r3, #0
    }
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <FSA8S_RC_Checksum>:

static bool_t FSA8S_RC_Checksum(iBus_HandleTypeDef_t * hibus) {
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
    uint16_t sentChecksum;
    uint16_t receivedChecksum = 0xFFFF;
 8000b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b66:	81fb      	strh	r3, [r7, #14]

    sentChecksum =
        (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7a1b      	ldrb	r3, [r3, #8]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6859      	ldr	r1, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7a1b      	ldrb	r3, [r3, #8]
 8000b82:	3b02      	subs	r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21b      	sxth	r3, r3
    sentChecksum =
 8000b8e:	817b      	strh	r3, [r7, #10]

    for (uint8_t i = 0; i < 30; i++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	737b      	strb	r3, [r7, #13]
 8000b94:	e00b      	b.n	8000bae <FSA8S_RC_Checksum+0x54>
        receivedChecksum -= hibus->buffer[i];
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	89fa      	ldrh	r2, [r7, #14]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8000ba8:	7b7b      	ldrb	r3, [r7, #13]
 8000baa:	3301      	adds	r3, #1
 8000bac:	737b      	strb	r3, [r7, #13]
 8000bae:	7b7b      	ldrb	r3, [r7, #13]
 8000bb0:	2b1d      	cmp	r3, #29
 8000bb2:	d9f0      	bls.n	8000b96 <FSA8S_RC_Checksum+0x3c>
    }

    if (sentChecksum == receivedChecksum) {
 8000bb4:	897a      	ldrh	r2, [r7, #10]
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d101      	bne.n	8000bc0 <FSA8S_RC_Checksum+0x66>
        return true;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e000      	b.n	8000bc2 <FSA8S_RC_Checksum+0x68>
    } else {
        return false;
 8000bc0:	2300      	movs	r3, #0
    }
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <FSA8S_RC_AmendData>:

static void FSA8S_RC_AmendData(iBus_HandleTypeDef_t * hibus) {
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]

    uint16_t channelValue;

    for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	737b      	strb	r3, [r7, #13]
 8000bda:	e034      	b.n	8000c46 <FSA8S_RC_AmendData+0x78>

        channelValue = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	81fb      	strh	r3, [r7, #14]

        channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i]));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	7b7b      	ldrb	r3, [r7, #13]
 8000be6:	3301      	adds	r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6859      	ldr	r1, [r3, #4]
 8000bf4:	7b7b      	ldrb	r3, [r7, #13]
 8000bf6:	440b      	add	r3, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	81fb      	strh	r3, [r7, #14]

        if ((1000 <= channelValue) && (2000 >= channelValue)) {
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c08:	d308      	bcc.n	8000c1c <FSA8S_RC_AmendData+0x4e>
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
 8000c0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c10:	d804      	bhi.n	8000c1c <FSA8S_RC_AmendData+0x4e>
            channelValue -= 1000;
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c18:	81fb      	strh	r3, [r7, #14]
 8000c1a:	e001      	b.n	8000c20 <FSA8S_RC_AmendData+0x52>
        } else {
            channelValue = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	81fb      	strh	r3, [r7, #14]
        }

        hibus->data[(i - 2) / 2] = channelValue * (IBUS_CHANNEL_MAX_VALUE / 1000);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	7b7b      	ldrb	r3, [r7, #13]
 8000c26:	3b02      	subs	r3, #2
 8000c28:	0fd9      	lsrs	r1, r3, #31
 8000c2a:	440b      	add	r3, r1
 8000c2c:	105b      	asrs	r3, r3, #1
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	441a      	add	r2, r3
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	4619      	mov	r1, r3
 8000c36:	0089      	lsls	r1, r1, #2
 8000c38:	440b      	add	r3, r1
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	8013      	strh	r3, [r2, #0]
    for (uint8_t i = 2; i <= (hibus->bufferSize - 2); i += 2) {
 8000c40:	7b7b      	ldrb	r3, [r7, #13]
 8000c42:	3302      	adds	r3, #2
 8000c44:	737b      	strb	r3, [r7, #13]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7a1b      	ldrb	r3, [r3, #8]
 8000c4a:	1e5a      	subs	r2, r3, #1
 8000c4c:	7b7b      	ldrb	r3, [r7, #13]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dcc4      	bgt.n	8000bdc <FSA8S_RC_AmendData+0xe>
    }
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <FSA8S_RC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
iBus_HandleTypeDef_t * FSA8S_RC_Init(UART_HandleTypeDef * huart, uint8_t * buffer) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]

#ifdef USE_FREERTOS
    iBus_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(iBus_HandleTypeDef_t));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    iBus_HandleTypeDef_t * hibus = malloc(sizeof(iBus_HandleTypeDef_t));
 8000c6a:	2014      	movs	r0, #20
 8000c6c:	f007 fa8e 	bl	800818c <malloc>
 8000c70:	4603      	mov	r3, r0
 8000c72:	60fb      	str	r3, [r7, #12]
    uint16_t * data = malloc(sizeof(uint16_t));
 8000c74:	2002      	movs	r0, #2
 8000c76:	f007 fa89 	bl	800818c <malloc>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	60bb      	str	r3, [r7, #8]
#endif

    if (hibus) {
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00e      	beq.n	8000ca2 <FSA8S_RC_Init+0x42>
        hibus->huart = huart;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2220      	movs	r2, #32
 8000c94:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	220e      	movs	r2, #14
 8000ca0:	741a      	strb	r2, [r3, #16]
    }

    if (iBus_Init(hibus)) {
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff ff1a 	bl	8000adc <iBus_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <FSA8S_RC_Init+0x52>
        return hibus;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	e000      	b.n	8000cb4 <FSA8S_RC_Init+0x54>
    } else {
        return NULL;
 8000cb2:	2300      	movs	r3, #0
    }
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <FSA8S_RC_ReadChannel>:

uint16_t FSA8S_RC_ReadChannel(iBus_HandleTypeDef_t * hibus, FSA8S_RC_CHANNEL_t channel) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]

    FSA8S_RC_CheckFirstByte(hibus);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff2e 	bl	8000b2a <FSA8S_RC_CheckFirstByte>
    FSA8S_RC_Checksum(hibus);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff43 	bl	8000b5a <FSA8S_RC_Checksum>
    FSA8S_RC_AmendData(hibus);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff7a 	bl	8000bce <FSA8S_RC_AmendData>

    return hibus->data[channel - 1];
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	881b      	ldrh	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f94f 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fd4a 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f967 	bl	800102a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000210 	.word	0x20000210

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000210 	.word	0x20000210

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff feb6 	bl	8000dc0 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e099      	b.n	8001194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2202      	movs	r2, #2
 8001064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001080:	e00f      	b.n	80010a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001082:	f7ff fe9d 	bl	8000dc0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b05      	cmp	r3, #5
 800108e:	d908      	bls.n	80010a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e078      	b.n	8001194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1e8      	bne.n	8001082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_DMA_Init+0x158>)
 80010bc:	4013      	ands	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d107      	bne.n	800110c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4313      	orrs	r3, r2
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f023 0307 	bic.w	r3, r3, #7
 8001122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	4313      	orrs	r3, r2
 800112c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	2b04      	cmp	r3, #4
 8001134:	d117      	bne.n	8001166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4313      	orrs	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00e      	beq.n	8001166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f8e5 	bl	8001318 <DMA_CheckFifoParam>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2240      	movs	r2, #64	; 0x40
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001162:	2301      	movs	r3, #1
 8001164:	e016      	b.n	8001194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f89c 	bl	80012ac <DMA_CalcBaseAndBitshift>
 8001174:	4603      	mov	r3, r0
 8001176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	223f      	movs	r2, #63	; 0x3f
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	f010803f 	.word	0xf010803f

080011a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_DMA_Start_IT+0x26>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e040      	b.n	8001248 <HAL_DMA_Start_IT+0xa8>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12f      	bne.n	800123a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2202      	movs	r2, #2
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 f82e 	bl	8001250 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	223f      	movs	r2, #63	; 0x3f
 80011fa:	409a      	lsls	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0216 	orr.w	r2, r2, #22
 800120e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0208 	orr.w	r2, r2, #8
 8001226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e005      	b.n	8001246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001242:	2302      	movs	r3, #2
 8001244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001246:	7dfb      	ldrb	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800126c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b40      	cmp	r3, #64	; 0x40
 800127c:	d108      	bne.n	8001290 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800128e:	e007      	b.n	80012a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	60da      	str	r2, [r3, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3b10      	subs	r3, #16
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <DMA_CalcBaseAndBitshift+0x64>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <DMA_CalcBaseAndBitshift+0x68>)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d909      	bls.n	80012ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012e2:	f023 0303 	bic.w	r3, r3, #3
 80012e6:	1d1a      	adds	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	659a      	str	r2, [r3, #88]	; 0x58
 80012ec:	e007      	b.n	80012fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012f6:	f023 0303 	bic.w	r3, r3, #3
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	aaaaaaab 	.word	0xaaaaaaab
 8001314:	08008b70 	.word	0x08008b70

08001318 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d856      	bhi.n	80013e6 <DMA_CheckFifoParam+0xce>
 8001338:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <DMA_CheckFifoParam+0x28>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	08001351 	.word	0x08001351
 8001344:	08001363 	.word	0x08001363
 8001348:	08001351 	.word	0x08001351
 800134c:	080013e7 	.word	0x080013e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d046      	beq.n	80013ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001360:	e043      	b.n	80013ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800136a:	d140      	bne.n	80013ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001370:	e03d      	b.n	80013ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800137a:	d121      	bne.n	80013c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d837      	bhi.n	80013f2 <DMA_CheckFifoParam+0xda>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <DMA_CheckFifoParam+0x70>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001399 	.word	0x08001399
 800138c:	0800139f 	.word	0x0800139f
 8001390:	08001399 	.word	0x08001399
 8001394:	080013b1 	.word	0x080013b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
      break;
 800139c:	e030      	b.n	8001400 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d025      	beq.n	80013f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013ae:	e022      	b.n	80013f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013b8:	d11f      	bne.n	80013fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013be:	e01c      	b.n	80013fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d903      	bls.n	80013ce <DMA_CheckFifoParam+0xb6>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d003      	beq.n	80013d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013cc:	e018      	b.n	8001400 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
      break;
 80013d2:	e015      	b.n	8001400 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00e      	beq.n	80013fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
      break;
 80013e4:	e00b      	b.n	80013fe <DMA_CheckFifoParam+0xe6>
      break;
 80013e6:	bf00      	nop
 80013e8:	e00a      	b.n	8001400 <DMA_CheckFifoParam+0xe8>
      break;
 80013ea:	bf00      	nop
 80013ec:	e008      	b.n	8001400 <DMA_CheckFifoParam+0xe8>
      break;
 80013ee:	bf00      	nop
 80013f0:	e006      	b.n	8001400 <DMA_CheckFifoParam+0xe8>
      break;
 80013f2:	bf00      	nop
 80013f4:	e004      	b.n	8001400 <DMA_CheckFifoParam+0xe8>
      break;
 80013f6:	bf00      	nop
 80013f8:	e002      	b.n	8001400 <DMA_CheckFifoParam+0xe8>
      break;   
 80013fa:	bf00      	nop
 80013fc:	e000      	b.n	8001400 <DMA_CheckFifoParam+0xe8>
      break;
 80013fe:	bf00      	nop
    }
  } 
  
  return status; 
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e159      	b.n	80016e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8148 	bne.w	80016da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	2b02      	cmp	r3, #2
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a2 	beq.w	80016da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <HAL_GPIO_Init+0x2e8>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a56      	ldr	r2, [pc, #344]	; (80016f8 <HAL_GPIO_Init+0x2e8>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <HAL_GPIO_Init+0x2e8>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b2:	4a52      	ldr	r2, [pc, #328]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a49      	ldr	r2, [pc, #292]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x202>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a48      	ldr	r2, [pc, #288]	; (8001704 <HAL_GPIO_Init+0x2f4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x1fe>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a47      	ldr	r2, [pc, #284]	; (8001708 <HAL_GPIO_Init+0x2f8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x1fa>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a46      	ldr	r2, [pc, #280]	; (800170c <HAL_GPIO_Init+0x2fc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x1f6>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a45      	ldr	r2, [pc, #276]	; (8001710 <HAL_GPIO_Init+0x300>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x1f2>
 80015fe:	2304      	movs	r3, #4
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x204>
 8001602:	2307      	movs	r3, #7
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x204>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x204>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x204>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x204>
 8001612:	2300      	movs	r3, #0
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4093      	lsls	r3, r2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001624:	4935      	ldr	r1, [pc, #212]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_GPIO_Init+0x304>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <HAL_GPIO_Init+0x304>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_GPIO_Init+0x304>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a24      	ldr	r2, [pc, #144]	; (8001714 <HAL_GPIO_Init+0x304>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_GPIO_Init+0x304>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016aa:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d4:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	f67f aea2 	bls.w	800142c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40013800 	.word	0x40013800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40013c00 	.word	0x40013c00

08001718 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	b08f      	sub	sp, #60	; 0x3c
 800171c:	af0a      	add	r7, sp, #40	; 0x28
 800171e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e10f      	b.n	800194a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d106      	bne.n	800174a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f006 fa17 	bl	8007b78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fcfe 	bl	800416a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	687e      	ldr	r6, [r7, #4]
 8001776:	466d      	mov	r5, sp
 8001778:	f106 0410 	add.w	r4, r6, #16
 800177c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001784:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001788:	e885 0003 	stmia.w	r5, {r0, r1}
 800178c:	1d33      	adds	r3, r6, #4
 800178e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f002 fbd5 	bl	8003f40 <USB_CoreInit>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2202      	movs	r2, #2
 80017a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0d0      	b.n	800194a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fcec 	bl	800418c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e04a      	b.n	8001850 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	333d      	adds	r3, #61	; 0x3d
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	333c      	adds	r3, #60	; 0x3c
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	b298      	uxth	r0, r3
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	3344      	adds	r3, #68	; 0x44
 80017f6:	4602      	mov	r2, r0
 80017f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	3340      	adds	r3, #64	; 0x40
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3348      	adds	r3, #72	; 0x48
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	334c      	adds	r3, #76	; 0x4c
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3354      	adds	r3, #84	; 0x54
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	3301      	adds	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	d3af      	bcc.n	80017ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e044      	b.n	80018ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3301      	adds	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d3b5      	bcc.n	8001860 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	687e      	ldr	r6, [r7, #4]
 80018fc:	466d      	mov	r5, sp
 80018fe:	f106 0410 	add.w	r4, r6, #16
 8001902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800190e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001912:	1d33      	adds	r3, r6, #4
 8001914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001916:	6838      	ldr	r0, [r7, #0]
 8001918:	f002 fc84 	bl	8004224 <USB_DevInit>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00d      	b.n	800194a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fdd3 	bl	80054ee <USB_DevDisconnect>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001952 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_PCD_Start+0x1c>
 800196a:	2302      	movs	r3, #2
 800196c:	e020      	b.n	80019b0 <HAL_PCD_Start+0x5e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	2b01      	cmp	r3, #1
 800197c:	d109      	bne.n	8001992 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001982:	2b01      	cmp	r3, #1
 8001984:	d005      	beq.n	8001992 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fbd6 	bl	8004148 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fd83 	bl	80054ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b08d      	sub	sp, #52	; 0x34
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fe41 	bl	8005656 <USB_GetMode>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 848a 	bne.w	80022f0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fda5 	bl	8005530 <USB_ReadInterrupts>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8480 	beq.w	80022ee <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fd92 	bl	8005530 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d107      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f002 0202 	and.w	r2, r2, #2
 8001a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fd80 	bl	8005530 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d161      	bne.n	8001afe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0210 	bic.w	r2, r2, #16
 8001a48:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f003 020f 	and.w	r2, r3, #15
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	3304      	adds	r3, #4
 8001a68:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	0c5b      	lsrs	r3, r3, #17
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d124      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d035      	beq.n	8001aee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	6a38      	ldr	r0, [r7, #32]
 8001a96:	f003 fbb7 	bl	8005208 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa6:	441a      	add	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	6a1a      	ldr	r2, [r3, #32]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab8:	441a      	add	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	621a      	str	r2, [r3, #32]
 8001abe:	e016      	b.n	8001aee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	0c5b      	lsrs	r3, r3, #17
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	2b06      	cmp	r3, #6
 8001aca:	d110      	bne.n	8001aee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	6a38      	ldr	r0, [r7, #32]
 8001ad8:	f003 fb96 	bl	8005208 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae8:	441a      	add	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0210 	orr.w	r2, r2, #16
 8001afc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 fd14 	bl	8005530 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b12:	f040 80a7 	bne.w	8001c64 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fd19 	bl	8005556 <USB_ReadDevAllOutEpInterrupt>
 8001b24:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b26:	e099      	b.n	8001c5c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 808e 	beq.w	8001c50 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fd3d 	bl	80055be <USB_ReadDevOutEPInterrupt>
 8001b44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00c      	beq.n	8001b6a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2301      	movs	r3, #1
 8001b60:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fec3 	bl	80028f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00c      	beq.n	8001b8e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	015a      	lsls	r2, r3, #5
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b80:	461a      	mov	r2, r3
 8001b82:	2308      	movs	r3, #8
 8001b84:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 ff99 	bl	8002ac0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d030      	beq.n	8001c16 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbc:	2b80      	cmp	r3, #128	; 0x80
 8001bbe:	d109      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	3304      	adds	r3, #4
 8001be8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	78db      	ldrb	r3, [r3, #3]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f006 f8b6 	bl	8007d70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c10:	461a      	mov	r2, r3
 8001c12:	2302      	movs	r3, #2
 8001c14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2320      	movs	r3, #32
 8001c30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	3301      	adds	r3, #1
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f47f af62 	bne.w	8001b28 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fc61 	bl	8005530 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c78:	f040 80db 	bne.w	8001e32 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fc82 	bl	800558a <USB_ReadDevAllInEpInterrupt>
 8001c86:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c8c:	e0cd      	b.n	8001e2a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80c2 	beq.w	8001e1e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 fca8 	bl	80055fa <USB_ReadDevInEPInterrupt>
 8001caa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d057      	beq.n	8001d66 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69f9      	ldr	r1, [r7, #28]
 8001cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2301      	movs	r3, #1
 8001cea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d132      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	334c      	adds	r3, #76	; 0x4c
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4403      	add	r3, r0
 8001d14:	3348      	adds	r3, #72	; 0x48
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4419      	add	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4403      	add	r3, r0
 8001d28:	334c      	adds	r3, #76	; 0x4c
 8001d2a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d113      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x3a2>
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3354      	adds	r3, #84	; 0x54
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d108      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d52:	461a      	mov	r2, r3
 8001d54:	2101      	movs	r1, #1
 8001d56:	f003 fcaf 	bl	80056b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f005 ff8a 	bl	8007c7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2308      	movs	r3, #8
 8001d80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db4:	461a      	mov	r2, r3
 8001db6:	2340      	movs	r3, #64	; 0x40
 8001db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d023      	beq.n	8001e0c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dc6:	6a38      	ldr	r0, [r7, #32]
 8001dc8:	f002 fb90 	bl	80044ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	3338      	adds	r3, #56	; 0x38
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	3304      	adds	r3, #4
 8001dde:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	78db      	ldrb	r3, [r3, #3]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d108      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2200      	movs	r2, #0
 8001dec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f005 ffcd 	bl	8007d94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e06:	461a      	mov	r2, r3
 8001e08:	2302      	movs	r3, #2
 8001e0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fcdb 	bl	80027d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	3301      	adds	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f47f af2e 	bne.w	8001c8e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 fb7a 	bl	8005530 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e46:	d122      	bne.n	8001e8e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e6e:	2100      	movs	r1, #0
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fec3 	bl	8002bfc <HAL_PCDEx_LPM_Callback>
 8001e76:	e002      	b.n	8001e7e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f005 ff6b 	bl	8007d54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fb4c 	bl	8005530 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ea2:	d112      	bne.n	8001eca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d102      	bne.n	8001eba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f005 ff27 	bl	8007d08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ec8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fb2e 	bl	8005530 <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ede:	f040 80b7 	bne.w	8002050 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2110      	movs	r1, #16
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 faf5 	bl	80044ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f06:	e046      	b.n	8001f96 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f14:	461a      	mov	r2, r3
 8001f16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f2c:	0151      	lsls	r1, r2, #5
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	440a      	add	r2, r1
 8001f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f60:	0151      	lsls	r1, r2, #5
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	440a      	add	r2, r1
 8001f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f80:	0151      	lsls	r1, r2, #5
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	440a      	add	r2, r1
 8001f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	3301      	adds	r3, #1
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d3b3      	bcc.n	8001f08 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fb2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d016      	beq.n	8001fea <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fcc:	f043 030b 	orr.w	r3, r3, #11
 8001fd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe2:	f043 030b 	orr.w	r3, r3, #11
 8001fe6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe8:	e015      	b.n	8002016 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ffc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002000:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002010:	f043 030b 	orr.w	r3, r3, #11
 8002014:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002024:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002028:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800203a:	461a      	mov	r2, r3
 800203c:	f003 fb3c 	bl	80056b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800204e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fa6b 	bl	8005530 <USB_ReadInterrupts>
 800205a:	4603      	mov	r3, r0
 800205c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002064:	d124      	bne.n	80020b0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fb01 	bl	8005672 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 fab6 	bl	80045e6 <USB_GetDevSpeed>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681c      	ldr	r4, [r3, #0]
 8002086:	f001 f9e9 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800208a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	4620      	mov	r0, r4
 8002096:	f001 ffb5 	bl	8004004 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f005 fe15 	bl	8007cca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 fa3b 	bl	8005530 <USB_ReadInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d10a      	bne.n	80020da <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f005 fdf2 	bl	8007cae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f002 0208 	and.w	r2, r2, #8
 80020d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fa26 	bl	8005530 <USB_ReadInterrupts>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b80      	cmp	r3, #128	; 0x80
 80020ec:	d122      	bne.n	8002134 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020fa:	2301      	movs	r3, #1
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	e014      	b.n	800212a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4619      	mov	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fb27 	bl	8002772 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	3301      	adds	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	429a      	cmp	r2, r3
 8002132:	d3e5      	bcc.n	8002100 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f003 f9f9 	bl	8005530 <USB_ReadInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002148:	d13b      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800214a:	2301      	movs	r3, #1
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	e02b      	b.n	80021a8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3340      	adds	r3, #64	; 0x40
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d115      	bne.n	80021a2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002176:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002178:	2b00      	cmp	r3, #0
 800217a:	da12      	bge.n	80021a2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	333f      	adds	r3, #63	; 0x3f
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fae8 	bl	8002772 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	3301      	adds	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d3ce      	bcc.n	8002150 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 f9b2 	bl	8005530 <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021d6:	d155      	bne.n	8002284 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d8:	2301      	movs	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
 80021dc:	e045      	b.n	800226a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d12e      	bne.n	8002264 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002206:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	da2b      	bge.n	8002264 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002218:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800221c:	429a      	cmp	r2, r3
 800221e:	d121      	bne.n	8002264 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800225c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002260:	6053      	str	r3, [r2, #4]
            break;
 8002262:	e007      	b.n	8002274 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	3301      	adds	r3, #1
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	429a      	cmp	r2, r3
 8002272:	d3b4      	bcc.n	80021de <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f003 f951 	bl	8005530 <USB_ReadInterrupts>
 800228e:	4603      	mov	r3, r0
 8002290:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d10a      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f005 fd8c 	bl	8007db8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 f93b 	bl	8005530 <USB_ReadInterrupts>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d115      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f005 fd7c 	bl	8007dd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	e000      	b.n	80022f0 <HAL_PCD_IRQHandler+0x938>
      return;
 80022ee:	bf00      	nop
    }
  }
}
 80022f0:	3734      	adds	r7, #52	; 0x34
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}

080022f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_PCD_SetAddress+0x1a>
 800230c:	2302      	movs	r3, #2
 800230e:	e013      	b.n	8002338 <HAL_PCD_SetAddress+0x42>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f003 f899 	bl	8005460 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	70fb      	strb	r3, [r7, #3]
 8002352:	460b      	mov	r3, r1
 8002354:	803b      	strh	r3, [r7, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800235e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002362:	2b00      	cmp	r3, #0
 8002364:	da0f      	bge.n	8002386 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	3338      	adds	r3, #56	; 0x38
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	705a      	strb	r2, [r3, #1]
 8002384:	e00f      	b.n	80023a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 020f 	and.w	r2, r3, #15
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	3304      	adds	r3, #4
 800239e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023b2:	883a      	ldrh	r2, [r7, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	78ba      	ldrb	r2, [r7, #2]
 80023bc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	785b      	ldrb	r3, [r3, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023d0:	78bb      	ldrb	r3, [r7, #2]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d102      	bne.n	80023dc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_PCD_EP_Open+0xaa>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e00e      	b.n	8002408 <HAL_PCD_EP_Open+0xc8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68f9      	ldr	r1, [r7, #12]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 f919 	bl	8004630 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002406:	7afb      	ldrb	r3, [r7, #11]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800241c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da0f      	bge.n	8002444 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	3338      	adds	r3, #56	; 0x38
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	3304      	adds	r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	705a      	strb	r2, [r3, #1]
 8002442:	e00f      	b.n	8002464 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	f003 020f 	and.w	r2, r3, #15
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	3304      	adds	r3, #4
 800245c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	b2da      	uxtb	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_EP_Close+0x6e>
 800247a:	2302      	movs	r3, #2
 800247c:	e00e      	b.n	800249c <HAL_PCD_EP_Close+0x8c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 f957 	bl	8004740 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	460b      	mov	r3, r1
 80024b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	f003 020f 	and.w	r2, r3, #15
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	3304      	adds	r3, #4
 80024cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2200      	movs	r2, #0
 80024e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002500:	7afb      	ldrb	r3, [r7, #11]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	6979      	ldr	r1, [r7, #20]
 8002518:	f002 fc36 	bl	8004d88 <USB_EP0StartXfer>
 800251c:	e008      	b.n	8002530 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6979      	ldr	r1, [r7, #20]
 800252c:	f002 f9e4 	bl	80048f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800255c:	681b      	ldr	r3, [r3, #0]
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	460b      	mov	r3, r1
 8002578:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257a:	7afb      	ldrb	r3, [r7, #11]
 800257c:	f003 020f 	and.w	r2, r3, #15
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	3338      	adds	r3, #56	; 0x38
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	3304      	adds	r3, #4
 8002590:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2200      	movs	r2, #0
 80025a2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2201      	movs	r2, #1
 80025a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d102      	bne.n	80025c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c4:	7afb      	ldrb	r3, [r7, #11]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6979      	ldr	r1, [r7, #20]
 80025dc:	f002 fbd4 	bl	8004d88 <USB_EP0StartXfer>
 80025e0:	e008      	b.n	80025f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	6979      	ldr	r1, [r7, #20]
 80025f0:	f002 f982 	bl	80048f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	f003 020f 	and.w	r2, r3, #15
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	d901      	bls.n	800261c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e050      	b.n	80026be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800261c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002620:	2b00      	cmp	r3, #0
 8002622:	da0f      	bge.n	8002644 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	f003 020f 	and.w	r2, r3, #15
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	3338      	adds	r3, #56	; 0x38
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	3304      	adds	r3, #4
 800263a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	705a      	strb	r2, [r3, #1]
 8002642:	e00d      	b.n	8002660 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	3304      	adds	r3, #4
 8002658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_PCD_EP_SetStall+0x82>
 800267c:	2302      	movs	r3, #2
 800267e:	e01e      	b.n	80026be <HAL_PCD_EP_SetStall+0xc0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68f9      	ldr	r1, [r7, #12]
 800268e:	4618      	mov	r0, r3
 8002690:	f002 fe12 	bl	80052b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	b2d9      	uxtb	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026ae:	461a      	mov	r2, r3
 80026b0:	f003 f802 	bl	80056b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	f003 020f 	and.w	r2, r3, #15
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d901      	bls.n	80026e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e042      	b.n	800276a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da0f      	bge.n	800270c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 020f 	and.w	r2, r3, #15
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	3338      	adds	r3, #56	; 0x38
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	3304      	adds	r3, #4
 8002702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	705a      	strb	r2, [r3, #1]
 800270a:	e00f      	b.n	800272c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	f003 020f 	and.w	r2, r3, #15
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_PCD_EP_ClrStall+0x86>
 8002748:	2302      	movs	r3, #2
 800274a:	e00e      	b.n	800276a <HAL_PCD_EP_ClrStall+0xa4>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fe1a 	bl	8005394 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800277e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002782:	2b00      	cmp	r3, #0
 8002784:	da0c      	bge.n	80027a0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	f003 020f 	and.w	r2, r3, #15
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	3338      	adds	r3, #56	; 0x38
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	3304      	adds	r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e00c      	b.n	80027ba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 020f 	and.w	r2, r3, #15
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68f9      	ldr	r1, [r7, #12]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f002 fc39 	bl	8005038 <USB_EPStopXfer>
 80027c6:	4603      	mov	r3, r0
 80027c8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027ca:	7afb      	ldrb	r3, [r7, #11]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af02      	add	r7, sp, #8
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	3338      	adds	r3, #56	; 0x38
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	429a      	cmp	r2, r3
 8002806:	d901      	bls.n	800280c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e06c      	b.n	80028e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	429a      	cmp	r2, r3
 8002820:	d902      	bls.n	8002828 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3303      	adds	r3, #3
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002830:	e02b      	b.n	800288a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	429a      	cmp	r2, r3
 8002846:	d902      	bls.n	800284e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3303      	adds	r3, #3
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6919      	ldr	r1, [r3, #16]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002866:	b2db      	uxtb	r3, r3
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	4603      	mov	r3, r0
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f002 fc8d 	bl	800518c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	441a      	add	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	441a      	add	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	429a      	cmp	r2, r3
 800289e:	d809      	bhi.n	80028b4 <PCD_WriteEmptyTxFifo+0xe0>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a1a      	ldr	r2, [r3, #32]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d203      	bcs.n	80028b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1be      	bne.n	8002832 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d811      	bhi.n	80028e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	2201      	movs	r2, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	43db      	mvns	r3, r3
 80028da:	6939      	ldr	r1, [r7, #16]
 80028dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028e0:	4013      	ands	r3, r2
 80028e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	333c      	adds	r3, #60	; 0x3c
 8002908:	3304      	adds	r3, #4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d17b      	bne.n	8002a1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	4a61      	ldr	r2, [pc, #388]	; (8002ab8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	f240 80b9 	bls.w	8002aac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80b3 	beq.w	8002aac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002952:	461a      	mov	r2, r3
 8002954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002958:	6093      	str	r3, [r2, #8]
 800295a:	e0a7      	b.n	8002aac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002972:	461a      	mov	r2, r3
 8002974:	2320      	movs	r3, #32
 8002976:	6093      	str	r3, [r2, #8]
 8002978:	e098      	b.n	8002aac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 8093 	bne.w	8002aac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4a4b      	ldr	r2, [pc, #300]	; (8002ab8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d90f      	bls.n	80029ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a4:	461a      	mov	r2, r3
 80029a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029aa:	6093      	str	r3, [r2, #8]
 80029ac:	e07e      	b.n	8002aac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	3304      	adds	r3, #4
 80029c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	0159      	lsls	r1, r3, #5
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	440b      	add	r3, r1
 80029d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	1ad2      	subs	r2, r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d114      	bne.n	8002a10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029f8:	461a      	mov	r2, r3
 80029fa:	2101      	movs	r1, #1
 80029fc:	f002 fe5c 	bl	80056b8 <USB_EP0_OutStart>
 8002a00:	e006      	b.n	8002a10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	441a      	add	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f005 f914 	bl	8007c44 <HAL_PCD_DataOutStageCallback>
 8002a1c:	e046      	b.n	8002aac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d124      	bne.n	8002a70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a42:	6093      	str	r3, [r2, #8]
 8002a44:	e032      	b.n	8002aac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2320      	movs	r3, #32
 8002a60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f005 f8eb 	bl	8007c44 <HAL_PCD_DataOutStageCallback>
 8002a6e:	e01d      	b.n	8002aac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d114      	bne.n	8002aa0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d108      	bne.n	8002aa0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	f002 fe0c 	bl	80056b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f005 f8cc 	bl	8007c44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	4f54300a 	.word	0x4f54300a
 8002abc:	4f54310a 	.word	0x4f54310a

08002ac0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	333c      	adds	r3, #60	; 0x3c
 8002ad8:	3304      	adds	r3, #4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d90e      	bls.n	8002b14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f005 f883 	bl	8007c20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d90c      	bls.n	8002b3c <PCD_EP_OutSetupPacket_int+0x7c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d108      	bne.n	8002b3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b34:	461a      	mov	r2, r3
 8002b36:	2101      	movs	r1, #1
 8002b38:	f002 fdbe 	bl	80056b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	4f54300a 	.word	0x4f54300a

08002b4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d107      	bne.n	8002b7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b6a:	883b      	ldrh	r3, [r7, #0]
 8002b6c:	0419      	lsls	r1, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
 8002b78:	e028      	b.n	8002bcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	4413      	add	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e00d      	b.n	8002baa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	3340      	adds	r3, #64	; 0x40
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3ec      	bcc.n	8002b8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bb4:	883b      	ldrh	r3, [r7, #0]
 8002bb6:	0418      	lsls	r0, r3, #16
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	4302      	orrs	r2, r0
 8002bc4:	3340      	adds	r3, #64	; 0x40
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e267      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d075      	beq.n	8002d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c32:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d00c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b85      	ldr	r3, [pc, #532]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d112      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4a:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	4b7e      	ldr	r3, [pc, #504]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05b      	beq.n	8002d1c <HAL_RCC_OscConfig+0x108>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d157      	bne.n	8002d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e242      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d106      	bne.n	8002c88 <HAL_RCC_OscConfig+0x74>
 8002c7a:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a75      	ldr	r2, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e01d      	b.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x98>
 8002c92:	4b70      	ldr	r3, [pc, #448]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6f      	ldr	r2, [pc, #444]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6c      	ldr	r2, [pc, #432]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
 8002cac:	4b69      	ldr	r3, [pc, #420]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a68      	ldr	r2, [pc, #416]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe f878 	bl	8000dc0 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe f874 	bl	8000dc0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e207      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b5b      	ldr	r3, [pc, #364]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xc0>
 8002cf2:	e014      	b.n	8002d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f864 	bl	8000dc0 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe f860 	bl	8000dc0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1f3      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0xe8>
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d063      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d11c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d42:	4b44      	ldr	r3, [pc, #272]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d116      	bne.n	8002d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_RCC_OscConfig+0x152>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e1c7      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	e03a      	b.n	8002df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_OscConfig+0x244>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe f819 	bl	8000dc0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe f815 	bl	8000dc0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1a8      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4925      	ldr	r1, [pc, #148]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x244>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fd fff8 	bl	8000dc0 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fd fff4 	bl	8000dc0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e187      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d036      	beq.n	8002e6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_RCC_OscConfig+0x248>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fd ffd8 	bl	8000dc0 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fd ffd4 	bl	8000dc0 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e167      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x200>
 8002e32:	e01b      	b.n	8002e6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x248>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7fd ffc1 	bl	8000dc0 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	e00e      	b.n	8002e60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fd ffbd 	bl	8000dc0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d907      	bls.n	8002e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e150      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
 8002e54:	40023800 	.word	0x40023800
 8002e58:	42470000 	.word	0x42470000
 8002e5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ea      	bne.n	8002e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8097 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10f      	bne.n	8002eaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	4b7d      	ldr	r3, [pc, #500]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a7c      	ldr	r2, [pc, #496]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b77      	ldr	r3, [pc, #476]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb6:	4b74      	ldr	r3, [pc, #464]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a73      	ldr	r2, [pc, #460]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fd ff7d 	bl	8000dc0 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fd ff79 	bl	8000dc0 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e10c      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x2ea>
 8002ef0:	4b64      	ldr	r3, [pc, #400]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a63      	ldr	r2, [pc, #396]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
 8002efc:	e01c      	b.n	8002f38 <HAL_RCC_OscConfig+0x324>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x30c>
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a5e      	ldr	r2, [pc, #376]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a5b      	ldr	r2, [pc, #364]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0x324>
 8002f20:	4b58      	ldr	r3, [pc, #352]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a57      	ldr	r2, [pc, #348]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	4b55      	ldr	r3, [pc, #340]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a54      	ldr	r2, [pc, #336]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f32:	f023 0304 	bic.w	r3, r3, #4
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fd ff3e 	bl	8000dc0 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fd ff3a 	bl	8000dc0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0cb      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	4b49      	ldr	r3, [pc, #292]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ee      	beq.n	8002f48 <HAL_RCC_OscConfig+0x334>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7fd ff28 	bl	8000dc0 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7fd ff24 	bl	8000dc0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0b5      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1ee      	bne.n	8002f74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9c:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a38      	ldr	r2, [pc, #224]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a1 	beq.w	80030f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d05c      	beq.n	8003078 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d141      	bne.n	800304a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_RCC_OscConfig+0x478>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fd fef8 	bl	8000dc0 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fd fef4 	bl	8000dc0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e087      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	019b      	lsls	r3, r3, #6
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	491b      	ldr	r1, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x478>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fd fecd 	bl	8000dc0 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302a:	f7fd fec9 	bl	8000dc0 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e05c      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x416>
 8003048:	e054      	b.n	80030f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_RCC_OscConfig+0x478>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fd feb6 	bl	8000dc0 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fd feb2 	bl	8000dc0 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e045      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x444>
 8003076:	e03d      	b.n	80030f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d107      	bne.n	8003090 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e038      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
 8003084:	40023800 	.word	0x40023800
 8003088:	40007000 	.word	0x40007000
 800308c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_RCC_OscConfig+0x4ec>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d028      	beq.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d121      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d11a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d111      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0cc      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d90c      	bls.n	8003140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d044      	beq.n	8003224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d119      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e067      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4934      	ldr	r1, [pc, #208]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7fd fde4 	bl	8000dc0 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fd fde0 	bl	8000dc0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e04f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d20c      	bcs.n	800324c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd fd44 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08008b58 	.word	0x08008b58
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b090      	sub	sp, #64	; 0x40
 80032d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	637b      	str	r3, [r7, #52]	; 0x34
 80032dc:	2300      	movs	r3, #0
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e0:	2300      	movs	r3, #0
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e8:	4b59      	ldr	r3, [pc, #356]	; (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d00d      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x40>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	f200 80a1 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x16c>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x3a>
 8003302:	e09b      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_GetSysClockFreq+0x184>)
 8003306:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003308:	e09b      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCC_GetSysClockFreq+0x188>)
 800330c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800330e:	e098      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003310:	4b4f      	ldr	r3, [pc, #316]	; (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331a:	4b4d      	ldr	r3, [pc, #308]	; (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d028      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b4a      	ldr	r3, [pc, #296]	; (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	2200      	movs	r2, #0
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	627a      	str	r2, [r7, #36]	; 0x24
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003338:	2100      	movs	r1, #0
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCC_GetSysClockFreq+0x188>)
 800333c:	fb03 f201 	mul.w	r2, r3, r1
 8003340:	2300      	movs	r3, #0
 8003342:	fb00 f303 	mul.w	r3, r0, r3
 8003346:	4413      	add	r3, r2
 8003348:	4a43      	ldr	r2, [pc, #268]	; (8003458 <HAL_RCC_GetSysClockFreq+0x188>)
 800334a:	fba0 1202 	umull	r1, r2, r0, r2
 800334e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003350:	460a      	mov	r2, r1
 8003352:	62ba      	str	r2, [r7, #40]	; 0x28
 8003354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003356:	4413      	add	r3, r2
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	2200      	movs	r2, #0
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	61fa      	str	r2, [r7, #28]
 8003362:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800336a:	f7fc ff89 	bl	8000280 <__aeabi_uldivmod>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4613      	mov	r3, r2
 8003374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003376:	e053      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	2200      	movs	r2, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	617a      	str	r2, [r7, #20]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800338a:	f04f 0b00 	mov.w	fp, #0
 800338e:	4652      	mov	r2, sl
 8003390:	465b      	mov	r3, fp
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f04f 0100 	mov.w	r1, #0
 800339a:	0159      	lsls	r1, r3, #5
 800339c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a0:	0150      	lsls	r0, r2, #5
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	ebb2 080a 	subs.w	r8, r2, sl
 80033aa:	eb63 090b 	sbc.w	r9, r3, fp
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033c2:	ebb2 0408 	subs.w	r4, r2, r8
 80033c6:	eb63 0509 	sbc.w	r5, r3, r9
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	00eb      	lsls	r3, r5, #3
 80033d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d8:	00e2      	lsls	r2, r4, #3
 80033da:	4614      	mov	r4, r2
 80033dc:	461d      	mov	r5, r3
 80033de:	eb14 030a 	adds.w	r3, r4, sl
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	eb45 030b 	adc.w	r3, r5, fp
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f6:	4629      	mov	r1, r5
 80033f8:	028b      	lsls	r3, r1, #10
 80033fa:	4621      	mov	r1, r4
 80033fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003400:	4621      	mov	r1, r4
 8003402:	028a      	lsls	r2, r1, #10
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	2200      	movs	r2, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	60fa      	str	r2, [r7, #12]
 8003410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003414:	f7fc ff34 	bl	8000280 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetSysClockFreq+0x184>)
 800343e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003444:	4618      	mov	r0, r3
 8003446:	3740      	adds	r7, #64	; 0x40
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	00f42400 	.word	0x00f42400
 8003458:	017d7840 	.word	0x017d7840

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_RCC_GetHCLKFreq+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000000 	.word	0x20000000

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff0 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0a9b      	lsrs	r3, r3, #10
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	08008b68 	.word	0x08008b68

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034a0:	f7ff ffdc 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0b5b      	lsrs	r3, r3, #13
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	08008b68 	.word	0x08008b68

080034c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e03f      	b.n	8003556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd f990 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	; 0x24
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 faa5 	bl	8003a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	4613      	mov	r3, r2
 800356a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b20      	cmp	r3, #32
 8003576:	d11d      	bne.n	80035b4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_UART_Receive_DMA+0x26>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e016      	b.n	80035b6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_UART_Receive_DMA+0x38>
 8003592:	2302      	movs	r3, #2
 8003594:	e00f      	b.n	80035b6 <HAL_UART_Receive_DMA+0x58>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f92a 	bl	8003804 <UART_Start_Receive_DMA>
 80035b0:	4603      	mov	r3, r0
 80035b2:	e000      	b.n	80035b6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
  }
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b09c      	sub	sp, #112	; 0x70
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d172      	bne.n	8003714 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800362e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003630:	2200      	movs	r2, #0
 8003632:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003646:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800364a:	66bb      	str	r3, [r7, #104]	; 0x68
 800364c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003654:	65ba      	str	r2, [r7, #88]	; 0x58
 8003656:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800365a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	667b      	str	r3, [r7, #100]	; 0x64
 8003680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003688:	647a      	str	r2, [r7, #68]	; 0x44
 800368a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800368e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3314      	adds	r3, #20
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	623b      	str	r3, [r7, #32]
   return(result);
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b2:	663b      	str	r3, [r7, #96]	; 0x60
 80036b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3314      	adds	r3, #20
 80036ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036bc:	633a      	str	r2, [r7, #48]	; 0x30
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e5      	bne.n	800369c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d119      	bne.n	8003714 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0310 	bic.w	r3, r3, #16
 80036f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003700:	61fa      	str	r2, [r7, #28]
 8003702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	617b      	str	r3, [r7, #20]
   return(result);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	2b01      	cmp	r3, #1
 800371a:	d106      	bne.n	800372a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800371c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003720:	4619      	mov	r1, r3
 8003722:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003724:	f7ff ff69 	bl	80035fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003728:	e002      	b.n	8003730 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800372a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800372c:	f7ff ff47 	bl	80035be <HAL_UART_RxCpltCallback>
}
 8003730:	bf00      	nop
 8003732:	3770      	adds	r7, #112	; 0x70
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	2b01      	cmp	r3, #1
 800374c:	d108      	bne.n	8003760 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	b29b      	uxth	r3, r3
 8003756:	4619      	mov	r1, r3
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff ff4e 	bl	80035fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800375e:	e002      	b.n	8003766 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff ff36 	bl	80035d2 <HAL_UART_RxHalfCpltCallback>
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b80      	cmp	r3, #128	; 0x80
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b21      	cmp	r3, #33	; 0x21
 80037a0:	d108      	bne.n	80037b4 <UART_DMAError+0x46>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2200      	movs	r2, #0
 80037ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80037ae:	68b8      	ldr	r0, [r7, #8]
 80037b0:	f000 f8c6 	bl	8003940 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	bf0c      	ite	eq
 80037c2:	2301      	moveq	r3, #1
 80037c4:	2300      	movne	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b22      	cmp	r3, #34	; 0x22
 80037d4:	d108      	bne.n	80037e8 <UART_DMAError+0x7a>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2200      	movs	r2, #0
 80037e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80037e2:	68b8      	ldr	r0, [r7, #8]
 80037e4:	f000 f8d4 	bl	8003990 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f043 0210 	orr.w	r2, r3, #16
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037f4:	68b8      	ldr	r0, [r7, #8]
 80037f6:	f7ff fef6 	bl	80035e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b098      	sub	sp, #96	; 0x60
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2222      	movs	r2, #34	; 0x22
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	4a40      	ldr	r2, [pc, #256]	; (8003934 <UART_Start_Receive_DMA+0x130>)
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	4a3f      	ldr	r2, [pc, #252]	; (8003938 <UART_Start_Receive_DMA+0x134>)
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	4a3e      	ldr	r2, [pc, #248]	; (800393c <UART_Start_Receive_DMA+0x138>)
 8003842:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	2200      	movs	r2, #0
 800384a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	f7fd fc9c 	bl	80011a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d019      	beq.n	80038c2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ae:	64fa      	str	r2, [r7, #76]	; 0x4c
 80038b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80038bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e5      	bne.n	800388e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	657b      	str	r3, [r7, #84]	; 0x54
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3314      	adds	r3, #20
 80038e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e5      	bne.n	80038c2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3314      	adds	r3, #20
 80038fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	617b      	str	r3, [r7, #20]
   return(result);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800390c:	653b      	str	r3, [r7, #80]	; 0x50
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003916:	627a      	str	r2, [r7, #36]	; 0x24
 8003918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6a39      	ldr	r1, [r7, #32]
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	61fb      	str	r3, [r7, #28]
   return(result);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e5      	bne.n	80038f6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3760      	adds	r7, #96	; 0x60
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	08003613 	.word	0x08003613
 8003938:	08003739 	.word	0x08003739
 800393c:	0800376f 	.word	0x0800376f

08003940 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	60bb      	str	r3, [r7, #8]
   return(result);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	61ba      	str	r2, [r7, #24]
 800396a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6979      	ldr	r1, [r7, #20]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	613b      	str	r3, [r7, #16]
   return(result);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e5      	bne.n	8003948 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003984:	bf00      	nop
 8003986:	3724      	adds	r7, #36	; 0x24
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003990:	b480      	push	{r7}
 8003992:	b095      	sub	sp, #84	; 0x54
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039b8:	643a      	str	r2, [r7, #64]	; 0x40
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e5      	bne.n	8003998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3314      	adds	r3, #20
 80039d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	61fb      	str	r3, [r7, #28]
   return(result);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3314      	adds	r3, #20
 80039ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e5      	bne.n	80039cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d119      	bne.n	8003a3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f023 0310 	bic.w	r3, r3, #16
 8003a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a28:	61ba      	str	r2, [r7, #24]
 8003a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6979      	ldr	r1, [r7, #20]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	613b      	str	r3, [r7, #16]
   return(result);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e5      	bne.n	8003a08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a4a:	bf00      	nop
 8003a4c:	3754      	adds	r7, #84	; 0x54
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a5c:	b0c0      	sub	sp, #256	; 0x100
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	68d9      	ldr	r1, [r3, #12]
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	ea40 0301 	orr.w	r3, r0, r1
 8003a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ab0:	f021 010c 	bic.w	r1, r1, #12
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	6999      	ldr	r1, [r3, #24]
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	ea40 0301 	orr.w	r3, r0, r1
 8003ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <UART_SetConfig+0x2cc>)
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d005      	beq.n	8003af8 <UART_SetConfig+0xa0>
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b8d      	ldr	r3, [pc, #564]	; (8003d28 <UART_SetConfig+0x2d0>)
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d104      	bne.n	8003b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003af8:	f7ff fcd0 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8003afc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b00:	e003      	b.n	8003b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b02:	f7ff fcb7 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8003b06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	f040 810c 	bne.w	8003d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b32:	415b      	adcs	r3, r3
 8003b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	eb12 0801 	adds.w	r8, r2, r1
 8003b40:	4629      	mov	r1, r5
 8003b42:	eb43 0901 	adc.w	r9, r3, r1
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b5a:	4690      	mov	r8, r2
 8003b5c:	4699      	mov	r9, r3
 8003b5e:	4623      	mov	r3, r4
 8003b60:	eb18 0303 	adds.w	r3, r8, r3
 8003b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b68:	462b      	mov	r3, r5
 8003b6a:	eb49 0303 	adc.w	r3, r9, r3
 8003b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b86:	460b      	mov	r3, r1
 8003b88:	18db      	adds	r3, r3, r3
 8003b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	eb42 0303 	adc.w	r3, r2, r3
 8003b92:	657b      	str	r3, [r7, #84]	; 0x54
 8003b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b9c:	f7fc fb70 	bl	8000280 <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	011c      	lsls	r4, r3, #4
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf0:	4692      	mov	sl, r2
 8003bf2:	469b      	mov	fp, r3
 8003bf4:	4643      	mov	r3, r8
 8003bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	eb4b 0303 	adc.w	r3, fp, r3
 8003c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	18db      	adds	r3, r3, r3
 8003c20:	643b      	str	r3, [r7, #64]	; 0x40
 8003c22:	4613      	mov	r3, r2
 8003c24:	eb42 0303 	adc.w	r3, r2, r3
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c32:	f7fc fb25 	bl	8000280 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2264      	movs	r2, #100	; 0x64
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	1acb      	subs	r3, r1, r3
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003c54:	fba3 2302 	umull	r2, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c60:	441c      	add	r4, r3
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c74:	4642      	mov	r2, r8
 8003c76:	464b      	mov	r3, r9
 8003c78:	1891      	adds	r1, r2, r2
 8003c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c7c:	415b      	adcs	r3, r3
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c84:	4641      	mov	r1, r8
 8003c86:	1851      	adds	r1, r2, r1
 8003c88:	6339      	str	r1, [r7, #48]	; 0x30
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	414b      	adcs	r3, r1
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	00cb      	lsls	r3, r1, #3
 8003ca0:	4651      	mov	r1, sl
 8003ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca6:	4651      	mov	r1, sl
 8003ca8:	00ca      	lsls	r2, r1, #3
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb8:	464b      	mov	r3, r9
 8003cba:	460a      	mov	r2, r1
 8003cbc:	eb42 0303 	adc.w	r3, r2, r3
 8003cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cd8:	460b      	mov	r3, r1
 8003cda:	18db      	adds	r3, r3, r3
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cde:	4613      	mov	r3, r2
 8003ce0:	eb42 0303 	adc.w	r3, r2, r3
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cee:	f7fc fac7 	bl	8000280 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	2164      	movs	r1, #100	; 0x64
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	3332      	adds	r3, #50	; 0x32
 8003d0a:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <UART_SetConfig+0x2d4>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	f003 0207 	and.w	r2, r3, #7
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4422      	add	r2, r4
 8003d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d20:	e106      	b.n	8003f30 <UART_SetConfig+0x4d8>
 8003d22:	bf00      	nop
 8003d24:	40011000 	.word	0x40011000
 8003d28:	40011400 	.word	0x40011400
 8003d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d42:	4642      	mov	r2, r8
 8003d44:	464b      	mov	r3, r9
 8003d46:	1891      	adds	r1, r2, r2
 8003d48:	6239      	str	r1, [r7, #32]
 8003d4a:	415b      	adcs	r3, r3
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d52:	4641      	mov	r1, r8
 8003d54:	1854      	adds	r4, r2, r1
 8003d56:	4649      	mov	r1, r9
 8003d58:	eb43 0501 	adc.w	r5, r3, r1
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	00eb      	lsls	r3, r5, #3
 8003d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6a:	00e2      	lsls	r2, r4, #3
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	461d      	mov	r5, r3
 8003d70:	4643      	mov	r3, r8
 8003d72:	18e3      	adds	r3, r4, r3
 8003d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d78:	464b      	mov	r3, r9
 8003d7a:	eb45 0303 	adc.w	r3, r5, r3
 8003d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d9e:	4629      	mov	r1, r5
 8003da0:	008b      	lsls	r3, r1, #2
 8003da2:	4621      	mov	r1, r4
 8003da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da8:	4621      	mov	r1, r4
 8003daa:	008a      	lsls	r2, r1, #2
 8003dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003db0:	f7fc fa66 	bl	8000280 <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4b60      	ldr	r3, [pc, #384]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003dba:	fba3 2302 	umull	r2, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	011c      	lsls	r4, r3, #4
 8003dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	1891      	adds	r1, r2, r2
 8003dda:	61b9      	str	r1, [r7, #24]
 8003ddc:	415b      	adcs	r3, r3
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de4:	4641      	mov	r1, r8
 8003de6:	1851      	adds	r1, r2, r1
 8003de8:	6139      	str	r1, [r7, #16]
 8003dea:	4649      	mov	r1, r9
 8003dec:	414b      	adcs	r3, r1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	00cb      	lsls	r3, r1, #3
 8003e00:	4651      	mov	r1, sl
 8003e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e06:	4651      	mov	r1, sl
 8003e08:	00ca      	lsls	r2, r1, #3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4642      	mov	r2, r8
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e18:	464b      	mov	r3, r9
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	008b      	lsls	r3, r1, #2
 8003e40:	4641      	mov	r1, r8
 8003e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e46:	4641      	mov	r1, r8
 8003e48:	008a      	lsls	r2, r1, #2
 8003e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e4e:	f7fc fa17 	bl	8000280 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2264      	movs	r2, #100	; 0x64
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	1acb      	subs	r3, r1, r3
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	3332      	adds	r3, #50	; 0x32
 8003e6c:	4a33      	ldr	r2, [pc, #204]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e78:	441c      	add	r4, r3
 8003e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7e:	2200      	movs	r2, #0
 8003e80:	673b      	str	r3, [r7, #112]	; 0x70
 8003e82:	677a      	str	r2, [r7, #116]	; 0x74
 8003e84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	1891      	adds	r1, r2, r2
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	415b      	adcs	r3, r3
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e98:	4641      	mov	r1, r8
 8003e9a:	1851      	adds	r1, r2, r1
 8003e9c:	6039      	str	r1, [r7, #0]
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	414b      	adcs	r3, r1
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	00cb      	lsls	r3, r1, #3
 8003eb4:	4651      	mov	r1, sl
 8003eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eba:	4651      	mov	r1, sl
 8003ebc:	00ca      	lsls	r2, r1, #3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eca:	464b      	mov	r3, r9
 8003ecc:	460a      	mov	r2, r1
 8003ece:	eb42 0303 	adc.w	r3, r2, r3
 8003ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ede:	667a      	str	r2, [r7, #100]	; 0x64
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003eec:	4649      	mov	r1, r9
 8003eee:	008b      	lsls	r3, r1, #2
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	008a      	lsls	r2, r1, #2
 8003efa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003efe:	f7fc f9bf 	bl	8000280 <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003f08:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2164      	movs	r1, #100	; 0x64
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	3332      	adds	r3, #50	; 0x32
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <UART_SetConfig+0x4e4>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	f003 020f 	and.w	r2, r3, #15
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4422      	add	r2, r4
 8003f2e:	609a      	str	r2, [r3, #8]
}
 8003f30:	bf00      	nop
 8003f32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f36:	46bd      	mov	sp, r7
 8003f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3c:	51eb851f 	.word	0x51eb851f

08003f40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f40:	b084      	sub	sp, #16
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	f107 001c 	add.w	r0, r7, #28
 8003f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d122      	bne.n	8003f9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d105      	bne.n	8003f92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 fbee 	bl	8005774 <USB_CoreReset>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e01a      	b.n	8003fd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f001 fbe2 	bl	8005774 <USB_CoreReset>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
 8003fc6:	e005      	b.n	8003fd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10b      	bne.n	8003ff2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f043 0206 	orr.w	r2, r3, #6
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ffe:	b004      	add	sp, #16
 8004000:	4770      	bx	lr
	...

08004004 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	4613      	mov	r3, r2
 8004010:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d165      	bne.n	80040e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4a41      	ldr	r2, [pc, #260]	; (8004120 <USB_SetTurnaroundTime+0x11c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d906      	bls.n	800402e <USB_SetTurnaroundTime+0x2a>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a40      	ldr	r2, [pc, #256]	; (8004124 <USB_SetTurnaroundTime+0x120>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d202      	bcs.n	800402e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004028:	230f      	movs	r3, #15
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e062      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4a3c      	ldr	r2, [pc, #240]	; (8004124 <USB_SetTurnaroundTime+0x120>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d306      	bcc.n	8004044 <USB_SetTurnaroundTime+0x40>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <USB_SetTurnaroundTime+0x124>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d202      	bcs.n	8004044 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800403e:	230e      	movs	r3, #14
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e057      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4a38      	ldr	r2, [pc, #224]	; (8004128 <USB_SetTurnaroundTime+0x124>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d306      	bcc.n	800405a <USB_SetTurnaroundTime+0x56>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4a37      	ldr	r2, [pc, #220]	; (800412c <USB_SetTurnaroundTime+0x128>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d202      	bcs.n	800405a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004054:	230d      	movs	r3, #13
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e04c      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4a33      	ldr	r2, [pc, #204]	; (800412c <USB_SetTurnaroundTime+0x128>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d306      	bcc.n	8004070 <USB_SetTurnaroundTime+0x6c>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4a32      	ldr	r2, [pc, #200]	; (8004130 <USB_SetTurnaroundTime+0x12c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d802      	bhi.n	8004070 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800406a:	230c      	movs	r3, #12
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e041      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4a2f      	ldr	r2, [pc, #188]	; (8004130 <USB_SetTurnaroundTime+0x12c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d906      	bls.n	8004086 <USB_SetTurnaroundTime+0x82>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a2e      	ldr	r2, [pc, #184]	; (8004134 <USB_SetTurnaroundTime+0x130>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d802      	bhi.n	8004086 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004080:	230b      	movs	r3, #11
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e036      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <USB_SetTurnaroundTime+0x130>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d906      	bls.n	800409c <USB_SetTurnaroundTime+0x98>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4a29      	ldr	r2, [pc, #164]	; (8004138 <USB_SetTurnaroundTime+0x134>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d802      	bhi.n	800409c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004096:	230a      	movs	r3, #10
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	e02b      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a26      	ldr	r2, [pc, #152]	; (8004138 <USB_SetTurnaroundTime+0x134>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d906      	bls.n	80040b2 <USB_SetTurnaroundTime+0xae>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a25      	ldr	r2, [pc, #148]	; (800413c <USB_SetTurnaroundTime+0x138>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d202      	bcs.n	80040b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80040ac:	2309      	movs	r3, #9
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e020      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4a21      	ldr	r2, [pc, #132]	; (800413c <USB_SetTurnaroundTime+0x138>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d306      	bcc.n	80040c8 <USB_SetTurnaroundTime+0xc4>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4a20      	ldr	r2, [pc, #128]	; (8004140 <USB_SetTurnaroundTime+0x13c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d802      	bhi.n	80040c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040c2:	2308      	movs	r3, #8
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e015      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <USB_SetTurnaroundTime+0x13c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d906      	bls.n	80040de <USB_SetTurnaroundTime+0xda>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <USB_SetTurnaroundTime+0x140>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d202      	bcs.n	80040de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040d8:	2307      	movs	r3, #7
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e00a      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040de:	2306      	movs	r3, #6
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	e007      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040ea:	2309      	movs	r3, #9
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e001      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040f0:	2309      	movs	r3, #9
 80040f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	00d8acbf 	.word	0x00d8acbf
 8004124:	00e4e1c0 	.word	0x00e4e1c0
 8004128:	00f42400 	.word	0x00f42400
 800412c:	01067380 	.word	0x01067380
 8004130:	011a499f 	.word	0x011a499f
 8004134:	01312cff 	.word	0x01312cff
 8004138:	014ca43f 	.word	0x014ca43f
 800413c:	016e3600 	.word	0x016e3600
 8004140:	01a6ab1f 	.word	0x01a6ab1f
 8004144:	01e84800 	.word	0x01e84800

08004148 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 0201 	bic.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d115      	bne.n	80041da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041ba:	2001      	movs	r0, #1
 80041bc:	f7fc fe0c 	bl	8000dd8 <HAL_Delay>
      ms++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f001 fa45 	bl	8005656 <USB_GetMode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d01e      	beq.n	8004210 <USB_SetCurrentMode+0x84>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b31      	cmp	r3, #49	; 0x31
 80041d6:	d9f0      	bls.n	80041ba <USB_SetCurrentMode+0x2e>
 80041d8:	e01a      	b.n	8004210 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d115      	bne.n	800420c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041ec:	2001      	movs	r0, #1
 80041ee:	f7fc fdf3 	bl	8000dd8 <HAL_Delay>
      ms++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f001 fa2c 	bl	8005656 <USB_GetMode>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <USB_SetCurrentMode+0x84>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b31      	cmp	r3, #49	; 0x31
 8004208:	d9f0      	bls.n	80041ec <USB_SetCurrentMode+0x60>
 800420a:	e001      	b.n	8004210 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e005      	b.n	800421c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b32      	cmp	r3, #50	; 0x32
 8004214:	d101      	bne.n	800421a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004224:	b084      	sub	sp, #16
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e009      	b.n	8004258 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3340      	adds	r3, #64	; 0x40
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	2200      	movs	r2, #0
 8004250:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	3301      	adds	r3, #1
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b0e      	cmp	r3, #14
 800425c:	d9f2      	bls.n	8004244 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800425e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d11c      	bne.n	800429e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004272:	f043 0302 	orr.w	r3, r3, #2
 8004276:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	639a      	str	r2, [r3, #56]	; 0x38
 800429c:	e00b      	b.n	80042b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042bc:	461a      	mov	r2, r3
 80042be:	2300      	movs	r3, #0
 80042c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c8:	4619      	mov	r1, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d0:	461a      	mov	r2, r3
 80042d2:	680b      	ldr	r3, [r1, #0]
 80042d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d10c      	bne.n	80042f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042e2:	2100      	movs	r1, #0
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f965 	bl	80045b4 <USB_SetDevSpeed>
 80042ea:	e008      	b.n	80042fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042ec:	2101      	movs	r1, #1
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f960 	bl	80045b4 <USB_SetDevSpeed>
 80042f4:	e003      	b.n	80042fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042f6:	2103      	movs	r1, #3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f95b 	bl	80045b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042fe:	2110      	movs	r1, #16
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8f3 	bl	80044ec <USB_FlushTxFifo>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f91f 	bl	8004554 <USB_FlushRxFifo>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	461a      	mov	r2, r3
 8004328:	2300      	movs	r3, #0
 800432a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	461a      	mov	r2, r3
 8004340:	2300      	movs	r3, #0
 8004342:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	e043      	b.n	80043d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004360:	d118      	bne.n	8004394 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	e013      	b.n	80043a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	461a      	mov	r2, r3
 800438c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e008      	b.n	80043a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	461a      	mov	r2, r3
 80043a2:	2300      	movs	r3, #0
 80043a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b2:	461a      	mov	r2, r3
 80043b4:	2300      	movs	r3, #0
 80043b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	461a      	mov	r2, r3
 80043c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	3301      	adds	r3, #1
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d3b7      	bcc.n	800434a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e043      	b.n	8004468 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043f6:	d118      	bne.n	800442a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440a:	461a      	mov	r2, r3
 800440c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e013      	b.n	800443c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e008      	b.n	800443c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004436:	461a      	mov	r2, r3
 8004438:	2300      	movs	r3, #0
 800443a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	461a      	mov	r2, r3
 800444a:	2300      	movs	r3, #0
 800444c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	429a      	cmp	r2, r3
 800446e:	d3b7      	bcc.n	80043e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800447e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004482:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <USB_DevInit+0x2c4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f043 0208 	orr.w	r2, r3, #8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d0:	f043 0304 	orr.w	r3, r3, #4
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e4:	b004      	add	sp, #16
 80044e6:	4770      	bx	lr
 80044e8:	803c3800 	.word	0x803c3800

080044ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3301      	adds	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <USB_FlushTxFifo+0x64>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e01b      	b.n	8004544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	daf2      	bge.n	80044fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	019b      	lsls	r3, r3, #6
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3301      	adds	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a08      	ldr	r2, [pc, #32]	; (8004550 <USB_FlushTxFifo+0x64>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e006      	b.n	8004544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b20      	cmp	r3, #32
 8004540:	d0f0      	beq.n	8004524 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	00030d40 	.word	0x00030d40

08004554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3301      	adds	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a11      	ldr	r2, [pc, #68]	; (80045b0 <USB_FlushRxFifo+0x5c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e018      	b.n	80045a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	daf2      	bge.n	8004560 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2210      	movs	r2, #16
 8004582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <USB_FlushRxFifo+0x5c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e006      	b.n	80045a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d0f0      	beq.n	8004584 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	00030d40 	.word	0x00030d40

080045b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0306 	and.w	r3, r3, #6
 80045fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004606:	2300      	movs	r3, #0
 8004608:	75fb      	strb	r3, [r7, #23]
 800460a:	e00a      	b.n	8004622 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d002      	beq.n	8004618 <USB_GetDevSpeed+0x32>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b06      	cmp	r3, #6
 8004616:	d102      	bne.n	800461e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004618:	2302      	movs	r3, #2
 800461a:	75fb      	strb	r3, [r7, #23]
 800461c:	e001      	b.n	8004622 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800461e:	230f      	movs	r3, #15
 8004620:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004622:	7dfb      	ldrb	r3, [r7, #23]
}
 8004624:	4618      	mov	r0, r3
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d13a      	bne.n	80046c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	b29b      	uxth	r3, r3
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800466a:	4313      	orrs	r3, r2
 800466c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d155      	bne.n	8004730 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	791b      	ldrb	r3, [r3, #4]
 800469e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	059b      	lsls	r3, r3, #22
 80046a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046a8:	4313      	orrs	r3, r2
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e036      	b.n	8004730 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11a      	bne.n	8004730 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004716:	430b      	orrs	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d161      	bne.n	8004820 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800476e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004772:	d11f      	bne.n	80047b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004792:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	2101      	movs	r1, #1
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d4:	4013      	ands	r3, r2
 80047d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	2101      	movs	r1, #1
 80047ea:	fa01 f303 	lsl.w	r3, r1, r3
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	68f9      	ldr	r1, [r7, #12]
 80047f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047f8:	4013      	ands	r3, r2
 80047fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	0159      	lsls	r1, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	440b      	add	r3, r1
 8004812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004816:	4619      	mov	r1, r3
 8004818:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <USB_DeactivateEndpoint+0x1b0>)
 800481a:	4013      	ands	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
 800481e:	e060      	b.n	80048e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004836:	d11f      	bne.n	8004878 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	440a      	add	r2, r1
 800484e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004852:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004856:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004876:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	2101      	movs	r1, #1
 800488a:	fa01 f303 	lsl.w	r3, r1, r3
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	43db      	mvns	r3, r3
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004898:	4013      	ands	r3, r2
 800489a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	43db      	mvns	r3, r3
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048bc:	4013      	ands	r3, r2
 80048be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	0159      	lsls	r1, r3, #5
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	440b      	add	r3, r1
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	4619      	mov	r1, r3
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <USB_DeactivateEndpoint+0x1b4>)
 80048de:	4013      	ands	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	ec337800 	.word	0xec337800
 80048f4:	eff37800 	.word	0xeff37800

080048f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	785b      	ldrb	r3, [r3, #1]
 8004914:	2b01      	cmp	r3, #1
 8004916:	f040 815c 	bne.w	8004bd2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d132      	bne.n	8004988 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004944:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004980:	0cdb      	lsrs	r3, r3, #19
 8004982:	04db      	lsls	r3, r3, #19
 8004984:	6113      	str	r3, [r2, #16]
 8004986:	e074      	b.n	8004a72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a2:	0cdb      	lsrs	r3, r3, #19
 80049a4:	04db      	lsls	r3, r3, #19
 80049a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6999      	ldr	r1, [r3, #24]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	440b      	add	r3, r1
 80049e4:	1e59      	subs	r1, r3, #1
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049f0:	4b9d      	ldr	r3, [pc, #628]	; (8004c68 <USB_EPStartXfer+0x370>)
 80049f2:	400b      	ands	r3, r1
 80049f4:	69b9      	ldr	r1, [r7, #24]
 80049f6:	0148      	lsls	r0, r1, #5
 80049f8:	69f9      	ldr	r1, [r7, #28]
 80049fa:	4401      	add	r1, r0
 80049fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a00:	4313      	orrs	r3, r2
 8004a02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1a:	69b9      	ldr	r1, [r7, #24]
 8004a1c:	0148      	lsls	r0, r1, #5
 8004a1e:	69f9      	ldr	r1, [r7, #28]
 8004a20:	4401      	add	r1, r0
 8004a22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a26:	4313      	orrs	r3, r2
 8004a28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	791b      	ldrb	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d11f      	bne.n	8004a72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	0151      	lsls	r1, r2, #5
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	440a      	add	r2, r1
 8004a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d14b      	bne.n	8004b10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	791b      	ldrb	r3, [r3, #4]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d128      	bne.n	8004aee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d110      	bne.n	8004ace <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	0151      	lsls	r1, r2, #5
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	440a      	add	r2, r1
 8004ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	e00f      	b.n	8004aee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e133      	b.n	8004d78 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	791b      	ldrb	r3, [r3, #4]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d015      	beq.n	8004b64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 811b 	beq.w	8004d78 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	2101      	movs	r1, #1
 8004b54:	fa01 f303 	lsl.w	r3, r1, r3
 8004b58:	69f9      	ldr	r1, [r7, #28]
 8004b5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	634b      	str	r3, [r1, #52]	; 0x34
 8004b62:	e109      	b.n	8004d78 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d110      	bne.n	8004b96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	e00f      	b.n	8004bb6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6919      	ldr	r1, [r3, #16]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	b298      	uxth	r0, r3
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4603      	mov	r3, r0
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fade 	bl	800518c <USB_WritePacket>
 8004bd0:	e0d2      	b.n	8004d78 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	0151      	lsls	r1, r2, #5
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	440a      	add	r2, r1
 8004be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bec:	0cdb      	lsrs	r3, r3, #19
 8004bee:	04db      	lsls	r3, r3, #19
 8004bf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d126      	bne.n	8004c6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	0148      	lsls	r0, r1, #5
 8004c38:	69f9      	ldr	r1, [r7, #28]
 8004c3a:	4401      	add	r1, r0
 8004c3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c40:	4313      	orrs	r3, r2
 8004c42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c62:	6113      	str	r3, [r2, #16]
 8004c64:	e03a      	b.n	8004cdc <USB_EPStartXfer+0x3e4>
 8004c66:	bf00      	nop
 8004c68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	1e5a      	subs	r2, r3, #1
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	8afa      	ldrh	r2, [r7, #22]
 8004c88:	fb03 f202 	mul.w	r2, r3, r2
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	8afb      	ldrh	r3, [r7, #22]
 8004ca0:	04d9      	lsls	r1, r3, #19
 8004ca2:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <USB_EPStartXfer+0x48c>)
 8004ca4:	400b      	ands	r3, r1
 8004ca6:	69b9      	ldr	r1, [r7, #24]
 8004ca8:	0148      	lsls	r0, r1, #5
 8004caa:	69f9      	ldr	r1, [r7, #28]
 8004cac:	4401      	add	r1, r0
 8004cae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	0148      	lsls	r0, r1, #5
 8004cd0:	69f9      	ldr	r1, [r7, #28]
 8004cd2:	4401      	add	r1, r0
 8004cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d10d      	bne.n	8004cfe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6919      	ldr	r1, [r3, #16]
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	791b      	ldrb	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d128      	bne.n	8004d58 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d110      	bne.n	8004d38 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e00f      	b.n	8004d58 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	1ff80000 	.word	0x1ff80000

08004d88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	785b      	ldrb	r3, [r3, #1]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f040 80ce 	bne.w	8004f46 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d132      	bne.n	8004e18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	0cdb      	lsrs	r3, r3, #19
 8004e12:	04db      	lsls	r3, r3, #19
 8004e14:	6113      	str	r3, [r2, #16]
 8004e16:	e04e      	b.n	8004eb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e32:	0cdb      	lsrs	r3, r3, #19
 8004e34:	04db      	lsls	r3, r3, #19
 8004e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d903      	bls.n	8004e70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	0148      	lsls	r0, r1, #5
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	4401      	add	r1, r0
 8004eae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d11e      	bne.n	8004efa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e097      	b.n	800502a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 8083 	beq.w	800502a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	2101      	movs	r1, #1
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	6979      	ldr	r1, [r7, #20]
 8004f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f40:	4313      	orrs	r3, r2
 8004f42:	634b      	str	r3, [r1, #52]	; 0x34
 8004f44:	e071      	b.n	800502a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f60:	0cdb      	lsrs	r3, r3, #19
 8004f62:	04db      	lsls	r3, r3, #19
 8004f64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd8:	6939      	ldr	r1, [r7, #16]
 8004fda:	0148      	lsls	r0, r1, #5
 8004fdc:	6979      	ldr	r1, [r7, #20]
 8004fde:	4401      	add	r1, r0
 8004fe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d10d      	bne.n	800500a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	6919      	ldr	r1, [r3, #16]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005006:	460a      	mov	r2, r1
 8005008:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005024:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005028:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	785b      	ldrb	r3, [r3, #1]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d14a      	bne.n	80050ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800506a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800506e:	f040 8086 	bne.w	800517e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	7812      	ldrb	r2, [r2, #0]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005090:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005094:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	0151      	lsls	r1, r2, #5
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	440a      	add	r2, r1
 80050b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3301      	adds	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d902      	bls.n	80050d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	75fb      	strb	r3, [r7, #23]
          break;
 80050ce:	e056      	b.n	800517e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e8:	d0e7      	beq.n	80050ba <USB_EPStopXfer+0x82>
 80050ea:	e048      	b.n	800517e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005104:	d13b      	bne.n	800517e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005124:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005128:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	7812      	ldrb	r2, [r2, #0]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800514c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f242 7210 	movw	r2, #10000	; 0x2710
 800515a:	4293      	cmp	r3, r2
 800515c:	d902      	bls.n	8005164 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
          break;
 8005162:	e00c      	b.n	800517e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517c:	d0e7      	beq.n	800514e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005180:	4618      	mov	r0, r3
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	460b      	mov	r3, r1
 800519c:	71fb      	strb	r3, [r7, #7]
 800519e:	4613      	mov	r3, r2
 80051a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d123      	bne.n	80051fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051b2:	88bb      	ldrh	r3, [r7, #4]
 80051b4:	3303      	adds	r3, #3
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e018      	b.n	80051f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	031a      	lsls	r2, r3, #12
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051cc:	461a      	mov	r2, r3
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	3301      	adds	r3, #1
 80051d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3301      	adds	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3301      	adds	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	3301      	adds	r3, #1
 80051ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	3301      	adds	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d3e2      	bcc.n	80051c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3724      	adds	r7, #36	; 0x24
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005208:	b480      	push	{r7}
 800520a:	b08b      	sub	sp, #44	; 0x2c
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	089b      	lsrs	r3, r3, #2
 8005222:	b29b      	uxth	r3, r3
 8005224:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800522e:	2300      	movs	r3, #0
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	e014      	b.n	800525e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	3301      	adds	r3, #1
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	3301      	adds	r3, #1
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	3301      	adds	r3, #1
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	3301      	adds	r3, #1
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	3301      	adds	r3, #1
 800525c:	623b      	str	r3, [r7, #32]
 800525e:	6a3a      	ldr	r2, [r7, #32]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	429a      	cmp	r2, r3
 8005264:	d3e6      	bcc.n	8005234 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005266:	8bfb      	ldrh	r3, [r7, #30]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01e      	beq.n	80052aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005276:	461a      	mov	r2, r3
 8005278:	f107 0310 	add.w	r3, r7, #16
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
 800528c:	b2da      	uxtb	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	701a      	strb	r2, [r3, #0]
      i++;
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	3301      	adds	r3, #1
 8005296:	623b      	str	r3, [r7, #32]
      pDest++;
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	3301      	adds	r3, #1
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800529e:	8bfb      	ldrh	r3, [r7, #30]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052a4:	8bfb      	ldrh	r3, [r7, #30]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1ea      	bne.n	8005280 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	372c      	adds	r7, #44	; 0x2c
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d12c      	bne.n	800532e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	db12      	blt.n	800530c <USB_EPSetStall+0x54>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00f      	beq.n	800530c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005306:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800530a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e02b      	b.n	8005386 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	db12      	blt.n	8005366 <USB_EPSetStall+0xae>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00f      	beq.n	8005366 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005360:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005364:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005384:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d128      	bne.n	8005402 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	791b      	ldrb	r3, [r3, #4]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d003      	beq.n	80053e0 <USB_EPClearStall+0x4c>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	791b      	ldrb	r3, [r3, #4]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d138      	bne.n	8005452 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e027      	b.n	8005452 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005420:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	791b      	ldrb	r3, [r3, #4]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d003      	beq.n	8005432 <USB_EPClearStall+0x9e>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	791b      	ldrb	r3, [r3, #4]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d10f      	bne.n	8005452 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005450:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800547e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005482:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054da:	f023 0302 	bic.w	r3, r3, #2
 80054de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005508:	f023 0303 	bic.w	r3, r3, #3
 800550c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800551c:	f043 0302 	orr.w	r3, r3, #2
 8005520:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005548:	68fb      	ldr	r3, [r7, #12]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	4013      	ands	r3, r2
 8005578:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	0c1b      	lsrs	r3, r3, #16
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	b29b      	uxth	r3, r3
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	4013      	ands	r3, r2
 80055ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055ec:	68bb      	ldr	r3, [r7, #8]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b087      	sub	sp, #28
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	fa22 f303 	lsr.w	r3, r2, r3
 800562a:	01db      	lsls	r3, r3, #7
 800562c:	b2db      	uxtb	r3, r3
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4013      	ands	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005648:	68bb      	ldr	r3, [r7, #8]
}
 800564a:	4618      	mov	r0, r3
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f003 0301 	and.w	r3, r3, #1
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005690:	f023 0307 	bic.w	r3, r3, #7
 8005694:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	460b      	mov	r3, r1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	333c      	adds	r3, #60	; 0x3c
 80056ce:	3304      	adds	r3, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4a26      	ldr	r2, [pc, #152]	; (8005770 <USB_EP0_OutStart+0xb8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d90a      	bls.n	80056f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ec:	d101      	bne.n	80056f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e037      	b.n	8005762 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2300      	movs	r3, #0
 80056fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005720:	f043 0318 	orr.w	r3, r3, #24
 8005724:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005734:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005738:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10f      	bne.n	8005760 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	461a      	mov	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800575e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	4f54300a 	.word	0x4f54300a

08005774 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <USB_CoreReset+0x64>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d901      	bls.n	8005792 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e01b      	b.n	80057ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	daf2      	bge.n	8005780 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f043 0201 	orr.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <USB_CoreReset+0x64>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e006      	b.n	80057ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d0f0      	beq.n	80057aa <USB_CoreReset+0x36>

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	00030d40 	.word	0x00030d40

080057dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057ec:	f002 fc8a 	bl	8008104 <USBD_static_malloc>
 80057f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	32b0      	adds	r2, #176	; 0xb0
 8005802:	2100      	movs	r1, #0
 8005804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005808:	2302      	movs	r3, #2
 800580a:	e0d4      	b.n	80059b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800580c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005810:	2100      	movs	r1, #0
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f002 fd8e 	bl	8008334 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	32b0      	adds	r2, #176	; 0xb0
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	32b0      	adds	r2, #176	; 0xb0
 8005832:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	7c1b      	ldrb	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d138      	bne.n	80058b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005844:	4b5e      	ldr	r3, [pc, #376]	; (80059c0 <USBD_CDC_Init+0x1e4>)
 8005846:	7819      	ldrb	r1, [r3, #0]
 8005848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800584c:	2202      	movs	r2, #2
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f002 fb35 	bl	8007ebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005854:	4b5a      	ldr	r3, [pc, #360]	; (80059c0 <USBD_CDC_Init+0x1e4>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	3324      	adds	r3, #36	; 0x24
 800586a:	2201      	movs	r2, #1
 800586c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800586e:	4b55      	ldr	r3, [pc, #340]	; (80059c4 <USBD_CDC_Init+0x1e8>)
 8005870:	7819      	ldrb	r1, [r3, #0]
 8005872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005876:	2202      	movs	r2, #2
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f002 fb20 	bl	8007ebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800587e:	4b51      	ldr	r3, [pc, #324]	; (80059c4 <USBD_CDC_Init+0x1e8>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	f003 020f 	and.w	r2, r3, #15
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005896:	2201      	movs	r2, #1
 8005898:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800589a:	4b4b      	ldr	r3, [pc, #300]	; (80059c8 <USBD_CDC_Init+0x1ec>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	f003 020f 	and.w	r2, r3, #15
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	3326      	adds	r3, #38	; 0x26
 80058b0:	2210      	movs	r2, #16
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	e035      	b.n	8005922 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058b6:	4b42      	ldr	r3, [pc, #264]	; (80059c0 <USBD_CDC_Init+0x1e4>)
 80058b8:	7819      	ldrb	r1, [r3, #0]
 80058ba:	2340      	movs	r3, #64	; 0x40
 80058bc:	2202      	movs	r2, #2
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f002 fafd 	bl	8007ebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058c4:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <USBD_CDC_Init+0x1e4>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f003 020f 	and.w	r2, r3, #15
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	3324      	adds	r3, #36	; 0x24
 80058da:	2201      	movs	r2, #1
 80058dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058de:	4b39      	ldr	r3, [pc, #228]	; (80059c4 <USBD_CDC_Init+0x1e8>)
 80058e0:	7819      	ldrb	r1, [r3, #0]
 80058e2:	2340      	movs	r3, #64	; 0x40
 80058e4:	2202      	movs	r2, #2
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f002 fae9 	bl	8007ebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058ec:	4b35      	ldr	r3, [pc, #212]	; (80059c4 <USBD_CDC_Init+0x1e8>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f003 020f 	and.w	r2, r3, #15
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005904:	2201      	movs	r2, #1
 8005906:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005908:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <USBD_CDC_Init+0x1ec>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f003 020f 	and.w	r2, r3, #15
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	3326      	adds	r3, #38	; 0x26
 800591e:	2210      	movs	r2, #16
 8005920:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005922:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <USBD_CDC_Init+0x1ec>)
 8005924:	7819      	ldrb	r1, [r3, #0]
 8005926:	2308      	movs	r3, #8
 8005928:	2203      	movs	r2, #3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f002 fac7 	bl	8007ebe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005930:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <USBD_CDC_Init+0x1ec>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	3324      	adds	r3, #36	; 0x24
 8005946:	2201      	movs	r2, #1
 8005948:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	33b0      	adds	r3, #176	; 0xb0
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005980:	2302      	movs	r3, #2
 8005982:	e018      	b.n	80059b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7c1b      	ldrb	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800598c:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <USBD_CDC_Init+0x1e8>)
 800598e:	7819      	ldrb	r1, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f002 fb7e 	bl	800809c <USBD_LL_PrepareReceive>
 80059a0:	e008      	b.n	80059b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059a2:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <USBD_CDC_Init+0x1e8>)
 80059a4:	7819      	ldrb	r1, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059ac:	2340      	movs	r3, #64	; 0x40
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f002 fb74 	bl	800809c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000093 	.word	0x20000093
 80059c4:	20000094 	.word	0x20000094
 80059c8:	20000095 	.word	0x20000095

080059cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80059d8:	4b3a      	ldr	r3, [pc, #232]	; (8005ac4 <USBD_CDC_DeInit+0xf8>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f002 fa93 	bl	8007f0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80059e4:	4b37      	ldr	r3, [pc, #220]	; (8005ac4 <USBD_CDC_DeInit+0xf8>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f003 020f 	and.w	r2, r3, #15
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	3324      	adds	r3, #36	; 0x24
 80059fa:	2200      	movs	r2, #0
 80059fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80059fe:	4b32      	ldr	r3, [pc, #200]	; (8005ac8 <USBD_CDC_DeInit+0xfc>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f002 fa80 	bl	8007f0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005a0a:	4b2f      	ldr	r3, [pc, #188]	; (8005ac8 <USBD_CDC_DeInit+0xfc>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f003 020f 	and.w	r2, r3, #15
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a22:	2200      	movs	r2, #0
 8005a24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005a26:	4b29      	ldr	r3, [pc, #164]	; (8005acc <USBD_CDC_DeInit+0x100>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f002 fa6c 	bl	8007f0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005a32:	4b26      	ldr	r3, [pc, #152]	; (8005acc <USBD_CDC_DeInit+0x100>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f003 020f 	and.w	r2, r3, #15
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	3324      	adds	r3, #36	; 0x24
 8005a48:	2200      	movs	r2, #0
 8005a4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005a4c:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <USBD_CDC_DeInit+0x100>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f003 020f 	and.w	r2, r3, #15
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	3326      	adds	r3, #38	; 0x26
 8005a62:	2200      	movs	r2, #0
 8005a64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	32b0      	adds	r2, #176	; 0xb0
 8005a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01f      	beq.n	8005ab8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	33b0      	adds	r3, #176	; 0xb0
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	32b0      	adds	r2, #176	; 0xb0
 8005a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f002 fb40 	bl	8008120 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	32b0      	adds	r2, #176	; 0xb0
 8005aaa:	2100      	movs	r1, #0
 8005aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000093 	.word	0x20000093
 8005ac8:	20000094 	.word	0x20000094
 8005acc:	20000095 	.word	0x20000095

08005ad0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	32b0      	adds	r2, #176	; 0xb0
 8005ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e0bf      	b.n	8005c80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d050      	beq.n	8005bae <USBD_CDC_Setup+0xde>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	f040 80af 	bne.w	8005c70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	88db      	ldrh	r3, [r3, #6]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d03a      	beq.n	8005b90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	da1b      	bge.n	8005b5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	33b0      	adds	r3, #176	; 0xb0
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005b3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	88d2      	ldrh	r2, [r2, #6]
 8005b40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	88db      	ldrh	r3, [r3, #6]
 8005b46:	2b07      	cmp	r3, #7
 8005b48:	bf28      	it	cs
 8005b4a:	2307      	movcs	r3, #7
 8005b4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	89fa      	ldrh	r2, [r7, #14]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 fd89 	bl	800766c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005b5a:	e090      	b.n	8005c7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	785a      	ldrb	r2, [r3, #1]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	88db      	ldrh	r3, [r3, #6]
 8005b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8005b6c:	d803      	bhi.n	8005b76 <USBD_CDC_Setup+0xa6>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	88db      	ldrh	r3, [r3, #6]
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	e000      	b.n	8005b78 <USBD_CDC_Setup+0xa8>
 8005b76:	2240      	movs	r2, #64	; 0x40
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b7e:	6939      	ldr	r1, [r7, #16]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b86:	461a      	mov	r2, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 fd9b 	bl	80076c4 <USBD_CtlPrepareRx>
      break;
 8005b8e:	e076      	b.n	8005c7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	33b0      	adds	r3, #176	; 0xb0
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	7850      	ldrb	r0, [r2, #1]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	4798      	blx	r3
      break;
 8005bac:	e067      	b.n	8005c7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	785b      	ldrb	r3, [r3, #1]
 8005bb2:	2b0b      	cmp	r3, #11
 8005bb4:	d851      	bhi.n	8005c5a <USBD_CDC_Setup+0x18a>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <USBD_CDC_Setup+0xec>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005bed 	.word	0x08005bed
 8005bc0:	08005c69 	.word	0x08005c69
 8005bc4:	08005c5b 	.word	0x08005c5b
 8005bc8:	08005c5b 	.word	0x08005c5b
 8005bcc:	08005c5b 	.word	0x08005c5b
 8005bd0:	08005c5b 	.word	0x08005c5b
 8005bd4:	08005c5b 	.word	0x08005c5b
 8005bd8:	08005c5b 	.word	0x08005c5b
 8005bdc:	08005c5b 	.word	0x08005c5b
 8005be0:	08005c5b 	.word	0x08005c5b
 8005be4:	08005c17 	.word	0x08005c17
 8005be8:	08005c41 	.word	0x08005c41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d107      	bne.n	8005c08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bf8:	f107 030a 	add.w	r3, r7, #10
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 fd33 	bl	800766c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c06:	e032      	b.n	8005c6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 fcbd 	bl	800758a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c10:	2303      	movs	r3, #3
 8005c12:	75fb      	strb	r3, [r7, #23]
          break;
 8005c14:	e02b      	b.n	8005c6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d107      	bne.n	8005c32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c22:	f107 030d 	add.w	r3, r7, #13
 8005c26:	2201      	movs	r2, #1
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 fd1e 	bl	800766c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c30:	e01d      	b.n	8005c6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fca8 	bl	800758a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c3e:	e016      	b.n	8005c6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d00f      	beq.n	8005c6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 fc9b 	bl	800758a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c58:	e008      	b.n	8005c6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 fc94 	bl	800758a <USBD_CtlError>
          ret = USBD_FAIL;
 8005c62:	2303      	movs	r3, #3
 8005c64:	75fb      	strb	r3, [r7, #23]
          break;
 8005c66:	e002      	b.n	8005c6e <USBD_CDC_Setup+0x19e>
          break;
 8005c68:	bf00      	nop
 8005c6a:	e008      	b.n	8005c7e <USBD_CDC_Setup+0x1ae>
          break;
 8005c6c:	bf00      	nop
      }
      break;
 8005c6e:	e006      	b.n	8005c7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 fc89 	bl	800758a <USBD_CtlError>
      ret = USBD_FAIL;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	32b0      	adds	r2, #176	; 0xb0
 8005ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e065      	b.n	8005d7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	32b0      	adds	r2, #176	; 0xb0
 8005cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 020f 	and.w	r2, r3, #15
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d02f      	beq.n	8005d3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	3318      	adds	r3, #24
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	f003 010f 	and.w	r1, r3, #15
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	440b      	add	r3, r1
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4403      	add	r3, r0
 8005d04:	3348      	adds	r3, #72	; 0x48
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d112      	bne.n	8005d3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	f003 020f 	and.w	r2, r3, #15
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	3318      	adds	r3, #24
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d2e:	78f9      	ldrb	r1, [r7, #3]
 8005d30:	2300      	movs	r3, #0
 8005d32:	2200      	movs	r2, #0
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f002 f990 	bl	800805a <USBD_LL_Transmit>
 8005d3a:	e01f      	b.n	8005d7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	33b0      	adds	r3, #176	; 0xb0
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	33b0      	adds	r3, #176	; 0xb0
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	32b0      	adds	r2, #176	; 0xb0
 8005d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	32b0      	adds	r2, #176	; 0xb0
 8005dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e01a      	b.n	8005dee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f002 f98e 	bl	80080de <USBD_LL_GetRxDataSize>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	33b0      	adds	r3, #176	; 0xb0
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005de8:	4611      	mov	r1, r2
 8005dea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	32b0      	adds	r2, #176	; 0xb0
 8005e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e025      	b.n	8005e64 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	33b0      	adds	r3, #176	; 0xb0
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01a      	beq.n	8005e62 <USBD_CDC_EP0_RxReady+0x6c>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e32:	2bff      	cmp	r3, #255	; 0xff
 8005e34:	d015      	beq.n	8005e62 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	33b0      	adds	r3, #176	; 0xb0
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005e4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e56:	b292      	uxth	r2, r2
 8005e58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	22ff      	movs	r2, #255	; 0xff
 8005e5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e74:	2182      	movs	r1, #130	; 0x82
 8005e76:	4818      	ldr	r0, [pc, #96]	; (8005ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e78:	f000 fd4f 	bl	800691a <USBD_GetEpDesc>
 8005e7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4815      	ldr	r0, [pc, #84]	; (8005ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e82:	f000 fd4a 	bl	800691a <USBD_GetEpDesc>
 8005e86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e88:	2181      	movs	r1, #129	; 0x81
 8005e8a:	4813      	ldr	r0, [pc, #76]	; (8005ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e8c:	f000 fd45 	bl	800691a <USBD_GetEpDesc>
 8005e90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2210      	movs	r2, #16
 8005e9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d006      	beq.n	8005eb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eac:	711a      	strb	r2, [r3, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d006      	beq.n	8005ec6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec0:	711a      	strb	r2, [r3, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2243      	movs	r2, #67	; 0x43
 8005eca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ecc:	4b02      	ldr	r3, [pc, #8]	; (8005ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000050 	.word	0x20000050

08005edc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ee4:	2182      	movs	r1, #130	; 0x82
 8005ee6:	4818      	ldr	r0, [pc, #96]	; (8005f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ee8:	f000 fd17 	bl	800691a <USBD_GetEpDesc>
 8005eec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005eee:	2101      	movs	r1, #1
 8005ef0:	4815      	ldr	r0, [pc, #84]	; (8005f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ef2:	f000 fd12 	bl	800691a <USBD_GetEpDesc>
 8005ef6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ef8:	2181      	movs	r1, #129	; 0x81
 8005efa:	4813      	ldr	r0, [pc, #76]	; (8005f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005efc:	f000 fd0d 	bl	800691a <USBD_GetEpDesc>
 8005f00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2210      	movs	r2, #16
 8005f0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2200      	movs	r2, #0
 8005f18:	711a      	strb	r2, [r3, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f042 0202 	orr.w	r2, r2, #2
 8005f20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d006      	beq.n	8005f36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	711a      	strb	r2, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f042 0202 	orr.w	r2, r2, #2
 8005f34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2243      	movs	r2, #67	; 0x43
 8005f3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f3c:	4b02      	ldr	r3, [pc, #8]	; (8005f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000050 	.word	0x20000050

08005f4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f54:	2182      	movs	r1, #130	; 0x82
 8005f56:	4818      	ldr	r0, [pc, #96]	; (8005fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f58:	f000 fcdf 	bl	800691a <USBD_GetEpDesc>
 8005f5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4815      	ldr	r0, [pc, #84]	; (8005fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f62:	f000 fcda 	bl	800691a <USBD_GetEpDesc>
 8005f66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f68:	2181      	movs	r1, #129	; 0x81
 8005f6a:	4813      	ldr	r0, [pc, #76]	; (8005fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f6c:	f000 fcd5 	bl	800691a <USBD_GetEpDesc>
 8005f70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d006      	beq.n	8005f92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f8c:	711a      	strb	r2, [r3, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa0:	711a      	strb	r2, [r3, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2243      	movs	r2, #67	; 0x43
 8005faa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fac:	4b02      	ldr	r3, [pc, #8]	; (8005fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000050 	.word	0x20000050

08005fbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	220a      	movs	r2, #10
 8005fc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005fca:	4b03      	ldr	r3, [pc, #12]	; (8005fd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	2000000c 	.word	0x2000000c

08005fdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e009      	b.n	8006004 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	33b0      	adds	r3, #176	; 0xb0
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	32b0      	adds	r2, #176	; 0xb0
 8006026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006032:	2303      	movs	r3, #3
 8006034:	e008      	b.n	8006048 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	371c      	adds	r7, #28
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	32b0      	adds	r2, #176	; 0xb0
 8006068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006074:	2303      	movs	r3, #3
 8006076:	e004      	b.n	8006082 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	32b0      	adds	r2, #176	; 0xb0
 80060a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	32b0      	adds	r2, #176	; 0xb0
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80060be:	2303      	movs	r3, #3
 80060c0:	e025      	b.n	800610e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d11f      	bne.n	800610c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80060d4:	4b10      	ldr	r3, [pc, #64]	; (8006118 <USBD_CDC_TransmitPacket+0x88>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 020f 	and.w	r2, r3, #15
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4403      	add	r3, r0
 80060ee:	3318      	adds	r3, #24
 80060f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80060f2:	4b09      	ldr	r3, [pc, #36]	; (8006118 <USBD_CDC_TransmitPacket+0x88>)
 80060f4:	7819      	ldrb	r1, [r3, #0]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 ffa9 	bl	800805a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800610c:	7bfb      	ldrb	r3, [r7, #15]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000093 	.word	0x20000093

0800611c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	32b0      	adds	r2, #176	; 0xb0
 800612e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006132:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	32b0      	adds	r2, #176	; 0xb0
 800613e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006146:	2303      	movs	r3, #3
 8006148:	e018      	b.n	800617c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	7c1b      	ldrb	r3, [r3, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006152:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <USBD_CDC_ReceivePacket+0x68>)
 8006154:	7819      	ldrb	r1, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800615c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f001 ff9b 	bl	800809c <USBD_LL_PrepareReceive>
 8006166:	e008      	b.n	800617a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <USBD_CDC_ReceivePacket+0x68>)
 800616a:	7819      	ldrb	r1, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006172:	2340      	movs	r3, #64	; 0x40
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 ff91 	bl	800809c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000094 	.word	0x20000094

08006188 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	e01f      	b.n	80061e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	79fa      	ldrb	r2, [r7, #7]
 80061d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f001 fe0b 	bl	8007df0 <USBD_LL_Init>
 80061da:	4603      	mov	r3, r0
 80061dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e025      	b.n	800624c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32ae      	adds	r2, #174	; 0xae
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00f      	beq.n	800623c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	32ae      	adds	r2, #174	; 0xae
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	f107 020e 	add.w	r2, r7, #14
 8006230:	4610      	mov	r0, r2
 8006232:	4798      	blx	r3
 8006234:	4602      	mov	r2, r0
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 fe13 	bl	8007e88 <USBD_LL_Start>
 8006262:	4603      	mov	r3, r0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006274:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d009      	beq.n	80062b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	78fa      	ldrb	r2, [r7, #3]
 80062a6:	4611      	mov	r1, r2
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	4611      	mov	r1, r2
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062e0:	2303      	movs	r3, #3
 80062e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	4618      	mov	r0, r3
 8006302:	f001 f908 	bl	8007516 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006314:	461a      	mov	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2b02      	cmp	r3, #2
 8006328:	d01a      	beq.n	8006360 <USBD_LL_SetupStage+0x72>
 800632a:	2b02      	cmp	r3, #2
 800632c:	d822      	bhi.n	8006374 <USBD_LL_SetupStage+0x86>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <USBD_LL_SetupStage+0x4a>
 8006332:	2b01      	cmp	r3, #1
 8006334:	d00a      	beq.n	800634c <USBD_LL_SetupStage+0x5e>
 8006336:	e01d      	b.n	8006374 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fb5f 	bl	8006a04 <USBD_StdDevReq>
 8006346:	4603      	mov	r3, r0
 8006348:	73fb      	strb	r3, [r7, #15]
      break;
 800634a:	e020      	b.n	800638e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fbc7 	bl	8006ae8 <USBD_StdItfReq>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
      break;
 800635e:	e016      	b.n	800638e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc29 	bl	8006bc0 <USBD_StdEPReq>
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]
      break;
 8006372:	e00c      	b.n	800638e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800637a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800637e:	b2db      	uxtb	r3, r3
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fde0 	bl	8007f48 <USBD_LL_StallEP>
 8006388:	4603      	mov	r3, r0
 800638a:	73fb      	strb	r3, [r7, #15]
      break;
 800638c:	bf00      	nop
  }

  return ret;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	460b      	mov	r3, r1
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d16e      	bne.n	800648e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063be:	2b03      	cmp	r3, #3
 80063c0:	f040 8098 	bne.w	80064f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d913      	bls.n	80063f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	1ad2      	subs	r2, r2, r3
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	4293      	cmp	r3, r2
 80063e8:	bf28      	it	cs
 80063ea:	4613      	movcs	r3, r2
 80063ec:	461a      	mov	r2, r3
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f001 f984 	bl	80076fe <USBD_CtlContinueRx>
 80063f6:	e07d      	b.n	80064f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	2b02      	cmp	r3, #2
 8006404:	d014      	beq.n	8006430 <USBD_LL_DataOutStage+0x98>
 8006406:	2b02      	cmp	r3, #2
 8006408:	d81d      	bhi.n	8006446 <USBD_LL_DataOutStage+0xae>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <USBD_LL_DataOutStage+0x7c>
 800640e:	2b01      	cmp	r3, #1
 8006410:	d003      	beq.n	800641a <USBD_LL_DataOutStage+0x82>
 8006412:	e018      	b.n	8006446 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	75bb      	strb	r3, [r7, #22]
            break;
 8006418:	e018      	b.n	800644c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006420:	b2db      	uxtb	r3, r3
 8006422:	4619      	mov	r1, r3
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fa5e 	bl	80068e6 <USBD_CoreFindIF>
 800642a:	4603      	mov	r3, r0
 800642c:	75bb      	strb	r3, [r7, #22]
            break;
 800642e:	e00d      	b.n	800644c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006436:	b2db      	uxtb	r3, r3
 8006438:	4619      	mov	r1, r3
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fa60 	bl	8006900 <USBD_CoreFindEP>
 8006440:	4603      	mov	r3, r0
 8006442:	75bb      	strb	r3, [r7, #22]
            break;
 8006444:	e002      	b.n	800644c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	75bb      	strb	r3, [r7, #22]
            break;
 800644a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800644c:	7dbb      	ldrb	r3, [r7, #22]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d119      	bne.n	8006486 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b03      	cmp	r3, #3
 800645c:	d113      	bne.n	8006486 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800645e:	7dba      	ldrb	r2, [r7, #22]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	32ae      	adds	r2, #174	; 0xae
 8006464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800646e:	7dba      	ldrb	r2, [r7, #22]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006476:	7dba      	ldrb	r2, [r7, #22]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	32ae      	adds	r2, #174	; 0xae
 800647c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f001 f94a 	bl	8007720 <USBD_CtlSendStatus>
 800648c:	e032      	b.n	80064f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006494:	b2db      	uxtb	r3, r3
 8006496:	4619      	mov	r1, r3
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fa31 	bl	8006900 <USBD_CoreFindEP>
 800649e:	4603      	mov	r3, r0
 80064a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064a2:	7dbb      	ldrb	r3, [r7, #22]
 80064a4:	2bff      	cmp	r3, #255	; 0xff
 80064a6:	d025      	beq.n	80064f4 <USBD_LL_DataOutStage+0x15c>
 80064a8:	7dbb      	ldrb	r3, [r7, #22]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d122      	bne.n	80064f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d117      	bne.n	80064ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80064ba:	7dba      	ldrb	r2, [r7, #22]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	32ae      	adds	r2, #174	; 0xae
 80064c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00f      	beq.n	80064ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80064ca:	7dba      	ldrb	r2, [r7, #22]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064d2:	7dba      	ldrb	r2, [r7, #22]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	32ae      	adds	r2, #174	; 0xae
 80064d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	7afa      	ldrb	r2, [r7, #11]
 80064e0:	4611      	mov	r1, r2
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	4798      	blx	r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	e000      	b.n	80064f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	460b      	mov	r3, r1
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800650c:	7afb      	ldrb	r3, [r7, #11]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d16f      	bne.n	80065f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3314      	adds	r3, #20
 8006516:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800651e:	2b02      	cmp	r3, #2
 8006520:	d15a      	bne.n	80065d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	429a      	cmp	r2, r3
 800652c:	d914      	bls.n	8006558 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	1ad2      	subs	r2, r2, r3
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	461a      	mov	r2, r3
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f001 f8ac 	bl	80076a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800654a:	2300      	movs	r3, #0
 800654c:	2200      	movs	r2, #0
 800654e:	2100      	movs	r1, #0
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f001 fda3 	bl	800809c <USBD_LL_PrepareReceive>
 8006556:	e03f      	b.n	80065d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d11c      	bne.n	800659e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800656c:	429a      	cmp	r2, r3
 800656e:	d316      	bcc.n	800659e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800657a:	429a      	cmp	r2, r3
 800657c:	d20f      	bcs.n	800659e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800657e:	2200      	movs	r2, #0
 8006580:	2100      	movs	r1, #0
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f001 f88d 	bl	80076a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006590:	2300      	movs	r3, #0
 8006592:	2200      	movs	r2, #0
 8006594:	2100      	movs	r1, #0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f001 fd80 	bl	800809c <USBD_LL_PrepareReceive>
 800659c:	e01c      	b.n	80065d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d10f      	bne.n	80065ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065ca:	2180      	movs	r1, #128	; 0x80
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f001 fcbb 	bl	8007f48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f001 f8b7 	bl	8007746 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d03a      	beq.n	8006658 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff fe42 	bl	800626c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065f0:	e032      	b.n	8006658 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065f2:	7afb      	ldrb	r3, [r7, #11]
 80065f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	4619      	mov	r1, r3
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f97f 	bl	8006900 <USBD_CoreFindEP>
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	2bff      	cmp	r3, #255	; 0xff
 800660a:	d025      	beq.n	8006658 <USBD_LL_DataInStage+0x15a>
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d122      	bne.n	8006658 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b03      	cmp	r3, #3
 800661c:	d11c      	bne.n	8006658 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800661e:	7dfa      	ldrb	r2, [r7, #23]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	32ae      	adds	r2, #174	; 0xae
 8006624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d014      	beq.n	8006658 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800662e:	7dfa      	ldrb	r2, [r7, #23]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006636:	7dfa      	ldrb	r2, [r7, #23]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	32ae      	adds	r2, #174	; 0xae
 800663c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	7afa      	ldrb	r2, [r7, #11]
 8006644:	4611      	mov	r1, r2
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	4798      	blx	r3
 800664a:	4603      	mov	r3, r0
 800664c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800664e:	7dbb      	ldrb	r3, [r7, #22]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006654:	7dbb      	ldrb	r3, [r7, #22]
 8006656:	e000      	b.n	800665a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d014      	beq.n	80066c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00e      	beq.n	80066c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6852      	ldr	r2, [r2, #4]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	4611      	mov	r1, r2
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80066c4:	2303      	movs	r3, #3
 80066c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066c8:	2340      	movs	r3, #64	; 0x40
 80066ca:	2200      	movs	r2, #0
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fbf5 	bl	8007ebe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2240      	movs	r2, #64	; 0x40
 80066e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066e4:	2340      	movs	r3, #64	; 0x40
 80066e6:	2200      	movs	r2, #0
 80066e8:	2180      	movs	r1, #128	; 0x80
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fbe7 	bl	8007ebe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2240      	movs	r2, #64	; 0x40
 80066fa:	621a      	str	r2, [r3, #32]

  return ret;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	460b      	mov	r3, r1
 8006710:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	78fa      	ldrb	r2, [r7, #3]
 8006716:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006734:	b2da      	uxtb	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2204      	movs	r2, #4
 8006740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b04      	cmp	r3, #4
 8006764:	d106      	bne.n	8006774 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800676c:	b2da      	uxtb	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b03      	cmp	r3, #3
 8006794:	d110      	bne.n	80067b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32ae      	adds	r2, #174	; 0xae
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e01c      	b.n	800681e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d115      	bne.n	800681c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32ae      	adds	r2, #174	; 0xae
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	32ae      	adds	r2, #174	; 0xae
 800680e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	78fa      	ldrb	r2, [r7, #3]
 8006816:	4611      	mov	r1, r2
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	32ae      	adds	r2, #174	; 0xae
 800683c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006844:	2303      	movs	r3, #3
 8006846:	e01c      	b.n	8006882 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b03      	cmp	r3, #3
 8006852:	d115      	bne.n	8006880 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32ae      	adds	r2, #174	; 0xae
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00b      	beq.n	8006880 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	32ae      	adds	r2, #174	; 0xae
 8006872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	4611      	mov	r1, r2
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00e      	beq.n	80068dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6852      	ldr	r2, [r2, #4]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	4611      	mov	r1, r2
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068d8:	2303      	movs	r3, #3
 80068da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800690c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	885b      	ldrh	r3, [r3, #2]
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	429a      	cmp	r2, r3
 8006940:	d920      	bls.n	8006984 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800694a:	e013      	b.n	8006974 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800694c:	f107 030a 	add.w	r3, r7, #10
 8006950:	4619      	mov	r1, r3
 8006952:	6978      	ldr	r0, [r7, #20]
 8006954:	f000 f81b 	bl	800698e <USBD_GetNextDesc>
 8006958:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b05      	cmp	r3, #5
 8006960:	d108      	bne.n	8006974 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	789b      	ldrb	r3, [r3, #2]
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	429a      	cmp	r2, r3
 800696e:	d008      	beq.n	8006982 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	885b      	ldrh	r3, [r3, #2]
 8006978:	b29a      	uxth	r2, r3
 800697a:	897b      	ldrh	r3, [r7, #10]
 800697c:	429a      	cmp	r2, r3
 800697e:	d8e5      	bhi.n	800694c <USBD_GetEpDesc+0x32>
 8006980:	e000      	b.n	8006984 <USBD_GetEpDesc+0x6a>
          break;
 8006982:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006984:	693b      	ldr	r3, [r7, #16]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	881a      	ldrh	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	4413      	add	r3, r2
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4413      	add	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069ba:	68fb      	ldr	r3, [r7, #12]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	3301      	adds	r3, #1
 80069de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069e6:	8a3b      	ldrh	r3, [r7, #16]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	b21a      	sxth	r2, r3
 80069ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	b21b      	sxth	r3, r3
 80069f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069f6:	89fb      	ldrh	r3, [r7, #14]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a1a:	2b40      	cmp	r3, #64	; 0x40
 8006a1c:	d005      	beq.n	8006a2a <USBD_StdDevReq+0x26>
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	d857      	bhi.n	8006ad2 <USBD_StdDevReq+0xce>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00f      	beq.n	8006a46 <USBD_StdDevReq+0x42>
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d153      	bne.n	8006ad2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	32ae      	adds	r2, #174	; 0xae
 8006a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
      break;
 8006a44:	e04a      	b.n	8006adc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	2b09      	cmp	r3, #9
 8006a4c:	d83b      	bhi.n	8006ac6 <USBD_StdDevReq+0xc2>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <USBD_StdDevReq+0x50>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006aa9 	.word	0x08006aa9
 8006a58:	08006abd 	.word	0x08006abd
 8006a5c:	08006ac7 	.word	0x08006ac7
 8006a60:	08006ab3 	.word	0x08006ab3
 8006a64:	08006ac7 	.word	0x08006ac7
 8006a68:	08006a87 	.word	0x08006a87
 8006a6c:	08006a7d 	.word	0x08006a7d
 8006a70:	08006ac7 	.word	0x08006ac7
 8006a74:	08006a9f 	.word	0x08006a9f
 8006a78:	08006a91 	.word	0x08006a91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa3c 	bl	8006efc <USBD_GetDescriptor>
          break;
 8006a84:	e024      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fba1 	bl	80071d0 <USBD_SetAddress>
          break;
 8006a8e:	e01f      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fbe0 	bl	8007258 <USBD_SetConfig>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]
          break;
 8006a9c:	e018      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fc83 	bl	80073ac <USBD_GetConfig>
          break;
 8006aa6:	e013      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fcb4 	bl	8007418 <USBD_GetStatus>
          break;
 8006ab0:	e00e      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fce3 	bl	8007480 <USBD_SetFeature>
          break;
 8006aba:	e009      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fd07 	bl	80074d2 <USBD_ClrFeature>
          break;
 8006ac4:	e004      	b.n	8006ad0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fd5e 	bl	800758a <USBD_CtlError>
          break;
 8006ace:	bf00      	nop
      }
      break;
 8006ad0:	e004      	b.n	8006adc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fd58 	bl	800758a <USBD_CtlError>
      break;
 8006ada:	bf00      	nop
  }

  return ret;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop

08006ae8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d005      	beq.n	8006b0e <USBD_StdItfReq+0x26>
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	d852      	bhi.n	8006bac <USBD_StdItfReq+0xc4>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <USBD_StdItfReq+0x26>
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d14e      	bne.n	8006bac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d840      	bhi.n	8006b9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	889b      	ldrh	r3, [r3, #4]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d836      	bhi.n	8006b94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	889b      	ldrh	r3, [r3, #4]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff fed9 	bl	80068e6 <USBD_CoreFindIF>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2bff      	cmp	r3, #255	; 0xff
 8006b3c:	d01d      	beq.n	8006b7a <USBD_StdItfReq+0x92>
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d11a      	bne.n	8006b7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b44:	7bba      	ldrb	r2, [r7, #14]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	32ae      	adds	r2, #174	; 0xae
 8006b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00f      	beq.n	8006b74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b54:	7bba      	ldrb	r2, [r7, #14]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b5c:	7bba      	ldrb	r2, [r7, #14]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	32ae      	adds	r2, #174	; 0xae
 8006b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	4798      	blx	r3
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b72:	e004      	b.n	8006b7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b74:	2303      	movs	r3, #3
 8006b76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b78:	e001      	b.n	8006b7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	88db      	ldrh	r3, [r3, #6]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d110      	bne.n	8006ba8 <USBD_StdItfReq+0xc0>
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10d      	bne.n	8006ba8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fdc7 	bl	8007720 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b92:	e009      	b.n	8006ba8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fcf7 	bl	800758a <USBD_CtlError>
          break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fcf2 	bl	800758a <USBD_CtlError>
          break;
 8006ba6:	e000      	b.n	8006baa <USBD_StdItfReq+0xc2>
          break;
 8006ba8:	bf00      	nop
      }
      break;
 8006baa:	e004      	b.n	8006bb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fceb 	bl	800758a <USBD_CtlError>
      break;
 8006bb4:	bf00      	nop
  }

  return ret;
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	889b      	ldrh	r3, [r3, #4]
 8006bd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d007      	beq.n	8006bf0 <USBD_StdEPReq+0x30>
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	f200 817f 	bhi.w	8006ee4 <USBD_StdEPReq+0x324>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d02a      	beq.n	8006c40 <USBD_StdEPReq+0x80>
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	f040 817a 	bne.w	8006ee4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff fe83 	bl	8006900 <USBD_CoreFindEP>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bfe:	7b7b      	ldrb	r3, [r7, #13]
 8006c00:	2bff      	cmp	r3, #255	; 0xff
 8006c02:	f000 8174 	beq.w	8006eee <USBD_StdEPReq+0x32e>
 8006c06:	7b7b      	ldrb	r3, [r7, #13]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f040 8170 	bne.w	8006eee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c0e:	7b7a      	ldrb	r2, [r7, #13]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c16:	7b7a      	ldrb	r2, [r7, #13]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	32ae      	adds	r2, #174	; 0xae
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 8163 	beq.w	8006eee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c28:	7b7a      	ldrb	r2, [r7, #13]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32ae      	adds	r2, #174	; 0xae
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c3e:	e156      	b.n	8006eee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d008      	beq.n	8006c5a <USBD_StdEPReq+0x9a>
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	f300 8145 	bgt.w	8006ed8 <USBD_StdEPReq+0x318>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 809b 	beq.w	8006d8a <USBD_StdEPReq+0x1ca>
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d03c      	beq.n	8006cd2 <USBD_StdEPReq+0x112>
 8006c58:	e13e      	b.n	8006ed8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d002      	beq.n	8006c6c <USBD_StdEPReq+0xac>
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d016      	beq.n	8006c98 <USBD_StdEPReq+0xd8>
 8006c6a:	e02c      	b.n	8006cc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <USBD_StdEPReq+0xce>
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b80      	cmp	r3, #128	; 0x80
 8006c76:	d00a      	beq.n	8006c8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 f963 	bl	8007f48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c82:	2180      	movs	r1, #128	; 0x80
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 f95f 	bl	8007f48 <USBD_LL_StallEP>
 8006c8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c8c:	e020      	b.n	8006cd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc7a 	bl	800758a <USBD_CtlError>
              break;
 8006c96:	e01b      	b.n	8006cd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	885b      	ldrh	r3, [r3, #2]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10e      	bne.n	8006cbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <USBD_StdEPReq+0xfe>
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d008      	beq.n	8006cbe <USBD_StdEPReq+0xfe>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	88db      	ldrh	r3, [r3, #6]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 f945 	bl	8007f48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fd2e 	bl	8007720 <USBD_CtlSendStatus>

              break;
 8006cc4:	e004      	b.n	8006cd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc5e 	bl	800758a <USBD_CtlError>
              break;
 8006cce:	bf00      	nop
          }
          break;
 8006cd0:	e107      	b.n	8006ee2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d002      	beq.n	8006ce4 <USBD_StdEPReq+0x124>
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d016      	beq.n	8006d10 <USBD_StdEPReq+0x150>
 8006ce2:	e04b      	b.n	8006d7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00d      	beq.n	8006d06 <USBD_StdEPReq+0x146>
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	2b80      	cmp	r3, #128	; 0x80
 8006cee:	d00a      	beq.n	8006d06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 f927 	bl	8007f48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cfa:	2180      	movs	r1, #128	; 0x80
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 f923 	bl	8007f48 <USBD_LL_StallEP>
 8006d02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d04:	e040      	b.n	8006d88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fc3e 	bl	800758a <USBD_CtlError>
              break;
 8006d0e:	e03b      	b.n	8006d88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	885b      	ldrh	r3, [r3, #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d136      	bne.n	8006d86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 f92d 	bl	8007f86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fcf7 	bl	8007720 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fde2 	bl	8006900 <USBD_CoreFindEP>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d40:	7b7b      	ldrb	r3, [r7, #13]
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d01f      	beq.n	8006d86 <USBD_StdEPReq+0x1c6>
 8006d46:	7b7b      	ldrb	r3, [r7, #13]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d11c      	bne.n	8006d86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d4c:	7b7a      	ldrb	r2, [r7, #13]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d54:	7b7a      	ldrb	r2, [r7, #13]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	32ae      	adds	r2, #174	; 0xae
 8006d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d010      	beq.n	8006d86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d64:	7b7a      	ldrb	r2, [r7, #13]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32ae      	adds	r2, #174	; 0xae
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d7a:	e004      	b.n	8006d86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fc03 	bl	800758a <USBD_CtlError>
              break;
 8006d84:	e000      	b.n	8006d88 <USBD_StdEPReq+0x1c8>
              break;
 8006d86:	bf00      	nop
          }
          break;
 8006d88:	e0ab      	b.n	8006ee2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d002      	beq.n	8006d9c <USBD_StdEPReq+0x1dc>
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d032      	beq.n	8006e00 <USBD_StdEPReq+0x240>
 8006d9a:	e097      	b.n	8006ecc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <USBD_StdEPReq+0x1f2>
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b80      	cmp	r3, #128	; 0x80
 8006da6:	d004      	beq.n	8006db2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fbed 	bl	800758a <USBD_CtlError>
                break;
 8006db0:	e091      	b.n	8006ed6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da0b      	bge.n	8006dd2 <USBD_StdEPReq+0x212>
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	3310      	adds	r3, #16
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	3304      	adds	r3, #4
 8006dd0:	e00b      	b.n	8006dea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	4413      	add	r3, r2
 8006de8:	3304      	adds	r3, #4
 8006dea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2202      	movs	r2, #2
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fc37 	bl	800766c <USBD_CtlSendData>
              break;
 8006dfe:	e06a      	b.n	8006ed6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da11      	bge.n	8006e2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	f003 020f 	and.w	r2, r3, #15
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	3324      	adds	r3, #36	; 0x24
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d117      	bne.n	8006e52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fbb0 	bl	800758a <USBD_CtlError>
                  break;
 8006e2a:	e054      	b.n	8006ed6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	f003 020f 	and.w	r2, r3, #15
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fb9d 	bl	800758a <USBD_CtlError>
                  break;
 8006e50:	e041      	b.n	8006ed6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da0b      	bge.n	8006e72 <USBD_StdEPReq+0x2b2>
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	3310      	adds	r3, #16
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	3304      	adds	r3, #4
 8006e70:	e00b      	b.n	8006e8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	4413      	add	r3, r2
 8006e88:	3304      	adds	r3, #4
 8006e8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <USBD_StdEPReq+0x2d8>
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b80      	cmp	r3, #128	; 0x80
 8006e96:	d103      	bne.n	8006ea0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e00e      	b.n	8006ebe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f88d 	bl	8007fc4 <USBD_LL_IsStallEP>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fbd1 	bl	800766c <USBD_CtlSendData>
              break;
 8006eca:	e004      	b.n	8006ed6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fb5b 	bl	800758a <USBD_CtlError>
              break;
 8006ed4:	bf00      	nop
          }
          break;
 8006ed6:	e004      	b.n	8006ee2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fb55 	bl	800758a <USBD_CtlError>
          break;
 8006ee0:	bf00      	nop
      }
      break;
 8006ee2:	e005      	b.n	8006ef0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fb4f 	bl	800758a <USBD_CtlError>
      break;
 8006eec:	e000      	b.n	8006ef0 <USBD_StdEPReq+0x330>
      break;
 8006eee:	bf00      	nop
  }

  return ret;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	885b      	ldrh	r3, [r3, #2]
 8006f16:	0a1b      	lsrs	r3, r3, #8
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	2b06      	cmp	r3, #6
 8006f1e:	f200 8128 	bhi.w	8007172 <USBD_GetDescriptor+0x276>
 8006f22:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <USBD_GetDescriptor+0x2c>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f45 	.word	0x08006f45
 8006f2c:	08006f5d 	.word	0x08006f5d
 8006f30:	08006f9d 	.word	0x08006f9d
 8006f34:	08007173 	.word	0x08007173
 8006f38:	08007173 	.word	0x08007173
 8006f3c:	08007113 	.word	0x08007113
 8006f40:	0800713f 	.word	0x0800713f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7c12      	ldrb	r2, [r2, #16]
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
      break;
 8006f5a:	e112      	b.n	8007182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	7c1b      	ldrb	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10d      	bne.n	8006f80 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6c:	f107 0208 	add.w	r2, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f7e:	e100      	b.n	8007182 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	f107 0208 	add.w	r2, r7, #8
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4798      	blx	r3
 8006f90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	2202      	movs	r2, #2
 8006f98:	701a      	strb	r2, [r3, #0]
      break;
 8006f9a:	e0f2      	b.n	8007182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	885b      	ldrh	r3, [r3, #2]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b05      	cmp	r3, #5
 8006fa4:	f200 80ac 	bhi.w	8007100 <USBD_GetDescriptor+0x204>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <USBD_GetDescriptor+0xb4>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08006fc9 	.word	0x08006fc9
 8006fb4:	08006ffd 	.word	0x08006ffd
 8006fb8:	08007031 	.word	0x08007031
 8006fbc:	08007065 	.word	0x08007065
 8006fc0:	08007099 	.word	0x08007099
 8006fc4:	080070cd 	.word	0x080070cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00b      	beq.n	8006fec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	7c12      	ldrb	r2, [r2, #16]
 8006fe0:	f107 0108 	add.w	r1, r7, #8
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fea:	e091      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 facb 	bl	800758a <USBD_CtlError>
            err++;
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffa:	e089      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00b      	beq.n	8007020 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	7c12      	ldrb	r2, [r2, #16]
 8007014:	f107 0108 	add.w	r1, r7, #8
 8007018:	4610      	mov	r0, r2
 800701a:	4798      	blx	r3
 800701c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800701e:	e077      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fab1 	bl	800758a <USBD_CtlError>
            err++;
 8007028:	7afb      	ldrb	r3, [r7, #11]
 800702a:	3301      	adds	r3, #1
 800702c:	72fb      	strb	r3, [r7, #11]
          break;
 800702e:	e06f      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	7c12      	ldrb	r2, [r2, #16]
 8007048:	f107 0108 	add.w	r1, r7, #8
 800704c:	4610      	mov	r0, r2
 800704e:	4798      	blx	r3
 8007050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007052:	e05d      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa97 	bl	800758a <USBD_CtlError>
            err++;
 800705c:	7afb      	ldrb	r3, [r7, #11]
 800705e:	3301      	adds	r3, #1
 8007060:	72fb      	strb	r3, [r7, #11]
          break;
 8007062:	e055      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00b      	beq.n	8007088 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	7c12      	ldrb	r2, [r2, #16]
 800707c:	f107 0108 	add.w	r1, r7, #8
 8007080:	4610      	mov	r0, r2
 8007082:	4798      	blx	r3
 8007084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007086:	e043      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa7d 	bl	800758a <USBD_CtlError>
            err++;
 8007090:	7afb      	ldrb	r3, [r7, #11]
 8007092:	3301      	adds	r3, #1
 8007094:	72fb      	strb	r3, [r7, #11]
          break;
 8007096:	e03b      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	7c12      	ldrb	r2, [r2, #16]
 80070b0:	f107 0108 	add.w	r1, r7, #8
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
 80070b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ba:	e029      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa63 	bl	800758a <USBD_CtlError>
            err++;
 80070c4:	7afb      	ldrb	r3, [r7, #11]
 80070c6:	3301      	adds	r3, #1
 80070c8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ca:	e021      	b.n	8007110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	7c12      	ldrb	r2, [r2, #16]
 80070e4:	f107 0108 	add.w	r1, r7, #8
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ee:	e00f      	b.n	8007110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa49 	bl	800758a <USBD_CtlError>
            err++;
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	3301      	adds	r3, #1
 80070fc:	72fb      	strb	r3, [r7, #11]
          break;
 80070fe:	e007      	b.n	8007110 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa41 	bl	800758a <USBD_CtlError>
          err++;
 8007108:	7afb      	ldrb	r3, [r7, #11]
 800710a:	3301      	adds	r3, #1
 800710c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800710e:	bf00      	nop
      }
      break;
 8007110:	e037      	b.n	8007182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7c1b      	ldrb	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007122:	f107 0208 	add.w	r2, r7, #8
 8007126:	4610      	mov	r0, r2
 8007128:	4798      	blx	r3
 800712a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800712c:	e029      	b.n	8007182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fa2a 	bl	800758a <USBD_CtlError>
        err++;
 8007136:	7afb      	ldrb	r3, [r7, #11]
 8007138:	3301      	adds	r3, #1
 800713a:	72fb      	strb	r3, [r7, #11]
      break;
 800713c:	e021      	b.n	8007182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7c1b      	ldrb	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10d      	bne.n	8007162 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	f107 0208 	add.w	r2, r7, #8
 8007152:	4610      	mov	r0, r2
 8007154:	4798      	blx	r3
 8007156:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3301      	adds	r3, #1
 800715c:	2207      	movs	r2, #7
 800715e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007160:	e00f      	b.n	8007182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa10 	bl	800758a <USBD_CtlError>
        err++;
 800716a:	7afb      	ldrb	r3, [r7, #11]
 800716c:	3301      	adds	r3, #1
 800716e:	72fb      	strb	r3, [r7, #11]
      break;
 8007170:	e007      	b.n	8007182 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fa08 	bl	800758a <USBD_CtlError>
      err++;
 800717a:	7afb      	ldrb	r3, [r7, #11]
 800717c:	3301      	adds	r3, #1
 800717e:	72fb      	strb	r3, [r7, #11]
      break;
 8007180:	bf00      	nop
  }

  if (err != 0U)
 8007182:	7afb      	ldrb	r3, [r7, #11]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d11e      	bne.n	80071c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	88db      	ldrh	r3, [r3, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d016      	beq.n	80071be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007190:	893b      	ldrh	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00e      	beq.n	80071b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	88da      	ldrh	r2, [r3, #6]
 800719a:	893b      	ldrh	r3, [r7, #8]
 800719c:	4293      	cmp	r3, r2
 800719e:	bf28      	it	cs
 80071a0:	4613      	movcs	r3, r2
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071a6:	893b      	ldrh	r3, [r7, #8]
 80071a8:	461a      	mov	r2, r3
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fa5d 	bl	800766c <USBD_CtlSendData>
 80071b2:	e009      	b.n	80071c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9e7 	bl	800758a <USBD_CtlError>
 80071bc:	e004      	b.n	80071c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 faae 	bl	8007720 <USBD_CtlSendStatus>
 80071c4:	e000      	b.n	80071c8 <USBD_GetDescriptor+0x2cc>
    return;
 80071c6:	bf00      	nop
  }
}
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop

080071d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	889b      	ldrh	r3, [r3, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d131      	bne.n	8007246 <USBD_SetAddress+0x76>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	88db      	ldrh	r3, [r3, #6]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d12d      	bne.n	8007246 <USBD_SetAddress+0x76>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	885b      	ldrh	r3, [r3, #2]
 80071ee:	2b7f      	cmp	r3, #127	; 0x7f
 80071f0:	d829      	bhi.n	8007246 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	885b      	ldrh	r3, [r3, #2]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b03      	cmp	r3, #3
 8007208:	d104      	bne.n	8007214 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f9bc 	bl	800758a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007212:	e01d      	b.n	8007250 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7bfa      	ldrb	r2, [r7, #15]
 8007218:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fefb 	bl	800801c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa7a 	bl	8007720 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	e009      	b.n	8007250 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007244:	e004      	b.n	8007250 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f99e 	bl	800758a <USBD_CtlError>
  }
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	885b      	ldrh	r3, [r3, #2]
 800726a:	b2da      	uxtb	r2, r3
 800726c:	4b4e      	ldr	r3, [pc, #312]	; (80073a8 <USBD_SetConfig+0x150>)
 800726e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007270:	4b4d      	ldr	r3, [pc, #308]	; (80073a8 <USBD_SetConfig+0x150>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d905      	bls.n	8007284 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f985 	bl	800758a <USBD_CtlError>
    return USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	e08c      	b.n	800739e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d002      	beq.n	8007296 <USBD_SetConfig+0x3e>
 8007290:	2b03      	cmp	r3, #3
 8007292:	d029      	beq.n	80072e8 <USBD_SetConfig+0x90>
 8007294:	e075      	b.n	8007382 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007296:	4b44      	ldr	r3, [pc, #272]	; (80073a8 <USBD_SetConfig+0x150>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d020      	beq.n	80072e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800729e:	4b42      	ldr	r3, [pc, #264]	; (80073a8 <USBD_SetConfig+0x150>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072a8:	4b3f      	ldr	r3, [pc, #252]	; (80073a8 <USBD_SetConfig+0x150>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fe ffe7 	bl	8006282 <USBD_SetClassConfig>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f962 	bl	800758a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ce:	e065      	b.n	800739c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fa25 	bl	8007720 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2203      	movs	r2, #3
 80072da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072de:	e05d      	b.n	800739c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fa1d 	bl	8007720 <USBD_CtlSendStatus>
      break;
 80072e6:	e059      	b.n	800739c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072e8:	4b2f      	ldr	r3, [pc, #188]	; (80073a8 <USBD_SetConfig+0x150>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d112      	bne.n	8007316 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072f8:	4b2b      	ldr	r3, [pc, #172]	; (80073a8 <USBD_SetConfig+0x150>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007302:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <USBD_SetConfig+0x150>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7fe ffd6 	bl	80062ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fa06 	bl	8007720 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007314:	e042      	b.n	800739c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007316:	4b24      	ldr	r3, [pc, #144]	; (80073a8 <USBD_SetConfig+0x150>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	429a      	cmp	r2, r3
 8007322:	d02a      	beq.n	800737a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fe ffc4 	bl	80062ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007332:	4b1d      	ldr	r3, [pc, #116]	; (80073a8 <USBD_SetConfig+0x150>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800733c:	4b1a      	ldr	r3, [pc, #104]	; (80073a8 <USBD_SetConfig+0x150>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fe ff9d 	bl	8006282 <USBD_SetClassConfig>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00f      	beq.n	8007372 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f918 	bl	800758a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fe ffa9 	bl	80062ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007370:	e014      	b.n	800739c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9d4 	bl	8007720 <USBD_CtlSendStatus>
      break;
 8007378:	e010      	b.n	800739c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9d0 	bl	8007720 <USBD_CtlSendStatus>
      break;
 8007380:	e00c      	b.n	800739c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f900 	bl	800758a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800738a:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <USBD_SetConfig+0x150>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fe ff92 	bl	80062ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007396:	2303      	movs	r3, #3
 8007398:	73fb      	strb	r3, [r7, #15]
      break;
 800739a:	bf00      	nop
  }

  return ret;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000214 	.word	0x20000214

080073ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88db      	ldrh	r3, [r3, #6]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d004      	beq.n	80073c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f8e2 	bl	800758a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073c6:	e023      	b.n	8007410 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	dc02      	bgt.n	80073da <USBD_GetConfig+0x2e>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dc03      	bgt.n	80073e0 <USBD_GetConfig+0x34>
 80073d8:	e015      	b.n	8007406 <USBD_GetConfig+0x5a>
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d00b      	beq.n	80073f6 <USBD_GetConfig+0x4a>
 80073de:	e012      	b.n	8007406 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3308      	adds	r3, #8
 80073ea:	2201      	movs	r2, #1
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f93c 	bl	800766c <USBD_CtlSendData>
        break;
 80073f4:	e00c      	b.n	8007410 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
 80073fa:	2201      	movs	r2, #1
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f934 	bl	800766c <USBD_CtlSendData>
        break;
 8007404:	e004      	b.n	8007410 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f8be 	bl	800758a <USBD_CtlError>
        break;
 800740e:	bf00      	nop
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007428:	b2db      	uxtb	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	2b02      	cmp	r3, #2
 800742e:	d81e      	bhi.n	800746e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	88db      	ldrh	r3, [r3, #6]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d004      	beq.n	8007442 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8a5 	bl	800758a <USBD_CtlError>
        break;
 8007440:	e01a      	b.n	8007478 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f043 0202 	orr.w	r2, r3, #2
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	330c      	adds	r3, #12
 8007462:	2202      	movs	r2, #2
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f900 	bl	800766c <USBD_CtlSendData>
      break;
 800746c:	e004      	b.n	8007478 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f88a 	bl	800758a <USBD_CtlError>
      break;
 8007476:	bf00      	nop
  }
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	885b      	ldrh	r3, [r3, #2]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d107      	bne.n	80074a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f940 	bl	8007720 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80074a0:	e013      	b.n	80074ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	885b      	ldrh	r3, [r3, #2]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d10b      	bne.n	80074c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	889b      	ldrh	r3, [r3, #4]
 80074ae:	0a1b      	lsrs	r3, r3, #8
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f930 	bl	8007720 <USBD_CtlSendStatus>
}
 80074c0:	e003      	b.n	80074ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f860 	bl	800758a <USBD_CtlError>
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d80b      	bhi.n	8007502 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d10c      	bne.n	800750c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f910 	bl	8007720 <USBD_CtlSendStatus>
      }
      break;
 8007500:	e004      	b.n	800750c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f840 	bl	800758a <USBD_CtlError>
      break;
 800750a:	e000      	b.n	800750e <USBD_ClrFeature+0x3c>
      break;
 800750c:	bf00      	nop
  }
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	781a      	ldrb	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	781a      	ldrb	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fa41 	bl	80069c8 <SWAPBYTE>
 8007546:	4603      	mov	r3, r0
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3301      	adds	r3, #1
 8007552:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff fa34 	bl	80069c8 <SWAPBYTE>
 8007560:	4603      	mov	r3, r0
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff fa27 	bl	80069c8 <SWAPBYTE>
 800757a:	4603      	mov	r3, r0
 800757c:	461a      	mov	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	80da      	strh	r2, [r3, #6]
}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007594:	2180      	movs	r1, #128	; 0x80
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fcd6 	bl	8007f48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800759c:	2100      	movs	r1, #0
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fcd2 	bl	8007f48 <USBD_LL_StallEP>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d036      	beq.n	8007630 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075c6:	6938      	ldr	r0, [r7, #16]
 80075c8:	f000 f836 	bl	8007638 <USBD_GetLen>
 80075cc:	4603      	mov	r3, r0
 80075ce:	3301      	adds	r3, #1
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	4413      	add	r3, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7812      	ldrb	r2, [r2, #0]
 80075e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	3301      	adds	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4413      	add	r3, r2
 80075f2:	2203      	movs	r2, #3
 80075f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	3301      	adds	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075fc:	e013      	b.n	8007626 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	4413      	add	r3, r2
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	7812      	ldrb	r2, [r2, #0]
 8007608:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	3301      	adds	r3, #1
 800760e:	613b      	str	r3, [r7, #16]
    idx++;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	3301      	adds	r3, #1
 8007614:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	4413      	add	r3, r2
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	3301      	adds	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e7      	bne.n	80075fe <USBD_GetString+0x52>
 800762e:	e000      	b.n	8007632 <USBD_GetString+0x86>
    return;
 8007630:	bf00      	nop
  }
}
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007648:	e005      	b.n	8007656 <USBD_GetLen+0x1e>
  {
    len++;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	3301      	adds	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	3301      	adds	r3, #1
 8007654:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f5      	bne.n	800764a <USBD_GetLen+0x12>
  }

  return len;
 800765e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2202      	movs	r2, #2
 800767c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	2100      	movs	r1, #0
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fce1 	bl	800805a <USBD_LL_Transmit>

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	2100      	movs	r1, #0
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fcd0 	bl	800805a <USBD_LL_Transmit>

  return USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2203      	movs	r2, #3
 80076d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	2100      	movs	r1, #0
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 fcd4 	bl	800809c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	2100      	movs	r1, #0
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fcc3 	bl	800809c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2204      	movs	r2, #4
 800772c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007730:	2300      	movs	r3, #0
 8007732:	2200      	movs	r2, #0
 8007734:	2100      	movs	r1, #0
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fc8f 	bl	800805a <USBD_LL_Transmit>

  return USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2205      	movs	r2, #5
 8007752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007756:	2300      	movs	r3, #0
 8007758:	2200      	movs	r2, #0
 800775a:	2100      	movs	r1, #0
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fc9d 	bl	800809c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007770:	2200      	movs	r2, #0
 8007772:	4912      	ldr	r1, [pc, #72]	; (80077bc <MX_USB_DEVICE_Init+0x50>)
 8007774:	4812      	ldr	r0, [pc, #72]	; (80077c0 <MX_USB_DEVICE_Init+0x54>)
 8007776:	f7fe fd07 	bl	8006188 <USBD_Init>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007780:	f7f9 f816 	bl	80007b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007784:	490f      	ldr	r1, [pc, #60]	; (80077c4 <MX_USB_DEVICE_Init+0x58>)
 8007786:	480e      	ldr	r0, [pc, #56]	; (80077c0 <MX_USB_DEVICE_Init+0x54>)
 8007788:	f7fe fd2e 	bl	80061e8 <USBD_RegisterClass>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007792:	f7f9 f80d 	bl	80007b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007796:	490c      	ldr	r1, [pc, #48]	; (80077c8 <MX_USB_DEVICE_Init+0x5c>)
 8007798:	4809      	ldr	r0, [pc, #36]	; (80077c0 <MX_USB_DEVICE_Init+0x54>)
 800779a:	f7fe fc1f 	bl	8005fdc <USBD_CDC_RegisterInterface>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077a4:	f7f9 f804 	bl	80007b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077a8:	4805      	ldr	r0, [pc, #20]	; (80077c0 <MX_USB_DEVICE_Init+0x54>)
 80077aa:	f7fe fd53 	bl	8006254 <USBD_Start>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077b4:	f7f8 fffc 	bl	80007b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077b8:	bf00      	nop
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	200000ac 	.word	0x200000ac
 80077c0:	20000218 	.word	0x20000218
 80077c4:	20000018 	.word	0x20000018
 80077c8:	20000098 	.word	0x20000098

080077cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077d0:	2200      	movs	r2, #0
 80077d2:	4905      	ldr	r1, [pc, #20]	; (80077e8 <CDC_Init_FS+0x1c>)
 80077d4:	4805      	ldr	r0, [pc, #20]	; (80077ec <CDC_Init_FS+0x20>)
 80077d6:	f7fe fc1b 	bl	8006010 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077da:	4905      	ldr	r1, [pc, #20]	; (80077f0 <CDC_Init_FS+0x24>)
 80077dc:	4803      	ldr	r0, [pc, #12]	; (80077ec <CDC_Init_FS+0x20>)
 80077de:	f7fe fc39 	bl	8006054 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 80077e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	200008f4 	.word	0x200008f4
 80077ec:	20000218 	.word	0x20000218
 80077f0:	200004f4 	.word	0x200004f4

080077f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 80077f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	71fb      	strb	r3, [r7, #7]
 8007810:	4613      	mov	r3, r2
 8007812:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	2b23      	cmp	r3, #35	; 0x23
 8007818:	d84a      	bhi.n	80078b0 <CDC_Control_FS+0xac>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <CDC_Control_FS+0x1c>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	080078b1 	.word	0x080078b1
 8007824:	080078b1 	.word	0x080078b1
 8007828:	080078b1 	.word	0x080078b1
 800782c:	080078b1 	.word	0x080078b1
 8007830:	080078b1 	.word	0x080078b1
 8007834:	080078b1 	.word	0x080078b1
 8007838:	080078b1 	.word	0x080078b1
 800783c:	080078b1 	.word	0x080078b1
 8007840:	080078b1 	.word	0x080078b1
 8007844:	080078b1 	.word	0x080078b1
 8007848:	080078b1 	.word	0x080078b1
 800784c:	080078b1 	.word	0x080078b1
 8007850:	080078b1 	.word	0x080078b1
 8007854:	080078b1 	.word	0x080078b1
 8007858:	080078b1 	.word	0x080078b1
 800785c:	080078b1 	.word	0x080078b1
 8007860:	080078b1 	.word	0x080078b1
 8007864:	080078b1 	.word	0x080078b1
 8007868:	080078b1 	.word	0x080078b1
 800786c:	080078b1 	.word	0x080078b1
 8007870:	080078b1 	.word	0x080078b1
 8007874:	080078b1 	.word	0x080078b1
 8007878:	080078b1 	.word	0x080078b1
 800787c:	080078b1 	.word	0x080078b1
 8007880:	080078b1 	.word	0x080078b1
 8007884:	080078b1 	.word	0x080078b1
 8007888:	080078b1 	.word	0x080078b1
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078b1 	.word	0x080078b1
 8007894:	080078b1 	.word	0x080078b1
 8007898:	080078b1 	.word	0x080078b1
 800789c:	080078b1 	.word	0x080078b1
 80078a0:	080078b1 	.word	0x080078b1
 80078a4:	080078b1 	.word	0x080078b1
 80078a8:	080078b1 	.word	0x080078b1
 80078ac:	080078b1 	.word	0x080078b1
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 80078b0:	bf00      	nop
    }

    return (USBD_OK);
 80078b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078ca:	6879      	ldr	r1, [r7, #4]
 80078cc:	4805      	ldr	r0, [pc, #20]	; (80078e4 <CDC_Receive_FS+0x24>)
 80078ce:	f7fe fbc1 	bl	8006054 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078d2:	4804      	ldr	r0, [pc, #16]	; (80078e4 <CDC_Receive_FS+0x24>)
 80078d4:	f7fe fc22 	bl	800611c <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 80078d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000218 	.word	0x20000218

080078e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80078f8:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <CDC_Transmit_FS+0x48>)
 80078fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078fe:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800790a:	2301      	movs	r3, #1
 800790c:	e00b      	b.n	8007926 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800790e:	887b      	ldrh	r3, [r7, #2]
 8007910:	461a      	mov	r2, r3
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	4806      	ldr	r0, [pc, #24]	; (8007930 <CDC_Transmit_FS+0x48>)
 8007916:	f7fe fb7b 	bl	8006010 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800791a:	4805      	ldr	r0, [pc, #20]	; (8007930 <CDC_Transmit_FS+0x48>)
 800791c:	f7fe fbb8 	bl	8006090 <USBD_CDC_TransmitPacket>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20000218 	.word	0x20000218

08007934 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800794a:	4618      	mov	r0, r3
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2212      	movs	r2, #18
 8007968:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800796a:	4b03      	ldr	r3, [pc, #12]	; (8007978 <USBD_FS_DeviceDescriptor+0x20>)
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	200000c8 	.word	0x200000c8

0800797c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2204      	movs	r2, #4
 800798c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800798e:	4b03      	ldr	r3, [pc, #12]	; (800799c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007990:	4618      	mov	r0, r3
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	200000dc 	.word	0x200000dc

080079a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	6039      	str	r1, [r7, #0]
 80079aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d105      	bne.n	80079be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	4907      	ldr	r1, [pc, #28]	; (80079d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80079b6:	4808      	ldr	r0, [pc, #32]	; (80079d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80079b8:	f7ff fdf8 	bl	80075ac <USBD_GetString>
 80079bc:	e004      	b.n	80079c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	4904      	ldr	r1, [pc, #16]	; (80079d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80079c2:	4805      	ldr	r0, [pc, #20]	; (80079d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80079c4:	f7ff fdf2 	bl	80075ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000cf4 	.word	0x20000cf4
 80079d8:	08008b10 	.word	0x08008b10

080079dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	4904      	ldr	r1, [pc, #16]	; (80079fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079ec:	4804      	ldr	r0, [pc, #16]	; (8007a00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079ee:	f7ff fddd 	bl	80075ac <USBD_GetString>
  return USBD_StrDesc;
 80079f2:	4b02      	ldr	r3, [pc, #8]	; (80079fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000cf4 	.word	0x20000cf4
 8007a00:	08008b28 	.word	0x08008b28

08007a04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	221a      	movs	r2, #26
 8007a14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a16:	f000 f843 	bl	8007aa0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a1a:	4b02      	ldr	r3, [pc, #8]	; (8007a24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	200000e0 	.word	0x200000e0

08007a28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d105      	bne.n	8007a46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	4907      	ldr	r1, [pc, #28]	; (8007a5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a3e:	4808      	ldr	r0, [pc, #32]	; (8007a60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a40:	f7ff fdb4 	bl	80075ac <USBD_GetString>
 8007a44:	e004      	b.n	8007a50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	4904      	ldr	r1, [pc, #16]	; (8007a5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a4a:	4805      	ldr	r0, [pc, #20]	; (8007a60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a4c:	f7ff fdae 	bl	80075ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a50:	4b02      	ldr	r3, [pc, #8]	; (8007a5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000cf4 	.word	0x20000cf4
 8007a60:	08008b3c 	.word	0x08008b3c

08007a64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d105      	bne.n	8007a82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	4907      	ldr	r1, [pc, #28]	; (8007a98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a7a:	4808      	ldr	r0, [pc, #32]	; (8007a9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a7c:	f7ff fd96 	bl	80075ac <USBD_GetString>
 8007a80:	e004      	b.n	8007a8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	4904      	ldr	r1, [pc, #16]	; (8007a98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a86:	4805      	ldr	r0, [pc, #20]	; (8007a9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a88:	f7ff fd90 	bl	80075ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a8c:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20000cf4 	.word	0x20000cf4
 8007a9c:	08008b48 	.word	0x08008b48

08007aa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <Get_SerialNum+0x44>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007aac:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <Get_SerialNum+0x48>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ab2:	4b0e      	ldr	r3, [pc, #56]	; (8007aec <Get_SerialNum+0x4c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d009      	beq.n	8007ada <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ac6:	2208      	movs	r2, #8
 8007ac8:	4909      	ldr	r1, [pc, #36]	; (8007af0 <Get_SerialNum+0x50>)
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 f814 	bl	8007af8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ad0:	2204      	movs	r2, #4
 8007ad2:	4908      	ldr	r1, [pc, #32]	; (8007af4 <Get_SerialNum+0x54>)
 8007ad4:	68b8      	ldr	r0, [r7, #8]
 8007ad6:	f000 f80f 	bl	8007af8 <IntToUnicode>
  }
}
 8007ada:	bf00      	nop
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	1fff7a10 	.word	0x1fff7a10
 8007ae8:	1fff7a14 	.word	0x1fff7a14
 8007aec:	1fff7a18 	.word	0x1fff7a18
 8007af0:	200000e2 	.word	0x200000e2
 8007af4:	200000f2 	.word	0x200000f2

08007af8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	4613      	mov	r3, r2
 8007b04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	75fb      	strb	r3, [r7, #23]
 8007b0e:	e027      	b.n	8007b60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	0f1b      	lsrs	r3, r3, #28
 8007b14:	2b09      	cmp	r3, #9
 8007b16:	d80b      	bhi.n	8007b30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	0f1b      	lsrs	r3, r3, #28
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	4619      	mov	r1, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	440b      	add	r3, r1
 8007b28:	3230      	adds	r2, #48	; 0x30
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	e00a      	b.n	8007b46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	0f1b      	lsrs	r3, r3, #28
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	440b      	add	r3, r1
 8007b40:	3237      	adds	r2, #55	; 0x37
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	3301      	adds	r3, #1
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	4413      	add	r3, r2
 8007b56:	2200      	movs	r2, #0
 8007b58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]
 8007b60:	7dfa      	ldrb	r2, [r7, #23]
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d3d3      	bcc.n	8007b10 <IntToUnicode+0x18>
  }
}
 8007b68:	bf00      	nop
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
	...

08007b78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08a      	sub	sp, #40	; 0x28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b80:	f107 0314 	add.w	r3, r7, #20
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	605a      	str	r2, [r3, #4]
 8007b8a:	609a      	str	r2, [r3, #8]
 8007b8c:	60da      	str	r2, [r3, #12]
 8007b8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b98:	d13a      	bne.n	8007c10 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	613b      	str	r3, [r7, #16]
 8007b9e:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <HAL_PCD_MspInit+0xa0>)
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	4a1d      	ldr	r2, [pc, #116]	; (8007c18 <HAL_PCD_MspInit+0xa0>)
 8007ba4:	f043 0301 	orr.w	r3, r3, #1
 8007ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8007baa:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <HAL_PCD_MspInit+0xa0>)
 8007bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	613b      	str	r3, [r7, #16]
 8007bb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007bb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bc8:	230a      	movs	r3, #10
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4812      	ldr	r0, [pc, #72]	; (8007c1c <HAL_PCD_MspInit+0xa4>)
 8007bd4:	f7f9 fc1c 	bl	8001410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <HAL_PCD_MspInit+0xa0>)
 8007bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bdc:	4a0e      	ldr	r2, [pc, #56]	; (8007c18 <HAL_PCD_MspInit+0xa0>)
 8007bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be2:	6353      	str	r3, [r2, #52]	; 0x34
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <HAL_PCD_MspInit+0xa0>)
 8007bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bec:	4a0a      	ldr	r2, [pc, #40]	; (8007c18 <HAL_PCD_MspInit+0xa0>)
 8007bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bf2:	6453      	str	r3, [r2, #68]	; 0x44
 8007bf4:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <HAL_PCD_MspInit+0xa0>)
 8007bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c00:	2200      	movs	r2, #0
 8007c02:	2100      	movs	r1, #0
 8007c04:	2043      	movs	r0, #67	; 0x43
 8007c06:	f7f9 f9e6 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c0a:	2043      	movs	r0, #67	; 0x43
 8007c0c:	f7f9 f9ff 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c10:	bf00      	nop
 8007c12:	3728      	adds	r7, #40	; 0x28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	40020000 	.word	0x40020000

08007c20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f7fe fb59 	bl	80062ee <USBD_LL_SetupStage>
}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c56:	78fa      	ldrb	r2, [r7, #3]
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	f7fe fb93 	bl	8006398 <USBD_LL_DataOutStage>
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c8c:	78fa      	ldrb	r2, [r7, #3]
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	4613      	mov	r3, r2
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	334c      	adds	r3, #76	; 0x4c
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	78fb      	ldrb	r3, [r7, #3]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	f7fe fc2c 	bl	80064fe <USBD_LL_DataInStage>
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe fd60 	bl	8006782 <USBD_LL_SOF>
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d001      	beq.n	8007ce2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007cde:	f7f8 fd67 	bl	80007b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ce8:	7bfa      	ldrb	r2, [r7, #15]
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe fd0a 	bl	8006706 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe fcb2 	bl	8006662 <USBD_LL_Reset>
}
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe fd05 	bl	8006726 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	6812      	ldr	r2, [r2, #0]
 8007d2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d2e:	f043 0301 	orr.w	r3, r3, #1
 8007d32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <HAL_PCD_SuspendCallback+0x48>)
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	4a03      	ldr	r2, [pc, #12]	; (8007d50 <HAL_PCD_SuspendCallback+0x48>)
 8007d42:	f043 0306 	orr.w	r3, r3, #6
 8007d46:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	e000ed00 	.word	0xe000ed00

08007d54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fcf5 	bl	8006752 <USBD_LL_Resume>
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fd4d 	bl	8006826 <USBD_LL_IsoOUTIncomplete>
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fd09 	bl	80067c2 <USBD_LL_IsoINIncomplete>
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe fd5f 	bl	800688a <USBD_LL_DevConnected>
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe fd5c 	bl	80068a0 <USBD_LL_DevDisconnected>
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d13c      	bne.n	8007e7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e00:	4a20      	ldr	r2, [pc, #128]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a1e      	ldr	r2, [pc, #120]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e0c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e10:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e18:	4b1a      	ldr	r3, [pc, #104]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e1e:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e20:	2202      	movs	r2, #2
 8007e22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e24:	4b17      	ldr	r3, [pc, #92]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e2a:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e30:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e36:	4b13      	ldr	r3, [pc, #76]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e3c:	4b11      	ldr	r3, [pc, #68]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e42:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e48:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e4e:	480d      	ldr	r0, [pc, #52]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e50:	f7f9 fc62 	bl	8001718 <HAL_PCD_Init>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e5a:	f7f8 fca9 	bl	80007b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e5e:	2180      	movs	r1, #128	; 0x80
 8007e60:	4808      	ldr	r0, [pc, #32]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e62:	f7fa feba 	bl	8002bda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e66:	2240      	movs	r2, #64	; 0x40
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4806      	ldr	r0, [pc, #24]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e6c:	f7fa fe6e 	bl	8002b4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e70:	2280      	movs	r2, #128	; 0x80
 8007e72:	2101      	movs	r1, #1
 8007e74:	4803      	ldr	r0, [pc, #12]	; (8007e84 <USBD_LL_Init+0x94>)
 8007e76:	f7fa fe69 	bl	8002b4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000ef4 	.word	0x20000ef4

08007e88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7f9 fd57 	bl	8001952 <HAL_PCD_Start>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f942 	bl	8008134 <USBD_Get_USB_Status>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	461a      	mov	r2, r3
 8007ecc:	4603      	mov	r3, r0
 8007ece:	70fb      	strb	r3, [r7, #3]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70bb      	strb	r3, [r7, #2]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ee6:	78bb      	ldrb	r3, [r7, #2]
 8007ee8:	883a      	ldrh	r2, [r7, #0]
 8007eea:	78f9      	ldrb	r1, [r7, #3]
 8007eec:	f7fa fa28 	bl	8002340 <HAL_PCD_EP_Open>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f91c 	bl	8008134 <USBD_Get_USB_Status>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f24:	78fa      	ldrb	r2, [r7, #3]
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fa fa71 	bl	8002410 <HAL_PCD_EP_Close>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f8fd 	bl	8008134 <USBD_Get_USB_Status>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	4611      	mov	r1, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fa fb49 	bl	80025fe <HAL_PCD_EP_SetStall>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 f8de 	bl	8008134 <USBD_Get_USB_Status>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fa fb8e 	bl	80026c6 <HAL_PCD_EP_ClrStall>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f8bf 	bl	8008134 <USBD_Get_USB_Status>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	da0b      	bge.n	8007ff8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	333e      	adds	r3, #62	; 0x3e
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	e00b      	b.n	8008010 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ffe:	68f9      	ldr	r1, [r7, #12]
 8008000:	4613      	mov	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	440b      	add	r3, r1
 800800a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800800e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f7fa f95b 	bl	80022f6 <HAL_PCD_SetAddress>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f874 	bl	8008134 <USBD_Get_USB_Status>
 800804c:	4603      	mov	r3, r0
 800804e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008050:	7bbb      	ldrb	r3, [r7, #14]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b086      	sub	sp, #24
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	460b      	mov	r3, r1
 8008068:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008078:	7af9      	ldrb	r1, [r7, #11]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	f7fa fa74 	bl	800256a <HAL_PCD_EP_Transmit>
 8008082:	4603      	mov	r3, r0
 8008084:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 f853 	bl	8008134 <USBD_Get_USB_Status>
 800808e:	4603      	mov	r3, r0
 8008090:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008092:	7dbb      	ldrb	r3, [r7, #22]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	460b      	mov	r3, r1
 80080aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80080ba:	7af9      	ldrb	r1, [r7, #11]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	f7fa f9f0 	bl	80024a4 <HAL_PCD_EP_Receive>
 80080c4:	4603      	mov	r3, r0
 80080c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f832 	bl	8008134 <USBD_Get_USB_Status>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fa fa20 	bl	800253a <HAL_PCD_EP_GetRxCount>
 80080fa:	4603      	mov	r3, r0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800810c:	4b03      	ldr	r3, [pc, #12]	; (800811c <USBD_static_malloc+0x18>)
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20001400 	.word	0x20001400

08008120 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]

}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d817      	bhi.n	8008178 <USBD_Get_USB_Status+0x44>
 8008148:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <USBD_Get_USB_Status+0x1c>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008161 	.word	0x08008161
 8008154:	08008167 	.word	0x08008167
 8008158:	0800816d 	.word	0x0800816d
 800815c:	08008173 	.word	0x08008173
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]
    break;
 8008164:	e00b      	b.n	800817e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008166:	2303      	movs	r3, #3
 8008168:	73fb      	strb	r3, [r7, #15]
    break;
 800816a:	e008      	b.n	800817e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800816c:	2301      	movs	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
    break;
 8008170:	e005      	b.n	800817e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	73fb      	strb	r3, [r7, #15]
    break;
 8008176:	e002      	b.n	800817e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	73fb      	strb	r3, [r7, #15]
    break;
 800817c:	bf00      	nop
  }
  return usb_status;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <malloc>:
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <malloc+0xc>)
 800818e:	4601      	mov	r1, r0
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	f000 b823 	b.w	80081dc <_malloc_r>
 8008196:	bf00      	nop
 8008198:	20000148 	.word	0x20000148

0800819c <sbrk_aligned>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	4e0e      	ldr	r6, [pc, #56]	; (80081d8 <sbrk_aligned+0x3c>)
 80081a0:	460c      	mov	r4, r1
 80081a2:	6831      	ldr	r1, [r6, #0]
 80081a4:	4605      	mov	r5, r0
 80081a6:	b911      	cbnz	r1, 80081ae <sbrk_aligned+0x12>
 80081a8:	f000 f8cc 	bl	8008344 <_sbrk_r>
 80081ac:	6030      	str	r0, [r6, #0]
 80081ae:	4621      	mov	r1, r4
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 f8c7 	bl	8008344 <_sbrk_r>
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	d00a      	beq.n	80081d0 <sbrk_aligned+0x34>
 80081ba:	1cc4      	adds	r4, r0, #3
 80081bc:	f024 0403 	bic.w	r4, r4, #3
 80081c0:	42a0      	cmp	r0, r4
 80081c2:	d007      	beq.n	80081d4 <sbrk_aligned+0x38>
 80081c4:	1a21      	subs	r1, r4, r0
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f8bc 	bl	8008344 <_sbrk_r>
 80081cc:	3001      	adds	r0, #1
 80081ce:	d101      	bne.n	80081d4 <sbrk_aligned+0x38>
 80081d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80081d4:	4620      	mov	r0, r4
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	20001624 	.word	0x20001624

080081dc <_malloc_r>:
 80081dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e0:	1ccd      	adds	r5, r1, #3
 80081e2:	f025 0503 	bic.w	r5, r5, #3
 80081e6:	3508      	adds	r5, #8
 80081e8:	2d0c      	cmp	r5, #12
 80081ea:	bf38      	it	cc
 80081ec:	250c      	movcc	r5, #12
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	4607      	mov	r7, r0
 80081f2:	db01      	blt.n	80081f8 <_malloc_r+0x1c>
 80081f4:	42a9      	cmp	r1, r5
 80081f6:	d905      	bls.n	8008204 <_malloc_r+0x28>
 80081f8:	230c      	movs	r3, #12
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	2600      	movs	r6, #0
 80081fe:	4630      	mov	r0, r6
 8008200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008204:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082d8 <_malloc_r+0xfc>
 8008208:	f000 f868 	bl	80082dc <__malloc_lock>
 800820c:	f8d8 3000 	ldr.w	r3, [r8]
 8008210:	461c      	mov	r4, r3
 8008212:	bb5c      	cbnz	r4, 800826c <_malloc_r+0x90>
 8008214:	4629      	mov	r1, r5
 8008216:	4638      	mov	r0, r7
 8008218:	f7ff ffc0 	bl	800819c <sbrk_aligned>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	4604      	mov	r4, r0
 8008220:	d155      	bne.n	80082ce <_malloc_r+0xf2>
 8008222:	f8d8 4000 	ldr.w	r4, [r8]
 8008226:	4626      	mov	r6, r4
 8008228:	2e00      	cmp	r6, #0
 800822a:	d145      	bne.n	80082b8 <_malloc_r+0xdc>
 800822c:	2c00      	cmp	r4, #0
 800822e:	d048      	beq.n	80082c2 <_malloc_r+0xe6>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	4631      	mov	r1, r6
 8008234:	4638      	mov	r0, r7
 8008236:	eb04 0903 	add.w	r9, r4, r3
 800823a:	f000 f883 	bl	8008344 <_sbrk_r>
 800823e:	4581      	cmp	r9, r0
 8008240:	d13f      	bne.n	80082c2 <_malloc_r+0xe6>
 8008242:	6821      	ldr	r1, [r4, #0]
 8008244:	1a6d      	subs	r5, r5, r1
 8008246:	4629      	mov	r1, r5
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff ffa7 	bl	800819c <sbrk_aligned>
 800824e:	3001      	adds	r0, #1
 8008250:	d037      	beq.n	80082c2 <_malloc_r+0xe6>
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	442b      	add	r3, r5
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	f8d8 3000 	ldr.w	r3, [r8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d038      	beq.n	80082d2 <_malloc_r+0xf6>
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	42a2      	cmp	r2, r4
 8008264:	d12b      	bne.n	80082be <_malloc_r+0xe2>
 8008266:	2200      	movs	r2, #0
 8008268:	605a      	str	r2, [r3, #4]
 800826a:	e00f      	b.n	800828c <_malloc_r+0xb0>
 800826c:	6822      	ldr	r2, [r4, #0]
 800826e:	1b52      	subs	r2, r2, r5
 8008270:	d41f      	bmi.n	80082b2 <_malloc_r+0xd6>
 8008272:	2a0b      	cmp	r2, #11
 8008274:	d917      	bls.n	80082a6 <_malloc_r+0xca>
 8008276:	1961      	adds	r1, r4, r5
 8008278:	42a3      	cmp	r3, r4
 800827a:	6025      	str	r5, [r4, #0]
 800827c:	bf18      	it	ne
 800827e:	6059      	strne	r1, [r3, #4]
 8008280:	6863      	ldr	r3, [r4, #4]
 8008282:	bf08      	it	eq
 8008284:	f8c8 1000 	streq.w	r1, [r8]
 8008288:	5162      	str	r2, [r4, r5]
 800828a:	604b      	str	r3, [r1, #4]
 800828c:	4638      	mov	r0, r7
 800828e:	f104 060b 	add.w	r6, r4, #11
 8008292:	f000 f829 	bl	80082e8 <__malloc_unlock>
 8008296:	f026 0607 	bic.w	r6, r6, #7
 800829a:	1d23      	adds	r3, r4, #4
 800829c:	1af2      	subs	r2, r6, r3
 800829e:	d0ae      	beq.n	80081fe <_malloc_r+0x22>
 80082a0:	1b9b      	subs	r3, r3, r6
 80082a2:	50a3      	str	r3, [r4, r2]
 80082a4:	e7ab      	b.n	80081fe <_malloc_r+0x22>
 80082a6:	42a3      	cmp	r3, r4
 80082a8:	6862      	ldr	r2, [r4, #4]
 80082aa:	d1dd      	bne.n	8008268 <_malloc_r+0x8c>
 80082ac:	f8c8 2000 	str.w	r2, [r8]
 80082b0:	e7ec      	b.n	800828c <_malloc_r+0xb0>
 80082b2:	4623      	mov	r3, r4
 80082b4:	6864      	ldr	r4, [r4, #4]
 80082b6:	e7ac      	b.n	8008212 <_malloc_r+0x36>
 80082b8:	4634      	mov	r4, r6
 80082ba:	6876      	ldr	r6, [r6, #4]
 80082bc:	e7b4      	b.n	8008228 <_malloc_r+0x4c>
 80082be:	4613      	mov	r3, r2
 80082c0:	e7cc      	b.n	800825c <_malloc_r+0x80>
 80082c2:	230c      	movs	r3, #12
 80082c4:	603b      	str	r3, [r7, #0]
 80082c6:	4638      	mov	r0, r7
 80082c8:	f000 f80e 	bl	80082e8 <__malloc_unlock>
 80082cc:	e797      	b.n	80081fe <_malloc_r+0x22>
 80082ce:	6025      	str	r5, [r4, #0]
 80082d0:	e7dc      	b.n	800828c <_malloc_r+0xb0>
 80082d2:	605b      	str	r3, [r3, #4]
 80082d4:	deff      	udf	#255	; 0xff
 80082d6:	bf00      	nop
 80082d8:	20001620 	.word	0x20001620

080082dc <__malloc_lock>:
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <__malloc_lock+0x8>)
 80082de:	f000 b86b 	b.w	80083b8 <__retarget_lock_acquire_recursive>
 80082e2:	bf00      	nop
 80082e4:	20001764 	.word	0x20001764

080082e8 <__malloc_unlock>:
 80082e8:	4801      	ldr	r0, [pc, #4]	; (80082f0 <__malloc_unlock+0x8>)
 80082ea:	f000 b866 	b.w	80083ba <__retarget_lock_release_recursive>
 80082ee:	bf00      	nop
 80082f0:	20001764 	.word	0x20001764

080082f4 <siprintf>:
 80082f4:	b40e      	push	{r1, r2, r3}
 80082f6:	b500      	push	{lr}
 80082f8:	b09c      	sub	sp, #112	; 0x70
 80082fa:	ab1d      	add	r3, sp, #116	; 0x74
 80082fc:	9002      	str	r0, [sp, #8]
 80082fe:	9006      	str	r0, [sp, #24]
 8008300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008304:	4809      	ldr	r0, [pc, #36]	; (800832c <siprintf+0x38>)
 8008306:	9107      	str	r1, [sp, #28]
 8008308:	9104      	str	r1, [sp, #16]
 800830a:	4909      	ldr	r1, [pc, #36]	; (8008330 <siprintf+0x3c>)
 800830c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008310:	9105      	str	r1, [sp, #20]
 8008312:	6800      	ldr	r0, [r0, #0]
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	a902      	add	r1, sp, #8
 8008318:	f000 f8f6 	bl	8008508 <_svfiprintf_r>
 800831c:	9b02      	ldr	r3, [sp, #8]
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	b01c      	add	sp, #112	; 0x70
 8008324:	f85d eb04 	ldr.w	lr, [sp], #4
 8008328:	b003      	add	sp, #12
 800832a:	4770      	bx	lr
 800832c:	20000148 	.word	0x20000148
 8008330:	ffff0208 	.word	0xffff0208

08008334 <memset>:
 8008334:	4402      	add	r2, r0
 8008336:	4603      	mov	r3, r0
 8008338:	4293      	cmp	r3, r2
 800833a:	d100      	bne.n	800833e <memset+0xa>
 800833c:	4770      	bx	lr
 800833e:	f803 1b01 	strb.w	r1, [r3], #1
 8008342:	e7f9      	b.n	8008338 <memset+0x4>

08008344 <_sbrk_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d06      	ldr	r5, [pc, #24]	; (8008360 <_sbrk_r+0x1c>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7f8 fb0c 	bl	800096c <_sbrk>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_sbrk_r+0x1a>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_sbrk_r+0x1a>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20001760 	.word	0x20001760

08008364 <__errno>:
 8008364:	4b01      	ldr	r3, [pc, #4]	; (800836c <__errno+0x8>)
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	20000148 	.word	0x20000148

08008370 <__libc_init_array>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	4d0d      	ldr	r5, [pc, #52]	; (80083a8 <__libc_init_array+0x38>)
 8008374:	4c0d      	ldr	r4, [pc, #52]	; (80083ac <__libc_init_array+0x3c>)
 8008376:	1b64      	subs	r4, r4, r5
 8008378:	10a4      	asrs	r4, r4, #2
 800837a:	2600      	movs	r6, #0
 800837c:	42a6      	cmp	r6, r4
 800837e:	d109      	bne.n	8008394 <__libc_init_array+0x24>
 8008380:	4d0b      	ldr	r5, [pc, #44]	; (80083b0 <__libc_init_array+0x40>)
 8008382:	4c0c      	ldr	r4, [pc, #48]	; (80083b4 <__libc_init_array+0x44>)
 8008384:	f000 fbae 	bl	8008ae4 <_init>
 8008388:	1b64      	subs	r4, r4, r5
 800838a:	10a4      	asrs	r4, r4, #2
 800838c:	2600      	movs	r6, #0
 800838e:	42a6      	cmp	r6, r4
 8008390:	d105      	bne.n	800839e <__libc_init_array+0x2e>
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	f855 3b04 	ldr.w	r3, [r5], #4
 8008398:	4798      	blx	r3
 800839a:	3601      	adds	r6, #1
 800839c:	e7ee      	b.n	800837c <__libc_init_array+0xc>
 800839e:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a2:	4798      	blx	r3
 80083a4:	3601      	adds	r6, #1
 80083a6:	e7f2      	b.n	800838e <__libc_init_array+0x1e>
 80083a8:	08008bb4 	.word	0x08008bb4
 80083ac:	08008bb4 	.word	0x08008bb4
 80083b0:	08008bb4 	.word	0x08008bb4
 80083b4:	08008bb8 	.word	0x08008bb8

080083b8 <__retarget_lock_acquire_recursive>:
 80083b8:	4770      	bx	lr

080083ba <__retarget_lock_release_recursive>:
 80083ba:	4770      	bx	lr

080083bc <_free_r>:
 80083bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083be:	2900      	cmp	r1, #0
 80083c0:	d044      	beq.n	800844c <_free_r+0x90>
 80083c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c6:	9001      	str	r0, [sp, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f1a1 0404 	sub.w	r4, r1, #4
 80083ce:	bfb8      	it	lt
 80083d0:	18e4      	addlt	r4, r4, r3
 80083d2:	f7ff ff83 	bl	80082dc <__malloc_lock>
 80083d6:	4a1e      	ldr	r2, [pc, #120]	; (8008450 <_free_r+0x94>)
 80083d8:	9801      	ldr	r0, [sp, #4]
 80083da:	6813      	ldr	r3, [r2, #0]
 80083dc:	b933      	cbnz	r3, 80083ec <_free_r+0x30>
 80083de:	6063      	str	r3, [r4, #4]
 80083e0:	6014      	str	r4, [r2, #0]
 80083e2:	b003      	add	sp, #12
 80083e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e8:	f7ff bf7e 	b.w	80082e8 <__malloc_unlock>
 80083ec:	42a3      	cmp	r3, r4
 80083ee:	d908      	bls.n	8008402 <_free_r+0x46>
 80083f0:	6825      	ldr	r5, [r4, #0]
 80083f2:	1961      	adds	r1, r4, r5
 80083f4:	428b      	cmp	r3, r1
 80083f6:	bf01      	itttt	eq
 80083f8:	6819      	ldreq	r1, [r3, #0]
 80083fa:	685b      	ldreq	r3, [r3, #4]
 80083fc:	1949      	addeq	r1, r1, r5
 80083fe:	6021      	streq	r1, [r4, #0]
 8008400:	e7ed      	b.n	80083de <_free_r+0x22>
 8008402:	461a      	mov	r2, r3
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	b10b      	cbz	r3, 800840c <_free_r+0x50>
 8008408:	42a3      	cmp	r3, r4
 800840a:	d9fa      	bls.n	8008402 <_free_r+0x46>
 800840c:	6811      	ldr	r1, [r2, #0]
 800840e:	1855      	adds	r5, r2, r1
 8008410:	42a5      	cmp	r5, r4
 8008412:	d10b      	bne.n	800842c <_free_r+0x70>
 8008414:	6824      	ldr	r4, [r4, #0]
 8008416:	4421      	add	r1, r4
 8008418:	1854      	adds	r4, r2, r1
 800841a:	42a3      	cmp	r3, r4
 800841c:	6011      	str	r1, [r2, #0]
 800841e:	d1e0      	bne.n	80083e2 <_free_r+0x26>
 8008420:	681c      	ldr	r4, [r3, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	6053      	str	r3, [r2, #4]
 8008426:	440c      	add	r4, r1
 8008428:	6014      	str	r4, [r2, #0]
 800842a:	e7da      	b.n	80083e2 <_free_r+0x26>
 800842c:	d902      	bls.n	8008434 <_free_r+0x78>
 800842e:	230c      	movs	r3, #12
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	e7d6      	b.n	80083e2 <_free_r+0x26>
 8008434:	6825      	ldr	r5, [r4, #0]
 8008436:	1961      	adds	r1, r4, r5
 8008438:	428b      	cmp	r3, r1
 800843a:	bf04      	itt	eq
 800843c:	6819      	ldreq	r1, [r3, #0]
 800843e:	685b      	ldreq	r3, [r3, #4]
 8008440:	6063      	str	r3, [r4, #4]
 8008442:	bf04      	itt	eq
 8008444:	1949      	addeq	r1, r1, r5
 8008446:	6021      	streq	r1, [r4, #0]
 8008448:	6054      	str	r4, [r2, #4]
 800844a:	e7ca      	b.n	80083e2 <_free_r+0x26>
 800844c:	b003      	add	sp, #12
 800844e:	bd30      	pop	{r4, r5, pc}
 8008450:	20001620 	.word	0x20001620

08008454 <__ssputs_r>:
 8008454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008458:	688e      	ldr	r6, [r1, #8]
 800845a:	461f      	mov	r7, r3
 800845c:	42be      	cmp	r6, r7
 800845e:	680b      	ldr	r3, [r1, #0]
 8008460:	4682      	mov	sl, r0
 8008462:	460c      	mov	r4, r1
 8008464:	4690      	mov	r8, r2
 8008466:	d82c      	bhi.n	80084c2 <__ssputs_r+0x6e>
 8008468:	898a      	ldrh	r2, [r1, #12]
 800846a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800846e:	d026      	beq.n	80084be <__ssputs_r+0x6a>
 8008470:	6965      	ldr	r5, [r4, #20]
 8008472:	6909      	ldr	r1, [r1, #16]
 8008474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008478:	eba3 0901 	sub.w	r9, r3, r1
 800847c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008480:	1c7b      	adds	r3, r7, #1
 8008482:	444b      	add	r3, r9
 8008484:	106d      	asrs	r5, r5, #1
 8008486:	429d      	cmp	r5, r3
 8008488:	bf38      	it	cc
 800848a:	461d      	movcc	r5, r3
 800848c:	0553      	lsls	r3, r2, #21
 800848e:	d527      	bpl.n	80084e0 <__ssputs_r+0x8c>
 8008490:	4629      	mov	r1, r5
 8008492:	f7ff fea3 	bl	80081dc <_malloc_r>
 8008496:	4606      	mov	r6, r0
 8008498:	b360      	cbz	r0, 80084f4 <__ssputs_r+0xa0>
 800849a:	6921      	ldr	r1, [r4, #16]
 800849c:	464a      	mov	r2, r9
 800849e:	f000 fadb 	bl	8008a58 <memcpy>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	6126      	str	r6, [r4, #16]
 80084b0:	6165      	str	r5, [r4, #20]
 80084b2:	444e      	add	r6, r9
 80084b4:	eba5 0509 	sub.w	r5, r5, r9
 80084b8:	6026      	str	r6, [r4, #0]
 80084ba:	60a5      	str	r5, [r4, #8]
 80084bc:	463e      	mov	r6, r7
 80084be:	42be      	cmp	r6, r7
 80084c0:	d900      	bls.n	80084c4 <__ssputs_r+0x70>
 80084c2:	463e      	mov	r6, r7
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	4632      	mov	r2, r6
 80084c8:	4641      	mov	r1, r8
 80084ca:	f000 faab 	bl	8008a24 <memmove>
 80084ce:	68a3      	ldr	r3, [r4, #8]
 80084d0:	1b9b      	subs	r3, r3, r6
 80084d2:	60a3      	str	r3, [r4, #8]
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	4433      	add	r3, r6
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	2000      	movs	r0, #0
 80084dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e0:	462a      	mov	r2, r5
 80084e2:	f000 fac7 	bl	8008a74 <_realloc_r>
 80084e6:	4606      	mov	r6, r0
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d1e0      	bne.n	80084ae <__ssputs_r+0x5a>
 80084ec:	6921      	ldr	r1, [r4, #16]
 80084ee:	4650      	mov	r0, sl
 80084f0:	f7ff ff64 	bl	80083bc <_free_r>
 80084f4:	230c      	movs	r3, #12
 80084f6:	f8ca 3000 	str.w	r3, [sl]
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008506:	e7e9      	b.n	80084dc <__ssputs_r+0x88>

08008508 <_svfiprintf_r>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	4698      	mov	r8, r3
 800850e:	898b      	ldrh	r3, [r1, #12]
 8008510:	061b      	lsls	r3, r3, #24
 8008512:	b09d      	sub	sp, #116	; 0x74
 8008514:	4607      	mov	r7, r0
 8008516:	460d      	mov	r5, r1
 8008518:	4614      	mov	r4, r2
 800851a:	d50e      	bpl.n	800853a <_svfiprintf_r+0x32>
 800851c:	690b      	ldr	r3, [r1, #16]
 800851e:	b963      	cbnz	r3, 800853a <_svfiprintf_r+0x32>
 8008520:	2140      	movs	r1, #64	; 0x40
 8008522:	f7ff fe5b 	bl	80081dc <_malloc_r>
 8008526:	6028      	str	r0, [r5, #0]
 8008528:	6128      	str	r0, [r5, #16]
 800852a:	b920      	cbnz	r0, 8008536 <_svfiprintf_r+0x2e>
 800852c:	230c      	movs	r3, #12
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008534:	e0d0      	b.n	80086d8 <_svfiprintf_r+0x1d0>
 8008536:	2340      	movs	r3, #64	; 0x40
 8008538:	616b      	str	r3, [r5, #20]
 800853a:	2300      	movs	r3, #0
 800853c:	9309      	str	r3, [sp, #36]	; 0x24
 800853e:	2320      	movs	r3, #32
 8008540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008544:	f8cd 800c 	str.w	r8, [sp, #12]
 8008548:	2330      	movs	r3, #48	; 0x30
 800854a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086f0 <_svfiprintf_r+0x1e8>
 800854e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008552:	f04f 0901 	mov.w	r9, #1
 8008556:	4623      	mov	r3, r4
 8008558:	469a      	mov	sl, r3
 800855a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855e:	b10a      	cbz	r2, 8008564 <_svfiprintf_r+0x5c>
 8008560:	2a25      	cmp	r2, #37	; 0x25
 8008562:	d1f9      	bne.n	8008558 <_svfiprintf_r+0x50>
 8008564:	ebba 0b04 	subs.w	fp, sl, r4
 8008568:	d00b      	beq.n	8008582 <_svfiprintf_r+0x7a>
 800856a:	465b      	mov	r3, fp
 800856c:	4622      	mov	r2, r4
 800856e:	4629      	mov	r1, r5
 8008570:	4638      	mov	r0, r7
 8008572:	f7ff ff6f 	bl	8008454 <__ssputs_r>
 8008576:	3001      	adds	r0, #1
 8008578:	f000 80a9 	beq.w	80086ce <_svfiprintf_r+0x1c6>
 800857c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857e:	445a      	add	r2, fp
 8008580:	9209      	str	r2, [sp, #36]	; 0x24
 8008582:	f89a 3000 	ldrb.w	r3, [sl]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80a1 	beq.w	80086ce <_svfiprintf_r+0x1c6>
 800858c:	2300      	movs	r3, #0
 800858e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008596:	f10a 0a01 	add.w	sl, sl, #1
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	9307      	str	r3, [sp, #28]
 800859e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a2:	931a      	str	r3, [sp, #104]	; 0x68
 80085a4:	4654      	mov	r4, sl
 80085a6:	2205      	movs	r2, #5
 80085a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ac:	4850      	ldr	r0, [pc, #320]	; (80086f0 <_svfiprintf_r+0x1e8>)
 80085ae:	f7f7 fe17 	bl	80001e0 <memchr>
 80085b2:	9a04      	ldr	r2, [sp, #16]
 80085b4:	b9d8      	cbnz	r0, 80085ee <_svfiprintf_r+0xe6>
 80085b6:	06d0      	lsls	r0, r2, #27
 80085b8:	bf44      	itt	mi
 80085ba:	2320      	movmi	r3, #32
 80085bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c0:	0711      	lsls	r1, r2, #28
 80085c2:	bf44      	itt	mi
 80085c4:	232b      	movmi	r3, #43	; 0x2b
 80085c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ca:	f89a 3000 	ldrb.w	r3, [sl]
 80085ce:	2b2a      	cmp	r3, #42	; 0x2a
 80085d0:	d015      	beq.n	80085fe <_svfiprintf_r+0xf6>
 80085d2:	9a07      	ldr	r2, [sp, #28]
 80085d4:	4654      	mov	r4, sl
 80085d6:	2000      	movs	r0, #0
 80085d8:	f04f 0c0a 	mov.w	ip, #10
 80085dc:	4621      	mov	r1, r4
 80085de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e2:	3b30      	subs	r3, #48	; 0x30
 80085e4:	2b09      	cmp	r3, #9
 80085e6:	d94d      	bls.n	8008684 <_svfiprintf_r+0x17c>
 80085e8:	b1b0      	cbz	r0, 8008618 <_svfiprintf_r+0x110>
 80085ea:	9207      	str	r2, [sp, #28]
 80085ec:	e014      	b.n	8008618 <_svfiprintf_r+0x110>
 80085ee:	eba0 0308 	sub.w	r3, r0, r8
 80085f2:	fa09 f303 	lsl.w	r3, r9, r3
 80085f6:	4313      	orrs	r3, r2
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	46a2      	mov	sl, r4
 80085fc:	e7d2      	b.n	80085a4 <_svfiprintf_r+0x9c>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	1d19      	adds	r1, r3, #4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	9103      	str	r1, [sp, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	bfbb      	ittet	lt
 800860a:	425b      	neglt	r3, r3
 800860c:	f042 0202 	orrlt.w	r2, r2, #2
 8008610:	9307      	strge	r3, [sp, #28]
 8008612:	9307      	strlt	r3, [sp, #28]
 8008614:	bfb8      	it	lt
 8008616:	9204      	strlt	r2, [sp, #16]
 8008618:	7823      	ldrb	r3, [r4, #0]
 800861a:	2b2e      	cmp	r3, #46	; 0x2e
 800861c:	d10c      	bne.n	8008638 <_svfiprintf_r+0x130>
 800861e:	7863      	ldrb	r3, [r4, #1]
 8008620:	2b2a      	cmp	r3, #42	; 0x2a
 8008622:	d134      	bne.n	800868e <_svfiprintf_r+0x186>
 8008624:	9b03      	ldr	r3, [sp, #12]
 8008626:	1d1a      	adds	r2, r3, #4
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	9203      	str	r2, [sp, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	bfb8      	it	lt
 8008630:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008634:	3402      	adds	r4, #2
 8008636:	9305      	str	r3, [sp, #20]
 8008638:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008700 <_svfiprintf_r+0x1f8>
 800863c:	7821      	ldrb	r1, [r4, #0]
 800863e:	2203      	movs	r2, #3
 8008640:	4650      	mov	r0, sl
 8008642:	f7f7 fdcd 	bl	80001e0 <memchr>
 8008646:	b138      	cbz	r0, 8008658 <_svfiprintf_r+0x150>
 8008648:	9b04      	ldr	r3, [sp, #16]
 800864a:	eba0 000a 	sub.w	r0, r0, sl
 800864e:	2240      	movs	r2, #64	; 0x40
 8008650:	4082      	lsls	r2, r0
 8008652:	4313      	orrs	r3, r2
 8008654:	3401      	adds	r4, #1
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865c:	4825      	ldr	r0, [pc, #148]	; (80086f4 <_svfiprintf_r+0x1ec>)
 800865e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008662:	2206      	movs	r2, #6
 8008664:	f7f7 fdbc 	bl	80001e0 <memchr>
 8008668:	2800      	cmp	r0, #0
 800866a:	d038      	beq.n	80086de <_svfiprintf_r+0x1d6>
 800866c:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <_svfiprintf_r+0x1f0>)
 800866e:	bb1b      	cbnz	r3, 80086b8 <_svfiprintf_r+0x1b0>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	3307      	adds	r3, #7
 8008674:	f023 0307 	bic.w	r3, r3, #7
 8008678:	3308      	adds	r3, #8
 800867a:	9303      	str	r3, [sp, #12]
 800867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867e:	4433      	add	r3, r6
 8008680:	9309      	str	r3, [sp, #36]	; 0x24
 8008682:	e768      	b.n	8008556 <_svfiprintf_r+0x4e>
 8008684:	fb0c 3202 	mla	r2, ip, r2, r3
 8008688:	460c      	mov	r4, r1
 800868a:	2001      	movs	r0, #1
 800868c:	e7a6      	b.n	80085dc <_svfiprintf_r+0xd4>
 800868e:	2300      	movs	r3, #0
 8008690:	3401      	adds	r4, #1
 8008692:	9305      	str	r3, [sp, #20]
 8008694:	4619      	mov	r1, r3
 8008696:	f04f 0c0a 	mov.w	ip, #10
 800869a:	4620      	mov	r0, r4
 800869c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a0:	3a30      	subs	r2, #48	; 0x30
 80086a2:	2a09      	cmp	r2, #9
 80086a4:	d903      	bls.n	80086ae <_svfiprintf_r+0x1a6>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0c6      	beq.n	8008638 <_svfiprintf_r+0x130>
 80086aa:	9105      	str	r1, [sp, #20]
 80086ac:	e7c4      	b.n	8008638 <_svfiprintf_r+0x130>
 80086ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b2:	4604      	mov	r4, r0
 80086b4:	2301      	movs	r3, #1
 80086b6:	e7f0      	b.n	800869a <_svfiprintf_r+0x192>
 80086b8:	ab03      	add	r3, sp, #12
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	462a      	mov	r2, r5
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <_svfiprintf_r+0x1f4>)
 80086c0:	a904      	add	r1, sp, #16
 80086c2:	4638      	mov	r0, r7
 80086c4:	f3af 8000 	nop.w
 80086c8:	1c42      	adds	r2, r0, #1
 80086ca:	4606      	mov	r6, r0
 80086cc:	d1d6      	bne.n	800867c <_svfiprintf_r+0x174>
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	065b      	lsls	r3, r3, #25
 80086d2:	f53f af2d 	bmi.w	8008530 <_svfiprintf_r+0x28>
 80086d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d8:	b01d      	add	sp, #116	; 0x74
 80086da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086de:	ab03      	add	r3, sp, #12
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	462a      	mov	r2, r5
 80086e4:	4b05      	ldr	r3, [pc, #20]	; (80086fc <_svfiprintf_r+0x1f4>)
 80086e6:	a904      	add	r1, sp, #16
 80086e8:	4638      	mov	r0, r7
 80086ea:	f000 f879 	bl	80087e0 <_printf_i>
 80086ee:	e7eb      	b.n	80086c8 <_svfiprintf_r+0x1c0>
 80086f0:	08008b78 	.word	0x08008b78
 80086f4:	08008b82 	.word	0x08008b82
 80086f8:	00000000 	.word	0x00000000
 80086fc:	08008455 	.word	0x08008455
 8008700:	08008b7e 	.word	0x08008b7e

08008704 <_printf_common>:
 8008704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008708:	4616      	mov	r6, r2
 800870a:	4699      	mov	r9, r3
 800870c:	688a      	ldr	r2, [r1, #8]
 800870e:	690b      	ldr	r3, [r1, #16]
 8008710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008714:	4293      	cmp	r3, r2
 8008716:	bfb8      	it	lt
 8008718:	4613      	movlt	r3, r2
 800871a:	6033      	str	r3, [r6, #0]
 800871c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008720:	4607      	mov	r7, r0
 8008722:	460c      	mov	r4, r1
 8008724:	b10a      	cbz	r2, 800872a <_printf_common+0x26>
 8008726:	3301      	adds	r3, #1
 8008728:	6033      	str	r3, [r6, #0]
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	0699      	lsls	r1, r3, #26
 800872e:	bf42      	ittt	mi
 8008730:	6833      	ldrmi	r3, [r6, #0]
 8008732:	3302      	addmi	r3, #2
 8008734:	6033      	strmi	r3, [r6, #0]
 8008736:	6825      	ldr	r5, [r4, #0]
 8008738:	f015 0506 	ands.w	r5, r5, #6
 800873c:	d106      	bne.n	800874c <_printf_common+0x48>
 800873e:	f104 0a19 	add.w	sl, r4, #25
 8008742:	68e3      	ldr	r3, [r4, #12]
 8008744:	6832      	ldr	r2, [r6, #0]
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	42ab      	cmp	r3, r5
 800874a:	dc26      	bgt.n	800879a <_printf_common+0x96>
 800874c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008750:	1e13      	subs	r3, r2, #0
 8008752:	6822      	ldr	r2, [r4, #0]
 8008754:	bf18      	it	ne
 8008756:	2301      	movne	r3, #1
 8008758:	0692      	lsls	r2, r2, #26
 800875a:	d42b      	bmi.n	80087b4 <_printf_common+0xb0>
 800875c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008760:	4649      	mov	r1, r9
 8008762:	4638      	mov	r0, r7
 8008764:	47c0      	blx	r8
 8008766:	3001      	adds	r0, #1
 8008768:	d01e      	beq.n	80087a8 <_printf_common+0xa4>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	6922      	ldr	r2, [r4, #16]
 800876e:	f003 0306 	and.w	r3, r3, #6
 8008772:	2b04      	cmp	r3, #4
 8008774:	bf02      	ittt	eq
 8008776:	68e5      	ldreq	r5, [r4, #12]
 8008778:	6833      	ldreq	r3, [r6, #0]
 800877a:	1aed      	subeq	r5, r5, r3
 800877c:	68a3      	ldr	r3, [r4, #8]
 800877e:	bf0c      	ite	eq
 8008780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008784:	2500      	movne	r5, #0
 8008786:	4293      	cmp	r3, r2
 8008788:	bfc4      	itt	gt
 800878a:	1a9b      	subgt	r3, r3, r2
 800878c:	18ed      	addgt	r5, r5, r3
 800878e:	2600      	movs	r6, #0
 8008790:	341a      	adds	r4, #26
 8008792:	42b5      	cmp	r5, r6
 8008794:	d11a      	bne.n	80087cc <_printf_common+0xc8>
 8008796:	2000      	movs	r0, #0
 8008798:	e008      	b.n	80087ac <_printf_common+0xa8>
 800879a:	2301      	movs	r3, #1
 800879c:	4652      	mov	r2, sl
 800879e:	4649      	mov	r1, r9
 80087a0:	4638      	mov	r0, r7
 80087a2:	47c0      	blx	r8
 80087a4:	3001      	adds	r0, #1
 80087a6:	d103      	bne.n	80087b0 <_printf_common+0xac>
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b0:	3501      	adds	r5, #1
 80087b2:	e7c6      	b.n	8008742 <_printf_common+0x3e>
 80087b4:	18e1      	adds	r1, r4, r3
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	2030      	movs	r0, #48	; 0x30
 80087ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087be:	4422      	add	r2, r4
 80087c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087c8:	3302      	adds	r3, #2
 80087ca:	e7c7      	b.n	800875c <_printf_common+0x58>
 80087cc:	2301      	movs	r3, #1
 80087ce:	4622      	mov	r2, r4
 80087d0:	4649      	mov	r1, r9
 80087d2:	4638      	mov	r0, r7
 80087d4:	47c0      	blx	r8
 80087d6:	3001      	adds	r0, #1
 80087d8:	d0e6      	beq.n	80087a8 <_printf_common+0xa4>
 80087da:	3601      	adds	r6, #1
 80087dc:	e7d9      	b.n	8008792 <_printf_common+0x8e>
	...

080087e0 <_printf_i>:
 80087e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e4:	7e0f      	ldrb	r7, [r1, #24]
 80087e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087e8:	2f78      	cmp	r7, #120	; 0x78
 80087ea:	4691      	mov	r9, r2
 80087ec:	4680      	mov	r8, r0
 80087ee:	460c      	mov	r4, r1
 80087f0:	469a      	mov	sl, r3
 80087f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087f6:	d807      	bhi.n	8008808 <_printf_i+0x28>
 80087f8:	2f62      	cmp	r7, #98	; 0x62
 80087fa:	d80a      	bhi.n	8008812 <_printf_i+0x32>
 80087fc:	2f00      	cmp	r7, #0
 80087fe:	f000 80d4 	beq.w	80089aa <_printf_i+0x1ca>
 8008802:	2f58      	cmp	r7, #88	; 0x58
 8008804:	f000 80c0 	beq.w	8008988 <_printf_i+0x1a8>
 8008808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800880c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008810:	e03a      	b.n	8008888 <_printf_i+0xa8>
 8008812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008816:	2b15      	cmp	r3, #21
 8008818:	d8f6      	bhi.n	8008808 <_printf_i+0x28>
 800881a:	a101      	add	r1, pc, #4	; (adr r1, 8008820 <_printf_i+0x40>)
 800881c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008820:	08008879 	.word	0x08008879
 8008824:	0800888d 	.word	0x0800888d
 8008828:	08008809 	.word	0x08008809
 800882c:	08008809 	.word	0x08008809
 8008830:	08008809 	.word	0x08008809
 8008834:	08008809 	.word	0x08008809
 8008838:	0800888d 	.word	0x0800888d
 800883c:	08008809 	.word	0x08008809
 8008840:	08008809 	.word	0x08008809
 8008844:	08008809 	.word	0x08008809
 8008848:	08008809 	.word	0x08008809
 800884c:	08008991 	.word	0x08008991
 8008850:	080088b9 	.word	0x080088b9
 8008854:	0800894b 	.word	0x0800894b
 8008858:	08008809 	.word	0x08008809
 800885c:	08008809 	.word	0x08008809
 8008860:	080089b3 	.word	0x080089b3
 8008864:	08008809 	.word	0x08008809
 8008868:	080088b9 	.word	0x080088b9
 800886c:	08008809 	.word	0x08008809
 8008870:	08008809 	.word	0x08008809
 8008874:	08008953 	.word	0x08008953
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	1d1a      	adds	r2, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	602a      	str	r2, [r5, #0]
 8008880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008888:	2301      	movs	r3, #1
 800888a:	e09f      	b.n	80089cc <_printf_i+0x1ec>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	682b      	ldr	r3, [r5, #0]
 8008890:	0607      	lsls	r7, r0, #24
 8008892:	f103 0104 	add.w	r1, r3, #4
 8008896:	6029      	str	r1, [r5, #0]
 8008898:	d501      	bpl.n	800889e <_printf_i+0xbe>
 800889a:	681e      	ldr	r6, [r3, #0]
 800889c:	e003      	b.n	80088a6 <_printf_i+0xc6>
 800889e:	0646      	lsls	r6, r0, #25
 80088a0:	d5fb      	bpl.n	800889a <_printf_i+0xba>
 80088a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80088a6:	2e00      	cmp	r6, #0
 80088a8:	da03      	bge.n	80088b2 <_printf_i+0xd2>
 80088aa:	232d      	movs	r3, #45	; 0x2d
 80088ac:	4276      	negs	r6, r6
 80088ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088b2:	485a      	ldr	r0, [pc, #360]	; (8008a1c <_printf_i+0x23c>)
 80088b4:	230a      	movs	r3, #10
 80088b6:	e012      	b.n	80088de <_printf_i+0xfe>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	6820      	ldr	r0, [r4, #0]
 80088bc:	1d19      	adds	r1, r3, #4
 80088be:	6029      	str	r1, [r5, #0]
 80088c0:	0605      	lsls	r5, r0, #24
 80088c2:	d501      	bpl.n	80088c8 <_printf_i+0xe8>
 80088c4:	681e      	ldr	r6, [r3, #0]
 80088c6:	e002      	b.n	80088ce <_printf_i+0xee>
 80088c8:	0641      	lsls	r1, r0, #25
 80088ca:	d5fb      	bpl.n	80088c4 <_printf_i+0xe4>
 80088cc:	881e      	ldrh	r6, [r3, #0]
 80088ce:	4853      	ldr	r0, [pc, #332]	; (8008a1c <_printf_i+0x23c>)
 80088d0:	2f6f      	cmp	r7, #111	; 0x6f
 80088d2:	bf0c      	ite	eq
 80088d4:	2308      	moveq	r3, #8
 80088d6:	230a      	movne	r3, #10
 80088d8:	2100      	movs	r1, #0
 80088da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088de:	6865      	ldr	r5, [r4, #4]
 80088e0:	60a5      	str	r5, [r4, #8]
 80088e2:	2d00      	cmp	r5, #0
 80088e4:	bfa2      	ittt	ge
 80088e6:	6821      	ldrge	r1, [r4, #0]
 80088e8:	f021 0104 	bicge.w	r1, r1, #4
 80088ec:	6021      	strge	r1, [r4, #0]
 80088ee:	b90e      	cbnz	r6, 80088f4 <_printf_i+0x114>
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	d04b      	beq.n	800898c <_printf_i+0x1ac>
 80088f4:	4615      	mov	r5, r2
 80088f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80088fa:	fb03 6711 	mls	r7, r3, r1, r6
 80088fe:	5dc7      	ldrb	r7, [r0, r7]
 8008900:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008904:	4637      	mov	r7, r6
 8008906:	42bb      	cmp	r3, r7
 8008908:	460e      	mov	r6, r1
 800890a:	d9f4      	bls.n	80088f6 <_printf_i+0x116>
 800890c:	2b08      	cmp	r3, #8
 800890e:	d10b      	bne.n	8008928 <_printf_i+0x148>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	07de      	lsls	r6, r3, #31
 8008914:	d508      	bpl.n	8008928 <_printf_i+0x148>
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	6861      	ldr	r1, [r4, #4]
 800891a:	4299      	cmp	r1, r3
 800891c:	bfde      	ittt	le
 800891e:	2330      	movle	r3, #48	; 0x30
 8008920:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008924:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008928:	1b52      	subs	r2, r2, r5
 800892a:	6122      	str	r2, [r4, #16]
 800892c:	f8cd a000 	str.w	sl, [sp]
 8008930:	464b      	mov	r3, r9
 8008932:	aa03      	add	r2, sp, #12
 8008934:	4621      	mov	r1, r4
 8008936:	4640      	mov	r0, r8
 8008938:	f7ff fee4 	bl	8008704 <_printf_common>
 800893c:	3001      	adds	r0, #1
 800893e:	d14a      	bne.n	80089d6 <_printf_i+0x1f6>
 8008940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008944:	b004      	add	sp, #16
 8008946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f043 0320 	orr.w	r3, r3, #32
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	4833      	ldr	r0, [pc, #204]	; (8008a20 <_printf_i+0x240>)
 8008954:	2778      	movs	r7, #120	; 0x78
 8008956:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	6829      	ldr	r1, [r5, #0]
 800895e:	061f      	lsls	r7, r3, #24
 8008960:	f851 6b04 	ldr.w	r6, [r1], #4
 8008964:	d402      	bmi.n	800896c <_printf_i+0x18c>
 8008966:	065f      	lsls	r7, r3, #25
 8008968:	bf48      	it	mi
 800896a:	b2b6      	uxthmi	r6, r6
 800896c:	07df      	lsls	r7, r3, #31
 800896e:	bf48      	it	mi
 8008970:	f043 0320 	orrmi.w	r3, r3, #32
 8008974:	6029      	str	r1, [r5, #0]
 8008976:	bf48      	it	mi
 8008978:	6023      	strmi	r3, [r4, #0]
 800897a:	b91e      	cbnz	r6, 8008984 <_printf_i+0x1a4>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	f023 0320 	bic.w	r3, r3, #32
 8008982:	6023      	str	r3, [r4, #0]
 8008984:	2310      	movs	r3, #16
 8008986:	e7a7      	b.n	80088d8 <_printf_i+0xf8>
 8008988:	4824      	ldr	r0, [pc, #144]	; (8008a1c <_printf_i+0x23c>)
 800898a:	e7e4      	b.n	8008956 <_printf_i+0x176>
 800898c:	4615      	mov	r5, r2
 800898e:	e7bd      	b.n	800890c <_printf_i+0x12c>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	6826      	ldr	r6, [r4, #0]
 8008994:	6961      	ldr	r1, [r4, #20]
 8008996:	1d18      	adds	r0, r3, #4
 8008998:	6028      	str	r0, [r5, #0]
 800899a:	0635      	lsls	r5, r6, #24
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	d501      	bpl.n	80089a4 <_printf_i+0x1c4>
 80089a0:	6019      	str	r1, [r3, #0]
 80089a2:	e002      	b.n	80089aa <_printf_i+0x1ca>
 80089a4:	0670      	lsls	r0, r6, #25
 80089a6:	d5fb      	bpl.n	80089a0 <_printf_i+0x1c0>
 80089a8:	8019      	strh	r1, [r3, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	4615      	mov	r5, r2
 80089b0:	e7bc      	b.n	800892c <_printf_i+0x14c>
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	1d1a      	adds	r2, r3, #4
 80089b6:	602a      	str	r2, [r5, #0]
 80089b8:	681d      	ldr	r5, [r3, #0]
 80089ba:	6862      	ldr	r2, [r4, #4]
 80089bc:	2100      	movs	r1, #0
 80089be:	4628      	mov	r0, r5
 80089c0:	f7f7 fc0e 	bl	80001e0 <memchr>
 80089c4:	b108      	cbz	r0, 80089ca <_printf_i+0x1ea>
 80089c6:	1b40      	subs	r0, r0, r5
 80089c8:	6060      	str	r0, [r4, #4]
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	2300      	movs	r3, #0
 80089d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d4:	e7aa      	b.n	800892c <_printf_i+0x14c>
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	462a      	mov	r2, r5
 80089da:	4649      	mov	r1, r9
 80089dc:	4640      	mov	r0, r8
 80089de:	47d0      	blx	sl
 80089e0:	3001      	adds	r0, #1
 80089e2:	d0ad      	beq.n	8008940 <_printf_i+0x160>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	079b      	lsls	r3, r3, #30
 80089e8:	d413      	bmi.n	8008a12 <_printf_i+0x232>
 80089ea:	68e0      	ldr	r0, [r4, #12]
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	4298      	cmp	r0, r3
 80089f0:	bfb8      	it	lt
 80089f2:	4618      	movlt	r0, r3
 80089f4:	e7a6      	b.n	8008944 <_printf_i+0x164>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4632      	mov	r2, r6
 80089fa:	4649      	mov	r1, r9
 80089fc:	4640      	mov	r0, r8
 80089fe:	47d0      	blx	sl
 8008a00:	3001      	adds	r0, #1
 8008a02:	d09d      	beq.n	8008940 <_printf_i+0x160>
 8008a04:	3501      	adds	r5, #1
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	9903      	ldr	r1, [sp, #12]
 8008a0a:	1a5b      	subs	r3, r3, r1
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dcf2      	bgt.n	80089f6 <_printf_i+0x216>
 8008a10:	e7eb      	b.n	80089ea <_printf_i+0x20a>
 8008a12:	2500      	movs	r5, #0
 8008a14:	f104 0619 	add.w	r6, r4, #25
 8008a18:	e7f5      	b.n	8008a06 <_printf_i+0x226>
 8008a1a:	bf00      	nop
 8008a1c:	08008b89 	.word	0x08008b89
 8008a20:	08008b9a 	.word	0x08008b9a

08008a24 <memmove>:
 8008a24:	4288      	cmp	r0, r1
 8008a26:	b510      	push	{r4, lr}
 8008a28:	eb01 0402 	add.w	r4, r1, r2
 8008a2c:	d902      	bls.n	8008a34 <memmove+0x10>
 8008a2e:	4284      	cmp	r4, r0
 8008a30:	4623      	mov	r3, r4
 8008a32:	d807      	bhi.n	8008a44 <memmove+0x20>
 8008a34:	1e43      	subs	r3, r0, #1
 8008a36:	42a1      	cmp	r1, r4
 8008a38:	d008      	beq.n	8008a4c <memmove+0x28>
 8008a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a42:	e7f8      	b.n	8008a36 <memmove+0x12>
 8008a44:	4402      	add	r2, r0
 8008a46:	4601      	mov	r1, r0
 8008a48:	428a      	cmp	r2, r1
 8008a4a:	d100      	bne.n	8008a4e <memmove+0x2a>
 8008a4c:	bd10      	pop	{r4, pc}
 8008a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a56:	e7f7      	b.n	8008a48 <memmove+0x24>

08008a58 <memcpy>:
 8008a58:	440a      	add	r2, r1
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a60:	d100      	bne.n	8008a64 <memcpy+0xc>
 8008a62:	4770      	bx	lr
 8008a64:	b510      	push	{r4, lr}
 8008a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a6e:	4291      	cmp	r1, r2
 8008a70:	d1f9      	bne.n	8008a66 <memcpy+0xe>
 8008a72:	bd10      	pop	{r4, pc}

08008a74 <_realloc_r>:
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	4680      	mov	r8, r0
 8008a7a:	4614      	mov	r4, r2
 8008a7c:	460e      	mov	r6, r1
 8008a7e:	b921      	cbnz	r1, 8008a8a <_realloc_r+0x16>
 8008a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a84:	4611      	mov	r1, r2
 8008a86:	f7ff bba9 	b.w	80081dc <_malloc_r>
 8008a8a:	b92a      	cbnz	r2, 8008a98 <_realloc_r+0x24>
 8008a8c:	f7ff fc96 	bl	80083bc <_free_r>
 8008a90:	4625      	mov	r5, r4
 8008a92:	4628      	mov	r0, r5
 8008a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a98:	f000 f81b 	bl	8008ad2 <_malloc_usable_size_r>
 8008a9c:	4284      	cmp	r4, r0
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	d802      	bhi.n	8008aa8 <_realloc_r+0x34>
 8008aa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008aa6:	d812      	bhi.n	8008ace <_realloc_r+0x5a>
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	4640      	mov	r0, r8
 8008aac:	f7ff fb96 	bl	80081dc <_malloc_r>
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0ed      	beq.n	8008a92 <_realloc_r+0x1e>
 8008ab6:	42bc      	cmp	r4, r7
 8008ab8:	4622      	mov	r2, r4
 8008aba:	4631      	mov	r1, r6
 8008abc:	bf28      	it	cs
 8008abe:	463a      	movcs	r2, r7
 8008ac0:	f7ff ffca 	bl	8008a58 <memcpy>
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	f7ff fc78 	bl	80083bc <_free_r>
 8008acc:	e7e1      	b.n	8008a92 <_realloc_r+0x1e>
 8008ace:	4635      	mov	r5, r6
 8008ad0:	e7df      	b.n	8008a92 <_realloc_r+0x1e>

08008ad2 <_malloc_usable_size_r>:
 8008ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad6:	1f18      	subs	r0, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bfbc      	itt	lt
 8008adc:	580b      	ldrlt	r3, [r1, r0]
 8008ade:	18c0      	addlt	r0, r0, r3
 8008ae0:	4770      	bx	lr
	...

08008ae4 <_init>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	bf00      	nop
 8008ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aea:	bc08      	pop	{r3}
 8008aec:	469e      	mov	lr, r3
 8008aee:	4770      	bx	lr

08008af0 <_fini>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	bf00      	nop
 8008af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af6:	bc08      	pop	{r3}
 8008af8:	469e      	mov	lr, r3
 8008afa:	4770      	bx	lr
