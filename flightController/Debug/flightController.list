
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d6c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f88  08007f88  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f90  08007f90  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08007f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d0  2000014c  080080e4  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000171c  080080e4  0002171c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011402  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003182  00000000  00000000  000315c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00034748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad9  00000000  00000000  000355b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d04  00000000  00000000  00036089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014261  00000000  00000000  0004ed8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ac7b  00000000  00000000  00062fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d90  00000000  00000000  000edc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000f19fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000014c 	.word	0x2000014c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007ee8 	.word	0x08007ee8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000150 	.word	0x20000150
 80001d0:	08007ee8 	.word	0x08007ee8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fab9 	bl	8000a4c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f82f 	bl	800053c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f897 	bl	8000610 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e2:	f006 fea5 	bl	8007230 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  char str[17] = "Initialized\r\n";
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <main+0x64>)
 80004e8:	463c      	mov	r4, r7
 80004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ec:	c407      	stmia	r4!, {r0, r1, r2}
 80004ee:	8023      	strh	r3, [r4, #0]
 80004f0:	f107 030e 	add.w	r3, r7, #14
 80004f4:	2100      	movs	r1, #0
 80004f6:	460a      	mov	r2, r1
 80004f8:	801a      	strh	r2, [r3, #0]
 80004fa:	460a      	mov	r2, r1
 80004fc:	709a      	strb	r2, [r3, #2]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    while (1) {
    	MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_IMU_Init();
 80004fe:	f000 fa7d 	bl	80009fc <MPU6050_IMU_Init>
 8000502:	6178      	str	r0, [r7, #20]
    	//str[12] = hmpu6050->instance + 48;
    	HAL_Delay(1000);
 8000504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000508:	f000 fb12 	bl	8000b30 <HAL_Delay>

    	if(hmpu6050->instance == 1 || hmpu6050->instance == 2) {
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d003      	beq.n	800051c <main+0x4c>
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d105      	bne.n	8000528 <main+0x58>
    		CDC_Transmit_FS(str, 17);
 800051c:	463b      	mov	r3, r7
 800051e:	2111      	movs	r1, #17
 8000520:	4618      	mov	r0, r3
 8000522:	f006 ff43 	bl	80073ac <CDC_Transmit_FS>
 8000526:	e003      	b.n	8000530 <main+0x60>
    	} else {
    		CDC_Transmit_FS((char *) "Not initialized\r\n", 18);
 8000528:	2112      	movs	r1, #18
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x68>)
 800052c:	f006 ff3e 	bl	80073ac <CDC_Transmit_FS>
    while (1) {
 8000530:	e7e5      	b.n	80004fe <main+0x2e>
 8000532:	bf00      	nop
 8000534:	08007f14 	.word	0x08007f14
 8000538:	08007f00 	.word	0x08007f00

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 fc3c 	bl	8007dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SystemClock_Config+0xd0>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005b0:	230f      	movs	r3, #15
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005b4:	2390      	movs	r3, #144	; 0x90
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005bc:	2305      	movs	r3, #5
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fdd9 	bl	800317c <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d0:	f000 f854 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 f83b 	bl	800366c <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f83e 	bl	800067c <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_GPIO_Init+0x68>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_GPIO_Init+0x68>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_GPIO_Init+0x68>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_GPIO_Init+0x68>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <MX_GPIO_Init+0x68>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_GPIO_Init+0x68>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_GPIO_Init+0x68>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <MX_GPIO_Init+0x68>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_GPIO_Init+0x68>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <HAL_MspInit+0x4c>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a0:	6453      	str	r3, [r2, #68]	; 0x44
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_MspInit+0x4c>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	6413      	str	r3, [r2, #64]	; 0x40
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a19      	ldr	r2, [pc, #100]	; (8000760 <HAL_I2C_MspInit+0x84>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d12b      	bne.n	8000756 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800071a:	23c0      	movs	r3, #192	; 0xc0
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800071e:	2312      	movs	r3, #18
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800072a:	2304      	movs	r3, #4
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <HAL_I2C_MspInit+0x8c>)
 8000736:	f000 fb31 	bl	8000d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_I2C_MspInit+0x88>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40005400 	.word	0x40005400
 8000764:	40023800 	.word	0x40023800
 8000768:	40020400 	.word	0x40020400

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f99a 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <OTG_FS_IRQHandler+0x10>)
 80007c6:	f001 fbab 	bl	8001f20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000ea8 	.word	0x20000ea8

080007d4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <_sbrk+0x5c>)
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <_sbrk+0x60>)
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <_sbrk+0x64>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <_sbrk+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	d207      	bcs.n	8000814 <_sbrk+0x40>
        errno = ENOMEM;
 8000804:	f007 faf8 	bl	8007df8 <__errno>
 8000808:	4603      	mov	r3, r0
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000812:	e009      	b.n	8000828 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <_sbrk+0x64>)
 8000824:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20010000 	.word	0x20010000
 8000834:	00000400 	.word	0x00000400
 8000838:	20000168 	.word	0x20000168
 800083c:	20001720 	.word	0x20001720

08000840 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SystemInit+0x20>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <SystemInit+0x20>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800089c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000880:	4c0b      	ldr	r4, [pc, #44]	; (80008b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800088e:	f7ff ffd7 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f007 fab7 	bl	8007e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fe1b 	bl	80004d0 <main>
  bx  lr
 800089a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800089c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80008a8:	08007f98 	.word	0x08007f98
  ldr r2, =_sbss
 80008ac:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80008b0:	2000171c 	.word	0x2000171c

080008b4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC_IRQHandler>
	...

080008b8 <MX_I2C_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t MX_I2C_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	/* BEGIN MODIFY 1*/
	hi2c.Instance = I2C1;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_I2C_Init+0x54>)
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <MX_I2C_Init+0x58>)
 80008c0:	601a      	str	r2, [r3, #0]
	hi2c.Init.ClockSpeed = 400000;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2C_Init+0x54>)
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MX_I2C_Init+0x5c>)
 80008c6:	605a      	str	r2, [r3, #4]
	hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_I2C_Init+0x54>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
	hi2c.Init.OwnAddress1 = 0;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_I2C_Init+0x54>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
	hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_I2C_Init+0x54>)
 80008d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008da:	611a      	str	r2, [r3, #16]
	hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_I2C_Init+0x54>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
	hi2c.Init.OwnAddress2 = 0;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_I2C_Init+0x54>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
	hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_I2C_Init+0x54>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
	hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_I2C_Init+0x54>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
    /* END MODIFY 1 */

	/* BEGIN MODIFY 2 */
	if (HAL_OK != HAL_I2C_Init(&hi2c))
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_I2C_Init+0x54>)
 80008f6:	f000 fbd5 	bl	80010a4 <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C_Init+0x4c>
	{
		return false;
 8000900:	2300      	movs	r3, #0
 8000902:	e000      	b.n	8000906 <MX_I2C_Init+0x4e>
	}

	return true;
 8000904:	2301      	movs	r3, #1
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000016c 	.word	0x2000016c
 8000910:	40005400 	.word	0x40005400
 8000914:	00061a80 	.word	0x00061a80

08000918 <i2c_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
bool_t i2c_Init(MPU6050_HandleTypeDef_t * hmpu6050)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af04      	add	r7, sp, #16
 800091e:	6078      	str	r0, [r7, #4]
	uint8_t check;

	if(hmpu6050->instance == 1) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d103      	bne.n	8000930 <i2c_Init+0x18>

		hmpu6050->hi2c = &hi2c;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <i2c_Init+0x5c>)
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	e005      	b.n	800093c <i2c_Init+0x24>
	} else if(hmpu6050->instance == 2) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d101      	bne.n	800093c <i2c_Init+0x24>
		return true;
 8000938:	2301      	movs	r3, #1
 800093a:	e017      	b.n	800096c <i2c_Init+0x54>
	}

	MX_I2C_Init();
 800093c:	f7ff ffbc 	bl	80008b8 <MX_I2C_Init>

	HAL_I2C_Mem_Read(hmpu6050->hi2c, hmpu6050->address, WHO_AM_I_REG, 1, &check, 1, 100);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6858      	ldr	r0, [r3, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7a1b      	ldrb	r3, [r3, #8]
 8000948:	b299      	uxth	r1, r3
 800094a:	2364      	movs	r3, #100	; 0x64
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	2301      	movs	r3, #1
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	f107 030f 	add.w	r3, r7, #15
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	2275      	movs	r2, #117	; 0x75
 800095c:	f000 fce6 	bl	800132c <HAL_I2C_Mem_Read>

	if(check == 104) {
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	2b68      	cmp	r3, #104	; 0x68
 8000964:	d101      	bne.n	800096a <i2c_Init+0x52>
		return true;
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <i2c_Init+0x54>
	} else {
		return false;
 800096a:	2300      	movs	r3, #0
	}
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000016c 	.word	0x2000016c

08000978 <MPU6050_IMU_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_IMU_InstanceInit() {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

	/* Check if driver was already once or twice initialized */
	if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber ) {
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MPU6050_IMU_InstanceInit+0x80>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d101      	bne.n	800098a <MPU6050_IMU_InstanceInit+0x12>
		return NULL;
 8000986:	2300      	movs	r3, #0
 8000988:	e032      	b.n	80009f0 <MPU6050_IMU_InstanceInit+0x78>

	/* Allocate dynamic memory for data buffer */
	uint8_t * buffer = pvortMalloc(sizeof(1));
#else
	/* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
	MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 800098a:	2014      	movs	r0, #20
 800098c:	f007 f960 	bl	8007c50 <malloc>
 8000990:	4603      	mov	r3, r0
 8000992:	607b      	str	r3, [r7, #4]

	/* Allocate dynamic memory for data buffer */
	uint8_t * buffer = malloc(sizeof(1));
 8000994:	2004      	movs	r0, #4
 8000996:	f007 f95b 	bl	8007c50 <malloc>
 800099a:	4603      	mov	r3, r0
 800099c:	603b      	str	r3, [r7, #0]
#endif

	/* Check if dynamic memory allocation was successful */
	if(NULL == hmpu6050 || NULL == buffer) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <MPU6050_IMU_InstanceInit+0x32>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d109      	bne.n	80009be <MPU6050_IMU_InstanceInit+0x46>
		/* Free up dynamic allocated memory */
		vPortFree(hmpu6050->buffer);
		vPortFree(hmpu6050);
#else
		/* Free up dynamic allocated memory */
		free(hmpu6050->buffer);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 f956 	bl	8007c60 <free>
		free(hmpu6050);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f007 f953 	bl	8007c60 <free>
#endif
		return NULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e018      	b.n	80009f0 <MPU6050_IMU_InstanceInit+0x78>
	} else {
		/* Dynamic memory allocation was successful */

		/* Initialize MPU6050_HandleTypeDef_t structure */
		if(instancesNumber == 0) {
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MPU6050_IMU_InstanceInit+0x80>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d106      	bne.n	80009d4 <MPU6050_IMU_InstanceInit+0x5c>
			hmpu6050->instance = 1;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
			hmpu6050->address = MPU6050_ADDR1;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	22d0      	movs	r2, #208	; 0xd0
 80009d0:	721a      	strb	r2, [r3, #8]
 80009d2:	e009      	b.n	80009e8 <MPU6050_IMU_InstanceInit+0x70>
		} else if(instancesNumber == 1) {
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MPU6050_IMU_InstanceInit+0x80>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d105      	bne.n	80009e8 <MPU6050_IMU_InstanceInit+0x70>
			hmpu6050->instance = 2;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2202      	movs	r2, #2
 80009e0:	701a      	strb	r2, [r3, #0]
			hmpu6050->address = MPU6050_ADDR2;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	22d1      	movs	r2, #209	; 0xd1
 80009e6:	721a      	strb	r2, [r3, #8]
		}
		hmpu6050->buffer = buffer;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	60da      	str	r2, [r3, #12]
	}

	/* Return created instance */
	return hmpu6050;
 80009ee:	687b      	ldr	r3, [r7, #4]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200001c0 	.word	0x200001c0

080009fc <MPU6050_IMU_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_IMU_Init() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

	/* Create an instance of the MPU6050_IMU device */
	MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_IMU_InstanceInit();
 8000a02:	f7ff ffb9 	bl	8000978 <MPU6050_IMU_InstanceInit>
 8000a06:	6078      	str	r0, [r7, #4]

	/* Check if instance was successfully created */
	if(NULL != hmpu6050) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d017      	beq.n	8000a3e <MPU6050_IMU_Init+0x42>
		/* Instance was successfully created */

		/* Initialize I2C communication */
		if (i2c_Init(hmpu6050)) {
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff82 	bl	8000918 <i2c_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d007      	beq.n	8000a2a <MPU6050_IMU_Init+0x2e>

			/* Initialization was successful */
			instancesNumber++;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MPU6050_IMU_Init+0x4c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MPU6050_IMU_Init+0x4c>)
 8000a24:	701a      	strb	r2, [r3, #0]

			return hmpu6050;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	e00a      	b.n	8000a40 <MPU6050_IMU_Init+0x44>
			/* Free up dynamic allocated memory */
			vPortFree(hmpu6050->buffer);
			vPortFree(hmpu6050);
	#else
			/* Free up dynamic allocated memory */
			free(hmpu6050->buffer);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f007 f916 	bl	8007c60 <free>
			free(hmpu6050);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f007 f913 	bl	8007c60 <free>
	#endif

			return NULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <MPU6050_IMU_Init+0x44>
		}
	} else {

		/* Instance couldn't be created */
		return NULL;
 8000a3e:	2300      	movs	r3, #0
	}
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200001c0 	.word	0x200001c0

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <HAL_Init+0x40>)
 8000a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_Init+0x40>)
 8000a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x40>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f94f 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fe04 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f967 	bl	8000d82 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000acc:	f000 f92f 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	200001c4 	.word	0x200001c4

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200001c4 	.word	0x200001c4

08000b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff ffee 	bl	8000b18 <HAL_GetTick>
 8000b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b48:	d005      	beq.n	8000b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_Delay+0x44>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b56:	bf00      	nop
 8000b58:	f7ff ffde 	bl	8000b18 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d8f7      	bhi.n	8000b58 <HAL_Delay+0x28>
  {
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff3e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff31 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	e159      	b.n	800106c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f040 8148 	bne.w	8001066 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d005      	beq.n	8000dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d130      	bne.n	8000e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f003 0201 	and.w	r2, r3, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d017      	beq.n	8000e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d123      	bne.n	8000ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	69b9      	ldr	r1, [r7, #24]
 8000edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0203 	and.w	r2, r3, #3
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80a2 	beq.w	8001066 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b57      	ldr	r3, [pc, #348]	; (8001084 <HAL_GPIO_Init+0x2e8>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a56      	ldr	r2, [pc, #344]	; (8001084 <HAL_GPIO_Init+0x2e8>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b54      	ldr	r3, [pc, #336]	; (8001084 <HAL_GPIO_Init+0x2e8>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3e:	4a52      	ldr	r2, [pc, #328]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a49      	ldr	r2, [pc, #292]	; (800108c <HAL_GPIO_Init+0x2f0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x202>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a48      	ldr	r2, [pc, #288]	; (8001090 <HAL_GPIO_Init+0x2f4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x1fe>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a47      	ldr	r2, [pc, #284]	; (8001094 <HAL_GPIO_Init+0x2f8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a46      	ldr	r2, [pc, #280]	; (8001098 <HAL_GPIO_Init+0x2fc>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x1f6>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a45      	ldr	r2, [pc, #276]	; (800109c <HAL_GPIO_Init+0x300>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x1f2>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x204>
 8000f8e:	2307      	movs	r3, #7
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x204>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x204>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x204>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x204>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb0:	4935      	ldr	r1, [pc, #212]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a2f      	ldr	r2, [pc, #188]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <HAL_GPIO_Init+0x304>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001036:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_GPIO_Init+0x304>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_GPIO_Init+0x304>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	f67f aea2 	bls.w	8000db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40013800 	.word	0x40013800
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400
 8001094:	40020800 	.word	0x40020800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	40013c00 	.word	0x40013c00

080010a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e12b      	b.n	800130e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fb06 	bl	80006dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2224      	movs	r2, #36	; 0x24
 80010d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001108:	f002 fc68 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 800110c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4a81      	ldr	r2, [pc, #516]	; (8001318 <HAL_I2C_Init+0x274>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d807      	bhi.n	8001128 <HAL_I2C_Init+0x84>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4a80      	ldr	r2, [pc, #512]	; (800131c <HAL_I2C_Init+0x278>)
 800111c:	4293      	cmp	r3, r2
 800111e:	bf94      	ite	ls
 8001120:	2301      	movls	r3, #1
 8001122:	2300      	movhi	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	e006      	b.n	8001136 <HAL_I2C_Init+0x92>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4a7d      	ldr	r2, [pc, #500]	; (8001320 <HAL_I2C_Init+0x27c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	bf94      	ite	ls
 8001130:	2301      	movls	r3, #1
 8001132:	2300      	movhi	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0e7      	b.n	800130e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4a78      	ldr	r2, [pc, #480]	; (8001324 <HAL_I2C_Init+0x280>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	430a      	orrs	r2, r1
 800115c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a6a      	ldr	r2, [pc, #424]	; (8001318 <HAL_I2C_Init+0x274>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d802      	bhi.n	8001178 <HAL_I2C_Init+0xd4>
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3301      	adds	r3, #1
 8001176:	e009      	b.n	800118c <HAL_I2C_Init+0xe8>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	4a69      	ldr	r2, [pc, #420]	; (8001328 <HAL_I2C_Init+0x284>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	099b      	lsrs	r3, r3, #6
 800118a:	3301      	adds	r3, #1
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	430b      	orrs	r3, r1
 8001192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800119e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	495c      	ldr	r1, [pc, #368]	; (8001318 <HAL_I2C_Init+0x274>)
 80011a8:	428b      	cmp	r3, r1
 80011aa:	d819      	bhi.n	80011e0 <HAL_I2C_Init+0x13c>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1e59      	subs	r1, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ba:	1c59      	adds	r1, r3, #1
 80011bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011c0:	400b      	ands	r3, r1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00a      	beq.n	80011dc <HAL_I2C_Init+0x138>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1e59      	subs	r1, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011d4:	3301      	adds	r3, #1
 80011d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011da:	e051      	b.n	8001280 <HAL_I2C_Init+0x1dc>
 80011dc:	2304      	movs	r3, #4
 80011de:	e04f      	b.n	8001280 <HAL_I2C_Init+0x1dc>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d111      	bne.n	800120c <HAL_I2C_Init+0x168>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	1e58      	subs	r0, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6859      	ldr	r1, [r3, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	440b      	add	r3, r1
 80011f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	e012      	b.n	8001232 <HAL_I2C_Init+0x18e>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1e58      	subs	r0, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	0099      	lsls	r1, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001222:	3301      	adds	r3, #1
 8001224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_I2C_Init+0x196>
 8001236:	2301      	movs	r3, #1
 8001238:	e022      	b.n	8001280 <HAL_I2C_Init+0x1dc>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10e      	bne.n	8001260 <HAL_I2C_Init+0x1bc>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1e58      	subs	r0, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6859      	ldr	r1, [r3, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	440b      	add	r3, r1
 8001250:	fbb0 f3f3 	udiv	r3, r0, r3
 8001254:	3301      	adds	r3, #1
 8001256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800125e:	e00f      	b.n	8001280 <HAL_I2C_Init+0x1dc>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	1e58      	subs	r0, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	0099      	lsls	r1, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	fbb0 f3f3 	udiv	r3, r0, r3
 8001276:	3301      	adds	r3, #1
 8001278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	6809      	ldr	r1, [r1, #0]
 8001284:	4313      	orrs	r3, r2
 8001286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69da      	ldr	r2, [r3, #28]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6911      	ldr	r1, [r2, #16]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68d2      	ldr	r2, [r2, #12]
 80012ba:	4311      	orrs	r1, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2220      	movs	r2, #32
 80012fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	000186a0 	.word	0x000186a0
 800131c:	001e847f 	.word	0x001e847f
 8001320:	003d08ff 	.word	0x003d08ff
 8001324:	431bde83 	.word	0x431bde83
 8001328:	10624dd3 	.word	0x10624dd3

0800132c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af02      	add	r7, sp, #8
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	4608      	mov	r0, r1
 8001336:	4611      	mov	r1, r2
 8001338:	461a      	mov	r2, r3
 800133a:	4603      	mov	r3, r0
 800133c:	817b      	strh	r3, [r7, #10]
 800133e:	460b      	mov	r3, r1
 8001340:	813b      	strh	r3, [r7, #8]
 8001342:	4613      	mov	r3, r2
 8001344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001346:	f7ff fbe7 	bl	8000b18 <HAL_GetTick>
 800134a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b20      	cmp	r3, #32
 8001356:	f040 8208 	bne.w	800176a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2319      	movs	r3, #25
 8001360:	2201      	movs	r2, #1
 8001362:	497b      	ldr	r1, [pc, #492]	; (8001550 <HAL_I2C_Mem_Read+0x224>)
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 faef 	bl	8001948 <I2C_WaitOnFlagUntilTimeout>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001370:	2302      	movs	r3, #2
 8001372:	e1fb      	b.n	800176c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_I2C_Mem_Read+0x56>
 800137e:	2302      	movs	r3, #2
 8001380:	e1f4      	b.n	800176c <HAL_I2C_Mem_Read+0x440>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	d007      	beq.n	80013a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2222      	movs	r2, #34	; 0x22
 80013bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80013d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013de:	b29a      	uxth	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a5b      	ldr	r2, [pc, #364]	; (8001554 <HAL_I2C_Mem_Read+0x228>)
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ea:	88f8      	ldrh	r0, [r7, #6]
 80013ec:	893a      	ldrh	r2, [r7, #8]
 80013ee:	8979      	ldrh	r1, [r7, #10]
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4603      	mov	r3, r0
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 f9bc 	bl	8001778 <I2C_RequestMemoryRead>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1b0      	b.n	800176c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140e:	2b00      	cmp	r3, #0
 8001410:	d113      	bne.n	800143a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	623b      	str	r3, [r7, #32]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	623b      	str	r3, [r7, #32]
 8001426:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e184      	b.n	8001744 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143e:	2b01      	cmp	r3, #1
 8001440:	d11b      	bne.n	800147a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001450:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e164      	b.n	8001744 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147e:	2b02      	cmp	r3, #2
 8001480:	d11b      	bne.n	80014ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001490:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	e144      	b.n	8001744 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80014d0:	e138      	b.n	8001744 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	f200 80f1 	bhi.w	80016be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d123      	bne.n	800152c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fb44 	bl	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e139      	b.n	800176c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800152a:	e10b      	b.n	8001744 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	2b02      	cmp	r3, #2
 8001532:	d14e      	bne.n	80015d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800153a:	2200      	movs	r2, #0
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <HAL_I2C_Mem_Read+0x22c>)
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fa02 	bl	8001948 <I2C_WaitOnFlagUntilTimeout>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e10e      	b.n	800176c <HAL_I2C_Mem_Read+0x440>
 800154e:	bf00      	nop
 8001550:	00100002 	.word	0x00100002
 8001554:	ffff0000 	.word	0xffff0000
 8001558:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800156a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001588:	3b01      	subs	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	3b01      	subs	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015d0:	e0b8      	b.n	8001744 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d8:	2200      	movs	r2, #0
 80015da:	4966      	ldr	r1, [pc, #408]	; (8001774 <HAL_I2C_Mem_Read+0x448>)
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f9b3 	bl	8001948 <I2C_WaitOnFlagUntilTimeout>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0bf      	b.n	800176c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001634:	2200      	movs	r2, #0
 8001636:	494f      	ldr	r1, [pc, #316]	; (8001774 <HAL_I2C_Mem_Read+0x448>)
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f985 	bl	8001948 <I2C_WaitOnFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e091      	b.n	800176c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	3b01      	subs	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016bc:	e042      	b.n	8001744 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fa57 	bl	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e04c      	b.n	800176c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b04      	cmp	r3, #4
 8001710:	d118      	bne.n	8001744 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f aec2 	bne.w	80014d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2220      	movs	r2, #32
 8001752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800176a:	2302      	movs	r3, #2
  }
}
 800176c:	4618      	mov	r0, r3
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	00010004 	.word	0x00010004

08001778 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	817b      	strh	r3, [r7, #10]
 800178a:	460b      	mov	r3, r1
 800178c:	813b      	strh	r3, [r7, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f8c2 	bl	8001948 <I2C_WaitOnFlagUntilTimeout>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00d      	beq.n	80017e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d8:	d103      	bne.n	80017e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0aa      	b.n	800193c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	4952      	ldr	r1, [pc, #328]	; (8001944 <I2C_RequestMemoryRead+0x1cc>)
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 f8fa 	bl	80019f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e097      	b.n	800193c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f964 	bl	8001af4 <I2C_WaitOnTXEFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2b04      	cmp	r3, #4
 8001838:	d107      	bne.n	800184a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001848:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e076      	b.n	800193c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001854:	893b      	ldrh	r3, [r7, #8]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	e021      	b.n	80018a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001860:	893b      	ldrh	r3, [r7, #8]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	b29b      	uxth	r3, r3
 8001866:	b2da      	uxtb	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800186e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001870:	6a39      	ldr	r1, [r7, #32]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f93e 	bl	8001af4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	2b04      	cmp	r3, #4
 8001884:	d107      	bne.n	8001896 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001894:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e050      	b.n	800193c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800189a:	893b      	ldrh	r3, [r7, #8]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	6a39      	ldr	r1, [r7, #32]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f923 	bl	8001af4 <I2C_WaitOnTXEFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00d      	beq.n	80018d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d107      	bne.n	80018cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e035      	b.n	800193c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f82b 	bl	8001948 <I2C_WaitOnFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00d      	beq.n	8001914 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001906:	d103      	bne.n	8001910 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e013      	b.n	800193c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001914:	897b      	ldrh	r3, [r7, #10]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	6a3a      	ldr	r2, [r7, #32]
 8001928:	4906      	ldr	r1, [pc, #24]	; (8001944 <I2C_RequestMemoryRead+0x1cc>)
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f863 	bl	80019f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	00010002 	.word	0x00010002

08001948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001958:	e025      	b.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001960:	d021      	beq.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001962:	f7ff f8d9 	bl	8000b18 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d302      	bcc.n	8001978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d116      	bne.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2220      	movs	r2, #32
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f043 0220 	orr.w	r2, r3, #32
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e023      	b.n	80019ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d10d      	bne.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4013      	ands	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	e00c      	b.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4013      	ands	r3, r2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf0c      	ite	eq
 80019de:	2301      	moveq	r3, #1
 80019e0:	2300      	movne	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d0b6      	beq.n	800195a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a04:	e051      	b.n	8001aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a14:	d123      	bne.n	8001a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f043 0204 	orr.w	r2, r3, #4
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e046      	b.n	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a64:	d021      	beq.n	8001aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a66:	f7ff f857 	bl	8000b18 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d302      	bcc.n	8001a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d116      	bne.n	8001aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2220      	movs	r2, #32
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f043 0220 	orr.w	r2, r3, #32
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e020      	b.n	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10c      	bne.n	8001ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bf14      	ite	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	2300      	moveq	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	e00b      	b.n	8001ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d18d      	bne.n	8001a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b00:	e02d      	b.n	8001b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f88d 	bl	8001c22 <I2C_IsAcknowledgeFailed>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e02d      	b.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b18:	d021      	beq.n	8001b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b1a:	f7fe fffd 	bl	8000b18 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d302      	bcc.n	8001b30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d116      	bne.n	8001b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f043 0220 	orr.w	r2, r3, #32
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e007      	b.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b68:	2b80      	cmp	r3, #128	; 0x80
 8001b6a:	d1ca      	bne.n	8001b02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b82:	e042      	b.n	8001c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d119      	bne.n	8001bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0210 	mvn.w	r2, #16
 8001b9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e029      	b.n	8001c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7fe ffa7 	bl	8000b18 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d116      	bne.n	8001c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f043 0220 	orr.w	r2, r3, #32
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e007      	b.n	8001c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c14:	2b40      	cmp	r3, #64	; 0x40
 8001c16:	d1b5      	bne.n	8001b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c38:	d11b      	bne.n	8001c72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f043 0204 	orr.w	r2, r3, #4
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	b08f      	sub	sp, #60	; 0x3c
 8001c84:	af0a      	add	r7, sp, #40	; 0x28
 8001c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e10f      	b.n	8001eb2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d106      	bne.n	8001cb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f005 fcc5 	bl	800763c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 ffac 	bl	8003c2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	687e      	ldr	r6, [r7, #4]
 8001cde:	466d      	mov	r5, sp
 8001ce0:	f106 0410 	add.w	r4, r6, #16
 8001ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cf4:	1d33      	adds	r3, r6, #4
 8001cf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf8:	6838      	ldr	r0, [r7, #0]
 8001cfa:	f001 fe83 	bl	8003a04 <USB_CoreInit>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0d0      	b.n	8001eb2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 ff9a 	bl	8003c50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e04a      	b.n	8001db8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	333d      	adds	r3, #61	; 0x3d
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	333c      	adds	r3, #60	; 0x3c
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	b298      	uxth	r0, r3
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3344      	adds	r3, #68	; 0x44
 8001d5e:	4602      	mov	r2, r0
 8001d60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3340      	adds	r3, #64	; 0x40
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3348      	adds	r3, #72	; 0x48
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	334c      	adds	r3, #76	; 0x4c
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	3354      	adds	r3, #84	; 0x54
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	3301      	adds	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d3af      	bcc.n	8001d22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e044      	b.n	8001e52 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3b5      	bcc.n	8001dc8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	687e      	ldr	r6, [r7, #4]
 8001e64:	466d      	mov	r5, sp
 8001e66:	f106 0410 	add.w	r4, r6, #16
 8001e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e7a:	1d33      	adds	r3, r6, #4
 8001e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f001 ff32 	bl	8003ce8 <USB_DevInit>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00d      	b.n	8001eb2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 f881 	bl	8004fb2 <USB_DevDisconnect>

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_PCD_Start+0x1c>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e020      	b.n	8001f18 <HAL_PCD_Start+0x5e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d109      	bne.n	8001efa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f001 fe84 	bl	8003c0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 f831 	bl	8004f70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b08d      	sub	sp, #52	; 0x34
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 f8ef 	bl	800511a <USB_GetMode>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 848a 	bne.w	8002858 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 f853 	bl	8004ff4 <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8480 	beq.w	8002856 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f840 	bl	8004ff4 <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d107      	bne.n	8001f8e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f002 0202 	and.w	r2, r2, #2
 8001f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 f82e 	bl	8004ff4 <USB_ReadInterrupts>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d161      	bne.n	8002066 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0210 	bic.w	r2, r2, #16
 8001fb0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f003 020f 	and.w	r2, r3, #15
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3304      	adds	r3, #4
 8001fd0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	0c5b      	lsrs	r3, r3, #17
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d124      	bne.n	8002028 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d035      	beq.n	8002056 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6a38      	ldr	r0, [r7, #32]
 8001ffe:	f002 fe65 	bl	8004ccc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800200e:	441a      	add	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002020:	441a      	add	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	621a      	str	r2, [r3, #32]
 8002026:	e016      	b.n	8002056 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	0c5b      	lsrs	r3, r3, #17
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	2b06      	cmp	r3, #6
 8002032:	d110      	bne.n	8002056 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800203a:	2208      	movs	r2, #8
 800203c:	4619      	mov	r1, r3
 800203e:	6a38      	ldr	r0, [r7, #32]
 8002040:	f002 fe44 	bl	8004ccc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	6a1a      	ldr	r2, [r3, #32]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002050:	441a      	add	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0210 	orr.w	r2, r2, #16
 8002064:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f002 ffc2 	bl	8004ff4 <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002076:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800207a:	f040 80a7 	bne.w	80021cc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f002 ffc7 	bl	800501a <USB_ReadDevAllOutEpInterrupt>
 800208c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800208e:	e099      	b.n	80021c4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 808e 	beq.w	80021b8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 ffeb 	bl	8005082 <USB_ReadDevOutEPInterrupt>
 80020ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00c      	beq.n	80020d2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c4:	461a      	mov	r2, r3
 80020c6:	2301      	movs	r3, #1
 80020c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 fec3 	bl	8002e58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00c      	beq.n	80020f6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e8:	461a      	mov	r2, r3
 80020ea:	2308      	movs	r3, #8
 80020ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 ff99 	bl	8003028 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	4413      	add	r3, r2
 8002108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210c:	461a      	mov	r2, r3
 800210e:	2310      	movs	r3, #16
 8002110:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d030      	beq.n	800217e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d109      	bne.n	800213c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	3304      	adds	r3, #4
 8002150:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	78db      	ldrb	r3, [r3, #3]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d108      	bne.n	800216c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4619      	mov	r1, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f005 fb64 	bl	8007834 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002178:	461a      	mov	r2, r3
 800217a:	2302      	movs	r3, #2
 800217c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	2320      	movs	r3, #32
 8002198:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	3301      	adds	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f47f af62 	bne.w	8002090 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f002 ff0f 	bl	8004ff4 <USB_ReadInterrupts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021e0:	f040 80db 	bne.w	800239a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f002 ff30 	bl	800504e <USB_ReadDevAllInEpInterrupt>
 80021ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021f4:	e0cd      	b.n	8002392 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80c2 	beq.w	8002386 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f002 ff56 	bl	80050be <USB_ReadDevInEPInterrupt>
 8002212:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d057      	beq.n	80022ce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	2201      	movs	r2, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	69f9      	ldr	r1, [r7, #28]
 800223a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800223e:	4013      	ands	r3, r2
 8002240:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224e:	461a      	mov	r2, r3
 8002250:	2301      	movs	r3, #1
 8002252:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d132      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	334c      	adds	r3, #76	; 0x4c
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4403      	add	r3, r0
 800227c:	3348      	adds	r3, #72	; 0x48
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4419      	add	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4403      	add	r3, r0
 8002290:	334c      	adds	r3, #76	; 0x4c
 8002292:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d113      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x3a2>
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	3354      	adds	r3, #84	; 0x54
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d108      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022ba:	461a      	mov	r2, r3
 80022bc:	2101      	movs	r1, #1
 80022be:	f002 ff5d 	bl	800517c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f005 fa38 	bl	800773e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e4:	461a      	mov	r2, r3
 80022e6:	2308      	movs	r3, #8
 80022e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002300:	461a      	mov	r2, r3
 8002302:	2310      	movs	r3, #16
 8002304:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231c:	461a      	mov	r2, r3
 800231e:	2340      	movs	r3, #64	; 0x40
 8002320:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d023      	beq.n	8002374 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800232c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800232e:	6a38      	ldr	r0, [r7, #32]
 8002330:	f001 fe3e 	bl	8003fb0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3338      	adds	r3, #56	; 0x38
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	78db      	ldrb	r3, [r3, #3]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2200      	movs	r2, #0
 8002354:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	b2db      	uxtb	r3, r3
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f005 fa7b 	bl	8007858 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236e:	461a      	mov	r2, r3
 8002370:	2302      	movs	r3, #2
 8002372:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800237e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fcdb 	bl	8002d3c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	3301      	adds	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	f47f af2e 	bne.w	80021f6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fe28 	bl	8004ff4 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023ae:	d122      	bne.n	80023f6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d108      	bne.n	80023e0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023d6:	2100      	movs	r1, #0
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fec3 	bl	8003164 <HAL_PCDEx_LPM_Callback>
 80023de:	e002      	b.n	80023e6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f005 fa19 	bl	8007818 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 fdfa 	bl	8004ff4 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800240a:	d112      	bne.n	8002432 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f005 f9d5 	bl	80077cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002430:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f002 fddc 	bl	8004ff4 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002446:	f040 80b7 	bne.w	80025b8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2110      	movs	r1, #16
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fda3 	bl	8003fb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246a:	2300      	movs	r3, #0
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800246e:	e046      	b.n	80024fe <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247c:	461a      	mov	r2, r3
 800247e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002482:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002494:	0151      	lsls	r1, r2, #5
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	440a      	add	r2, r1
 800249a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800249e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b0:	461a      	mov	r2, r3
 80024b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c8:	0151      	lsls	r1, r2, #5
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	440a      	add	r2, r1
 80024ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	3301      	adds	r3, #1
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002504:	429a      	cmp	r2, r3
 8002506:	d3b3      	bcc.n	8002470 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002516:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800251a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	2b00      	cmp	r3, #0
 8002522:	d016      	beq.n	8002552 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002534:	f043 030b 	orr.w	r3, r3, #11
 8002538:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254a:	f043 030b 	orr.w	r3, r3, #11
 800254e:	6453      	str	r3, [r2, #68]	; 0x44
 8002550:	e015      	b.n	800257e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002564:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002568:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002578:	f043 030b 	orr.w	r3, r3, #11
 800257c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002590:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025a2:	461a      	mov	r2, r3
 80025a4:	f002 fdea 	bl	800517c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 fd19 	bl	8004ff4 <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025cc:	d124      	bne.n	8002618 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f002 fdaf 	bl	8005136 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 fd64 	bl	80040aa <USB_GetDevSpeed>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681c      	ldr	r4, [r3, #0]
 80025ee:	f001 f9e9 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80025f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	4620      	mov	r0, r4
 80025fe:	f001 fa63 	bl	8003ac8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f005 f8c3 	bl	800778e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002616:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f002 fce9 	bl	8004ff4 <USB_ReadInterrupts>
 8002622:	4603      	mov	r3, r0
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b08      	cmp	r3, #8
 800262a:	d10a      	bne.n	8002642 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f005 f8a0 	bl	8007772 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f002 0208 	and.w	r2, r2, #8
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fcd4 	bl	8004ff4 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	2b80      	cmp	r3, #128	; 0x80
 8002654:	d122      	bne.n	800269c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002662:	2301      	movs	r3, #1
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	e014      	b.n	8002692 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fb27 	bl	8002cda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3301      	adds	r3, #1
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002698:	429a      	cmp	r2, r3
 800269a:	d3e5      	bcc.n	8002668 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 fca7 	bl	8004ff4 <USB_ReadInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026b0:	d13b      	bne.n	800272a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
 80026b6:	e02b      	b.n	8002710 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3340      	adds	r3, #64	; 0x40
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d115      	bne.n	800270a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	da12      	bge.n	800270a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	333f      	adds	r3, #63	; 0x3f
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fae8 	bl	8002cda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	3301      	adds	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	429a      	cmp	r2, r3
 8002718:	d3ce      	bcc.n	80026b8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f002 fc60 	bl	8004ff4 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800273e:	d155      	bne.n	80027ec <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002740:	2301      	movs	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	e045      	b.n	80027d2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d12e      	bne.n	80027cc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800276e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002770:	2b00      	cmp	r3, #0
 8002772:	da2b      	bge.n	80027cc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002780:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002784:	429a      	cmp	r2, r3
 8002786:	d121      	bne.n	80027cc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027c8:	6053      	str	r3, [r2, #4]
            break;
 80027ca:	e007      	b.n	80027dc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	3301      	adds	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	429a      	cmp	r2, r3
 80027da:	d3b4      	bcc.n	8002746 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fbff 	bl	8004ff4 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d10a      	bne.n	8002818 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f005 f83a 	bl	800787c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f002 fbe9 	bl	8004ff4 <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b04      	cmp	r3, #4
 800282a:	d115      	bne.n	8002858 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f005 f82a 	bl	8007898 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	e000      	b.n	8002858 <HAL_PCD_IRQHandler+0x938>
      return;
 8002856:	bf00      	nop
    }
  }
}
 8002858:	3734      	adds	r7, #52	; 0x34
 800285a:	46bd      	mov	sp, r7
 800285c:	bd90      	pop	{r4, r7, pc}

0800285e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_PCD_SetAddress+0x1a>
 8002874:	2302      	movs	r3, #2
 8002876:	e013      	b.n	80028a0 <HAL_PCD_SetAddress+0x42>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f002 fb47 	bl	8004f24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	70fb      	strb	r3, [r7, #3]
 80028ba:	460b      	mov	r3, r1
 80028bc:	803b      	strh	r3, [r7, #0]
 80028be:	4613      	mov	r3, r2
 80028c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da0f      	bge.n	80028ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 020f 	and.w	r2, r3, #15
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	3338      	adds	r3, #56	; 0x38
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	3304      	adds	r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	705a      	strb	r2, [r3, #1]
 80028ec:	e00f      	b.n	800290e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	f003 020f 	and.w	r2, r3, #15
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	3304      	adds	r3, #4
 8002906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800291a:	883a      	ldrh	r2, [r7, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	78ba      	ldrb	r2, [r7, #2]
 8002924:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	785b      	ldrb	r3, [r3, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002938:	78bb      	ldrb	r3, [r7, #2]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d102      	bne.n	8002944 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_PCD_EP_Open+0xaa>
 800294e:	2302      	movs	r3, #2
 8002950:	e00e      	b.n	8002970 <HAL_PCD_EP_Open+0xc8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68f9      	ldr	r1, [r7, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fbc7 	bl	80040f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800296e:	7afb      	ldrb	r3, [r7, #11]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002988:	2b00      	cmp	r3, #0
 800298a:	da0f      	bge.n	80029ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 020f 	and.w	r2, r3, #15
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	3338      	adds	r3, #56	; 0x38
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	705a      	strb	r2, [r3, #1]
 80029aa:	e00f      	b.n	80029cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 020f 	and.w	r2, r3, #15
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	3304      	adds	r3, #4
 80029c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_PCD_EP_Close+0x6e>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e00e      	b.n	8002a04 <HAL_PCD_EP_Close+0x8c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68f9      	ldr	r1, [r7, #12]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 fc05 	bl	8004204 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a1c:	7afb      	ldrb	r3, [r7, #11]
 8002a1e:	f003 020f 	and.w	r2, r3, #15
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4413      	add	r3, r2
 8002a32:	3304      	adds	r3, #4
 8002a34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a68:	7afb      	ldrb	r3, [r7, #11]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6979      	ldr	r1, [r7, #20]
 8002a80:	f001 fee4 	bl	800484c <USB_EP0StartXfer>
 8002a84:	e008      	b.n	8002a98 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	6979      	ldr	r1, [r7, #20]
 8002a94:	f001 fc92 	bl	80043bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 020f 	and.w	r2, r3, #15
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002ac4:	681b      	ldr	r3, [r3, #0]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	f003 020f 	and.w	r2, r3, #15
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	3338      	adds	r3, #56	; 0x38
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4413      	add	r3, r2
 8002af6:	3304      	adds	r3, #4
 8002af8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b12:	7afb      	ldrb	r3, [r7, #11]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	f001 fe82 	bl	800484c <USB_EP0StartXfer>
 8002b48:	e008      	b.n	8002b5c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6979      	ldr	r1, [r7, #20]
 8002b58:	f001 fc30 	bl	80043bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 020f 	and.w	r2, r3, #15
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d901      	bls.n	8002b84 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e050      	b.n	8002c26 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	da0f      	bge.n	8002bac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	3338      	adds	r3, #56	; 0x38
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	705a      	strb	r2, [r3, #1]
 8002baa:	e00d      	b.n	8002bc8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_PCD_EP_SetStall+0x82>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e01e      	b.n	8002c26 <HAL_PCD_EP_SetStall+0xc0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 f8c0 	bl	8004d7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	b2d9      	uxtb	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c16:	461a      	mov	r2, r3
 8002c18:	f002 fab0 	bl	800517c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	f003 020f 	and.w	r2, r3, #15
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d901      	bls.n	8002c4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e042      	b.n	8002cd2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	da0f      	bge.n	8002c74 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 020f 	and.w	r2, r3, #15
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3338      	adds	r3, #56	; 0x38
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	705a      	strb	r2, [r3, #1]
 8002c72:	e00f      	b.n	8002c94 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_EP_ClrStall+0x86>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e00e      	b.n	8002cd2 <HAL_PCD_EP_ClrStall+0xa4>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 f8c8 	bl	8004e58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da0c      	bge.n	8002d08 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	3338      	adds	r3, #56	; 0x38
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e00c      	b.n	8002d22 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 020f 	and.w	r2, r3, #15
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fee7 	bl	8004afc <USB_EPStopXfer>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d32:	7afb      	ldrb	r3, [r7, #11]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	3338      	adds	r3, #56	; 0x38
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d901      	bls.n	8002d74 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e06c      	b.n	8002e4e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d902      	bls.n	8002d90 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	3303      	adds	r3, #3
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d98:	e02b      	b.n	8002df2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d902      	bls.n	8002db6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3303      	adds	r3, #3
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6919      	ldr	r1, [r3, #16]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6978      	ldr	r0, [r7, #20]
 8002dd6:	f001 ff3b 	bl	8004c50 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	441a      	add	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1a      	ldr	r2, [r3, #32]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	441a      	add	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d809      	bhi.n	8002e1c <PCD_WriteEmptyTxFifo+0xe0>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d203      	bcs.n	8002e1c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1be      	bne.n	8002d9a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d811      	bhi.n	8002e4c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	2201      	movs	r2, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	6939      	ldr	r1, [r7, #16]
 8002e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e48:	4013      	ands	r3, r2
 8002e4a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	333c      	adds	r3, #60	; 0x3c
 8002e70:	3304      	adds	r3, #4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d17b      	bne.n	8002f86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	4a61      	ldr	r2, [pc, #388]	; (8003020 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	f240 80b9 	bls.w	8003014 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80b3 	beq.w	8003014 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec0:	6093      	str	r3, [r2, #8]
 8002ec2:	e0a7      	b.n	8003014 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eda:	461a      	mov	r2, r3
 8002edc:	2320      	movs	r3, #32
 8002ede:	6093      	str	r3, [r2, #8]
 8002ee0:	e098      	b.n	8003014 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 8093 	bne.w	8003014 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	4a4b      	ldr	r2, [pc, #300]	; (8003020 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d90f      	bls.n	8002f16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f12:	6093      	str	r3, [r2, #8]
 8002f14:	e07e      	b.n	8003014 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	0159      	lsls	r1, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	440b      	add	r3, r1
 8002f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f42:	1ad2      	subs	r2, r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d114      	bne.n	8002f78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f60:	461a      	mov	r2, r3
 8002f62:	2101      	movs	r1, #1
 8002f64:	f002 f90a 	bl	800517c <USB_EP0_OutStart>
 8002f68:	e006      	b.n	8002f78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	441a      	add	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f004 fbc2 	bl	8007708 <HAL_PCD_DataOutStageCallback>
 8002f84:	e046      	b.n	8003014 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	4a26      	ldr	r2, [pc, #152]	; (8003024 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d124      	bne.n	8002fd8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002faa:	6093      	str	r3, [r2, #8]
 8002fac:	e032      	b.n	8003014 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f004 fb99 	bl	8007708 <HAL_PCD_DataOutStageCallback>
 8002fd6:	e01d      	b.n	8003014 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d114      	bne.n	8003008 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003000:	461a      	mov	r2, r3
 8003002:	2100      	movs	r1, #0
 8003004:	f002 f8ba 	bl	800517c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f004 fb7a 	bl	8007708 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	4f54300a 	.word	0x4f54300a
 8003024:	4f54310a 	.word	0x4f54310a

08003028 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	333c      	adds	r3, #60	; 0x3c
 8003040:	3304      	adds	r3, #4
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d90e      	bls.n	800307c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003074:	461a      	mov	r2, r3
 8003076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f004 fb31 	bl	80076e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d90c      	bls.n	80030a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800309c:	461a      	mov	r2, r3
 800309e:	2101      	movs	r1, #1
 80030a0:	f002 f86c 	bl	800517c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	4f54300a 	.word	0x4f54300a

080030b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	70fb      	strb	r3, [r7, #3]
 80030c0:	4613      	mov	r3, r2
 80030c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d107      	bne.n	80030e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030d2:	883b      	ldrh	r3, [r7, #0]
 80030d4:	0419      	lsls	r1, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	430a      	orrs	r2, r1
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
 80030e0:	e028      	b.n	8003134 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	4413      	add	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e00d      	b.n	8003112 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	3340      	adds	r3, #64	; 0x40
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	4413      	add	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	3301      	adds	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	3b01      	subs	r3, #1
 8003118:	429a      	cmp	r2, r3
 800311a:	d3ec      	bcc.n	80030f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800311c:	883b      	ldrh	r3, [r7, #0]
 800311e:	0418      	lsls	r0, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	3b01      	subs	r3, #1
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	4302      	orrs	r2, r0
 800312c:	3340      	adds	r3, #64	; 0x40
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e267      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d075      	beq.n	8003286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800319a:	4b88      	ldr	r3, [pc, #544]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d00c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a6:	4b85      	ldr	r3, [pc, #532]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d112      	bne.n	80031d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b2:	4b82      	ldr	r3, [pc, #520]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031be:	d10b      	bne.n	80031d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	4b7e      	ldr	r3, [pc, #504]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05b      	beq.n	8003284 <HAL_RCC_OscConfig+0x108>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d157      	bne.n	8003284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e242      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d106      	bne.n	80031f0 <HAL_RCC_OscConfig+0x74>
 80031e2:	4b76      	ldr	r3, [pc, #472]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a75      	ldr	r2, [pc, #468]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e01d      	b.n	800322c <HAL_RCC_OscConfig+0xb0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x98>
 80031fa:	4b70      	ldr	r3, [pc, #448]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a6f      	ldr	r2, [pc, #444]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6c      	ldr	r2, [pc, #432]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e00b      	b.n	800322c <HAL_RCC_OscConfig+0xb0>
 8003214:	4b69      	ldr	r3, [pc, #420]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a68      	ldr	r2, [pc, #416]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800321a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b66      	ldr	r3, [pc, #408]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a65      	ldr	r2, [pc, #404]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd fc70 	bl	8000b18 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800323c:	f7fd fc6c 	bl	8000b18 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e207      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b5b      	ldr	r3, [pc, #364]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0xc0>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fd fc5c 	bl	8000b18 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003264:	f7fd fc58 	bl	8000b18 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e1f3      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	4b51      	ldr	r3, [pc, #324]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0xe8>
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d063      	beq.n	800335a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003292:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d11c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b44      	ldr	r3, [pc, #272]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d116      	bne.n	80032e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_RCC_OscConfig+0x152>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e1c7      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ce:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4937      	ldr	r1, [pc, #220]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	e03a      	b.n	800335a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d020      	beq.n	800332e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <HAL_RCC_OscConfig+0x244>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fd fc11 	bl	8000b18 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fa:	f7fd fc0d 	bl	8000b18 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e1a8      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003318:	4b28      	ldr	r3, [pc, #160]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4925      	ldr	r1, [pc, #148]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
 800332c:	e015      	b.n	800335a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCC_OscConfig+0x244>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd fbf0 	bl	8000b18 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333c:	f7fd fbec 	bl	8000b18 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e187      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d036      	beq.n	80033d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_RCC_OscConfig+0x248>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fd fbd0 	bl	8000b18 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337c:	f7fd fbcc 	bl	8000b18 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e167      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x200>
 800339a:	e01b      	b.n	80033d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCC_OscConfig+0x248>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fd fbb9 	bl	8000b18 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a8:	e00e      	b.n	80033c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033aa:	f7fd fbb5 	bl	8000b18 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d907      	bls.n	80033c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e150      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
 80033bc:	40023800 	.word	0x40023800
 80033c0:	42470000 	.word	0x42470000
 80033c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ea      	bne.n	80033aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8097 	beq.w	8003510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e6:	4b81      	ldr	r3, [pc, #516]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b7d      	ldr	r3, [pc, #500]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a7c      	ldr	r2, [pc, #496]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b7a      	ldr	r3, [pc, #488]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b77      	ldr	r3, [pc, #476]	; (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d118      	bne.n	8003450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341e:	4b74      	ldr	r3, [pc, #464]	; (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a73      	ldr	r2, [pc, #460]	; (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fd fb75 	bl	8000b18 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fd fb71 	bl	8000b18 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e10c      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x2ea>
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a63      	ldr	r2, [pc, #396]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
 8003464:	e01c      	b.n	80034a0 <HAL_RCC_OscConfig+0x324>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b05      	cmp	r3, #5
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x30c>
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a5e      	ldr	r2, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
 800347a:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a5b      	ldr	r2, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
 8003486:	e00b      	b.n	80034a0 <HAL_RCC_OscConfig+0x324>
 8003488:	4b58      	ldr	r3, [pc, #352]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	4a57      	ldr	r2, [pc, #348]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	6713      	str	r3, [r2, #112]	; 0x70
 8003494:	4b55      	ldr	r3, [pc, #340]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a54      	ldr	r2, [pc, #336]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800349a:	f023 0304 	bic.w	r3, r3, #4
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d015      	beq.n	80034d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fd fb36 	bl	8000b18 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fd fb32 	bl	8000b18 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0cb      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	4b49      	ldr	r3, [pc, #292]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ee      	beq.n	80034b0 <HAL_RCC_OscConfig+0x334>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fd fb20 	bl	8000b18 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7fd fb1c 	bl	8000b18 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0b5      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f2:	4b3e      	ldr	r3, [pc, #248]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ee      	bne.n	80034dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d105      	bne.n	8003510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003504:	4b39      	ldr	r3, [pc, #228]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	4a38      	ldr	r2, [pc, #224]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800350a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80a1 	beq.w	800365c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b08      	cmp	r3, #8
 8003524:	d05c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d141      	bne.n	80035b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352e:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_RCC_OscConfig+0x478>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fd faf0 	bl	8000b18 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353c:	f7fd faec 	bl	8000b18 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e087      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354e:	4b27      	ldr	r3, [pc, #156]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	019b      	lsls	r3, r3, #6
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	3b01      	subs	r3, #1
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	061b      	lsls	r3, r3, #24
 800357e:	491b      	ldr	r1, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x478>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fd fac5 	bl	8000b18 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fd fac1 	bl	8000b18 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e05c      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x416>
 80035b0:	e054      	b.n	800365c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_RCC_OscConfig+0x478>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd faae 	bl	8000b18 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fd faaa 	bl	8000b18 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e045      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x444>
 80035de:	e03d      	b.n	800365c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e038      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_RCC_OscConfig+0x4ec>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d028      	beq.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d121      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d11a      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800362e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003630:	4293      	cmp	r3, r2
 8003632:	d111      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	3b01      	subs	r3, #1
 8003642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d107      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800

0800366c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0cc      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003680:	4b68      	ldr	r3, [pc, #416]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d90c      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b65      	ldr	r3, [pc, #404]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0b8      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c0:	4b59      	ldr	r3, [pc, #356]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a58      	ldr	r2, [pc, #352]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d8:	4b53      	ldr	r3, [pc, #332]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a52      	ldr	r2, [pc, #328]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b50      	ldr	r3, [pc, #320]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	494d      	ldr	r1, [pc, #308]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d044      	beq.n	800378c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d119      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d003      	beq.n	800372a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003726:	2b03      	cmp	r3, #3
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	4b3f      	ldr	r3, [pc, #252]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e06f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373a:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e067      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374a:	4b37      	ldr	r3, [pc, #220]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f023 0203 	bic.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4934      	ldr	r1, [pc, #208]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	4313      	orrs	r3, r2
 800375a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800375c:	f7fd f9dc 	bl	8000b18 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	e00a      	b.n	800377a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003764:	f7fd f9d8 	bl	8000b18 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e04f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 020c 	and.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	429a      	cmp	r2, r3
 800378a:	d1eb      	bne.n	8003764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800378c:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d20c      	bcs.n	80037b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e032      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4916      	ldr	r1, [pc, #88]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	490e      	ldr	r1, [pc, #56]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037f2:	f000 f821 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	490a      	ldr	r1, [pc, #40]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd f93c 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023c00 	.word	0x40023c00
 8003828:	40023800 	.word	0x40023800
 800382c:	08007f70 	.word	0x08007f70
 8003830:	20000000 	.word	0x20000000
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800383c:	b090      	sub	sp, #64	; 0x40
 800383e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
 8003844:	2300      	movs	r3, #0
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003848:	2300      	movs	r3, #0
 800384a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b08      	cmp	r3, #8
 800385a:	d00d      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x40>
 800385c:	2b08      	cmp	r3, #8
 800385e:	f200 80a1 	bhi.w	80039a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x34>
 8003866:	2b04      	cmp	r3, #4
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x3a>
 800386a:	e09b      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b53      	ldr	r3, [pc, #332]	; (80039bc <HAL_RCC_GetSysClockFreq+0x184>)
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003870:	e09b      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003872:	4b53      	ldr	r3, [pc, #332]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003874:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003876:	e098      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003878:	4b4f      	ldr	r3, [pc, #316]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003880:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003882:	4b4d      	ldr	r3, [pc, #308]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d028      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	4b4a      	ldr	r3, [pc, #296]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	2200      	movs	r2, #0
 8003896:	623b      	str	r3, [r7, #32]
 8003898:	627a      	str	r2, [r7, #36]	; 0x24
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038a0:	2100      	movs	r1, #0
 80038a2:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038a4:	fb03 f201 	mul.w	r2, r3, r1
 80038a8:	2300      	movs	r3, #0
 80038aa:	fb00 f303 	mul.w	r3, r0, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	4a43      	ldr	r2, [pc, #268]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038b2:	fba0 1202 	umull	r1, r2, r0, r2
 80038b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b8:	460a      	mov	r2, r1
 80038ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80038bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038be:	4413      	add	r3, r2
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c4:	2200      	movs	r2, #0
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	61fa      	str	r2, [r7, #28]
 80038ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038d2:	f7fc fc7f 	bl	80001d4 <__aeabi_uldivmod>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4613      	mov	r3, r2
 80038dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038de:	e053      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e0:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	099b      	lsrs	r3, r3, #6
 80038e6:	2200      	movs	r2, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	617a      	str	r2, [r7, #20]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038f2:	f04f 0b00 	mov.w	fp, #0
 80038f6:	4652      	mov	r2, sl
 80038f8:	465b      	mov	r3, fp
 80038fa:	f04f 0000 	mov.w	r0, #0
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	0159      	lsls	r1, r3, #5
 8003904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003908:	0150      	lsls	r0, r2, #5
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	ebb2 080a 	subs.w	r8, r2, sl
 8003912:	eb63 090b 	sbc.w	r9, r3, fp
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003922:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003926:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800392a:	ebb2 0408 	subs.w	r4, r2, r8
 800392e:	eb63 0509 	sbc.w	r5, r3, r9
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	00eb      	lsls	r3, r5, #3
 800393c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003940:	00e2      	lsls	r2, r4, #3
 8003942:	4614      	mov	r4, r2
 8003944:	461d      	mov	r5, r3
 8003946:	eb14 030a 	adds.w	r3, r4, sl
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	eb45 030b 	adc.w	r3, r5, fp
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800395e:	4629      	mov	r1, r5
 8003960:	028b      	lsls	r3, r1, #10
 8003962:	4621      	mov	r1, r4
 8003964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003968:	4621      	mov	r1, r4
 800396a:	028a      	lsls	r2, r1, #10
 800396c:	4610      	mov	r0, r2
 800396e:	4619      	mov	r1, r3
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	2200      	movs	r2, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	60fa      	str	r2, [r7, #12]
 8003978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800397c:	f7fc fc2a 	bl	80001d4 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4613      	mov	r3, r2
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	3301      	adds	r3, #1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetSysClockFreq+0x184>)
 80039a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3740      	adds	r7, #64	; 0x40
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	017d7840 	.word	0x017d7840

080039c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000000 	.word	0x20000000

080039dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0a9b      	lsrs	r3, r3, #10
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08007f80 	.word	0x08007f80

08003a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a04:	b084      	sub	sp, #16
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	f107 001c 	add.w	r0, r7, #28
 8003a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d122      	bne.n	8003a62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f001 fbee 	bl	8005238 <USB_CoreReset>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e01a      	b.n	8003a98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f001 fbe2 	bl	8005238 <USB_CoreReset>
 8003a74:	4603      	mov	r3, r0
 8003a76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
 8003a8a:	e005      	b.n	8003a98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10b      	bne.n	8003ab6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f043 0206 	orr.w	r2, r3, #6
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ac2:	b004      	add	sp, #16
 8003ac4:	4770      	bx	lr
	...

08003ac8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d165      	bne.n	8003ba8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4a41      	ldr	r2, [pc, #260]	; (8003be4 <USB_SetTurnaroundTime+0x11c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d906      	bls.n	8003af2 <USB_SetTurnaroundTime+0x2a>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4a40      	ldr	r2, [pc, #256]	; (8003be8 <USB_SetTurnaroundTime+0x120>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d202      	bcs.n	8003af2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003aec:	230f      	movs	r3, #15
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e062      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4a3c      	ldr	r2, [pc, #240]	; (8003be8 <USB_SetTurnaroundTime+0x120>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d306      	bcc.n	8003b08 <USB_SetTurnaroundTime+0x40>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4a3b      	ldr	r2, [pc, #236]	; (8003bec <USB_SetTurnaroundTime+0x124>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d202      	bcs.n	8003b08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b02:	230e      	movs	r3, #14
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e057      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4a38      	ldr	r2, [pc, #224]	; (8003bec <USB_SetTurnaroundTime+0x124>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d306      	bcc.n	8003b1e <USB_SetTurnaroundTime+0x56>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4a37      	ldr	r2, [pc, #220]	; (8003bf0 <USB_SetTurnaroundTime+0x128>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d202      	bcs.n	8003b1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b18:	230d      	movs	r3, #13
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e04c      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <USB_SetTurnaroundTime+0x128>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d306      	bcc.n	8003b34 <USB_SetTurnaroundTime+0x6c>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4a32      	ldr	r2, [pc, #200]	; (8003bf4 <USB_SetTurnaroundTime+0x12c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d802      	bhi.n	8003b34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b2e:	230c      	movs	r3, #12
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e041      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <USB_SetTurnaroundTime+0x12c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d906      	bls.n	8003b4a <USB_SetTurnaroundTime+0x82>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4a2e      	ldr	r2, [pc, #184]	; (8003bf8 <USB_SetTurnaroundTime+0x130>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d802      	bhi.n	8003b4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b44:	230b      	movs	r3, #11
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	e036      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <USB_SetTurnaroundTime+0x130>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d906      	bls.n	8003b60 <USB_SetTurnaroundTime+0x98>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <USB_SetTurnaroundTime+0x134>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d802      	bhi.n	8003b60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b5a:	230a      	movs	r3, #10
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e02b      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <USB_SetTurnaroundTime+0x134>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d906      	bls.n	8003b76 <USB_SetTurnaroundTime+0xae>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <USB_SetTurnaroundTime+0x138>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d202      	bcs.n	8003b76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b70:	2309      	movs	r3, #9
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e020      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <USB_SetTurnaroundTime+0x138>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d306      	bcc.n	8003b8c <USB_SetTurnaroundTime+0xc4>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4a20      	ldr	r2, [pc, #128]	; (8003c04 <USB_SetTurnaroundTime+0x13c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d802      	bhi.n	8003b8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b86:	2308      	movs	r3, #8
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e015      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <USB_SetTurnaroundTime+0x13c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d906      	bls.n	8003ba2 <USB_SetTurnaroundTime+0xda>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <USB_SetTurnaroundTime+0x140>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d202      	bcs.n	8003ba2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b9c:	2307      	movs	r3, #7
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e00a      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e007      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003bae:	2309      	movs	r3, #9
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e001      	b.n	8003bb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003bb4:	2309      	movs	r3, #9
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	029b      	lsls	r3, r3, #10
 8003bcc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	00d8acbf 	.word	0x00d8acbf
 8003be8:	00e4e1c0 	.word	0x00e4e1c0
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	01067380 	.word	0x01067380
 8003bf4:	011a499f 	.word	0x011a499f
 8003bf8:	01312cff 	.word	0x01312cff
 8003bfc:	014ca43f 	.word	0x014ca43f
 8003c00:	016e3600 	.word	0x016e3600
 8003c04:	01a6ab1f 	.word	0x01a6ab1f
 8003c08:	01e84800 	.word	0x01e84800

08003c0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 0201 	bic.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d115      	bne.n	8003c9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f7fc ff56 	bl	8000b30 <HAL_Delay>
      ms++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3301      	adds	r3, #1
 8003c88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f001 fa45 	bl	800511a <USB_GetMode>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d01e      	beq.n	8003cd4 <USB_SetCurrentMode+0x84>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b31      	cmp	r3, #49	; 0x31
 8003c9a:	d9f0      	bls.n	8003c7e <USB_SetCurrentMode+0x2e>
 8003c9c:	e01a      	b.n	8003cd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d115      	bne.n	8003cd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f7fc ff3d 	bl	8000b30 <HAL_Delay>
      ms++;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f001 fa2c 	bl	800511a <USB_GetMode>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <USB_SetCurrentMode+0x84>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b31      	cmp	r3, #49	; 0x31
 8003ccc:	d9f0      	bls.n	8003cb0 <USB_SetCurrentMode+0x60>
 8003cce:	e001      	b.n	8003cd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e005      	b.n	8003ce0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b32      	cmp	r3, #50	; 0x32
 8003cd8:	d101      	bne.n	8003cde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ce8:	b084      	sub	sp, #16
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e009      	b.n	8003d1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	3340      	adds	r3, #64	; 0x40
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	2200      	movs	r2, #0
 8003d14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b0e      	cmp	r3, #14
 8003d20:	d9f2      	bls.n	8003d08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d11c      	bne.n	8003d62 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d36:	f043 0302 	orr.w	r3, r3, #2
 8003d3a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d60:	e00b      	b.n	8003d7a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d80:	461a      	mov	r2, r3
 8003d82:	2300      	movs	r3, #0
 8003d84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d94:	461a      	mov	r2, r3
 8003d96:	680b      	ldr	r3, [r1, #0]
 8003d98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d10c      	bne.n	8003dba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003da6:	2100      	movs	r1, #0
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f965 	bl	8004078 <USB_SetDevSpeed>
 8003dae:	e008      	b.n	8003dc2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003db0:	2101      	movs	r1, #1
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f960 	bl	8004078 <USB_SetDevSpeed>
 8003db8:	e003      	b.n	8003dc2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003dba:	2103      	movs	r1, #3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f95b 	bl	8004078 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003dc2:	2110      	movs	r1, #16
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f8f3 	bl	8003fb0 <USB_FlushTxFifo>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f91f 	bl	8004018 <USB_FlushRxFifo>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dea:	461a      	mov	r2, r3
 8003dec:	2300      	movs	r3, #0
 8003dee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df6:	461a      	mov	r2, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e02:	461a      	mov	r2, r3
 8003e04:	2300      	movs	r3, #0
 8003e06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	e043      	b.n	8003e96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e24:	d118      	bne.n	8003e58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	e013      	b.n	8003e6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e008      	b.n	8003e6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e64:	461a      	mov	r2, r3
 8003e66:	2300      	movs	r3, #0
 8003e68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e76:	461a      	mov	r2, r3
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	3301      	adds	r3, #1
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3b7      	bcc.n	8003e0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e043      	b.n	8003f2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eba:	d118      	bne.n	8003eee <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e013      	b.n	8003f00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e008      	b.n	8003f00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efa:	461a      	mov	r2, r3
 8003efc:	2300      	movs	r3, #0
 8003efe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d3b7      	bcc.n	8003ea4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f043 0210 	orr.w	r2, r3, #16
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <USB_DevInit+0x2c4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f043 0208 	orr.w	r2, r3, #8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fa8:	b004      	add	sp, #16
 8003faa:	4770      	bx	lr
 8003fac:	803c3800 	.word	0x803c3800

08003fb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a13      	ldr	r2, [pc, #76]	; (8004014 <USB_FlushTxFifo+0x64>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e01b      	b.n	8004008 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	daf2      	bge.n	8003fbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	019b      	lsls	r3, r3, #6
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	; (8004014 <USB_FlushTxFifo+0x64>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e006      	b.n	8004008 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b20      	cmp	r3, #32
 8004004:	d0f0      	beq.n	8003fe8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	00030d40 	.word	0x00030d40

08004018 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a11      	ldr	r2, [pc, #68]	; (8004074 <USB_FlushRxFifo+0x5c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e018      	b.n	8004068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	daf2      	bge.n	8004024 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2210      	movs	r2, #16
 8004046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3301      	adds	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a08      	ldr	r2, [pc, #32]	; (8004074 <USB_FlushRxFifo+0x5c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e006      	b.n	8004068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b10      	cmp	r3, #16
 8004064:	d0f0      	beq.n	8004048 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	00030d40 	.word	0x00030d40

08004078 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0306 	and.w	r3, r3, #6
 80040c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80040ca:	2300      	movs	r3, #0
 80040cc:	75fb      	strb	r3, [r7, #23]
 80040ce:	e00a      	b.n	80040e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d002      	beq.n	80040dc <USB_GetDevSpeed+0x32>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b06      	cmp	r3, #6
 80040da:	d102      	bne.n	80040e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80040dc:	2302      	movs	r3, #2
 80040de:	75fb      	strb	r3, [r7, #23]
 80040e0:	e001      	b.n	80040e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80040e2:	230f      	movs	r3, #15
 80040e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	785b      	ldrb	r3, [r3, #1]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d13a      	bne.n	8004186 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	b29b      	uxth	r3, r3
 8004128:	68f9      	ldr	r1, [r7, #12]
 800412a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800412e:	4313      	orrs	r3, r2
 8004130:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d155      	bne.n	80041f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	791b      	ldrb	r3, [r3, #4]
 8004162:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004164:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	059b      	lsls	r3, r3, #22
 800416a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800416c:	4313      	orrs	r3, r2
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e036      	b.n	80041f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	2101      	movs	r1, #1
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11a      	bne.n	80041f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	791b      	ldrb	r3, [r3, #4]
 80041d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041da:	430b      	orrs	r3, r1
 80041dc:	4313      	orrs	r3, r2
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d161      	bne.n	80042e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004236:	d11f      	bne.n	8004278 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	440a      	add	r2, r1
 800424e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004252:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004256:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	440a      	add	r2, r1
 800426e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004276:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	b29b      	uxth	r3, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004298:	4013      	ands	r3, r2
 800429a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042bc:	4013      	ands	r3, r2
 80042be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	0159      	lsls	r1, r3, #5
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	440b      	add	r3, r1
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	4619      	mov	r1, r3
 80042dc:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <USB_DeactivateEndpoint+0x1b0>)
 80042de:	4013      	ands	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]
 80042e2:	e060      	b.n	80043a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042fa:	d11f      	bne.n	800433c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800431a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	440a      	add	r2, r1
 8004332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800433a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	43db      	mvns	r3, r3
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800435c:	4013      	ands	r3, r2
 800435e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	2101      	movs	r1, #1
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	43db      	mvns	r3, r3
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004380:	4013      	ands	r3, r2
 8004382:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	0159      	lsls	r1, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	440b      	add	r3, r1
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	4619      	mov	r1, r3
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <USB_DeactivateEndpoint+0x1b4>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	ec337800 	.word	0xec337800
 80043b8:	eff37800 	.word	0xeff37800

080043bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	785b      	ldrb	r3, [r3, #1]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	f040 815c 	bne.w	8004696 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d132      	bne.n	800444c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	0151      	lsls	r1, r2, #5
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	440a      	add	r2, r1
 80043fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004408:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	0cdb      	lsrs	r3, r3, #19
 8004446:	04db      	lsls	r3, r3, #19
 8004448:	6113      	str	r3, [r2, #16]
 800444a:	e074      	b.n	8004536 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	440a      	add	r2, r1
 8004462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004466:	0cdb      	lsrs	r3, r3, #19
 8004468:	04db      	lsls	r3, r3, #19
 800446a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	440a      	add	r2, r1
 8004482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004486:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800448a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800448e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	440b      	add	r3, r1
 80044a8:	1e59      	subs	r1, r3, #1
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044b4:	4b9d      	ldr	r3, [pc, #628]	; (800472c <USB_EPStartXfer+0x370>)
 80044b6:	400b      	ands	r3, r1
 80044b8:	69b9      	ldr	r1, [r7, #24]
 80044ba:	0148      	lsls	r0, r1, #5
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	4401      	add	r1, r0
 80044c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044c4:	4313      	orrs	r3, r2
 80044c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044de:	69b9      	ldr	r1, [r7, #24]
 80044e0:	0148      	lsls	r0, r1, #5
 80044e2:	69f9      	ldr	r1, [r7, #28]
 80044e4:	4401      	add	r1, r0
 80044e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044ea:	4313      	orrs	r3, r2
 80044ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	791b      	ldrb	r3, [r3, #4]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d11f      	bne.n	8004536 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	0151      	lsls	r1, r2, #5
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	440a      	add	r2, r1
 800450c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004510:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004514:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004534:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d14b      	bne.n	80045d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	461a      	mov	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	791b      	ldrb	r3, [r3, #4]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d128      	bne.n	80045b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d110      	bne.n	8004592 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	e00f      	b.n	80045b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e133      	b.n	800483c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	791b      	ldrb	r3, [r3, #4]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d015      	beq.n	8004628 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 811b 	beq.w	800483c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	2101      	movs	r1, #1
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	69f9      	ldr	r1, [r7, #28]
 800461e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004622:	4313      	orrs	r3, r2
 8004624:	634b      	str	r3, [r1, #52]	; 0x34
 8004626:	e109      	b.n	800483c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004634:	2b00      	cmp	r3, #0
 8004636:	d110      	bne.n	800465a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	0151      	lsls	r1, r2, #5
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	440a      	add	r2, r1
 800464e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	e00f      	b.n	800467a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6919      	ldr	r1, [r3, #16]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781a      	ldrb	r2, [r3, #0]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	b298      	uxth	r0, r3
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	4603      	mov	r3, r0
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fade 	bl	8004c50 <USB_WritePacket>
 8004694:	e0d2      	b.n	800483c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b0:	0cdb      	lsrs	r3, r3, #19
 80046b2:	04db      	lsls	r3, r3, #19
 80046b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d126      	bne.n	8004730 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f8:	69b9      	ldr	r1, [r7, #24]
 80046fa:	0148      	lsls	r0, r1, #5
 80046fc:	69f9      	ldr	r1, [r7, #28]
 80046fe:	4401      	add	r1, r0
 8004700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004704:	4313      	orrs	r3, r2
 8004706:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004726:	6113      	str	r3, [r2, #16]
 8004728:	e03a      	b.n	80047a0 <USB_EPStartXfer+0x3e4>
 800472a:	bf00      	nop
 800472c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4413      	add	r3, r2
 800473a:	1e5a      	subs	r2, r3, #1
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	8afa      	ldrh	r2, [r7, #22]
 800474c:	fb03 f202 	mul.w	r2, r3, r2
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	8afb      	ldrh	r3, [r7, #22]
 8004764:	04d9      	lsls	r1, r3, #19
 8004766:	4b38      	ldr	r3, [pc, #224]	; (8004848 <USB_EPStartXfer+0x48c>)
 8004768:	400b      	ands	r3, r1
 800476a:	69b9      	ldr	r1, [r7, #24]
 800476c:	0148      	lsls	r0, r1, #5
 800476e:	69f9      	ldr	r1, [r7, #28]
 8004770:	4401      	add	r1, r0
 8004772:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004776:	4313      	orrs	r3, r2
 8004778:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	0148      	lsls	r0, r1, #5
 8004794:	69f9      	ldr	r1, [r7, #28]
 8004796:	4401      	add	r1, r0
 8004798:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800479c:	4313      	orrs	r3, r2
 800479e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10d      	bne.n	80047c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6919      	ldr	r1, [r3, #16]
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047be:	460a      	mov	r2, r1
 80047c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	791b      	ldrb	r3, [r3, #4]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d128      	bne.n	800481c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d110      	bne.n	80047fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e00f      	b.n	800481c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800483a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	1ff80000 	.word	0x1ff80000

0800484c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 80ce 	bne.w	8004a0a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d132      	bne.n	80048dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	0cdb      	lsrs	r3, r3, #19
 80048d6:	04db      	lsls	r3, r3, #19
 80048d8:	6113      	str	r3, [r2, #16]
 80048da:	e04e      	b.n	800497a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f6:	0cdb      	lsrs	r3, r3, #19
 80048f8:	04db      	lsls	r3, r3, #19
 80048fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004916:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800491a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800491e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	699a      	ldr	r2, [r3, #24]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	429a      	cmp	r2, r3
 800492a:	d903      	bls.n	8004934 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496a:	6939      	ldr	r1, [r7, #16]
 800496c:	0148      	lsls	r0, r1, #5
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	4401      	add	r1, r0
 8004972:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004976:	4313      	orrs	r3, r2
 8004978:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d11e      	bne.n	80049be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	461a      	mov	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e097      	b.n	8004aee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8083 	beq.w	8004aee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	2101      	movs	r1, #1
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	6979      	ldr	r1, [r7, #20]
 8004a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a04:	4313      	orrs	r3, r2
 8004a06:	634b      	str	r3, [r1, #52]	; 0x34
 8004a08:	e071      	b.n	8004aee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	0cdb      	lsrs	r3, r3, #19
 8004a26:	04db      	lsls	r3, r3, #19
 8004a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a9c:	6939      	ldr	r1, [r7, #16]
 8004a9e:	0148      	lsls	r0, r1, #5
 8004aa0:	6979      	ldr	r1, [r7, #20]
 8004aa2:	4401      	add	r1, r0
 8004aa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10d      	bne.n	8004ace <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	6919      	ldr	r1, [r3, #16]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aca:	460a      	mov	r2, r1
 8004acc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d14a      	bne.n	8004bb0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b32:	f040 8086 	bne.w	8004c42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	0151      	lsls	r1, r2, #5
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	440a      	add	r2, r1
 8004b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d902      	bls.n	8004b94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	75fb      	strb	r3, [r7, #23]
          break;
 8004b92:	e056      	b.n	8004c42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bac:	d0e7      	beq.n	8004b7e <USB_EPStopXfer+0x82>
 8004bae:	e048      	b.n	8004c42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc8:	d13b      	bne.n	8004c42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	0151      	lsls	r1, r2, #5
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	440a      	add	r2, r1
 8004be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3301      	adds	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d902      	bls.n	8004c28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
          break;
 8004c26:	e00c      	b.n	8004c42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c40:	d0e7      	beq.n	8004c12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b089      	sub	sp, #36	; 0x24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	460b      	mov	r3, r1
 8004c60:	71fb      	strb	r3, [r7, #7]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d123      	bne.n	8004cbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c76:	88bb      	ldrh	r3, [r7, #4]
 8004c78:	3303      	adds	r3, #3
 8004c7a:	089b      	lsrs	r3, r3, #2
 8004c7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	e018      	b.n	8004cb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	031a      	lsls	r2, r3, #12
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c90:	461a      	mov	r2, r3
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3301      	adds	r3, #1
 8004cae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3e2      	bcc.n	8004c84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3724      	adds	r7, #36	; 0x24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b08b      	sub	sp, #44	; 0x2c
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	e014      	b.n	8004d22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	3301      	adds	r3, #1
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	3301      	adds	r3, #1
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	3301      	adds	r3, #1
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	6a3a      	ldr	r2, [r7, #32]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d3e6      	bcc.n	8004cf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d2a:	8bfb      	ldrh	r3, [r7, #30]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01e      	beq.n	8004d6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f107 0310 	add.w	r3, r7, #16
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	701a      	strb	r2, [r3, #0]
      i++;
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	3301      	adds	r3, #1
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d62:	8bfb      	ldrh	r3, [r7, #30]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d68:	8bfb      	ldrh	r3, [r7, #30]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ea      	bne.n	8004d44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	372c      	adds	r7, #44	; 0x2c
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	785b      	ldrb	r3, [r3, #1]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d12c      	bne.n	8004df2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	db12      	blt.n	8004dd0 <USB_EPSetStall+0x54>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00f      	beq.n	8004dd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e02b      	b.n	8004e4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	db12      	blt.n	8004e2a <USB_EPSetStall+0xae>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00f      	beq.n	8004e2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	0151      	lsls	r1, r2, #5
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	440a      	add	r2, r1
 8004e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d128      	bne.n	8004ec6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	791b      	ldrb	r3, [r3, #4]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d003      	beq.n	8004ea4 <USB_EPClearStall+0x4c>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	791b      	ldrb	r3, [r3, #4]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d138      	bne.n	8004f16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e027      	b.n	8004f16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ee4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	791b      	ldrb	r3, [r3, #4]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d003      	beq.n	8004ef6 <USB_EPClearStall+0x9e>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	791b      	ldrb	r3, [r3, #4]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d10f      	bne.n	8004f16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f8a:	f023 0303 	bic.w	r3, r3, #3
 8004f8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f9e:	f023 0302 	bic.w	r3, r3, #2
 8004fa2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fcc:	f023 0303 	bic.w	r3, r3, #3
 8004fd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe0:	f043 0302 	orr.w	r3, r3, #2
 8004fe4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800500c:	68fb      	ldr	r3, [r7, #12]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	4013      	ands	r3, r2
 800503c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	0c1b      	lsrs	r3, r3, #16
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	b29b      	uxth	r3, r3
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050b0:	68bb      	ldr	r3, [r7, #8]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050be:	b480      	push	{r7}
 80050c0:	b087      	sub	sp, #28
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	460b      	mov	r3, r1
 80050c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	01db      	lsls	r3, r3, #7
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4013      	ands	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800510c:	68bb      	ldr	r3, [r7, #8]
}
 800510e:	4618      	mov	r0, r3
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0301 	and.w	r3, r3, #1
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005150:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005154:	f023 0307 	bic.w	r3, r3, #7
 8005158:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	460b      	mov	r3, r1
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	333c      	adds	r3, #60	; 0x3c
 8005192:	3304      	adds	r3, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4a26      	ldr	r2, [pc, #152]	; (8005234 <USB_EP0_OutStart+0xb8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d90a      	bls.n	80051b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b0:	d101      	bne.n	80051b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e037      	b.n	8005226 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	461a      	mov	r2, r3
 80051be:	2300      	movs	r3, #0
 80051c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e4:	f043 0318 	orr.w	r3, r3, #24
 80051e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80051fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051fe:	7afb      	ldrb	r3, [r7, #11]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d10f      	bne.n	8005224 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005222:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	4f54300a 	.word	0x4f54300a

08005238 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4a13      	ldr	r2, [pc, #76]	; (800529c <USB_CoreReset+0x64>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e01b      	b.n	800528e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	daf2      	bge.n	8005244 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f043 0201 	orr.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <USB_CoreReset+0x64>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e006      	b.n	800528e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b01      	cmp	r3, #1
 800528a:	d0f0      	beq.n	800526e <USB_CoreReset+0x36>

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	00030d40 	.word	0x00030d40

080052a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052b0:	f002 fc8a 	bl	8007bc8 <USBD_static_malloc>
 80052b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d109      	bne.n	80052d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	32b0      	adds	r2, #176	; 0xb0
 80052c6:	2100      	movs	r1, #0
 80052c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80052cc:	2302      	movs	r3, #2
 80052ce:	e0d4      	b.n	800547a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80052d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80052d4:	2100      	movs	r1, #0
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f002 fd76 	bl	8007dc8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	32b0      	adds	r2, #176	; 0xb0
 80052e6:	68f9      	ldr	r1, [r7, #12]
 80052e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	32b0      	adds	r2, #176	; 0xb0
 80052f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	7c1b      	ldrb	r3, [r3, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d138      	bne.n	800537a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005308:	4b5e      	ldr	r3, [pc, #376]	; (8005484 <USBD_CDC_Init+0x1e4>)
 800530a:	7819      	ldrb	r1, [r3, #0]
 800530c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005310:	2202      	movs	r2, #2
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f002 fb35 	bl	8007982 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005318:	4b5a      	ldr	r3, [pc, #360]	; (8005484 <USBD_CDC_Init+0x1e4>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	f003 020f 	and.w	r2, r3, #15
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3324      	adds	r3, #36	; 0x24
 800532e:	2201      	movs	r2, #1
 8005330:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005332:	4b55      	ldr	r3, [pc, #340]	; (8005488 <USBD_CDC_Init+0x1e8>)
 8005334:	7819      	ldrb	r1, [r3, #0]
 8005336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800533a:	2202      	movs	r2, #2
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f002 fb20 	bl	8007982 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005342:	4b51      	ldr	r3, [pc, #324]	; (8005488 <USBD_CDC_Init+0x1e8>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	f003 020f 	and.w	r2, r3, #15
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800535a:	2201      	movs	r2, #1
 800535c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800535e:	4b4b      	ldr	r3, [pc, #300]	; (800548c <USBD_CDC_Init+0x1ec>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	f003 020f 	and.w	r2, r3, #15
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	3326      	adds	r3, #38	; 0x26
 8005374:	2210      	movs	r2, #16
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	e035      	b.n	80053e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800537a:	4b42      	ldr	r3, [pc, #264]	; (8005484 <USBD_CDC_Init+0x1e4>)
 800537c:	7819      	ldrb	r1, [r3, #0]
 800537e:	2340      	movs	r3, #64	; 0x40
 8005380:	2202      	movs	r2, #2
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f002 fafd 	bl	8007982 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005388:	4b3e      	ldr	r3, [pc, #248]	; (8005484 <USBD_CDC_Init+0x1e4>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	f003 020f 	and.w	r2, r3, #15
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	3324      	adds	r3, #36	; 0x24
 800539e:	2201      	movs	r2, #1
 80053a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80053a2:	4b39      	ldr	r3, [pc, #228]	; (8005488 <USBD_CDC_Init+0x1e8>)
 80053a4:	7819      	ldrb	r1, [r3, #0]
 80053a6:	2340      	movs	r3, #64	; 0x40
 80053a8:	2202      	movs	r2, #2
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f002 fae9 	bl	8007982 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80053b0:	4b35      	ldr	r3, [pc, #212]	; (8005488 <USBD_CDC_Init+0x1e8>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f003 020f 	and.w	r2, r3, #15
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80053c8:	2201      	movs	r2, #1
 80053ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80053cc:	4b2f      	ldr	r3, [pc, #188]	; (800548c <USBD_CDC_Init+0x1ec>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f003 020f 	and.w	r2, r3, #15
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3326      	adds	r3, #38	; 0x26
 80053e2:	2210      	movs	r2, #16
 80053e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053e6:	4b29      	ldr	r3, [pc, #164]	; (800548c <USBD_CDC_Init+0x1ec>)
 80053e8:	7819      	ldrb	r1, [r3, #0]
 80053ea:	2308      	movs	r3, #8
 80053ec:	2203      	movs	r2, #3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f002 fac7 	bl	8007982 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80053f4:	4b25      	ldr	r3, [pc, #148]	; (800548c <USBD_CDC_Init+0x1ec>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f003 020f 	and.w	r2, r3, #15
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	3324      	adds	r3, #36	; 0x24
 800540a:	2201      	movs	r2, #1
 800540c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	33b0      	adds	r3, #176	; 0xb0
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005444:	2302      	movs	r3, #2
 8005446:	e018      	b.n	800547a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	7c1b      	ldrb	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <USBD_CDC_Init+0x1e8>)
 8005452:	7819      	ldrb	r1, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800545a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f002 fb7e 	bl	8007b60 <USBD_LL_PrepareReceive>
 8005464:	e008      	b.n	8005478 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <USBD_CDC_Init+0x1e8>)
 8005468:	7819      	ldrb	r1, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f002 fb74 	bl	8007b60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000093 	.word	0x20000093
 8005488:	20000094 	.word	0x20000094
 800548c:	20000095 	.word	0x20000095

08005490 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800549c:	4b3a      	ldr	r3, [pc, #232]	; (8005588 <USBD_CDC_DeInit+0xf8>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f002 fa93 	bl	80079ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80054a8:	4b37      	ldr	r3, [pc, #220]	; (8005588 <USBD_CDC_DeInit+0xf8>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f003 020f 	and.w	r2, r3, #15
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	3324      	adds	r3, #36	; 0x24
 80054be:	2200      	movs	r2, #0
 80054c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80054c2:	4b32      	ldr	r3, [pc, #200]	; (800558c <USBD_CDC_DeInit+0xfc>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f002 fa80 	bl	80079ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80054ce:	4b2f      	ldr	r3, [pc, #188]	; (800558c <USBD_CDC_DeInit+0xfc>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	f003 020f 	and.w	r2, r3, #15
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80054e6:	2200      	movs	r2, #0
 80054e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80054ea:	4b29      	ldr	r3, [pc, #164]	; (8005590 <USBD_CDC_DeInit+0x100>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f002 fa6c 	bl	80079ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80054f6:	4b26      	ldr	r3, [pc, #152]	; (8005590 <USBD_CDC_DeInit+0x100>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	f003 020f 	and.w	r2, r3, #15
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3324      	adds	r3, #36	; 0x24
 800550c:	2200      	movs	r2, #0
 800550e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005510:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <USBD_CDC_DeInit+0x100>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f003 020f 	and.w	r2, r3, #15
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	3326      	adds	r3, #38	; 0x26
 8005526:	2200      	movs	r2, #0
 8005528:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	32b0      	adds	r2, #176	; 0xb0
 8005534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01f      	beq.n	800557c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	33b0      	adds	r3, #176	; 0xb0
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	32b0      	adds	r2, #176	; 0xb0
 800555a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555e:	4618      	mov	r0, r3
 8005560:	f002 fb40 	bl	8007be4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	32b0      	adds	r2, #176	; 0xb0
 800556e:	2100      	movs	r1, #0
 8005570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000093 	.word	0x20000093
 800558c:	20000094 	.word	0x20000094
 8005590:	20000095 	.word	0x20000095

08005594 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	32b0      	adds	r2, #176	; 0xb0
 80055a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e0bf      	b.n	8005744 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d050      	beq.n	8005672 <USBD_CDC_Setup+0xde>
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	f040 80af 	bne.w	8005734 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	88db      	ldrh	r3, [r3, #6]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d03a      	beq.n	8005654 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b25b      	sxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	da1b      	bge.n	8005620 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	33b0      	adds	r3, #176	; 0xb0
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80055fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	88d2      	ldrh	r2, [r2, #6]
 8005604:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	88db      	ldrh	r3, [r3, #6]
 800560a:	2b07      	cmp	r3, #7
 800560c:	bf28      	it	cs
 800560e:	2307      	movcs	r3, #7
 8005610:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	89fa      	ldrh	r2, [r7, #14]
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 fd89 	bl	8007130 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800561e:	e090      	b.n	8005742 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	785a      	ldrb	r2, [r3, #1]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	88db      	ldrh	r3, [r3, #6]
 800562e:	2b3f      	cmp	r3, #63	; 0x3f
 8005630:	d803      	bhi.n	800563a <USBD_CDC_Setup+0xa6>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	88db      	ldrh	r3, [r3, #6]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	e000      	b.n	800563c <USBD_CDC_Setup+0xa8>
 800563a:	2240      	movs	r2, #64	; 0x40
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005642:	6939      	ldr	r1, [r7, #16]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800564a:	461a      	mov	r2, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 fd9b 	bl	8007188 <USBD_CtlPrepareRx>
      break;
 8005652:	e076      	b.n	8005742 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	33b0      	adds	r3, #176	; 0xb0
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	7850      	ldrb	r0, [r2, #1]
 800566a:	2200      	movs	r2, #0
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	4798      	blx	r3
      break;
 8005670:	e067      	b.n	8005742 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	2b0b      	cmp	r3, #11
 8005678:	d851      	bhi.n	800571e <USBD_CDC_Setup+0x18a>
 800567a:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <USBD_CDC_Setup+0xec>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	080056b1 	.word	0x080056b1
 8005684:	0800572d 	.word	0x0800572d
 8005688:	0800571f 	.word	0x0800571f
 800568c:	0800571f 	.word	0x0800571f
 8005690:	0800571f 	.word	0x0800571f
 8005694:	0800571f 	.word	0x0800571f
 8005698:	0800571f 	.word	0x0800571f
 800569c:	0800571f 	.word	0x0800571f
 80056a0:	0800571f 	.word	0x0800571f
 80056a4:	0800571f 	.word	0x0800571f
 80056a8:	080056db 	.word	0x080056db
 80056ac:	08005705 	.word	0x08005705
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d107      	bne.n	80056cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056bc:	f107 030a 	add.w	r3, r7, #10
 80056c0:	2202      	movs	r2, #2
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 fd33 	bl	8007130 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056ca:	e032      	b.n	8005732 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 fcbd 	bl	800704e <USBD_CtlError>
            ret = USBD_FAIL;
 80056d4:	2303      	movs	r3, #3
 80056d6:	75fb      	strb	r3, [r7, #23]
          break;
 80056d8:	e02b      	b.n	8005732 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d107      	bne.n	80056f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80056e6:	f107 030d 	add.w	r3, r7, #13
 80056ea:	2201      	movs	r2, #1
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fd1e 	bl	8007130 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056f4:	e01d      	b.n	8005732 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 fca8 	bl	800704e <USBD_CtlError>
            ret = USBD_FAIL;
 80056fe:	2303      	movs	r3, #3
 8005700:	75fb      	strb	r3, [r7, #23]
          break;
 8005702:	e016      	b.n	8005732 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b03      	cmp	r3, #3
 800570e:	d00f      	beq.n	8005730 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 fc9b 	bl	800704e <USBD_CtlError>
            ret = USBD_FAIL;
 8005718:	2303      	movs	r3, #3
 800571a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800571c:	e008      	b.n	8005730 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 fc94 	bl	800704e <USBD_CtlError>
          ret = USBD_FAIL;
 8005726:	2303      	movs	r3, #3
 8005728:	75fb      	strb	r3, [r7, #23]
          break;
 800572a:	e002      	b.n	8005732 <USBD_CDC_Setup+0x19e>
          break;
 800572c:	bf00      	nop
 800572e:	e008      	b.n	8005742 <USBD_CDC_Setup+0x1ae>
          break;
 8005730:	bf00      	nop
      }
      break;
 8005732:	e006      	b.n	8005742 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 fc89 	bl	800704e <USBD_CtlError>
      ret = USBD_FAIL;
 800573c:	2303      	movs	r3, #3
 800573e:	75fb      	strb	r3, [r7, #23]
      break;
 8005740:	bf00      	nop
  }

  return (uint8_t)ret;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800575e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	32b0      	adds	r2, #176	; 0xb0
 800576a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005772:	2303      	movs	r3, #3
 8005774:	e065      	b.n	8005842 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	32b0      	adds	r2, #176	; 0xb0
 8005780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005784:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	3318      	adds	r3, #24
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02f      	beq.n	8005800 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	f003 020f 	and.w	r2, r3, #15
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	3318      	adds	r3, #24
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 010f 	and.w	r1, r3, #15
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	460b      	mov	r3, r1
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	440b      	add	r3, r1
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4403      	add	r3, r0
 80057c8:	3348      	adds	r3, #72	; 0x48
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80057d0:	fb01 f303 	mul.w	r3, r1, r3
 80057d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d112      	bne.n	8005800 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	f003 020f 	and.w	r2, r3, #15
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	3318      	adds	r3, #24
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057f2:	78f9      	ldrb	r1, [r7, #3]
 80057f4:	2300      	movs	r3, #0
 80057f6:	2200      	movs	r2, #0
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f002 f990 	bl	8007b1e <USBD_LL_Transmit>
 80057fe:	e01f      	b.n	8005840 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	33b0      	adds	r3, #176	; 0xb0
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d010      	beq.n	8005840 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	33b0      	adds	r3, #176	; 0xb0
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	32b0      	adds	r2, #176	; 0xb0
 8005860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005864:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	32b0      	adds	r2, #176	; 0xb0
 8005870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005878:	2303      	movs	r3, #3
 800587a:	e01a      	b.n	80058b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f002 f98e 	bl	8007ba2 <USBD_LL_GetRxDataSize>
 8005886:	4602      	mov	r2, r0
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	33b0      	adds	r3, #176	; 0xb0
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058ac:	4611      	mov	r1, r2
 80058ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	32b0      	adds	r2, #176	; 0xb0
 80058cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058d8:	2303      	movs	r3, #3
 80058da:	e025      	b.n	8005928 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	33b0      	adds	r3, #176	; 0xb0
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01a      	beq.n	8005926 <USBD_CDC_EP0_RxReady+0x6c>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058f6:	2bff      	cmp	r3, #255	; 0xff
 80058f8:	d015      	beq.n	8005926 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	33b0      	adds	r3, #176	; 0xb0
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005912:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800591a:	b292      	uxth	r2, r2
 800591c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	22ff      	movs	r2, #255	; 0xff
 8005922:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005938:	2182      	movs	r1, #130	; 0x82
 800593a:	4818      	ldr	r0, [pc, #96]	; (800599c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800593c:	f000 fd4f 	bl	80063de <USBD_GetEpDesc>
 8005940:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005942:	2101      	movs	r1, #1
 8005944:	4815      	ldr	r0, [pc, #84]	; (800599c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005946:	f000 fd4a 	bl	80063de <USBD_GetEpDesc>
 800594a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800594c:	2181      	movs	r1, #129	; 0x81
 800594e:	4813      	ldr	r0, [pc, #76]	; (800599c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005950:	f000 fd45 	bl	80063de <USBD_GetEpDesc>
 8005954:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2210      	movs	r2, #16
 8005960:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d006      	beq.n	8005976 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2200      	movs	r2, #0
 800596c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005970:	711a      	strb	r2, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d006      	beq.n	800598a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005984:	711a      	strb	r2, [r3, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2243      	movs	r2, #67	; 0x43
 800598e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000050 	.word	0x20000050

080059a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059a8:	2182      	movs	r1, #130	; 0x82
 80059aa:	4818      	ldr	r0, [pc, #96]	; (8005a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059ac:	f000 fd17 	bl	80063de <USBD_GetEpDesc>
 80059b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059b2:	2101      	movs	r1, #1
 80059b4:	4815      	ldr	r0, [pc, #84]	; (8005a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059b6:	f000 fd12 	bl	80063de <USBD_GetEpDesc>
 80059ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059bc:	2181      	movs	r1, #129	; 0x81
 80059be:	4813      	ldr	r0, [pc, #76]	; (8005a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059c0:	f000 fd0d 	bl	80063de <USBD_GetEpDesc>
 80059c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2210      	movs	r2, #16
 80059d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d006      	beq.n	80059e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2200      	movs	r2, #0
 80059dc:	711a      	strb	r2, [r3, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f042 0202 	orr.w	r2, r2, #2
 80059e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d006      	beq.n	80059fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	711a      	strb	r2, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f042 0202 	orr.w	r2, r2, #2
 80059f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2243      	movs	r2, #67	; 0x43
 80059fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a00:	4b02      	ldr	r3, [pc, #8]	; (8005a0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000050 	.word	0x20000050

08005a10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a18:	2182      	movs	r1, #130	; 0x82
 8005a1a:	4818      	ldr	r0, [pc, #96]	; (8005a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a1c:	f000 fcdf 	bl	80063de <USBD_GetEpDesc>
 8005a20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a22:	2101      	movs	r1, #1
 8005a24:	4815      	ldr	r0, [pc, #84]	; (8005a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a26:	f000 fcda 	bl	80063de <USBD_GetEpDesc>
 8005a2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a2c:	2181      	movs	r1, #129	; 0x81
 8005a2e:	4813      	ldr	r0, [pc, #76]	; (8005a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a30:	f000 fcd5 	bl	80063de <USBD_GetEpDesc>
 8005a34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2210      	movs	r2, #16
 8005a40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d006      	beq.n	8005a56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a50:	711a      	strb	r2, [r3, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d006      	beq.n	8005a6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a64:	711a      	strb	r2, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2243      	movs	r2, #67	; 0x43
 8005a6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a70:	4b02      	ldr	r3, [pc, #8]	; (8005a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000050 	.word	0x20000050

08005a80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	220a      	movs	r2, #10
 8005a8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a8e:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	2000000c 	.word	0x2000000c

08005aa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e009      	b.n	8005ac8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	33b0      	adds	r3, #176	; 0xb0
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	32b0      	adds	r2, #176	; 0xb0
 8005aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e008      	b.n	8005b0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	32b0      	adds	r2, #176	; 0xb0
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e004      	b.n	8005b46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	32b0      	adds	r2, #176	; 0xb0
 8005b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	32b0      	adds	r2, #176	; 0xb0
 8005b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e025      	b.n	8005bd2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d11f      	bne.n	8005bd0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005b98:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <USBD_CDC_TransmitPacket+0x88>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4403      	add	r3, r0
 8005bb2:	3318      	adds	r3, #24
 8005bb4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <USBD_CDC_TransmitPacket+0x88>)
 8005bb8:	7819      	ldrb	r1, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 ffa9 	bl	8007b1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000093 	.word	0x20000093

08005be0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	32b0      	adds	r2, #176	; 0xb0
 8005bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	32b0      	adds	r2, #176	; 0xb0
 8005c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e018      	b.n	8005c40 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	7c1b      	ldrb	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <USBD_CDC_ReceivePacket+0x68>)
 8005c18:	7819      	ldrb	r1, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 ff9b 	bl	8007b60 <USBD_LL_PrepareReceive>
 8005c2a:	e008      	b.n	8005c3e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <USBD_CDC_ReceivePacket+0x68>)
 8005c2e:	7819      	ldrb	r1, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c36:	2340      	movs	r3, #64	; 0x40
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 ff91 	bl	8007b60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000094 	.word	0x20000094

08005c4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e01f      	b.n	8005ca4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	79fa      	ldrb	r2, [r7, #7]
 8005c96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f001 fe0b 	bl	80078b4 <USBD_LL_Init>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e025      	b.n	8005d10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	32ae      	adds	r2, #174	; 0xae
 8005cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00f      	beq.n	8005d00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	32ae      	adds	r2, #174	; 0xae
 8005cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	f107 020e 	add.w	r2, r7, #14
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 fe13 	bl	800794c <USBD_LL_Start>
 8005d26:	4603      	mov	r3, r0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
 8005d70:	4603      	mov	r3, r0
 8005d72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005da4:	2303      	movs	r3, #3
 8005da6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f001 f908 	bl	8006fda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d01a      	beq.n	8005e24 <USBD_LL_SetupStage+0x72>
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d822      	bhi.n	8005e38 <USBD_LL_SetupStage+0x86>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <USBD_LL_SetupStage+0x4a>
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d00a      	beq.n	8005e10 <USBD_LL_SetupStage+0x5e>
 8005dfa:	e01d      	b.n	8005e38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fb5f 	bl	80064c8 <USBD_StdDevReq>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0e:	e020      	b.n	8005e52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fbc7 	bl	80065ac <USBD_StdItfReq>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	73fb      	strb	r3, [r7, #15]
      break;
 8005e22:	e016      	b.n	8005e52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fc29 	bl	8006684 <USBD_StdEPReq>
 8005e32:	4603      	mov	r3, r0
 8005e34:	73fb      	strb	r3, [r7, #15]
      break;
 8005e36:	e00c      	b.n	8005e52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 fde0 	bl	8007a0c <USBD_LL_StallEP>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e50:	bf00      	nop
  }

  return ret;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	460b      	mov	r3, r1
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d16e      	bne.n	8005f52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	f040 8098 	bne.w	8005fb8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d913      	bls.n	8005ebc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	1ad2      	subs	r2, r2, r3
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	bf28      	it	cs
 8005eae:	4613      	movcs	r3, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f001 f984 	bl	80071c2 <USBD_CtlContinueRx>
 8005eba:	e07d      	b.n	8005fb8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d014      	beq.n	8005ef4 <USBD_LL_DataOutStage+0x98>
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d81d      	bhi.n	8005f0a <USBD_LL_DataOutStage+0xae>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <USBD_LL_DataOutStage+0x7c>
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d003      	beq.n	8005ede <USBD_LL_DataOutStage+0x82>
 8005ed6:	e018      	b.n	8005f0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	75bb      	strb	r3, [r7, #22]
            break;
 8005edc:	e018      	b.n	8005f10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fa5e 	bl	80063aa <USBD_CoreFindIF>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75bb      	strb	r3, [r7, #22]
            break;
 8005ef2:	e00d      	b.n	8005f10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	4619      	mov	r1, r3
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fa60 	bl	80063c4 <USBD_CoreFindEP>
 8005f04:	4603      	mov	r3, r0
 8005f06:	75bb      	strb	r3, [r7, #22]
            break;
 8005f08:	e002      	b.n	8005f10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f10:	7dbb      	ldrb	r3, [r7, #22]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d119      	bne.n	8005f4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d113      	bne.n	8005f4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f22:	7dba      	ldrb	r2, [r7, #22]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	32ae      	adds	r2, #174	; 0xae
 8005f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005f32:	7dba      	ldrb	r2, [r7, #22]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005f3a:	7dba      	ldrb	r2, [r7, #22]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	32ae      	adds	r2, #174	; 0xae
 8005f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f001 f94a 	bl	80071e4 <USBD_CtlSendStatus>
 8005f50:	e032      	b.n	8005fb8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f52:	7afb      	ldrb	r3, [r7, #11]
 8005f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fa31 	bl	80063c4 <USBD_CoreFindEP>
 8005f62:	4603      	mov	r3, r0
 8005f64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f66:	7dbb      	ldrb	r3, [r7, #22]
 8005f68:	2bff      	cmp	r3, #255	; 0xff
 8005f6a:	d025      	beq.n	8005fb8 <USBD_LL_DataOutStage+0x15c>
 8005f6c:	7dbb      	ldrb	r3, [r7, #22]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d122      	bne.n	8005fb8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d117      	bne.n	8005fae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f7e:	7dba      	ldrb	r2, [r7, #22]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	32ae      	adds	r2, #174	; 0xae
 8005f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00f      	beq.n	8005fae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005f8e:	7dba      	ldrb	r2, [r7, #22]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f96:	7dba      	ldrb	r2, [r7, #22]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	32ae      	adds	r2, #174	; 0xae
 8005f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	7afa      	ldrb	r2, [r7, #11]
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	4798      	blx	r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
 8005fb6:	e000      	b.n	8005fba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005fd0:	7afb      	ldrb	r3, [r7, #11]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d16f      	bne.n	80060b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3314      	adds	r3, #20
 8005fda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d15a      	bne.n	800609c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d914      	bls.n	800601c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	461a      	mov	r2, r3
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f001 f8ac 	bl	8007166 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800600e:	2300      	movs	r3, #0
 8006010:	2200      	movs	r2, #0
 8006012:	2100      	movs	r1, #0
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f001 fda3 	bl	8007b60 <USBD_LL_PrepareReceive>
 800601a:	e03f      	b.n	800609c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	429a      	cmp	r2, r3
 8006026:	d11c      	bne.n	8006062 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006030:	429a      	cmp	r2, r3
 8006032:	d316      	bcc.n	8006062 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800603e:	429a      	cmp	r2, r3
 8006040:	d20f      	bcs.n	8006062 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006042:	2200      	movs	r2, #0
 8006044:	2100      	movs	r1, #0
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f001 f88d 	bl	8007166 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006054:	2300      	movs	r3, #0
 8006056:	2200      	movs	r2, #0
 8006058:	2100      	movs	r1, #0
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f001 fd80 	bl	8007b60 <USBD_LL_PrepareReceive>
 8006060:	e01c      	b.n	800609c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b03      	cmp	r3, #3
 800606c:	d10f      	bne.n	800608e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800608e:	2180      	movs	r1, #128	; 0x80
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f001 fcbb 	bl	8007a0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f001 f8b7 	bl	800720a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d03a      	beq.n	800611c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff fe42 	bl	8005d30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060b4:	e032      	b.n	800611c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80060b6:	7afb      	ldrb	r3, [r7, #11]
 80060b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f97f 	bl	80063c4 <USBD_CoreFindEP>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
 80060cc:	2bff      	cmp	r3, #255	; 0xff
 80060ce:	d025      	beq.n	800611c <USBD_LL_DataInStage+0x15a>
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d122      	bne.n	800611c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d11c      	bne.n	800611c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80060e2:	7dfa      	ldrb	r2, [r7, #23]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	32ae      	adds	r2, #174	; 0xae
 80060e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d014      	beq.n	800611c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80060f2:	7dfa      	ldrb	r2, [r7, #23]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80060fa:	7dfa      	ldrb	r2, [r7, #23]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	32ae      	adds	r2, #174	; 0xae
 8006100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	7afa      	ldrb	r2, [r7, #11]
 8006108:	4611      	mov	r1, r2
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	4798      	blx	r3
 800610e:	4603      	mov	r3, r0
 8006110:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006112:	7dbb      	ldrb	r3, [r7, #22]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006118:	7dbb      	ldrb	r3, [r7, #22]
 800611a:	e000      	b.n	800611e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d014      	beq.n	800618c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6852      	ldr	r2, [r2, #4]
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	4611      	mov	r1, r2
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006188:	2303      	movs	r3, #3
 800618a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800618c:	2340      	movs	r3, #64	; 0x40
 800618e:	2200      	movs	r2, #0
 8006190:	2100      	movs	r1, #0
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 fbf5 	bl	8007982 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2240      	movs	r2, #64	; 0x40
 80061a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	2200      	movs	r2, #0
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 fbe7 	bl	8007982 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2240      	movs	r2, #64	; 0x40
 80061be:	621a      	str	r2, [r3, #32]

  return ret;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	78fa      	ldrb	r2, [r7, #3]
 80061da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2204      	movs	r2, #4
 8006204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b04      	cmp	r3, #4
 8006228:	d106      	bne.n	8006238 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006230:	b2da      	uxtb	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d110      	bne.n	800627c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00b      	beq.n	800627c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	32ae      	adds	r2, #174	; 0xae
 800629c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e01c      	b.n	80062e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d115      	bne.n	80062e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	32ae      	adds	r2, #174	; 0xae
 80062be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	32ae      	adds	r2, #174	; 0xae
 80062d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	4611      	mov	r1, r2
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	32ae      	adds	r2, #174	; 0xae
 8006300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006308:	2303      	movs	r3, #3
 800630a:	e01c      	b.n	8006346 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d115      	bne.n	8006344 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	32ae      	adds	r2, #174	; 0xae
 8006322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	32ae      	adds	r2, #174	; 0xae
 8006336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	78fa      	ldrb	r2, [r7, #3]
 800633e:	4611      	mov	r1, r2
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00e      	beq.n	80063a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6852      	ldr	r2, [r2, #4]
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	4611      	mov	r1, r2
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	4798      	blx	r3
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800639c:	2303      	movs	r3, #3
 800639e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b086      	sub	sp, #24
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	885b      	ldrh	r3, [r3, #2]
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	429a      	cmp	r2, r3
 8006404:	d920      	bls.n	8006448 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800640e:	e013      	b.n	8006438 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006410:	f107 030a 	add.w	r3, r7, #10
 8006414:	4619      	mov	r1, r3
 8006416:	6978      	ldr	r0, [r7, #20]
 8006418:	f000 f81b 	bl	8006452 <USBD_GetNextDesc>
 800641c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	2b05      	cmp	r3, #5
 8006424:	d108      	bne.n	8006438 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	789b      	ldrb	r3, [r3, #2]
 800642e:	78fa      	ldrb	r2, [r7, #3]
 8006430:	429a      	cmp	r2, r3
 8006432:	d008      	beq.n	8006446 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006434:	2300      	movs	r3, #0
 8006436:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	885b      	ldrh	r3, [r3, #2]
 800643c:	b29a      	uxth	r2, r3
 800643e:	897b      	ldrh	r3, [r7, #10]
 8006440:	429a      	cmp	r2, r3
 8006442:	d8e5      	bhi.n	8006410 <USBD_GetEpDesc+0x32>
 8006444:	e000      	b.n	8006448 <USBD_GetEpDesc+0x6a>
          break;
 8006446:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006448:	693b      	ldr	r3, [r7, #16]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	881a      	ldrh	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	4413      	add	r3, r2
 800646c:	b29a      	uxth	r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4413      	add	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	3301      	adds	r3, #1
 80064a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064aa:	8a3b      	ldrh	r3, [r7, #16]
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	b21a      	sxth	r2, r3
 80064b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	b21b      	sxth	r3, r3
 80064b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064ba:	89fb      	ldrh	r3, [r7, #14]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d005      	beq.n	80064ee <USBD_StdDevReq+0x26>
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d857      	bhi.n	8006596 <USBD_StdDevReq+0xce>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00f      	beq.n	800650a <USBD_StdDevReq+0x42>
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d153      	bne.n	8006596 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	32ae      	adds	r2, #174	; 0xae
 80064f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]
      break;
 8006508:	e04a      	b.n	80065a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2b09      	cmp	r3, #9
 8006510:	d83b      	bhi.n	800658a <USBD_StdDevReq+0xc2>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <USBD_StdDevReq+0x50>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	0800656d 	.word	0x0800656d
 800651c:	08006581 	.word	0x08006581
 8006520:	0800658b 	.word	0x0800658b
 8006524:	08006577 	.word	0x08006577
 8006528:	0800658b 	.word	0x0800658b
 800652c:	0800654b 	.word	0x0800654b
 8006530:	08006541 	.word	0x08006541
 8006534:	0800658b 	.word	0x0800658b
 8006538:	08006563 	.word	0x08006563
 800653c:	08006555 	.word	0x08006555
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa3c 	bl	80069c0 <USBD_GetDescriptor>
          break;
 8006548:	e024      	b.n	8006594 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fba1 	bl	8006c94 <USBD_SetAddress>
          break;
 8006552:	e01f      	b.n	8006594 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fbe0 	bl	8006d1c <USBD_SetConfig>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]
          break;
 8006560:	e018      	b.n	8006594 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fc83 	bl	8006e70 <USBD_GetConfig>
          break;
 800656a:	e013      	b.n	8006594 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fcb4 	bl	8006edc <USBD_GetStatus>
          break;
 8006574:	e00e      	b.n	8006594 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fce3 	bl	8006f44 <USBD_SetFeature>
          break;
 800657e:	e009      	b.n	8006594 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fd07 	bl	8006f96 <USBD_ClrFeature>
          break;
 8006588:	e004      	b.n	8006594 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fd5e 	bl	800704e <USBD_CtlError>
          break;
 8006592:	bf00      	nop
      }
      break;
 8006594:	e004      	b.n	80065a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fd58 	bl	800704e <USBD_CtlError>
      break;
 800659e:	bf00      	nop
  }

  return ret;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop

080065ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d005      	beq.n	80065d2 <USBD_StdItfReq+0x26>
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d852      	bhi.n	8006670 <USBD_StdItfReq+0xc4>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <USBD_StdItfReq+0x26>
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d14e      	bne.n	8006670 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d840      	bhi.n	8006662 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	889b      	ldrh	r3, [r3, #4]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d836      	bhi.n	8006658 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	889b      	ldrh	r3, [r3, #4]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff fed9 	bl	80063aa <USBD_CoreFindIF>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	2bff      	cmp	r3, #255	; 0xff
 8006600:	d01d      	beq.n	800663e <USBD_StdItfReq+0x92>
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d11a      	bne.n	800663e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006608:	7bba      	ldrb	r2, [r7, #14]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32ae      	adds	r2, #174	; 0xae
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00f      	beq.n	8006638 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006618:	7bba      	ldrb	r2, [r7, #14]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006620:	7bba      	ldrb	r2, [r7, #14]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	32ae      	adds	r2, #174	; 0xae
 8006626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006636:	e004      	b.n	8006642 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006638:	2303      	movs	r3, #3
 800663a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800663c:	e001      	b.n	8006642 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800663e:	2303      	movs	r3, #3
 8006640:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	88db      	ldrh	r3, [r3, #6]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d110      	bne.n	800666c <USBD_StdItfReq+0xc0>
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10d      	bne.n	800666c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fdc7 	bl	80071e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006656:	e009      	b.n	800666c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fcf7 	bl	800704e <USBD_CtlError>
          break;
 8006660:	e004      	b.n	800666c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fcf2 	bl	800704e <USBD_CtlError>
          break;
 800666a:	e000      	b.n	800666e <USBD_StdItfReq+0xc2>
          break;
 800666c:	bf00      	nop
      }
      break;
 800666e:	e004      	b.n	800667a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fceb 	bl	800704e <USBD_CtlError>
      break;
 8006678:	bf00      	nop
  }

  return ret;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	889b      	ldrh	r3, [r3, #4]
 8006696:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d007      	beq.n	80066b4 <USBD_StdEPReq+0x30>
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	f200 817f 	bhi.w	80069a8 <USBD_StdEPReq+0x324>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d02a      	beq.n	8006704 <USBD_StdEPReq+0x80>
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	f040 817a 	bne.w	80069a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fe83 	bl	80063c4 <USBD_CoreFindEP>
 80066be:	4603      	mov	r3, r0
 80066c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066c2:	7b7b      	ldrb	r3, [r7, #13]
 80066c4:	2bff      	cmp	r3, #255	; 0xff
 80066c6:	f000 8174 	beq.w	80069b2 <USBD_StdEPReq+0x32e>
 80066ca:	7b7b      	ldrb	r3, [r7, #13]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 8170 	bne.w	80069b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80066d2:	7b7a      	ldrb	r2, [r7, #13]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80066da:	7b7a      	ldrb	r2, [r7, #13]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	32ae      	adds	r2, #174	; 0xae
 80066e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8163 	beq.w	80069b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80066ec:	7b7a      	ldrb	r2, [r7, #13]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	32ae      	adds	r2, #174	; 0xae
 80066f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
 80066fe:	4603      	mov	r3, r0
 8006700:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006702:	e156      	b.n	80069b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	2b03      	cmp	r3, #3
 800670a:	d008      	beq.n	800671e <USBD_StdEPReq+0x9a>
 800670c:	2b03      	cmp	r3, #3
 800670e:	f300 8145 	bgt.w	800699c <USBD_StdEPReq+0x318>
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 809b 	beq.w	800684e <USBD_StdEPReq+0x1ca>
 8006718:	2b01      	cmp	r3, #1
 800671a:	d03c      	beq.n	8006796 <USBD_StdEPReq+0x112>
 800671c:	e13e      	b.n	800699c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d002      	beq.n	8006730 <USBD_StdEPReq+0xac>
 800672a:	2b03      	cmp	r3, #3
 800672c:	d016      	beq.n	800675c <USBD_StdEPReq+0xd8>
 800672e:	e02c      	b.n	800678a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006730:	7bbb      	ldrb	r3, [r7, #14]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00d      	beq.n	8006752 <USBD_StdEPReq+0xce>
 8006736:	7bbb      	ldrb	r3, [r7, #14]
 8006738:	2b80      	cmp	r3, #128	; 0x80
 800673a:	d00a      	beq.n	8006752 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 f963 	bl	8007a0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006746:	2180      	movs	r1, #128	; 0x80
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 f95f 	bl	8007a0c <USBD_LL_StallEP>
 800674e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006750:	e020      	b.n	8006794 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fc7a 	bl	800704e <USBD_CtlError>
              break;
 800675a:	e01b      	b.n	8006794 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	885b      	ldrh	r3, [r3, #2]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10e      	bne.n	8006782 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <USBD_StdEPReq+0xfe>
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b80      	cmp	r3, #128	; 0x80
 800676e:	d008      	beq.n	8006782 <USBD_StdEPReq+0xfe>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	88db      	ldrh	r3, [r3, #6]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d104      	bne.n	8006782 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f945 	bl	8007a0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fd2e 	bl	80071e4 <USBD_CtlSendStatus>

              break;
 8006788:	e004      	b.n	8006794 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fc5e 	bl	800704e <USBD_CtlError>
              break;
 8006792:	bf00      	nop
          }
          break;
 8006794:	e107      	b.n	80069a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d002      	beq.n	80067a8 <USBD_StdEPReq+0x124>
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d016      	beq.n	80067d4 <USBD_StdEPReq+0x150>
 80067a6:	e04b      	b.n	8006840 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00d      	beq.n	80067ca <USBD_StdEPReq+0x146>
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	2b80      	cmp	r3, #128	; 0x80
 80067b2:	d00a      	beq.n	80067ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 f927 	bl	8007a0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067be:	2180      	movs	r1, #128	; 0x80
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 f923 	bl	8007a0c <USBD_LL_StallEP>
 80067c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067c8:	e040      	b.n	800684c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fc3e 	bl	800704e <USBD_CtlError>
              break;
 80067d2:	e03b      	b.n	800684c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	885b      	ldrh	r3, [r3, #2]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d136      	bne.n	800684a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067e6:	7bbb      	ldrb	r3, [r7, #14]
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 f92d 	bl	8007a4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fcf7 	bl	80071e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fde2 	bl	80063c4 <USBD_CoreFindEP>
 8006800:	4603      	mov	r3, r0
 8006802:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006804:	7b7b      	ldrb	r3, [r7, #13]
 8006806:	2bff      	cmp	r3, #255	; 0xff
 8006808:	d01f      	beq.n	800684a <USBD_StdEPReq+0x1c6>
 800680a:	7b7b      	ldrb	r3, [r7, #13]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d11c      	bne.n	800684a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006810:	7b7a      	ldrb	r2, [r7, #13]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006818:	7b7a      	ldrb	r2, [r7, #13]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	32ae      	adds	r2, #174	; 0xae
 800681e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d010      	beq.n	800684a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006828:	7b7a      	ldrb	r2, [r7, #13]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	32ae      	adds	r2, #174	; 0xae
 800682e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
 800683a:	4603      	mov	r3, r0
 800683c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800683e:	e004      	b.n	800684a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fc03 	bl	800704e <USBD_CtlError>
              break;
 8006848:	e000      	b.n	800684c <USBD_StdEPReq+0x1c8>
              break;
 800684a:	bf00      	nop
          }
          break;
 800684c:	e0ab      	b.n	80069a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d002      	beq.n	8006860 <USBD_StdEPReq+0x1dc>
 800685a:	2b03      	cmp	r3, #3
 800685c:	d032      	beq.n	80068c4 <USBD_StdEPReq+0x240>
 800685e:	e097      	b.n	8006990 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d007      	beq.n	8006876 <USBD_StdEPReq+0x1f2>
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	2b80      	cmp	r3, #128	; 0x80
 800686a:	d004      	beq.n	8006876 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fbed 	bl	800704e <USBD_CtlError>
                break;
 8006874:	e091      	b.n	800699a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800687a:	2b00      	cmp	r3, #0
 800687c:	da0b      	bge.n	8006896 <USBD_StdEPReq+0x212>
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	3310      	adds	r3, #16
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	4413      	add	r3, r2
 8006892:	3304      	adds	r3, #4
 8006894:	e00b      	b.n	80068ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006896:	7bbb      	ldrb	r3, [r7, #14]
 8006898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	4413      	add	r3, r2
 80068ac:	3304      	adds	r3, #4
 80068ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2202      	movs	r2, #2
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fc37 	bl	8007130 <USBD_CtlSendData>
              break;
 80068c2:	e06a      	b.n	800699a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da11      	bge.n	80068f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	3324      	adds	r3, #36	; 0x24
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d117      	bne.n	8006916 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fbb0 	bl	800704e <USBD_CtlError>
                  break;
 80068ee:	e054      	b.n	800699a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	f003 020f 	and.w	r2, r3, #15
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb9d 	bl	800704e <USBD_CtlError>
                  break;
 8006914:	e041      	b.n	800699a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800691a:	2b00      	cmp	r3, #0
 800691c:	da0b      	bge.n	8006936 <USBD_StdEPReq+0x2b2>
 800691e:	7bbb      	ldrb	r3, [r7, #14]
 8006920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	3310      	adds	r3, #16
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	4413      	add	r3, r2
 8006932:	3304      	adds	r3, #4
 8006934:	e00b      	b.n	800694e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006936:	7bbb      	ldrb	r3, [r7, #14]
 8006938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	3304      	adds	r3, #4
 800694e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <USBD_StdEPReq+0x2d8>
 8006956:	7bbb      	ldrb	r3, [r7, #14]
 8006958:	2b80      	cmp	r3, #128	; 0x80
 800695a:	d103      	bne.n	8006964 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	e00e      	b.n	8006982 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 f88d 	bl	8007a88 <USBD_LL_IsStallEP>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2201      	movs	r2, #1
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e002      	b.n	8006982 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2202      	movs	r2, #2
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fbd1 	bl	8007130 <USBD_CtlSendData>
              break;
 800698e:	e004      	b.n	800699a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fb5b 	bl	800704e <USBD_CtlError>
              break;
 8006998:	bf00      	nop
          }
          break;
 800699a:	e004      	b.n	80069a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fb55 	bl	800704e <USBD_CtlError>
          break;
 80069a4:	bf00      	nop
      }
      break;
 80069a6:	e005      	b.n	80069b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fb4f 	bl	800704e <USBD_CtlError>
      break;
 80069b0:	e000      	b.n	80069b4 <USBD_StdEPReq+0x330>
      break;
 80069b2:	bf00      	nop
  }

  return ret;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	885b      	ldrh	r3, [r3, #2]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	2b06      	cmp	r3, #6
 80069e2:	f200 8128 	bhi.w	8006c36 <USBD_GetDescriptor+0x276>
 80069e6:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <USBD_GetDescriptor+0x2c>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006a09 	.word	0x08006a09
 80069f0:	08006a21 	.word	0x08006a21
 80069f4:	08006a61 	.word	0x08006a61
 80069f8:	08006c37 	.word	0x08006c37
 80069fc:	08006c37 	.word	0x08006c37
 8006a00:	08006bd7 	.word	0x08006bd7
 8006a04:	08006c03 	.word	0x08006c03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	7c12      	ldrb	r2, [r2, #16]
 8006a14:	f107 0108 	add.w	r1, r7, #8
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
 8006a1c:	60f8      	str	r0, [r7, #12]
      break;
 8006a1e:	e112      	b.n	8006c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	7c1b      	ldrb	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10d      	bne.n	8006a44 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a30:	f107 0208 	add.w	r2, r7, #8
 8006a34:	4610      	mov	r0, r2
 8006a36:	4798      	blx	r3
 8006a38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	2202      	movs	r2, #2
 8006a40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a42:	e100      	b.n	8006c46 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	f107 0208 	add.w	r2, r7, #8
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
 8006a54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	701a      	strb	r2, [r3, #0]
      break;
 8006a5e:	e0f2      	b.n	8006c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	885b      	ldrh	r3, [r3, #2]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	f200 80ac 	bhi.w	8006bc4 <USBD_GetDescriptor+0x204>
 8006a6c:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <USBD_GetDescriptor+0xb4>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006a8d 	.word	0x08006a8d
 8006a78:	08006ac1 	.word	0x08006ac1
 8006a7c:	08006af5 	.word	0x08006af5
 8006a80:	08006b29 	.word	0x08006b29
 8006a84:	08006b5d 	.word	0x08006b5d
 8006a88:	08006b91 	.word	0x08006b91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	7c12      	ldrb	r2, [r2, #16]
 8006aa4:	f107 0108 	add.w	r1, r7, #8
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4798      	blx	r3
 8006aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aae:	e091      	b.n	8006bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 facb 	bl	800704e <USBD_CtlError>
            err++;
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
 8006aba:	3301      	adds	r3, #1
 8006abc:	72fb      	strb	r3, [r7, #11]
          break;
 8006abe:	e089      	b.n	8006bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	7c12      	ldrb	r2, [r2, #16]
 8006ad8:	f107 0108 	add.w	r1, r7, #8
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ae2:	e077      	b.n	8006bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fab1 	bl	800704e <USBD_CtlError>
            err++;
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	3301      	adds	r3, #1
 8006af0:	72fb      	strb	r3, [r7, #11]
          break;
 8006af2:	e06f      	b.n	8006bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	7c12      	ldrb	r2, [r2, #16]
 8006b0c:	f107 0108 	add.w	r1, r7, #8
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b16:	e05d      	b.n	8006bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa97 	bl	800704e <USBD_CtlError>
            err++;
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	3301      	adds	r3, #1
 8006b24:	72fb      	strb	r3, [r7, #11]
          break;
 8006b26:	e055      	b.n	8006bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	7c12      	ldrb	r2, [r2, #16]
 8006b40:	f107 0108 	add.w	r1, r7, #8
 8006b44:	4610      	mov	r0, r2
 8006b46:	4798      	blx	r3
 8006b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b4a:	e043      	b.n	8006bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa7d 	bl	800704e <USBD_CtlError>
            err++;
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	3301      	adds	r3, #1
 8006b58:	72fb      	strb	r3, [r7, #11]
          break;
 8006b5a:	e03b      	b.n	8006bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	7c12      	ldrb	r2, [r2, #16]
 8006b74:	f107 0108 	add.w	r1, r7, #8
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4798      	blx	r3
 8006b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b7e:	e029      	b.n	8006bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa63 	bl	800704e <USBD_CtlError>
            err++;
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b8e:	e021      	b.n	8006bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	7c12      	ldrb	r2, [r2, #16]
 8006ba8:	f107 0108 	add.w	r1, r7, #8
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
 8006bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bb2:	e00f      	b.n	8006bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa49 	bl	800704e <USBD_CtlError>
            err++;
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bc2:	e007      	b.n	8006bd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fa41 	bl	800704e <USBD_CtlError>
          err++;
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006bd2:	bf00      	nop
      }
      break;
 8006bd4:	e037      	b.n	8006c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	7c1b      	ldrb	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be6:	f107 0208 	add.w	r2, r7, #8
 8006bea:	4610      	mov	r0, r2
 8006bec:	4798      	blx	r3
 8006bee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bf0:	e029      	b.n	8006c46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fa2a 	bl	800704e <USBD_CtlError>
        err++;
 8006bfa:	7afb      	ldrb	r3, [r7, #11]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8006c00:	e021      	b.n	8006c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7c1b      	ldrb	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10d      	bne.n	8006c26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	f107 0208 	add.w	r2, r7, #8
 8006c16:	4610      	mov	r0, r2
 8006c18:	4798      	blx	r3
 8006c1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	2207      	movs	r2, #7
 8006c22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c24:	e00f      	b.n	8006c46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fa10 	bl	800704e <USBD_CtlError>
        err++;
 8006c2e:	7afb      	ldrb	r3, [r7, #11]
 8006c30:	3301      	adds	r3, #1
 8006c32:	72fb      	strb	r3, [r7, #11]
      break;
 8006c34:	e007      	b.n	8006c46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa08 	bl	800704e <USBD_CtlError>
      err++;
 8006c3e:	7afb      	ldrb	r3, [r7, #11]
 8006c40:	3301      	adds	r3, #1
 8006c42:	72fb      	strb	r3, [r7, #11]
      break;
 8006c44:	bf00      	nop
  }

  if (err != 0U)
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11e      	bne.n	8006c8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	88db      	ldrh	r3, [r3, #6]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d016      	beq.n	8006c82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c54:	893b      	ldrh	r3, [r7, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	88da      	ldrh	r2, [r3, #6]
 8006c5e:	893b      	ldrh	r3, [r7, #8]
 8006c60:	4293      	cmp	r3, r2
 8006c62:	bf28      	it	cs
 8006c64:	4613      	movcs	r3, r2
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c6a:	893b      	ldrh	r3, [r7, #8]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68f9      	ldr	r1, [r7, #12]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fa5d 	bl	8007130 <USBD_CtlSendData>
 8006c76:	e009      	b.n	8006c8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f9e7 	bl	800704e <USBD_CtlError>
 8006c80:	e004      	b.n	8006c8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 faae 	bl	80071e4 <USBD_CtlSendStatus>
 8006c88:	e000      	b.n	8006c8c <USBD_GetDescriptor+0x2cc>
    return;
 8006c8a:	bf00      	nop
  }
}
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop

08006c94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	889b      	ldrh	r3, [r3, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d131      	bne.n	8006d0a <USBD_SetAddress+0x76>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	88db      	ldrh	r3, [r3, #6]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d12d      	bne.n	8006d0a <USBD_SetAddress+0x76>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb4:	d829      	bhi.n	8006d0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	885b      	ldrh	r3, [r3, #2]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d104      	bne.n	8006cd8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f9bc 	bl	800704e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd6:	e01d      	b.n	8006d14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	7bfa      	ldrb	r2, [r7, #15]
 8006cdc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fefb 	bl	8007ae0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fa7a 	bl	80071e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cfe:	e009      	b.n	8006d14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d08:	e004      	b.n	8006d14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f99e 	bl	800704e <USBD_CtlError>
  }
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	885b      	ldrh	r3, [r3, #2]
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	4b4e      	ldr	r3, [pc, #312]	; (8006e6c <USBD_SetConfig+0x150>)
 8006d32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d34:	4b4d      	ldr	r3, [pc, #308]	; (8006e6c <USBD_SetConfig+0x150>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d905      	bls.n	8006d48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f985 	bl	800704e <USBD_CtlError>
    return USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e08c      	b.n	8006e62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d002      	beq.n	8006d5a <USBD_SetConfig+0x3e>
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d029      	beq.n	8006dac <USBD_SetConfig+0x90>
 8006d58:	e075      	b.n	8006e46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d5a:	4b44      	ldr	r3, [pc, #272]	; (8006e6c <USBD_SetConfig+0x150>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d020      	beq.n	8006da4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d62:	4b42      	ldr	r3, [pc, #264]	; (8006e6c <USBD_SetConfig+0x150>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d6c:	4b3f      	ldr	r3, [pc, #252]	; (8006e6c <USBD_SetConfig+0x150>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fe ffe7 	bl	8005d46 <USBD_SetClassConfig>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d008      	beq.n	8006d94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f962 	bl	800704e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d92:	e065      	b.n	8006e60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fa25 	bl	80071e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006da2:	e05d      	b.n	8006e60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fa1d 	bl	80071e4 <USBD_CtlSendStatus>
      break;
 8006daa:	e059      	b.n	8006e60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006dac:	4b2f      	ldr	r3, [pc, #188]	; (8006e6c <USBD_SetConfig+0x150>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d112      	bne.n	8006dda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006dbc:	4b2b      	ldr	r3, [pc, #172]	; (8006e6c <USBD_SetConfig+0x150>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dc6:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <USBD_SetConfig+0x150>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fe ffd6 	bl	8005d7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa06 	bl	80071e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006dd8:	e042      	b.n	8006e60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006dda:	4b24      	ldr	r3, [pc, #144]	; (8006e6c <USBD_SetConfig+0x150>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d02a      	beq.n	8006e3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7fe ffc4 	bl	8005d7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006df6:	4b1d      	ldr	r3, [pc, #116]	; (8006e6c <USBD_SetConfig+0x150>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e00:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <USBD_SetConfig+0x150>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe ff9d 	bl	8005d46 <USBD_SetClassConfig>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00f      	beq.n	8006e36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f918 	bl	800704e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fe ffa9 	bl	8005d7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e34:	e014      	b.n	8006e60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f9d4 	bl	80071e4 <USBD_CtlSendStatus>
      break;
 8006e3c:	e010      	b.n	8006e60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f9d0 	bl	80071e4 <USBD_CtlSendStatus>
      break;
 8006e44:	e00c      	b.n	8006e60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f900 	bl	800704e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e4e:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <USBD_SetConfig+0x150>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fe ff92 	bl	8005d7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5e:	bf00      	nop
  }

  return ret;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	200001c8 	.word	0x200001c8

08006e70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	88db      	ldrh	r3, [r3, #6]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d004      	beq.n	8006e8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f8e2 	bl	800704e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e8a:	e023      	b.n	8006ed4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	dc02      	bgt.n	8006e9e <USBD_GetConfig+0x2e>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc03      	bgt.n	8006ea4 <USBD_GetConfig+0x34>
 8006e9c:	e015      	b.n	8006eca <USBD_GetConfig+0x5a>
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d00b      	beq.n	8006eba <USBD_GetConfig+0x4a>
 8006ea2:	e012      	b.n	8006eca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3308      	adds	r3, #8
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f93c 	bl	8007130 <USBD_CtlSendData>
        break;
 8006eb8:	e00c      	b.n	8006ed4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f934 	bl	8007130 <USBD_CtlSendData>
        break;
 8006ec8:	e004      	b.n	8006ed4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f8be 	bl	800704e <USBD_CtlError>
        break;
 8006ed2:	bf00      	nop
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d81e      	bhi.n	8006f32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	88db      	ldrh	r3, [r3, #6]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d004      	beq.n	8006f06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8a5 	bl	800704e <USBD_CtlError>
        break;
 8006f04:	e01a      	b.n	8006f3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f043 0202 	orr.w	r2, r3, #2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	330c      	adds	r3, #12
 8006f26:	2202      	movs	r2, #2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f900 	bl	8007130 <USBD_CtlSendData>
      break;
 8006f30:	e004      	b.n	8006f3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f88a 	bl	800704e <USBD_CtlError>
      break;
 8006f3a:	bf00      	nop
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	885b      	ldrh	r3, [r3, #2]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d107      	bne.n	8006f66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f940 	bl	80071e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f64:	e013      	b.n	8006f8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	885b      	ldrh	r3, [r3, #2]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d10b      	bne.n	8006f86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	889b      	ldrh	r3, [r3, #4]
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f930 	bl	80071e4 <USBD_CtlSendStatus>
}
 8006f84:	e003      	b.n	8006f8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f860 	bl	800704e <USBD_CtlError>
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d80b      	bhi.n	8006fc6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	885b      	ldrh	r3, [r3, #2]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d10c      	bne.n	8006fd0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f910 	bl	80071e4 <USBD_CtlSendStatus>
      }
      break;
 8006fc4:	e004      	b.n	8006fd0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f840 	bl	800704e <USBD_CtlError>
      break;
 8006fce:	e000      	b.n	8006fd2 <USBD_ClrFeature+0x3c>
      break;
 8006fd0:	bf00      	nop
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	781a      	ldrb	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	781a      	ldrb	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff fa41 	bl	800648c <SWAPBYTE>
 800700a:	4603      	mov	r3, r0
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3301      	adds	r3, #1
 8007016:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f7ff fa34 	bl	800648c <SWAPBYTE>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3301      	adds	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f7ff fa27 	bl	800648c <SWAPBYTE>
 800703e:	4603      	mov	r3, r0
 8007040:	461a      	mov	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	80da      	strh	r2, [r3, #6]
}
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fcd6 	bl	8007a0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007060:	2100      	movs	r1, #0
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fcd2 	bl	8007a0c <USBD_LL_StallEP>
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d036      	beq.n	80070f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800708a:	6938      	ldr	r0, [r7, #16]
 800708c:	f000 f836 	bl	80070fc <USBD_GetLen>
 8007090:	4603      	mov	r3, r0
 8007092:	3301      	adds	r3, #1
 8007094:	b29b      	uxth	r3, r3
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	4413      	add	r3, r2
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	3301      	adds	r3, #1
 80070ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	4413      	add	r3, r2
 80070b6:	2203      	movs	r2, #3
 80070b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	3301      	adds	r3, #1
 80070be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070c0:	e013      	b.n	80070ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	4413      	add	r3, r2
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	3301      	adds	r3, #1
 80070d2:	613b      	str	r3, [r7, #16]
    idx++;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	3301      	adds	r3, #1
 80070d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	4413      	add	r3, r2
 80070e0:	2200      	movs	r2, #0
 80070e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	3301      	adds	r3, #1
 80070e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e7      	bne.n	80070c2 <USBD_GetString+0x52>
 80070f2:	e000      	b.n	80070f6 <USBD_GetString+0x86>
    return;
 80070f4:	bf00      	nop
  }
}
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800710c:	e005      	b.n	800711a <USBD_GetLen+0x1e>
  {
    len++;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	3301      	adds	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	3301      	adds	r3, #1
 8007118:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f5      	bne.n	800710e <USBD_GetLen+0x12>
  }

  return len;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2202      	movs	r2, #2
 8007140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	2100      	movs	r1, #0
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fce1 	bl	8007b1e <USBD_LL_Transmit>

  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	2100      	movs	r1, #0
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fcd0 	bl	8007b1e <USBD_LL_Transmit>

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2203      	movs	r2, #3
 8007198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	2100      	movs	r1, #0
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fcd4 	bl	8007b60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	2100      	movs	r1, #0
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 fcc3 	bl	8007b60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2204      	movs	r2, #4
 80071f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071f4:	2300      	movs	r3, #0
 80071f6:	2200      	movs	r2, #0
 80071f8:	2100      	movs	r1, #0
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fc8f 	bl	8007b1e <USBD_LL_Transmit>

  return USBD_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2205      	movs	r2, #5
 8007216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800721a:	2300      	movs	r3, #0
 800721c:	2200      	movs	r2, #0
 800721e:	2100      	movs	r1, #0
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fc9d 	bl	8007b60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007234:	2200      	movs	r2, #0
 8007236:	4912      	ldr	r1, [pc, #72]	; (8007280 <MX_USB_DEVICE_Init+0x50>)
 8007238:	4812      	ldr	r0, [pc, #72]	; (8007284 <MX_USB_DEVICE_Init+0x54>)
 800723a:	f7fe fd07 	bl	8005c4c <USBD_Init>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007244:	f7f9 fa1a 	bl	800067c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007248:	490f      	ldr	r1, [pc, #60]	; (8007288 <MX_USB_DEVICE_Init+0x58>)
 800724a:	480e      	ldr	r0, [pc, #56]	; (8007284 <MX_USB_DEVICE_Init+0x54>)
 800724c:	f7fe fd2e 	bl	8005cac <USBD_RegisterClass>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007256:	f7f9 fa11 	bl	800067c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800725a:	490c      	ldr	r1, [pc, #48]	; (800728c <MX_USB_DEVICE_Init+0x5c>)
 800725c:	4809      	ldr	r0, [pc, #36]	; (8007284 <MX_USB_DEVICE_Init+0x54>)
 800725e:	f7fe fc1f 	bl	8005aa0 <USBD_CDC_RegisterInterface>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007268:	f7f9 fa08 	bl	800067c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800726c:	4805      	ldr	r0, [pc, #20]	; (8007284 <MX_USB_DEVICE_Init+0x54>)
 800726e:	f7fe fd53 	bl	8005d18 <USBD_Start>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007278:	f7f9 fa00 	bl	800067c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800727c:	bf00      	nop
 800727e:	bd80      	pop	{r7, pc}
 8007280:	200000ac 	.word	0x200000ac
 8007284:	200001cc 	.word	0x200001cc
 8007288:	20000018 	.word	0x20000018
 800728c:	20000098 	.word	0x20000098

08007290 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007294:	2200      	movs	r2, #0
 8007296:	4905      	ldr	r1, [pc, #20]	; (80072ac <CDC_Init_FS+0x1c>)
 8007298:	4805      	ldr	r0, [pc, #20]	; (80072b0 <CDC_Init_FS+0x20>)
 800729a:	f7fe fc1b 	bl	8005ad4 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800729e:	4905      	ldr	r1, [pc, #20]	; (80072b4 <CDC_Init_FS+0x24>)
 80072a0:	4803      	ldr	r0, [pc, #12]	; (80072b0 <CDC_Init_FS+0x20>)
 80072a2:	f7fe fc39 	bl	8005b18 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 80072a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	200008a8 	.word	0x200008a8
 80072b0:	200001cc 	.word	0x200001cc
 80072b4:	200004a8 	.word	0x200004a8

080072b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 80072bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072be:	4618      	mov	r0, r3
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	6039      	str	r1, [r7, #0]
 80072d2:	71fb      	strb	r3, [r7, #7]
 80072d4:	4613      	mov	r3, r2
 80072d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	2b23      	cmp	r3, #35	; 0x23
 80072dc:	d84a      	bhi.n	8007374 <CDC_Control_FS+0xac>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <CDC_Control_FS+0x1c>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007375 	.word	0x08007375
 80072e8:	08007375 	.word	0x08007375
 80072ec:	08007375 	.word	0x08007375
 80072f0:	08007375 	.word	0x08007375
 80072f4:	08007375 	.word	0x08007375
 80072f8:	08007375 	.word	0x08007375
 80072fc:	08007375 	.word	0x08007375
 8007300:	08007375 	.word	0x08007375
 8007304:	08007375 	.word	0x08007375
 8007308:	08007375 	.word	0x08007375
 800730c:	08007375 	.word	0x08007375
 8007310:	08007375 	.word	0x08007375
 8007314:	08007375 	.word	0x08007375
 8007318:	08007375 	.word	0x08007375
 800731c:	08007375 	.word	0x08007375
 8007320:	08007375 	.word	0x08007375
 8007324:	08007375 	.word	0x08007375
 8007328:	08007375 	.word	0x08007375
 800732c:	08007375 	.word	0x08007375
 8007330:	08007375 	.word	0x08007375
 8007334:	08007375 	.word	0x08007375
 8007338:	08007375 	.word	0x08007375
 800733c:	08007375 	.word	0x08007375
 8007340:	08007375 	.word	0x08007375
 8007344:	08007375 	.word	0x08007375
 8007348:	08007375 	.word	0x08007375
 800734c:	08007375 	.word	0x08007375
 8007350:	08007375 	.word	0x08007375
 8007354:	08007375 	.word	0x08007375
 8007358:	08007375 	.word	0x08007375
 800735c:	08007375 	.word	0x08007375
 8007360:	08007375 	.word	0x08007375
 8007364:	08007375 	.word	0x08007375
 8007368:	08007375 	.word	0x08007375
 800736c:	08007375 	.word	0x08007375
 8007370:	08007375 	.word	0x08007375
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8007374:	bf00      	nop
    }

    return (USBD_OK);
 8007376:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4805      	ldr	r0, [pc, #20]	; (80073a8 <CDC_Receive_FS+0x24>)
 8007392:	f7fe fbc1 	bl	8005b18 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007396:	4804      	ldr	r0, [pc, #16]	; (80073a8 <CDC_Receive_FS+0x24>)
 8007398:	f7fe fc22 	bl	8005be0 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800739c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200001cc 	.word	0x200001cc

080073ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80073bc:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <CDC_Transmit_FS+0x48>)
 80073be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073c2:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e00b      	b.n	80073ea <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80073d2:	887b      	ldrh	r3, [r7, #2]
 80073d4:	461a      	mov	r2, r3
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4806      	ldr	r0, [pc, #24]	; (80073f4 <CDC_Transmit_FS+0x48>)
 80073da:	f7fe fb7b 	bl	8005ad4 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80073de:	4805      	ldr	r0, [pc, #20]	; (80073f4 <CDC_Transmit_FS+0x48>)
 80073e0:	f7fe fbb8 	bl	8005b54 <USBD_CDC_TransmitPacket>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	200001cc 	.word	0x200001cc

080073f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800740a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800740e:	4618      	mov	r0, r3
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
	...

0800741c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2212      	movs	r2, #18
 800742c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800742e:	4b03      	ldr	r3, [pc, #12]	; (800743c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	200000c8 	.word	0x200000c8

08007440 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	6039      	str	r1, [r7, #0]
 800744a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2204      	movs	r2, #4
 8007450:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007452:	4b03      	ldr	r3, [pc, #12]	; (8007460 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	200000dc 	.word	0x200000dc

08007464 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4907      	ldr	r1, [pc, #28]	; (8007498 <USBD_FS_ProductStrDescriptor+0x34>)
 800747a:	4808      	ldr	r0, [pc, #32]	; (800749c <USBD_FS_ProductStrDescriptor+0x38>)
 800747c:	f7ff fdf8 	bl	8007070 <USBD_GetString>
 8007480:	e004      	b.n	800748c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	4904      	ldr	r1, [pc, #16]	; (8007498 <USBD_FS_ProductStrDescriptor+0x34>)
 8007486:	4805      	ldr	r0, [pc, #20]	; (800749c <USBD_FS_ProductStrDescriptor+0x38>)
 8007488:	f7ff fdf2 	bl	8007070 <USBD_GetString>
  }
  return USBD_StrDesc;
 800748c:	4b02      	ldr	r3, [pc, #8]	; (8007498 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000ca8 	.word	0x20000ca8
 800749c:	08007f28 	.word	0x08007f28

080074a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	6039      	str	r1, [r7, #0]
 80074aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	4904      	ldr	r1, [pc, #16]	; (80074c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80074b0:	4804      	ldr	r0, [pc, #16]	; (80074c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80074b2:	f7ff fddd 	bl	8007070 <USBD_GetString>
  return USBD_StrDesc;
 80074b6:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000ca8 	.word	0x20000ca8
 80074c4:	08007f40 	.word	0x08007f40

080074c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	6039      	str	r1, [r7, #0]
 80074d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	221a      	movs	r2, #26
 80074d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074da:	f000 f843 	bl	8007564 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074de:	4b02      	ldr	r3, [pc, #8]	; (80074e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	200000e0 	.word	0x200000e0

080074ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	6039      	str	r1, [r7, #0]
 80074f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d105      	bne.n	800750a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	4907      	ldr	r1, [pc, #28]	; (8007520 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007502:	4808      	ldr	r0, [pc, #32]	; (8007524 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007504:	f7ff fdb4 	bl	8007070 <USBD_GetString>
 8007508:	e004      	b.n	8007514 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	4904      	ldr	r1, [pc, #16]	; (8007520 <USBD_FS_ConfigStrDescriptor+0x34>)
 800750e:	4805      	ldr	r0, [pc, #20]	; (8007524 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007510:	f7ff fdae 	bl	8007070 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007514:	4b02      	ldr	r3, [pc, #8]	; (8007520 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000ca8 	.word	0x20000ca8
 8007524:	08007f54 	.word	0x08007f54

08007528 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	6039      	str	r1, [r7, #0]
 8007532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	4907      	ldr	r1, [pc, #28]	; (800755c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800753e:	4808      	ldr	r0, [pc, #32]	; (8007560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007540:	f7ff fd96 	bl	8007070 <USBD_GetString>
 8007544:	e004      	b.n	8007550 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	4904      	ldr	r1, [pc, #16]	; (800755c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800754a:	4805      	ldr	r0, [pc, #20]	; (8007560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800754c:	f7ff fd90 	bl	8007070 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007550:	4b02      	ldr	r3, [pc, #8]	; (800755c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000ca8 	.word	0x20000ca8
 8007560:	08007f60 	.word	0x08007f60

08007564 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800756a:	4b0f      	ldr	r3, [pc, #60]	; (80075a8 <Get_SerialNum+0x44>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007570:	4b0e      	ldr	r3, [pc, #56]	; (80075ac <Get_SerialNum+0x48>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007576:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <Get_SerialNum+0x4c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4413      	add	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d009      	beq.n	800759e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800758a:	2208      	movs	r2, #8
 800758c:	4909      	ldr	r1, [pc, #36]	; (80075b4 <Get_SerialNum+0x50>)
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f814 	bl	80075bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007594:	2204      	movs	r2, #4
 8007596:	4908      	ldr	r1, [pc, #32]	; (80075b8 <Get_SerialNum+0x54>)
 8007598:	68b8      	ldr	r0, [r7, #8]
 800759a:	f000 f80f 	bl	80075bc <IntToUnicode>
  }
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	1fff7a10 	.word	0x1fff7a10
 80075ac:	1fff7a14 	.word	0x1fff7a14
 80075b0:	1fff7a18 	.word	0x1fff7a18
 80075b4:	200000e2 	.word	0x200000e2
 80075b8:	200000f2 	.word	0x200000f2

080075bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075ce:	2300      	movs	r3, #0
 80075d0:	75fb      	strb	r3, [r7, #23]
 80075d2:	e027      	b.n	8007624 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	0f1b      	lsrs	r3, r3, #28
 80075d8:	2b09      	cmp	r3, #9
 80075da:	d80b      	bhi.n	80075f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	0f1b      	lsrs	r3, r3, #28
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4619      	mov	r1, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	440b      	add	r3, r1
 80075ec:	3230      	adds	r2, #48	; 0x30
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	e00a      	b.n	800760a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	0f1b      	lsrs	r3, r3, #28
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	4619      	mov	r1, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	440b      	add	r3, r1
 8007604:	3237      	adds	r2, #55	; 0x37
 8007606:	b2d2      	uxtb	r2, r2
 8007608:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	011b      	lsls	r3, r3, #4
 800760e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	3301      	adds	r3, #1
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	4413      	add	r3, r2
 800761a:	2200      	movs	r2, #0
 800761c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	3301      	adds	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
 8007624:	7dfa      	ldrb	r2, [r7, #23]
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	429a      	cmp	r2, r3
 800762a:	d3d3      	bcc.n	80075d4 <IntToUnicode+0x18>
  }
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08a      	sub	sp, #40	; 0x28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007644:	f107 0314 	add.w	r3, r7, #20
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	605a      	str	r2, [r3, #4]
 800764e:	609a      	str	r2, [r3, #8]
 8007650:	60da      	str	r2, [r3, #12]
 8007652:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800765c:	d13a      	bne.n	80076d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800765e:	2300      	movs	r3, #0
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <HAL_PCD_MspInit+0xa0>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <HAL_PCD_MspInit+0xa0>)
 8007668:	f043 0301 	orr.w	r3, r3, #1
 800766c:	6313      	str	r3, [r2, #48]	; 0x30
 800766e:	4b1b      	ldr	r3, [pc, #108]	; (80076dc <HAL_PCD_MspInit+0xa0>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	613b      	str	r3, [r7, #16]
 8007678:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800767a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800767e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007680:	2302      	movs	r3, #2
 8007682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007688:	2303      	movs	r3, #3
 800768a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800768c:	230a      	movs	r3, #10
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007690:	f107 0314 	add.w	r3, r7, #20
 8007694:	4619      	mov	r1, r3
 8007696:	4812      	ldr	r0, [pc, #72]	; (80076e0 <HAL_PCD_MspInit+0xa4>)
 8007698:	f7f9 fb80 	bl	8000d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800769c:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <HAL_PCD_MspInit+0xa0>)
 800769e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a0:	4a0e      	ldr	r2, [pc, #56]	; (80076dc <HAL_PCD_MspInit+0xa0>)
 80076a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a6:	6353      	str	r3, [r2, #52]	; 0x34
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	4b0b      	ldr	r3, [pc, #44]	; (80076dc <HAL_PCD_MspInit+0xa0>)
 80076ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b0:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <HAL_PCD_MspInit+0xa0>)
 80076b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076b6:	6453      	str	r3, [r2, #68]	; 0x44
 80076b8:	4b08      	ldr	r3, [pc, #32]	; (80076dc <HAL_PCD_MspInit+0xa0>)
 80076ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076c4:	2200      	movs	r2, #0
 80076c6:	2100      	movs	r1, #0
 80076c8:	2043      	movs	r0, #67	; 0x43
 80076ca:	f7f9 fb30 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076ce:	2043      	movs	r0, #67	; 0x43
 80076d0:	f7f9 fb49 	bl	8000d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076d4:	bf00      	nop
 80076d6:	3728      	adds	r7, #40	; 0x28
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	40023800 	.word	0x40023800
 80076e0:	40020000 	.word	0x40020000

080076e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f7fe fb59 	bl	8005db2 <USBD_LL_SetupStage>
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800771a:	78fa      	ldrb	r2, [r7, #3]
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	4619      	mov	r1, r3
 8007732:	f7fe fb93 	bl	8005e5c <USBD_LL_DataOutStage>
}
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	334c      	adds	r3, #76	; 0x4c
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	4619      	mov	r1, r3
 8007766:	f7fe fc2c 	bl	8005fc2 <USBD_LL_DataInStage>
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe fd60 	bl	8006246 <USBD_LL_SOF>
}
 8007786:	bf00      	nop
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007796:	2301      	movs	r3, #1
 8007798:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d001      	beq.n	80077a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80077a2:	f7f8 ff6b 	bl	800067c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077ac:	7bfa      	ldrb	r2, [r7, #15]
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe fd0a 	bl	80061ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fe fcb2 	bl	8006126 <USBD_LL_Reset>
}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe fd05 	bl	80061ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007800:	4b04      	ldr	r3, [pc, #16]	; (8007814 <HAL_PCD_SuspendCallback+0x48>)
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	4a03      	ldr	r2, [pc, #12]	; (8007814 <HAL_PCD_SuspendCallback+0x48>)
 8007806:	f043 0306 	orr.w	r3, r3, #6
 800780a:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	e000ed00 	.word	0xe000ed00

08007818 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fcf5 	bl	8006216 <USBD_LL_Resume>
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fd4d 	bl	80062ea <USBD_LL_IsoOUTIncomplete>
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800786a:	78fa      	ldrb	r2, [r7, #3]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fd09 	bl	8006286 <USBD_LL_IsoINIncomplete>
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe fd5f 	bl	800634e <USBD_LL_DevConnected>
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe fd5c 	bl	8006364 <USBD_LL_DevDisconnected>
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d13c      	bne.n	800793e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80078c4:	4a20      	ldr	r2, [pc, #128]	; (8007948 <USBD_LL_Init+0x94>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a1e      	ldr	r2, [pc, #120]	; (8007948 <USBD_LL_Init+0x94>)
 80078d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078d4:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <USBD_LL_Init+0x94>)
 80078d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078dc:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <USBD_LL_Init+0x94>)
 80078de:	2204      	movs	r2, #4
 80078e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078e2:	4b19      	ldr	r3, [pc, #100]	; (8007948 <USBD_LL_Init+0x94>)
 80078e4:	2202      	movs	r2, #2
 80078e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078e8:	4b17      	ldr	r3, [pc, #92]	; (8007948 <USBD_LL_Init+0x94>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078ee:	4b16      	ldr	r3, [pc, #88]	; (8007948 <USBD_LL_Init+0x94>)
 80078f0:	2202      	movs	r2, #2
 80078f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078f4:	4b14      	ldr	r3, [pc, #80]	; (8007948 <USBD_LL_Init+0x94>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078fa:	4b13      	ldr	r3, [pc, #76]	; (8007948 <USBD_LL_Init+0x94>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007900:	4b11      	ldr	r3, [pc, #68]	; (8007948 <USBD_LL_Init+0x94>)
 8007902:	2200      	movs	r2, #0
 8007904:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007906:	4b10      	ldr	r3, [pc, #64]	; (8007948 <USBD_LL_Init+0x94>)
 8007908:	2200      	movs	r2, #0
 800790a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800790c:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <USBD_LL_Init+0x94>)
 800790e:	2200      	movs	r2, #0
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007912:	480d      	ldr	r0, [pc, #52]	; (8007948 <USBD_LL_Init+0x94>)
 8007914:	f7fa f9b4 	bl	8001c80 <HAL_PCD_Init>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800791e:	f7f8 fead 	bl	800067c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	4808      	ldr	r0, [pc, #32]	; (8007948 <USBD_LL_Init+0x94>)
 8007926:	f7fb fc0c 	bl	8003142 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800792a:	2240      	movs	r2, #64	; 0x40
 800792c:	2100      	movs	r1, #0
 800792e:	4806      	ldr	r0, [pc, #24]	; (8007948 <USBD_LL_Init+0x94>)
 8007930:	f7fb fbc0 	bl	80030b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007934:	2280      	movs	r2, #128	; 0x80
 8007936:	2101      	movs	r1, #1
 8007938:	4803      	ldr	r0, [pc, #12]	; (8007948 <USBD_LL_Init+0x94>)
 800793a:	f7fb fbbb 	bl	80030b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	20000ea8 	.word	0x20000ea8

0800794c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007962:	4618      	mov	r0, r3
 8007964:	f7fa faa9 	bl	8001eba <HAL_PCD_Start>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	4618      	mov	r0, r3
 8007970:	f000 f942 	bl	8007bf8 <USBD_Get_USB_Status>
 8007974:	4603      	mov	r3, r0
 8007976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007978:	7bbb      	ldrb	r3, [r7, #14]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	4608      	mov	r0, r1
 800798c:	4611      	mov	r1, r2
 800798e:	461a      	mov	r2, r3
 8007990:	4603      	mov	r3, r0
 8007992:	70fb      	strb	r3, [r7, #3]
 8007994:	460b      	mov	r3, r1
 8007996:	70bb      	strb	r3, [r7, #2]
 8007998:	4613      	mov	r3, r2
 800799a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80079aa:	78bb      	ldrb	r3, [r7, #2]
 80079ac:	883a      	ldrh	r2, [r7, #0]
 80079ae:	78f9      	ldrb	r1, [r7, #3]
 80079b0:	f7fa ff7a 	bl	80028a8 <HAL_PCD_EP_Open>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f91c 	bl	8007bf8 <USBD_Get_USB_Status>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079e8:	78fa      	ldrb	r2, [r7, #3]
 80079ea:	4611      	mov	r1, r2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fa ffc3 	bl	8002978 <HAL_PCD_EP_Close>
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 f8fd 	bl	8007bf8 <USBD_Get_USB_Status>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a26:	78fa      	ldrb	r2, [r7, #3]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fb f89b 	bl	8002b66 <HAL_PCD_EP_SetStall>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 f8de 	bl	8007bf8 <USBD_Get_USB_Status>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a64:	78fa      	ldrb	r2, [r7, #3]
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fb f8e0 	bl	8002c2e <HAL_PCD_EP_ClrStall>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f8bf 	bl	8007bf8 <USBD_Get_USB_Status>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da0b      	bge.n	8007abc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	4613      	mov	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	440b      	add	r3, r1
 8007ab6:	333e      	adds	r3, #62	; 0x3e
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	e00b      	b.n	8007ad4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	4413      	add	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007ad2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fa fead 	bl	800285e <HAL_PCD_SetAddress>
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f874 	bl	8007bf8 <USBD_Get_USB_Status>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b086      	sub	sp, #24
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b3c:	7af9      	ldrb	r1, [r7, #11]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	f7fa ffc6 	bl	8002ad2 <HAL_PCD_EP_Transmit>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 f853 	bl	8007bf8 <USBD_Get_USB_Status>
 8007b52:	4603      	mov	r3, r0
 8007b54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b56:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b7e:	7af9      	ldrb	r1, [r7, #11]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	f7fa ff42 	bl	8002a0c <HAL_PCD_EP_Receive>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 f832 	bl	8007bf8 <USBD_Get_USB_Status>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b98:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fa ff72 	bl	8002aa2 <HAL_PCD_EP_GetRxCount>
 8007bbe:	4603      	mov	r3, r0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bd0:	4b03      	ldr	r3, [pc, #12]	; (8007be0 <USBD_static_malloc+0x18>)
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	200013b4 	.word	0x200013b4

08007be4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]

}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d817      	bhi.n	8007c3c <USBD_Get_USB_Status+0x44>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <USBD_Get_USB_Status+0x1c>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c25 	.word	0x08007c25
 8007c18:	08007c2b 	.word	0x08007c2b
 8007c1c:	08007c31 	.word	0x08007c31
 8007c20:	08007c37 	.word	0x08007c37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
    break;
 8007c28:	e00b      	b.n	8007c42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2e:	e008      	b.n	8007c42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c30:	2301      	movs	r3, #1
 8007c32:	73fb      	strb	r3, [r7, #15]
    break;
 8007c34:	e005      	b.n	8007c42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c36:	2303      	movs	r3, #3
 8007c38:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3a:	e002      	b.n	8007c42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c40:	bf00      	nop
  }
  return usb_status;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <malloc>:
 8007c50:	4b02      	ldr	r3, [pc, #8]	; (8007c5c <malloc+0xc>)
 8007c52:	4601      	mov	r1, r0
 8007c54:	6818      	ldr	r0, [r3, #0]
 8007c56:	f000 b82b 	b.w	8007cb0 <_malloc_r>
 8007c5a:	bf00      	nop
 8007c5c:	20000148 	.word	0x20000148

08007c60 <free>:
 8007c60:	4b02      	ldr	r3, [pc, #8]	; (8007c6c <free+0xc>)
 8007c62:	4601      	mov	r1, r0
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	f000 b8f3 	b.w	8007e50 <_free_r>
 8007c6a:	bf00      	nop
 8007c6c:	20000148 	.word	0x20000148

08007c70 <sbrk_aligned>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	4e0e      	ldr	r6, [pc, #56]	; (8007cac <sbrk_aligned+0x3c>)
 8007c74:	460c      	mov	r4, r1
 8007c76:	6831      	ldr	r1, [r6, #0]
 8007c78:	4605      	mov	r5, r0
 8007c7a:	b911      	cbnz	r1, 8007c82 <sbrk_aligned+0x12>
 8007c7c:	f000 f8ac 	bl	8007dd8 <_sbrk_r>
 8007c80:	6030      	str	r0, [r6, #0]
 8007c82:	4621      	mov	r1, r4
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 f8a7 	bl	8007dd8 <_sbrk_r>
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	d00a      	beq.n	8007ca4 <sbrk_aligned+0x34>
 8007c8e:	1cc4      	adds	r4, r0, #3
 8007c90:	f024 0403 	bic.w	r4, r4, #3
 8007c94:	42a0      	cmp	r0, r4
 8007c96:	d007      	beq.n	8007ca8 <sbrk_aligned+0x38>
 8007c98:	1a21      	subs	r1, r4, r0
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f000 f89c 	bl	8007dd8 <_sbrk_r>
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d101      	bne.n	8007ca8 <sbrk_aligned+0x38>
 8007ca4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007ca8:	4620      	mov	r0, r4
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	200015d8 	.word	0x200015d8

08007cb0 <_malloc_r>:
 8007cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb4:	1ccd      	adds	r5, r1, #3
 8007cb6:	f025 0503 	bic.w	r5, r5, #3
 8007cba:	3508      	adds	r5, #8
 8007cbc:	2d0c      	cmp	r5, #12
 8007cbe:	bf38      	it	cc
 8007cc0:	250c      	movcc	r5, #12
 8007cc2:	2d00      	cmp	r5, #0
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	db01      	blt.n	8007ccc <_malloc_r+0x1c>
 8007cc8:	42a9      	cmp	r1, r5
 8007cca:	d905      	bls.n	8007cd8 <_malloc_r+0x28>
 8007ccc:	230c      	movs	r3, #12
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	2600      	movs	r6, #0
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007dac <_malloc_r+0xfc>
 8007cdc:	f000 f868 	bl	8007db0 <__malloc_lock>
 8007ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ce4:	461c      	mov	r4, r3
 8007ce6:	bb5c      	cbnz	r4, 8007d40 <_malloc_r+0x90>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4638      	mov	r0, r7
 8007cec:	f7ff ffc0 	bl	8007c70 <sbrk_aligned>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	d155      	bne.n	8007da2 <_malloc_r+0xf2>
 8007cf6:	f8d8 4000 	ldr.w	r4, [r8]
 8007cfa:	4626      	mov	r6, r4
 8007cfc:	2e00      	cmp	r6, #0
 8007cfe:	d145      	bne.n	8007d8c <_malloc_r+0xdc>
 8007d00:	2c00      	cmp	r4, #0
 8007d02:	d048      	beq.n	8007d96 <_malloc_r+0xe6>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	4631      	mov	r1, r6
 8007d08:	4638      	mov	r0, r7
 8007d0a:	eb04 0903 	add.w	r9, r4, r3
 8007d0e:	f000 f863 	bl	8007dd8 <_sbrk_r>
 8007d12:	4581      	cmp	r9, r0
 8007d14:	d13f      	bne.n	8007d96 <_malloc_r+0xe6>
 8007d16:	6821      	ldr	r1, [r4, #0]
 8007d18:	1a6d      	subs	r5, r5, r1
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	f7ff ffa7 	bl	8007c70 <sbrk_aligned>
 8007d22:	3001      	adds	r0, #1
 8007d24:	d037      	beq.n	8007d96 <_malloc_r+0xe6>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	442b      	add	r3, r5
 8007d2a:	6023      	str	r3, [r4, #0]
 8007d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d038      	beq.n	8007da6 <_malloc_r+0xf6>
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	42a2      	cmp	r2, r4
 8007d38:	d12b      	bne.n	8007d92 <_malloc_r+0xe2>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	605a      	str	r2, [r3, #4]
 8007d3e:	e00f      	b.n	8007d60 <_malloc_r+0xb0>
 8007d40:	6822      	ldr	r2, [r4, #0]
 8007d42:	1b52      	subs	r2, r2, r5
 8007d44:	d41f      	bmi.n	8007d86 <_malloc_r+0xd6>
 8007d46:	2a0b      	cmp	r2, #11
 8007d48:	d917      	bls.n	8007d7a <_malloc_r+0xca>
 8007d4a:	1961      	adds	r1, r4, r5
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	6025      	str	r5, [r4, #0]
 8007d50:	bf18      	it	ne
 8007d52:	6059      	strne	r1, [r3, #4]
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	bf08      	it	eq
 8007d58:	f8c8 1000 	streq.w	r1, [r8]
 8007d5c:	5162      	str	r2, [r4, r5]
 8007d5e:	604b      	str	r3, [r1, #4]
 8007d60:	4638      	mov	r0, r7
 8007d62:	f104 060b 	add.w	r6, r4, #11
 8007d66:	f000 f829 	bl	8007dbc <__malloc_unlock>
 8007d6a:	f026 0607 	bic.w	r6, r6, #7
 8007d6e:	1d23      	adds	r3, r4, #4
 8007d70:	1af2      	subs	r2, r6, r3
 8007d72:	d0ae      	beq.n	8007cd2 <_malloc_r+0x22>
 8007d74:	1b9b      	subs	r3, r3, r6
 8007d76:	50a3      	str	r3, [r4, r2]
 8007d78:	e7ab      	b.n	8007cd2 <_malloc_r+0x22>
 8007d7a:	42a3      	cmp	r3, r4
 8007d7c:	6862      	ldr	r2, [r4, #4]
 8007d7e:	d1dd      	bne.n	8007d3c <_malloc_r+0x8c>
 8007d80:	f8c8 2000 	str.w	r2, [r8]
 8007d84:	e7ec      	b.n	8007d60 <_malloc_r+0xb0>
 8007d86:	4623      	mov	r3, r4
 8007d88:	6864      	ldr	r4, [r4, #4]
 8007d8a:	e7ac      	b.n	8007ce6 <_malloc_r+0x36>
 8007d8c:	4634      	mov	r4, r6
 8007d8e:	6876      	ldr	r6, [r6, #4]
 8007d90:	e7b4      	b.n	8007cfc <_malloc_r+0x4c>
 8007d92:	4613      	mov	r3, r2
 8007d94:	e7cc      	b.n	8007d30 <_malloc_r+0x80>
 8007d96:	230c      	movs	r3, #12
 8007d98:	603b      	str	r3, [r7, #0]
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	f000 f80e 	bl	8007dbc <__malloc_unlock>
 8007da0:	e797      	b.n	8007cd2 <_malloc_r+0x22>
 8007da2:	6025      	str	r5, [r4, #0]
 8007da4:	e7dc      	b.n	8007d60 <_malloc_r+0xb0>
 8007da6:	605b      	str	r3, [r3, #4]
 8007da8:	deff      	udf	#255	; 0xff
 8007daa:	bf00      	nop
 8007dac:	200015d4 	.word	0x200015d4

08007db0 <__malloc_lock>:
 8007db0:	4801      	ldr	r0, [pc, #4]	; (8007db8 <__malloc_lock+0x8>)
 8007db2:	f000 b84b 	b.w	8007e4c <__retarget_lock_acquire_recursive>
 8007db6:	bf00      	nop
 8007db8:	20001718 	.word	0x20001718

08007dbc <__malloc_unlock>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	; (8007dc4 <__malloc_unlock+0x8>)
 8007dbe:	f000 b846 	b.w	8007e4e <__retarget_lock_release_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	20001718 	.word	0x20001718

08007dc8 <memset>:
 8007dc8:	4402      	add	r2, r0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d100      	bne.n	8007dd2 <memset+0xa>
 8007dd0:	4770      	bx	lr
 8007dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd6:	e7f9      	b.n	8007dcc <memset+0x4>

08007dd8 <_sbrk_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4d06      	ldr	r5, [pc, #24]	; (8007df4 <_sbrk_r+0x1c>)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4604      	mov	r4, r0
 8007de0:	4608      	mov	r0, r1
 8007de2:	602b      	str	r3, [r5, #0]
 8007de4:	f7f8 fcf6 	bl	80007d4 <_sbrk>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_sbrk_r+0x1a>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_sbrk_r+0x1a>
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	20001714 	.word	0x20001714

08007df8 <__errno>:
 8007df8:	4b01      	ldr	r3, [pc, #4]	; (8007e00 <__errno+0x8>)
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	20000148 	.word	0x20000148

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4d0d      	ldr	r5, [pc, #52]	; (8007e3c <__libc_init_array+0x38>)
 8007e08:	4c0d      	ldr	r4, [pc, #52]	; (8007e40 <__libc_init_array+0x3c>)
 8007e0a:	1b64      	subs	r4, r4, r5
 8007e0c:	10a4      	asrs	r4, r4, #2
 8007e0e:	2600      	movs	r6, #0
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	4d0b      	ldr	r5, [pc, #44]	; (8007e44 <__libc_init_array+0x40>)
 8007e16:	4c0c      	ldr	r4, [pc, #48]	; (8007e48 <__libc_init_array+0x44>)
 8007e18:	f000 f866 	bl	8007ee8 <_init>
 8007e1c:	1b64      	subs	r4, r4, r5
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	2600      	movs	r6, #0
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2c:	4798      	blx	r3
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e36:	4798      	blx	r3
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	08007f90 	.word	0x08007f90
 8007e40:	08007f90 	.word	0x08007f90
 8007e44:	08007f90 	.word	0x08007f90
 8007e48:	08007f94 	.word	0x08007f94

08007e4c <__retarget_lock_acquire_recursive>:
 8007e4c:	4770      	bx	lr

08007e4e <__retarget_lock_release_recursive>:
 8007e4e:	4770      	bx	lr

08007e50 <_free_r>:
 8007e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e52:	2900      	cmp	r1, #0
 8007e54:	d044      	beq.n	8007ee0 <_free_r+0x90>
 8007e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5a:	9001      	str	r0, [sp, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e62:	bfb8      	it	lt
 8007e64:	18e4      	addlt	r4, r4, r3
 8007e66:	f7ff ffa3 	bl	8007db0 <__malloc_lock>
 8007e6a:	4a1e      	ldr	r2, [pc, #120]	; (8007ee4 <_free_r+0x94>)
 8007e6c:	9801      	ldr	r0, [sp, #4]
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	b933      	cbnz	r3, 8007e80 <_free_r+0x30>
 8007e72:	6063      	str	r3, [r4, #4]
 8007e74:	6014      	str	r4, [r2, #0]
 8007e76:	b003      	add	sp, #12
 8007e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e7c:	f7ff bf9e 	b.w	8007dbc <__malloc_unlock>
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	d908      	bls.n	8007e96 <_free_r+0x46>
 8007e84:	6825      	ldr	r5, [r4, #0]
 8007e86:	1961      	adds	r1, r4, r5
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	bf01      	itttt	eq
 8007e8c:	6819      	ldreq	r1, [r3, #0]
 8007e8e:	685b      	ldreq	r3, [r3, #4]
 8007e90:	1949      	addeq	r1, r1, r5
 8007e92:	6021      	streq	r1, [r4, #0]
 8007e94:	e7ed      	b.n	8007e72 <_free_r+0x22>
 8007e96:	461a      	mov	r2, r3
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	b10b      	cbz	r3, 8007ea0 <_free_r+0x50>
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	d9fa      	bls.n	8007e96 <_free_r+0x46>
 8007ea0:	6811      	ldr	r1, [r2, #0]
 8007ea2:	1855      	adds	r5, r2, r1
 8007ea4:	42a5      	cmp	r5, r4
 8007ea6:	d10b      	bne.n	8007ec0 <_free_r+0x70>
 8007ea8:	6824      	ldr	r4, [r4, #0]
 8007eaa:	4421      	add	r1, r4
 8007eac:	1854      	adds	r4, r2, r1
 8007eae:	42a3      	cmp	r3, r4
 8007eb0:	6011      	str	r1, [r2, #0]
 8007eb2:	d1e0      	bne.n	8007e76 <_free_r+0x26>
 8007eb4:	681c      	ldr	r4, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	6053      	str	r3, [r2, #4]
 8007eba:	440c      	add	r4, r1
 8007ebc:	6014      	str	r4, [r2, #0]
 8007ebe:	e7da      	b.n	8007e76 <_free_r+0x26>
 8007ec0:	d902      	bls.n	8007ec8 <_free_r+0x78>
 8007ec2:	230c      	movs	r3, #12
 8007ec4:	6003      	str	r3, [r0, #0]
 8007ec6:	e7d6      	b.n	8007e76 <_free_r+0x26>
 8007ec8:	6825      	ldr	r5, [r4, #0]
 8007eca:	1961      	adds	r1, r4, r5
 8007ecc:	428b      	cmp	r3, r1
 8007ece:	bf04      	itt	eq
 8007ed0:	6819      	ldreq	r1, [r3, #0]
 8007ed2:	685b      	ldreq	r3, [r3, #4]
 8007ed4:	6063      	str	r3, [r4, #4]
 8007ed6:	bf04      	itt	eq
 8007ed8:	1949      	addeq	r1, r1, r5
 8007eda:	6021      	streq	r1, [r4, #0]
 8007edc:	6054      	str	r4, [r2, #4]
 8007ede:	e7ca      	b.n	8007e76 <_free_r+0x26>
 8007ee0:	b003      	add	sp, #12
 8007ee2:	bd30      	pop	{r4, r5, pc}
 8007ee4:	200015d4 	.word	0x200015d4

08007ee8 <_init>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	bf00      	nop
 8007eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eee:	bc08      	pop	{r3}
 8007ef0:	469e      	mov	lr, r3
 8007ef2:	4770      	bx	lr

08007ef4 <_fini>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr
