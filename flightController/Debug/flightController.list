
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08011fc0  08011fc0  00021fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125c0  080125c0  000302e8  2**0
                  CONTENTS
  4 .ARM          00000008  080125c0  080125c0  000225c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125c8  080125c8  000302e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125c8  080125c8  000225c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125cc  080125cc  000225cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  080125d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020bc  200002e8  080128b8  000302e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023a4  080128b8  000323a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026e50  00000000  00000000  0003035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061ac  00000000  00000000  000571ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002128  00000000  00000000  0005d358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001989  00000000  00000000  0005f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020eee  00000000  00000000  00060e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cf91  00000000  00000000  00081cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad580  00000000  00000000  000aec88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009ac4  00000000  00000000  0015c208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00165ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011fa4 	.word	0x08011fa4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	08011fa4 	.word	0x08011fa4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 2UL), &FlightController_StartUp_Handle);
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	4927      	ldr	r1, [pc, #156]	; (8001048 <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000faa:	4828      	ldr	r0, [pc, #160]	; (800104c <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000fac:	f00b fd81 	bl	800cab2 <xTaskCreate>
 8000fb0:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00a      	beq.n	8000fce <FreeRTOS_CreateStartUpTasks+0x3a>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI(void) {
    uint32_t ulNewBASEPRI;

    __asm volatile("	mov %0, %1												\n"
 8000fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbc:	f383 8811 	msr	BASEPRI, r3
 8000fc0:	f3bf 8f6f 	isb	sy
 8000fc4:	f3bf 8f4f 	dsb	sy
 8000fc8:	60bb      	str	r3, [r7, #8]
                   "	isb														\n"
                   "	dsb														\n"
                   : "=r"(ulNewBASEPRI)
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");
}
 8000fca:	bf00      	nop
 8000fcc:	e7fe      	b.n	8000fcc <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d104      	bne.n	8000fe0 <FreeRTOS_CreateStartUpTasks+0x4c>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <FreeRTOS_CreateStartUpTasks+0xb0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00b fea0 	bl	800cd20 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_OnOffButton_Handle);
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fee:	4919      	ldr	r1, [pc, #100]	; (8001054 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000ff2:	f00b fd5e 	bl	800cab2 <xTaskCreate>
 8000ff6:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00a      	beq.n	8001014 <FreeRTOS_CreateStartUpTasks+0x80>
    __asm volatile("	mov %0, %1												\n"
 8000ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	607b      	str	r3, [r7, #4]
}
 8001010:	bf00      	nop
 8001012:	e7fe      	b.n	8001012 <FreeRTOS_CreateStartUpTasks+0x7e>

    if (FlightController_OnOffButton_Handle == NULL) {
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <FreeRTOS_CreateStartUpTasks+0x92>
        vTaskDelete(FlightController_OnOffButton_Handle);
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <FreeRTOS_CreateStartUpTasks+0xbc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f00b fe7d 	bl	800cd20 <vTaskDelete>
    }

    /* Timer: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <FreeRTOS_CreateStartUpTasks+0xc8>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	2201      	movs	r2, #1
 800102e:	2164      	movs	r1, #100	; 0x64
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001032:	f00c fd5d 	bl	800daf0 <xTimerCreate>
 8001036:	4603      	mov	r3, r0
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000304 	.word	0x20000304
 8001048:	08011fc0 	.word	0x08011fc0
 800104c:	08001275 	.word	0x08001275
 8001050:	2000031c 	.word	0x2000031c
 8001054:	08011fdc 	.word	0x08011fdc
 8001058:	080014d1 	.word	0x080014d1
 800105c:	08001605 	.word	0x08001605
 8001060:	08011ffc 	.word	0x08011ffc
 8001064:	20000324 	.word	0x20000324

08001068 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_HeartbeatLight_Handle);
 800106e:	4b6b      	ldr	r3, [pc, #428]	; (800121c <FreeRTOS_CreateTasks+0x1b4>)
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2303      	movs	r3, #3
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	4968      	ldr	r1, [pc, #416]	; (8001220 <FreeRTOS_CreateTasks+0x1b8>)
 800107e:	4869      	ldr	r0, [pc, #420]	; (8001224 <FreeRTOS_CreateTasks+0x1bc>)
 8001080:	f00b fd17 	bl	800cab2 <xTaskCreate>
 8001084:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00a      	beq.n	80010a2 <FreeRTOS_CreateTasks+0x3a>
    __asm volatile("	mov %0, %1												\n"
 800108c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001090:	f383 8811 	msr	BASEPRI, r3
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	61bb      	str	r3, [r7, #24]
}
 800109e:	bf00      	nop
 80010a0:	e7fe      	b.n	80010a0 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 80010a2:	4b5e      	ldr	r3, [pc, #376]	; (800121c <FreeRTOS_CreateTasks+0x1b4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <FreeRTOS_CreateTasks+0x4c>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <FreeRTOS_CreateTasks+0x1b4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00b fe36 	bl	800cd20 <vTaskDelete>
    }

    /* Task 2: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_FlightLights_Handle);
 80010b4:	4b5c      	ldr	r3, [pc, #368]	; (8001228 <FreeRTOS_CreateTasks+0x1c0>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c2:	495a      	ldr	r1, [pc, #360]	; (800122c <FreeRTOS_CreateTasks+0x1c4>)
 80010c4:	485a      	ldr	r0, [pc, #360]	; (8001230 <FreeRTOS_CreateTasks+0x1c8>)
 80010c6:	f00b fcf4 	bl	800cab2 <xTaskCreate>
 80010ca:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d00a      	beq.n	80010e8 <FreeRTOS_CreateTasks+0x80>
    __asm volatile("	mov %0, %1												\n"
 80010d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	617b      	str	r3, [r7, #20]
}
 80010e4:	bf00      	nop
 80010e6:	e7fe      	b.n	80010e6 <FreeRTOS_CreateTasks+0x7e>

    if (FlightController_FlightLights_Handle == NULL) {
 80010e8:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <FreeRTOS_CreateTasks+0x1c0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <FreeRTOS_CreateTasks+0x92>
        vTaskDelete(FlightController_FlightLights_Handle);
 80010f0:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <FreeRTOS_CreateTasks+0x1c0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00b fe13 	bl	800cd20 <vTaskDelete>
    }

    /* Task 3: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_FSA8S_Handle);
 80010fa:	4b4e      	ldr	r3, [pc, #312]	; (8001234 <FreeRTOS_CreateTasks+0x1cc>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2303      	movs	r3, #3
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001108:	494b      	ldr	r1, [pc, #300]	; (8001238 <FreeRTOS_CreateTasks+0x1d0>)
 800110a:	484c      	ldr	r0, [pc, #304]	; (800123c <FreeRTOS_CreateTasks+0x1d4>)
 800110c:	f00b fcd1 	bl	800cab2 <xTaskCreate>
 8001110:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d00a      	beq.n	800112e <FreeRTOS_CreateTasks+0xc6>
    __asm volatile("	mov %0, %1												\n"
 8001118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	613b      	str	r3, [r7, #16]
}
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <FreeRTOS_CreateTasks+0xc4>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 800112e:	4b41      	ldr	r3, [pc, #260]	; (8001234 <FreeRTOS_CreateTasks+0x1cc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <FreeRTOS_CreateTasks+0xd8>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 8001136:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <FreeRTOS_CreateTasks+0x1cc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f00b fdf0 	bl	800cd20 <vTaskDelete>
    }

    /* Task 4: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (6 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Read_GY87_Handle);
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <FreeRTOS_CreateTasks+0x1d8>)
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	2303      	movs	r3, #3
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800114e:	493d      	ldr	r1, [pc, #244]	; (8001244 <FreeRTOS_CreateTasks+0x1dc>)
 8001150:	483d      	ldr	r0, [pc, #244]	; (8001248 <FreeRTOS_CreateTasks+0x1e0>)
 8001152:	f00b fcae 	bl	800cab2 <xTaskCreate>
 8001156:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d00a      	beq.n	8001174 <FreeRTOS_CreateTasks+0x10c>
    __asm volatile("	mov %0, %1												\n"
 800115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001162:	f383 8811 	msr	BASEPRI, r3
 8001166:	f3bf 8f6f 	isb	sy
 800116a:	f3bf 8f4f 	dsb	sy
 800116e:	60fb      	str	r3, [r7, #12]
}
 8001170:	bf00      	nop
 8001172:	e7fe      	b.n	8001172 <FreeRTOS_CreateTasks+0x10a>

    if (FlightController_Read_GY87_Handle == NULL) {
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <FreeRTOS_CreateTasks+0x1d8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x11e>
        vTaskDelete(FlightController_Read_GY87_Handle);
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <FreeRTOS_CreateTasks+0x1d8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00b fdcd 	bl	800cd20 <vTaskDelete>
    }

    /* Task 5: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 3UL), &FlightController_Write_ESCs_Handle);
 8001186:	4b31      	ldr	r3, [pc, #196]	; (800124c <FreeRTOS_CreateTasks+0x1e4>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2303      	movs	r3, #3
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001194:	492e      	ldr	r1, [pc, #184]	; (8001250 <FreeRTOS_CreateTasks+0x1e8>)
 8001196:	482f      	ldr	r0, [pc, #188]	; (8001254 <FreeRTOS_CreateTasks+0x1ec>)
 8001198:	f00b fc8b 	bl	800cab2 <xTaskCreate>
 800119c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00a      	beq.n	80011ba <FreeRTOS_CreateTasks+0x152>
    __asm volatile("	mov %0, %1												\n"
 80011a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	60bb      	str	r3, [r7, #8]
}
 80011b6:	bf00      	nop
 80011b8:	e7fe      	b.n	80011b8 <FreeRTOS_CreateTasks+0x150>

    if (FlightController_Write_ESCs_Handle == NULL) {
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <FreeRTOS_CreateTasks+0x1e4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <FreeRTOS_CreateTasks+0x164>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <FreeRTOS_CreateTasks+0x1e4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00b fdaa 	bl	800cd20 <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + 1UL), &FlightController_BatteryLevel_Handle);
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <FreeRTOS_CreateTasks+0x1f0>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	4920      	ldr	r1, [pc, #128]	; (800125c <FreeRTOS_CreateTasks+0x1f4>)
 80011dc:	4820      	ldr	r0, [pc, #128]	; (8001260 <FreeRTOS_CreateTasks+0x1f8>)
 80011de:	f00b fc68 	bl	800cab2 <xTaskCreate>
 80011e2:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d00a      	beq.n	8001200 <FreeRTOS_CreateTasks+0x198>
    __asm volatile("	mov %0, %1												\n"
 80011ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ee:	f383 8811 	msr	BASEPRI, r3
 80011f2:	f3bf 8f6f 	isb	sy
 80011f6:	f3bf 8f4f 	dsb	sy
 80011fa:	607b      	str	r3, [r7, #4]
}
 80011fc:	bf00      	nop
 80011fe:	e7fe      	b.n	80011fe <FreeRTOS_CreateTasks+0x196>

    if (FlightController_BatteryLevel_Handle == NULL) {
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <FreeRTOS_CreateTasks+0x1f0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <FreeRTOS_CreateTasks+0x1aa>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <FreeRTOS_CreateTasks+0x1f0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f00b fd87 	bl	800cd20 <vTaskDelete>
    }
}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000308 	.word	0x20000308
 8001220:	0801200c 	.word	0x0801200c
 8001224:	080012f9 	.word	0x080012f9
 8001228:	20000314 	.word	0x20000314
 800122c:	0801202c 	.word	0x0801202c
 8001230:	08001335 	.word	0x08001335
 8001234:	2000030c 	.word	0x2000030c
 8001238:	0801204c 	.word	0x0801204c
 800123c:	08001349 	.word	0x08001349
 8001240:	20000310 	.word	0x20000310
 8001244:	08012068 	.word	0x08012068
 8001248:	080013a9 	.word	0x080013a9
 800124c:	20000318 	.word	0x20000318
 8001250:	08012084 	.word	0x08012084
 8001254:	08001485 	.word	0x08001485
 8001258:	20000320 	.word	0x20000320
 800125c:	080120a0 	.word	0x080120a0
 8001260:	08001531 	.word	0x08001531

08001264 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800127c:	2314      	movs	r3, #20
 800127e:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED on */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001286:	4814      	ldr	r0, [pc, #80]	; (80012d8 <FlightController_StartUp+0x64>)
 8001288:	f003 f936 	bl	80044f8 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_running) {
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <FlightController_StartUp+0x68>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01d      	beq.n	80012d0 <FlightController_StartUp+0x5c>

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001294:	f7ff fee8 	bl	8001068 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 8001298:	f7ff ffe4 	bl	8001264 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 800129c:	4810      	ldr	r0, [pc, #64]	; (80012e0 <FlightController_StartUp+0x6c>)
 800129e:	f001 f9eb 	bl	8002678 <FSA8S_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <FlightController_StartUp+0x70>)
 80012a6:	6013      	str	r3, [r2, #0]
            hgy87 = GY87_Init(&hi2c1);
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <FlightController_StartUp+0x74>)
 80012aa:	f001 fdad 	bl	8002e08 <GY87_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <FlightController_StartUp+0x78>)
 80012b2:	6013      	str	r3, [r2, #0]
            //hesc = ESC_Init(&htim3);
            PWM_Init(hesc, hesc->channel4);
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <FlightController_StartUp+0x7c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <FlightController_StartUp+0x7c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	4619      	mov	r1, r3
 80012c0:	4610      	mov	r0, r2
 80012c2:	f000 ff93 	bl	80021ec <PWM_Init>

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <FlightController_StartUp+0x80>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00b fd28 	bl	800cd20 <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f00b fdb5 	bl	800ce40 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80012d6:	e7d3      	b.n	8001280 <FlightController_StartUp+0xc>
 80012d8:	40020800 	.word	0x40020800
 80012dc:	20000329 	.word	0x20000329
 80012e0:	20000b10 	.word	0x20000b10
 80012e4:	2000032c 	.word	0x2000032c
 80012e8:	20000a74 	.word	0x20000a74
 80012ec:	20000330 	.word	0x20000330
 80012f0:	20000334 	.word	0x20000334
 80012f4:	20000304 	.word	0x20000304

080012f8 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 8001304:	23fa      	movs	r3, #250	; 0xfa
 8001306:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	461a      	mov	r2, r3
 800130c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <FlightController_HeartbeatLight+0x38>)
 8001312:	f003 f8f1 	bl	80044f8 <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <FlightController_HeartbeatLight+0x2a>

            ledState = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <FlightController_HeartbeatLight+0x2e>
        } else {

            ledState = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001326:	68b8      	ldr	r0, [r7, #8]
 8001328:	f00b fd8a 	bl	800ce40 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 800132c:	e7ec      	b.n	8001308 <FlightController_HeartbeatLight+0x10>
 800132e:	bf00      	nop
 8001330:	40020800 	.word	0x40020800

08001334 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800133c:	2314      	movs	r3, #20
 800133e:	60fb      	str	r3, [r7, #12]
        //    	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
        //    	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
        //    	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f00b fd7d 	bl	800ce40 <vTaskDelay>
 8001346:	e7fb      	b.n	8001340 <FlightController_FlightLights+0xc>

08001348 <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

    FSA8S_CHANNEL_t channels[FSA8S_CHANNELS] = {CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7, CHANNEL_8, CHANNEL_9, CHANNEL_10};
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <FlightController_Read_FSA8S+0x54>)
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	ca07      	ldmia	r2, {r0, r1, r2}
 8001358:	c303      	stmia	r3!, {r0, r1}
 800135a:	801a      	strh	r2, [r3, #0]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FSA8S
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800135c:	2314      	movs	r3, #20
 800135e:	61bb      	str	r3, [r7, #24]
#endif

    while (1) {

        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001360:	2300      	movs	r3, #0
 8001362:	77fb      	strb	r3, [r7, #31]
 8001364:	e013      	b.n	800138e <FlightController_Read_FSA8S+0x46>
            /* Read channels */
            FSA8S_channelValues[i] = FSA8S_ReadChannel(rc_controller, channels[i]);
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <FlightController_Read_FSA8S+0x58>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	3320      	adds	r3, #32
 800136e:	443b      	add	r3, r7
 8001370:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001374:	7ffc      	ldrb	r4, [r7, #31]
 8001376:	4619      	mov	r1, r3
 8001378:	4610      	mov	r0, r2
 800137a:	f001 f9d7 	bl	800272c <FSA8S_ReadChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <FlightController_Read_FSA8S+0x5c>)
 8001384:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	3301      	adds	r3, #1
 800138c:	77fb      	strb	r3, [r7, #31]
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d9e8      	bls.n	8001366 <FlightController_Read_FSA8S+0x1e>
            LOG(loggingStr, LOG_INFORMATION);
#endif
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001394:	69b8      	ldr	r0, [r7, #24]
 8001396:	f00b fd53 	bl	800ce40 <vTaskDelay>
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 800139a:	e7e1      	b.n	8001360 <FlightController_Read_FSA8S+0x18>
 800139c:	080120c0 	.word	0x080120c0
 80013a0:	2000032c 	.word	0x2000032c
 80013a4:	20000338 	.word	0x20000338

080013a8 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#if defined MAIN_APP_USE_LOGGING_GY87_GYROSCOPE || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER || defined MAIN_APP_USE_LOGGING_GY87_TEMPERATURE || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER_HEADING || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_PRESSURE || MAIN_APP_USE_LOGGING_GY87_BAROMETER_ALTITUDE
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80013b0:	2314      	movs	r3, #20
 80013b2:	60fb      	str	r3, [r7, #12]
#endif

    /* Allocate dynamic memory for the MPU6050 gyroscope values */
    GY87_gyroscopeValues = pvPortMalloc(sizeof(GY87_gyroscopeValues));
 80013b4:	2004      	movs	r0, #4
 80013b6:	f00d f98f 	bl	800e6d8 <pvPortMalloc>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a2b      	ldr	r2, [pc, #172]	; (800146c <FlightController_Read_GY87+0xc4>)
 80013be:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_gyroscopeValues) {
 80013c0:	4b2a      	ldr	r3, [pc, #168]	; (800146c <FlightController_Read_GY87+0xc4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d104      	bne.n	80013d2 <FlightController_Read_GY87+0x2a>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_gyroscopeValues);
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <FlightController_Read_GY87+0xc4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00d f995 	bl	800e6fc <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 accelerometer values */
    GY87_accelerometerValues = pvPortMalloc(sizeof(GY87_accelerometerValues));
 80013d2:	2004      	movs	r0, #4
 80013d4:	f00d f980 	bl	800e6d8 <pvPortMalloc>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a25      	ldr	r2, [pc, #148]	; (8001470 <FlightController_Read_GY87+0xc8>)
 80013dc:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_accelerometerValues) {
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <FlightController_Read_GY87+0xc8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d104      	bne.n	80013f0 <FlightController_Read_GY87+0x48>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_accelerometerValues);
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <FlightController_Read_GY87+0xc8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00d f986 	bl	800e6fc <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 magnetometer values */
    GY87_magnetometerValues = pvPortMalloc(sizeof(GY87_magnetometerValues));
 80013f0:	2004      	movs	r0, #4
 80013f2:	f00d f971 	bl	800e6d8 <pvPortMalloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <FlightController_Read_GY87+0xcc>)
 80013fa:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_magnetometerValues) {
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <FlightController_Read_GY87+0xcc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d104      	bne.n	800140e <FlightController_Read_GY87+0x66>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_magnetometerValues);
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <FlightController_Read_GY87+0xcc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f00d f977 	bl	800e6fc <vPortFree>
    }

    while (1) {

        /* Read GY87 gyroscope values */
    	GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <FlightController_Read_GY87+0xd0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a16      	ldr	r2, [pc, #88]	; (800146c <FlightController_Read_GY87+0xc4>)
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fd2d 	bl	8002e78 <GY87_ReadGyroscope>
        sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope Z: %d\r\n\n", GY87_gyroscopeValues->gyroscopeZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 accelerometer values */
        GY87_ReadAccelerometer(hgy87, GY87_accelerometerValues);
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <FlightController_Read_GY87+0xd0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <FlightController_Read_GY87+0xc8>)
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fd8f 	bl	8002f4c <GY87_ReadAccelerometer>
        sprintf((char *)loggingStr, (const char *)"GY87 Accelerometer Z: %d\r\n\n", GY87_accelerometerValues->accelerometerZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 temperature value */
        GY87_temperature = GY87_ReadTemperatureSensor(hgy87);
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <FlightController_Read_GY87+0xd0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fdf5 	bl	8003022 <GY87_ReadTemperatureSensor>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <FlightController_Read_GY87+0xd4>)
 800143e:	801a      	strh	r2, [r3, #0]
        sprintf((char *)loggingStr, (const char *)"GY87 Temperature: %d°C\r\n\n", GY87_temperature);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 magnetometer values */
        GY87_ReadMagnetometer(hgy87, GY87_magnetometerValues);
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <FlightController_Read_GY87+0xd0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <FlightController_Read_GY87+0xcc>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fe17 	bl	800307e <GY87_ReadMagnetometer>
        sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer Z: %d\r\n\n", GY87_magnetometerValues->magnetometerZ);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Read GY87 magnetometer heading */
        GY87_magnetometerHeadingValue = GY87_ReadMagnetometerHeading(hgy87);
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <FlightController_Read_GY87+0xd0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f001 fe7f 	bl	8003158 <GY87_ReadMagnetometerHeading>
 800145a:	eef0 7a40 	vmov.f32	s15, s0
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <FlightController_Read_GY87+0xd8>)
 8001460:	edc3 7a00 	vstr	s15, [r3]
        sprintf((char *)loggingStr, (const char *)"GY87 Barometer Altitude: %.2fDEFINE\r\n", GY87_barometerAltitudeValue);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f00b fceb 	bl	800ce40 <vTaskDelay>
    	GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 800146a:	e7d0      	b.n	800140e <FlightController_Read_GY87+0x66>
 800146c:	20000350 	.word	0x20000350
 8001470:	20000354 	.word	0x20000354
 8001474:	20000358 	.word	0x20000358
 8001478:	20000330 	.word	0x20000330
 800147c:	2000034c 	.word	0x2000034c
 8001480:	2000035c 	.word	0x2000035c

08001484 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800148c:	2314      	movs	r3, #20
 800148e:	60fb      	str	r3, [r7, #12]

    while (1) {

    	ESC_SetSpeed(hesc, hesc->channel4, FSA8S_channelValues[3]/10);
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <FlightController_Write_ESCs+0x40>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <FlightController_Write_ESCs+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <FlightController_Write_ESCs+0x44>)
 800149c:	88db      	ldrh	r3, [r3, #6]
 800149e:	480b      	ldr	r0, [pc, #44]	; (80014cc <FlightController_Write_ESCs+0x48>)
 80014a0:	fba0 0303 	umull	r0, r3, r0, r3
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b0:	eeb0 0a67 	vmov.f32	s0, s15
 80014b4:	4610      	mov	r0, r2
 80014b6:	f000 ff95 	bl	80023e4 <ESC_SetSpeed>
//    	*(hesc->CCR4) = FSA8S_channelValues[4] * 16;

        /* Set task time delay */
        vTaskDelay(xDelay);
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f00b fcc0 	bl	800ce40 <vTaskDelay>
    	ESC_SetSpeed(hesc, hesc->channel4, FSA8S_channelValues[3]/10);
 80014c0:	e7e6      	b.n	8001490 <FlightController_Write_ESCs+0xc>
 80014c2:	bf00      	nop
 80014c4:	20000334 	.word	0x20000334
 80014c8:	20000338 	.word	0x20000338
 80014cc:	cccccccd 	.word	0xcccccccd

080014d0 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80014d8:	2314      	movs	r3, #20
 80014da:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80014dc:	2120      	movs	r1, #32
 80014de:	4810      	ldr	r0, [pc, #64]	; (8001520 <FlightController_OnOffButton+0x50>)
 80014e0:	f002 fff2 	bl	80044c8 <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d115      	bne.n	8001516 <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <FlightController_OnOffButton+0x54>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	f083 0301 	eor.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00e      	beq.n	8001516 <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <FlightController_OnOffButton+0x58>)
 80014fa:	681c      	ldr	r4, [r3, #0]
 80014fc:	f00b fe76 	bl	800d1ec <xTaskGetTickCount>
 8001500:	4602      	mov	r2, r0
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2300      	movs	r3, #0
 8001508:	2101      	movs	r1, #1
 800150a:	4620      	mov	r0, r4
 800150c:	f00c fb4c 	bl	800dba8 <xTimerGenericCommand>
                Timer1_running = true;
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <FlightController_OnOffButton+0x54>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f00b fc92 	bl	800ce40 <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 800151c:	e7de      	b.n	80014dc <FlightController_OnOffButton+0xc>
 800151e:	bf00      	nop
 8001520:	40020400 	.word	0x40020400
 8001524:	20000328 	.word	0x20000328
 8001528:	20000324 	.word	0x20000324
 800152c:	00000000 	.word	0x00000000

08001530 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001538:	2314      	movs	r3, #20
 800153a:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 800153c:	482e      	ldr	r0, [pc, #184]	; (80015f8 <FlightController_BatteryLevel+0xc8>)
 800153e:	f001 ffc3 	bl	80034c8 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001542:	2101      	movs	r1, #1
 8001544:	482c      	ldr	r0, [pc, #176]	; (80015f8 <FlightController_BatteryLevel+0xc8>)
 8001546:	f002 f873 	bl	8003630 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 800154a:	482b      	ldr	r0, [pc, #172]	; (80015f8 <FlightController_BatteryLevel+0xc8>)
 800154c:	f002 f8fb 	bl	8003746 <HAL_ADC_GetValue>
 8001550:	4603      	mov	r3, r0
 8001552:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevel = (adcValue * 3.3) / 4096;
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffec 	bl	8000534 <__aeabi_i2d>
 800155c:	a320      	add	r3, pc, #128	; (adr r3, 80015e0 <FlightController_BatteryLevel+0xb0>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f851 	bl	8000608 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <FlightController_BatteryLevel+0xcc>)
 8001574:	f7ff f972 	bl	800085c <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb3a 	bl	8000bf8 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <FlightController_BatteryLevel+0xd0>)
 8001588:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevel = FlightController_batteryLevel * 1.046046;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <FlightController_BatteryLevel+0xd0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffe2 	bl	8000558 <__aeabi_f2d>
 8001594:	a314      	add	r3, pc, #80	; (adr r3, 80015e8 <FlightController_BatteryLevel+0xb8>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f835 	bl	8000608 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fb27 	bl	8000bf8 <__aeabi_d2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <FlightController_BatteryLevel+0xd0>)
 80015ae:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevel = FlightController_batteryLevel * 3.363636;
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <FlightController_BatteryLevel+0xd0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffcf 	bl	8000558 <__aeabi_f2d>
 80015ba:	a30d      	add	r3, pc, #52	; (adr r3, 80015f0 <FlightController_BatteryLevel+0xc0>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f822 	bl	8000608 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fb14 	bl	8000bf8 <__aeabi_d2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <FlightController_BatteryLevel+0xd0>)
 80015d4:	6013      	str	r3, [r2, #0]
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f[V]\r\n\n", FlightController_batteryLevel);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f00b fc32 	bl	800ce40 <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 80015dc:	e7ae      	b.n	800153c <FlightController_BatteryLevel+0xc>
 80015de:	bf00      	nop
 80015e0:	66666666 	.word	0x66666666
 80015e4:	400a6666 	.word	0x400a6666
 80015e8:	bb01c92e 	.word	0xbb01c92e
 80015ec:	3ff0bc9a 	.word	0x3ff0bc9a
 80015f0:	fdbd2fa1 	.word	0xfdbd2fa1
 80015f4:	400ae8b9 	.word	0x400ae8b9
 80015f8:	20000a2c 	.word	0x20000a2c
 80015fc:	40b00000 	.word	0x40b00000
 8001600:	20000360 	.word	0x20000360

08001604 <Timer1_Callback>:
    }
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af02      	add	r7, sp, #8
 800160a:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f00c fdd1 	bl	800e1b4 <pvTimerGetTimerID>
 8001612:	4603      	mov	r3, r0
 8001614:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f00c fb14 	bl	800dc44 <xTimerGetPeriod>
 800161c:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3301      	adds	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (PW_ON_OFF_DRIVER_TIME / xTimerPeriod)) {
 8001624:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d33b      	bcc.n	80016ac <Timer1_Callback+0xa8>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001634:	2120      	movs	r1, #32
 8001636:	4822      	ldr	r0, [pc, #136]	; (80016c0 <Timer1_Callback+0xbc>)
 8001638:	f002 ff46 	bl	80044c8 <HAL_GPIO_ReadPin>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d124      	bne.n	800168c <Timer1_Callback+0x88>

            if (!FlightController_running) {
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <Timer1_Callback+0xc0>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	f083 0301 	eor.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <Timer1_Callback+0x5e>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	2110      	movs	r1, #16
 8001654:	481a      	ldr	r0, [pc, #104]	; (80016c0 <Timer1_Callback+0xbc>)
 8001656:	f002 ff4f 	bl	80044f8 <HAL_GPIO_WritePin>

                FlightController_running = true;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <Timer1_Callback+0xc0>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	e014      	b.n	800168c <Timer1_Callback+0x88>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <Timer1_Callback+0xc4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f00b fc1e 	bl	800cea8 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001672:	4816      	ldr	r0, [pc, #88]	; (80016cc <Timer1_Callback+0xc8>)
 8001674:	f002 ff40 	bl	80044f8 <HAL_GPIO_WritePin>

                FlightController_running = false;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <Timer1_Callback+0xc0>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2110      	movs	r1, #16
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <Timer1_Callback+0xbc>)
 8001684:	f002 ff38 	bl	80044f8 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 8001688:	f002 fba3 	bl	8003dd2 <HAL_NVIC_SystemReset>
            }
        }

        /* Stop Timer1 */
        xTimerStop(xTimer, 0);
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	2200      	movs	r2, #0
 8001694:	2103      	movs	r1, #3
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f00c fa86 	bl	800dba8 <xTimerGenericCommand>
        vTimerSetTimerID(xTimer, (void *)0);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f00c fda8 	bl	800e1f4 <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <Timer1_Callback+0xcc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 80016aa:	e004      	b.n	80016b6 <Timer1_Callback+0xb2>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4619      	mov	r1, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f00c fd9f 	bl	800e1f4 <vTimerSetTimerID>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40020400 	.word	0x40020400
 80016c4:	20000329 	.word	0x20000329
 80016c8:	20000308 	.word	0x20000308
 80016cc:	40020800 	.word	0x40020800
 80016d0:	20000328 	.word	0x20000328

080016d4 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

    /* Welcome message */
    LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 80016d8:	2100      	movs	r1, #0
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <FlightController_Init+0x14>)
 80016dc:	f001 fdb8 	bl	8003250 <LOG>

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 80016e0:	f7ff fc58 	bl	8000f94 <FreeRTOS_CreateStartUpTasks>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	080120cc 	.word	0x080120cc

080016ec <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <vApplicationGetIdleTaskMemory+0x2c>)
 80016fc:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <vApplicationGetIdleTaskMemory+0x30>)
 8001702:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000364 	.word	0x20000364
 800171c:	200003c8 	.word	0x200003c8

08001720 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <vApplicationGetTimerTaskMemory+0x2c>)
 8001730:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <vApplicationGetTimerTaskMemory+0x30>)
 8001736:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173e:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	200005c8 	.word	0x200005c8
 8001750:	2000062c 	.word	0x2000062c

08001754 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800175a:	f001 fddb 	bl	8003314 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800175e:	f000 f827 	bl	80017b0 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001762:	f000 f9cd 	bl	8001b00 <MX_GPIO_Init>
    MX_DMA_Init();
 8001766:	f000 f9b1 	bl	8001acc <MX_DMA_Init>
    MX_USART2_UART_Init();
 800176a:	f000 f985 	bl	8001a78 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 800176e:	f000 f8db 	bl	8001928 <MX_I2C1_Init>
    MX_TIM3_Init();
 8001772:	f000 f907 	bl	8001984 <MX_TIM3_Init>
    MX_ADC1_Init();
 8001776:	f000 f885 	bl	8001884 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 800177a:	f7ff ffab 	bl	80016d4 <FlightController_Init>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <main+0x54>)
 8001780:	1d3c      	adds	r4, r7, #4
 8001782:	461d      	mov	r5, r3
 8001784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001788:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800178c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f00a fb32 	bl	800bdfe <osThreadCreate>
 800179a:	4603      	mov	r3, r0
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <main+0x58>)
 800179e:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 80017a0:	f00a fb26 	bl	800bdf0 <osKernelStart>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 80017a4:	e7fe      	b.n	80017a4 <main+0x50>
 80017a6:	bf00      	nop
 80017a8:	08012100 	.word	0x08012100
 80017ac:	20000bb4 	.word	0x20000bb4

080017b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	; 0x50
 80017b4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b6:	f107 0320 	add.w	r3, r7, #32
 80017ba:	2230      	movs	r2, #48	; 0x30
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f00e fad3 	bl	800fd6a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <SystemClock_Config+0xcc>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <SystemClock_Config+0xcc>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <SystemClock_Config+0xcc>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <SystemClock_Config+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017fc:	4a20      	ldr	r2, [pc, #128]	; (8001880 <SystemClock_Config+0xd0>)
 80017fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <SystemClock_Config+0xd0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001810:	2301      	movs	r3, #1
 8001812:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181a:	2302      	movs	r3, #2
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800181e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 8001824:	2319      	movs	r3, #25
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8001828:	2390      	movs	r3, #144	; 0x90
 800182a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8001830:	2303      	movs	r3, #3
 8001832:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	4618      	mov	r0, r3
 800183a:	f005 f8b3 	bl	80069a4 <HAL_RCC_OscConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0x98>
        Error_Handler();
 8001844:	f000 f9ea 	bl	8001c1c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001848:	230f      	movs	r3, #15
 800184a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184c:	2302      	movs	r3, #2
 800184e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001858:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	2102      	movs	r1, #2
 8001864:	4618      	mov	r0, r3
 8001866:	f005 fb15 	bl	8006e94 <HAL_RCC_ClockConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0xc4>
        Error_Handler();
 8001870:	f000 f9d4 	bl	8001c1c <Error_Handler>
    }
}
 8001874:	bf00      	nop
 8001876:	3750      	adds	r7, #80	; 0x50
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 800188a:	463b      	mov	r3, r7
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <MX_ADC1_Init+0x98>)
 8001898:	4a21      	ldr	r2, [pc, #132]	; (8001920 <MX_ADC1_Init+0x9c>)
 800189a:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <MX_ADC1_Init+0x98>)
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <MX_ADC1_Init+0x98>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <MX_ADC1_Init+0x98>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_ADC1_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_ADC1_Init+0x98>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_ADC1_Init+0x98>)
 80018be:	2200      	movs	r2, #0
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_ADC1_Init+0x98>)
 80018c4:	4a17      	ldr	r2, [pc, #92]	; (8001924 <MX_ADC1_Init+0xa0>)
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_ADC1_Init+0x98>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_ADC1_Init+0x98>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_ADC1_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_ADC1_Init+0x98>)
 80018de:	2201      	movs	r2, #1
 80018e0:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80018e2:	480e      	ldr	r0, [pc, #56]	; (800191c <MX_ADC1_Init+0x98>)
 80018e4:	f001 fdac 	bl	8003440 <HAL_ADC_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_ADC1_Init+0x6e>
        Error_Handler();
 80018ee:	f000 f995 	bl	8001c1c <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018fe:	463b      	mov	r3, r7
 8001900:	4619      	mov	r1, r3
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <MX_ADC1_Init+0x98>)
 8001904:	f001 ff2c 	bl	8003760 <HAL_ADC_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_ADC1_Init+0x8e>
        Error_Handler();
 800190e:	f000 f985 	bl	8001c1c <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000a2c 	.word	0x20000a2c
 8001920:	40012000 	.word	0x40012000
 8001924:	0f000001 	.word	0x0f000001

08001928 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_I2C1_Init+0x50>)
 800192e:	4a13      	ldr	r2, [pc, #76]	; (800197c <MX_I2C1_Init+0x54>)
 8001930:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_I2C1_Init+0x50>)
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <MX_I2C1_Init+0x58>)
 8001936:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_I2C1_Init+0x50>)
 8001946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_I2C1_Init+0x50>)
 8001966:	f002 fde1 	bl	800452c <HAL_I2C_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8001970:	f000 f954 	bl	8001c1c <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000a74 	.word	0x20000a74
 800197c:	40005400 	.word	0x40005400
 8001980:	000186a0 	.word	0x000186a0

08001984 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 80019a6:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <MX_TIM3_Init+0xec>)
 80019a8:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <MX_TIM3_Init+0xf0>)
 80019aa:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <MX_TIM3_Init+0xec>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <MX_TIM3_Init+0xec>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <MX_TIM3_Init+0xec>)
 80019ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019be:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <MX_TIM3_Init+0xec>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <MX_TIM3_Init+0xec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80019cc:	4828      	ldr	r0, [pc, #160]	; (8001a70 <MX_TIM3_Init+0xec>)
 80019ce:	f005 fc41 	bl	8007254 <HAL_TIM_PWM_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM3_Init+0x58>
        Error_Handler();
 80019d8:	f000 f920 	bl	8001c1c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4619      	mov	r1, r3
 80019ea:	4821      	ldr	r0, [pc, #132]	; (8001a70 <MX_TIM3_Init+0xec>)
 80019ec:	f006 f826 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM3_Init+0x76>
        Error_Handler();
 80019f6:	f000 f911 	bl	8001c1c <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4817      	ldr	r0, [pc, #92]	; (8001a70 <MX_TIM3_Init+0xec>)
 8001a12:	f005 fd1f 	bl	8007454 <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM3_Init+0x9c>
        Error_Handler();
 8001a1c:	f000 f8fe 	bl	8001c1c <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2204      	movs	r2, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4812      	ldr	r0, [pc, #72]	; (8001a70 <MX_TIM3_Init+0xec>)
 8001a28:	f005 fd14 	bl	8007454 <HAL_TIM_PWM_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0xb2>
        Error_Handler();
 8001a32:	f000 f8f3 	bl	8001c1c <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2208      	movs	r2, #8
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <MX_TIM3_Init+0xec>)
 8001a3e:	f005 fd09 	bl	8007454 <HAL_TIM_PWM_ConfigChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM3_Init+0xc8>
        Error_Handler();
 8001a48:	f000 f8e8 	bl	8001c1c <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	220c      	movs	r2, #12
 8001a50:	4619      	mov	r1, r3
 8001a52:	4807      	ldr	r0, [pc, #28]	; (8001a70 <MX_TIM3_Init+0xec>)
 8001a54:	f005 fcfe 	bl	8007454 <HAL_TIM_PWM_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM3_Init+0xde>
        Error_Handler();
 8001a5e:	f000 f8dd 	bl	8001c1c <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8001a62:	4803      	ldr	r0, [pc, #12]	; (8001a70 <MX_TIM3_Init+0xec>)
 8001a64:	f000 f9bc 	bl	8001de0 <HAL_TIM_MspPostInit>
}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000ac8 	.word	0x20000ac8
 8001a74:	40000400 	.word	0x40000400

08001a78 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_USART2_UART_Init+0x50>)
 8001a80:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	f006 f832 	bl	8007b18 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8001aba:	f000 f8af 	bl	8001c1c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000b10 	.word	0x20000b10
 8001ac8:	40004400 	.word	0x40004400

08001acc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_DMA_Init+0x30>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <MX_DMA_Init+0x30>)
 8001adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_DMA_Init+0x30>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a37      	ldr	r2, [pc, #220]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a30      	ldr	r2, [pc, #192]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <MX_GPIO_Init+0xfc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED_Pin | LED4_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001b8c:	481c      	ldr	r0, [pc, #112]	; (8001c00 <MX_GPIO_Init+0x100>)
 8001b8e:	f002 fcb3 	bl	80044f8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	f241 1114 	movw	r1, #4372	; 0x1114
 8001b98:	481a      	ldr	r0, [pc, #104]	; (8001c04 <MX_GPIO_Init+0x104>)
 8001b9a:	f002 fcad 	bl	80044f8 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_Pin LED4_Pin */
    GPIO_InitStruct.Pin = LED_Pin | LED4_Pin;
 8001b9e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4812      	ldr	r0, [pc, #72]	; (8001c00 <MX_GPIO_Init+0x100>)
 8001bb8:	f002 fb02 	bl	80041c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
    GPIO_InitStruct.Pin = LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin;
 8001bbc:	f241 1314 	movw	r3, #4372	; 0x1114
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <MX_GPIO_Init+0x104>)
 8001bd6:	f002 faf3 	bl	80041c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
    GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_GPIO_Init+0x104>)
 8001bee:	f002 fae7 	bl	80041c0 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020400 	.word	0x40020400

08001c08 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 8001c10:	f00c fd86 	bl	800e720 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8001c14:	2001      	movs	r0, #1
 8001c16:	f00a f93e 	bl	800be96 <osDelay>
 8001c1a:	e7fb      	b.n	8001c14 <StartDefaultTask+0xc>

08001c1c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_MspInit+0x54>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_MspInit+0x54>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_MspInit+0x54>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_MspInit+0x54>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_MspInit+0x54>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_MspInit+0x54>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

    /* System interrupt init*/
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	210f      	movs	r1, #15
 8001c6e:	f06f 0001 	mvn.w	r0, #1
 8001c72:	f002 f884 	bl	8003d7e <HAL_NVIC_SetPriority>

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef * hadc) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
    if (hadc->Instance == ADC1) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_ADC_MspInit+0x7c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d127      	bne.n	8001cf6 <HAL_ADC_MspInit+0x72>
        /* USER CODE BEGIN ADC1_MspInit 0 */

        /* USER CODE END ADC1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_ADC_MspInit+0x80>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_ADC_MspInit+0x80>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
        /**ADC1 GPIO Configuration
        PA0-WKUP     ------> ADC1_IN0
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_ADC_MspInit+0x84>)
 8001cf2:	f002 fa65 	bl	80041c0 <HAL_GPIO_Init>

        /* USER CODE BEGIN ADC1_MspInit 1 */

        /* USER CODE END ADC1_MspInit 1 */
    }
}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40012000 	.word	0x40012000
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020000 	.word	0x40020000

08001d0c <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_I2C_MspInit+0x84>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d12b      	bne.n	8001d86 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4e:	2312      	movs	r3, #18
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	480c      	ldr	r0, [pc, #48]	; (8001d98 <HAL_I2C_MspInit+0x8c>)
 8001d66:	f002 fa2b 	bl	80041c0 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40005400 	.word	0x40005400
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020400 	.word	0x40020400

08001d9c <HAL_TIM_PWM_MspInit>:
 * @brief TIM_PWM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_pwm: TIM_PWM handle pointer
 * @retval None
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * htim_pwm) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    if (htim_pwm->Instance == TIM3) {
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10d      	bne.n	8001dca <HAL_TIM_PWM_MspInit+0x2e>
        /* USER CODE BEGIN TIM3_MspInit 0 */

        /* USER CODE END TIM3_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_TIM_PWM_MspInit+0x40>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_TIM_PWM_MspInit+0x40>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_TIM_PWM_MspInit+0x40>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
    if (htim->Instance == TIM3) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <HAL_TIM_MspPostInit+0xa4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d13b      	bne.n	8001e7a <HAL_TIM_MspPostInit+0x9a>
        /* USER CODE BEGIN TIM3_MspPostInit 0 */

        /* USER CODE END TIM3_MspPostInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_TIM_MspPostInit+0xa8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_TIM_MspPostInit+0xa8>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_TIM_MspPostInit+0xa8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_TIM_MspPostInit+0xa8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_TIM_MspPostInit+0xa8>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_TIM_MspPostInit+0xa8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
        PA6     ------> TIM3_CH1
        PA7     ------> TIM3_CH2
        PB0     ------> TIM3_CH3
        PB1     ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001e3a:	23c0      	movs	r3, #192	; 0xc0
 8001e3c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <HAL_TIM_MspPostInit+0xac>)
 8001e56:	f002 f9b3 	bl	80041c0 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <HAL_TIM_MspPostInit+0xb0>)
 8001e76:	f002 f9a3 	bl	80041c0 <HAL_GPIO_Init>

        /* USER CODE BEGIN TIM3_MspPostInit 1 */

        /* USER CODE END TIM3_MspPostInit 1 */
    }
}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400

08001e94 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <HAL_UART_MspInit+0xe4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d15b      	bne.n	8001f6e <HAL_UART_MspInit+0xda>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001eee:	230c      	movs	r3, #12
 8001ef0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efe:	2307      	movs	r3, #7
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	481d      	ldr	r0, [pc, #116]	; (8001f80 <HAL_UART_MspInit+0xec>)
 8001f0a:	f002 f959 	bl	80041c0 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_UART_MspInit+0xf4>)
 8001f12:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f1a:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2e:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f42:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f4a:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8001f52:	480c      	ldr	r0, [pc, #48]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f54:	f001 ff4e 	bl	8003df4 <HAL_DMA_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_UART_MspInit+0xce>
            Error_Handler();
 8001f5e:	f7ff fe5d 	bl	8001c1c <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_UART_MspInit+0xf0>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40004400 	.word	0x40004400
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	20000b54 	.word	0x20000b54
 8001f88:	40026088 	.word	0x40026088

08001f8c <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001f90:	e7fe      	b.n	8001f90 <NMI_Handler+0x4>

08001f92 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8001fbc:	f001 f9fc 	bl	80033b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1)
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001fc0:	f00b fc44 	bl	800d84c <xTaskGetSchedulerState>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <SysTick_Handler+0x16>
#endif /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 8001fca:	f00c faf5 	bl	800e5b8 <xPortSysTickHandler>
    }
#endif /* INCLUDE_xTaskGetSchedulerState */
       /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <OTG_FS_IRQHandler+0x10>)
 8001fda:	f003 fbb6 	bl	800574a <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20001b2c 	.word	0x20001b2c

08001fe8 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
    return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_kill>:

int _kill(int pid, int sig) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002002:	f00d ff23 	bl	800fe4c <__errno>
 8002006:	4603      	mov	r3, r0
 8002008:	2216      	movs	r2, #22
 800200a:	601a      	str	r2, [r3, #0]
    return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_exit>:

void _exit(int status) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe7 	bl	8001ff8 <_kill>
    while (1) {
 800202a:	e7fe      	b.n	800202a <_exit+0x12>

0800202c <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e00a      	b.n	8002054 <_read+0x28>
        *ptr++ = __io_getchar();
 800203e:	f3af 8000 	nop.w
 8002042:	4601      	mov	r1, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf0      	blt.n	800203e <_read+0x12>
    }

    return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e009      	b.n	800208c <_write+0x26>
        __io_putchar(*ptr++);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf1      	blt.n	8002078 <_write+0x12>
    }
    return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:

int _close(int file) {
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:

int _fstat(int file, struct stat * st) {
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
    return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file) {
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
        errno = ENOMEM;
 8002138:	f00d fe88 	bl	800fe4c <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20010000 	.word	0x20010000
 8002168:	00000400 	.word	0x00000400
 800216c:	20000bb8 	.word	0x20000bb8
 8002170:	200023a8 	.word	0x200023a8

08002174 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800219e:	490e      	ldr	r1, [pc, #56]	; (80021d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021a0:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a4:	e002      	b.n	80021ac <LoopCopyDataInit>

080021a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021aa:	3304      	adds	r3, #4

080021ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b0:	d3f9      	bcc.n	80021a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b4:	4c0b      	ldr	r4, [pc, #44]	; (80021e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b8:	e001      	b.n	80021be <LoopFillZerobss>

080021ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021bc:	3204      	adds	r2, #4

080021be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c0:	d3fb      	bcc.n	80021ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021c2:	f7ff ffd7 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c6:	f00d fe47 	bl	800fe58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7ff fac3 	bl	8001754 <main>
  bx  lr
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 80021dc:	080125d0 	.word	0x080125d0
  ldr r2, =_sbss
 80021e0:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 80021e4:	200023a4 	.word	0x200023a4

080021e8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC_IRQHandler>
	...

080021ec <PWM_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc, uint32_t channel) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]

    /* Check parameters */
    if (NULL == hesc) {
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <PWM_Init+0x14>
        return false;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e043      	b.n	8002288 <PWM_Init+0x9c>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d010      	beq.n	800222c <PWM_Init+0x40>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d00b      	beq.n	800222c <PWM_Init+0x40>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d006      	beq.n	800222c <PWM_Init+0x40>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <PWM_Init+0x40>
        return false;
 8002228:	2300      	movs	r3, #0
 800222a:	e02d      	b.n	8002288 <PWM_Init+0x9c>
    }

    /* Initialize ESC_HandleTypeDef structure */
    /* BEGIN MODIFY 1 */
    hesc->channel1 = TIM_CHANNEL_1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	605a      	str	r2, [r3, #4]
    hesc->channel2 = TIM_CHANNEL_2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2204      	movs	r2, #4
 8002236:	609a      	str	r2, [r3, #8]
    hesc->channel3 = TIM_CHANNEL_3;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2208      	movs	r2, #8
 800223c:	60da      	str	r2, [r3, #12]
    hesc->channel4 = TIM_CHANNEL_4;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	220c      	movs	r2, #12
 8002242:	611a      	str	r2, [r3, #16]
    hesc->CCR1 = (uint32_t *)&(TIM3->CCR1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <PWM_Init+0xa4>)
 8002248:	615a      	str	r2, [r3, #20]
    hesc->CCR2 = (uint32_t *)&(TIM3->CCR2);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a11      	ldr	r2, [pc, #68]	; (8002294 <PWM_Init+0xa8>)
 800224e:	619a      	str	r2, [r3, #24]
    hesc->CCR3 = (uint32_t *)&(TIM3->CCR3);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a11      	ldr	r2, [pc, #68]	; (8002298 <PWM_Init+0xac>)
 8002254:	61da      	str	r2, [r3, #28]
    hesc->CCR4 = (uint32_t *)&(TIM3->CCR4);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a10      	ldr	r2, [pc, #64]	; (800229c <PWM_Init+0xb0>)
 800225a:	621a      	str	r2, [r3, #32]
    /* END MODIFY 1 */

    /* Initialize timer peripheral */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Init(hesc->htim)) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f004 fff7 	bl	8007254 <HAL_TIM_PWM_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <PWM_Init+0x84>
        /* END MODIFY 2 */
        return false;
 800226c:	2300      	movs	r3, #0
 800226e:	e00b      	b.n	8002288 <PWM_Init+0x9c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, channel)) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6839      	ldr	r1, [r7, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f005 f83c 	bl	80072f4 <HAL_TIM_PWM_Start>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <PWM_Init+0x9a>
        /* END MODIFY 3 */
        return false;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <PWM_Init+0x9c>
    }

    return true;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40000434 	.word	0x40000434
 8002294:	40000438 	.word	0x40000438
 8002298:	4000043c 	.word	0x4000043c
 800229c:	40000440 	.word	0x40000440

080022a0 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint32_t channel, uint16_t dutyCycle) {
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]

    /* Check parameters */
    if (NULL == hesc) {
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <PWM_SetDutyCycle+0x18>
        return false;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e046      	b.n	8002346 <PWM_SetDutyCycle+0xa6>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d010      	beq.n	80022e4 <PWM_SetDutyCycle+0x44>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d00b      	beq.n	80022e4 <PWM_SetDutyCycle+0x44>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d006      	beq.n	80022e4 <PWM_SetDutyCycle+0x44>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <PWM_SetDutyCycle+0x44>
        return false;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e030      	b.n	8002346 <PWM_SetDutyCycle+0xa6>
    }
    if (dutyCycle > MAX_PWM_VALUE) {
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ea:	d301      	bcc.n	80022f0 <PWM_SetDutyCycle+0x50>
        return false;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e02a      	b.n	8002346 <PWM_SetDutyCycle+0xa6>
    }

    /* Set duty cycle */
    if (hesc->channel1 == channel) {
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d104      	bne.n	8002304 <PWM_SetDutyCycle+0x64>

        *(hesc->CCR1) = dutyCycle;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	88fa      	ldrh	r2, [r7, #6]
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e01f      	b.n	8002344 <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel2 == channel) {
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	429a      	cmp	r2, r3
 800230c:	d104      	bne.n	8002318 <PWM_SetDutyCycle+0x78>

        *(hesc->CCR2) = dutyCycle;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e015      	b.n	8002344 <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel3 == channel) {
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d104      	bne.n	800232c <PWM_SetDutyCycle+0x8c>

        *(hesc->CCR3) = dutyCycle;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e00b      	b.n	8002344 <PWM_SetDutyCycle+0xa4>
    } else if (hesc->channel4 == channel) {
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	429a      	cmp	r2, r3
 8002334:	d104      	bne.n	8002340 <PWM_SetDutyCycle+0xa0>

        *(hesc->CCR4) = dutyCycle;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e001      	b.n	8002344 <PWM_SetDutyCycle+0xa4>
    } else {

        return false;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <PWM_SetDutyCycle+0xa6>
    }

    return true;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	0000      	movs	r0, r0
 8002354:	0000      	movs	r0, r0
	...

08002358 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint16_t * pwmValue) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002362:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (speed < 0 || speed > 100) {
 8002364:	edd7 7a01 	vldr	s15, [r7, #4]
 8002368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d408      	bmi.n	8002384 <ESC_CalculatePWMDutyCycle+0x2c>
 8002372:	edd7 7a01 	vldr	s15, [r7, #4]
 8002376:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80023e0 <ESC_CalculatePWMDutyCycle+0x88>
 800237a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	dd01      	ble.n	8002388 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 8002384:	2300      	movs	r3, #0
 8002386:	e022      	b.n	80023ce <ESC_CalculatePWMDutyCycle+0x76>
    }

    /* Calculate PWM value */
    *pwmValue = (MAX_ESC_SPEED - MIN_ESC_SPEED) * (speed / 100) + MIN_ESC_SPEED;
 8002388:	edd7 7a01 	vldr	s15, [r7, #4]
 800238c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80023e0 <ESC_CalculatePWMDutyCycle+0x88>
 8002390:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002394:	ee16 0a90 	vmov	r0, s13
 8002398:	f7fe f8de 	bl	8000558 <__aeabi_f2d>
 800239c:	a30e      	add	r3, pc, #56	; (adr r3, 80023d8 <ESC_CalculatePWMDutyCycle+0x80>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f931 	bl	8000608 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	a30a      	add	r3, pc, #40	; (adr r3, 80023d8 <ESC_CalculatePWMDutyCycle+0x80>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f7fd ff72 	bl	800029c <__adddf3>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fbfa 	bl	8000bb8 <__aeabi_d2uiz>
 80023c4:	4603      	mov	r3, r0
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	801a      	strh	r2, [r3, #0]

    return true;
 80023cc:	2301      	movs	r3, #1
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	33333334 	.word	0x33333334
 80023dc:	40899933 	.word	0x40899933
 80023e0:	42c80000 	.word	0x42c80000

080023e4 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint32_t channel, float speed) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	ed87 0a01 	vstr	s0, [r7, #4]

    uint16_t pwmValue;
    uint16_t * pwmValuePtr = &pwmValue;
 80023f2:	f107 0312 	add.w	r3, r7, #18
 80023f6:	617b      	str	r3, [r7, #20]

    /* Check parameters */
    if (NULL == hesc->htim) {
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <ESC_SetSpeed+0x20>
        return false;
 8002400:	2300      	movs	r3, #0
 8002402:	e044      	b.n	800248e <ESC_SetSpeed+0xaa>
    }
    if (channel != hesc->channel1 && channel != hesc->channel2 && channel != hesc->channel3 && channel != hesc->channel4) {
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	429a      	cmp	r2, r3
 800240c:	d010      	beq.n	8002430 <ESC_SetSpeed+0x4c>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	429a      	cmp	r2, r3
 8002416:	d00b      	beq.n	8002430 <ESC_SetSpeed+0x4c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	429a      	cmp	r2, r3
 8002420:	d006      	beq.n	8002430 <ESC_SetSpeed+0x4c>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <ESC_SetSpeed+0x4c>
        return false;
 800242c:	2300      	movs	r3, #0
 800242e:	e02e      	b.n	800248e <ESC_SetSpeed+0xaa>
    }
    if (speed < 0 || speed > 100) {
 8002430:	edd7 7a01 	vldr	s15, [r7, #4]
 8002434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243c:	d408      	bmi.n	8002450 <ESC_SetSpeed+0x6c>
 800243e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002442:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002498 <ESC_SetSpeed+0xb4>
 8002446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	dd01      	ble.n	8002454 <ESC_SetSpeed+0x70>
        return false;
 8002450:	2300      	movs	r3, #0
 8002452:	e01c      	b.n	800248e <ESC_SetSpeed+0xaa>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, pwmValuePtr)) {
 8002454:	6978      	ldr	r0, [r7, #20]
 8002456:	ed97 0a01 	vldr	s0, [r7, #4]
 800245a:	f7ff ff7d 	bl	8002358 <ESC_CalculatePWMDutyCycle>
 800245e:	4603      	mov	r3, r0
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <ESC_SetSpeed+0x8a>
        return false;
 800246a:	2300      	movs	r3, #0
 800246c:	e00f      	b.n	800248e <ESC_SetSpeed+0xaa>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, *pwmValuePtr)) {
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff ff12 	bl	80022a0 <PWM_SetDutyCycle>
 800247c:	4603      	mov	r3, r0
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <ESC_SetSpeed+0xa8>
        return false;
 8002488:	2300      	movs	r3, #0
 800248a:	e000      	b.n	800248e <ESC_SetSpeed+0xaa>
    };

    return true;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	42c80000 	.word	0x42c80000

0800249c <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <IBUS_Init+0x12>
        return false;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e00f      	b.n	80024ce <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7a1b      	ldrb	r3, [r3, #8]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	f005 fb78 	bl	8007bb2 <HAL_UART_Receive_DMA>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 80024cc:	2301      	movs	r3, #1
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <FSA8S_CheckFirstBytes+0x12>
        return false;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e00d      	b.n	8002504 <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d107      	bne.n	8002502 <FSA8S_CheckFirstBytes+0x2c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	3301      	adds	r3, #1
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b40      	cmp	r3, #64	; 0x40
 80024fc:	d101      	bne.n	8002502 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8002502:	2300      	movs	r3, #0
    }
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 8002518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800251c:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <FSA8S_Checksum+0x18>
        return false;
 8002524:	2300      	movs	r3, #0
 8002526:	e02c      	b.n	8002582 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7a1b      	ldrb	r3, [r3, #8]
 8002530:	3b01      	subs	r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	b21a      	sxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7a1b      	ldrb	r3, [r3, #8]
 8002542:	3b02      	subs	r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b21b      	sxth	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b21b      	sxth	r3, r3
 800254e:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 8002550:	2300      	movs	r3, #0
 8002552:	737b      	strb	r3, [r7, #13]
 8002554:	e00b      	b.n	800256e <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	7b7b      	ldrb	r3, [r7, #13]
 800255c:	4413      	add	r3, r2
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	89fa      	ldrh	r2, [r7, #14]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8002568:	7b7b      	ldrb	r3, [r7, #13]
 800256a:	3301      	adds	r3, #1
 800256c:	737b      	strb	r3, [r7, #13]
 800256e:	7b7b      	ldrb	r3, [r7, #13]
 8002570:	2b1d      	cmp	r3, #29
 8002572:	d9f0      	bls.n	8002556 <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8002574:	897a      	ldrh	r2, [r7, #10]
 8002576:	89fb      	ldrh	r3, [r7, #14]
 8002578:	429a      	cmp	r2, r3
 800257a:	d101      	bne.n	8002580 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 8002580:	2300      	movs	r3, #0
    }
}
 8002582:	4618      	mov	r0, r3
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d062      	beq.n	8002664 <FSA8S_AmendData+0xd4>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 800259e:	2302      	movs	r3, #2
 80025a0:	737b      	strb	r3, [r7, #13]
 80025a2:	e059      	b.n	8002658 <FSA8S_AmendData+0xc8>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	7b7b      	ldrb	r3, [r7, #13]
 80025ae:	3301      	adds	r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	440b      	add	r3, r1
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b21b      	sxth	r3, r3
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	7b7b      	ldrb	r3, [r7, #13]
 80025cc:	3b02      	subs	r3, #2
 80025ce:	0fd9      	lsrs	r1, r3, #31
 80025d0:	440b      	add	r3, r1
 80025d2:	105b      	asrs	r3, r3, #1
 80025d4:	4619      	mov	r1, r3
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <FSA8S_AmendData+0xe0>)
 80025d8:	5c5b      	ldrb	r3, [r3, r1]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 80025e0:	89fb      	ldrh	r3, [r7, #14]
 80025e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e6:	d308      	bcc.n	80025fa <FSA8S_AmendData+0x6a>
 80025e8:	89fb      	ldrh	r3, [r7, #14]
 80025ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025ee:	d804      	bhi.n	80025fa <FSA8S_AmendData+0x6a>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 80025f0:	89fb      	ldrh	r3, [r7, #14]
 80025f2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80025f6:	81fb      	strh	r3, [r7, #14]
 80025f8:	e001      	b.n	80025fe <FSA8S_AmendData+0x6e>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002608:	7b7b      	ldrb	r3, [r7, #13]
 800260a:	3b02      	subs	r3, #2
 800260c:	0fda      	lsrs	r2, r3, #31
 800260e:	4413      	add	r3, r2
 8002610:	105b      	asrs	r3, r3, #1
 8002612:	461a      	mov	r2, r3
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <FSA8S_AmendData+0xe0>)
 8002616:	5c9b      	ldrb	r3, [r3, r2]
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002620:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002674 <FSA8S_AmendData+0xe4>
 8002624:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002628:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8002674 <FSA8S_AmendData+0xe4>
 800262c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	7b7b      	ldrb	r3, [r7, #13]
 800263a:	3b02      	subs	r3, #2
 800263c:	0fd9      	lsrs	r1, r3, #31
 800263e:	440b      	add	r3, r1
 8002640:	105b      	asrs	r3, r3, #1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800264a:	ee17 2a90 	vmov	r2, s15
 800264e:	b292      	uxth	r2, r2
 8002650:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 8002652:	7b7b      	ldrb	r3, [r7, #13]
 8002654:	3302      	adds	r3, #2
 8002656:	737b      	strb	r3, [r7, #13]
 8002658:	7b7a      	ldrb	r2, [r7, #13]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7a1b      	ldrb	r3, [r3, #8]
 800265e:	3b02      	subs	r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	db9f      	blt.n	80025a4 <FSA8S_AmendData+0x14>
        }
    }
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	20000004 	.word	0x20000004
 8002674:	447a0000 	.word	0x447a0000

08002678 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <FSA8S_Init+0x12>
        return NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	e04a      	b.n	8002720 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 800268a:	4b27      	ldr	r3, [pc, #156]	; (8002728 <FSA8S_Init+0xb0>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <FSA8S_Init+0x1e>
        return NULL;
 8002692:	2300      	movs	r3, #0
 8002694:	e044      	b.n	8002720 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 8002696:	2014      	movs	r0, #20
 8002698:	f00c f81e 	bl	800e6d8 <pvPortMalloc>
 800269c:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 800269e:	2020      	movs	r0, #32
 80026a0:	f00c f81a 	bl	800e6d8 <pvPortMalloc>
 80026a4:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 80026a6:	201c      	movs	r0, #28
 80026a8:	f00c f816 	bl	800e6d8 <pvPortMalloc>
 80026ac:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00f      	beq.n	80026d4 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2220      	movs	r2, #32
 80026c4:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	220e      	movs	r2, #14
 80026d0:	741a      	strb	r2, [r3, #16]
 80026d2:	e00c      	b.n	80026ee <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	f00c f80f 	bl	800e6fc <vPortFree>
        vPortFree(hibus->data);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f00c f80a 	bl	800e6fc <vPortFree>
        vPortFree(hibus);
 80026e8:	6978      	ldr	r0, [r7, #20]
 80026ea:	f00c f807 	bl	800e6fc <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f7ff fed4 	bl	800249c <IBUS_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <FSA8S_Init+0xb0>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
        return hibus;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	e00d      	b.n	8002720 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	f00b fff7 	bl	800e6fc <vPortFree>
        vPortFree(hibus->data);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	f00b fff2 	bl	800e6fc <vPortFree>
        vPortFree(hibus);
 8002718:	6978      	ldr	r0, [r7, #20]
 800271a:	f00b ffef 	bl	800e6fc <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 800271e:	2300      	movs	r3, #0
    }
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000bbc 	.word	0x20000bbc

0800272c <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 800273e:	2300      	movs	r3, #0
 8002740:	e029      	b.n	8002796 <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <FSA8S_ReadChannel+0x22>
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	2b0e      	cmp	r3, #14
 800274c:	d901      	bls.n	8002752 <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	e021      	b.n	8002796 <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8002752:	bf00      	nop
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff febe 	bl	80024d6 <FSA8S_CheckFirstBytes>
 800275a:	4603      	mov	r3, r0
 800275c:	f083 0301 	eor.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f6      	bne.n	8002754 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fed2 	bl	8002510 <FSA8S_Checksum>
 800276c:	4603      	mov	r3, r0
 800276e:	f083 0301 	eor.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8002778:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 800277a:	e7ea      	b.n	8002752 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 800277c:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff06 	bl	8002590 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800278e:	3b01      	subs	r3, #1
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	881b      	ldrh	r3, [r3, #0]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af02      	add	r7, sp, #8
 80027a4:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <I2C_Init+0x12>
        return false;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e010      	b.n	80027d2 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6858      	ldr	r0, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7a19      	ldrb	r1, [r3, #8]
 80027b8:	f107 030f 	add.w	r3, r7, #15
 80027bc:	2201      	movs	r2, #1
 80027be:	9200      	str	r2, [sp, #0]
 80027c0:	2275      	movs	r2, #117	; 0x75
 80027c2:	f000 f80a 	bl	80027da <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b68      	cmp	r3, #104	; 0x68
 80027ca:	d101      	bne.n	80027d0 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 80027d0:	2300      	movs	r3, #0
    }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 80027da:	b580      	push	{r7, lr}
 80027dc:	b088      	sub	sp, #32
 80027de:	af04      	add	r7, sp, #16
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	72fb      	strb	r3, [r7, #11]
 80027e8:	4613      	mov	r3, r2
 80027ea:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <I2C_Read+0x1c>
        return false;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e019      	b.n	800282a <I2C_Read+0x50>
    }
    if (NULL == data) {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <I2C_Read+0x26>
        return false;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e014      	b.n	800282a <I2C_Read+0x50>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	b299      	uxth	r1, r3
 8002804:	7abb      	ldrb	r3, [r7, #10]
 8002806:	b29a      	uxth	r2, r3
 8002808:	7e3b      	ldrb	r3, [r7, #24]
 800280a:	b29b      	uxth	r3, r3
 800280c:	2064      	movs	r0, #100	; 0x64
 800280e:	9002      	str	r0, [sp, #8]
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2301      	movs	r3, #1
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f002 f8c5 	bl	80049a8 <HAL_I2C_Mem_Read>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_Read+0x4e>

        /* Data couldn't be read */
        return false;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <I2C_Read+0x50>
    } else {

        /* Data read successfully */
        return true;
 8002828:	2301      	movs	r3, #1
    }
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002832:	b580      	push	{r7, lr}
 8002834:	b088      	sub	sp, #32
 8002836:	af04      	add	r7, sp, #16
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	72fb      	strb	r3, [r7, #11]
 8002840:	4613      	mov	r3, r2
 8002842:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <I2C_Write+0x1c>
        return false;
 800284a:	2300      	movs	r3, #0
 800284c:	e018      	b.n	8002880 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <I2C_Write+0x26>
        return false;
 8002854:	2300      	movs	r3, #0
 8002856:	e013      	b.n	8002880 <I2C_Write+0x4e>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8002858:	7afb      	ldrb	r3, [r7, #11]
 800285a:	b299      	uxth	r1, r3
 800285c:	7abb      	ldrb	r3, [r7, #10]
 800285e:	b29a      	uxth	r2, r3
 8002860:	2364      	movs	r3, #100	; 0x64
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	2301      	movs	r3, #1
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2301      	movs	r3, #1
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f001 ffa0 	bl	80047b4 <HAL_I2C_Mem_Write>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <I2C_Write+0x4c>

        /* Data couldn't be written */
        return false;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 800287e:	2301      	movs	r3, #1
    }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8002890:	2014      	movs	r0, #20
 8002892:	f00b ff21 	bl	800e6d8 <pvPortMalloc>
 8002896:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 8002898:	2004      	movs	r0, #4
 800289a:	f00b ff1d 	bl	800e6d8 <pvPortMalloc>
 800289e:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <GY87_InstanceInit+0x24>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f00b ff23 	bl	800e6fc <vPortFree>
        vPortFree(hgy87);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f00b ff20 	bl	800e6fc <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	e01b      	b.n	80028f8 <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <GY87_InstanceInit+0x78>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	22d0      	movs	r2, #208	; 0xd0
 80028d2:	721a      	strb	r2, [r3, #8]
 80028d4:	e009      	b.n	80028ea <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <GY87_InstanceInit+0x78>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2202      	movs	r2, #2
 80028e2:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	22d1      	movs	r2, #209	; 0xd1
 80028e8:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000bbd 	.word	0x20000bbd

08002904 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af02      	add	r7, sp, #8
 800290a:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6858      	ldr	r0, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7a19      	ldrb	r1, [r3, #8]
 8002918:	f107 030f 	add.w	r3, r7, #15
 800291c:	2200      	movs	r2, #0
 800291e:	9200      	str	r2, [sp, #0]
 8002920:	226b      	movs	r2, #107	; 0x6b
 8002922:	f000 fa3d 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af02      	add	r7, sp, #8
 8002934:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6858      	ldr	r0, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	7a19      	ldrb	r1, [r3, #8]
 8002942:	f107 030f 	add.w	r3, r7, #15
 8002946:	2201      	movs	r2, #1
 8002948:	9200      	str	r2, [sp, #0]
 800294a:	226b      	movs	r2, #107	; 0x6b
 800294c:	f000 fa28 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 8002960:	2318      	movs	r3, #24
 8002962:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6858      	ldr	r0, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7a19      	ldrb	r1, [r3, #8]
 800296c:	f107 030f 	add.w	r3, r7, #15
 8002970:	2201      	movs	r2, #1
 8002972:	9200      	str	r2, [sp, #0]
 8002974:	2219      	movs	r2, #25
 8002976:	f000 fa13 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af02      	add	r7, sp, #8
 8002988:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_0; // Full range
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6858      	ldr	r0, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7a19      	ldrb	r1, [r3, #8]
 8002996:	f107 030f 	add.w	r3, r7, #15
 800299a:	2201      	movs	r2, #1
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	221b      	movs	r2, #27
 80029a0:	f000 f9fe 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_0; // Full range
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6858      	ldr	r0, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7a19      	ldrb	r1, [r3, #8]
 80029c0:	f107 030f 	add.w	r3, r7, #15
 80029c4:	2201      	movs	r2, #1
 80029c6:	9200      	str	r2, [sp, #0]
 80029c8:	221c      	movs	r2, #28
 80029ca:	f000 f9e9 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af02      	add	r7, sp, #8
 80029dc:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = 0b00100010; // TODO
 80029de:	2322      	movs	r3, #34	; 0x22
 80029e0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6858      	ldr	r0, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7a19      	ldrb	r1, [r3, #8]
 80029ea:	f107 030f 	add.w	r3, r7, #15
 80029ee:	2201      	movs	r2, #1
 80029f0:	9200      	str	r2, [sp, #0]
 80029f2:	226a      	movs	r2, #106	; 0x6a
 80029f4:	f000 f9d4 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6858      	ldr	r0, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7a19      	ldrb	r1, [r3, #8]
 8002a14:	f107 030f 	add.w	r3, r7, #15
 8002a18:	2200      	movs	r2, #0
 8002a1a:	9200      	str	r2, [sp, #0]
 8002a1c:	226a      	movs	r2, #106	; 0x6a
 8002a1e:	f000 f9bf 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af02      	add	r7, sp, #8
 8002a30:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002a32:	2302      	movs	r3, #2
 8002a34:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6858      	ldr	r0, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7a19      	ldrb	r1, [r3, #8]
 8002a3e:	f107 030f 	add.w	r3, r7, #15
 8002a42:	2201      	movs	r2, #1
 8002a44:	9200      	str	r2, [sp, #0]
 8002a46:	2237      	movs	r2, #55	; 0x37
 8002a48:	f000 f9aa 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6858      	ldr	r0, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7a19      	ldrb	r1, [r3, #8]
 8002a68:	f107 030f 	add.w	r3, r7, #15
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	9200      	str	r2, [sp, #0]
 8002a70:	2237      	movs	r2, #55	; 0x37
 8002a72:	f000 f995 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af02      	add	r7, sp, #8
 8002a84:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = 0b00001101; // 400 kHz TODO
 8002a86:	230d      	movs	r3, #13
 8002a88:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6858      	ldr	r0, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7a19      	ldrb	r1, [r3, #8]
 8002a92:	f107 030f 	add.w	r3, r7, #15
 8002a96:	2201      	movs	r2, #1
 8002a98:	9200      	str	r2, [sp, #0]
 8002a9a:	2224      	movs	r2, #36	; 0x24
 8002a9c:	f000 f980 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = QMC5883L_AUX_VAL_I2C_ADDR | 0x80;
 8002ab0:	238d      	movs	r3, #141	; 0x8d
 8002ab2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6858      	ldr	r0, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7a19      	ldrb	r1, [r3, #8]
 8002abc:	f107 030f 	add.w	r3, r7, #15
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	9200      	str	r2, [sp, #0]
 8002ac4:	2225      	movs	r2, #37	; 0x25
 8002ac6:	f000 f96b 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6858      	ldr	r0, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7a19      	ldrb	r1, [r3, #8]
 8002ad6:	f107 030f 	add.w	r3, r7, #15
 8002ada:	2201      	movs	r2, #1
 8002adc:	9200      	str	r2, [sp, #0]
 8002ade:	2226      	movs	r2, #38	; 0x26
 8002ae0:	f000 f95e 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8002ae4:	2386      	movs	r3, #134	; 0x86
 8002ae6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6858      	ldr	r0, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7a19      	ldrb	r1, [r3, #8]
 8002af0:	f107 030f 	add.w	r3, r7, #15
 8002af4:	2201      	movs	r2, #1
 8002af6:	9200      	str	r2, [sp, #0]
 8002af8:	2227      	movs	r2, #39	; 0x27
 8002afa:	f000 f951 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <GY87_Configure>:
//    /* Set slave BMP180 barometer number of registers to read*/
//    regData = 0x80 | 0x06; // TODO
//    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
}

static void GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fef8 	bl	8002904 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff0a 	bl	800292e <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ff1c 	bl	8002958 <MPU6050_SetSampleDivider>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff2e 	bl	8002982 <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ff40 	bl	80029ac <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff67 	bl	8002a00 <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff79 	bl	8002a2a <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f819 	bl	8002b70 <QMC5883L_TestConnection>
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f846 	bl	8002bd0 <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f82b 	bl	8002ba0 <BMP180_TestConnection>
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f86c 	bl	8002c28 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff7f 	bl	8002a54 <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ff3d 	bl	80029d6 <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff8e 	bl	8002a7e <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffa0 	bl	8002aa8 <MPU6050_Configure_QMC5883l>

//    /* Configure slave BMP180 barometer in MPU6050 */
//    MPU6050_Configure_BMP180(hgy87);
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6858      	ldr	r0, [r3, #4]
 8002b7c:	f107 030f 	add.w	r3, r7, #15
 8002b80:	2201      	movs	r2, #1
 8002b82:	9200      	str	r2, [sp, #0]
 8002b84:	220d      	movs	r2, #13
 8002b86:	211a      	movs	r1, #26
 8002b88:	f000 f8e2 	bl	8002d50 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2bff      	cmp	r3, #255	; 0xff
 8002b90:	d001      	beq.n	8002b96 <QMC5883L_TestConnection+0x26>
        return false;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 8002b96:	2301      	movs	r3, #1
    }
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xD0, &regData, sizeof(regData));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6858      	ldr	r0, [r3, #4]
 8002bac:	f107 030f 	add.w	r3, r7, #15
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	9200      	str	r2, [sp, #0]
 8002bb4:	22d0      	movs	r2, #208	; 0xd0
 8002bb6:	21ee      	movs	r1, #238	; 0xee
 8002bb8:	f000 f8ca 	bl	8002d50 <MPU6050_ReadRegister>

    if (0x55 != regData) { // TODO
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2b55      	cmp	r3, #85	; 0x55
 8002bc0:	d001      	beq.n	8002bc6 <BMP180_TestConnection+0x26>
        return false;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <BMP180_TestConnection+0x28>
    } else {
        return true;
 8002bc6:	2301      	movs	r3, #1
    }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6858      	ldr	r0, [r3, #4]
 8002be0:	f107 030f 	add.w	r3, r7, #15
 8002be4:	2201      	movs	r2, #1
 8002be6:	9200      	str	r2, [sp, #0]
 8002be8:	220b      	movs	r2, #11
 8002bea:	211a      	movs	r1, #26
 8002bec:	f000 f8d8 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8002bf0:	231d      	movs	r3, #29
 8002bf2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6858      	ldr	r0, [r3, #4]
 8002bf8:	f107 030f 	add.w	r3, r7, #15
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	9200      	str	r2, [sp, #0]
 8002c00:	2209      	movs	r2, #9
 8002c02:	211a      	movs	r1, #26
 8002c04:	f000 f8cc 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6858      	ldr	r0, [r3, #4]
 8002c10:	f107 030f 	add.w	r3, r7, #15
 8002c14:	2201      	movs	r2, #1
 8002c16:	9200      	str	r2, [sp, #0]
 8002c18:	220a      	movs	r2, #10
 8002c1a:	211a      	movs	r1, #26
 8002c1c:	f000 f8c0 	bl	8002da0 <MPU6050_WriteRegisterBitmasked>
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

    /* Configure BMP180 barometer */
    /* Read calibration data */
    BMP180_ReadCallibrationData(hgy87);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f805 	bl	8002c40 <BMP180_ReadCallibrationData>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <BMP180_ReadCallibrationData>:

static void BMP180_ReadCallibrationData(GY87_HandleTypeDef_t * hgy87) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8002c5c:	23aa      	movs	r3, #170	; 0xaa
 8002c5e:	83fb      	strh	r3, [r7, #30]

    //HAL_I2C_Mem_Read(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, startRegisterAddress, 1, callibrationData, 22, HAL_MAX_DELAY);
    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, startRegisterAddress, callibrationData, sizeof(callibrationData));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6858      	ldr	r0, [r3, #4]
 8002c64:	8bfb      	ldrh	r3, [r7, #30]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	f107 0308 	add.w	r3, r7, #8
 8002c6c:	2116      	movs	r1, #22
 8002c6e:	9100      	str	r1, [sp, #0]
 8002c70:	2177      	movs	r1, #119	; 0x77
 8002c72:	f000 f86d 	bl	8002d50 <MPU6050_ReadRegister>

    BMP180_CallibrationData.AC1 = ((callibrationData[0]  << 8) | callibrationData[1]);
 8002c76:	7a3b      	ldrb	r3, [r7, #8]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	7a7b      	ldrb	r3, [r7, #9]
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	4313      	orrs	r3, r2
 8002c82:	b21a      	sxth	r2, r3
 8002c84:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002c86:	801a      	strh	r2, [r3, #0]
    BMP180_CallibrationData.AC2 = ((callibrationData[2]  << 8) | callibrationData[3]);
 8002c88:	7abb      	ldrb	r3, [r7, #10]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	b21a      	sxth	r2, r3
 8002c8e:	7afb      	ldrb	r3, [r7, #11]
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	4313      	orrs	r3, r2
 8002c94:	b21a      	sxth	r2, r3
 8002c96:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002c98:	805a      	strh	r2, [r3, #2]
    BMP180_CallibrationData.AC3 = ((callibrationData[4]  << 8) | callibrationData[5]);
 8002c9a:	7b3b      	ldrb	r3, [r7, #12]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	b21a      	sxth	r2, r3
 8002ca0:	7b7b      	ldrb	r3, [r7, #13]
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	b21a      	sxth	r2, r3
 8002ca8:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002caa:	809a      	strh	r2, [r3, #4]
    BMP180_CallibrationData.AC4 = ((callibrationData[6]  << 8) | callibrationData[7]);
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	b21a      	sxth	r2, r3
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	b21b      	sxth	r3, r3
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	b21b      	sxth	r3, r3
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002cbe:	80da      	strh	r2, [r3, #6]
    BMP180_CallibrationData.AC5 = ((callibrationData[8]  << 8) | callibrationData[9]);
 8002cc0:	7c3b      	ldrb	r3, [r7, #16]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	7c7b      	ldrb	r3, [r7, #17]
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002cd2:	811a      	strh	r2, [r3, #8]
    BMP180_CallibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 8002cd4:	7cbb      	ldrb	r3, [r7, #18]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002ce6:	815a      	strh	r2, [r3, #10]
    BMP180_CallibrationData.B1 =  ((callibrationData[12] << 8) | callibrationData[13]);
 8002ce8:	7d3b      	ldrb	r3, [r7, #20]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	b21a      	sxth	r2, r3
 8002cee:	7d7b      	ldrb	r3, [r7, #21]
 8002cf0:	b21b      	sxth	r3, r3
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	b21a      	sxth	r2, r3
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002cf8:	819a      	strh	r2, [r3, #12]
    BMP180_CallibrationData.B2 =  ((callibrationData[14] << 8) | callibrationData[15]);
 8002cfa:	7dbb      	ldrb	r3, [r7, #22]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	b21a      	sxth	r2, r3
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	b21a      	sxth	r2, r3
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002d0a:	81da      	strh	r2, [r3, #14]
    BMP180_CallibrationData.MB =  ((callibrationData[16] << 8) | callibrationData[17]);
 8002d0c:	7e3b      	ldrb	r3, [r7, #24]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	b21a      	sxth	r2, r3
 8002d12:	7e7b      	ldrb	r3, [r7, #25]
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	4313      	orrs	r3, r2
 8002d18:	b21a      	sxth	r2, r3
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002d1c:	821a      	strh	r2, [r3, #16]
    BMP180_CallibrationData.MC =  ((callibrationData[18] << 8) | callibrationData[19]);
 8002d1e:	7ebb      	ldrb	r3, [r7, #26]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	b21a      	sxth	r2, r3
 8002d24:	7efb      	ldrb	r3, [r7, #27]
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b21a      	sxth	r2, r3
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002d2e:	825a      	strh	r2, [r3, #18]
    BMP180_CallibrationData.MD =  ((callibrationData[20] << 8) | callibrationData[21]);
 8002d30:	7f3b      	ldrb	r3, [r7, #28]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b21a      	sxth	r2, r3
 8002d36:	7f7b      	ldrb	r3, [r7, #29]
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b21a      	sxth	r2, r3
 8002d3e:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <BMP180_ReadCallibrationData+0x10c>)
 8002d40:	829a      	strh	r2, [r3, #20]
}
 8002d42:	bf00      	nop
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000bc0 	.word	0x20000bc0

08002d50 <MPU6050_ReadRegister>:
	HAL_I2C_Mem_Read(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR, 0xF6, 1, Temp_RAW, 2, 1000);

	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
}

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	72fb      	strb	r3, [r7, #11]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8002d62:	7aba      	ldrb	r2, [r7, #10]
 8002d64:	7af9      	ldrb	r1, [r7, #11]
 8002d66:	7e3b      	ldrb	r3, [r7, #24]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff fd34 	bl	80027da <I2C_Read>
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	72fb      	strb	r3, [r7, #11]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8002d8c:	7aba      	ldrb	r2, [r7, #10]
 8002d8e:	7af9      	ldrb	r1, [r7, #11]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff fd4d 	bl	8002832 <I2C_Write>
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	72fb      	strb	r3, [r7, #11]
 8002dae:	4613      	mov	r3, r2
 8002db0:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 8002db2:	f107 0317 	add.w	r3, r7, #23
 8002db6:	7aba      	ldrb	r2, [r7, #10]
 8002db8:	7af9      	ldrb	r1, [r7, #11]
 8002dba:	2001      	movs	r0, #1
 8002dbc:	9000      	str	r0, [sp, #0]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff ffc6 	bl	8002d50 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8002dc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	75bb      	strb	r3, [r7, #22]
 8002dd8:	e00a      	b.n	8002df0 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	b25a      	sxtb	r2, r3
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	4013      	ands	r3, r2
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8002df0:	f107 0316 	add.w	r3, r7, #22
 8002df4:	7aba      	ldrb	r2, [r7, #10]
 8002df6:	7af9      	ldrb	r1, [r7, #11]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ffbe 	bl	8002d7a <MPU6050_WriteRegister>
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <GY87_Init+0x12>
        return NULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e028      	b.n	8002e6c <GY87_Init+0x64>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <GY87_Init+0x6c>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d101      	bne.n	8002e26 <GY87_Init+0x1e>
        return NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e022      	b.n	8002e6c <GY87_Init+0x64>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fd2e 	bl	8002888 <GY87_InstanceInit>
 8002e2c:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01a      	beq.n	8002e6a <GY87_Init+0x62>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff fcb2 	bl	800279e <I2C_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <GY87_Init+0x4e>
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff fe60 	bl	8002b06 <GY87_Configure>

            instancesNumber++;
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <GY87_Init+0x6c>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <GY87_Init+0x6c>)
 8002e50:	701a      	strb	r2, [r3, #0]

            return hgy87;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	e00a      	b.n	8002e6c <GY87_Init+0x64>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f00b fc4e 	bl	800e6fc <vPortFree>
            vPortFree(hgy87);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f00b fc4b 	bl	800e6fc <vPortFree>
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
#endif
            return NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <GY87_Init+0x64>

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
#endif
        return NULL;
 8002e6a:	2300      	movs	r3, #0
    }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000bbd 	.word	0x20000bbd

08002e78 <GY87_ReadGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0250;
 8002e82:	23c3      	movs	r3, #195	; 0xc3
 8002e84:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d051      	beq.n	8002f30 <GY87_ReadGyroscope+0xb8>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d04e      	beq.n	8002f30 <GY87_ReadGyroscope+0xb8>

        /* Read gyroscope in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6858      	ldr	r0, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7a19      	ldrb	r1, [r3, #8]
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	9200      	str	r2, [sp, #0]
 8002ea2:	2243      	movs	r2, #67	; 0x43
 8002ea4:	f7ff ff54 	bl	8002d50 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8002ea8:	7b3b      	ldrb	r3, [r7, #12]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	b21a      	sxth	r2, r3
 8002eae:	7b7b      	ldrb	r3, [r7, #13]
 8002eb0:	b21b      	sxth	r3, r3
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	b21b      	sxth	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ebc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ec0:	b21a      	sxth	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	801a      	strh	r2, [r3, #0]

        /* Read gyroscope in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6858      	ldr	r0, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7a19      	ldrb	r1, [r3, #8]
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	9200      	str	r2, [sp, #0]
 8002ed6:	2245      	movs	r2, #69	; 0x45
 8002ed8:	f7ff ff3a 	bl	8002d50 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8002edc:	7b3b      	ldrb	r3, [r7, #12]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	7b7b      	ldrb	r3, [r7, #13]
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ef0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	805a      	strh	r2, [r3, #2]

        /* Read gyroscope in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6858      	ldr	r0, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7a19      	ldrb	r1, [r3, #8]
 8002f02:	f107 030c 	add.w	r3, r7, #12
 8002f06:	2202      	movs	r2, #2
 8002f08:	9200      	str	r2, [sp, #0]
 8002f0a:	2247      	movs	r2, #71	; 0x47
 8002f0c:	f7ff ff20 	bl	8002d50 <MPU6050_ReadRegister>
        gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8002f10:	7b3b      	ldrb	r3, [r7, #12]
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	b21a      	sxth	r2, r3
 8002f16:	7b7b      	ldrb	r3, [r7, #13]
 8002f18:	b21b      	sxth	r3, r3
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f24:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	809a      	strh	r2, [r3, #4]
 8002f2e:	e009      	b.n	8002f44 <GY87_ReadGyroscope+0xcc>

    } else {

        /* Wrong parameters */
        gyroscopeValues->gyroscopeX = 0;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->gyroscopeY = 0;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->gyroscopeZ = 0;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	809a      	strh	r2, [r3, #4]
    }
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <GY87_ReadAccelerometer>:

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_02;
 8002f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f5a:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d051      	beq.n	8003006 <GY87_ReadAccelerometer+0xba>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d04e      	beq.n	8003006 <GY87_ReadAccelerometer+0xba>

        /* Read accelerometer in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6858      	ldr	r0, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7a19      	ldrb	r1, [r3, #8]
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	2202      	movs	r2, #2
 8002f76:	9200      	str	r2, [sp, #0]
 8002f78:	223b      	movs	r2, #59	; 0x3b
 8002f7a:	f7ff fee9 	bl	8002d50 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8002f7e:	7b3b      	ldrb	r3, [r7, #12]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	b21a      	sxth	r2, r3
 8002f84:	7b7b      	ldrb	r3, [r7, #13]
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f92:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f96:	b21a      	sxth	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	801a      	strh	r2, [r3, #0]

        /* Read accelerometer in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6858      	ldr	r0, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7a19      	ldrb	r1, [r3, #8]
 8002fa4:	f107 030c 	add.w	r3, r7, #12
 8002fa8:	2202      	movs	r2, #2
 8002faa:	9200      	str	r2, [sp, #0]
 8002fac:	223d      	movs	r2, #61	; 0x3d
 8002fae:	f7ff fecf 	bl	8002d50 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8002fb2:	7b3b      	ldrb	r3, [r7, #12]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	b21a      	sxth	r2, r3
 8002fb8:	7b7b      	ldrb	r3, [r7, #13]
 8002fba:	b21b      	sxth	r3, r3
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b21b      	sxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fca:	b21a      	sxth	r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	805a      	strh	r2, [r3, #2]

        /* Read accelerometer in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6858      	ldr	r0, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7a19      	ldrb	r1, [r3, #8]
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	2202      	movs	r2, #2
 8002fde:	9200      	str	r2, [sp, #0]
 8002fe0:	223f      	movs	r2, #63	; 0x3f
 8002fe2:	f7ff feb5 	bl	8002d50 <MPU6050_ReadRegister>
        accelerometerValues->accelerometerZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8002fe6:	7b3b      	ldrb	r3, [r7, #12]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	b21a      	sxth	r2, r3
 8002fec:	7b7b      	ldrb	r3, [r7, #13]
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	b21b      	sxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ffe:	b21a      	sxth	r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	809a      	strh	r2, [r3, #4]
 8003004:	e009      	b.n	800301a <GY87_ReadAccelerometer+0xce>

    } else {
        /* Wrong parameters */
        accelerometerValues->accelerometerX = 0;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	801a      	strh	r2, [r3, #0]
        accelerometerValues->accelerometerY = 0;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2200      	movs	r2, #0
 8003010:	805a      	strh	r2, [r3, #2]
        accelerometerValues->accelerometerZ = 0;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	809a      	strh	r2, [r3, #4]
    }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <GY87_ReadTemperatureSensor>:

int16_t GY87_ReadTemperatureSensor(GY87_HandleTypeDef_t * hgy87) {
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af02      	add	r7, sp, #8
 8003028:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 800302a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800302e:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 8003030:	2324      	movs	r3, #36	; 0x24
 8003032:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hgy87) {
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <GY87_ReadTemperatureSensor+0x1c>
        return 0;
 800303a:	2300      	movs	r3, #0
 800303c:	e01b      	b.n	8003076 <GY87_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6858      	ldr	r0, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7a19      	ldrb	r1, [r3, #8]
 8003046:	f107 0308 	add.w	r3, r7, #8
 800304a:	2202      	movs	r2, #2
 800304c:	9200      	str	r2, [sp, #0]
 800304e:	2241      	movs	r2, #65	; 0x41
 8003050:	f7ff fe7e 	bl	8002d50 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 8003054:	7a3b      	ldrb	r3, [r7, #8]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	b21a      	sxth	r2, r3
 800305a:	7a7b      	ldrb	r3, [r7, #9]
 800305c:	b21b      	sxth	r3, r3
 800305e:	4313      	orrs	r3, r2
 8003060:	b21b      	sxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003068:	fb92 f3f3 	sdiv	r3, r2, r3
 800306c:	b29a      	uxth	r2, r3
 800306e:	89bb      	ldrh	r3, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	b21b      	sxth	r3, r3
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <GY87_ReadMagnetometer>:

void GY87_ReadMagnetometer(GY87_HandleTypeDef_t * hgy87, GY87_magnetometerValues_t * magnetometerValues) {
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af02      	add	r7, sp, #8
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 1;
 8003088:	2301      	movs	r3, #1
 800308a:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != magnetometerValues) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d051      	beq.n	8003136 <GY87_ReadMagnetometer+0xb8>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d04e      	beq.n	8003136 <GY87_ReadMagnetometer+0xb8>

        /* Read magnetometer in axis X */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6858      	ldr	r0, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7a19      	ldrb	r1, [r3, #8]
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	2202      	movs	r2, #2
 80030a6:	9200      	str	r2, [sp, #0]
 80030a8:	2249      	movs	r2, #73	; 0x49
 80030aa:	f7ff fe51 	bl	8002d50 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 80030ae:	7b7b      	ldrb	r3, [r7, #13]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	b21a      	sxth	r2, r3
 80030b4:	7b3b      	ldrb	r3, [r7, #12]
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	4313      	orrs	r3, r2
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80030c6:	b21a      	sxth	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	801a      	strh	r2, [r3, #0]

        /* Read magnetometer in axis Y */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6858      	ldr	r0, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7a19      	ldrb	r1, [r3, #8]
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	2202      	movs	r2, #2
 80030da:	9200      	str	r2, [sp, #0]
 80030dc:	224b      	movs	r2, #75	; 0x4b
 80030de:	f7ff fe37 	bl	8002d50 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 80030e2:	7b7b      	ldrb	r3, [r7, #13]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	b21a      	sxth	r2, r3
 80030e8:	7b3b      	ldrb	r3, [r7, #12]
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	b21b      	sxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80030fa:	b21a      	sxth	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	805a      	strh	r2, [r3, #2]

        /* Read magnetometer in axis Z */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6858      	ldr	r0, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7a19      	ldrb	r1, [r3, #8]
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	2202      	movs	r2, #2
 800310e:	9200      	str	r2, [sp, #0]
 8003110:	224d      	movs	r2, #77	; 0x4d
 8003112:	f7ff fe1d 	bl	8002d50 <MPU6050_ReadRegister>
        magnetometerValues->magnetometerZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]) / scaleFactor;
 8003116:	7b7b      	ldrb	r3, [r7, #13]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	b21a      	sxth	r2, r3
 800311c:	7b3b      	ldrb	r3, [r7, #12]
 800311e:	b21b      	sxth	r3, r3
 8003120:	4313      	orrs	r3, r2
 8003122:	b21b      	sxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800312a:	fb92 f3f3 	sdiv	r3, r2, r3
 800312e:	b21a      	sxth	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	809a      	strh	r2, [r3, #4]
 8003134:	e009      	b.n	800314a <GY87_ReadMagnetometer+0xcc>

    } else {
        /* Wrong parameters */
        magnetometerValues->magnetometerX = 0;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2200      	movs	r2, #0
 800313a:	801a      	strh	r2, [r3, #0]
        magnetometerValues->magnetometerY = 0;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	805a      	strh	r2, [r3, #2]
        magnetometerValues->magnetometerZ = 0;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2200      	movs	r2, #0
 8003146:	809a      	strh	r2, [r3, #4]
    }
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	0000      	movs	r0, r0
 8003154:	0000      	movs	r0, r0
	...

08003158 <GY87_ReadMagnetometerHeading>:

float GY87_ReadMagnetometerHeading(GY87_HandleTypeDef_t * hgy87) {
 8003158:	b5b0      	push	{r4, r5, r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

    /* Declare variable for compass heading */
    float heading;

    /* Check parameters */
    if (NULL != hgy87) {
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d04d      	beq.n	8003202 <GY87_ReadMagnetometerHeading+0xaa>

    	GY87_ReadMagnetometer(hgy87, &magnetometerValues);
 8003166:	f107 030c 	add.w	r3, r7, #12
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff86 	bl	800307e <GY87_ReadMagnetometer>

        /* Calculate heading */
        heading = atan2(-magnetometerValues.magnetometerY, -magnetometerValues.magnetometerX) * QMC5883L_RADIANS_TO_DEGREES_CONST + QMC5883L_MAGNETIC_DECLINATION + QMC5883L_CALIBRATION_OFFSET;
 8003172:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003176:	425b      	negs	r3, r3
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f9db 	bl	8000534 <__aeabi_i2d>
 800317e:	4604      	mov	r4, r0
 8003180:	460d      	mov	r5, r1
 8003182:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003186:	425b      	negs	r3, r3
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f9d3 	bl	8000534 <__aeabi_i2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	ec43 2b11 	vmov	d1, r2, r3
 8003196:	ec45 4b10 	vmov	d0, r4, r5
 800319a:	f00e fc8f 	bl	8011abc <atan2>
 800319e:	ec51 0b10 	vmov	r0, r1, d0
 80031a2:	a320      	add	r3, pc, #128	; (adr r3, 8003224 <GY87_ReadMagnetometerHeading+0xcc>)
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f7fd fa2e 	bl	8000608 <__aeabi_dmul>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	f7fd f86e 	bl	800029c <__adddf3>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <GY87_ReadMagnetometerHeading+0xc0>)
 80031ce:	f7fd f865 	bl	800029c <__adddf3>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	f7fd fd0d 	bl	8000bf8 <__aeabi_d2f>
 80031de:	4603      	mov	r3, r0
 80031e0:	617b      	str	r3, [r7, #20]

        /* Check if heading is within 0 and 360 degrees */
        if (heading < 0) {
 80031e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ee:	d50a      	bpl.n	8003206 <GY87_ReadMagnetometerHeading+0xae>
            heading += 360;
 80031f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031f4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800321c <GY87_ReadMagnetometerHeading+0xc4>
 80031f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031fc:	edc7 7a05 	vstr	s15, [r7, #20]
 8003200:	e001      	b.n	8003206 <GY87_ReadMagnetometerHeading+0xae>
        }

    } else {

        heading = -1;
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <GY87_ReadMagnetometerHeading+0xc8>)
 8003204:	617b      	str	r3, [r7, #20]
    }

    return heading;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	ee07 3a90 	vmov	s15, r3
}
 800320c:	eeb0 0a67 	vmov.f32	s0, s15
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bdb0      	pop	{r4, r5, r7, pc}
 8003216:	bf00      	nop
 8003218:	403a0000 	.word	0x403a0000
 800321c:	43b40000 	.word	0x43b40000
 8003220:	bf800000 	.word	0xbf800000
 8003224:	1a63c1f8 	.word	0x1a63c1f8
 8003228:	404ca5dc 	.word	0x404ca5dc

0800322c <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

    CDC_Transmit_FS(string, strlen((const char *)string));
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fd f823 	bl	8000280 <strlen>
 800323a:	4603      	mov	r3, r0
 800323c:	b29b      	uxth	r3, r3
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f00b fb2b 	bl	800e89c <CDC_Transmit_FS>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
int8_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b090      	sub	sp, #64	; 0x40
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]

    /* Check parameters */
    if (NULL == message) {
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <LOG+0x18>
        return -1;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003266:	e049      	b.n	80032fc <LOG+0xac>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d902      	bls.n	8003274 <LOG+0x24>
        return -1;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003272:	e043      	b.n	80032fc <LOG+0xac>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	f107 0310 	add.w	r3, r7, #16
 800327c:	222e      	movs	r2, #46	; 0x2e
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f00c fd72 	bl	800fd6a <memset>

    if (LOG_INFORMATION == logType) {
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d108      	bne.n	800329e <LOG+0x4e>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <LOG+0xb4>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f00c fd6f 	bl	800fd7a <strcat>
 800329c:	e022      	b.n	80032e4 <LOG+0x94>
    } else if (LOG_DEBUGGING == logType) {
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d108      	bne.n	80032b6 <LOG+0x66>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <LOG+0xb8>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	f107 030c 	add.w	r3, r7, #12
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f00c fd63 	bl	800fd7a <strcat>
 80032b4:	e016      	b.n	80032e4 <LOG+0x94>
    } else if (LOG_WARNING == logType) {
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d108      	bne.n	80032ce <LOG+0x7e>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 80032bc:	4b13      	ldr	r3, [pc, #76]	; (800330c <LOG+0xbc>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f00c fd57 	bl	800fd7a <strcat>
 80032cc:	e00a      	b.n	80032e4 <LOG+0x94>
    } else if (LOG_ERROR == logType) {
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d107      	bne.n	80032e4 <LOG+0x94>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <LOG+0xc0>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f107 030c 	add.w	r3, r7, #12
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f00c fd4b 	bl	800fd7a <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 80032e4:	f107 030c 	add.w	r3, r7, #12
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f00c fd45 	bl	800fd7a <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff99 	bl	800322c <USB_Write>

    return 0;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3740      	adds	r7, #64	; 0x40
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000014 	.word	0x20000014
 8003308:	20000018 	.word	0x20000018
 800330c:	2000001c 	.word	0x2000001c
 8003310:	20000020 	.word	0x20000020

08003314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <HAL_Init+0x40>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <HAL_Init+0x40>)
 800331e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_Init+0x40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_Init+0x40>)
 800332a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800332e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_Init+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a07      	ldr	r2, [pc, #28]	; (8003354 <HAL_Init+0x40>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800333c:	2003      	movs	r0, #3
 800333e:	f000 fd13 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003342:	200f      	movs	r0, #15
 8003344:	f000 f808 	bl	8003358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003348:	f7fe fc70 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023c00 	.word	0x40023c00

08003358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_InitTick+0x54>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_InitTick+0x58>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800336e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fd2f 	bl	8003dda <HAL_SYSTICK_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e00e      	b.n	80033a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b0f      	cmp	r3, #15
 800338a:	d80a      	bhi.n	80033a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800338c:	2200      	movs	r2, #0
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003394:	f000 fcf3 	bl	8003d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003398:	4a06      	ldr	r2, [pc, #24]	; (80033b4 <HAL_InitTick+0x5c>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000000 	.word	0x20000000
 80033b0:	20000028 	.word	0x20000028
 80033b4:	20000024 	.word	0x20000024

080033b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_IncTick+0x20>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_IncTick+0x24>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <HAL_IncTick+0x24>)
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000028 	.word	0x20000028
 80033dc:	20000bd8 	.word	0x20000bd8

080033e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return uwTick;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_GetTick+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000bd8 	.word	0x20000bd8

080033f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff ffee 	bl	80033e0 <HAL_GetTick>
 8003404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003410:	d005      	beq.n	800341e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_Delay+0x44>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800341e:	bf00      	nop
 8003420:	f7ff ffde 	bl	80033e0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	d8f7      	bhi.n	8003420 <HAL_Delay+0x28>
  {
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000028 	.word	0x20000028

08003440 <HAL_ADC_Init>:
 *
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef * hadc) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]

    /* Check ADC handle */
    if (hadc == NULL) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_Init+0x16>
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e033      	b.n	80034be <HAL_ADC_Init+0x7e>

    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
        assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
    }

    if (hadc->State == HAL_ADC_STATE_RESET) {
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_ADC_Init+0x32>

        /* Init the low level hardware */
        hadc->MspInitCallback(hadc);
#else
        /* Init the low level hardware */
        HAL_ADC_MspInit(hadc);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe fc10 	bl	8001c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

        /* Initialize ADC error code */
        ADC_CLEAR_ERRORCODE(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44

        /* Allocate lock resource and initialize it */
        hadc->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    /* Configuration of ADC parameters if previous preliminary actions are      */
    /* correctly completed.                                                     */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d118      	bne.n	80034b0 <HAL_ADC_Init+0x70>
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003486:	f023 0302 	bic.w	r3, r3, #2
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set ADC parameters */
        ADC_Init(hadc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa86 	bl	80039a4 <ADC_Init>

        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
 80034ae:	e001      	b.n	80034b4 <HAL_ADC_Init+0x74>
    } else {
        tmp_hal_status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
    }

    /* Release Lock */
    __HAL_UNLOCK(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return tmp_hal_status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_ADC_Start>:
 * @brief  Enables ADC and starts conversion of the regular channels.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef * hadc) {
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
    __IO uint32_t counter = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

    /* Process locked */
    __HAL_LOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_Start+0x1a>
 80034de:	2302      	movs	r3, #2
 80034e0:	e097      	b.n	8003612 <HAL_ADC_Start+0x14a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the ADC peripheral */
    /* Check if ADC peripheral is disabled in order to enable it and wait during
    Tstab time the ADC's stabilization */
    if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d018      	beq.n	800352a <HAL_ADC_Start+0x62>
        /* Enable the Peripheral */
        __HAL_ADC_ENABLE(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	609a      	str	r2, [r3, #8]

        /* Delay for ADC stabilization time */
        /* Compute number of CPU cycles to wait for */
        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003508:	4b45      	ldr	r3, [pc, #276]	; (8003620 <HAL_ADC_Start+0x158>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a45      	ldr	r2, [pc, #276]	; (8003624 <HAL_ADC_Start+0x15c>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0c9a      	lsrs	r2, r3, #18
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 800351c:	e002      	b.n	8003524 <HAL_ADC_Start+0x5c>
            counter--;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3b01      	subs	r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f9      	bne.n	800351e <HAL_ADC_Start+0x56>
        }
    }

    /* Start conversion if ADC is effectively enabled */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d15f      	bne.n	80035f8 <HAL_ADC_Start+0x130>
        /* Set ADC state                                                          */
        /* - Clear state bitfield related to regular group conversion results     */
        /* - Set state bitfield related to regular group operation                */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR, HAL_ADC_STATE_REG_BUSY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

        /* If conversions on group regular are also triggering group injected,    */
        /* update ADC state.                                                      */
        if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_ADC_Start+0xa2>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003562:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
        }

        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003576:	d106      	bne.n	8003586 <HAL_ADC_Start+0xbe>
            /* Reset ADC error code fields related to conversions on group regular */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f023 0206 	bic.w	r2, r3, #6
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
 8003584:	e002      	b.n	800358c <HAL_ADC_Start+0xc4>
        } else {
            /* Reset ADC all error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential           */
        /* interruption, to let the process to ADC IRQ Handler.                   */
        __HAL_UNLOCK(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Pointer to the common control register to which is belonging hadc    */
        /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
        /* control register)                                                    */
        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_ADC_Start+0x160>)
 8003596:	60fb      	str	r3, [r7, #12]

        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC operations) */
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035a0:	601a      	str	r2, [r3, #0]

        /* Check if Multimode enabled */
        if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI)) {
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <HAL_ADC_Start+0x106>
#if defined(ADC2) && defined(ADC3)
            if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4))) {
#endif /* ADC2 || ADC3 */
                /* if no external trigger present enable software conversion of regular channels */
                if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d129      	bne.n	8003610 <HAL_ADC_Start+0x148>
                    /* Enable the selected ADC software conversion for regular group */
                    hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	e020      	b.n	8003610 <HAL_ADC_Start+0x148>
#if defined(ADC2) && defined(ADC3)
            }
#endif /* ADC2 || ADC3 */
        } else {
            /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
            if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a16      	ldr	r2, [pc, #88]	; (800362c <HAL_ADC_Start+0x164>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d11b      	bne.n	8003610 <HAL_ADC_Start+0x148>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d114      	bne.n	8003610 <HAL_ADC_Start+0x148>
                /* Enable the selected ADC software conversion for regular group */
                hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035f4:	609a      	str	r2, [r3, #8]
 80035f6:	e00b      	b.n	8003610 <HAL_ADC_Start+0x148>
            }
        }
    } else {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f043 0210 	orr.w	r2, r3, #16
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Return function status */
    return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000000 	.word	0x20000000
 8003624:	431bde83 	.word	0x431bde83
 8003628:	40012300 	.word	0x40012300
 800362c:	40012000 	.word	0x40012000

08003630 <HAL_ADC_PollForConversion>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  Timeout Timeout value in millisecond.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef * hadc, uint32_t Timeout) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
    uint32_t tickstart = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and polling for end of each conversion.     */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) && HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)) {
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364c:	d113      	bne.n	8003676 <HAL_ADC_PollForConversion+0x46>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365c:	d10b      	bne.n	8003676 <HAL_ADC_PollForConversion+0x46>
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e063      	b.n	800373e <HAL_ADC_PollForConversion+0x10e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8003676:	f7ff feb3 	bl	80033e0 <HAL_GetTick>
 800367a:	60f8      	str	r0, [r7, #12]

    /* Check End of conversion flag */
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 800367c:	e021      	b.n	80036c2 <HAL_ADC_PollForConversion+0x92>
        /* Check if timeout is disabled (set to infinite wait) */
        if (Timeout != HAL_MAX_DELAY) {
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003684:	d01d      	beq.n	80036c2 <HAL_ADC_PollForConversion+0x92>
            if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)) {
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_ADC_PollForConversion+0x6c>
 800368c:	f7ff fea8 	bl	80033e0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d212      	bcs.n	80036c2 <HAL_ADC_PollForConversion+0x92>
                /* New check to avoid false timeout detection in case of preemption */
                if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d00b      	beq.n	80036c2 <HAL_ADC_PollForConversion+0x92>
                    /* Update ADC state machine to timeout */
                    SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f043 0204 	orr.w	r2, r3, #4
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40

                    /* Process unlocked */
                    __HAL_UNLOCK(hadc);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                    return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e03d      	b.n	800373e <HAL_ADC_PollForConversion+0x10e>
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d1d6      	bne.n	800367e <HAL_ADC_PollForConversion+0x4e>
            }
        }
    }

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0212 	mvn.w	r2, #18
 80036d8:	601a      	str	r2, [r3, #0]

    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.          */
    /* Note: On STM32F4, there is no independent flag of end of sequence.       */
    /*       The test of scan sequence on going is done either with scan        */
    /*       sequence disabled or with end of conversion flag set to            */
    /*       of end of sequence.                                                */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc) && (hadc->Init.ContinuousConvMode == DISABLE) && (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d123      	bne.n	800373c <HAL_ADC_PollForConversion+0x10c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7e1b      	ldrb	r3, [r3, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11f      	bne.n	800373c <HAL_ADC_PollForConversion+0x10c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <HAL_ADC_PollForConversion+0xe8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d111      	bne.n	800373c <HAL_ADC_PollForConversion+0x10c>
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d105      	bne.n	800373c <HAL_ADC_PollForConversion+0x10c>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
        }
    }

    /* Return ADC state */
    return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_ADC_GetValue>:
 * @brief  Gets the converted value from data register of regular channel.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval Converted value
 */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef * hadc) {
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
    /* Return the selected ADC converted value */
    return hadc->Instance->DR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_ADC_ConfigChannel>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  sConfig ADC configuration structure.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef * hadc, ADC_ChannelConfTypeDef * sConfig) {
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
    __IO uint32_t counter = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

    /* Process locked */
    __HAL_LOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x1c>
 8003778:	2302      	movs	r3, #2
 800377a:	e105      	b.n	8003988 <HAL_ADC_ConfigChannel+0x228>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
    if (sConfig->Channel > ADC_CHANNEL_9) {
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b09      	cmp	r3, #9
 800378a:	d925      	bls.n	80037d8 <HAL_ADC_ConfigChannel+0x78>
        /* Clear the old sample time */
        hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68d9      	ldr	r1, [r3, #12]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	3b1e      	subs	r3, #30
 80037a2:	2207      	movs	r2, #7
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43da      	mvns	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	400a      	ands	r2, r1
 80037b0:	60da      	str	r2, [r3, #12]

        /* Set the new sample time */
        hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68d9      	ldr	r1, [r3, #12]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4618      	mov	r0, r3
 80037c4:	4603      	mov	r3, r0
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4403      	add	r3, r0
 80037ca:	3b1e      	subs	r3, #30
 80037cc:	409a      	lsls	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	e022      	b.n	800381e <HAL_ADC_ConfigChannel+0xbe>
    } else /* ADC_Channel include in ADC_Channel_[0..9] */
    {
        /* Clear the old sample time */
        hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6919      	ldr	r1, [r3, #16]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	2207      	movs	r2, #7
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	400a      	ands	r2, r1
 80037fa:	611a      	str	r2, [r3, #16]

        /* Set the new sample time */
        hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6919      	ldr	r1, [r3, #16]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	4603      	mov	r3, r0
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4403      	add	r3, r0
 8003814:	409a      	lsls	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	611a      	str	r2, [r3, #16]
    }

    /* For Rank 1 to 6 */
    if (sConfig->Rank < 7U) {
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d824      	bhi.n	8003870 <HAL_ADC_ConfigChannel+0x110>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	3b05      	subs	r3, #5
 8003838:	221f      	movs	r2, #31
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	400a      	ands	r2, r1
 8003846:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	3b05      	subs	r3, #5
 8003862:	fa00 f203 	lsl.w	r2, r0, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	635a      	str	r2, [r3, #52]	; 0x34
 800386e:	e04c      	b.n	800390a <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 7 to 12 */
    else if (sConfig->Rank < 13U) {
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d824      	bhi.n	80038c2 <HAL_ADC_ConfigChannel+0x162>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	3b23      	subs	r3, #35	; 0x23
 800388a:	221f      	movs	r2, #31
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43da      	mvns	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	400a      	ands	r2, r1
 8003898:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	3b23      	subs	r3, #35	; 0x23
 80038b4:	fa00 f203 	lsl.w	r2, r0, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
 80038c0:	e023      	b.n	800390a <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 13 to 16 */
    else {
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	3b41      	subs	r3, #65	; 0x41
 80038d4:	221f      	movs	r2, #31
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	400a      	ands	r2, r1
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3b41      	subs	r3, #65	; 0x41
 80038fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800390a:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_ADC_ConfigChannel+0x234>)
 800390c:	60fb      	str	r3, [r7, #12]

    /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
    if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a21      	ldr	r2, [pc, #132]	; (8003998 <HAL_ADC_ConfigChannel+0x238>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d109      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1cc>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b12      	cmp	r3, #18
 800391e:	d105      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1cc>
        /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
        }
        /* Enable the VBAT channel*/
        tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
    }

    /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
       Channel_17 is selected for VREFINT enable TSVREFE */
    if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a19      	ldr	r2, [pc, #100]	; (8003998 <HAL_ADC_ConfigChannel+0x238>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d123      	bne.n	800397e <HAL_ADC_ConfigChannel+0x21e>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b10      	cmp	r3, #16
 800393c:	d003      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x1e6>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b11      	cmp	r3, #17
 8003944:	d11b      	bne.n	800397e <HAL_ADC_ConfigChannel+0x21e>
        /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
        }
        /* Enable the Temperature sensor and VREFINT channel*/
        tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	605a      	str	r2, [r3, #4]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b10      	cmp	r3, #16
 8003958:	d111      	bne.n	800397e <HAL_ADC_ConfigChannel+0x21e>
            /* Delay for temperature sensor stabilization time */
            /* Compute number of CPU cycles to wait for */
            counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_ADC_ConfigChannel+0x23c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <HAL_ADC_ConfigChannel+0x240>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	0c9a      	lsrs	r2, r3, #18
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8003970:	e002      	b.n	8003978 <HAL_ADC_ConfigChannel+0x218>
                counter--;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3b01      	subs	r3, #1
 8003976:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f9      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x212>
            }
        }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40012300 	.word	0x40012300
 8003998:	40012000 	.word	0x40012000
 800399c:	20000000 	.word	0x20000000
 80039a0:	431bde83 	.word	0x431bde83

080039a4 <ADC_Init>:
 *         in the ADC_InitStruct without initializing the ADC MSP.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
static void ADC_Init(ADC_HandleTypeDef * hadc) {
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

    /* Set ADC parameters */
    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039ac:	4b79      	ldr	r3, [pc, #484]	; (8003b94 <ADC_Init+0x1f0>)
 80039ae:	60fb      	str	r3, [r7, #12]

    /* Set the ADC clock prescaler */
    tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]

    /* Set ADC scan mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	021a      	lsls	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]

    /* Set ADC resolution */
    hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039fc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= hadc->Init.Resolution;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]

    /* Set ADC data alignment */
    hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6899      	ldr	r1, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <ADC_Init+0x1f4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d022      	beq.n	8003a82 <ADC_Init+0xde>
        /* Select external trigger to start conversion */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a4a:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]

        /* Select external trigger polarity */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a6c:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	e00f      	b.n	8003aa2 <ADC_Init+0xfe>
    } else {
        /* Reset the external trigger */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a90:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aa0:	609a      	str	r2, [r3, #8]
    }

    /* Enable or disable ADC continuous conversion mode */
    hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0202 	bic.w	r2, r2, #2
 8003ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6899      	ldr	r1, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	7e1b      	ldrb	r3, [r3, #24]
 8003abc:	005a      	lsls	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]

    if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01b      	beq.n	8003b08 <ADC_Init+0x164>
        assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

        /* Enable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ade:	605a      	str	r2, [r3, #4]

        /* Set the number of channels to be converted in discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003aee:	605a      	str	r2, [r3, #4]
        hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	3b01      	subs	r3, #1
 8003afc:	035a      	lsls	r2, r3, #13
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	e007      	b.n	8003b18 <ADC_Init+0x174>
    } else {
        /* Disable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b16:	605a      	str	r2, [r3, #4]
    }

    /* Set ADC number of conversion */
    hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	051a      	lsls	r2, r3, #20
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable or disable ADC DMA continuous request */
    hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6899      	ldr	r1, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b5a:	025a      	lsls	r2, r3, #9
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]

    /* Enable or disable ADC end of conversion selection */
    hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6899      	ldr	r1, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	029a      	lsls	r2, r3, #10
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	40012300 	.word	0x40012300
 8003b98:	0f000001 	.word	0x0f000001

08003b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bce:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	60d3      	str	r3, [r2, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <__NVIC_GetPriorityGrouping+0x18>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 0307 	and.w	r3, r3, #7
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	db0b      	blt.n	8003c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	4907      	ldr	r1, [pc, #28]	; (8003c38 <__NVIC_EnableIRQ+0x38>)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2001      	movs	r0, #1
 8003c22:	fa00 f202 	lsl.w	r2, r0, r2
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000e100 	.word	0xe000e100

08003c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	db0a      	blt.n	8003c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	490c      	ldr	r1, [pc, #48]	; (8003c88 <__NVIC_SetPriority+0x4c>)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c64:	e00a      	b.n	8003c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	4908      	ldr	r1, [pc, #32]	; (8003c8c <__NVIC_SetPriority+0x50>)
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3b04      	subs	r3, #4
 8003c74:	0112      	lsls	r2, r2, #4
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	440b      	add	r3, r1
 8003c7a:	761a      	strb	r2, [r3, #24]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000e100 	.word	0xe000e100
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	; 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f1c3 0307 	rsb	r3, r3, #7
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	bf28      	it	cs
 8003cae:	2304      	movcs	r3, #4
 8003cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d902      	bls.n	8003cc0 <NVIC_EncodePriority+0x30>
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3b03      	subs	r3, #3
 8003cbe:	e000      	b.n	8003cc2 <NVIC_EncodePriority+0x32>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	43d9      	mvns	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	4313      	orrs	r3, r2
         );
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3724      	adds	r7, #36	; 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cfc:	f3bf 8f4f 	dsb	sy
}
 8003d00:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <__NVIC_SystemReset+0x24>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003d0a:	4904      	ldr	r1, [pc, #16]	; (8003d1c <__NVIC_SystemReset+0x24>)
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <__NVIC_SystemReset+0x28>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d12:	f3bf 8f4f 	dsb	sy
}
 8003d16:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <__NVIC_SystemReset+0x20>
 8003d1c:	e000ed00 	.word	0xe000ed00
 8003d20:	05fa0004 	.word	0x05fa0004

08003d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d34:	d301      	bcc.n	8003d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00f      	b.n	8003d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <SysTick_Config+0x40>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d42:	210f      	movs	r1, #15
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d48:	f7ff ff78 	bl	8003c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <SysTick_Config+0x40>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <SysTick_Config+0x40>)
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000e010 	.word	0xe000e010

08003d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff13 	bl	8003b9c <__NVIC_SetPriorityGrouping>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d90:	f7ff ff28 	bl	8003be4 <__NVIC_GetPriorityGrouping>
 8003d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff ff78 	bl	8003c90 <NVIC_EncodePriority>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff47 	bl	8003c3c <__NVIC_SetPriority>
}
 8003dae:	bf00      	nop
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff1b 	bl	8003c00 <__NVIC_EnableIRQ>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003dd6:	f7ff ff8f 	bl	8003cf8 <__NVIC_SystemReset>

08003dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff ff9e 	bl	8003d24 <SysTick_Config>
 8003de8:	4603      	mov	r3, r0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e00:	f7ff faee 	bl	80033e0 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e099      	b.n	8003f44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e30:	e00f      	b.n	8003e52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e32:	f7ff fad5 	bl	80033e0 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d908      	bls.n	8003e52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e078      	b.n	8003f44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e8      	bne.n	8003e32 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <HAL_DMA_Init+0x158>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d107      	bne.n	8003ebc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d117      	bne.n	8003f16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8e5 	bl	80040c8 <DMA_CheckFifoParam>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2240      	movs	r2, #64	; 0x40
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e016      	b.n	8003f44 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f89c 	bl	800405c <DMA_CalcBaseAndBitshift>
 8003f24:	4603      	mov	r3, r0
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	223f      	movs	r2, #63	; 0x3f
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	f010803f 	.word	0xf010803f

08003f50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_DMA_Start_IT+0x26>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e040      	b.n	8003ff8 <HAL_DMA_Start_IT+0xa8>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d12f      	bne.n	8003fea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f82e 	bl	8004000 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	223f      	movs	r2, #63	; 0x3f
 8003faa:	409a      	lsls	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0216 	orr.w	r2, r2, #22
 8003fbe:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0208 	orr.w	r2, r2, #8
 8003fd6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e005      	b.n	8003ff6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800401c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d108      	bne.n	8004040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800403e:	e007      	b.n	8004050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	3b10      	subs	r3, #16
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <DMA_CalcBaseAndBitshift+0x64>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d909      	bls.n	800409e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	1d1a      	adds	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	659a      	str	r2, [r3, #88]	; 0x58
 800409c:	e007      	b.n	80040ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	aaaaaaab 	.word	0xaaaaaaab
 80040c4:	080121d4 	.word	0x080121d4

080040c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11f      	bne.n	8004122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d856      	bhi.n	8004196 <DMA_CheckFifoParam+0xce>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <DMA_CheckFifoParam+0x28>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004101 	.word	0x08004101
 80040f4:	08004113 	.word	0x08004113
 80040f8:	08004101 	.word	0x08004101
 80040fc:	08004197 	.word	0x08004197
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d046      	beq.n	800419a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004110:	e043      	b.n	800419a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800411a:	d140      	bne.n	800419e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004120:	e03d      	b.n	800419e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412a:	d121      	bne.n	8004170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d837      	bhi.n	80041a2 <DMA_CheckFifoParam+0xda>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <DMA_CheckFifoParam+0x70>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004149 	.word	0x08004149
 800413c:	0800414f 	.word	0x0800414f
 8004140:	08004149 	.word	0x08004149
 8004144:	08004161 	.word	0x08004161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      break;
 800414c:	e030      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d025      	beq.n	80041a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415e:	e022      	b.n	80041a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004168:	d11f      	bne.n	80041aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416e:	e01c      	b.n	80041aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d903      	bls.n	800417e <DMA_CheckFifoParam+0xb6>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d003      	beq.n	8004184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800417c:	e018      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      break;
 8004182:	e015      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00e      	beq.n	80041ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e00b      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      break;
 8004196:	bf00      	nop
 8004198:	e00a      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 800419a:	bf00      	nop
 800419c:	e008      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 800419e:	bf00      	nop
 80041a0:	e006      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 80041a2:	bf00      	nop
 80041a4:	e004      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <DMA_CheckFifoParam+0xe8>
      break;
 80041ae:	bf00      	nop
    }
  }

  return status;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop

080041c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e159      	b.n	8004490 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041dc:	2201      	movs	r2, #1
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	f040 8148 	bne.w	800448a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b01      	cmp	r3, #1
 8004204:	d005      	beq.n	8004212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800420e:	2b02      	cmp	r3, #2
 8004210:	d130      	bne.n	8004274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	2203      	movs	r2, #3
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004248:	2201      	movs	r2, #1
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 0201 	and.w	r2, r3, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b03      	cmp	r3, #3
 800427e:	d017      	beq.n	80042b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	2203      	movs	r2, #3
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d123      	bne.n	8004304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	08da      	lsrs	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3208      	adds	r2, #8
 80042c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	220f      	movs	r2, #15
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	08da      	lsrs	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3208      	adds	r2, #8
 80042fe:	69b9      	ldr	r1, [r7, #24]
 8004300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2203      	movs	r2, #3
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0203 	and.w	r2, r3, #3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80a2 	beq.w	800448a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	4b57      	ldr	r3, [pc, #348]	; (80044a8 <HAL_GPIO_Init+0x2e8>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	4a56      	ldr	r2, [pc, #344]	; (80044a8 <HAL_GPIO_Init+0x2e8>)
 8004350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004354:	6453      	str	r3, [r2, #68]	; 0x44
 8004356:	4b54      	ldr	r3, [pc, #336]	; (80044a8 <HAL_GPIO_Init+0x2e8>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004362:	4a52      	ldr	r2, [pc, #328]	; (80044ac <HAL_GPIO_Init+0x2ec>)
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	3302      	adds	r3, #2
 800436a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	220f      	movs	r2, #15
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a49      	ldr	r2, [pc, #292]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d019      	beq.n	80043c2 <HAL_GPIO_Init+0x202>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a48      	ldr	r2, [pc, #288]	; (80044b4 <HAL_GPIO_Init+0x2f4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_GPIO_Init+0x1fe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a47      	ldr	r2, [pc, #284]	; (80044b8 <HAL_GPIO_Init+0x2f8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00d      	beq.n	80043ba <HAL_GPIO_Init+0x1fa>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a46      	ldr	r2, [pc, #280]	; (80044bc <HAL_GPIO_Init+0x2fc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <HAL_GPIO_Init+0x1f6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a45      	ldr	r2, [pc, #276]	; (80044c0 <HAL_GPIO_Init+0x300>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_GPIO_Init+0x1f2>
 80043ae:	2304      	movs	r3, #4
 80043b0:	e008      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043b2:	2307      	movs	r3, #7
 80043b4:	e006      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043b6:	2303      	movs	r3, #3
 80043b8:	e004      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e002      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <HAL_GPIO_Init+0x204>
 80043c2:	2300      	movs	r3, #0
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	f002 0203 	and.w	r2, r2, #3
 80043ca:	0092      	lsls	r2, r2, #2
 80043cc:	4093      	lsls	r3, r2
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043d4:	4935      	ldr	r1, [pc, #212]	; (80044ac <HAL_GPIO_Init+0x2ec>)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	089b      	lsrs	r3, r3, #2
 80043da:	3302      	adds	r3, #2
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043e2:	4b38      	ldr	r3, [pc, #224]	; (80044c4 <HAL_GPIO_Init+0x304>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <HAL_GPIO_Init+0x304>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004436:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800445a:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <HAL_GPIO_Init+0x304>)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004460:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004484:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3301      	adds	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b0f      	cmp	r3, #15
 8004494:	f67f aea2 	bls.w	80041dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3724      	adds	r7, #36	; 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40013800 	.word	0x40013800
 80044b0:	40020000 	.word	0x40020000
 80044b4:	40020400 	.word	0x40020400
 80044b8:	40020800 	.word	0x40020800
 80044bc:	40020c00 	.word	0x40020c00
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40013c00 	.word	0x40013c00

080044c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
 80044e4:	e001      	b.n	80044ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	807b      	strh	r3, [r7, #2]
 8004504:	4613      	mov	r3, r2
 8004506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004508:	787b      	ldrb	r3, [r7, #1]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004514:	e003      	b.n	800451e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	041a      	lsls	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	619a      	str	r2, [r3, #24]
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e12b      	b.n	8004796 <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fd fbda 	bl	8001d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2224      	movs	r2, #36	; 0x24
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457e:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800458e:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8004590:	f002 fe38 	bl	8007204 <HAL_RCC_GetPCLK1Freq>
 8004594:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4a81      	ldr	r2, [pc, #516]	; (80047a0 <HAL_I2C_Init+0x274>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d807      	bhi.n	80045b0 <HAL_I2C_Init+0x84>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a80      	ldr	r2, [pc, #512]	; (80047a4 <HAL_I2C_Init+0x278>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	bf94      	ite	ls
 80045a8:	2301      	movls	r3, #1
 80045aa:	2300      	movhi	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e006      	b.n	80045be <HAL_I2C_Init+0x92>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a7d      	ldr	r2, [pc, #500]	; (80047a8 <HAL_I2C_Init+0x27c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bf94      	ite	ls
 80045b8:	2301      	movls	r3, #1
 80045ba:	2300      	movhi	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0e7      	b.n	8004796 <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a78      	ldr	r2, [pc, #480]	; (80047ac <HAL_I2C_Init+0x280>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0c9b      	lsrs	r3, r3, #18
 80045d0:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a6a      	ldr	r2, [pc, #424]	; (80047a0 <HAL_I2C_Init+0x274>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d802      	bhi.n	8004600 <HAL_I2C_Init+0xd4>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	3301      	adds	r3, #1
 80045fe:	e009      	b.n	8004614 <HAL_I2C_Init+0xe8>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	4a69      	ldr	r2, [pc, #420]	; (80047b0 <HAL_I2C_Init+0x284>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	099b      	lsrs	r3, r3, #6
 8004612:	3301      	adds	r3, #1
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	430b      	orrs	r3, r1
 800461a:	6213      	str	r3, [r2, #32]

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004626:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	495c      	ldr	r1, [pc, #368]	; (80047a0 <HAL_I2C_Init+0x274>)
 8004630:	428b      	cmp	r3, r1
 8004632:	d819      	bhi.n	8004668 <HAL_I2C_Init+0x13c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1e59      	subs	r1, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004642:	1c59      	adds	r1, r3, #1
 8004644:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004648:	400b      	ands	r3, r1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_I2C_Init+0x138>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1e59      	subs	r1, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fbb1 f3f3 	udiv	r3, r1, r3
 800465c:	3301      	adds	r3, #1
 800465e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004662:	e051      	b.n	8004708 <HAL_I2C_Init+0x1dc>
 8004664:	2304      	movs	r3, #4
 8004666:	e04f      	b.n	8004708 <HAL_I2C_Init+0x1dc>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d111      	bne.n	8004694 <HAL_I2C_Init+0x168>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1e58      	subs	r0, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6859      	ldr	r1, [r3, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	440b      	add	r3, r1
 800467e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004682:	3301      	adds	r3, #1
 8004684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e012      	b.n	80046ba <HAL_I2C_Init+0x18e>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1e58      	subs	r0, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	0099      	lsls	r1, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Init+0x196>
 80046be:	2301      	movs	r3, #1
 80046c0:	e022      	b.n	8004708 <HAL_I2C_Init+0x1dc>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10e      	bne.n	80046e8 <HAL_I2C_Init+0x1bc>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1e58      	subs	r0, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6859      	ldr	r1, [r3, #4]
 80046d2:	460b      	mov	r3, r1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	440b      	add	r3, r1
 80046d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e6:	e00f      	b.n	8004708 <HAL_I2C_Init+0x1dc>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1e58      	subs	r0, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	0099      	lsls	r1, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fe:	3301      	adds	r3, #1
 8004700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	6809      	ldr	r1, [r1, #0]
 800470c:	4313      	orrs	r3, r2
 800470e:	61cb      	str	r3, [r1, #28]

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004736:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6911      	ldr	r1, [r2, #16]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68d2      	ldr	r2, [r2, #12]
 8004742:	4311      	orrs	r1, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	430b      	orrs	r3, r1
 800474a:	6093      	str	r3, [r2, #8]

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	000186a0 	.word	0x000186a0
 80047a4:	001e847f 	.word	0x001e847f
 80047a8:	003d08ff 	.word	0x003d08ff
 80047ac:	431bde83 	.word	0x431bde83
 80047b0:	10624dd3 	.word	0x10624dd3

080047b4 <HAL_I2C_Mem_Write>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	817b      	strh	r3, [r7, #10]
 80047c6:	460b      	mov	r3, r1
 80047c8:	813b      	strh	r3, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 80047ce:	f7fe fe07 	bl	80033e0 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b20      	cmp	r3, #32
 80047de:	f040 80d9 	bne.w	8004994 <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2319      	movs	r3, #25
 80047e8:	2201      	movs	r2, #1
 80047ea:	496d      	ldr	r1, [pc, #436]	; (80049a0 <HAL_I2C_Mem_Write+0x1ec>)
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fc7f 	bl	80050f0 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Mem_Write+0x48>
            return HAL_BUSY;
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0cc      	b.n	8004996 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_I2C_Mem_Write+0x56>
 8004806:	2302      	movs	r3, #2
 8004808:	e0c5      	b.n	8004996 <HAL_I2C_Mem_Write+0x1e2>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d007      	beq.n	8004830 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2221      	movs	r2, #33	; 0x21
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2240      	movs	r2, #64	; 0x40
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004860:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a4d      	ldr	r2, [pc, #308]	; (80049a4 <HAL_I2C_Mem_Write+0x1f0>)
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8004872:	88f8      	ldrh	r0, [r7, #6]
 8004874:	893a      	ldrh	r2, [r7, #8]
 8004876:	8979      	ldrh	r1, [r7, #10]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	4603      	mov	r3, r0
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 fab6 	bl	8004df4 <I2C_RequestMemoryWrite>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d052      	beq.n	8004934 <HAL_I2C_Mem_Write+0x180>
            return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e081      	b.n	8004996 <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fd00 	bl	800529c <I2C_WaitOnTXEFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00d      	beq.n	80048be <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d107      	bne.n	80048ba <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b8:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e06b      	b.n	8004996 <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	781a      	ldrb	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24

            /* Update counter */
            hi2c->XferSize--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
            hi2c->XferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	855a      	strh	r2, [r3, #42]	; 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d11b      	bne.n	8004934 <HAL_I2C_Mem_Write+0x180>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d017      	beq.n	8004934 <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1aa      	bne.n	8004892 <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fcec 	bl	800531e <I2C_WaitOnBTFFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00d      	beq.n	8004968 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2b04      	cmp	r3, #4
 8004952:	d107      	bne.n	8004964 <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004962:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e016      	b.n	8004996 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004976:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
    }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	00100002 	.word	0x00100002
 80049a4:	ffff0000 	.word	0xffff0000

080049a8 <HAL_I2C_Mem_Read>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08c      	sub	sp, #48	; 0x30
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	4608      	mov	r0, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	461a      	mov	r2, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	817b      	strh	r3, [r7, #10]
 80049ba:	460b      	mov	r3, r1
 80049bc:	813b      	strh	r3, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 80049c2:	f7fe fd0d 	bl	80033e0 <HAL_GetTick>
 80049c6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	f040 8208 	bne.w	8004de6 <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2319      	movs	r3, #25
 80049dc:	2201      	movs	r2, #1
 80049de:	497b      	ldr	r1, [pc, #492]	; (8004bcc <HAL_I2C_Mem_Read+0x224>)
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fb85 	bl	80050f0 <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_Mem_Read+0x48>
            return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
 80049ee:	e1fb      	b.n	8004de8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_I2C_Mem_Read+0x56>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e1f4      	b.n	8004de8 <HAL_I2C_Mem_Read+0x440>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d007      	beq.n	8004a24 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a32:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2222      	movs	r2, #34	; 0x22
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a5b      	ldr	r2, [pc, #364]	; (8004bd0 <HAL_I2C_Mem_Read+0x228>)
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8004a66:	88f8      	ldrh	r0, [r7, #6]
 8004a68:	893a      	ldrh	r2, [r7, #8]
 8004a6a:	8979      	ldrh	r1, [r7, #10]
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4603      	mov	r3, r0
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fa52 	bl	8004f20 <I2C_RequestMemoryRead>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_I2C_Mem_Read+0xde>
            return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e1b0      	b.n	8004de8 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d113      	bne.n	8004ab6 <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	623b      	str	r3, [r7, #32]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e184      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d11b      	bne.n	8004af6 <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004acc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	e164      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d11b      	bne.n	8004b36 <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0c:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	e144      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8004b4c:	e138      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	f200 80f1 	bhi.w	8004d3a <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d123      	bne.n	8004ba8 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fc1b 	bl	80053a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e139      	b.n	8004de8 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ba6:	e10b      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d14e      	bne.n	8004c4e <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4906      	ldr	r1, [pc, #24]	; (8004bd4 <HAL_I2C_Mem_Read+0x22c>)
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fa98 	bl	80050f0 <I2C_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d008      	beq.n	8004bd8 <HAL_I2C_Mem_Read+0x230>
                        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e10e      	b.n	8004de8 <HAL_I2C_Mem_Read+0x440>
 8004bca:	bf00      	nop
 8004bcc:	00100002 	.word	0x00100002
 8004bd0:	ffff0000 	.word	0xffff0000
 8004bd4:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be6:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c4c:	e0b8      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	2200      	movs	r2, #0
 8004c56:	4966      	ldr	r1, [pc, #408]	; (8004df0 <HAL_I2C_Mem_Read+0x448>)
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa49 	bl	80050f0 <I2C_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_I2C_Mem_Read+0x2c0>
                        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0bf      	b.n	8004de8 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	494f      	ldr	r1, [pc, #316]	; (8004df0 <HAL_I2C_Mem_Read+0x448>)
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fa1b 	bl	80050f0 <I2C_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_I2C_Mem_Read+0x31c>
                        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e091      	b.n	8004de8 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd2:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d38:	e042      	b.n	8004dc0 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fb2e 	bl	80053a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e04c      	b.n	8004de8 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d118      	bne.n	8004dc0 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f47f aec2 	bne.w	8004b4e <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
    }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3728      	adds	r7, #40	; 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	00010004 	.word	0x00010004

08004df4 <I2C_RequestMemoryWrite>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	461a      	mov	r2, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	817b      	strh	r3, [r7, #10]
 8004e06:	460b      	mov	r3, r1
 8004e08:	813b      	strh	r3, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f960 	bl	80050f0 <I2C_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e44:	d103      	bne.n	8004e4e <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e05f      	b.n	8004f12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e52:	897b      	ldrh	r3, [r7, #10]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e60:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	6a3a      	ldr	r2, [r7, #32]
 8004e66:	492d      	ldr	r1, [pc, #180]	; (8004f1c <I2C_RequestMemoryWrite+0x128>)
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f998 	bl	800519e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <I2C_RequestMemoryWrite+0x84>
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e04c      	b.n	8004f12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e90:	6a39      	ldr	r1, [r7, #32]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fa02 	bl	800529c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d107      	bne.n	8004eb6 <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e02b      	b.n	8004f12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d105      	bne.n	8004ecc <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ec0:	893b      	ldrh	r3, [r7, #8]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	611a      	str	r2, [r3, #16]
 8004eca:	e021      	b.n	8004f10 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ecc:	893b      	ldrh	r3, [r7, #8]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8004eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004edc:	6a39      	ldr	r1, [r7, #32]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f9dc 	bl	800529c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00d      	beq.n	8004f06 <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d107      	bne.n	8004f02 <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f00:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e005      	b.n	8004f12 <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f06:	893b      	ldrh	r3, [r7, #8]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	00010002 	.word	0x00010002

08004f20 <I2C_RequestMemoryRead>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	4608      	mov	r0, r1
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4603      	mov	r3, r0
 8004f30:	817b      	strh	r3, [r7, #10]
 8004f32:	460b      	mov	r3, r1
 8004f34:	813b      	strh	r3, [r7, #8]
 8004f36:	4613      	mov	r3, r2
 8004f38:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f48:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f58:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f8c2 	bl	80050f0 <I2C_WaitOnFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00d      	beq.n	8004f8e <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f80:	d103      	bne.n	8004f8a <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e0aa      	b.n	80050e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f8e:	897b      	ldrh	r3, [r7, #10]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f9c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	6a3a      	ldr	r2, [r7, #32]
 8004fa2:	4952      	ldr	r1, [pc, #328]	; (80050ec <I2C_RequestMemoryRead+0x1cc>)
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f8fa 	bl	800519e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <I2C_RequestMemoryRead+0x94>
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e097      	b.n	80050e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8004fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fcc:	6a39      	ldr	r1, [r7, #32]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f964 	bl	800529c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d107      	bne.n	8004ff2 <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e076      	b.n	80050e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d105      	bne.n	8005008 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ffc:	893b      	ldrh	r3, [r7, #8]
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	611a      	str	r2, [r3, #16]
 8005006:	e021      	b.n	800504c <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005008:	893b      	ldrh	r3, [r7, #8]
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	b29b      	uxth	r3, r3
 800500e:	b2da      	uxtb	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	6a39      	ldr	r1, [r7, #32]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f93e 	bl	800529c <I2C_WaitOnTXEFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	2b04      	cmp	r3, #4
 800502c:	d107      	bne.n	800503e <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503c:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e050      	b.n	80050e4 <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005042:	893b      	ldrh	r3, [r7, #8]
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800504c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504e:	6a39      	ldr	r1, [r7, #32]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f923 	bl	800529c <I2C_WaitOnTXEFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	2b04      	cmp	r3, #4
 8005062:	d107      	bne.n	8005074 <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005072:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e035      	b.n	80050e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005086:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	2200      	movs	r2, #0
 8005090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f82b 	bl	80050f0 <I2C_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	d103      	bne.n	80050b8 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e013      	b.n	80050e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050bc:	897b      	ldrh	r3, [r7, #10]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	6a3a      	ldr	r2, [r7, #32]
 80050d0:	4906      	ldr	r1, [pc, #24]	; (80050ec <I2C_RequestMemoryRead+0x1cc>)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f863 	bl	800519e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <I2C_RequestMemoryRead+0x1c2>
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	00010002 	.word	0x00010002

080050f0 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Status The new Flag status (SET or RESET).
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8005100:	e025      	b.n	800514e <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005108:	d021      	beq.n	800514e <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800510a:	f7fe f969 	bl	80033e0 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <I2C_WaitOnFlagUntilTimeout+0x30>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d116      	bne.n	800514e <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e023      	b.n	8005196 <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10d      	bne.n	8005174 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	43da      	mvns	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	e00c      	b.n	800518e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	43da      	mvns	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4013      	ands	r3, r2
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	bf0c      	ite	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	2300      	movne	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	429a      	cmp	r2, r3
 8005192:	d0b6      	beq.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Flag specifies the I2C flag to check.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart) {
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80051ac:	e051      	b.n	8005252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051bc:	d123      	bne.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051cc:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051d6:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f043 0204 	orr.w	r2, r3, #4
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e046      	b.n	8005294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800520c:	d021      	beq.n	8005252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800520e:	f7fe f8e7 	bl	80033e0 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d116      	bne.n	8005252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0220 	orr.w	r2, r3, #32
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e020      	b.n	8005294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d10c      	bne.n	8005276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	43da      	mvns	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4013      	ands	r3, r2
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	bf14      	ite	ne
 800526e:	2301      	movne	r3, #1
 8005270:	2300      	moveq	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e00b      	b.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	43da      	mvns	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4013      	ands	r3, r2
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d18d      	bne.n	80051ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <I2C_WaitOnTXEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80052a8:	e02d      	b.n	8005306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f8ce 	bl	800544c <I2C_IsAcknowledgeFailed>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e02d      	b.n	8005316 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c0:	d021      	beq.n	8005306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80052c2:	f7fe f88d 	bl	80033e0 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d302      	bcc.n	80052d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d116      	bne.n	8005306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f043 0220 	orr.w	r2, r3, #32
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e007      	b.n	8005316 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b80      	cmp	r3, #128	; 0x80
 8005312:	d1ca      	bne.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <I2C_WaitOnBTFFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 800532a:	e02d      	b.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f88d 	bl	800544c <I2C_IsAcknowledgeFailed>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e02d      	b.n	8005398 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005342:	d021      	beq.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8005344:	f7fe f84c 	bl	80033e0 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	d302      	bcc.n	800535a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d116      	bne.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e007      	b.n	8005398 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d1ca      	bne.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80053ac:	e042      	b.n	8005434 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d119      	bne.n	80053f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0210 	mvn.w	r2, #16
 80053c4:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e029      	b.n	8005444 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80053f0:	f7fd fff6 	bl	80033e0 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d302      	bcc.n	8005406 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d116      	bne.n	8005434 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e007      	b.n	8005444 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d1b5      	bne.n	80053ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005462:	d11b      	bne.n	800549c <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800546c:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	f043 0204 	orr.w	r2, r3, #4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ac:	b08f      	sub	sp, #60	; 0x3c
 80054ae:	af0a      	add	r7, sp, #40	; 0x28
 80054b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e10f      	b.n	80056dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f009 fb28 	bl	800eb2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2203      	movs	r2, #3
 80054e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f003 f95f 	bl	80087be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	687e      	ldr	r6, [r7, #4]
 8005508:	466d      	mov	r5, sp
 800550a:	f106 0410 	add.w	r4, r6, #16
 800550e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800551a:	e885 0003 	stmia.w	r5, {r0, r1}
 800551e:	1d33      	adds	r3, r6, #4
 8005520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005522:	6838      	ldr	r0, [r7, #0]
 8005524:	f003 f836 	bl	8008594 <USB_CoreInit>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e0d0      	b.n	80056dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f003 f94d 	bl	80087e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
 800554a:	e04a      	b.n	80055e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800554c:	7bfa      	ldrb	r2, [r7, #15]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	333d      	adds	r3, #61	; 0x3d
 800555c:	2201      	movs	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005560:	7bfa      	ldrb	r2, [r7, #15]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	333c      	adds	r3, #60	; 0x3c
 8005570:	7bfa      	ldrb	r2, [r7, #15]
 8005572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	b298      	uxth	r0, r3
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	3344      	adds	r3, #68	; 0x44
 8005588:	4602      	mov	r2, r0
 800558a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800558c:	7bfa      	ldrb	r2, [r7, #15]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	3340      	adds	r3, #64	; 0x40
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055a0:	7bfa      	ldrb	r2, [r7, #15]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3348      	adds	r3, #72	; 0x48
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055b4:	7bfa      	ldrb	r2, [r7, #15]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	334c      	adds	r3, #76	; 0x4c
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055c8:	7bfa      	ldrb	r2, [r7, #15]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	3354      	adds	r3, #84	; 0x54
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	3301      	adds	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
 80055e2:	7bfa      	ldrb	r2, [r7, #15]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d3af      	bcc.n	800554c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]
 80055f0:	e044      	b.n	800567c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005608:	7bfa      	ldrb	r2, [r7, #15]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800561a:	7bfa      	ldrb	r2, [r7, #15]
 800561c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005634:	7bfa      	ldrb	r2, [r7, #15]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800564a:	7bfa      	ldrb	r2, [r7, #15]
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005660:	7bfa      	ldrb	r2, [r7, #15]
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	3301      	adds	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d3b5      	bcc.n	80055f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	687e      	ldr	r6, [r7, #4]
 800568e:	466d      	mov	r5, sp
 8005690:	f106 0410 	add.w	r4, r6, #16
 8005694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800569a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800569c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80056a4:	1d33      	adds	r3, r6, #4
 80056a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056a8:	6838      	ldr	r0, [r7, #0]
 80056aa:	f003 f8e5 	bl	8008878 <USB_DevInit>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e00d      	b.n	80056dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f004 fa34 	bl	8009b42 <USB_DevDisconnect>

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_PCD_Start+0x1c>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e020      	b.n	8005742 <HAL_PCD_Start+0x5e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	2b01      	cmp	r3, #1
 800570e:	d109      	bne.n	8005724 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005714:	2b01      	cmp	r3, #1
 8005716:	d005      	beq.n	8005724 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f003 f837 	bl	800879c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f004 f9e4 	bl	8009b00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800574a:	b590      	push	{r4, r7, lr}
 800574c:	b08d      	sub	sp, #52	; 0x34
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f004 faa2 	bl	8009caa <USB_GetMode>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	f040 848a 	bne.w	8006082 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f004 fa06 	bl	8009b84 <USB_ReadInterrupts>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8480 	beq.w	8006080 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f004 f9f3 	bl	8009b84 <USB_ReadInterrupts>
 800579e:	4603      	mov	r3, r0
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d107      	bne.n	80057b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f002 0202 	and.w	r2, r2, #2
 80057b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f004 f9e1 	bl	8009b84 <USB_ReadInterrupts>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d161      	bne.n	8005890 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0210 	bic.w	r2, r2, #16
 80057da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4413      	add	r3, r2
 80057f8:	3304      	adds	r3, #4
 80057fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	0c5b      	lsrs	r3, r3, #17
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	2b02      	cmp	r3, #2
 8005806:	d124      	bne.n	8005852 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d035      	beq.n	8005880 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	091b      	lsrs	r3, r3, #4
 800581c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800581e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005822:	b29b      	uxth	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	6a38      	ldr	r0, [r7, #32]
 8005828:	f004 f818 	bl	800985c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	091b      	lsrs	r3, r3, #4
 8005834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005838:	441a      	add	r2, r3
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800584a:	441a      	add	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
 8005850:	e016      	b.n	8005880 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	0c5b      	lsrs	r3, r3, #17
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	2b06      	cmp	r3, #6
 800585c:	d110      	bne.n	8005880 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005864:	2208      	movs	r2, #8
 8005866:	4619      	mov	r1, r3
 8005868:	6a38      	ldr	r0, [r7, #32]
 800586a:	f003 fff7 	bl	800985c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	6a1a      	ldr	r2, [r3, #32]
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800587a:	441a      	add	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0210 	orr.w	r2, r2, #16
 800588e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f004 f975 	bl	8009b84 <USB_ReadInterrupts>
 800589a:	4603      	mov	r3, r0
 800589c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058a4:	f040 80a7 	bne.w	80059f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f004 f97a 	bl	8009baa <USB_ReadDevAllOutEpInterrupt>
 80058b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80058b8:	e099      	b.n	80059ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 808e 	beq.w	80059e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f004 f99e 	bl	8009c12 <USB_ReadDevOutEPInterrupt>
 80058d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	461a      	mov	r2, r3
 80058f0:	2301      	movs	r3, #1
 80058f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80058f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fec2 	bl	8006680 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00c      	beq.n	8005920 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	461a      	mov	r2, r3
 8005914:	2308      	movs	r3, #8
 8005916:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 ff98 	bl	8006850 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	461a      	mov	r2, r3
 8005938:	2310      	movs	r3, #16
 800593a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d030      	beq.n	80059a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	2b80      	cmp	r3, #128	; 0x80
 8005950:	d109      	bne.n	8005966 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005964:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005968:	4613      	mov	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	4413      	add	r3, r2
 8005978:	3304      	adds	r3, #4
 800597a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	78db      	ldrb	r3, [r3, #3]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d108      	bne.n	8005996 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2200      	movs	r2, #0
 8005988:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	b2db      	uxtb	r3, r3
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f009 f9c7 	bl	800ed24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a2:	461a      	mov	r2, r3
 80059a4:	2302      	movs	r3, #2
 80059a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	461a      	mov	r2, r3
 80059c0:	2320      	movs	r3, #32
 80059c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	461a      	mov	r2, r3
 80059dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	3301      	adds	r3, #1
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f47f af62 	bne.w	80058ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f004 f8c2 	bl	8009b84 <USB_ReadInterrupts>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a0a:	f040 80db 	bne.w	8005bc4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f004 f8e3 	bl	8009bde <USB_ReadDevAllInEpInterrupt>
 8005a18:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005a1e:	e0cd      	b.n	8005bbc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80c2 	beq.w	8005bb0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	4611      	mov	r1, r2
 8005a36:	4618      	mov	r0, r3
 8005a38:	f004 f909 	bl	8009c4e <USB_ReadDevInEPInterrupt>
 8005a3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d057      	beq.n	8005af8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	2201      	movs	r2, #1
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69f9      	ldr	r1, [r7, #28]
 8005a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a68:	4013      	ands	r3, r2
 8005a6a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	461a      	mov	r2, r3
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d132      	bne.n	8005aec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	334c      	adds	r3, #76	; 0x4c
 8005a96:	6819      	ldr	r1, [r3, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4403      	add	r3, r0
 8005aa6:	3348      	adds	r3, #72	; 0x48
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4419      	add	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4403      	add	r3, r0
 8005aba:	334c      	adds	r3, #76	; 0x4c
 8005abc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d113      	bne.n	8005aec <HAL_PCD_IRQHandler+0x3a2>
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	3354      	adds	r3, #84	; 0x54
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d108      	bne.n	8005aec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	f004 f910 	bl	8009d0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f009 f89b 	bl	800ec2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2308      	movs	r3, #8
 8005b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f003 0310 	and.w	r3, r3, #16
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	461a      	mov	r2, r3
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d023      	beq.n	8005b9e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b58:	6a38      	ldr	r0, [r7, #32]
 8005b5a:	f002 fff1 	bl	8008b40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	4613      	mov	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	3338      	adds	r3, #56	; 0x38
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	3304      	adds	r3, #4
 8005b70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	78db      	ldrb	r3, [r3, #3]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d108      	bne.n	8005b8c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f009 f8de 	bl	800ed48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fcdb 	bl	8006566 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	085b      	lsrs	r3, r3, #1
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f47f af2e 	bne.w	8005a20 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f003 ffdb 	bl	8009b84 <USB_ReadInterrupts>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd8:	d122      	bne.n	8005c20 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d108      	bne.n	8005c0a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c00:	2100      	movs	r1, #0
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fec2 	bl	800698c <HAL_PCDEx_LPM_Callback>
 8005c08:	e002      	b.n	8005c10 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f009 f87c 	bl	800ed08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f003 ffad 	bl	8009b84 <USB_ReadInterrupts>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c34:	d112      	bne.n	8005c5c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d102      	bne.n	8005c4c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f009 f838 	bl	800ecbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005c5a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f003 ff8f 	bl	8009b84 <USB_ReadInterrupts>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c70:	f040 80b7 	bne.w	8005de2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2110      	movs	r1, #16
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f002 ff56 	bl	8008b40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c94:	2300      	movs	r3, #0
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c98:	e046      	b.n	8005d28 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ccc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ce0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	3301      	adds	r3, #1
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3b3      	bcc.n	8005c9a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5e:	f043 030b 	orr.w	r3, r3, #11
 8005d62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d74:	f043 030b 	orr.w	r3, r3, #11
 8005d78:	6453      	str	r3, [r2, #68]	; 0x44
 8005d7a:	e015      	b.n	8005da8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da2:	f043 030b 	orr.w	r3, r3, #11
 8005da6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f003 ff9d 	bl	8009d0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695a      	ldr	r2, [r3, #20]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f003 fecc 	bl	8009b84 <USB_ReadInterrupts>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df6:	d124      	bne.n	8005e42 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f003 ff62 	bl	8009cc6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f002 ff17 	bl	8008c3a <USB_GetDevSpeed>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681c      	ldr	r4, [r3, #0]
 8005e18:	f001 f9e8 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 8005e1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	4620      	mov	r0, r4
 8005e28:	f002 fc16 	bl	8008658 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f008 ff26 	bl	800ec7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f003 fe9c 	bl	8009b84 <USB_ReadInterrupts>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d10a      	bne.n	8005e6c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f008 ff03 	bl	800ec62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f002 0208 	and.w	r2, r2, #8
 8005e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f003 fe87 	bl	8009b84 <USB_ReadInterrupts>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d122      	bne.n	8005ec6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e90:	e014      	b.n	8005ebc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e96:	4613      	mov	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d105      	bne.n	8005eb6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fb27 	bl	8006504 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	3301      	adds	r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3e5      	bcc.n	8005e92 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f003 fe5a 	bl	8009b84 <USB_ReadInterrupts>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eda:	d13b      	bne.n	8005f54 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005edc:	2301      	movs	r3, #1
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee0:	e02b      	b.n	8005f3a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3340      	adds	r3, #64	; 0x40
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d115      	bne.n	8005f34 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005f08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da12      	bge.n	8005f34 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f12:	4613      	mov	r3, r2
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	333f      	adds	r3, #63	; 0x3f
 8005f1e:	2201      	movs	r2, #1
 8005f20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fae8 	bl	8006504 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	3301      	adds	r3, #1
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d3ce      	bcc.n	8005ee2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f003 fe13 	bl	8009b84 <USB_ReadInterrupts>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f68:	d155      	bne.n	8006016 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6e:	e045      	b.n	8005ffc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d12e      	bne.n	8005ff6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da2b      	bge.n	8005ff6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005faa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d121      	bne.n	8005ff6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ff2:	6053      	str	r3, [r2, #4]
            break;
 8005ff4:	e007      	b.n	8006006 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006002:	429a      	cmp	r2, r3
 8006004:	d3b4      	bcc.n	8005f70 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f003 fdb2 	bl	8009b84 <USB_ReadInterrupts>
 8006020:	4603      	mov	r3, r0
 8006022:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602a:	d10a      	bne.n	8006042 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f008 fe9d 	bl	800ed6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695a      	ldr	r2, [r3, #20]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f003 fd9c 	bl	8009b84 <USB_ReadInterrupts>
 800604c:	4603      	mov	r3, r0
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b04      	cmp	r3, #4
 8006054:	d115      	bne.n	8006082 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f008 fe8d 	bl	800ed88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6859      	ldr	r1, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	e000      	b.n	8006082 <HAL_PCD_IRQHandler+0x938>
      return;
 8006080:	bf00      	nop
    }
  }
}
 8006082:	3734      	adds	r7, #52	; 0x34
 8006084:	46bd      	mov	sp, r7
 8006086:	bd90      	pop	{r4, r7, pc}

08006088 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_PCD_SetAddress+0x1a>
 800609e:	2302      	movs	r3, #2
 80060a0:	e013      	b.n	80060ca <HAL_PCD_SetAddress+0x42>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	4611      	mov	r1, r2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f003 fcfa 	bl	8009ab4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	4608      	mov	r0, r1
 80060dc:	4611      	mov	r1, r2
 80060de:	461a      	mov	r2, r3
 80060e0:	4603      	mov	r3, r0
 80060e2:	70fb      	strb	r3, [r7, #3]
 80060e4:	460b      	mov	r3, r1
 80060e6:	803b      	strh	r3, [r7, #0]
 80060e8:	4613      	mov	r3, r2
 80060ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da0f      	bge.n	8006118 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	f003 020f 	and.w	r2, r3, #15
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	3338      	adds	r3, #56	; 0x38
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	3304      	adds	r3, #4
 800610e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	705a      	strb	r2, [r3, #1]
 8006116:	e00f      	b.n	8006138 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	f003 020f 	and.w	r2, r3, #15
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	3304      	adds	r3, #4
 8006130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	b2da      	uxtb	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006144:	883a      	ldrh	r2, [r7, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	78ba      	ldrb	r2, [r7, #2]
 800614e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006162:	78bb      	ldrb	r3, [r7, #2]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d102      	bne.n	800616e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_PCD_EP_Open+0xaa>
 8006178:	2302      	movs	r3, #2
 800617a:	e00e      	b.n	800619a <HAL_PCD_EP_Open+0xc8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68f9      	ldr	r1, [r7, #12]
 800618a:	4618      	mov	r0, r3
 800618c:	f002 fd7a 	bl	8008c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006198:	7afb      	ldrb	r3, [r7, #11]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da0f      	bge.n	80061d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 020f 	and.w	r2, r3, #15
 80061bc:	4613      	mov	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	3338      	adds	r3, #56	; 0x38
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	3304      	adds	r3, #4
 80061cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	705a      	strb	r2, [r3, #1]
 80061d4:	e00f      	b.n	80061f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	4613      	mov	r3, r2
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4413      	add	r3, r2
 80061ec:	3304      	adds	r3, #4
 80061ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_PCD_EP_Close+0x6e>
 800620c:	2302      	movs	r3, #2
 800620e:	e00e      	b.n	800622e <HAL_PCD_EP_Close+0x8c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68f9      	ldr	r1, [r7, #12]
 800621e:	4618      	mov	r0, r3
 8006220:	f002 fdb8 	bl	8008d94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b086      	sub	sp, #24
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	460b      	mov	r3, r1
 8006244:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006246:	7afb      	ldrb	r3, [r7, #11]
 8006248:	f003 020f 	and.w	r2, r3, #15
 800624c:	4613      	mov	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	3304      	adds	r3, #4
 800625e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2200      	movs	r2, #0
 8006270:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006278:	7afb      	ldrb	r3, [r7, #11]
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	b2da      	uxtb	r2, r3
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d102      	bne.n	8006292 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006292:	7afb      	ldrb	r3, [r7, #11]
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	2b00      	cmp	r3, #0
 800629a:	d109      	bne.n	80062b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	6979      	ldr	r1, [r7, #20]
 80062aa:	f003 f897 	bl	80093dc <USB_EP0StartXfer>
 80062ae:	e008      	b.n	80062c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	6979      	ldr	r1, [r7, #20]
 80062be:	f002 fe45 	bl	8008f4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	f003 020f 	and.w	r2, r3, #15
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	460b      	mov	r3, r1
 800630a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	f003 020f 	and.w	r2, r3, #15
 8006312:	4613      	mov	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	3338      	adds	r3, #56	; 0x38
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	3304      	adds	r3, #4
 8006322:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2200      	movs	r2, #0
 8006334:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2201      	movs	r2, #1
 800633a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800633c:	7afb      	ldrb	r3, [r7, #11]
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	b2da      	uxtb	r2, r3
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d102      	bne.n	8006356 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	2b00      	cmp	r3, #0
 800635e:	d109      	bne.n	8006374 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	461a      	mov	r2, r3
 800636c:	6979      	ldr	r1, [r7, #20]
 800636e:	f003 f835 	bl	80093dc <USB_EP0StartXfer>
 8006372:	e008      	b.n	8006386 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	6979      	ldr	r1, [r7, #20]
 8006382:	f002 fde3 	bl	8008f4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d901      	bls.n	80063ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e050      	b.n	8006450 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	da0f      	bge.n	80063d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	4613      	mov	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	3338      	adds	r3, #56	; 0x38
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	4413      	add	r3, r2
 80063ca:	3304      	adds	r3, #4
 80063cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	705a      	strb	r2, [r3, #1]
 80063d4:	e00d      	b.n	80063f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	4613      	mov	r3, r2
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4413      	add	r3, r2
 80063e8:	3304      	adds	r3, #4
 80063ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_PCD_EP_SetStall+0x82>
 800640e:	2302      	movs	r3, #2
 8006410:	e01e      	b.n	8006450 <HAL_PCD_EP_SetStall+0xc0>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68f9      	ldr	r1, [r7, #12]
 8006420:	4618      	mov	r0, r3
 8006422:	f003 fa73 	bl	800990c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	b2d9      	uxtb	r1, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006440:	461a      	mov	r2, r3
 8006442:	f003 fc63 	bl	8009d0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	f003 020f 	and.w	r2, r3, #15
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	429a      	cmp	r2, r3
 8006470:	d901      	bls.n	8006476 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e042      	b.n	80064fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800647a:	2b00      	cmp	r3, #0
 800647c:	da0f      	bge.n	800649e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	f003 020f 	and.w	r2, r3, #15
 8006484:	4613      	mov	r3, r2
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	3338      	adds	r3, #56	; 0x38
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	4413      	add	r3, r2
 8006492:	3304      	adds	r3, #4
 8006494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	705a      	strb	r2, [r3, #1]
 800649c:	e00f      	b.n	80064be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	f003 020f 	and.w	r2, r3, #15
 80064a4:	4613      	mov	r3, r2
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	4413      	add	r3, r2
 80064b4:	3304      	adds	r3, #4
 80064b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <HAL_PCD_EP_ClrStall+0x86>
 80064da:	2302      	movs	r3, #2
 80064dc:	e00e      	b.n	80064fc <HAL_PCD_EP_ClrStall+0xa4>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f003 fa7b 	bl	80099e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006514:	2b00      	cmp	r3, #0
 8006516:	da0c      	bge.n	8006532 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	f003 020f 	and.w	r2, r3, #15
 800651e:	4613      	mov	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	3338      	adds	r3, #56	; 0x38
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	4413      	add	r3, r2
 800652c:	3304      	adds	r3, #4
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e00c      	b.n	800654c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	4613      	mov	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	4413      	add	r3, r2
 8006548:	3304      	adds	r3, #4
 800654a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68f9      	ldr	r1, [r7, #12]
 8006552:	4618      	mov	r0, r3
 8006554:	f003 f89a 	bl	800968c <USB_EPStopXfer>
 8006558:	4603      	mov	r3, r0
 800655a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800655c:	7afb      	ldrb	r3, [r7, #11]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b08a      	sub	sp, #40	; 0x28
 800656a:	af02      	add	r7, sp, #8
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	4613      	mov	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	3338      	adds	r3, #56	; 0x38
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4413      	add	r3, r2
 800658a:	3304      	adds	r3, #4
 800658c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	429a      	cmp	r2, r3
 8006598:	d901      	bls.n	800659e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e06c      	b.n	8006678 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d902      	bls.n	80065ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	3303      	adds	r3, #3
 80065be:	089b      	lsrs	r3, r3, #2
 80065c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065c2:	e02b      	b.n	800661c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d902      	bls.n	80065e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	3303      	adds	r3, #3
 80065e4:	089b      	lsrs	r3, r3, #2
 80065e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6919      	ldr	r1, [r3, #16]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	4603      	mov	r3, r0
 80065fe:	6978      	ldr	r0, [r7, #20]
 8006600:	f003 f8ee 	bl	80097e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	441a      	add	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a1a      	ldr	r2, [r3, #32]
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	441a      	add	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	429a      	cmp	r2, r3
 8006630:	d809      	bhi.n	8006646 <PCD_WriteEmptyTxFifo+0xe0>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a1a      	ldr	r2, [r3, #32]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800663a:	429a      	cmp	r2, r3
 800663c:	d203      	bcs.n	8006646 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1be      	bne.n	80065c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	429a      	cmp	r2, r3
 8006650:	d811      	bhi.n	8006676 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	2201      	movs	r2, #1
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	43db      	mvns	r3, r3
 800666c:	6939      	ldr	r1, [r7, #16]
 800666e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006672:	4013      	ands	r3, r2
 8006674:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	333c      	adds	r3, #60	; 0x3c
 8006698:	3304      	adds	r3, #4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d17b      	bne.n	80067ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d015      	beq.n	80066ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	4a61      	ldr	r2, [pc, #388]	; (8006848 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	f240 80b9 	bls.w	800683c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80b3 	beq.w	800683c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	461a      	mov	r2, r3
 80066e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066e8:	6093      	str	r3, [r2, #8]
 80066ea:	e0a7      	b.n	800683c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006702:	461a      	mov	r2, r3
 8006704:	2320      	movs	r3, #32
 8006706:	6093      	str	r3, [r2, #8]
 8006708:	e098      	b.n	800683c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 8093 	bne.w	800683c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4a4b      	ldr	r2, [pc, #300]	; (8006848 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d90f      	bls.n	800673e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	461a      	mov	r2, r3
 8006736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800673a:	6093      	str	r3, [r2, #8]
 800673c:	e07e      	b.n	800683c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	4413      	add	r3, r2
 8006750:	3304      	adds	r3, #4
 8006752:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	0159      	lsls	r1, r3, #5
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	440b      	add	r3, r1
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d114      	bne.n	80067a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006788:	461a      	mov	r2, r3
 800678a:	2101      	movs	r1, #1
 800678c:	f003 fabe 	bl	8009d0c <USB_EP0_OutStart>
 8006790:	e006      	b.n	80067a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691a      	ldr	r2, [r3, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	441a      	add	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f008 fa26 	bl	800ebf8 <HAL_PCD_DataOutStageCallback>
 80067ac:	e046      	b.n	800683c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	4a26      	ldr	r2, [pc, #152]	; (800684c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d124      	bne.n	8006800 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067cc:	461a      	mov	r2, r3
 80067ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d2:	6093      	str	r3, [r2, #8]
 80067d4:	e032      	b.n	800683c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d008      	beq.n	80067f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	461a      	mov	r2, r3
 80067ee:	2320      	movs	r3, #32
 80067f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f008 f9fd 	bl	800ebf8 <HAL_PCD_DataOutStageCallback>
 80067fe:	e01d      	b.n	800683c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d114      	bne.n	8006830 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	4613      	mov	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006828:	461a      	mov	r2, r3
 800682a:	2100      	movs	r1, #0
 800682c:	f003 fa6e 	bl	8009d0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f008 f9de 	bl	800ebf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	4f54300a 	.word	0x4f54300a
 800684c:	4f54310a 	.word	0x4f54310a

08006850 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	333c      	adds	r3, #60	; 0x3c
 8006868:	3304      	adds	r3, #4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4a15      	ldr	r2, [pc, #84]	; (80068d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d90e      	bls.n	80068a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689c:	461a      	mov	r2, r3
 800689e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f008 f995 	bl	800ebd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4a0a      	ldr	r2, [pc, #40]	; (80068d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d90c      	bls.n	80068cc <PCD_EP_OutSetupPacket_int+0x7c>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d108      	bne.n	80068cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068c4:	461a      	mov	r2, r3
 80068c6:	2101      	movs	r1, #1
 80068c8:	f003 fa20 	bl	8009d0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	4f54300a 	.word	0x4f54300a

080068dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
 80068e8:	4613      	mov	r3, r2
 80068ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d107      	bne.n	800690a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80068fa:	883b      	ldrh	r3, [r7, #0]
 80068fc:	0419      	lsls	r1, r3, #16
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	430a      	orrs	r2, r1
 8006906:	629a      	str	r2, [r3, #40]	; 0x28
 8006908:	e028      	b.n	800695c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006918:	2300      	movs	r3, #0
 800691a:	73fb      	strb	r3, [r7, #15]
 800691c:	e00d      	b.n	800693a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	3340      	adds	r3, #64	; 0x40
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	0c1b      	lsrs	r3, r3, #16
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	4413      	add	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	3301      	adds	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
 800693a:	7bfa      	ldrb	r2, [r7, #15]
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	3b01      	subs	r3, #1
 8006940:	429a      	cmp	r2, r3
 8006942:	d3ec      	bcc.n	800691e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006944:	883b      	ldrh	r3, [r7, #0]
 8006946:	0418      	lsls	r0, r3, #16
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6819      	ldr	r1, [r3, #0]
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	3b01      	subs	r3, #1
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	4302      	orrs	r2, r0
 8006954:	3340      	adds	r3, #64	; 0x40
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	460b      	mov	r3, r1
 8006974:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	887a      	ldrh	r2, [r7, #2]
 800697c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e267      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d075      	beq.n	8006aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069c2:	4b88      	ldr	r3, [pc, #544]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 030c 	and.w	r3, r3, #12
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d00c      	beq.n	80069e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ce:	4b85      	ldr	r3, [pc, #532]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d112      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069da:	4b82      	ldr	r3, [pc, #520]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069e6:	d10b      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e8:	4b7e      	ldr	r3, [pc, #504]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d05b      	beq.n	8006aac <HAL_RCC_OscConfig+0x108>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d157      	bne.n	8006aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e242      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a08:	d106      	bne.n	8006a18 <HAL_RCC_OscConfig+0x74>
 8006a0a:	4b76      	ldr	r3, [pc, #472]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a75      	ldr	r2, [pc, #468]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	e01d      	b.n	8006a54 <HAL_RCC_OscConfig+0xb0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a20:	d10c      	bne.n	8006a3c <HAL_RCC_OscConfig+0x98>
 8006a22:	4b70      	ldr	r3, [pc, #448]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a6f      	ldr	r2, [pc, #444]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	4b6d      	ldr	r3, [pc, #436]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a6c      	ldr	r2, [pc, #432]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	e00b      	b.n	8006a54 <HAL_RCC_OscConfig+0xb0>
 8006a3c:	4b69      	ldr	r3, [pc, #420]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a68      	ldr	r2, [pc, #416]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	4b66      	ldr	r3, [pc, #408]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a65      	ldr	r2, [pc, #404]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d013      	beq.n	8006a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5c:	f7fc fcc0 	bl	80033e0 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a64:	f7fc fcbc 	bl	80033e0 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b64      	cmp	r3, #100	; 0x64
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e207      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a76:	4b5b      	ldr	r3, [pc, #364]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0xc0>
 8006a82:	e014      	b.n	8006aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a84:	f7fc fcac 	bl	80033e0 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fc fca8 	bl	80033e0 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e1f3      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a9e:	4b51      	ldr	r3, [pc, #324]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_OscConfig+0xe8>
 8006aaa:	e000      	b.n	8006aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d063      	beq.n	8006b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aba:	4b4a      	ldr	r3, [pc, #296]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ac6:	4b47      	ldr	r3, [pc, #284]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d11c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ad2:	4b44      	ldr	r3, [pc, #272]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d116      	bne.n	8006b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ade:	4b41      	ldr	r3, [pc, #260]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_RCC_OscConfig+0x152>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d001      	beq.n	8006af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e1c7      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af6:	4b3b      	ldr	r3, [pc, #236]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4937      	ldr	r1, [pc, #220]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b0a:	e03a      	b.n	8006b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d020      	beq.n	8006b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b14:	4b34      	ldr	r3, [pc, #208]	; (8006be8 <HAL_RCC_OscConfig+0x244>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1a:	f7fc fc61 	bl	80033e0 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b22:	f7fc fc5d 	bl	80033e0 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e1a8      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b34:	4b2b      	ldr	r3, [pc, #172]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b40:	4b28      	ldr	r3, [pc, #160]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	4925      	ldr	r1, [pc, #148]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	600b      	str	r3, [r1, #0]
 8006b54:	e015      	b.n	8006b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b56:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <HAL_RCC_OscConfig+0x244>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fc fc40 	bl	80033e0 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b64:	f7fc fc3c 	bl	80033e0 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e187      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b76:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d036      	beq.n	8006bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d016      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <HAL_RCC_OscConfig+0x248>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9c:	f7fc fc20 	bl	80033e0 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ba4:	f7fc fc1c 	bl	80033e0 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e167      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x200>
 8006bc2:	e01b      	b.n	8006bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc4:	4b09      	ldr	r3, [pc, #36]	; (8006bec <HAL_RCC_OscConfig+0x248>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bca:	f7fc fc09 	bl	80033e0 <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd0:	e00e      	b.n	8006bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bd2:	f7fc fc05 	bl	80033e0 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d907      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e150      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
 8006be4:	40023800 	.word	0x40023800
 8006be8:	42470000 	.word	0x42470000
 8006bec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf0:	4b88      	ldr	r3, [pc, #544]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1ea      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8097 	beq.w	8006d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c0e:	4b81      	ldr	r3, [pc, #516]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10f      	bne.n	8006c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	4b7d      	ldr	r3, [pc, #500]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	4a7c      	ldr	r2, [pc, #496]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c28:	6413      	str	r3, [r2, #64]	; 0x40
 8006c2a:	4b7a      	ldr	r3, [pc, #488]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c32:	60bb      	str	r3, [r7, #8]
 8006c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3a:	4b77      	ldr	r3, [pc, #476]	; (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d118      	bne.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c46:	4b74      	ldr	r3, [pc, #464]	; (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a73      	ldr	r2, [pc, #460]	; (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c52:	f7fc fbc5 	bl	80033e0 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c5a:	f7fc fbc1 	bl	80033e0 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e10c      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c6c:	4b6a      	ldr	r3, [pc, #424]	; (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0f0      	beq.n	8006c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d106      	bne.n	8006c8e <HAL_RCC_OscConfig+0x2ea>
 8006c80:	4b64      	ldr	r3, [pc, #400]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c84:	4a63      	ldr	r2, [pc, #396]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8c:	e01c      	b.n	8006cc8 <HAL_RCC_OscConfig+0x324>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	d10c      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x30c>
 8006c96:	4b5f      	ldr	r3, [pc, #380]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4a5e      	ldr	r2, [pc, #376]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c9c:	f043 0304 	orr.w	r3, r3, #4
 8006ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca2:	4b5c      	ldr	r3, [pc, #368]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca6:	4a5b      	ldr	r2, [pc, #364]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	6713      	str	r3, [r2, #112]	; 0x70
 8006cae:	e00b      	b.n	8006cc8 <HAL_RCC_OscConfig+0x324>
 8006cb0:	4b58      	ldr	r3, [pc, #352]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb4:	4a57      	ldr	r2, [pc, #348]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	6713      	str	r3, [r2, #112]	; 0x70
 8006cbc:	4b55      	ldr	r3, [pc, #340]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	4a54      	ldr	r2, [pc, #336]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cc2:	f023 0304 	bic.w	r3, r3, #4
 8006cc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd0:	f7fc fb86 	bl	80033e0 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd6:	e00a      	b.n	8006cee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd8:	f7fc fb82 	bl	80033e0 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e0cb      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cee:	4b49      	ldr	r3, [pc, #292]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0ee      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x334>
 8006cfa:	e014      	b.n	8006d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cfc:	f7fc fb70 	bl	80033e0 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d02:	e00a      	b.n	8006d1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d04:	f7fc fb6c 	bl	80033e0 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e0b5      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d1a:	4b3e      	ldr	r3, [pc, #248]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1ee      	bne.n	8006d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d105      	bne.n	8006d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2c:	4b39      	ldr	r3, [pc, #228]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	4a38      	ldr	r2, [pc, #224]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 80a1 	beq.w	8006e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d42:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 030c 	and.w	r3, r3, #12
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d05c      	beq.n	8006e08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d141      	bne.n	8006dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d56:	4b31      	ldr	r3, [pc, #196]	; (8006e1c <HAL_RCC_OscConfig+0x478>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5c:	f7fc fb40 	bl	80033e0 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d64:	f7fc fb3c 	bl	80033e0 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e087      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d76:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69da      	ldr	r2, [r3, #28]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	019b      	lsls	r3, r3, #6
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	085b      	lsrs	r3, r3, #1
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	061b      	lsls	r3, r3, #24
 8006da6:	491b      	ldr	r1, [pc, #108]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <HAL_RCC_OscConfig+0x478>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db2:	f7fc fb15 	bl	80033e0 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dba:	f7fc fb11 	bl	80033e0 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e05c      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dcc:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x416>
 8006dd8:	e054      	b.n	8006e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <HAL_RCC_OscConfig+0x478>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de0:	f7fc fafe 	bl	80033e0 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006de8:	f7fc fafa 	bl	80033e0 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e045      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dfa:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0x444>
 8006e06:	e03d      	b.n	8006e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d107      	bne.n	8006e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e038      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
 8006e14:	40023800 	.word	0x40023800
 8006e18:	40007000 	.word	0x40007000
 8006e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e20:	4b1b      	ldr	r3, [pc, #108]	; (8006e90 <HAL_RCC_OscConfig+0x4ec>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d028      	beq.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d121      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d11a      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e50:	4013      	ands	r3, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d111      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40023800 	.word	0x40023800

08006e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0cc      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ea8:	4b68      	ldr	r3, [pc, #416]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d90c      	bls.n	8006ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb6:	4b65      	ldr	r3, [pc, #404]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ebe:	4b63      	ldr	r3, [pc, #396]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d001      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0b8      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d020      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ee8:	4b59      	ldr	r3, [pc, #356]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4a58      	ldr	r2, [pc, #352]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f00:	4b53      	ldr	r3, [pc, #332]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	4a52      	ldr	r2, [pc, #328]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f0c:	4b50      	ldr	r3, [pc, #320]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	494d      	ldr	r1, [pc, #308]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d044      	beq.n	8006fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d107      	bne.n	8006f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	4b47      	ldr	r3, [pc, #284]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d119      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e07f      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d003      	beq.n	8006f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d107      	bne.n	8006f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f52:	4b3f      	ldr	r3, [pc, #252]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e06f      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f62:	4b3b      	ldr	r3, [pc, #236]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e067      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f72:	4b37      	ldr	r3, [pc, #220]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f023 0203 	bic.w	r2, r3, #3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	4934      	ldr	r1, [pc, #208]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f84:	f7fc fa2c 	bl	80033e0 <HAL_GetTick>
 8006f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f8a:	e00a      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f8c:	f7fc fa28 	bl	80033e0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e04f      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa2:	4b2b      	ldr	r3, [pc, #172]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 020c 	and.w	r2, r3, #12
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d1eb      	bne.n	8006f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d20c      	bcs.n	8006fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc2:	4b22      	ldr	r3, [pc, #136]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fca:	4b20      	ldr	r3, [pc, #128]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e032      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fe8:	4b19      	ldr	r3, [pc, #100]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	4916      	ldr	r1, [pc, #88]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d009      	beq.n	800701a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	490e      	ldr	r1, [pc, #56]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	4313      	orrs	r3, r2
 8007018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800701a:	f000 f821 	bl	8007060 <HAL_RCC_GetSysClockFreq>
 800701e:	4602      	mov	r2, r0
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	490a      	ldr	r1, [pc, #40]	; (8007054 <HAL_RCC_ClockConfig+0x1c0>)
 800702c:	5ccb      	ldrb	r3, [r1, r3]
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	4a09      	ldr	r2, [pc, #36]	; (8007058 <HAL_RCC_ClockConfig+0x1c4>)
 8007034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <HAL_RCC_ClockConfig+0x1c8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7fc f98c 	bl	8003358 <HAL_InitTick>

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40023c00 	.word	0x40023c00
 8007050:	40023800 	.word	0x40023800
 8007054:	080121bc 	.word	0x080121bc
 8007058:	20000000 	.word	0x20000000
 800705c:	20000024 	.word	0x20000024

08007060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007064:	b090      	sub	sp, #64	; 0x40
 8007066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	637b      	str	r3, [r7, #52]	; 0x34
 800706c:	2300      	movs	r3, #0
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007070:	2300      	movs	r3, #0
 8007072:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007078:	4b59      	ldr	r3, [pc, #356]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 030c 	and.w	r3, r3, #12
 8007080:	2b08      	cmp	r3, #8
 8007082:	d00d      	beq.n	80070a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007084:	2b08      	cmp	r3, #8
 8007086:	f200 80a1 	bhi.w	80071cc <HAL_RCC_GetSysClockFreq+0x16c>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0x34>
 800708e:	2b04      	cmp	r3, #4
 8007090:	d003      	beq.n	800709a <HAL_RCC_GetSysClockFreq+0x3a>
 8007092:	e09b      	b.n	80071cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007094:	4b53      	ldr	r3, [pc, #332]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007096:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007098:	e09b      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800709a:	4b53      	ldr	r3, [pc, #332]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800709c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800709e:	e098      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070a0:	4b4f      	ldr	r3, [pc, #316]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070aa:	4b4d      	ldr	r3, [pc, #308]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d028      	beq.n	8007108 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b6:	4b4a      	ldr	r3, [pc, #296]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	099b      	lsrs	r3, r3, #6
 80070bc:	2200      	movs	r2, #0
 80070be:	623b      	str	r3, [r7, #32]
 80070c0:	627a      	str	r2, [r7, #36]	; 0x24
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80070c8:	2100      	movs	r1, #0
 80070ca:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80070cc:	fb03 f201 	mul.w	r2, r3, r1
 80070d0:	2300      	movs	r3, #0
 80070d2:	fb00 f303 	mul.w	r3, r0, r3
 80070d6:	4413      	add	r3, r2
 80070d8:	4a43      	ldr	r2, [pc, #268]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80070da:	fba0 1202 	umull	r1, r2, r0, r2
 80070de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070e0:	460a      	mov	r2, r1
 80070e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80070e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e6:	4413      	add	r3, r2
 80070e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	2200      	movs	r2, #0
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	61fa      	str	r2, [r7, #28]
 80070f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80070fa:	f7f9 fdcd 	bl	8000c98 <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4613      	mov	r3, r2
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007106:	e053      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007108:	4b35      	ldr	r3, [pc, #212]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	099b      	lsrs	r3, r3, #6
 800710e:	2200      	movs	r2, #0
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	617a      	str	r2, [r7, #20]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800711a:	f04f 0b00 	mov.w	fp, #0
 800711e:	4652      	mov	r2, sl
 8007120:	465b      	mov	r3, fp
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f04f 0100 	mov.w	r1, #0
 800712a:	0159      	lsls	r1, r3, #5
 800712c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007130:	0150      	lsls	r0, r2, #5
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	ebb2 080a 	subs.w	r8, r2, sl
 800713a:	eb63 090b 	sbc.w	r9, r3, fp
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800714a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800714e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007152:	ebb2 0408 	subs.w	r4, r2, r8
 8007156:	eb63 0509 	sbc.w	r5, r3, r9
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	00eb      	lsls	r3, r5, #3
 8007164:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007168:	00e2      	lsls	r2, r4, #3
 800716a:	4614      	mov	r4, r2
 800716c:	461d      	mov	r5, r3
 800716e:	eb14 030a 	adds.w	r3, r4, sl
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	eb45 030b 	adc.w	r3, r5, fp
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007186:	4629      	mov	r1, r5
 8007188:	028b      	lsls	r3, r1, #10
 800718a:	4621      	mov	r1, r4
 800718c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007190:	4621      	mov	r1, r4
 8007192:	028a      	lsls	r2, r1, #10
 8007194:	4610      	mov	r0, r2
 8007196:	4619      	mov	r1, r3
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	2200      	movs	r2, #0
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	60fa      	str	r2, [r7, #12]
 80071a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071a4:	f7f9 fd78 	bl	8000c98 <__aeabi_uldivmod>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4613      	mov	r3, r2
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	3301      	adds	r3, #1
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80071c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071ca:	e002      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80071ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3740      	adds	r7, #64	; 0x40
 80071d8:	46bd      	mov	sp, r7
 80071da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071de:	bf00      	nop
 80071e0:	40023800 	.word	0x40023800
 80071e4:	00f42400 	.word	0x00f42400
 80071e8:	017d7840 	.word	0x017d7840

080071ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071f0:	4b03      	ldr	r3, [pc, #12]	; (8007200 <HAL_RCC_GetHCLKFreq+0x14>)
 80071f2:	681b      	ldr	r3, [r3, #0]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20000000 	.word	0x20000000

08007204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007208:	f7ff fff0 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 800720c:	4602      	mov	r2, r0
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	0a9b      	lsrs	r3, r3, #10
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	4903      	ldr	r1, [pc, #12]	; (8007228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800721a:	5ccb      	ldrb	r3, [r1, r3]
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40023800 	.word	0x40023800
 8007228:	080121cc 	.word	0x080121cc

0800722c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007230:	f7ff ffdc 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 8007234:	4602      	mov	r2, r0
 8007236:	4b05      	ldr	r3, [pc, #20]	; (800724c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	0b5b      	lsrs	r3, r3, #13
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	4903      	ldr	r1, [pc, #12]	; (8007250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40023800 	.word	0x40023800
 8007250:	080121cc 	.word	0x080121cc

08007254 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e041      	b.n	80072ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fa fd8e 	bl	8001d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f000 f9a0 	bl	80075d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d109      	bne.n	8007318 <HAL_TIM_PWM_Start+0x24>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	bf14      	ite	ne
 8007310:	2301      	movne	r3, #1
 8007312:	2300      	moveq	r3, #0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	e022      	b.n	800735e <HAL_TIM_PWM_Start+0x6a>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b04      	cmp	r3, #4
 800731c:	d109      	bne.n	8007332 <HAL_TIM_PWM_Start+0x3e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b01      	cmp	r3, #1
 8007328:	bf14      	ite	ne
 800732a:	2301      	movne	r3, #1
 800732c:	2300      	moveq	r3, #0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	e015      	b.n	800735e <HAL_TIM_PWM_Start+0x6a>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b08      	cmp	r3, #8
 8007336:	d109      	bne.n	800734c <HAL_TIM_PWM_Start+0x58>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	bf14      	ite	ne
 8007344:	2301      	movne	r3, #1
 8007346:	2300      	moveq	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	e008      	b.n	800735e <HAL_TIM_PWM_Start+0x6a>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b01      	cmp	r3, #1
 8007356:	bf14      	ite	ne
 8007358:	2301      	movne	r3, #1
 800735a:	2300      	moveq	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e068      	b.n	8007438 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <HAL_TIM_PWM_Start+0x82>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007374:	e013      	b.n	800739e <HAL_TIM_PWM_Start+0xaa>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b04      	cmp	r3, #4
 800737a:	d104      	bne.n	8007386 <HAL_TIM_PWM_Start+0x92>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007384:	e00b      	b.n	800739e <HAL_TIM_PWM_Start+0xaa>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b08      	cmp	r3, #8
 800738a:	d104      	bne.n	8007396 <HAL_TIM_PWM_Start+0xa2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007394:	e003      	b.n	800739e <HAL_TIM_PWM_Start+0xaa>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2202      	movs	r2, #2
 800739a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2201      	movs	r2, #1
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fb22 	bl	80079f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a23      	ldr	r2, [pc, #140]	; (8007440 <HAL_TIM_PWM_Start+0x14c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d107      	bne.n	80073c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1d      	ldr	r2, [pc, #116]	; (8007440 <HAL_TIM_PWM_Start+0x14c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d018      	beq.n	8007402 <HAL_TIM_PWM_Start+0x10e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d013      	beq.n	8007402 <HAL_TIM_PWM_Start+0x10e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a19      	ldr	r2, [pc, #100]	; (8007444 <HAL_TIM_PWM_Start+0x150>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00e      	beq.n	8007402 <HAL_TIM_PWM_Start+0x10e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a17      	ldr	r2, [pc, #92]	; (8007448 <HAL_TIM_PWM_Start+0x154>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d009      	beq.n	8007402 <HAL_TIM_PWM_Start+0x10e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a16      	ldr	r2, [pc, #88]	; (800744c <HAL_TIM_PWM_Start+0x158>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d004      	beq.n	8007402 <HAL_TIM_PWM_Start+0x10e>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a14      	ldr	r2, [pc, #80]	; (8007450 <HAL_TIM_PWM_Start+0x15c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d111      	bne.n	8007426 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b06      	cmp	r3, #6
 8007412:	d010      	beq.n	8007436 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007424:	e007      	b.n	8007436 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0201 	orr.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40010000 	.word	0x40010000
 8007444:	40000400 	.word	0x40000400
 8007448:	40000800 	.word	0x40000800
 800744c:	40000c00 	.word	0x40000c00
 8007450:	40014000 	.word	0x40014000

08007454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800746e:	2302      	movs	r3, #2
 8007470:	e0ae      	b.n	80075d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b0c      	cmp	r3, #12
 800747e:	f200 809f 	bhi.w	80075c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007482:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074bd 	.word	0x080074bd
 800748c:	080075c1 	.word	0x080075c1
 8007490:	080075c1 	.word	0x080075c1
 8007494:	080075c1 	.word	0x080075c1
 8007498:	080074fd 	.word	0x080074fd
 800749c:	080075c1 	.word	0x080075c1
 80074a0:	080075c1 	.word	0x080075c1
 80074a4:	080075c1 	.word	0x080075c1
 80074a8:	0800753f 	.word	0x0800753f
 80074ac:	080075c1 	.word	0x080075c1
 80074b0:	080075c1 	.word	0x080075c1
 80074b4:	080075c1 	.word	0x080075c1
 80074b8:	0800757f 	.word	0x0800757f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f908 	bl	80076d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0208 	orr.w	r2, r2, #8
 80074d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699a      	ldr	r2, [r3, #24]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0204 	bic.w	r2, r2, #4
 80074e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6999      	ldr	r1, [r3, #24]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	619a      	str	r2, [r3, #24]
      break;
 80074fa:	e064      	b.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 f94e 	bl	80077a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6999      	ldr	r1, [r3, #24]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	021a      	lsls	r2, r3, #8
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	619a      	str	r2, [r3, #24]
      break;
 800753c:	e043      	b.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 f999 	bl	800787c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69da      	ldr	r2, [r3, #28]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0208 	orr.w	r2, r2, #8
 8007558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69da      	ldr	r2, [r3, #28]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0204 	bic.w	r2, r2, #4
 8007568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69d9      	ldr	r1, [r3, #28]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	61da      	str	r2, [r3, #28]
      break;
 800757c:	e023      	b.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 f9e3 	bl	8007950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69da      	ldr	r2, [r3, #28]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69da      	ldr	r2, [r3, #28]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69d9      	ldr	r1, [r3, #28]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	021a      	lsls	r2, r3, #8
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	61da      	str	r2, [r3, #28]
      break;
 80075be:	e002      	b.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
      break;
 80075c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a34      	ldr	r2, [pc, #208]	; (80076bc <TIM_Base_SetConfig+0xe4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d00f      	beq.n	8007610 <TIM_Base_SetConfig+0x38>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f6:	d00b      	beq.n	8007610 <TIM_Base_SetConfig+0x38>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a31      	ldr	r2, [pc, #196]	; (80076c0 <TIM_Base_SetConfig+0xe8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d007      	beq.n	8007610 <TIM_Base_SetConfig+0x38>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a30      	ldr	r2, [pc, #192]	; (80076c4 <TIM_Base_SetConfig+0xec>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_Base_SetConfig+0x38>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a2f      	ldr	r2, [pc, #188]	; (80076c8 <TIM_Base_SetConfig+0xf0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d108      	bne.n	8007622 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a25      	ldr	r2, [pc, #148]	; (80076bc <TIM_Base_SetConfig+0xe4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d01b      	beq.n	8007662 <TIM_Base_SetConfig+0x8a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d017      	beq.n	8007662 <TIM_Base_SetConfig+0x8a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a22      	ldr	r2, [pc, #136]	; (80076c0 <TIM_Base_SetConfig+0xe8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <TIM_Base_SetConfig+0x8a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a21      	ldr	r2, [pc, #132]	; (80076c4 <TIM_Base_SetConfig+0xec>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00f      	beq.n	8007662 <TIM_Base_SetConfig+0x8a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a20      	ldr	r2, [pc, #128]	; (80076c8 <TIM_Base_SetConfig+0xf0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00b      	beq.n	8007662 <TIM_Base_SetConfig+0x8a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <TIM_Base_SetConfig+0xf4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d007      	beq.n	8007662 <TIM_Base_SetConfig+0x8a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a1e      	ldr	r2, [pc, #120]	; (80076d0 <TIM_Base_SetConfig+0xf8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_Base_SetConfig+0x8a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a1d      	ldr	r2, [pc, #116]	; (80076d4 <TIM_Base_SetConfig+0xfc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d108      	bne.n	8007674 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a08      	ldr	r2, [pc, #32]	; (80076bc <TIM_Base_SetConfig+0xe4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d103      	bne.n	80076a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	615a      	str	r2, [r3, #20]
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	40010000 	.word	0x40010000
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40000c00 	.word	0x40000c00
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40014400 	.word	0x40014400
 80076d4:	40014800 	.word	0x40014800

080076d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f023 0201 	bic.w	r2, r3, #1
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f023 0302 	bic.w	r3, r3, #2
 8007720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4313      	orrs	r3, r2
 800772a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a1c      	ldr	r2, [pc, #112]	; (80077a0 <TIM_OC1_SetConfig+0xc8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d10c      	bne.n	800774e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f023 0308 	bic.w	r3, r3, #8
 800773a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f023 0304 	bic.w	r3, r3, #4
 800774c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a13      	ldr	r2, [pc, #76]	; (80077a0 <TIM_OC1_SetConfig+0xc8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d111      	bne.n	800777a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	621a      	str	r2, [r3, #32]
}
 8007794:	bf00      	nop
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	40010000 	.word	0x40010000

080077a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f023 0210 	bic.w	r2, r3, #16
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f023 0320 	bic.w	r3, r3, #32
 80077ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a1e      	ldr	r2, [pc, #120]	; (8007878 <TIM_OC2_SetConfig+0xd4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d10d      	bne.n	8007820 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800781e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a15      	ldr	r2, [pc, #84]	; (8007878 <TIM_OC2_SetConfig+0xd4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d113      	bne.n	8007850 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800782e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40010000 	.word	0x40010000

0800787c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0303 	bic.w	r3, r3, #3
 80078b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a1d      	ldr	r2, [pc, #116]	; (800794c <TIM_OC3_SetConfig+0xd0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d10d      	bne.n	80078f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a14      	ldr	r2, [pc, #80]	; (800794c <TIM_OC3_SetConfig+0xd0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d113      	bne.n	8007926 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800790c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	4313      	orrs	r3, r2
 8007924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	621a      	str	r2, [r3, #32]
}
 8007940:	bf00      	nop
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	40010000 	.word	0x40010000

08007950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800799a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	031b      	lsls	r3, r3, #12
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a10      	ldr	r2, [pc, #64]	; (80079ec <TIM_OC4_SetConfig+0x9c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d109      	bne.n	80079c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	019b      	lsls	r3, r3, #6
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	621a      	str	r2, [r3, #32]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40010000 	.word	0x40010000

080079f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f003 031f 	and.w	r3, r3, #31
 8007a02:	2201      	movs	r2, #1
 8007a04:	fa02 f303 	lsl.w	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	43db      	mvns	r3, r3
 8007a12:	401a      	ands	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1a      	ldr	r2, [r3, #32]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f003 031f 	and.w	r3, r3, #31
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	fa01 f303 	lsl.w	r3, r1, r3
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
}
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e050      	b.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1c      	ldr	r2, [pc, #112]	; (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d018      	beq.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa0:	d013      	beq.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00e      	beq.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d009      	beq.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a15      	ldr	r2, [pc, #84]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d004      	beq.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a13      	ldr	r2, [pc, #76]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	40010000 	.word	0x40010000
 8007b08:	40000400 	.word	0x40000400
 8007b0c:	40000800 	.word	0x40000800
 8007b10:	40000c00 	.word	0x40000c00
 8007b14:	40014000 	.word	0x40014000

08007b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e03f      	b.n	8007baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d106      	bne.n	8007b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fa f9a8 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2224      	movs	r2, #36	; 0x24
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 faa5 	bl	80080ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695a      	ldr	r2, [r3, #20]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d11d      	bne.n	8007c08 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_UART_Receive_DMA+0x26>
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e016      	b.n	8007c0a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UART_Receive_DMA+0x38>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e00f      	b.n	8007c0a <HAL_UART_Receive_DMA+0x58>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 f92a 	bl	8007e58 <UART_Start_Receive_DMA>
 8007c04:	4603      	mov	r3, r0
 8007c06:	e000      	b.n	8007c0a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007c08:	2302      	movs	r3, #2
  }
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b09c      	sub	sp, #112	; 0x70
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d172      	bne.n	8007d68 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c84:	2200      	movs	r2, #0
 8007c86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ca8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007caa:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3314      	adds	r3, #20
 8007cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cce:	f023 0301 	bic.w	r3, r3, #1
 8007cd2:	667b      	str	r3, [r7, #100]	; 0x64
 8007cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3314      	adds	r3, #20
 8007cda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cdc:	647a      	str	r2, [r7, #68]	; 0x44
 8007cde:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e5      	bne.n	8007cbc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3314      	adds	r3, #20
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d06:	663b      	str	r3, [r7, #96]	; 0x60
 8007d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d10:	633a      	str	r2, [r7, #48]	; 0x30
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e5      	bne.n	8007cf0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d26:	2220      	movs	r2, #32
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d119      	bne.n	8007d68 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	330c      	adds	r3, #12
 8007d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0310 	bic.w	r3, r3, #16
 8007d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d54:	61fa      	str	r2, [r7, #28]
 8007d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	69b9      	ldr	r1, [r7, #24]
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	617b      	str	r3, [r7, #20]
   return(result);
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e5      	bne.n	8007d34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d106      	bne.n	8007d7e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d74:	4619      	mov	r1, r3
 8007d76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d78:	f7ff ff69 	bl	8007c4e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d7c:	e002      	b.n	8007d84 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007d7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d80:	f7ff ff47 	bl	8007c12 <HAL_UART_RxCpltCallback>
}
 8007d84:	bf00      	nop
 8007d86:	3770      	adds	r7, #112	; 0x70
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d108      	bne.n	8007db4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	4619      	mov	r1, r3
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff ff4e 	bl	8007c4e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007db2:	e002      	b.n	8007dba <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff ff36 	bl	8007c26 <HAL_UART_RxHalfCpltCallback>
}
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dde:	2b80      	cmp	r3, #128	; 0x80
 8007de0:	bf0c      	ite	eq
 8007de2:	2301      	moveq	r3, #1
 8007de4:	2300      	movne	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b21      	cmp	r3, #33	; 0x21
 8007df4:	d108      	bne.n	8007e08 <UART_DMAError+0x46>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007e02:	68b8      	ldr	r0, [r7, #8]
 8007e04:	f000 f8c6 	bl	8007f94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e12:	2b40      	cmp	r3, #64	; 0x40
 8007e14:	bf0c      	ite	eq
 8007e16:	2301      	moveq	r3, #1
 8007e18:	2300      	movne	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b22      	cmp	r3, #34	; 0x22
 8007e28:	d108      	bne.n	8007e3c <UART_DMAError+0x7a>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007e36:	68b8      	ldr	r0, [r7, #8]
 8007e38:	f000 f8d4 	bl	8007fe4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	f043 0210 	orr.w	r2, r3, #16
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e48:	68b8      	ldr	r0, [r7, #8]
 8007e4a:	f7ff fef6 	bl	8007c3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b098      	sub	sp, #96	; 0x60
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	88fa      	ldrh	r2, [r7, #6]
 8007e70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2222      	movs	r2, #34	; 0x22
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	4a40      	ldr	r2, [pc, #256]	; (8007f88 <UART_Start_Receive_DMA+0x130>)
 8007e86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8c:	4a3f      	ldr	r2, [pc, #252]	; (8007f8c <UART_Start_Receive_DMA+0x134>)
 8007e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	4a3e      	ldr	r2, [pc, #248]	; (8007f90 <UART_Start_Receive_DMA+0x138>)
 8007e96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007ea0:	f107 0308 	add.w	r3, r7, #8
 8007ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	f7fc f84a 	bl	8003f50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	613b      	str	r3, [r7, #16]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	613b      	str	r3, [r7, #16]
 8007ed0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d019      	beq.n	8007f16 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330c      	adds	r3, #12
 8007f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f02:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007f04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007f08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e5      	bne.n	8007ee2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	f043 0301 	orr.w	r3, r3, #1
 8007f2c:	657b      	str	r3, [r7, #84]	; 0x54
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3314      	adds	r3, #20
 8007f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f36:	63ba      	str	r2, [r7, #56]	; 0x38
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e5      	bne.n	8007f16 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3314      	adds	r3, #20
 8007f50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	617b      	str	r3, [r7, #20]
   return(result);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f60:	653b      	str	r3, [r7, #80]	; 0x50
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3314      	adds	r3, #20
 8007f68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f6a:	627a      	str	r2, [r7, #36]	; 0x24
 8007f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6a39      	ldr	r1, [r7, #32]
 8007f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3760      	adds	r7, #96	; 0x60
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	08007c67 	.word	0x08007c67
 8007f8c:	08007d8d 	.word	0x08007d8d
 8007f90:	08007dc3 	.word	0x08007dc3

08007f94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b089      	sub	sp, #36	; 0x24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	330c      	adds	r3, #12
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	61ba      	str	r2, [r7, #24]
 8007fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6979      	ldr	r1, [r7, #20]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e5      	bne.n	8007f9c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007fd8:	bf00      	nop
 8007fda:	3724      	adds	r7, #36	; 0x24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b095      	sub	sp, #84	; 0x54
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff6:	e853 3f00 	ldrex	r3, [r3]
 8007ffa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800800c:	643a      	str	r2, [r7, #64]	; 0x40
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008012:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e5      	bne.n	8007fec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3314      	adds	r3, #20
 8008026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	f023 0301 	bic.w	r3, r3, #1
 8008036:	64bb      	str	r3, [r7, #72]	; 0x48
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3314      	adds	r3, #20
 800803e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008040:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008048:	e841 2300 	strex	r3, r2, [r1]
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e5      	bne.n	8008020 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008058:	2b01      	cmp	r3, #1
 800805a:	d119      	bne.n	8008090 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	330c      	adds	r3, #12
 8008062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	60bb      	str	r3, [r7, #8]
   return(result);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	f023 0310 	bic.w	r3, r3, #16
 8008072:	647b      	str	r3, [r7, #68]	; 0x44
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	330c      	adds	r3, #12
 800807a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800807c:	61ba      	str	r2, [r7, #24]
 800807e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6979      	ldr	r1, [r7, #20]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	613b      	str	r3, [r7, #16]
   return(result);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e5      	bne.n	800805c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800809e:	bf00      	nop
 80080a0:	3754      	adds	r7, #84	; 0x54
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
	...

080080ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b0:	b0c0      	sub	sp, #256	; 0x100
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c8:	68d9      	ldr	r1, [r3, #12]
 80080ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	ea40 0301 	orr.w	r3, r0, r1
 80080d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	431a      	orrs	r2, r3
 80080e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008104:	f021 010c 	bic.w	r1, r1, #12
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008112:	430b      	orrs	r3, r1
 8008114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008126:	6999      	ldr	r1, [r3, #24]
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	ea40 0301 	orr.w	r3, r0, r1
 8008132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b8f      	ldr	r3, [pc, #572]	; (8008378 <UART_SetConfig+0x2cc>)
 800813c:	429a      	cmp	r2, r3
 800813e:	d005      	beq.n	800814c <UART_SetConfig+0xa0>
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b8d      	ldr	r3, [pc, #564]	; (800837c <UART_SetConfig+0x2d0>)
 8008148:	429a      	cmp	r2, r3
 800814a:	d104      	bne.n	8008156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800814c:	f7ff f86e 	bl	800722c <HAL_RCC_GetPCLK2Freq>
 8008150:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008154:	e003      	b.n	800815e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008156:	f7ff f855 	bl	8007204 <HAL_RCC_GetPCLK1Freq>
 800815a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800815e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008168:	f040 810c 	bne.w	8008384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800816c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008170:	2200      	movs	r2, #0
 8008172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008176:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800817a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800817e:	4622      	mov	r2, r4
 8008180:	462b      	mov	r3, r5
 8008182:	1891      	adds	r1, r2, r2
 8008184:	65b9      	str	r1, [r7, #88]	; 0x58
 8008186:	415b      	adcs	r3, r3
 8008188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800818a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800818e:	4621      	mov	r1, r4
 8008190:	eb12 0801 	adds.w	r8, r2, r1
 8008194:	4629      	mov	r1, r5
 8008196:	eb43 0901 	adc.w	r9, r3, r1
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	f04f 0300 	mov.w	r3, #0
 80081a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ae:	4690      	mov	r8, r2
 80081b0:	4699      	mov	r9, r3
 80081b2:	4623      	mov	r3, r4
 80081b4:	eb18 0303 	adds.w	r3, r8, r3
 80081b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081bc:	462b      	mov	r3, r5
 80081be:	eb49 0303 	adc.w	r3, r9, r3
 80081c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081da:	460b      	mov	r3, r1
 80081dc:	18db      	adds	r3, r3, r3
 80081de:	653b      	str	r3, [r7, #80]	; 0x50
 80081e0:	4613      	mov	r3, r2
 80081e2:	eb42 0303 	adc.w	r3, r2, r3
 80081e6:	657b      	str	r3, [r7, #84]	; 0x54
 80081e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081f0:	f7f8 fd52 	bl	8000c98 <__aeabi_uldivmod>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4b61      	ldr	r3, [pc, #388]	; (8008380 <UART_SetConfig+0x2d4>)
 80081fa:	fba3 2302 	umull	r2, r3, r3, r2
 80081fe:	095b      	lsrs	r3, r3, #5
 8008200:	011c      	lsls	r4, r3, #4
 8008202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008206:	2200      	movs	r2, #0
 8008208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800820c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	1891      	adds	r1, r2, r2
 800821a:	64b9      	str	r1, [r7, #72]	; 0x48
 800821c:	415b      	adcs	r3, r3
 800821e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008224:	4641      	mov	r1, r8
 8008226:	eb12 0a01 	adds.w	sl, r2, r1
 800822a:	4649      	mov	r1, r9
 800822c:	eb43 0b01 	adc.w	fp, r3, r1
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800823c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008244:	4692      	mov	sl, r2
 8008246:	469b      	mov	fp, r3
 8008248:	4643      	mov	r3, r8
 800824a:	eb1a 0303 	adds.w	r3, sl, r3
 800824e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008252:	464b      	mov	r3, r9
 8008254:	eb4b 0303 	adc.w	r3, fp, r3
 8008258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008268:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800826c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008270:	460b      	mov	r3, r1
 8008272:	18db      	adds	r3, r3, r3
 8008274:	643b      	str	r3, [r7, #64]	; 0x40
 8008276:	4613      	mov	r3, r2
 8008278:	eb42 0303 	adc.w	r3, r2, r3
 800827c:	647b      	str	r3, [r7, #68]	; 0x44
 800827e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008286:	f7f8 fd07 	bl	8000c98 <__aeabi_uldivmod>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4611      	mov	r1, r2
 8008290:	4b3b      	ldr	r3, [pc, #236]	; (8008380 <UART_SetConfig+0x2d4>)
 8008292:	fba3 2301 	umull	r2, r3, r3, r1
 8008296:	095b      	lsrs	r3, r3, #5
 8008298:	2264      	movs	r2, #100	; 0x64
 800829a:	fb02 f303 	mul.w	r3, r2, r3
 800829e:	1acb      	subs	r3, r1, r3
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082a6:	4b36      	ldr	r3, [pc, #216]	; (8008380 <UART_SetConfig+0x2d4>)
 80082a8:	fba3 2302 	umull	r2, r3, r3, r2
 80082ac:	095b      	lsrs	r3, r3, #5
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082b4:	441c      	add	r4, r3
 80082b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082c8:	4642      	mov	r2, r8
 80082ca:	464b      	mov	r3, r9
 80082cc:	1891      	adds	r1, r2, r2
 80082ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80082d0:	415b      	adcs	r3, r3
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082d8:	4641      	mov	r1, r8
 80082da:	1851      	adds	r1, r2, r1
 80082dc:	6339      	str	r1, [r7, #48]	; 0x30
 80082de:	4649      	mov	r1, r9
 80082e0:	414b      	adcs	r3, r1
 80082e2:	637b      	str	r3, [r7, #52]	; 0x34
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082f0:	4659      	mov	r1, fp
 80082f2:	00cb      	lsls	r3, r1, #3
 80082f4:	4651      	mov	r1, sl
 80082f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082fa:	4651      	mov	r1, sl
 80082fc:	00ca      	lsls	r2, r1, #3
 80082fe:	4610      	mov	r0, r2
 8008300:	4619      	mov	r1, r3
 8008302:	4603      	mov	r3, r0
 8008304:	4642      	mov	r2, r8
 8008306:	189b      	adds	r3, r3, r2
 8008308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800830c:	464b      	mov	r3, r9
 800830e:	460a      	mov	r2, r1
 8008310:	eb42 0303 	adc.w	r3, r2, r3
 8008314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008324:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800832c:	460b      	mov	r3, r1
 800832e:	18db      	adds	r3, r3, r3
 8008330:	62bb      	str	r3, [r7, #40]	; 0x28
 8008332:	4613      	mov	r3, r2
 8008334:	eb42 0303 	adc.w	r3, r2, r3
 8008338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800833a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800833e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008342:	f7f8 fca9 	bl	8000c98 <__aeabi_uldivmod>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4b0d      	ldr	r3, [pc, #52]	; (8008380 <UART_SetConfig+0x2d4>)
 800834c:	fba3 1302 	umull	r1, r3, r3, r2
 8008350:	095b      	lsrs	r3, r3, #5
 8008352:	2164      	movs	r1, #100	; 0x64
 8008354:	fb01 f303 	mul.w	r3, r1, r3
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	3332      	adds	r3, #50	; 0x32
 800835e:	4a08      	ldr	r2, [pc, #32]	; (8008380 <UART_SetConfig+0x2d4>)
 8008360:	fba2 2303 	umull	r2, r3, r2, r3
 8008364:	095b      	lsrs	r3, r3, #5
 8008366:	f003 0207 	and.w	r2, r3, #7
 800836a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4422      	add	r2, r4
 8008372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008374:	e106      	b.n	8008584 <UART_SetConfig+0x4d8>
 8008376:	bf00      	nop
 8008378:	40011000 	.word	0x40011000
 800837c:	40011400 	.word	0x40011400
 8008380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008388:	2200      	movs	r2, #0
 800838a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800838e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008396:	4642      	mov	r2, r8
 8008398:	464b      	mov	r3, r9
 800839a:	1891      	adds	r1, r2, r2
 800839c:	6239      	str	r1, [r7, #32]
 800839e:	415b      	adcs	r3, r3
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
 80083a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083a6:	4641      	mov	r1, r8
 80083a8:	1854      	adds	r4, r2, r1
 80083aa:	4649      	mov	r1, r9
 80083ac:	eb43 0501 	adc.w	r5, r3, r1
 80083b0:	f04f 0200 	mov.w	r2, #0
 80083b4:	f04f 0300 	mov.w	r3, #0
 80083b8:	00eb      	lsls	r3, r5, #3
 80083ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083be:	00e2      	lsls	r2, r4, #3
 80083c0:	4614      	mov	r4, r2
 80083c2:	461d      	mov	r5, r3
 80083c4:	4643      	mov	r3, r8
 80083c6:	18e3      	adds	r3, r4, r3
 80083c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083cc:	464b      	mov	r3, r9
 80083ce:	eb45 0303 	adc.w	r3, r5, r3
 80083d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	f04f 0300 	mov.w	r3, #0
 80083ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083f2:	4629      	mov	r1, r5
 80083f4:	008b      	lsls	r3, r1, #2
 80083f6:	4621      	mov	r1, r4
 80083f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083fc:	4621      	mov	r1, r4
 80083fe:	008a      	lsls	r2, r1, #2
 8008400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008404:	f7f8 fc48 	bl	8000c98 <__aeabi_uldivmod>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4b60      	ldr	r3, [pc, #384]	; (8008590 <UART_SetConfig+0x4e4>)
 800840e:	fba3 2302 	umull	r2, r3, r3, r2
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	011c      	lsls	r4, r3, #4
 8008416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800841a:	2200      	movs	r2, #0
 800841c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008420:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008428:	4642      	mov	r2, r8
 800842a:	464b      	mov	r3, r9
 800842c:	1891      	adds	r1, r2, r2
 800842e:	61b9      	str	r1, [r7, #24]
 8008430:	415b      	adcs	r3, r3
 8008432:	61fb      	str	r3, [r7, #28]
 8008434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008438:	4641      	mov	r1, r8
 800843a:	1851      	adds	r1, r2, r1
 800843c:	6139      	str	r1, [r7, #16]
 800843e:	4649      	mov	r1, r9
 8008440:	414b      	adcs	r3, r1
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008450:	4659      	mov	r1, fp
 8008452:	00cb      	lsls	r3, r1, #3
 8008454:	4651      	mov	r1, sl
 8008456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800845a:	4651      	mov	r1, sl
 800845c:	00ca      	lsls	r2, r1, #3
 800845e:	4610      	mov	r0, r2
 8008460:	4619      	mov	r1, r3
 8008462:	4603      	mov	r3, r0
 8008464:	4642      	mov	r2, r8
 8008466:	189b      	adds	r3, r3, r2
 8008468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800846c:	464b      	mov	r3, r9
 800846e:	460a      	mov	r2, r1
 8008470:	eb42 0303 	adc.w	r3, r2, r3
 8008474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	67bb      	str	r3, [r7, #120]	; 0x78
 8008482:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008490:	4649      	mov	r1, r9
 8008492:	008b      	lsls	r3, r1, #2
 8008494:	4641      	mov	r1, r8
 8008496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800849a:	4641      	mov	r1, r8
 800849c:	008a      	lsls	r2, r1, #2
 800849e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084a2:	f7f8 fbf9 	bl	8000c98 <__aeabi_uldivmod>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4611      	mov	r1, r2
 80084ac:	4b38      	ldr	r3, [pc, #224]	; (8008590 <UART_SetConfig+0x4e4>)
 80084ae:	fba3 2301 	umull	r2, r3, r3, r1
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	2264      	movs	r2, #100	; 0x64
 80084b6:	fb02 f303 	mul.w	r3, r2, r3
 80084ba:	1acb      	subs	r3, r1, r3
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	3332      	adds	r3, #50	; 0x32
 80084c0:	4a33      	ldr	r2, [pc, #204]	; (8008590 <UART_SetConfig+0x4e4>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084cc:	441c      	add	r4, r3
 80084ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084d2:	2200      	movs	r2, #0
 80084d4:	673b      	str	r3, [r7, #112]	; 0x70
 80084d6:	677a      	str	r2, [r7, #116]	; 0x74
 80084d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084dc:	4642      	mov	r2, r8
 80084de:	464b      	mov	r3, r9
 80084e0:	1891      	adds	r1, r2, r2
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	415b      	adcs	r3, r3
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084ec:	4641      	mov	r1, r8
 80084ee:	1851      	adds	r1, r2, r1
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	4649      	mov	r1, r9
 80084f4:	414b      	adcs	r3, r1
 80084f6:	607b      	str	r3, [r7, #4]
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008504:	4659      	mov	r1, fp
 8008506:	00cb      	lsls	r3, r1, #3
 8008508:	4651      	mov	r1, sl
 800850a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800850e:	4651      	mov	r1, sl
 8008510:	00ca      	lsls	r2, r1, #3
 8008512:	4610      	mov	r0, r2
 8008514:	4619      	mov	r1, r3
 8008516:	4603      	mov	r3, r0
 8008518:	4642      	mov	r2, r8
 800851a:	189b      	adds	r3, r3, r2
 800851c:	66bb      	str	r3, [r7, #104]	; 0x68
 800851e:	464b      	mov	r3, r9
 8008520:	460a      	mov	r2, r1
 8008522:	eb42 0303 	adc.w	r3, r2, r3
 8008526:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	663b      	str	r3, [r7, #96]	; 0x60
 8008532:	667a      	str	r2, [r7, #100]	; 0x64
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008540:	4649      	mov	r1, r9
 8008542:	008b      	lsls	r3, r1, #2
 8008544:	4641      	mov	r1, r8
 8008546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800854a:	4641      	mov	r1, r8
 800854c:	008a      	lsls	r2, r1, #2
 800854e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008552:	f7f8 fba1 	bl	8000c98 <__aeabi_uldivmod>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <UART_SetConfig+0x4e4>)
 800855c:	fba3 1302 	umull	r1, r3, r3, r2
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	2164      	movs	r1, #100	; 0x64
 8008564:	fb01 f303 	mul.w	r3, r1, r3
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	3332      	adds	r3, #50	; 0x32
 800856e:	4a08      	ldr	r2, [pc, #32]	; (8008590 <UART_SetConfig+0x4e4>)
 8008570:	fba2 2303 	umull	r2, r3, r2, r3
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	f003 020f 	and.w	r2, r3, #15
 800857a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4422      	add	r2, r4
 8008582:	609a      	str	r2, [r3, #8]
}
 8008584:	bf00      	nop
 8008586:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800858a:	46bd      	mov	sp, r7
 800858c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008590:	51eb851f 	.word	0x51eb851f

08008594 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008594:	b084      	sub	sp, #16
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	f107 001c 	add.w	r0, r7, #28
 80085a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d122      	bne.n	80085f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80085c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d105      	bne.n	80085e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fbee 	bl	8009dc8 <USB_CoreReset>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e01a      	b.n	8008628 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 fbe2 	bl	8009dc8 <USB_CoreReset>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
 800861a:	e005      	b.n	8008628 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	2b01      	cmp	r3, #1
 800862c:	d10b      	bne.n	8008646 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f043 0206 	orr.w	r2, r3, #6
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008652:	b004      	add	sp, #16
 8008654:	4770      	bx	lr
	...

08008658 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008666:	79fb      	ldrb	r3, [r7, #7]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d165      	bne.n	8008738 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4a41      	ldr	r2, [pc, #260]	; (8008774 <USB_SetTurnaroundTime+0x11c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d906      	bls.n	8008682 <USB_SetTurnaroundTime+0x2a>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4a40      	ldr	r2, [pc, #256]	; (8008778 <USB_SetTurnaroundTime+0x120>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d202      	bcs.n	8008682 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800867c:	230f      	movs	r3, #15
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	e062      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	4a3c      	ldr	r2, [pc, #240]	; (8008778 <USB_SetTurnaroundTime+0x120>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d306      	bcc.n	8008698 <USB_SetTurnaroundTime+0x40>
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	4a3b      	ldr	r2, [pc, #236]	; (800877c <USB_SetTurnaroundTime+0x124>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d202      	bcs.n	8008698 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008692:	230e      	movs	r3, #14
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	e057      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4a38      	ldr	r2, [pc, #224]	; (800877c <USB_SetTurnaroundTime+0x124>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d306      	bcc.n	80086ae <USB_SetTurnaroundTime+0x56>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4a37      	ldr	r2, [pc, #220]	; (8008780 <USB_SetTurnaroundTime+0x128>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d202      	bcs.n	80086ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80086a8:	230d      	movs	r3, #13
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	e04c      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4a33      	ldr	r2, [pc, #204]	; (8008780 <USB_SetTurnaroundTime+0x128>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d306      	bcc.n	80086c4 <USB_SetTurnaroundTime+0x6c>
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	4a32      	ldr	r2, [pc, #200]	; (8008784 <USB_SetTurnaroundTime+0x12c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d802      	bhi.n	80086c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80086be:	230c      	movs	r3, #12
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	e041      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	4a2f      	ldr	r2, [pc, #188]	; (8008784 <USB_SetTurnaroundTime+0x12c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d906      	bls.n	80086da <USB_SetTurnaroundTime+0x82>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4a2e      	ldr	r2, [pc, #184]	; (8008788 <USB_SetTurnaroundTime+0x130>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d802      	bhi.n	80086da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80086d4:	230b      	movs	r3, #11
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	e036      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	4a2a      	ldr	r2, [pc, #168]	; (8008788 <USB_SetTurnaroundTime+0x130>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d906      	bls.n	80086f0 <USB_SetTurnaroundTime+0x98>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	4a29      	ldr	r2, [pc, #164]	; (800878c <USB_SetTurnaroundTime+0x134>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d802      	bhi.n	80086f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80086ea:	230a      	movs	r3, #10
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	e02b      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4a26      	ldr	r2, [pc, #152]	; (800878c <USB_SetTurnaroundTime+0x134>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d906      	bls.n	8008706 <USB_SetTurnaroundTime+0xae>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	4a25      	ldr	r2, [pc, #148]	; (8008790 <USB_SetTurnaroundTime+0x138>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d202      	bcs.n	8008706 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008700:	2309      	movs	r3, #9
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	e020      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	4a21      	ldr	r2, [pc, #132]	; (8008790 <USB_SetTurnaroundTime+0x138>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d306      	bcc.n	800871c <USB_SetTurnaroundTime+0xc4>
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	4a20      	ldr	r2, [pc, #128]	; (8008794 <USB_SetTurnaroundTime+0x13c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d802      	bhi.n	800871c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008716:	2308      	movs	r3, #8
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	e015      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	4a1d      	ldr	r2, [pc, #116]	; (8008794 <USB_SetTurnaroundTime+0x13c>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d906      	bls.n	8008732 <USB_SetTurnaroundTime+0xda>
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4a1c      	ldr	r2, [pc, #112]	; (8008798 <USB_SetTurnaroundTime+0x140>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d202      	bcs.n	8008732 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800872c:	2307      	movs	r3, #7
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	e00a      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008732:	2306      	movs	r3, #6
 8008734:	617b      	str	r3, [r7, #20]
 8008736:	e007      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d102      	bne.n	8008744 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800873e:	2309      	movs	r3, #9
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	e001      	b.n	8008748 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008744:	2309      	movs	r3, #9
 8008746:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	029b      	lsls	r3, r3, #10
 800875c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008760:	431a      	orrs	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	00d8acbf 	.word	0x00d8acbf
 8008778:	00e4e1c0 	.word	0x00e4e1c0
 800877c:	00f42400 	.word	0x00f42400
 8008780:	01067380 	.word	0x01067380
 8008784:	011a499f 	.word	0x011a499f
 8008788:	01312cff 	.word	0x01312cff
 800878c:	014ca43f 	.word	0x014ca43f
 8008790:	016e3600 	.word	0x016e3600
 8008794:	01a6ab1f 	.word	0x01a6ab1f
 8008798:	01e84800 	.word	0x01e84800

0800879c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f043 0201 	orr.w	r2, r3, #1
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f023 0201 	bic.w	r2, r3, #1
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087fc:	78fb      	ldrb	r3, [r7, #3]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d115      	bne.n	800882e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800880e:	2001      	movs	r0, #1
 8008810:	f7fa fdf2 	bl	80033f8 <HAL_Delay>
      ms++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3301      	adds	r3, #1
 8008818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 fa45 	bl	8009caa <USB_GetMode>
 8008820:	4603      	mov	r3, r0
 8008822:	2b01      	cmp	r3, #1
 8008824:	d01e      	beq.n	8008864 <USB_SetCurrentMode+0x84>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b31      	cmp	r3, #49	; 0x31
 800882a:	d9f0      	bls.n	800880e <USB_SetCurrentMode+0x2e>
 800882c:	e01a      	b.n	8008864 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d115      	bne.n	8008860 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008840:	2001      	movs	r0, #1
 8008842:	f7fa fdd9 	bl	80033f8 <HAL_Delay>
      ms++;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3301      	adds	r3, #1
 800884a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fa2c 	bl	8009caa <USB_GetMode>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d005      	beq.n	8008864 <USB_SetCurrentMode+0x84>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b31      	cmp	r3, #49	; 0x31
 800885c:	d9f0      	bls.n	8008840 <USB_SetCurrentMode+0x60>
 800885e:	e001      	b.n	8008864 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e005      	b.n	8008870 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b32      	cmp	r3, #50	; 0x32
 8008868:	d101      	bne.n	800886e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008878:	b084      	sub	sp, #16
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008892:	2300      	movs	r3, #0
 8008894:	613b      	str	r3, [r7, #16]
 8008896:	e009      	b.n	80088ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3340      	adds	r3, #64	; 0x40
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	2200      	movs	r2, #0
 80088a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	3301      	adds	r3, #1
 80088aa:	613b      	str	r3, [r7, #16]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	2b0e      	cmp	r3, #14
 80088b0:	d9f2      	bls.n	8008898 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d11c      	bne.n	80088f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088c6:	f043 0302 	orr.w	r3, r3, #2
 80088ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
 80088f0:	e00b      	b.n	800890a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008910:	461a      	mov	r2, r3
 8008912:	2300      	movs	r3, #0
 8008914:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891c:	4619      	mov	r1, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008924:	461a      	mov	r2, r3
 8008926:	680b      	ldr	r3, [r1, #0]
 8008928:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	2b01      	cmp	r3, #1
 800892e:	d10c      	bne.n	800894a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d104      	bne.n	8008940 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008936:	2100      	movs	r1, #0
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f965 	bl	8008c08 <USB_SetDevSpeed>
 800893e:	e008      	b.n	8008952 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008940:	2101      	movs	r1, #1
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f960 	bl	8008c08 <USB_SetDevSpeed>
 8008948:	e003      	b.n	8008952 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800894a:	2103      	movs	r1, #3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f95b 	bl	8008c08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008952:	2110      	movs	r1, #16
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f8f3 	bl	8008b40 <USB_FlushTxFifo>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f91f 	bl	8008ba8 <USB_FlushRxFifo>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897a:	461a      	mov	r2, r3
 800897c:	2300      	movs	r3, #0
 800897e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	461a      	mov	r2, r3
 8008988:	2300      	movs	r3, #0
 800898a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	461a      	mov	r2, r3
 8008994:	2300      	movs	r3, #0
 8008996:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008998:	2300      	movs	r3, #0
 800899a:	613b      	str	r3, [r7, #16]
 800899c:	e043      	b.n	8008a26 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	015a      	lsls	r2, r3, #5
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089b4:	d118      	bne.n	80089e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	461a      	mov	r2, r3
 80089ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	e013      	b.n	80089fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089de:	461a      	mov	r2, r3
 80089e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	e008      	b.n	80089fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f4:	461a      	mov	r2, r3
 80089f6:	2300      	movs	r3, #0
 80089f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a06:	461a      	mov	r2, r3
 8008a08:	2300      	movs	r3, #0
 8008a0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a18:	461a      	mov	r2, r3
 8008a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	3301      	adds	r3, #1
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d3b7      	bcc.n	800899e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a2e:	2300      	movs	r3, #0
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	e043      	b.n	8008abc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a4a:	d118      	bne.n	8008a7e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a64:	6013      	str	r3, [r2, #0]
 8008a66:	e013      	b.n	8008a90 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a74:	461a      	mov	r2, r3
 8008a76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	e008      	b.n	8008a90 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ab4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d3b7      	bcc.n	8008a34 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ae4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d105      	bne.n	8008af8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	f043 0210 	orr.w	r2, r3, #16
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699a      	ldr	r2, [r3, #24]
 8008afc:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <USB_DevInit+0x2c4>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d005      	beq.n	8008b16 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f043 0208 	orr.w	r2, r3, #8
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d107      	bne.n	8008b2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b24:	f043 0304 	orr.w	r3, r3, #4
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b38:	b004      	add	sp, #16
 8008b3a:	4770      	bx	lr
 8008b3c:	803c3800 	.word	0x803c3800

08008b40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4a13      	ldr	r2, [pc, #76]	; (8008ba4 <USB_FlushTxFifo+0x64>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d901      	bls.n	8008b60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e01b      	b.n	8008b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	daf2      	bge.n	8008b4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	019b      	lsls	r3, r3, #6
 8008b70:	f043 0220 	orr.w	r2, r3, #32
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4a08      	ldr	r2, [pc, #32]	; (8008ba4 <USB_FlushTxFifo+0x64>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d901      	bls.n	8008b8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e006      	b.n	8008b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d0f0      	beq.n	8008b78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	00030d40 	.word	0x00030d40

08008ba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4a11      	ldr	r2, [pc, #68]	; (8008c04 <USB_FlushRxFifo+0x5c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d901      	bls.n	8008bc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e018      	b.n	8008bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	daf2      	bge.n	8008bb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2210      	movs	r2, #16
 8008bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <USB_FlushRxFifo+0x5c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d901      	bls.n	8008bea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e006      	b.n	8008bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b10      	cmp	r3, #16
 8008bf4:	d0f0      	beq.n	8008bd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	00030d40 	.word	0x00030d40

08008c08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	68f9      	ldr	r1, [r7, #12]
 8008c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b087      	sub	sp, #28
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 0306 	and.w	r3, r3, #6
 8008c52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	75fb      	strb	r3, [r7, #23]
 8008c5e:	e00a      	b.n	8008c76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d002      	beq.n	8008c6c <USB_GetDevSpeed+0x32>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b06      	cmp	r3, #6
 8008c6a:	d102      	bne.n	8008c72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	75fb      	strb	r3, [r7, #23]
 8008c70:	e001      	b.n	8008c76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008c72:	230f      	movs	r3, #15
 8008c74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	785b      	ldrb	r3, [r3, #1]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d13a      	bne.n	8008d16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca6:	69da      	ldr	r2, [r3, #28]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	68f9      	ldr	r1, [r7, #12]
 8008cba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d155      	bne.n	8008d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	791b      	ldrb	r3, [r3, #4]
 8008cf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008cf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	059b      	lsls	r3, r3, #22
 8008cfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	0151      	lsls	r1, r2, #5
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	440a      	add	r2, r1
 8008d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	e036      	b.n	8008d84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1c:	69da      	ldr	r2, [r3, #28]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	f003 030f 	and.w	r3, r3, #15
 8008d26:	2101      	movs	r1, #1
 8008d28:	fa01 f303 	lsl.w	r3, r1, r3
 8008d2c:	041b      	lsls	r3, r3, #16
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d34:	4313      	orrs	r3, r2
 8008d36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d11a      	bne.n	8008d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	791b      	ldrb	r3, [r3, #4]
 8008d68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d6a:	430b      	orrs	r3, r1
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	0151      	lsls	r1, r2, #5
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	440a      	add	r2, r1
 8008d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	785b      	ldrb	r3, [r3, #1]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d161      	bne.n	8008e74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dc6:	d11f      	bne.n	8008e08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	0151      	lsls	r1, r2, #5
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	440a      	add	r2, r1
 8008dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008de2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008de6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	0151      	lsls	r1, r2, #5
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	440a      	add	r2, r1
 8008dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	2101      	movs	r1, #1
 8008e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	43db      	mvns	r3, r3
 8008e22:	68f9      	ldr	r1, [r7, #12]
 8008e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e28:	4013      	ands	r3, r2
 8008e2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e32:	69da      	ldr	r2, [r3, #28]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	f003 030f 	and.w	r3, r3, #15
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	43db      	mvns	r3, r3
 8008e46:	68f9      	ldr	r1, [r7, #12]
 8008e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	0159      	lsls	r1, r3, #5
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	440b      	add	r3, r1
 8008e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4b35      	ldr	r3, [pc, #212]	; (8008f44 <USB_DeactivateEndpoint+0x1b0>)
 8008e6e:	4013      	ands	r3, r2
 8008e70:	600b      	str	r3, [r1, #0]
 8008e72:	e060      	b.n	8008f36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e8a:	d11f      	bne.n	8008ecc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008eaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	f003 030f 	and.w	r3, r3, #15
 8008edc:	2101      	movs	r1, #1
 8008ede:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee2:	041b      	lsls	r3, r3, #16
 8008ee4:	43db      	mvns	r3, r3
 8008ee6:	68f9      	ldr	r1, [r7, #12]
 8008ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eec:	4013      	ands	r3, r2
 8008eee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	2101      	movs	r1, #1
 8008f02:	fa01 f303 	lsl.w	r3, r1, r3
 8008f06:	041b      	lsls	r3, r3, #16
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f10:	4013      	ands	r3, r2
 8008f12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	0159      	lsls	r1, r3, #5
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	440b      	add	r3, r1
 8008f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <USB_DeactivateEndpoint+0x1b4>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	ec337800 	.word	0xec337800
 8008f48:	eff37800 	.word	0xeff37800

08008f4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08a      	sub	sp, #40	; 0x28
 8008f50:	af02      	add	r7, sp, #8
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	4613      	mov	r3, r2
 8008f58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	f040 815c 	bne.w	8009226 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d132      	bne.n	8008fdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	0151      	lsls	r1, r2, #5
 8008fcc:	69fa      	ldr	r2, [r7, #28]
 8008fce:	440a      	add	r2, r1
 8008fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd4:	0cdb      	lsrs	r3, r3, #19
 8008fd6:	04db      	lsls	r3, r3, #19
 8008fd8:	6113      	str	r3, [r2, #16]
 8008fda:	e074      	b.n	80090c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	0151      	lsls	r1, r2, #5
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff6:	0cdb      	lsrs	r3, r3, #19
 8008ff8:	04db      	lsls	r3, r3, #19
 8008ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	0151      	lsls	r1, r2, #5
 800900e:	69fa      	ldr	r2, [r7, #28]
 8009010:	440a      	add	r2, r1
 8009012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009016:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800901a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800901e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	4413      	add	r3, r2
 8009028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	6999      	ldr	r1, [r3, #24]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	440b      	add	r3, r1
 8009038:	1e59      	subs	r1, r3, #1
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009042:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009044:	4b9d      	ldr	r3, [pc, #628]	; (80092bc <USB_EPStartXfer+0x370>)
 8009046:	400b      	ands	r3, r1
 8009048:	69b9      	ldr	r1, [r7, #24]
 800904a:	0148      	lsls	r0, r1, #5
 800904c:	69f9      	ldr	r1, [r7, #28]
 800904e:	4401      	add	r1, r0
 8009050:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009054:	4313      	orrs	r3, r2
 8009056:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009064:	691a      	ldr	r2, [r3, #16]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800906e:	69b9      	ldr	r1, [r7, #24]
 8009070:	0148      	lsls	r0, r1, #5
 8009072:	69f9      	ldr	r1, [r7, #28]
 8009074:	4401      	add	r1, r0
 8009076:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800907a:	4313      	orrs	r3, r2
 800907c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	791b      	ldrb	r3, [r3, #4]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d11f      	bne.n	80090c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	69fa      	ldr	r2, [r7, #28]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80090a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	0151      	lsls	r1, r2, #5
 80090b8:	69fa      	ldr	r2, [r7, #28]
 80090ba:	440a      	add	r2, r1
 80090bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d14b      	bne.n	8009164 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d009      	beq.n	80090e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e0:	461a      	mov	r2, r3
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	791b      	ldrb	r3, [r3, #4]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d128      	bne.n	8009142 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d110      	bne.n	8009122 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	4413      	add	r3, r2
 8009108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	69ba      	ldr	r2, [r7, #24]
 8009110:	0151      	lsls	r1, r2, #5
 8009112:	69fa      	ldr	r2, [r7, #28]
 8009114:	440a      	add	r2, r1
 8009116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	e00f      	b.n	8009142 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	0151      	lsls	r1, r2, #5
 8009134:	69fa      	ldr	r2, [r7, #28]
 8009136:	440a      	add	r2, r1
 8009138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800913c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009140:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	0151      	lsls	r1, r2, #5
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	440a      	add	r2, r1
 8009158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800915c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e133      	b.n	80093cc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	69fa      	ldr	r2, [r7, #28]
 8009178:	440a      	add	r2, r1
 800917a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009182:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	791b      	ldrb	r3, [r3, #4]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d015      	beq.n	80091b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 811b 	beq.w	80093cc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	2101      	movs	r1, #1
 80091a8:	fa01 f303 	lsl.w	r3, r1, r3
 80091ac:	69f9      	ldr	r1, [r7, #28]
 80091ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091b2:	4313      	orrs	r3, r2
 80091b4:	634b      	str	r3, [r1, #52]	; 0x34
 80091b6:	e109      	b.n	80093cc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d110      	bne.n	80091ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	0151      	lsls	r1, r2, #5
 80091da:	69fa      	ldr	r2, [r7, #28]
 80091dc:	440a      	add	r2, r1
 80091de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	e00f      	b.n	800920a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009208:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	6919      	ldr	r1, [r3, #16]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	b298      	uxth	r0, r3
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	4603      	mov	r3, r0
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fade 	bl	80097e0 <USB_WritePacket>
 8009224:	e0d2      	b.n	80093cc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	69ba      	ldr	r2, [r7, #24]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	69fa      	ldr	r2, [r7, #28]
 800923a:	440a      	add	r2, r1
 800923c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009240:	0cdb      	lsrs	r3, r3, #19
 8009242:	04db      	lsls	r3, r3, #19
 8009244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	440a      	add	r2, r1
 800925c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009268:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d126      	bne.n	80092c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	4413      	add	r3, r2
 800927a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009288:	69b9      	ldr	r1, [r7, #24]
 800928a:	0148      	lsls	r0, r1, #5
 800928c:	69f9      	ldr	r1, [r7, #28]
 800928e:	4401      	add	r1, r0
 8009290:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009294:	4313      	orrs	r3, r2
 8009296:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092b6:	6113      	str	r3, [r2, #16]
 80092b8:	e03a      	b.n	8009330 <USB_EPStartXfer+0x3e4>
 80092ba:	bf00      	nop
 80092bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	1e5a      	subs	r2, r3, #1
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092d4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	8afa      	ldrh	r2, [r7, #22]
 80092dc:	fb03 f202 	mul.w	r2, r3, r2
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f0:	691a      	ldr	r2, [r3, #16]
 80092f2:	8afb      	ldrh	r3, [r7, #22]
 80092f4:	04d9      	lsls	r1, r3, #19
 80092f6:	4b38      	ldr	r3, [pc, #224]	; (80093d8 <USB_EPStartXfer+0x48c>)
 80092f8:	400b      	ands	r3, r1
 80092fa:	69b9      	ldr	r1, [r7, #24]
 80092fc:	0148      	lsls	r0, r1, #5
 80092fe:	69f9      	ldr	r1, [r7, #28]
 8009300:	4401      	add	r1, r0
 8009302:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009306:	4313      	orrs	r3, r2
 8009308:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009316:	691a      	ldr	r2, [r3, #16]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009320:	69b9      	ldr	r1, [r7, #24]
 8009322:	0148      	lsls	r0, r1, #5
 8009324:	69f9      	ldr	r1, [r7, #28]
 8009326:	4401      	add	r1, r0
 8009328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800932c:	4313      	orrs	r3, r2
 800932e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d10d      	bne.n	8009352 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d009      	beq.n	8009352 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	6919      	ldr	r1, [r3, #16]
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	4413      	add	r3, r2
 800934a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934e:	460a      	mov	r2, r1
 8009350:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	791b      	ldrb	r3, [r3, #4]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d128      	bne.n	80093ac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009366:	2b00      	cmp	r3, #0
 8009368:	d110      	bne.n	800938c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009384:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	e00f      	b.n	80093ac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69ba      	ldr	r2, [r7, #24]
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	0151      	lsls	r1, r2, #5
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	440a      	add	r2, r1
 80093c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	1ff80000 	.word	0x1ff80000

080093dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	785b      	ldrb	r3, [r3, #1]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	f040 80ce 	bne.w	800959a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d132      	bne.n	800946c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	0151      	lsls	r1, r2, #5
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	440a      	add	r2, r1
 800941c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	0151      	lsls	r1, r2, #5
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	440a      	add	r2, r1
 8009440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	0151      	lsls	r1, r2, #5
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	440a      	add	r2, r1
 8009460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009464:	0cdb      	lsrs	r3, r3, #19
 8009466:	04db      	lsls	r3, r3, #19
 8009468:	6113      	str	r3, [r2, #16]
 800946a:	e04e      	b.n	800950a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	0151      	lsls	r1, r2, #5
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	440a      	add	r2, r1
 8009482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009486:	0cdb      	lsrs	r3, r3, #19
 8009488:	04db      	lsls	r3, r3, #19
 800948a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	0151      	lsls	r1, r2, #5
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	440a      	add	r2, r1
 80094a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	699a      	ldr	r2, [r3, #24]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d903      	bls.n	80094c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	0151      	lsls	r1, r2, #5
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	440a      	add	r2, r1
 80094da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f0:	691a      	ldr	r2, [r3, #16]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094fa:	6939      	ldr	r1, [r7, #16]
 80094fc:	0148      	lsls	r0, r1, #5
 80094fe:	6979      	ldr	r1, [r7, #20]
 8009500:	4401      	add	r1, r0
 8009502:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009506:	4313      	orrs	r3, r2
 8009508:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d11e      	bne.n	800954e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d009      	beq.n	800952c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009524:	461a      	mov	r2, r3
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	4413      	add	r3, r2
 8009534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	0151      	lsls	r1, r2, #5
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	440a      	add	r2, r1
 8009542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	e097      	b.n	800967e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	440a      	add	r2, r1
 8009564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800956c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8083 	beq.w	800967e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800957e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	2101      	movs	r1, #1
 800958a:	fa01 f303 	lsl.w	r3, r1, r3
 800958e:	6979      	ldr	r1, [r7, #20]
 8009590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009594:	4313      	orrs	r3, r2
 8009596:	634b      	str	r3, [r1, #52]	; 0x34
 8009598:	e071      	b.n	800967e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b4:	0cdb      	lsrs	r3, r3, #19
 80095b6:	04db      	lsls	r3, r3, #19
 80095b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	0151      	lsls	r1, r2, #5
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	440a      	add	r2, r1
 80095d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d003      	beq.n	80095ee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	68da      	ldr	r2, [r3, #12]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	440a      	add	r2, r1
 800960c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009622:	691a      	ldr	r2, [r3, #16]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800962c:	6939      	ldr	r1, [r7, #16]
 800962e:	0148      	lsls	r0, r1, #5
 8009630:	6979      	ldr	r1, [r7, #20]
 8009632:	4401      	add	r1, r0
 8009634:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009638:	4313      	orrs	r3, r2
 800963a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d10d      	bne.n	800965e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d009      	beq.n	800965e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6919      	ldr	r1, [r3, #16]
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	4413      	add	r3, r2
 8009656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965a:	460a      	mov	r2, r1
 800965c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	4413      	add	r3, r2
 8009666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	0151      	lsls	r1, r2, #5
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	440a      	add	r2, r1
 8009674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009678:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800967c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	785b      	ldrb	r3, [r3, #1]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d14a      	bne.n	8009740 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096c2:	f040 8086 	bne.w	80097d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	7812      	ldrb	r2, [r2, #0]
 80096da:	0151      	lsls	r1, r2, #5
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	440a      	add	r2, r1
 80096e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80096e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	7812      	ldrb	r2, [r2, #0]
 80096fe:	0151      	lsls	r1, r2, #5
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	440a      	add	r2, r1
 8009704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800970c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3301      	adds	r3, #1
 8009712:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f242 7210 	movw	r2, #10000	; 0x2710
 800971a:	4293      	cmp	r3, r2
 800971c:	d902      	bls.n	8009724 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	75fb      	strb	r3, [r7, #23]
          break;
 8009722:	e056      	b.n	80097d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800973c:	d0e7      	beq.n	800970e <USB_EPStopXfer+0x82>
 800973e:	e048      	b.n	80097d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	4413      	add	r3, r2
 800974a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009758:	d13b      	bne.n	80097d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	7812      	ldrb	r2, [r2, #0]
 800976e:	0151      	lsls	r1, r2, #5
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	440a      	add	r2, r1
 8009774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800977c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	7812      	ldrb	r2, [r2, #0]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800979c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3301      	adds	r3, #1
 80097a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d902      	bls.n	80097b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	75fb      	strb	r3, [r7, #23]
          break;
 80097b6:	e00c      	b.n	80097d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097d0:	d0e7      	beq.n	80097a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	371c      	adds	r7, #28
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b089      	sub	sp, #36	; 0x24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4611      	mov	r1, r2
 80097ec:	461a      	mov	r2, r3
 80097ee:	460b      	mov	r3, r1
 80097f0:	71fb      	strb	r3, [r7, #7]
 80097f2:	4613      	mov	r3, r2
 80097f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80097fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009802:	2b00      	cmp	r3, #0
 8009804:	d123      	bne.n	800984e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009806:	88bb      	ldrh	r3, [r7, #4]
 8009808:	3303      	adds	r3, #3
 800980a:	089b      	lsrs	r3, r3, #2
 800980c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800980e:	2300      	movs	r3, #0
 8009810:	61bb      	str	r3, [r7, #24]
 8009812:	e018      	b.n	8009846 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	031a      	lsls	r2, r3, #12
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	4413      	add	r3, r2
 800981c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009820:	461a      	mov	r2, r3
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	3301      	adds	r3, #1
 800982c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	3301      	adds	r3, #1
 8009832:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	3301      	adds	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	3301      	adds	r3, #1
 800983e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	3301      	adds	r3, #1
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	429a      	cmp	r2, r3
 800984c:	d3e2      	bcc.n	8009814 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3724      	adds	r7, #36	; 0x24
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800985c:	b480      	push	{r7}
 800985e:	b08b      	sub	sp, #44	; 0x2c
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	4613      	mov	r3, r2
 8009868:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009872:	88fb      	ldrh	r3, [r7, #6]
 8009874:	089b      	lsrs	r3, r3, #2
 8009876:	b29b      	uxth	r3, r3
 8009878:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800987a:	88fb      	ldrh	r3, [r7, #6]
 800987c:	f003 0303 	and.w	r3, r3, #3
 8009880:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009882:	2300      	movs	r3, #0
 8009884:	623b      	str	r3, [r7, #32]
 8009886:	e014      	b.n	80098b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	601a      	str	r2, [r3, #0]
    pDest++;
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	3301      	adds	r3, #1
 8009898:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	3301      	adds	r3, #1
 800989e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	3301      	adds	r3, #1
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	3301      	adds	r3, #1
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	3301      	adds	r3, #1
 80098b0:	623b      	str	r3, [r7, #32]
 80098b2:	6a3a      	ldr	r2, [r7, #32]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d3e6      	bcc.n	8009888 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80098ba:	8bfb      	ldrh	r3, [r7, #30]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01e      	beq.n	80098fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ca:	461a      	mov	r2, r3
 80098cc:	f107 0310 	add.w	r3, r7, #16
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	fa22 f303 	lsr.w	r3, r2, r3
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	701a      	strb	r2, [r3, #0]
      i++;
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	3301      	adds	r3, #1
 80098ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	3301      	adds	r3, #1
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80098f2:	8bfb      	ldrh	r3, [r7, #30]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80098f8:	8bfb      	ldrh	r3, [r7, #30]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1ea      	bne.n	80098d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009900:	4618      	mov	r0, r3
 8009902:	372c      	adds	r7, #44	; 0x2c
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	785b      	ldrb	r3, [r3, #1]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d12c      	bne.n	8009982 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	db12      	blt.n	8009960 <USB_EPSetStall+0x54>
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00f      	beq.n	8009960 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	0151      	lsls	r1, r2, #5
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	440a      	add	r2, r1
 8009956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800995a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800995e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	0151      	lsls	r1, r2, #5
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	440a      	add	r2, r1
 8009976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800997a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	e02b      	b.n	80099da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	db12      	blt.n	80099ba <USB_EPSetStall+0xae>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00f      	beq.n	80099ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	0151      	lsls	r1, r2, #5
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	440a      	add	r2, r1
 80099b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	0151      	lsls	r1, r2, #5
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	440a      	add	r2, r1
 80099d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	785b      	ldrb	r3, [r3, #1]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d128      	bne.n	8009a56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	0151      	lsls	r1, r2, #5
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	440a      	add	r2, r1
 8009a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	791b      	ldrb	r3, [r3, #4]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d003      	beq.n	8009a34 <USB_EPClearStall+0x4c>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	791b      	ldrb	r3, [r3, #4]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d138      	bne.n	8009aa6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	0151      	lsls	r1, r2, #5
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	440a      	add	r2, r1
 8009a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	e027      	b.n	8009aa6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	015a      	lsls	r2, r3, #5
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	0151      	lsls	r1, r2, #5
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	440a      	add	r2, r1
 8009a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	791b      	ldrb	r3, [r3, #4]
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d003      	beq.n	8009a86 <USB_EPClearStall+0x9e>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	791b      	ldrb	r3, [r3, #4]
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d10f      	bne.n	8009aa6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	0151      	lsls	r1, r2, #5
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	440a      	add	r2, r1
 8009a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ad2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009ad6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	011b      	lsls	r3, r3, #4
 8009ae4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009ae8:	68f9      	ldr	r1, [r7, #12]
 8009aea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009aee:	4313      	orrs	r3, r2
 8009af0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b1a:	f023 0303 	bic.w	r3, r3, #3
 8009b1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b2e:	f023 0302 	bic.w	r3, r3, #2
 8009b32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b085      	sub	sp, #20
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b5c:	f023 0303 	bic.w	r3, r3, #3
 8009b60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b70:	f043 0302 	orr.w	r3, r3, #2
 8009b74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	4013      	ands	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b085      	sub	sp, #20
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	0c1b      	lsrs	r3, r3, #16
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	b29b      	uxth	r3, r3
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b085      	sub	sp, #20
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c40:	68bb      	ldr	r3, [r7, #8]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b087      	sub	sp, #28
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	460b      	mov	r3, r1
 8009c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009c72:	78fb      	ldrb	r3, [r7, #3]
 8009c74:	f003 030f 	and.w	r3, r3, #15
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7e:	01db      	lsls	r3, r3, #7
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	4013      	ands	r3, r2
 8009c9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	371c      	adds	r7, #28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b083      	sub	sp, #12
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	f003 0301 	and.w	r3, r3, #1
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009ce4:	f023 0307 	bic.w	r3, r3, #7
 8009ce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	460b      	mov	r3, r1
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	333c      	adds	r3, #60	; 0x3c
 8009d22:	3304      	adds	r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	4a26      	ldr	r2, [pc, #152]	; (8009dc4 <USB_EP0_OutStart+0xb8>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d90a      	bls.n	8009d46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d40:	d101      	bne.n	8009d46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	e037      	b.n	8009db6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	2300      	movs	r3, #0
 8009d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d74:	f043 0318 	orr.w	r3, r3, #24
 8009d78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009d8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009d8e:	7afb      	ldrb	r3, [r7, #11]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d10f      	bne.n	8009db4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009db2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	371c      	adds	r7, #28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	4f54300a 	.word	0x4f54300a

08009dc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	4a13      	ldr	r2, [pc, #76]	; (8009e2c <USB_CoreReset+0x64>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d901      	bls.n	8009de6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e01b      	b.n	8009e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	daf2      	bge.n	8009dd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	f043 0201 	orr.w	r2, r3, #1
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3301      	adds	r3, #1
 8009e02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <USB_CoreReset+0x64>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d901      	bls.n	8009e10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e006      	b.n	8009e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d0f0      	beq.n	8009dfe <USB_CoreReset+0x36>

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	00030d40 	.word	0x00030d40

08009e30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009e40:	f005 f93a 	bl	800f0b8 <USBD_static_malloc>
 8009e44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d109      	bne.n	8009e60 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	32b0      	adds	r2, #176	; 0xb0
 8009e56:	2100      	movs	r1, #0
 8009e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e0d4      	b.n	800a00a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009e60:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009e64:	2100      	movs	r1, #0
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f005 ff7f 	bl	800fd6a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	32b0      	adds	r2, #176	; 0xb0
 8009e76:	68f9      	ldr	r1, [r7, #12]
 8009e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	32b0      	adds	r2, #176	; 0xb0
 8009e86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	7c1b      	ldrb	r3, [r3, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d138      	bne.n	8009f0a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009e98:	4b5e      	ldr	r3, [pc, #376]	; (800a014 <USBD_CDC_Init+0x1e4>)
 8009e9a:	7819      	ldrb	r1, [r3, #0]
 8009e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f004 ffe5 	bl	800ee72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ea8:	4b5a      	ldr	r3, [pc, #360]	; (800a014 <USBD_CDC_Init+0x1e4>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	f003 020f 	and.w	r2, r3, #15
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	440b      	add	r3, r1
 8009ebc:	3324      	adds	r3, #36	; 0x24
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ec2:	4b55      	ldr	r3, [pc, #340]	; (800a018 <USBD_CDC_Init+0x1e8>)
 8009ec4:	7819      	ldrb	r1, [r3, #0]
 8009ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eca:	2202      	movs	r2, #2
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f004 ffd0 	bl	800ee72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ed2:	4b51      	ldr	r3, [pc, #324]	; (800a018 <USBD_CDC_Init+0x1e8>)
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	f003 020f 	and.w	r2, r3, #15
 8009eda:	6879      	ldr	r1, [r7, #4]
 8009edc:	4613      	mov	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4413      	add	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009eea:	2201      	movs	r2, #1
 8009eec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009eee:	4b4b      	ldr	r3, [pc, #300]	; (800a01c <USBD_CDC_Init+0x1ec>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	f003 020f 	and.w	r2, r3, #15
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	3326      	adds	r3, #38	; 0x26
 8009f04:	2210      	movs	r2, #16
 8009f06:	801a      	strh	r2, [r3, #0]
 8009f08:	e035      	b.n	8009f76 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009f0a:	4b42      	ldr	r3, [pc, #264]	; (800a014 <USBD_CDC_Init+0x1e4>)
 8009f0c:	7819      	ldrb	r1, [r3, #0]
 8009f0e:	2340      	movs	r3, #64	; 0x40
 8009f10:	2202      	movs	r2, #2
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f004 ffad 	bl	800ee72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009f18:	4b3e      	ldr	r3, [pc, #248]	; (800a014 <USBD_CDC_Init+0x1e4>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	f003 020f 	and.w	r2, r3, #15
 8009f20:	6879      	ldr	r1, [r7, #4]
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	3324      	adds	r3, #36	; 0x24
 8009f2e:	2201      	movs	r2, #1
 8009f30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009f32:	4b39      	ldr	r3, [pc, #228]	; (800a018 <USBD_CDC_Init+0x1e8>)
 8009f34:	7819      	ldrb	r1, [r3, #0]
 8009f36:	2340      	movs	r3, #64	; 0x40
 8009f38:	2202      	movs	r2, #2
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f004 ff99 	bl	800ee72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009f40:	4b35      	ldr	r3, [pc, #212]	; (800a018 <USBD_CDC_Init+0x1e8>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	f003 020f 	and.w	r2, r3, #15
 8009f48:	6879      	ldr	r1, [r7, #4]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	440b      	add	r3, r1
 8009f54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f58:	2201      	movs	r2, #1
 8009f5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009f5c:	4b2f      	ldr	r3, [pc, #188]	; (800a01c <USBD_CDC_Init+0x1ec>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	f003 020f 	and.w	r2, r3, #15
 8009f64:	6879      	ldr	r1, [r7, #4]
 8009f66:	4613      	mov	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	440b      	add	r3, r1
 8009f70:	3326      	adds	r3, #38	; 0x26
 8009f72:	2210      	movs	r2, #16
 8009f74:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f76:	4b29      	ldr	r3, [pc, #164]	; (800a01c <USBD_CDC_Init+0x1ec>)
 8009f78:	7819      	ldrb	r1, [r3, #0]
 8009f7a:	2308      	movs	r3, #8
 8009f7c:	2203      	movs	r2, #3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f004 ff77 	bl	800ee72 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009f84:	4b25      	ldr	r3, [pc, #148]	; (800a01c <USBD_CDC_Init+0x1ec>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f003 020f 	and.w	r2, r3, #15
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	440b      	add	r3, r1
 8009f98:	3324      	adds	r3, #36	; 0x24
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	33b0      	adds	r3, #176	; 0xb0
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e018      	b.n	800a00a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7c1b      	ldrb	r3, [r3, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10a      	bne.n	8009ff6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009fe0:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <USBD_CDC_Init+0x1e8>)
 8009fe2:	7819      	ldrb	r1, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f005 f82e 	bl	800f050 <USBD_LL_PrepareReceive>
 8009ff4:	e008      	b.n	800a008 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ff6:	4b08      	ldr	r3, [pc, #32]	; (800a018 <USBD_CDC_Init+0x1e8>)
 8009ff8:	7819      	ldrb	r1, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a000:	2340      	movs	r3, #64	; 0x40
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f005 f824 	bl	800f050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	200000b3 	.word	0x200000b3
 800a018:	200000b4 	.word	0x200000b4
 800a01c:	200000b5 	.word	0x200000b5

0800a020 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a02c:	4b3a      	ldr	r3, [pc, #232]	; (800a118 <USBD_CDC_DeInit+0xf8>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f004 ff43 	bl	800eebe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a038:	4b37      	ldr	r3, [pc, #220]	; (800a118 <USBD_CDC_DeInit+0xf8>)
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	f003 020f 	and.w	r2, r3, #15
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	4613      	mov	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	440b      	add	r3, r1
 800a04c:	3324      	adds	r3, #36	; 0x24
 800a04e:	2200      	movs	r2, #0
 800a050:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a052:	4b32      	ldr	r3, [pc, #200]	; (800a11c <USBD_CDC_DeInit+0xfc>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f004 ff30 	bl	800eebe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a05e:	4b2f      	ldr	r3, [pc, #188]	; (800a11c <USBD_CDC_DeInit+0xfc>)
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	f003 020f 	and.w	r2, r3, #15
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	440b      	add	r3, r1
 800a072:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a076:	2200      	movs	r2, #0
 800a078:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a07a:	4b29      	ldr	r3, [pc, #164]	; (800a120 <USBD_CDC_DeInit+0x100>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f004 ff1c 	bl	800eebe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a086:	4b26      	ldr	r3, [pc, #152]	; (800a120 <USBD_CDC_DeInit+0x100>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	f003 020f 	and.w	r2, r3, #15
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	440b      	add	r3, r1
 800a09a:	3324      	adds	r3, #36	; 0x24
 800a09c:	2200      	movs	r2, #0
 800a09e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a0a0:	4b1f      	ldr	r3, [pc, #124]	; (800a120 <USBD_CDC_DeInit+0x100>)
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	f003 020f 	and.w	r2, r3, #15
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	3326      	adds	r3, #38	; 0x26
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	32b0      	adds	r2, #176	; 0xb0
 800a0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d01f      	beq.n	800a10c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	33b0      	adds	r3, #176	; 0xb0
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	32b0      	adds	r2, #176	; 0xb0
 800a0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f004 fff0 	bl	800f0d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	32b0      	adds	r2, #176	; 0xb0
 800a0fe:	2100      	movs	r1, #0
 800a100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	200000b3 	.word	0x200000b3
 800a11c:	200000b4 	.word	0x200000b4
 800a120:	200000b5 	.word	0x200000b5

0800a124 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	32b0      	adds	r2, #176	; 0xb0
 800a138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a13e:	2300      	movs	r3, #0
 800a140:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a150:	2303      	movs	r3, #3
 800a152:	e0bf      	b.n	800a2d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d050      	beq.n	800a202 <USBD_CDC_Setup+0xde>
 800a160:	2b20      	cmp	r3, #32
 800a162:	f040 80af 	bne.w	800a2c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	88db      	ldrh	r3, [r3, #6]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d03a      	beq.n	800a1e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	b25b      	sxtb	r3, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	da1b      	bge.n	800a1b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	33b0      	adds	r3, #176	; 0xb0
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a18e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	88d2      	ldrh	r2, [r2, #6]
 800a194:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	88db      	ldrh	r3, [r3, #6]
 800a19a:	2b07      	cmp	r3, #7
 800a19c:	bf28      	it	cs
 800a19e:	2307      	movcs	r3, #7
 800a1a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	89fa      	ldrh	r2, [r7, #14]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f001 fd89 	bl	800bcc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a1ae:	e090      	b.n	800a2d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	785a      	ldrb	r2, [r3, #1]
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	88db      	ldrh	r3, [r3, #6]
 800a1be:	2b3f      	cmp	r3, #63	; 0x3f
 800a1c0:	d803      	bhi.n	800a1ca <USBD_CDC_Setup+0xa6>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	88db      	ldrh	r3, [r3, #6]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	e000      	b.n	800a1cc <USBD_CDC_Setup+0xa8>
 800a1ca:	2240      	movs	r2, #64	; 0x40
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a1d2:	6939      	ldr	r1, [r7, #16]
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a1da:	461a      	mov	r2, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 fd9b 	bl	800bd18 <USBD_CtlPrepareRx>
      break;
 800a1e2:	e076      	b.n	800a2d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	33b0      	adds	r3, #176	; 0xb0
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	7850      	ldrb	r0, [r2, #1]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	4798      	blx	r3
      break;
 800a200:	e067      	b.n	800a2d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	2b0b      	cmp	r3, #11
 800a208:	d851      	bhi.n	800a2ae <USBD_CDC_Setup+0x18a>
 800a20a:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <USBD_CDC_Setup+0xec>)
 800a20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a210:	0800a241 	.word	0x0800a241
 800a214:	0800a2bd 	.word	0x0800a2bd
 800a218:	0800a2af 	.word	0x0800a2af
 800a21c:	0800a2af 	.word	0x0800a2af
 800a220:	0800a2af 	.word	0x0800a2af
 800a224:	0800a2af 	.word	0x0800a2af
 800a228:	0800a2af 	.word	0x0800a2af
 800a22c:	0800a2af 	.word	0x0800a2af
 800a230:	0800a2af 	.word	0x0800a2af
 800a234:	0800a2af 	.word	0x0800a2af
 800a238:	0800a26b 	.word	0x0800a26b
 800a23c:	0800a295 	.word	0x0800a295
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d107      	bne.n	800a25c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a24c:	f107 030a 	add.w	r3, r7, #10
 800a250:	2202      	movs	r2, #2
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 fd33 	bl	800bcc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a25a:	e032      	b.n	800a2c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 fcbd 	bl	800bbde <USBD_CtlError>
            ret = USBD_FAIL;
 800a264:	2303      	movs	r3, #3
 800a266:	75fb      	strb	r3, [r7, #23]
          break;
 800a268:	e02b      	b.n	800a2c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b03      	cmp	r3, #3
 800a274:	d107      	bne.n	800a286 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a276:	f107 030d 	add.w	r3, r7, #13
 800a27a:	2201      	movs	r2, #1
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f001 fd1e 	bl	800bcc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a284:	e01d      	b.n	800a2c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 fca8 	bl	800bbde <USBD_CtlError>
            ret = USBD_FAIL;
 800a28e:	2303      	movs	r3, #3
 800a290:	75fb      	strb	r3, [r7, #23]
          break;
 800a292:	e016      	b.n	800a2c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d00f      	beq.n	800a2c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f001 fc9b 	bl	800bbde <USBD_CtlError>
            ret = USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a2ac:	e008      	b.n	800a2c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fc94 	bl	800bbde <USBD_CtlError>
          ret = USBD_FAIL;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ba:	e002      	b.n	800a2c2 <USBD_CDC_Setup+0x19e>
          break;
 800a2bc:	bf00      	nop
 800a2be:	e008      	b.n	800a2d2 <USBD_CDC_Setup+0x1ae>
          break;
 800a2c0:	bf00      	nop
      }
      break;
 800a2c2:	e006      	b.n	800a2d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f001 fc89 	bl	800bbde <USBD_CtlError>
      ret = USBD_FAIL;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a2d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	32b0      	adds	r2, #176	; 0xb0
 800a2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a302:	2303      	movs	r3, #3
 800a304:	e065      	b.n	800a3d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	32b0      	adds	r2, #176	; 0xb0
 800a310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a314:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a316:	78fb      	ldrb	r3, [r7, #3]
 800a318:	f003 020f 	and.w	r2, r3, #15
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	440b      	add	r3, r1
 800a328:	3318      	adds	r3, #24
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d02f      	beq.n	800a390 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	f003 020f 	and.w	r2, r3, #15
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	4613      	mov	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	440b      	add	r3, r1
 800a342:	3318      	adds	r3, #24
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	f003 010f 	and.w	r1, r3, #15
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	460b      	mov	r3, r1
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	440b      	add	r3, r1
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4403      	add	r3, r0
 800a358:	3348      	adds	r3, #72	; 0x48
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a360:	fb01 f303 	mul.w	r3, r1, r3
 800a364:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a366:	2b00      	cmp	r3, #0
 800a368:	d112      	bne.n	800a390 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a36a:	78fb      	ldrb	r3, [r7, #3]
 800a36c:	f003 020f 	and.w	r2, r3, #15
 800a370:	6879      	ldr	r1, [r7, #4]
 800a372:	4613      	mov	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4413      	add	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	440b      	add	r3, r1
 800a37c:	3318      	adds	r3, #24
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a382:	78f9      	ldrb	r1, [r7, #3]
 800a384:	2300      	movs	r3, #0
 800a386:	2200      	movs	r2, #0
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f004 fe40 	bl	800f00e <USBD_LL_Transmit>
 800a38e:	e01f      	b.n	800a3d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2200      	movs	r2, #0
 800a394:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	33b0      	adds	r3, #176	; 0xb0
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d010      	beq.n	800a3d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	33b0      	adds	r3, #176	; 0xb0
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a3cc:	78fa      	ldrb	r2, [r7, #3]
 800a3ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	32b0      	adds	r2, #176	; 0xb0
 800a3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	32b0      	adds	r2, #176	; 0xb0
 800a400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a408:	2303      	movs	r3, #3
 800a40a:	e01a      	b.n	800a442 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f004 fe3e 	bl	800f092 <USBD_LL_GetRxDataSize>
 800a416:	4602      	mov	r2, r0
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	33b0      	adds	r3, #176	; 0xb0
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a43c:	4611      	mov	r1, r2
 800a43e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	32b0      	adds	r2, #176	; 0xb0
 800a45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a460:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a468:	2303      	movs	r3, #3
 800a46a:	e025      	b.n	800a4b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	33b0      	adds	r3, #176	; 0xb0
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01a      	beq.n	800a4b6 <USBD_CDC_EP0_RxReady+0x6c>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a486:	2bff      	cmp	r3, #255	; 0xff
 800a488:	d015      	beq.n	800a4b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	33b0      	adds	r3, #176	; 0xb0
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4413      	add	r3, r2
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a4a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a4aa:	b292      	uxth	r2, r2
 800a4ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	22ff      	movs	r2, #255	; 0xff
 800a4b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a4c8:	2182      	movs	r1, #130	; 0x82
 800a4ca:	4818      	ldr	r0, [pc, #96]	; (800a52c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4cc:	f000 fd4f 	bl	800af6e <USBD_GetEpDesc>
 800a4d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	4815      	ldr	r0, [pc, #84]	; (800a52c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4d6:	f000 fd4a 	bl	800af6e <USBD_GetEpDesc>
 800a4da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a4dc:	2181      	movs	r1, #129	; 0x81
 800a4de:	4813      	ldr	r0, [pc, #76]	; (800a52c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a4e0:	f000 fd45 	bl	800af6e <USBD_GetEpDesc>
 800a4e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2210      	movs	r2, #16
 800a4f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d006      	beq.n	800a506 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a500:	711a      	strb	r2, [r3, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d006      	beq.n	800a51a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a514:	711a      	strb	r2, [r3, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2243      	movs	r2, #67	; 0x43
 800a51e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a520:	4b02      	ldr	r3, [pc, #8]	; (800a52c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a522:	4618      	mov	r0, r3
 800a524:	3718      	adds	r7, #24
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20000070 	.word	0x20000070

0800a530 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a538:	2182      	movs	r1, #130	; 0x82
 800a53a:	4818      	ldr	r0, [pc, #96]	; (800a59c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a53c:	f000 fd17 	bl	800af6e <USBD_GetEpDesc>
 800a540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a542:	2101      	movs	r1, #1
 800a544:	4815      	ldr	r0, [pc, #84]	; (800a59c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a546:	f000 fd12 	bl	800af6e <USBD_GetEpDesc>
 800a54a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a54c:	2181      	movs	r1, #129	; 0x81
 800a54e:	4813      	ldr	r0, [pc, #76]	; (800a59c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a550:	f000 fd0d 	bl	800af6e <USBD_GetEpDesc>
 800a554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	2210      	movs	r2, #16
 800a560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d006      	beq.n	800a576 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	2200      	movs	r2, #0
 800a56c:	711a      	strb	r2, [r3, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	f042 0202 	orr.w	r2, r2, #2
 800a574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d006      	beq.n	800a58a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	711a      	strb	r2, [r3, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f042 0202 	orr.w	r2, r2, #2
 800a588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2243      	movs	r2, #67	; 0x43
 800a58e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a590:	4b02      	ldr	r3, [pc, #8]	; (800a59c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	20000070 	.word	0x20000070

0800a5a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a5a8:	2182      	movs	r1, #130	; 0x82
 800a5aa:	4818      	ldr	r0, [pc, #96]	; (800a60c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5ac:	f000 fcdf 	bl	800af6e <USBD_GetEpDesc>
 800a5b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	4815      	ldr	r0, [pc, #84]	; (800a60c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5b6:	f000 fcda 	bl	800af6e <USBD_GetEpDesc>
 800a5ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a5bc:	2181      	movs	r1, #129	; 0x81
 800a5be:	4813      	ldr	r0, [pc, #76]	; (800a60c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5c0:	f000 fcd5 	bl	800af6e <USBD_GetEpDesc>
 800a5c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	2210      	movs	r2, #16
 800a5d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d006      	beq.n	800a5e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5e0:	711a      	strb	r2, [r3, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d006      	beq.n	800a5fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5f4:	711a      	strb	r2, [r3, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2243      	movs	r2, #67	; 0x43
 800a5fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a600:	4b02      	ldr	r3, [pc, #8]	; (800a60c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000070 	.word	0x20000070

0800a610 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	220a      	movs	r2, #10
 800a61c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a61e:	4b03      	ldr	r3, [pc, #12]	; (800a62c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	2000002c 	.word	0x2000002c

0800a630 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a640:	2303      	movs	r3, #3
 800a642:	e009      	b.n	800a658 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	33b0      	adds	r3, #176	; 0xb0
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	32b0      	adds	r2, #176	; 0xb0
 800a67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a67e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a686:	2303      	movs	r3, #3
 800a688:	e008      	b.n	800a69c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	371c      	adds	r7, #28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	32b0      	adds	r2, #176	; 0xb0
 800a6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e004      	b.n	800a6d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
	...

0800a6e4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	32b0      	adds	r2, #176	; 0xb0
 800a6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32b0      	adds	r2, #176	; 0xb0
 800a70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a712:	2303      	movs	r3, #3
 800a714:	e025      	b.n	800a762 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d11f      	bne.n	800a760 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2201      	movs	r2, #1
 800a724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a728:	4b10      	ldr	r3, [pc, #64]	; (800a76c <USBD_CDC_TransmitPacket+0x88>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	f003 020f 	and.w	r2, r3, #15
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4613      	mov	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4413      	add	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4403      	add	r3, r0
 800a742:	3318      	adds	r3, #24
 800a744:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a746:	4b09      	ldr	r3, [pc, #36]	; (800a76c <USBD_CDC_TransmitPacket+0x88>)
 800a748:	7819      	ldrb	r1, [r3, #0]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f004 fc59 	bl	800f00e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	200000b3 	.word	0x200000b3

0800a770 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	32b0      	adds	r2, #176	; 0xb0
 800a782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a786:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	32b0      	adds	r2, #176	; 0xb0
 800a792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e018      	b.n	800a7d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	7c1b      	ldrb	r3, [r3, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10a      	bne.n	800a7bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7a6:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <USBD_CDC_ReceivePacket+0x68>)
 800a7a8:	7819      	ldrb	r1, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f004 fc4b 	bl	800f050 <USBD_LL_PrepareReceive>
 800a7ba:	e008      	b.n	800a7ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7bc:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <USBD_CDC_ReceivePacket+0x68>)
 800a7be:	7819      	ldrb	r1, [r3, #0]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7c6:	2340      	movs	r3, #64	; 0x40
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f004 fc41 	bl	800f050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	200000b4 	.word	0x200000b4

0800a7dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e01f      	b.n	800a834 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	79fa      	ldrb	r2, [r7, #7]
 800a826:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f004 fabb 	bl	800eda4 <USBD_LL_Init>
 800a82e:	4603      	mov	r3, r0
 800a830:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a846:	2300      	movs	r3, #0
 800a848:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a850:	2303      	movs	r3, #3
 800a852:	e025      	b.n	800a8a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	32ae      	adds	r2, #174	; 0xae
 800a866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00f      	beq.n	800a890 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	32ae      	adds	r2, #174	; 0xae
 800a87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a880:	f107 020e 	add.w	r2, r7, #14
 800a884:	4610      	mov	r0, r2
 800a886:	4798      	blx	r3
 800a888:	4602      	mov	r2, r0
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f004 fac3 	bl	800ee3c <USBD_LL_Start>
 800a8b6:	4603      	mov	r3, r0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d009      	beq.n	800a904 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	78fa      	ldrb	r2, [r7, #3]
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	4798      	blx	r3
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	460b      	mov	r3, r1
 800a918:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	78fa      	ldrb	r2, [r7, #3]
 800a928:	4611      	mov	r1, r2
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	4798      	blx	r3
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a934:	2303      	movs	r3, #3
 800a936:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a938:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	4618      	mov	r0, r3
 800a956:	f001 f908 	bl	800bb6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a968:	461a      	mov	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a976:	f003 031f 	and.w	r3, r3, #31
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d01a      	beq.n	800a9b4 <USBD_LL_SetupStage+0x72>
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d822      	bhi.n	800a9c8 <USBD_LL_SetupStage+0x86>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <USBD_LL_SetupStage+0x4a>
 800a986:	2b01      	cmp	r3, #1
 800a988:	d00a      	beq.n	800a9a0 <USBD_LL_SetupStage+0x5e>
 800a98a:	e01d      	b.n	800a9c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fb5f 	bl	800b058 <USBD_StdDevReq>
 800a99a:	4603      	mov	r3, r0
 800a99c:	73fb      	strb	r3, [r7, #15]
      break;
 800a99e:	e020      	b.n	800a9e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fbc7 	bl	800b13c <USBD_StdItfReq>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b2:	e016      	b.n	800a9e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fc29 	bl	800b214 <USBD_StdEPReq>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a9c6:	e00c      	b.n	800a9e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a9ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f004 fa90 	bl	800eefc <USBD_LL_StallEP>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e0:	bf00      	nop
  }

  return ret;
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a9fe:	7afb      	ldrb	r3, [r7, #11]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d16e      	bne.n	800aae2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	f040 8098 	bne.w	800ab48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	689a      	ldr	r2, [r3, #8]
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d913      	bls.n	800aa4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	689a      	ldr	r2, [r3, #8]
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	1ad2      	subs	r2, r2, r3
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	bf28      	it	cs
 800aa3e:	4613      	movcs	r3, r2
 800aa40:	461a      	mov	r2, r3
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f001 f984 	bl	800bd52 <USBD_CtlContinueRx>
 800aa4a:	e07d      	b.n	800ab48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa52:	f003 031f 	and.w	r3, r3, #31
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d014      	beq.n	800aa84 <USBD_LL_DataOutStage+0x98>
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d81d      	bhi.n	800aa9a <USBD_LL_DataOutStage+0xae>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <USBD_LL_DataOutStage+0x7c>
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d003      	beq.n	800aa6e <USBD_LL_DataOutStage+0x82>
 800aa66:	e018      	b.n	800aa9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	75bb      	strb	r3, [r7, #22]
            break;
 800aa6c:	e018      	b.n	800aaa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	4619      	mov	r1, r3
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 fa5e 	bl	800af3a <USBD_CoreFindIF>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	75bb      	strb	r3, [r7, #22]
            break;
 800aa82:	e00d      	b.n	800aaa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 fa60 	bl	800af54 <USBD_CoreFindEP>
 800aa94:	4603      	mov	r3, r0
 800aa96:	75bb      	strb	r3, [r7, #22]
            break;
 800aa98:	e002      	b.n	800aaa0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	75bb      	strb	r3, [r7, #22]
            break;
 800aa9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aaa0:	7dbb      	ldrb	r3, [r7, #22]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d119      	bne.n	800aada <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d113      	bne.n	800aada <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aab2:	7dba      	ldrb	r2, [r7, #22]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	32ae      	adds	r2, #174	; 0xae
 800aab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00b      	beq.n	800aada <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aac2:	7dba      	ldrb	r2, [r7, #22]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aaca:	7dba      	ldrb	r2, [r7, #22]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	32ae      	adds	r2, #174	; 0xae
 800aad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f001 f94a 	bl	800bd74 <USBD_CtlSendStatus>
 800aae0:	e032      	b.n	800ab48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aae2:	7afb      	ldrb	r3, [r7, #11]
 800aae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	4619      	mov	r1, r3
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 fa31 	bl	800af54 <USBD_CoreFindEP>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaf6:	7dbb      	ldrb	r3, [r7, #22]
 800aaf8:	2bff      	cmp	r3, #255	; 0xff
 800aafa:	d025      	beq.n	800ab48 <USBD_LL_DataOutStage+0x15c>
 800aafc:	7dbb      	ldrb	r3, [r7, #22]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d122      	bne.n	800ab48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d117      	bne.n	800ab3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ab0e:	7dba      	ldrb	r2, [r7, #22]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	32ae      	adds	r2, #174	; 0xae
 800ab14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00f      	beq.n	800ab3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ab1e:	7dba      	ldrb	r2, [r7, #22]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ab26:	7dba      	ldrb	r2, [r7, #22]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	32ae      	adds	r2, #174	; 0xae
 800ab2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	7afa      	ldrb	r2, [r7, #11]
 800ab34:	4611      	mov	r1, r2
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	4798      	blx	r3
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	e000      	b.n	800ab4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b086      	sub	sp, #24
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	607a      	str	r2, [r7, #4]
 800ab5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d16f      	bne.n	800ac46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3314      	adds	r3, #20
 800ab6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d15a      	bne.n	800ac2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d914      	bls.n	800abac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	689a      	ldr	r2, [r3, #8]
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	1ad2      	subs	r2, r2, r3
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	461a      	mov	r2, r3
 800ab96:	6879      	ldr	r1, [r7, #4]
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f001 f8ac 	bl	800bcf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2200      	movs	r2, #0
 800aba2:	2100      	movs	r1, #0
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f004 fa53 	bl	800f050 <USBD_LL_PrepareReceive>
 800abaa:	e03f      	b.n	800ac2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	68da      	ldr	r2, [r3, #12]
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d11c      	bne.n	800abf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d316      	bcc.n	800abf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800abce:	429a      	cmp	r2, r3
 800abd0:	d20f      	bcs.n	800abf2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800abd2:	2200      	movs	r2, #0
 800abd4:	2100      	movs	r1, #0
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f001 f88d 	bl	800bcf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abe4:	2300      	movs	r3, #0
 800abe6:	2200      	movs	r2, #0
 800abe8:	2100      	movs	r1, #0
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f004 fa30 	bl	800f050 <USBD_LL_PrepareReceive>
 800abf0:	e01c      	b.n	800ac2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	d10f      	bne.n	800ac1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d009      	beq.n	800ac1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac1e:	2180      	movs	r1, #128	; 0x80
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f004 f96b 	bl	800eefc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f001 f8b7 	bl	800bd9a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d03a      	beq.n	800acac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f7ff fe42 	bl	800a8c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac44:	e032      	b.n	800acac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ac46:	7afb      	ldrb	r3, [r7, #11]
 800ac48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	4619      	mov	r1, r3
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f97f 	bl	800af54 <USBD_CoreFindEP>
 800ac56:	4603      	mov	r3, r0
 800ac58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac5a:	7dfb      	ldrb	r3, [r7, #23]
 800ac5c:	2bff      	cmp	r3, #255	; 0xff
 800ac5e:	d025      	beq.n	800acac <USBD_LL_DataInStage+0x15a>
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d122      	bne.n	800acac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d11c      	bne.n	800acac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ac72:	7dfa      	ldrb	r2, [r7, #23]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	32ae      	adds	r2, #174	; 0xae
 800ac78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d014      	beq.n	800acac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ac82:	7dfa      	ldrb	r2, [r7, #23]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ac8a:	7dfa      	ldrb	r2, [r7, #23]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	32ae      	adds	r2, #174	; 0xae
 800ac90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	7afa      	ldrb	r2, [r7, #11]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	4798      	blx	r3
 800ac9e:	4603      	mov	r3, r0
 800aca0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aca2:	7dbb      	ldrb	r3, [r7, #22]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aca8:	7dbb      	ldrb	r3, [r7, #22]
 800acaa:	e000      	b.n	800acae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d014      	beq.n	800ad1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00e      	beq.n	800ad1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	6852      	ldr	r2, [r2, #4]
 800ad0a:	b2d2      	uxtb	r2, r2
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	4798      	blx	r3
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad1c:	2340      	movs	r3, #64	; 0x40
 800ad1e:	2200      	movs	r2, #0
 800ad20:	2100      	movs	r1, #0
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f004 f8a5 	bl	800ee72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2240      	movs	r2, #64	; 0x40
 800ad34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad38:	2340      	movs	r3, #64	; 0x40
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2180      	movs	r1, #128	; 0x80
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f004 f897 	bl	800ee72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2240      	movs	r2, #64	; 0x40
 800ad4e:	621a      	str	r2, [r3, #32]

  return ret;
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b083      	sub	sp, #12
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	460b      	mov	r3, r1
 800ad64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	78fa      	ldrb	r2, [r7, #3]
 800ad6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2204      	movs	r2, #4
 800ad94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d106      	bne.n	800adc8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d110      	bne.n	800ae0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00b      	beq.n	800ae0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae06:	69db      	ldr	r3, [r3, #28]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b082      	sub	sp, #8
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	32ae      	adds	r2, #174	; 0xae
 800ae2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e01c      	b.n	800ae72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	d115      	bne.n	800ae70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	32ae      	adds	r2, #174	; 0xae
 800ae4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00b      	beq.n	800ae70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	32ae      	adds	r2, #174	; 0xae
 800ae62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	78fa      	ldrb	r2, [r7, #3]
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	32ae      	adds	r2, #174	; 0xae
 800ae90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e01c      	b.n	800aed6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d115      	bne.n	800aed4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	32ae      	adds	r2, #174	; 0xae
 800aeb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00b      	beq.n	800aed4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	32ae      	adds	r2, #174	; 0xae
 800aec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	78fa      	ldrb	r2, [r7, #3]
 800aece:	4611      	mov	r1, r2
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00e      	beq.n	800af30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	6852      	ldr	r2, [r2, #4]
 800af1e:	b2d2      	uxtb	r2, r2
 800af20:	4611      	mov	r1, r2
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	4798      	blx	r3
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800af2c:	2303      	movs	r3, #3
 800af2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af30:	7bfb      	ldrb	r3, [r7, #15]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b083      	sub	sp, #12
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	460b      	mov	r3, r1
 800af44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af48:	4618      	mov	r0, r3
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af62:	4618      	mov	r0, r3
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b086      	sub	sp, #24
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	460b      	mov	r3, r1
 800af78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800af82:	2300      	movs	r3, #0
 800af84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	885b      	ldrh	r3, [r3, #2]
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	b29b      	uxth	r3, r3
 800af92:	429a      	cmp	r2, r3
 800af94:	d920      	bls.n	800afd8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800af9e:	e013      	b.n	800afc8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800afa0:	f107 030a 	add.w	r3, r7, #10
 800afa4:	4619      	mov	r1, r3
 800afa6:	6978      	ldr	r0, [r7, #20]
 800afa8:	f000 f81b 	bl	800afe2 <USBD_GetNextDesc>
 800afac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	785b      	ldrb	r3, [r3, #1]
 800afb2:	2b05      	cmp	r3, #5
 800afb4:	d108      	bne.n	800afc8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	789b      	ldrb	r3, [r3, #2]
 800afbe:	78fa      	ldrb	r2, [r7, #3]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d008      	beq.n	800afd6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800afc4:	2300      	movs	r3, #0
 800afc6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	885b      	ldrh	r3, [r3, #2]
 800afcc:	b29a      	uxth	r2, r3
 800afce:	897b      	ldrh	r3, [r7, #10]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d8e5      	bhi.n	800afa0 <USBD_GetEpDesc+0x32>
 800afd4:	e000      	b.n	800afd8 <USBD_GetEpDesc+0x6a>
          break;
 800afd6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800afd8:	693b      	ldr	r3, [r7, #16]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b085      	sub	sp, #20
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	881a      	ldrh	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	4413      	add	r3, r2
 800affc:	b29a      	uxth	r2, r3
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4413      	add	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b00e:	68fb      	ldr	r3, [r7, #12]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	3301      	adds	r3, #1
 800b032:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b03a:	8a3b      	ldrh	r3, [r7, #16]
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	b21a      	sxth	r2, r3
 800b040:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b044:	4313      	orrs	r3, r2
 800b046:	b21b      	sxth	r3, r3
 800b048:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b04a:	89fb      	ldrh	r3, [r7, #14]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	371c      	adds	r7, #28
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b06e:	2b40      	cmp	r3, #64	; 0x40
 800b070:	d005      	beq.n	800b07e <USBD_StdDevReq+0x26>
 800b072:	2b40      	cmp	r3, #64	; 0x40
 800b074:	d857      	bhi.n	800b126 <USBD_StdDevReq+0xce>
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00f      	beq.n	800b09a <USBD_StdDevReq+0x42>
 800b07a:	2b20      	cmp	r3, #32
 800b07c:	d153      	bne.n	800b126 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	32ae      	adds	r2, #174	; 0xae
 800b088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	4798      	blx	r3
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]
      break;
 800b098:	e04a      	b.n	800b130 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	785b      	ldrb	r3, [r3, #1]
 800b09e:	2b09      	cmp	r3, #9
 800b0a0:	d83b      	bhi.n	800b11a <USBD_StdDevReq+0xc2>
 800b0a2:	a201      	add	r2, pc, #4	; (adr r2, 800b0a8 <USBD_StdDevReq+0x50>)
 800b0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a8:	0800b0fd 	.word	0x0800b0fd
 800b0ac:	0800b111 	.word	0x0800b111
 800b0b0:	0800b11b 	.word	0x0800b11b
 800b0b4:	0800b107 	.word	0x0800b107
 800b0b8:	0800b11b 	.word	0x0800b11b
 800b0bc:	0800b0db 	.word	0x0800b0db
 800b0c0:	0800b0d1 	.word	0x0800b0d1
 800b0c4:	0800b11b 	.word	0x0800b11b
 800b0c8:	0800b0f3 	.word	0x0800b0f3
 800b0cc:	0800b0e5 	.word	0x0800b0e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fa3c 	bl	800b550 <USBD_GetDescriptor>
          break;
 800b0d8:	e024      	b.n	800b124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fba1 	bl	800b824 <USBD_SetAddress>
          break;
 800b0e2:	e01f      	b.n	800b124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fbe0 	bl	800b8ac <USBD_SetConfig>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]
          break;
 800b0f0:	e018      	b.n	800b124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fc83 	bl	800ba00 <USBD_GetConfig>
          break;
 800b0fa:	e013      	b.n	800b124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fcb4 	bl	800ba6c <USBD_GetStatus>
          break;
 800b104:	e00e      	b.n	800b124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fce3 	bl	800bad4 <USBD_SetFeature>
          break;
 800b10e:	e009      	b.n	800b124 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fd07 	bl	800bb26 <USBD_ClrFeature>
          break;
 800b118:	e004      	b.n	800b124 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fd5e 	bl	800bbde <USBD_CtlError>
          break;
 800b122:	bf00      	nop
      }
      break;
 800b124:	e004      	b.n	800b130 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fd58 	bl	800bbde <USBD_CtlError>
      break;
 800b12e:	bf00      	nop
  }

  return ret;
 800b130:	7bfb      	ldrb	r3, [r7, #15]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop

0800b13c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b152:	2b40      	cmp	r3, #64	; 0x40
 800b154:	d005      	beq.n	800b162 <USBD_StdItfReq+0x26>
 800b156:	2b40      	cmp	r3, #64	; 0x40
 800b158:	d852      	bhi.n	800b200 <USBD_StdItfReq+0xc4>
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <USBD_StdItfReq+0x26>
 800b15e:	2b20      	cmp	r3, #32
 800b160:	d14e      	bne.n	800b200 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	3b01      	subs	r3, #1
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d840      	bhi.n	800b1f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	889b      	ldrh	r3, [r3, #4]
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b01      	cmp	r3, #1
 800b178:	d836      	bhi.n	800b1e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	889b      	ldrh	r3, [r3, #4]
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7ff fed9 	bl	800af3a <USBD_CoreFindIF>
 800b188:	4603      	mov	r3, r0
 800b18a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
 800b18e:	2bff      	cmp	r3, #255	; 0xff
 800b190:	d01d      	beq.n	800b1ce <USBD_StdItfReq+0x92>
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d11a      	bne.n	800b1ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b198:	7bba      	ldrb	r2, [r7, #14]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	32ae      	adds	r2, #174	; 0xae
 800b19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00f      	beq.n	800b1c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b1a8:	7bba      	ldrb	r2, [r7, #14]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b1b0:	7bba      	ldrb	r2, [r7, #14]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	32ae      	adds	r2, #174	; 0xae
 800b1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	4798      	blx	r3
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b1c6:	e004      	b.n	800b1d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b1cc:	e001      	b.n	800b1d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	88db      	ldrh	r3, [r3, #6]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d110      	bne.n	800b1fc <USBD_StdItfReq+0xc0>
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10d      	bne.n	800b1fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fdc7 	bl	800bd74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b1e6:	e009      	b.n	800b1fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 fcf7 	bl	800bbde <USBD_CtlError>
          break;
 800b1f0:	e004      	b.n	800b1fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fcf2 	bl	800bbde <USBD_CtlError>
          break;
 800b1fa:	e000      	b.n	800b1fe <USBD_StdItfReq+0xc2>
          break;
 800b1fc:	bf00      	nop
      }
      break;
 800b1fe:	e004      	b.n	800b20a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fceb 	bl	800bbde <USBD_CtlError>
      break;
 800b208:	bf00      	nop
  }

  return ret;
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	889b      	ldrh	r3, [r3, #4]
 800b226:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b230:	2b40      	cmp	r3, #64	; 0x40
 800b232:	d007      	beq.n	800b244 <USBD_StdEPReq+0x30>
 800b234:	2b40      	cmp	r3, #64	; 0x40
 800b236:	f200 817f 	bhi.w	800b538 <USBD_StdEPReq+0x324>
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d02a      	beq.n	800b294 <USBD_StdEPReq+0x80>
 800b23e:	2b20      	cmp	r3, #32
 800b240:	f040 817a 	bne.w	800b538 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff fe83 	bl	800af54 <USBD_CoreFindEP>
 800b24e:	4603      	mov	r3, r0
 800b250:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b252:	7b7b      	ldrb	r3, [r7, #13]
 800b254:	2bff      	cmp	r3, #255	; 0xff
 800b256:	f000 8174 	beq.w	800b542 <USBD_StdEPReq+0x32e>
 800b25a:	7b7b      	ldrb	r3, [r7, #13]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f040 8170 	bne.w	800b542 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b262:	7b7a      	ldrb	r2, [r7, #13]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b26a:	7b7a      	ldrb	r2, [r7, #13]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	32ae      	adds	r2, #174	; 0xae
 800b270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	f000 8163 	beq.w	800b542 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b27c:	7b7a      	ldrb	r2, [r7, #13]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	32ae      	adds	r2, #174	; 0xae
 800b282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	4798      	blx	r3
 800b28e:	4603      	mov	r3, r0
 800b290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b292:	e156      	b.n	800b542 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	785b      	ldrb	r3, [r3, #1]
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d008      	beq.n	800b2ae <USBD_StdEPReq+0x9a>
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	f300 8145 	bgt.w	800b52c <USBD_StdEPReq+0x318>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 809b 	beq.w	800b3de <USBD_StdEPReq+0x1ca>
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d03c      	beq.n	800b326 <USBD_StdEPReq+0x112>
 800b2ac:	e13e      	b.n	800b52c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d002      	beq.n	800b2c0 <USBD_StdEPReq+0xac>
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d016      	beq.n	800b2ec <USBD_StdEPReq+0xd8>
 800b2be:	e02c      	b.n	800b31a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00d      	beq.n	800b2e2 <USBD_StdEPReq+0xce>
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	2b80      	cmp	r3, #128	; 0x80
 800b2ca:	d00a      	beq.n	800b2e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f003 fe13 	bl	800eefc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2d6:	2180      	movs	r1, #128	; 0x80
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f003 fe0f 	bl	800eefc <USBD_LL_StallEP>
 800b2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2e0:	e020      	b.n	800b324 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fc7a 	bl	800bbde <USBD_CtlError>
              break;
 800b2ea:	e01b      	b.n	800b324 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	885b      	ldrh	r3, [r3, #2]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10e      	bne.n	800b312 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00b      	beq.n	800b312 <USBD_StdEPReq+0xfe>
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	2b80      	cmp	r3, #128	; 0x80
 800b2fe:	d008      	beq.n	800b312 <USBD_StdEPReq+0xfe>
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	88db      	ldrh	r3, [r3, #6]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d104      	bne.n	800b312 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f003 fdf5 	bl	800eefc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fd2e 	bl	800bd74 <USBD_CtlSendStatus>

              break;
 800b318:	e004      	b.n	800b324 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fc5e 	bl	800bbde <USBD_CtlError>
              break;
 800b322:	bf00      	nop
          }
          break;
 800b324:	e107      	b.n	800b536 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d002      	beq.n	800b338 <USBD_StdEPReq+0x124>
 800b332:	2b03      	cmp	r3, #3
 800b334:	d016      	beq.n	800b364 <USBD_StdEPReq+0x150>
 800b336:	e04b      	b.n	800b3d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00d      	beq.n	800b35a <USBD_StdEPReq+0x146>
 800b33e:	7bbb      	ldrb	r3, [r7, #14]
 800b340:	2b80      	cmp	r3, #128	; 0x80
 800b342:	d00a      	beq.n	800b35a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b344:	7bbb      	ldrb	r3, [r7, #14]
 800b346:	4619      	mov	r1, r3
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f003 fdd7 	bl	800eefc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b34e:	2180      	movs	r1, #128	; 0x80
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f003 fdd3 	bl	800eefc <USBD_LL_StallEP>
 800b356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b358:	e040      	b.n	800b3dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fc3e 	bl	800bbde <USBD_CtlError>
              break;
 800b362:	e03b      	b.n	800b3dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	885b      	ldrh	r3, [r3, #2]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d136      	bne.n	800b3da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b36c:	7bbb      	ldrb	r3, [r7, #14]
 800b36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b372:	2b00      	cmp	r3, #0
 800b374:	d004      	beq.n	800b380 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f003 fddd 	bl	800ef3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fcf7 	bl	800bd74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b386:	7bbb      	ldrb	r3, [r7, #14]
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7ff fde2 	bl	800af54 <USBD_CoreFindEP>
 800b390:	4603      	mov	r3, r0
 800b392:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b394:	7b7b      	ldrb	r3, [r7, #13]
 800b396:	2bff      	cmp	r3, #255	; 0xff
 800b398:	d01f      	beq.n	800b3da <USBD_StdEPReq+0x1c6>
 800b39a:	7b7b      	ldrb	r3, [r7, #13]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d11c      	bne.n	800b3da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b3a0:	7b7a      	ldrb	r2, [r7, #13]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b3a8:	7b7a      	ldrb	r2, [r7, #13]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	32ae      	adds	r2, #174	; 0xae
 800b3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d010      	beq.n	800b3da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b3b8:	7b7a      	ldrb	r2, [r7, #13]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	32ae      	adds	r2, #174	; 0xae
 800b3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	4798      	blx	r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b3ce:	e004      	b.n	800b3da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fc03 	bl	800bbde <USBD_CtlError>
              break;
 800b3d8:	e000      	b.n	800b3dc <USBD_StdEPReq+0x1c8>
              break;
 800b3da:	bf00      	nop
          }
          break;
 800b3dc:	e0ab      	b.n	800b536 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d002      	beq.n	800b3f0 <USBD_StdEPReq+0x1dc>
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d032      	beq.n	800b454 <USBD_StdEPReq+0x240>
 800b3ee:	e097      	b.n	800b520 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d007      	beq.n	800b406 <USBD_StdEPReq+0x1f2>
 800b3f6:	7bbb      	ldrb	r3, [r7, #14]
 800b3f8:	2b80      	cmp	r3, #128	; 0x80
 800b3fa:	d004      	beq.n	800b406 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fbed 	bl	800bbde <USBD_CtlError>
                break;
 800b404:	e091      	b.n	800b52a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	da0b      	bge.n	800b426 <USBD_StdEPReq+0x212>
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
 800b410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b414:	4613      	mov	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	3310      	adds	r3, #16
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	4413      	add	r3, r2
 800b422:	3304      	adds	r3, #4
 800b424:	e00b      	b.n	800b43e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b426:	7bbb      	ldrb	r3, [r7, #14]
 800b428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b42c:	4613      	mov	r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	4413      	add	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	4413      	add	r3, r2
 800b43c:	3304      	adds	r3, #4
 800b43e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	2200      	movs	r2, #0
 800b444:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	2202      	movs	r2, #2
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fc37 	bl	800bcc0 <USBD_CtlSendData>
              break;
 800b452:	e06a      	b.n	800b52a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	da11      	bge.n	800b480 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	f003 020f 	and.w	r2, r3, #15
 800b462:	6879      	ldr	r1, [r7, #4]
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	440b      	add	r3, r1
 800b46e:	3324      	adds	r3, #36	; 0x24
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d117      	bne.n	800b4a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fbb0 	bl	800bbde <USBD_CtlError>
                  break;
 800b47e:	e054      	b.n	800b52a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	f003 020f 	and.w	r2, r3, #15
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	440b      	add	r3, r1
 800b492:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b496:	881b      	ldrh	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d104      	bne.n	800b4a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 fb9d 	bl	800bbde <USBD_CtlError>
                  break;
 800b4a4:	e041      	b.n	800b52a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	da0b      	bge.n	800b4c6 <USBD_StdEPReq+0x2b2>
 800b4ae:	7bbb      	ldrb	r3, [r7, #14]
 800b4b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	3310      	adds	r3, #16
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	e00b      	b.n	800b4de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4c6:	7bbb      	ldrb	r3, [r7, #14]
 800b4c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	4413      	add	r3, r2
 800b4dc:	3304      	adds	r3, #4
 800b4de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <USBD_StdEPReq+0x2d8>
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
 800b4e8:	2b80      	cmp	r3, #128	; 0x80
 800b4ea:	d103      	bne.n	800b4f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	e00e      	b.n	800b512 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f003 fd3d 	bl	800ef78 <USBD_LL_IsStallEP>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d003      	beq.n	800b50c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2201      	movs	r2, #1
 800b508:	601a      	str	r2, [r3, #0]
 800b50a:	e002      	b.n	800b512 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	2200      	movs	r2, #0
 800b510:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	2202      	movs	r2, #2
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fbd1 	bl	800bcc0 <USBD_CtlSendData>
              break;
 800b51e:	e004      	b.n	800b52a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fb5b 	bl	800bbde <USBD_CtlError>
              break;
 800b528:	bf00      	nop
          }
          break;
 800b52a:	e004      	b.n	800b536 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fb55 	bl	800bbde <USBD_CtlError>
          break;
 800b534:	bf00      	nop
      }
      break;
 800b536:	e005      	b.n	800b544 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fb4f 	bl	800bbde <USBD_CtlError>
      break;
 800b540:	e000      	b.n	800b544 <USBD_StdEPReq+0x330>
      break;
 800b542:	bf00      	nop
  }

  return ret;
 800b544:	7bfb      	ldrb	r3, [r7, #15]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b55e:	2300      	movs	r3, #0
 800b560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	885b      	ldrh	r3, [r3, #2]
 800b56a:	0a1b      	lsrs	r3, r3, #8
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	3b01      	subs	r3, #1
 800b570:	2b06      	cmp	r3, #6
 800b572:	f200 8128 	bhi.w	800b7c6 <USBD_GetDescriptor+0x276>
 800b576:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <USBD_GetDescriptor+0x2c>)
 800b578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57c:	0800b599 	.word	0x0800b599
 800b580:	0800b5b1 	.word	0x0800b5b1
 800b584:	0800b5f1 	.word	0x0800b5f1
 800b588:	0800b7c7 	.word	0x0800b7c7
 800b58c:	0800b7c7 	.word	0x0800b7c7
 800b590:	0800b767 	.word	0x0800b767
 800b594:	0800b793 	.word	0x0800b793
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	7c12      	ldrb	r2, [r2, #16]
 800b5a4:	f107 0108 	add.w	r1, r7, #8
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	4798      	blx	r3
 800b5ac:	60f8      	str	r0, [r7, #12]
      break;
 800b5ae:	e112      	b.n	800b7d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	7c1b      	ldrb	r3, [r3, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10d      	bne.n	800b5d4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c0:	f107 0208 	add.w	r2, r7, #8
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4798      	blx	r3
 800b5c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b5d2:	e100      	b.n	800b7d6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5dc:	f107 0208 	add.w	r2, r7, #8
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	4798      	blx	r3
 800b5e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	701a      	strb	r2, [r3, #0]
      break;
 800b5ee:	e0f2      	b.n	800b7d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	885b      	ldrh	r3, [r3, #2]
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b05      	cmp	r3, #5
 800b5f8:	f200 80ac 	bhi.w	800b754 <USBD_GetDescriptor+0x204>
 800b5fc:	a201      	add	r2, pc, #4	; (adr r2, 800b604 <USBD_GetDescriptor+0xb4>)
 800b5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b602:	bf00      	nop
 800b604:	0800b61d 	.word	0x0800b61d
 800b608:	0800b651 	.word	0x0800b651
 800b60c:	0800b685 	.word	0x0800b685
 800b610:	0800b6b9 	.word	0x0800b6b9
 800b614:	0800b6ed 	.word	0x0800b6ed
 800b618:	0800b721 	.word	0x0800b721
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00b      	beq.n	800b640 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	7c12      	ldrb	r2, [r2, #16]
 800b634:	f107 0108 	add.w	r1, r7, #8
 800b638:	4610      	mov	r0, r2
 800b63a:	4798      	blx	r3
 800b63c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b63e:	e091      	b.n	800b764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 facb 	bl	800bbde <USBD_CtlError>
            err++;
 800b648:	7afb      	ldrb	r3, [r7, #11]
 800b64a:	3301      	adds	r3, #1
 800b64c:	72fb      	strb	r3, [r7, #11]
          break;
 800b64e:	e089      	b.n	800b764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00b      	beq.n	800b674 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	7c12      	ldrb	r2, [r2, #16]
 800b668:	f107 0108 	add.w	r1, r7, #8
 800b66c:	4610      	mov	r0, r2
 800b66e:	4798      	blx	r3
 800b670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b672:	e077      	b.n	800b764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b674:	6839      	ldr	r1, [r7, #0]
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 fab1 	bl	800bbde <USBD_CtlError>
            err++;
 800b67c:	7afb      	ldrb	r3, [r7, #11]
 800b67e:	3301      	adds	r3, #1
 800b680:	72fb      	strb	r3, [r7, #11]
          break;
 800b682:	e06f      	b.n	800b764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00b      	beq.n	800b6a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	7c12      	ldrb	r2, [r2, #16]
 800b69c:	f107 0108 	add.w	r1, r7, #8
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	4798      	blx	r3
 800b6a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6a6:	e05d      	b.n	800b764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fa97 	bl	800bbde <USBD_CtlError>
            err++;
 800b6b0:	7afb      	ldrb	r3, [r7, #11]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b6b6:	e055      	b.n	800b764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00b      	beq.n	800b6dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	7c12      	ldrb	r2, [r2, #16]
 800b6d0:	f107 0108 	add.w	r1, r7, #8
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	4798      	blx	r3
 800b6d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6da:	e043      	b.n	800b764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fa7d 	bl	800bbde <USBD_CtlError>
            err++;
 800b6e4:	7afb      	ldrb	r3, [r7, #11]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b6ea:	e03b      	b.n	800b764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00b      	beq.n	800b710 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	7c12      	ldrb	r2, [r2, #16]
 800b704:	f107 0108 	add.w	r1, r7, #8
 800b708:	4610      	mov	r0, r2
 800b70a:	4798      	blx	r3
 800b70c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b70e:	e029      	b.n	800b764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fa63 	bl	800bbde <USBD_CtlError>
            err++;
 800b718:	7afb      	ldrb	r3, [r7, #11]
 800b71a:	3301      	adds	r3, #1
 800b71c:	72fb      	strb	r3, [r7, #11]
          break;
 800b71e:	e021      	b.n	800b764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00b      	beq.n	800b744 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	7c12      	ldrb	r2, [r2, #16]
 800b738:	f107 0108 	add.w	r1, r7, #8
 800b73c:	4610      	mov	r0, r2
 800b73e:	4798      	blx	r3
 800b740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b742:	e00f      	b.n	800b764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fa49 	bl	800bbde <USBD_CtlError>
            err++;
 800b74c:	7afb      	ldrb	r3, [r7, #11]
 800b74e:	3301      	adds	r3, #1
 800b750:	72fb      	strb	r3, [r7, #11]
          break;
 800b752:	e007      	b.n	800b764 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fa41 	bl	800bbde <USBD_CtlError>
          err++;
 800b75c:	7afb      	ldrb	r3, [r7, #11]
 800b75e:	3301      	adds	r3, #1
 800b760:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b762:	bf00      	nop
      }
      break;
 800b764:	e037      	b.n	800b7d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7c1b      	ldrb	r3, [r3, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d109      	bne.n	800b782 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b776:	f107 0208 	add.w	r2, r7, #8
 800b77a:	4610      	mov	r0, r2
 800b77c:	4798      	blx	r3
 800b77e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b780:	e029      	b.n	800b7d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fa2a 	bl	800bbde <USBD_CtlError>
        err++;
 800b78a:	7afb      	ldrb	r3, [r7, #11]
 800b78c:	3301      	adds	r3, #1
 800b78e:	72fb      	strb	r3, [r7, #11]
      break;
 800b790:	e021      	b.n	800b7d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7c1b      	ldrb	r3, [r3, #16]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10d      	bne.n	800b7b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a2:	f107 0208 	add.w	r2, r7, #8
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	4798      	blx	r3
 800b7aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	2207      	movs	r2, #7
 800b7b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7b4:	e00f      	b.n	800b7d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b7b6:	6839      	ldr	r1, [r7, #0]
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fa10 	bl	800bbde <USBD_CtlError>
        err++;
 800b7be:	7afb      	ldrb	r3, [r7, #11]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	72fb      	strb	r3, [r7, #11]
      break;
 800b7c4:	e007      	b.n	800b7d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fa08 	bl	800bbde <USBD_CtlError>
      err++;
 800b7ce:	7afb      	ldrb	r3, [r7, #11]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b7d4:	bf00      	nop
  }

  if (err != 0U)
 800b7d6:	7afb      	ldrb	r3, [r7, #11]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d11e      	bne.n	800b81a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	88db      	ldrh	r3, [r3, #6]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d016      	beq.n	800b812 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b7e4:	893b      	ldrh	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00e      	beq.n	800b808 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	88da      	ldrh	r2, [r3, #6]
 800b7ee:	893b      	ldrh	r3, [r7, #8]
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	bf28      	it	cs
 800b7f4:	4613      	movcs	r3, r2
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7fa:	893b      	ldrh	r3, [r7, #8]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	68f9      	ldr	r1, [r7, #12]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fa5d 	bl	800bcc0 <USBD_CtlSendData>
 800b806:	e009      	b.n	800b81c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f9e7 	bl	800bbde <USBD_CtlError>
 800b810:	e004      	b.n	800b81c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 faae 	bl	800bd74 <USBD_CtlSendStatus>
 800b818:	e000      	b.n	800b81c <USBD_GetDescriptor+0x2cc>
    return;
 800b81a:	bf00      	nop
  }
}
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop

0800b824 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	889b      	ldrh	r3, [r3, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d131      	bne.n	800b89a <USBD_SetAddress+0x76>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	88db      	ldrh	r3, [r3, #6]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d12d      	bne.n	800b89a <USBD_SetAddress+0x76>
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	885b      	ldrh	r3, [r3, #2]
 800b842:	2b7f      	cmp	r3, #127	; 0x7f
 800b844:	d829      	bhi.n	800b89a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	885b      	ldrh	r3, [r3, #2]
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b850:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d104      	bne.n	800b868 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f9bc 	bl	800bbde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b866:	e01d      	b.n	800b8a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	7bfa      	ldrb	r2, [r7, #15]
 800b86c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b870:	7bfb      	ldrb	r3, [r7, #15]
 800b872:	4619      	mov	r1, r3
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f003 fbab 	bl	800efd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fa7a 	bl	800bd74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b880:	7bfb      	ldrb	r3, [r7, #15]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d004      	beq.n	800b890 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2202      	movs	r2, #2
 800b88a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b88e:	e009      	b.n	800b8a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b898:	e004      	b.n	800b8a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f99e 	bl	800bbde <USBD_CtlError>
  }
}
 800b8a2:	bf00      	nop
 800b8a4:	bf00      	nop
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	885b      	ldrh	r3, [r3, #2]
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	4b4e      	ldr	r3, [pc, #312]	; (800b9fc <USBD_SetConfig+0x150>)
 800b8c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b8c4:	4b4d      	ldr	r3, [pc, #308]	; (800b9fc <USBD_SetConfig+0x150>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d905      	bls.n	800b8d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f985 	bl	800bbde <USBD_CtlError>
    return USBD_FAIL;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	e08c      	b.n	800b9f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d002      	beq.n	800b8ea <USBD_SetConfig+0x3e>
 800b8e4:	2b03      	cmp	r3, #3
 800b8e6:	d029      	beq.n	800b93c <USBD_SetConfig+0x90>
 800b8e8:	e075      	b.n	800b9d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b8ea:	4b44      	ldr	r3, [pc, #272]	; (800b9fc <USBD_SetConfig+0x150>)
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d020      	beq.n	800b934 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b8f2:	4b42      	ldr	r3, [pc, #264]	; (800b9fc <USBD_SetConfig+0x150>)
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8fc:	4b3f      	ldr	r3, [pc, #252]	; (800b9fc <USBD_SetConfig+0x150>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	4619      	mov	r1, r3
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7fe ffe7 	bl	800a8d6 <USBD_SetClassConfig>
 800b908:	4603      	mov	r3, r0
 800b90a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d008      	beq.n	800b924 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f962 	bl	800bbde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2202      	movs	r2, #2
 800b91e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b922:	e065      	b.n	800b9f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fa25 	bl	800bd74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2203      	movs	r2, #3
 800b92e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b932:	e05d      	b.n	800b9f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fa1d 	bl	800bd74 <USBD_CtlSendStatus>
      break;
 800b93a:	e059      	b.n	800b9f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b93c:	4b2f      	ldr	r3, [pc, #188]	; (800b9fc <USBD_SetConfig+0x150>)
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d112      	bne.n	800b96a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2202      	movs	r2, #2
 800b948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b94c:	4b2b      	ldr	r3, [pc, #172]	; (800b9fc <USBD_SetConfig+0x150>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	461a      	mov	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b956:	4b29      	ldr	r3, [pc, #164]	; (800b9fc <USBD_SetConfig+0x150>)
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7fe ffd6 	bl	800a90e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa06 	bl	800bd74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b968:	e042      	b.n	800b9f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b96a:	4b24      	ldr	r3, [pc, #144]	; (800b9fc <USBD_SetConfig+0x150>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	461a      	mov	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	429a      	cmp	r2, r3
 800b976:	d02a      	beq.n	800b9ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7fe ffc4 	bl	800a90e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b986:	4b1d      	ldr	r3, [pc, #116]	; (800b9fc <USBD_SetConfig+0x150>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b990:	4b1a      	ldr	r3, [pc, #104]	; (800b9fc <USBD_SetConfig+0x150>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7fe ff9d 	bl	800a8d6 <USBD_SetClassConfig>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00f      	beq.n	800b9c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b9a6:	6839      	ldr	r1, [r7, #0]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f918 	bl	800bbde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7fe ffa9 	bl	800a90e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b9c4:	e014      	b.n	800b9f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f9d4 	bl	800bd74 <USBD_CtlSendStatus>
      break;
 800b9cc:	e010      	b.n	800b9f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f9d0 	bl	800bd74 <USBD_CtlSendStatus>
      break;
 800b9d4:	e00c      	b.n	800b9f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f900 	bl	800bbde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9de:	4b07      	ldr	r3, [pc, #28]	; (800b9fc <USBD_SetConfig+0x150>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7fe ff92 	bl	800a90e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ee:	bf00      	nop
  }

  return ret;
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20000bdc 	.word	0x20000bdc

0800ba00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	88db      	ldrh	r3, [r3, #6]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d004      	beq.n	800ba1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ba12:	6839      	ldr	r1, [r7, #0]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f8e2 	bl	800bbde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba1a:	e023      	b.n	800ba64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	dc02      	bgt.n	800ba2e <USBD_GetConfig+0x2e>
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	dc03      	bgt.n	800ba34 <USBD_GetConfig+0x34>
 800ba2c:	e015      	b.n	800ba5a <USBD_GetConfig+0x5a>
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d00b      	beq.n	800ba4a <USBD_GetConfig+0x4a>
 800ba32:	e012      	b.n	800ba5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3308      	adds	r3, #8
 800ba3e:	2201      	movs	r2, #1
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f93c 	bl	800bcc0 <USBD_CtlSendData>
        break;
 800ba48:	e00c      	b.n	800ba64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	2201      	movs	r2, #1
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f934 	bl	800bcc0 <USBD_CtlSendData>
        break;
 800ba58:	e004      	b.n	800ba64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f8be 	bl	800bbde <USBD_CtlError>
        break;
 800ba62:	bf00      	nop
}
 800ba64:	bf00      	nop
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d81e      	bhi.n	800bac2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	88db      	ldrh	r3, [r3, #6]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d004      	beq.n	800ba96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba8c:	6839      	ldr	r1, [r7, #0]
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f8a5 	bl	800bbde <USBD_CtlError>
        break;
 800ba94:	e01a      	b.n	800bacc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d005      	beq.n	800bab2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f043 0202 	orr.w	r2, r3, #2
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	330c      	adds	r3, #12
 800bab6:	2202      	movs	r2, #2
 800bab8:	4619      	mov	r1, r3
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f900 	bl	800bcc0 <USBD_CtlSendData>
      break;
 800bac0:	e004      	b.n	800bacc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f88a 	bl	800bbde <USBD_CtlError>
      break;
 800baca:	bf00      	nop
  }
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	885b      	ldrh	r3, [r3, #2]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d107      	bne.n	800baf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f940 	bl	800bd74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800baf4:	e013      	b.n	800bb1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	885b      	ldrh	r3, [r3, #2]
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d10b      	bne.n	800bb16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	889b      	ldrh	r3, [r3, #4]
 800bb02:	0a1b      	lsrs	r3, r3, #8
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f930 	bl	800bd74 <USBD_CtlSendStatus>
}
 800bb14:	e003      	b.n	800bb1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 f860 	bl	800bbde <USBD_CtlError>
}
 800bb1e:	bf00      	nop
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b082      	sub	sp, #8
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d80b      	bhi.n	800bb56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	885b      	ldrh	r3, [r3, #2]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d10c      	bne.n	800bb60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f910 	bl	800bd74 <USBD_CtlSendStatus>
      }
      break;
 800bb54:	e004      	b.n	800bb60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f840 	bl	800bbde <USBD_CtlError>
      break;
 800bb5e:	e000      	b.n	800bb62 <USBD_ClrFeature+0x3c>
      break;
 800bb60:	bf00      	nop
  }
}
 800bb62:	bf00      	nop
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b084      	sub	sp, #16
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	781a      	ldrb	r2, [r3, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	3301      	adds	r3, #1
 800bb84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	781a      	ldrb	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3301      	adds	r3, #1
 800bb92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7ff fa41 	bl	800b01c <SWAPBYTE>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3301      	adds	r3, #1
 800bba6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f7ff fa34 	bl	800b01c <SWAPBYTE>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f7ff fa27 	bl	800b01c <SWAPBYTE>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	80da      	strh	r2, [r3, #6]
}
 800bbd6:	bf00      	nop
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbe8:	2180      	movs	r1, #128	; 0x80
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f003 f986 	bl	800eefc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f003 f982 	bl	800eefc <USBD_LL_StallEP>
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d036      	beq.n	800bc84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bc1a:	6938      	ldr	r0, [r7, #16]
 800bc1c:	f000 f836 	bl	800bc8c <USBD_GetLen>
 800bc20:	4603      	mov	r3, r0
 800bc22:	3301      	adds	r3, #1
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	005b      	lsls	r3, r3, #1
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	4413      	add	r3, r2
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	7812      	ldrb	r2, [r2, #0]
 800bc38:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	4413      	add	r3, r2
 800bc46:	2203      	movs	r2, #3
 800bc48:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bc50:	e013      	b.n	800bc7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	4413      	add	r3, r2
 800bc58:	693a      	ldr	r2, [r7, #16]
 800bc5a:	7812      	ldrb	r2, [r2, #0]
 800bc5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	3301      	adds	r3, #1
 800bc62:	613b      	str	r3, [r7, #16]
    idx++;
 800bc64:	7dfb      	ldrb	r3, [r7, #23]
 800bc66:	3301      	adds	r3, #1
 800bc68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	4413      	add	r3, r2
 800bc70:	2200      	movs	r2, #0
 800bc72:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
 800bc76:	3301      	adds	r3, #1
 800bc78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1e7      	bne.n	800bc52 <USBD_GetString+0x52>
 800bc82:	e000      	b.n	800bc86 <USBD_GetString+0x86>
    return;
 800bc84:	bf00      	nop
  }
}
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc9c:	e005      	b.n	800bcaa <USBD_GetLen+0x1e>
  {
    len++;
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	3301      	adds	r3, #1
 800bca2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	3301      	adds	r3, #1
 800bca8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1f5      	bne.n	800bc9e <USBD_GetLen+0x12>
  }

  return len;
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	2100      	movs	r1, #0
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f003 f991 	bl	800f00e <USBD_LL_Transmit>

  return USBD_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b084      	sub	sp, #16
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	2100      	movs	r1, #0
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f003 f980 	bl	800f00e <USBD_LL_Transmit>

  return USBD_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2203      	movs	r2, #3
 800bd28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	2100      	movs	r1, #0
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f003 f984 	bl	800f050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	60f8      	str	r0, [r7, #12]
 800bd5a:	60b9      	str	r1, [r7, #8]
 800bd5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	2100      	movs	r1, #0
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f003 f973 	bl	800f050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2204      	movs	r2, #4
 800bd80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd84:	2300      	movs	r3, #0
 800bd86:	2200      	movs	r2, #0
 800bd88:	2100      	movs	r1, #0
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f003 f93f 	bl	800f00e <USBD_LL_Transmit>

  return USBD_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2205      	movs	r2, #5
 800bda6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdaa:	2300      	movs	r3, #0
 800bdac:	2200      	movs	r2, #0
 800bdae:	2100      	movs	r1, #0
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f003 f94d 	bl	800f050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <makeFreeRtosPriority>:
#endif

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority(osPriority priority) {
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	80fb      	strh	r3, [r7, #6]
    unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60fb      	str	r3, [r7, #12]

    if (priority != osPriorityError) {
 800bdce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdd2:	2b84      	cmp	r3, #132	; 0x84
 800bdd4:	d005      	beq.n	800bde2 <makeFreeRtosPriority+0x22>
        fpriority += (priority - osPriorityIdle);
 800bdd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	4413      	add	r3, r2
 800bdde:	3303      	adds	r3, #3
 800bde0:	60fb      	str	r3, [r7, #12]
    }

    return fpriority;
 800bde2:	68fb      	ldr	r3, [r7, #12]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <osKernelStart>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval status code that indicates the execution status of the function
 * @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
 */
osStatus osKernelStart(void) {
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	af00      	add	r7, sp, #0
    vTaskStartScheduler();
 800bdf4:	f001 f8ea 	bl	800cfcc <vTaskStartScheduler>

    return osOK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <osThreadCreate>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval thread ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
 */
osThreadId osThreadCreate(const osThreadDef_t * thread_def, void * argument) {
 800bdfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be00:	b089      	sub	sp, #36	; 0x24
 800be02:	af04      	add	r7, sp, #16
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	6039      	str	r1, [r7, #0]
    TaskHandle_t handle;

#if (configSUPPORT_STATIC_ALLOCATION == 1) && (configSUPPORT_DYNAMIC_ALLOCATION == 1)
    if ((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	695b      	ldr	r3, [r3, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d020      	beq.n	800be52 <osThreadCreate+0x54>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d01c      	beq.n	800be52 <osThreadCreate+0x54>
        handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), thread_def->buffer, thread_def->controlblock);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685c      	ldr	r4, [r3, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681d      	ldr	r5, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691e      	ldr	r6, [r3, #16]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff ffc8 	bl	800bdc0 <makeFreeRtosPriority>
 800be30:	4601      	mov	r1, r0
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	695b      	ldr	r3, [r3, #20]
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	6992      	ldr	r2, [r2, #24]
 800be3a:	9202      	str	r2, [sp, #8]
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	9100      	str	r1, [sp, #0]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	4632      	mov	r2, r6
 800be44:	4629      	mov	r1, r5
 800be46:	4620      	mov	r0, r4
 800be48:	f000 fdd6 	bl	800c9f8 <xTaskCreateStatic>
 800be4c:	4603      	mov	r3, r0
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	e01c      	b.n	800be8c <osThreadCreate+0x8e>
    } else {
        if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685c      	ldr	r4, [r3, #4]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681d      	ldr	r5, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	b29e      	uxth	r6, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff ffaa 	bl	800bdc0 <makeFreeRtosPriority>
 800be6c:	4602      	mov	r2, r0
 800be6e:	f107 030c 	add.w	r3, r7, #12
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	9200      	str	r2, [sp, #0]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	4632      	mov	r2, r6
 800be7a:	4629      	mov	r1, r5
 800be7c:	4620      	mov	r0, r4
 800be7e:	f000 fe18 	bl	800cab2 <xTaskCreate>
 800be82:	4603      	mov	r3, r0
 800be84:	2b01      	cmp	r3, #1
 800be86:	d001      	beq.n	800be8c <osThreadCreate+0x8e>
            return NULL;
 800be88:	2300      	movs	r3, #0
 800be8a:	e000      	b.n	800be8e <osThreadCreate+0x90>
    if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
        return NULL;
    }
#endif

    return handle;
 800be8c:	68fb      	ldr	r3, [r7, #12]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be96 <osDelay>:
/**
 * @brief   Wait for Timeout (Time Delay)
 * @param   millisec      time delay value
 * @retval  status code that indicates the execution status of the function.
 */
osStatus osDelay(uint32_t millisec) {
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
    TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	60fb      	str	r3, [r7, #12]

    vTaskDelay(ticks ? ticks : 1); /* Minimum delay = 1 tick */
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <osDelay+0x16>
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	e000      	b.n	800beae <osDelay+0x18>
 800beac:	2301      	movs	r3, #1
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 ffc6 	bl	800ce40 <vTaskDelay>

    return osOK;
 800beb4:	2300      	movs	r3, #0
#else
    (void)millisec;

    return osErrorResource;
#endif
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <vListInitialise>:

/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t * const pxList) {
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f103 0208 	add.w	r2, r3, #8
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bed6:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd);     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f103 0208 	add.w	r2, r3, #8
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f103 0208 	add.w	r2, r3, #8
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = (UBaseType_t)0U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
    listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
 800bef2:	bf00      	nop
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t * const pxItem) {
 800befe:	b480      	push	{r7}
 800bf00:	b083      	sub	sp, #12
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	689a      	ldr	r2, [r3, #8]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	601a      	str	r2, [r3, #0]
}
 800bf54:	bf00      	nop
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60bb      	str	r3, [r7, #8]
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if (xValueOfInsertion == portMAX_DELAY) {
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf76:	d103      	bne.n	800bf80 <vListInsert+0x20>
        pxIterator = pxList->xListEnd.pxPrevious;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	60fb      	str	r3, [r7, #12]
 800bf7e:	e00c      	b.n	800bf9a <vListInsert+0x3a>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3308      	adds	r3, #8
 800bf84:	60fb      	str	r3, [r7, #12]
 800bf86:	e002      	b.n	800bf8e <vListInsert+0x2e>
             pxIterator = pxIterator->pxNext) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */ /*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	60fb      	str	r3, [r7, #12]
        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d2f6      	bcs.n	800bf88 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	1c5a      	adds	r2, r3, #1
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	601a      	str	r2, [r3, #0]
}
 800bfc6:	bf00      	nop
 800bfc8:	3714      	adds	r7, #20
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t * const pxItemToRemove) {
 800bfd2:	b480      	push	{r7}
 800bfd4:	b085      	sub	sp, #20
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
    item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	6892      	ldr	r2, [r2, #8]
 800bfe8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	6852      	ldr	r2, [r2, #4]
 800bff2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if (pxList->pxIndex == pxItemToRemove) {
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d103      	bne.n	800c006 <uxListRemove+0x34>
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	605a      	str	r2, [r3, #4]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	611a      	str	r2, [r3, #16]
    (pxList->uxNumberOfItems)--;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	1e5a      	subs	r2, r3, #1
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
	...

0800c028 <xQueueGenericReset>:
        }                                                                                                                                                                                                                                                \
    }                                                                                                                                                                                                                                                    \
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	60fb      	str	r3, [r7, #12]

    configASSERT(pxQueue);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10a      	bne.n	800c052 <xQueueGenericReset+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	60bb      	str	r3, [r7, #8]
}
 800c04e:	bf00      	nop
 800c050:	e7fe      	b.n	800c050 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800c052:	f002 fa1f 	bl	800e494 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c05e:	68f9      	ldr	r1, [r7, #12]
 800c060:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c062:	fb01 f303 	mul.w	r3, r1, r3
 800c066:	441a      	add	r2, r3
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2200      	movs	r2, #0
 800c070:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ((pxQueue->uxLength - 1U) * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c082:	3b01      	subs	r3, #1
 800c084:	68f9      	ldr	r1, [r7, #12]
 800c086:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c088:	fb01 f303 	mul.w	r3, r1, r3
 800c08c:	441a      	add	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	22ff      	movs	r2, #255	; 0xff
 800c096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	22ff      	movs	r2, #255	; 0xff
 800c09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if (xNewQueue == pdFALSE) {
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d114      	bne.n	800c0d2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
            the tasks will remain blocked as after this function exits the queue
            will still be empty.  If there are tasks blocked waiting to write to
            the queue, then one should be unblocked as after this function exits
            it will be possible to write to it. */
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d01a      	beq.n	800c0e6 <xQueueGenericReset+0xbe>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	3310      	adds	r3, #16
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f001 fa0d 	bl	800d4d4 <xTaskRemoveFromEventList>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d012      	beq.n	800c0e6 <xQueueGenericReset+0xbe>
                    queueYIELD_IF_USING_PREEMPTION();
 800c0c0:	4b0c      	ldr	r3, [pc, #48]	; (800c0f4 <xQueueGenericReset+0xcc>)
 800c0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0c6:	601a      	str	r2, [r3, #0]
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	e009      	b.n	800c0e6 <xQueueGenericReset+0xbe>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        } else {
            /* Ensure the event queues start in the correct state. */
            vListInitialise(&(pxQueue->xTasksWaitingToSend));
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3310      	adds	r3, #16
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff fef1 	bl	800bebe <vListInitialise>
            vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	3324      	adds	r3, #36	; 0x24
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff feec 	bl	800bebe <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800c0e6:	f002 fa05 	bl	800e4f4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
    versions. */
    return pdPASS;
 800c0ea:	2301      	movs	r3, #1
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	e000ed04 	.word	0xe000ed04

0800c0f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

QueueHandle_t xQueueGenericCreateStatic(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, StaticQueue_t * pxStaticQueue, const uint8_t ucQueueType) {
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08e      	sub	sp, #56	; 0x38
 800c0fc:	af02      	add	r7, sp, #8
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
 800c104:	603b      	str	r3, [r7, #0]
    Queue_t * pxNewQueue;

    configASSERT(uxQueueLength > (UBaseType_t)0);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10a      	bne.n	800c122 <xQueueGenericCreateStatic+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c11e:	bf00      	nop
 800c120:	e7fe      	b.n	800c120 <xQueueGenericCreateStatic+0x28>

    /* The StaticQueue_t structure and the queue storage area must be
    supplied. */
    configASSERT(pxStaticQueue != NULL);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <xQueueGenericCreateStatic+0x46>
    __asm volatile("	mov %0, %1												\n"
 800c128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c13a:	bf00      	nop
 800c13c:	e7fe      	b.n	800c13c <xQueueGenericCreateStatic+0x44>

    /* A queue storage area should be provided if the item size is not 0, and
    should not be provided if the item size is 0. */
    configASSERT(!((pucQueueStorage != NULL) && (uxItemSize == 0)));
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <xQueueGenericCreateStatic+0x52>
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <xQueueGenericCreateStatic+0x56>
 800c14a:	2301      	movs	r3, #1
 800c14c:	e000      	b.n	800c150 <xQueueGenericCreateStatic+0x58>
 800c14e:	2300      	movs	r3, #0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10a      	bne.n	800c16a <xQueueGenericCreateStatic+0x72>
    __asm volatile("	mov %0, %1												\n"
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	623b      	str	r3, [r7, #32]
}
 800c166:	bf00      	nop
 800c168:	e7fe      	b.n	800c168 <xQueueGenericCreateStatic+0x70>
    configASSERT(!((pucQueueStorage == NULL) && (uxItemSize != 0)));
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d102      	bne.n	800c176 <xQueueGenericCreateStatic+0x7e>
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <xQueueGenericCreateStatic+0x82>
 800c176:	2301      	movs	r3, #1
 800c178:	e000      	b.n	800c17c <xQueueGenericCreateStatic+0x84>
 800c17a:	2300      	movs	r3, #0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <xQueueGenericCreateStatic+0x9e>
    __asm volatile("	mov %0, %1												\n"
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	61fb      	str	r3, [r7, #28]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xQueueGenericCreateStatic+0x9c>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticQueue_t or StaticSemaphore_t equals the size of
        the real queue and semaphore structures. */
        volatile size_t xSize = sizeof(StaticQueue_t);
 800c196:	2348      	movs	r3, #72	; 0x48
 800c198:	617b      	str	r3, [r7, #20]
        configASSERT(xSize == sizeof(Queue_t));
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b48      	cmp	r3, #72	; 0x48
 800c19e:	d00a      	beq.n	800c1b6 <xQueueGenericCreateStatic+0xbe>
    __asm volatile("	mov %0, %1												\n"
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	61bb      	str	r3, [r7, #24]
}
 800c1b2:	bf00      	nop
 800c1b4:	e7fe      	b.n	800c1b4 <xQueueGenericCreateStatic+0xbc>
        (void)xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c1b6:	697b      	ldr	r3, [r7, #20]
#endif /* configASSERT_DEFINED */

    /* The address of a statically allocated queue was passed in, use it.
    The address of a statically allocated storage area was also passed in
    but is already set. */
    pxNewQueue = (Queue_t *)pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (pxNewQueue != NULL) {
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00d      	beq.n	800c1de <xQueueGenericCreateStatic+0xe6>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
        {
            /* Queues can be allocated wither statically or dynamically, so
            note this queue was allocated statically in case the queue is
            later deleted. */
            pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
 800c1ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f000 f805 	bl	800c1e8 <prvInitialiseNewQueue>
    } else {
        traceQUEUE_CREATE_FAILED(ucQueueType);
        mtCOVERAGE_TEST_MARKER();
    }

    return pxNewQueue;
 800c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3730      	adds	r7, #48	; 0x30
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <prvInitialiseNewQueue>:
}

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, const uint8_t ucQueueType, Queue_t * pxNewQueue) {
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
    configUSE_TRACE_FACILITY not be set to 1. */
    (void)ucQueueType;

    if (uxItemSize == (UBaseType_t)0) {
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d103      	bne.n	800c204 <prvInitialiseNewQueue+0x1c>
        /* No RAM was allocated for the queue storage area, but PC head cannot
        be set to NULL because NULL is used as a key to say the queue is used as
        a mutex.  Therefore just set pcHead to point to the queue as a benign
        value that is known to be within the memory map. */
        pxNewQueue->pcHead = (int8_t *)pxNewQueue;
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	e002      	b.n	800c20a <prvInitialiseNewQueue+0x22>
    } else {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
    defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	641a      	str	r2, [r3, #64]	; 0x40
    (void)xQueueGenericReset(pxNewQueue, pdTRUE);
 800c216:	2101      	movs	r1, #1
 800c218:	69b8      	ldr	r0, [r7, #24]
 800c21a:	f7ff ff05 	bl	800c028 <xQueueGenericReset>
#if (configUSE_QUEUE_SETS == 1)
    { pxNewQueue->pxQueueSetContainer = NULL; }
#endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE(pxNewQueue);
}
 800c21e:	bf00      	nop
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
	...

0800c228 <xQueueGenericSend>:
}

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition) {
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08e      	sub	sp, #56	; 0x38
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c236:	2300      	movs	r3, #0
 800c238:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT(pxQueue);
 800c23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10a      	bne.n	800c25a <xQueueGenericSend+0x32>
    __asm volatile("	mov %0, %1												\n"
 800c244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c256:	bf00      	nop
 800c258:	e7fe      	b.n	800c258 <xQueueGenericSend+0x30>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d103      	bne.n	800c268 <xQueueGenericSend+0x40>
 800c260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <xQueueGenericSend+0x44>
 800c268:	2301      	movs	r3, #1
 800c26a:	e000      	b.n	800c26e <xQueueGenericSend+0x46>
 800c26c:	2300      	movs	r3, #0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d10a      	bne.n	800c288 <xQueueGenericSend+0x60>
    __asm volatile("	mov %0, %1												\n"
 800c272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c284:	bf00      	nop
 800c286:	e7fe      	b.n	800c286 <xQueueGenericSend+0x5e>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d103      	bne.n	800c296 <xQueueGenericSend+0x6e>
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c292:	2b01      	cmp	r3, #1
 800c294:	d101      	bne.n	800c29a <xQueueGenericSend+0x72>
 800c296:	2301      	movs	r3, #1
 800c298:	e000      	b.n	800c29c <xQueueGenericSend+0x74>
 800c29a:	2300      	movs	r3, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10a      	bne.n	800c2b6 <xQueueGenericSend+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	623b      	str	r3, [r7, #32]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xQueueGenericSend+0x8c>
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800c2b6:	f001 fac9 	bl	800d84c <xTaskGetSchedulerState>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <xQueueGenericSend+0x9e>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d101      	bne.n	800c2ca <xQueueGenericSend+0xa2>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e000      	b.n	800c2cc <xQueueGenericSend+0xa4>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10a      	bne.n	800c2e6 <xQueueGenericSend+0xbe>
    __asm volatile("	mov %0, %1												\n"
 800c2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	61fb      	str	r3, [r7, #28]
}
 800c2e2:	bf00      	nop
 800c2e4:	e7fe      	b.n	800c2e4 <xQueueGenericSend+0xbc>

    /*lint -save -e904 This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800c2e6:	f002 f8d5 	bl	800e494 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
            highest priority task wanting to access the queue.  If the head item
            in the queue is to be overwritten then it does not matter if the
            queue is full. */
            if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d302      	bcc.n	800c2fc <xQueueGenericSend+0xd4>
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d129      	bne.n	800c350 <xQueueGenericSend+0x128>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	68b9      	ldr	r1, [r7, #8]
 800c300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c302:	f000 fa0b 	bl	800c71c <prvCopyDataToQueue>
 800c306:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                    queue then unblock it now. */
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d010      	beq.n	800c332 <xQueueGenericSend+0x10a>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	3324      	adds	r3, #36	; 0x24
 800c314:	4618      	mov	r0, r3
 800c316:	f001 f8dd 	bl	800d4d4 <xTaskRemoveFromEventList>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d013      	beq.n	800c348 <xQueueGenericSend+0x120>
                            /* The unblocked task has a priority higher than
                            our own so yield immediately.  Yes it is ok to do
                            this from within the critical section - the kernel
                            takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c320:	4b3f      	ldr	r3, [pc, #252]	; (800c420 <xQueueGenericSend+0x1f8>)
 800c322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c326:	601a      	str	r2, [r3, #0]
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	e00a      	b.n	800c348 <xQueueGenericSend+0x120>
                        } else {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    } else if (xYieldRequired != pdFALSE) {
 800c332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c334:	2b00      	cmp	r3, #0
 800c336:	d007      	beq.n	800c348 <xQueueGenericSend+0x120>
                        /* This path is a special case that will only get
                        executed if the task was holding multiple mutexes and
                        the mutexes were given back in an order that is
                        different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c338:	4b39      	ldr	r3, [pc, #228]	; (800c420 <xQueueGenericSend+0x1f8>)
 800c33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c33e:	601a      	str	r2, [r3, #0]
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
#endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c348:	f002 f8d4 	bl	800e4f4 <vPortExitCritical>
                return pdPASS;
 800c34c:	2301      	movs	r3, #1
 800c34e:	e063      	b.n	800c418 <xQueueGenericSend+0x1f0>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d103      	bne.n	800c35e <xQueueGenericSend+0x136>
                    /* The queue was full and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c356:	f002 f8cd 	bl	800e4f4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                    the function. */
                    traceQUEUE_SEND_FAILED(pxQueue);
                    return errQUEUE_FULL;
 800c35a:	2300      	movs	r3, #0
 800c35c:	e05c      	b.n	800c418 <xQueueGenericSend+0x1f0>
                } else if (xEntryTimeSet == pdFALSE) {
 800c35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c360:	2b00      	cmp	r3, #0
 800c362:	d106      	bne.n	800c372 <xQueueGenericSend+0x14a>
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800c364:	f107 0314 	add.w	r3, r7, #20
 800c368:	4618      	mov	r0, r3
 800c36a:	f001 f915 	bl	800d598 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c36e:	2301      	movs	r3, #1
 800c370:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c372:	f002 f8bf 	bl	800e4f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800c376:	f000 fe8f 	bl	800d098 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800c37a:	f002 f88b 	bl	800e494 <vPortEnterCritical>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c384:	b25b      	sxtb	r3, r3
 800c386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c38a:	d103      	bne.n	800c394 <xQueueGenericSend+0x16c>
 800c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c39a:	b25b      	sxtb	r3, r3
 800c39c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3a0:	d103      	bne.n	800c3aa <xQueueGenericSend+0x182>
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3aa:	f002 f8a3 	bl	800e4f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800c3ae:	1d3a      	adds	r2, r7, #4
 800c3b0:	f107 0314 	add.w	r3, r7, #20
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f001 f904 	bl	800d5c4 <xTaskCheckForTimeOut>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d124      	bne.n	800c40c <xQueueGenericSend+0x1e4>
            if (prvIsQueueFull(pxQueue) != pdFALSE) {
 800c3c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3c4:	f000 faa2 	bl	800c90c <prvIsQueueFull>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d018      	beq.n	800c400 <xQueueGenericSend+0x1d8>
                traceBLOCKING_ON_QUEUE_SEND(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	3310      	adds	r3, #16
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f001 f82c 	bl	800d434 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                event list.  It is possible that interrupts occurring now
                remove this task from the event list again - but as the
                scheduler is suspended the task will go onto the pending
                ready last instead of the actual ready list. */
                prvUnlockQueue(pxQueue);
 800c3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3de:	f000 fa2d 	bl	800c83c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                ready list into the ready list - so it is feasible that this
                task is already in a ready list before it yields - in which
                case the yield will not cause a context switch unless there
                is also a higher priority task in the pending ready list. */
                if (xTaskResumeAll() == pdFALSE) {
 800c3e2:	f000 fe67 	bl	800d0b4 <xTaskResumeAll>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f47f af7c 	bne.w	800c2e6 <xQueueGenericSend+0xbe>
                    portYIELD_WITHIN_API();
 800c3ee:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <xQueueGenericSend+0x1f8>)
 800c3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f4:	601a      	str	r2, [r3, #0]
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	e772      	b.n	800c2e6 <xQueueGenericSend+0xbe>
                }
            } else {
                /* Try again. */
                prvUnlockQueue(pxQueue);
 800c400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c402:	f000 fa1b 	bl	800c83c <prvUnlockQueue>
                (void)xTaskResumeAll();
 800c406:	f000 fe55 	bl	800d0b4 <xTaskResumeAll>
 800c40a:	e76c      	b.n	800c2e6 <xQueueGenericSend+0xbe>
            }
        } else {
            /* The timeout has expired. */
            prvUnlockQueue(pxQueue);
 800c40c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c40e:	f000 fa15 	bl	800c83c <prvUnlockQueue>
            (void)xTaskResumeAll();
 800c412:	f000 fe4f 	bl	800d0b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED(pxQueue);
            return errQUEUE_FULL;
 800c416:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3738      	adds	r7, #56	; 0x38
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	e000ed04 	.word	0xe000ed04

0800c424 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition) {
 800c424:	b580      	push	{r7, lr}
 800c426:	b090      	sub	sp, #64	; 0x40
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT(pxQueue);
 800c436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10a      	bne.n	800c452 <xQueueGenericSendFromISR+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800c43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c44e:	bf00      	nop
 800c450:	e7fe      	b.n	800c450 <xQueueGenericSendFromISR+0x2c>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d103      	bne.n	800c460 <xQueueGenericSendFromISR+0x3c>
 800c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <xQueueGenericSendFromISR+0x40>
 800c460:	2301      	movs	r3, #1
 800c462:	e000      	b.n	800c466 <xQueueGenericSendFromISR+0x42>
 800c464:	2300      	movs	r3, #0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10a      	bne.n	800c480 <xQueueGenericSendFromISR+0x5c>
    __asm volatile("	mov %0, %1												\n"
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c47c:	bf00      	nop
 800c47e:	e7fe      	b.n	800c47e <xQueueGenericSendFromISR+0x5a>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2b02      	cmp	r3, #2
 800c484:	d103      	bne.n	800c48e <xQueueGenericSendFromISR+0x6a>
 800c486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d101      	bne.n	800c492 <xQueueGenericSendFromISR+0x6e>
 800c48e:	2301      	movs	r3, #1
 800c490:	e000      	b.n	800c494 <xQueueGenericSendFromISR+0x70>
 800c492:	2300      	movs	r3, #0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10a      	bne.n	800c4ae <xQueueGenericSendFromISR+0x8a>
    __asm volatile("	mov %0, %1												\n"
 800c498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	623b      	str	r3, [r7, #32]
}
 800c4aa:	bf00      	nop
 800c4ac:	e7fe      	b.n	800c4ac <xQueueGenericSendFromISR+0x88>
    that have been assigned a priority at or (logically) below the maximum
    system call	interrupt priority.  FreeRTOS maintains a separate interrupt
    safe API to ensure interrupt entry is as fast and as simple as possible.
    More information (albeit Cortex-M specific) is provided on the following
    link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4ae:	f002 f8d3 	bl	800e658 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void) {
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile("	mrs %0, basepri											\n"
 800c4b2:	f3ef 8211 	mrs	r2, BASEPRI
 800c4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	61fa      	str	r2, [r7, #28]
 800c4c8:	61bb      	str	r3, [r7, #24]
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");

    /* This return will not be reached but is necessary to prevent compiler
    warnings. */
    return ulOriginalBASEPRI;
 800c4ca:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
    in the queue.  Also don't directly wake a task that was blocked on a queue
    read, instead return a flag to say whether a context switch is required or
    not (i.e. has a task with a higher priority than us been woken by this
    post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4cc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800c4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d302      	bcc.n	800c4e0 <xQueueGenericSendFromISR+0xbc>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d12f      	bne.n	800c540 <xQueueGenericSendFromISR+0x11c>
            const int8_t cTxLock = pxQueue->cTxLock;
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
            semaphore or mutex.  That means prvCopyDataToQueue() cannot result
            in a task disinheriting a priority and prvCopyDataToQueue() can be
            called here even though the disinherit function does not check if
            the scheduler is suspended before accessing the ready lists. */
            (void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	68b9      	ldr	r1, [r7, #8]
 800c4f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4f6:	f000 f911 	bl	800c71c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
            be done when the queue is unlocked later. */
            if (cTxLock == queueUNLOCKED) {
 800c4fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c502:	d112      	bne.n	800c52a <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d016      	beq.n	800c53a <xQueueGenericSendFromISR+0x116>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	3324      	adds	r3, #36	; 0x24
 800c510:	4618      	mov	r0, r3
 800c512:	f000 ffdf 	bl	800d4d4 <xTaskRemoveFromEventList>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00e      	beq.n	800c53a <xQueueGenericSendFromISR+0x116>
                            /* The task waiting has a higher priority so record that a
                            context	switch is required. */
                            if (pxHigherPriorityTaskWoken != NULL) {
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00b      	beq.n	800c53a <xQueueGenericSendFromISR+0x116>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	e007      	b.n	800c53a <xQueueGenericSendFromISR+0x116>
                }
#endif /* configUSE_QUEUE_SETS */
            } else {
                /* Increment the lock count so the task that unlocks the queue
                knows that data was posted while it was locked. */
                pxQueue->cTxLock = (int8_t)(cTxLock + 1);
 800c52a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c52e:	3301      	adds	r3, #1
 800c530:	b2db      	uxtb	r3, r3
 800c532:	b25a      	sxtb	r2, r3
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800c53a:	2301      	movs	r3, #1
 800c53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800c53e:	e001      	b.n	800c544 <xQueueGenericSendFromISR+0x120>
        } else {
            traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue);
            xReturn = errQUEUE_FULL;
 800c540:	2300      	movs	r3, #0
 800c542:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c546:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue) {
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	f383 8811 	msr	BASEPRI, r3
}
 800c54e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

    return xReturn;
 800c550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c552:	4618      	mov	r0, r3
 800c554:	3740      	adds	r7, #64	; 0x40
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
	...

0800c55c <xQueueReceive>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait) {
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b08c      	sub	sp, #48	; 0x30
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c568:	2300      	movs	r3, #0
 800c56a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT((pxQueue));
 800c570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10a      	bne.n	800c58c <xQueueReceive+0x30>
    __asm volatile("	mov %0, %1												\n"
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	623b      	str	r3, [r7, #32]
}
 800c588:	bf00      	nop
 800c58a:	e7fe      	b.n	800c58a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
    is zero (so no data is copied into the buffer. */
    configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d103      	bne.n	800c59a <xQueueReceive+0x3e>
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c596:	2b00      	cmp	r3, #0
 800c598:	d101      	bne.n	800c59e <xQueueReceive+0x42>
 800c59a:	2301      	movs	r3, #1
 800c59c:	e000      	b.n	800c5a0 <xQueueReceive+0x44>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <xQueueReceive+0x5e>
    __asm volatile("	mov %0, %1												\n"
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	61fb      	str	r3, [r7, #28]
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <xQueueReceive+0x5c>

/* Cannot block if the scheduler is suspended. */
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800c5ba:	f001 f947 	bl	800d84c <xTaskGetSchedulerState>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d102      	bne.n	800c5ca <xQueueReceive+0x6e>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <xQueueReceive+0x72>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e000      	b.n	800c5d0 <xQueueReceive+0x74>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10a      	bne.n	800c5ea <xQueueReceive+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800c5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	61bb      	str	r3, [r7, #24]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <xQueueReceive+0x8c>

    /*lint -save -e904  This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800c5ea:	f001 ff53 	bl	800e494 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
            must be the highest priority task wanting to access the queue. */
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d01f      	beq.n	800c63a <xQueueReceive+0xde>
                /* Data available, remove one item. */
                prvCopyDataFromQueue(pxQueue, pvBuffer);
 800c5fa:	68b9      	ldr	r1, [r7, #8]
 800c5fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5fe:	f000 f8f7 	bl	800c7f0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE(pxQueue);
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	1e5a      	subs	r2, r3, #1
 800c606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c608:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                post to the queue?  If so, unblock the highest priority waiting
                task. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00f      	beq.n	800c632 <xQueueReceive+0xd6>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800c612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c614:	3310      	adds	r3, #16
 800c616:	4618      	mov	r0, r3
 800c618:	f000 ff5c 	bl	800d4d4 <xTaskRemoveFromEventList>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d007      	beq.n	800c632 <xQueueReceive+0xd6>
                        queueYIELD_IF_USING_PREEMPTION();
 800c622:	4b3d      	ldr	r3, [pc, #244]	; (800c718 <xQueueReceive+0x1bc>)
 800c624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	f3bf 8f6f 	isb	sy
                    }
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c632:	f001 ff5f 	bl	800e4f4 <vPortExitCritical>
                return pdPASS;
 800c636:	2301      	movs	r3, #1
 800c638:	e069      	b.n	800c70e <xQueueReceive+0x1b2>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d103      	bne.n	800c648 <xQueueReceive+0xec>
                    /* The queue was empty and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c640:	f001 ff58 	bl	800e4f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED(pxQueue);
                    return errQUEUE_EMPTY;
 800c644:	2300      	movs	r3, #0
 800c646:	e062      	b.n	800c70e <xQueueReceive+0x1b2>
                } else if (xEntryTimeSet == pdFALSE) {
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d106      	bne.n	800c65c <xQueueReceive+0x100>
                    /* The queue was empty and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800c64e:	f107 0310 	add.w	r3, r7, #16
 800c652:	4618      	mov	r0, r3
 800c654:	f000 ffa0 	bl	800d598 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c658:	2301      	movs	r3, #1
 800c65a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c65c:	f001 ff4a 	bl	800e4f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800c660:	f000 fd1a 	bl	800d098 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800c664:	f001 ff16 	bl	800e494 <vPortEnterCritical>
 800c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c66e:	b25b      	sxtb	r3, r3
 800c670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c674:	d103      	bne.n	800c67e <xQueueReceive+0x122>
 800c676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c678:	2200      	movs	r2, #0
 800c67a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c684:	b25b      	sxtb	r3, r3
 800c686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c68a:	d103      	bne.n	800c694 <xQueueReceive+0x138>
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c694:	f001 ff2e 	bl	800e4f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800c698:	1d3a      	adds	r2, r7, #4
 800c69a:	f107 0310 	add.w	r3, r7, #16
 800c69e:	4611      	mov	r1, r2
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 ff8f 	bl	800d5c4 <xTaskCheckForTimeOut>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d123      	bne.n	800c6f4 <xQueueReceive+0x198>
            /* The timeout has not expired.  If the queue is still empty place
            the task on the list of tasks waiting to receive from the queue. */
            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800c6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ae:	f000 f917 	bl	800c8e0 <prvIsQueueEmpty>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d017      	beq.n	800c6e8 <xQueueReceive+0x18c>
                traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	3324      	adds	r3, #36	; 0x24
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	4611      	mov	r1, r2
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 feb7 	bl	800d434 <vTaskPlaceOnEventList>
                prvUnlockQueue(pxQueue);
 800c6c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c8:	f000 f8b8 	bl	800c83c <prvUnlockQueue>
                if (xTaskResumeAll() == pdFALSE) {
 800c6cc:	f000 fcf2 	bl	800d0b4 <xTaskResumeAll>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d189      	bne.n	800c5ea <xQueueReceive+0x8e>
                    portYIELD_WITHIN_API();
 800c6d6:	4b10      	ldr	r3, [pc, #64]	; (800c718 <xQueueReceive+0x1bc>)
 800c6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	e780      	b.n	800c5ea <xQueueReceive+0x8e>
                    mtCOVERAGE_TEST_MARKER();
                }
            } else {
                /* The queue contains data again.  Loop back to try and read the
                data. */
                prvUnlockQueue(pxQueue);
 800c6e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ea:	f000 f8a7 	bl	800c83c <prvUnlockQueue>
                (void)xTaskResumeAll();
 800c6ee:	f000 fce1 	bl	800d0b4 <xTaskResumeAll>
 800c6f2:	e77a      	b.n	800c5ea <xQueueReceive+0x8e>
            }
        } else {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
            back and attempt to read the data. */
            prvUnlockQueue(pxQueue);
 800c6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f6:	f000 f8a1 	bl	800c83c <prvUnlockQueue>
            (void)xTaskResumeAll();
 800c6fa:	f000 fcdb 	bl	800d0b4 <xTaskResumeAll>

            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800c6fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c700:	f000 f8ee 	bl	800c8e0 <prvIsQueueEmpty>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	f43f af6f 	beq.w	800c5ea <xQueueReceive+0x8e>
                traceQUEUE_RECEIVE_FAILED(pxQueue);
                return errQUEUE_EMPTY;
 800c70c:	2300      	movs	r3, #0
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3730      	adds	r7, #48	; 0x30
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <prvCopyDataToQueue>:
}

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t * const pxQueue, const void * pvItemToQueue, const BaseType_t xPosition) {
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800c728:	2300      	movs	r3, #0
 800c72a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c730:	613b      	str	r3, [r7, #16]

    if (pxQueue->uxItemSize == (UBaseType_t)0) {
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10d      	bne.n	800c756 <prvCopyDataToQueue+0x3a>
#if (configUSE_MUTEXES == 1)
        {
            if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d14d      	bne.n	800c7de <prvCopyDataToQueue+0xc2>
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit(pxQueue->u.xSemaphore.xMutexHolder);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	4618      	mov	r0, r3
 800c748:	f001 f89e 	bl	800d888 <xTaskPriorityDisinherit>
 800c74c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2200      	movs	r2, #0
 800c752:	609a      	str	r2, [r3, #8]
 800c754:	e043      	b.n	800c7de <prvCopyDataToQueue+0xc2>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_MUTEXES */
    } else if (xPosition == queueSEND_TO_BACK) {
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d119      	bne.n	800c790 <prvCopyDataToQueue+0x74>
        (void)memcpy((void *)pxQueue->pcWriteTo, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6858      	ldr	r0, [r3, #4]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c764:	461a      	mov	r2, r3
 800c766:	68b9      	ldr	r1, [r7, #8]
 800c768:	f003 fb9c 	bl	800fea4 <memcpy>
                                                                                                 memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                            /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c774:	441a      	add	r2, r3
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	605a      	str	r2, [r3, #4]
        if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail)                                   /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	429a      	cmp	r2, r3
 800c784:	d32b      	bcc.n	800c7de <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	605a      	str	r2, [r3, #4]
 800c78e:	e026      	b.n	800c7de <prvCopyDataToQueue+0xc2>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        (void)memcpy((void *)pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	68d8      	ldr	r0, [r3, #12]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c798:	461a      	mov	r2, r3
 800c79a:	68b9      	ldr	r1, [r7, #8]
 800c79c:	f003 fb82 	bl	800fea4 <memcpy>
                                                                                                           no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	68da      	ldr	r2, [r3, #12]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a8:	425b      	negs	r3, r3
 800c7aa:	441a      	add	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	68da      	ldr	r2, [r3, #12]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d207      	bcs.n	800c7cc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	689a      	ldr	r2, [r3, #8]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	441a      	add	r2, r3
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        if (xPosition == queueOVERWRITE) {
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d105      	bne.n	800c7de <prvCopyDataToQueue+0xc2>
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <prvCopyDataToQueue+0xc2>
                /* An item is not being added but overwritten, so subtract
                one from the recorded number of items in the queue so when
                one is added again below the number of recorded items remains
                correct. */
                --uxMessagesWaiting;
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	613b      	str	r3, [r7, #16]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800c7e6:	697b      	ldr	r3, [r7, #20]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t * const pxQueue, void * const pvBuffer) {
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
    if (pxQueue->uxItemSize != (UBaseType_t)0) {
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d018      	beq.n	800c834 <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;          /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68da      	ldr	r2, [r3, #12]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80a:	441a      	add	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68da      	ldr	r2, [r3, #12]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d303      	bcc.n	800c824 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	68d9      	ldr	r1, [r3, #12]
                     (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800c82c:	461a      	mov	r2, r3
 800c82e:	6838      	ldr	r0, [r7, #0]
 800c830:	f003 fb38 	bl	800fea4 <memcpy>
                                                      required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    }
}
 800c834:	bf00      	nop
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t * const pxQueue) {
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
    removed from the queue while the queue was locked.  When a queue is
    locked items can be added or removed, but the event lists cannot be
    updated. */
    taskENTER_CRITICAL();
 800c844:	f001 fe26 	bl	800e494 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c84e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800c850:	e011      	b.n	800c876 <prvUnlockQueue+0x3a>
            }
#else  /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                the pending ready list as the scheduler is still suspended. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c856:	2b00      	cmp	r3, #0
 800c858:	d012      	beq.n	800c880 <prvUnlockQueue+0x44>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	3324      	adds	r3, #36	; 0x24
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 fe38 	bl	800d4d4 <xTaskRemoveFromEventList>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <prvUnlockQueue+0x32>
                        /* The task waiting has a higher priority so record that
                        a context switch is required. */
                        vTaskMissedYield();
 800c86a:	f000 ff0d 	bl	800d688 <vTaskMissedYield>
                    break;
                }
            }
#endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
 800c870:	3b01      	subs	r3, #1
 800c872:	b2db      	uxtb	r3, r3
 800c874:	73fb      	strb	r3, [r7, #15]
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800c876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dce9      	bgt.n	800c852 <prvUnlockQueue+0x16>
 800c87e:	e000      	b.n	800c882 <prvUnlockQueue+0x46>
                    break;
 800c880:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	22ff      	movs	r2, #255	; 0xff
 800c886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800c88a:	f001 fe33 	bl	800e4f4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800c88e:	f001 fe01 	bl	800e494 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c898:	73bb      	strb	r3, [r7, #14]

        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800c89a:	e011      	b.n	800c8c0 <prvUnlockQueue+0x84>
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d012      	beq.n	800c8ca <prvUnlockQueue+0x8e>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	3310      	adds	r3, #16
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 fe13 	bl	800d4d4 <xTaskRemoveFromEventList>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d001      	beq.n	800c8b8 <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 800c8b4:	f000 fee8 	bl	800d688 <vTaskMissedYield>
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800c8b8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	73bb      	strb	r3, [r7, #14]
        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800c8c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	dce9      	bgt.n	800c89c <prvUnlockQueue+0x60>
 800c8c8:	e000      	b.n	800c8cc <prvUnlockQueue+0x90>
            } else {
                break;
 800c8ca:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	22ff      	movs	r2, #255	; 0xff
 800c8d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800c8d4:	f001 fe0e 	bl	800e4f4 <vPortExitCritical>
}
 800c8d8:	bf00      	nop
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t * pxQueue) {
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800c8e8:	f001 fdd4 	bl	800e494 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d102      	bne.n	800c8fa <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	60fb      	str	r3, [r7, #12]
 800c8f8:	e001      	b.n	800c8fe <prvIsQueueEmpty+0x1e>
        } else {
            xReturn = pdFALSE;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800c8fe:	f001 fdf9 	bl	800e4f4 <vPortExitCritical>

    return xReturn;
 800c902:	68fb      	ldr	r3, [r7, #12]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <prvIsQueueFull>:

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t * pxQueue) {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800c914:	f001 fdbe 	bl	800e494 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c920:	429a      	cmp	r2, r3
 800c922:	d102      	bne.n	800c92a <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 800c924:	2301      	movs	r3, #1
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	e001      	b.n	800c92e <prvIsQueueFull+0x22>
        } else {
            xReturn = pdFALSE;
 800c92a:	2300      	movs	r3, #0
 800c92c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800c92e:	f001 fde1 	bl	800e4f4 <vPortExitCritical>

    return xReturn;
 800c932:	68fb      	ldr	r3, [r7, #12]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if (configQUEUE_REGISTRY_SIZE > 0)

void vQueueAddToRegistry(QueueHandle_t xQueue, const char * pcQueueName) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
    UBaseType_t ux;

    /* See if there is an empty space in the registry.  A NULL name denotes
    a free slot. */
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800c946:	2300      	movs	r3, #0
 800c948:	60fb      	str	r3, [r7, #12]
 800c94a:	e014      	b.n	800c976 <vQueueAddToRegistry+0x3a>
        if (xQueueRegistry[ux].pcQueueName == NULL) {
 800c94c:	4a0f      	ldr	r2, [pc, #60]	; (800c98c <vQueueAddToRegistry+0x50>)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10b      	bne.n	800c970 <vQueueAddToRegistry+0x34>
            /* Store the information on this queue. */
            xQueueRegistry[ux].pcQueueName = pcQueueName;
 800c958:	490c      	ldr	r1, [pc, #48]	; (800c98c <vQueueAddToRegistry+0x50>)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	683a      	ldr	r2, [r7, #0]
 800c95e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            xQueueRegistry[ux].xHandle = xQueue;
 800c962:	4a0a      	ldr	r2, [pc, #40]	; (800c98c <vQueueAddToRegistry+0x50>)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	00db      	lsls	r3, r3, #3
 800c968:	4413      	add	r3, r2
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD(xQueue, pcQueueName);
            break;
 800c96e:	e006      	b.n	800c97e <vQueueAddToRegistry+0x42>
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3301      	adds	r3, #1
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b07      	cmp	r3, #7
 800c97a:	d9e7      	bls.n	800c94c <vQueueAddToRegistry+0x10>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800c97c:	bf00      	nop
 800c97e:	bf00      	nop
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	20000be0 	.word	0x20000be0

0800c990 <vQueueWaitForMessageRestricted>:
#endif /* configQUEUE_REGISTRY_SIZE */
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	617b      	str	r3, [r7, #20]
    will not actually cause the task to block, just place it on a blocked
    list.  It will not block until the scheduler is unlocked - at which
    time a yield will be performed.  If an item is added to the queue while
    the queue is locked, and the calling task blocks on the queue, then the
    calling task will be immediately unblocked when the queue is unlocked. */
    prvLockQueue(pxQueue);
 800c9a0:	f001 fd78 	bl	800e494 <vPortEnterCritical>
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9aa:	b25b      	sxtb	r3, r3
 800c9ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9b0:	d103      	bne.n	800c9ba <vQueueWaitForMessageRestricted+0x2a>
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9c0:	b25b      	sxtb	r3, r3
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9c6:	d103      	bne.n	800c9d0 <vQueueWaitForMessageRestricted+0x40>
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9d0:	f001 fd90 	bl	800e4f4 <vPortExitCritical>
    if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d106      	bne.n	800c9ea <vQueueWaitForMessageRestricted+0x5a>
        /* There is nothing in the queue, block for the specified period. */
        vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	3324      	adds	r3, #36	; 0x24
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 fd49 	bl	800d47c <vTaskPlaceOnEventListRestricted>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
    prvUnlockQueue(pxQueue);
 800c9ea:	6978      	ldr	r0, [r7, #20]
 800c9ec:	f7ff ff26 	bl	800c83c <prvUnlockQueue>
}
 800c9f0:	bf00      	nop
 800c9f2:	3718      	adds	r7, #24
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <xTaskCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                               const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, StackType_t * const puxStackBuffer, StaticTask_t * const pxTaskBuffer) {
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08e      	sub	sp, #56	; 0x38
 800c9fc:	af04      	add	r7, sp, #16
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
 800ca04:	603b      	str	r3, [r7, #0]
    TCB_t * pxNewTCB;
    TaskHandle_t xReturn;

    configASSERT(puxStackBuffer != NULL);
 800ca06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10a      	bne.n	800ca22 <xTaskCreateStatic+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	623b      	str	r3, [r7, #32]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <xTaskCreateStatic+0x28>
    configASSERT(pxTaskBuffer != NULL);
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <xTaskCreateStatic+0x46>
    __asm volatile("	mov %0, %1												\n"
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	61fb      	str	r3, [r7, #28]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <xTaskCreateStatic+0x44>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticTask_t equals the size of the real task
        structure. */
        volatile size_t xSize = sizeof(StaticTask_t);
 800ca3e:	2364      	movs	r3, #100	; 0x64
 800ca40:	613b      	str	r3, [r7, #16]
        configASSERT(xSize == sizeof(TCB_t));
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	2b64      	cmp	r3, #100	; 0x64
 800ca46:	d00a      	beq.n	800ca5e <xTaskCreateStatic+0x66>
    __asm volatile("	mov %0, %1												\n"
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	61bb      	str	r3, [r7, #24]
}
 800ca5a:	bf00      	nop
 800ca5c:	e7fe      	b.n	800ca5c <xTaskCreateStatic+0x64>
        (void)xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca5e:	693b      	ldr	r3, [r7, #16]
    }
#endif /* configASSERT_DEFINED */

    if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d01e      	beq.n	800caa4 <xTaskCreateStatic+0xac>
 800ca66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d01b      	beq.n	800caa4 <xTaskCreateStatic+0xac>
        /* The memory used for the task's TCB and stack are passed into this
        function - use them. */
        pxNewTCB = (TCB_t *)pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6e:	627b      	str	r3, [r7, #36]	; 0x24
        pxNewTCB->pxStack = (StackType_t *)puxStackBuffer;
 800ca70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca74:	631a      	str	r2, [r3, #48]	; 0x30

#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created statically in case the task is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	2202      	movs	r2, #2
 800ca7a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
 800ca7e:	2300      	movs	r3, #0
 800ca80:	9303      	str	r3, [sp, #12]
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca84:	9302      	str	r3, [sp, #8]
 800ca86:	f107 0314 	add.w	r3, r7, #20
 800ca8a:	9301      	str	r3, [sp, #4]
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f000 f850 	bl	800cb3c <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800ca9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca9e:	f000 f8d5 	bl	800cc4c <prvAddNewTaskToReadyList>
 800caa2:	e001      	b.n	800caa8 <xTaskCreateStatic+0xb0>
    } else {
        xReturn = NULL;
 800caa4:	2300      	movs	r3, #0
 800caa6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800caa8:	697b      	ldr	r3, [r7, #20]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3728      	adds	r7, #40	; 0x28
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <xTaskCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                       const configSTACK_DEPTH_TYPE usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask) {
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b08c      	sub	sp, #48	; 0x30
 800cab6:	af04      	add	r7, sp, #16
 800cab8:	60f8      	str	r0, [r7, #12]
 800caba:	60b9      	str	r1, [r7, #8]
 800cabc:	603b      	str	r3, [r7, #0]
 800cabe:	4613      	mov	r3, r2
 800cac0:	80fb      	strh	r3, [r7, #6]
#else  /* portSTACK_GROWTH */
    {
        StackType_t * pxStack;

        /* Allocate space for the stack used by the task being created. */
        pxStack = pvPortMalloc((((size_t)usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cac2:	88fb      	ldrh	r3, [r7, #6]
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4618      	mov	r0, r3
 800cac8:	f001 fe06 	bl	800e6d8 <pvPortMalloc>
 800cacc:	6178      	str	r0, [r7, #20]

        if (pxStack != NULL) {
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00e      	beq.n	800caf2 <xTaskCreate+0x40>
            /* Allocate space for the TCB. */
            pxNewTCB = (TCB_t *)pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cad4:	2064      	movs	r0, #100	; 0x64
 800cad6:	f001 fdff 	bl	800e6d8 <pvPortMalloc>
 800cada:	61f8      	str	r0, [r7, #28]

            if (pxNewTCB != NULL) {
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d003      	beq.n	800caea <xTaskCreate+0x38>
                /* Store the stack location in the TCB. */
                pxNewTCB->pxStack = pxStack;
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	631a      	str	r2, [r3, #48]	; 0x30
 800cae8:	e005      	b.n	800caf6 <xTaskCreate+0x44>
            } else {
                /* The stack cannot be used as the TCB was not created.  Free
                it again. */
                vPortFree(pxStack);
 800caea:	6978      	ldr	r0, [r7, #20]
 800caec:	f001 fe06 	bl	800e6fc <vPortFree>
 800caf0:	e001      	b.n	800caf6 <xTaskCreate+0x44>
            }
        } else {
            pxNewTCB = NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	61fb      	str	r3, [r7, #28]
        }
    }
#endif /* portSTACK_GROWTH */

    if (pxNewTCB != NULL) {
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d017      	beq.n	800cb2c <xTaskCreate+0x7a>
#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created dynamically in case it is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t)usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
 800cb04:	88fa      	ldrh	r2, [r7, #6]
 800cb06:	2300      	movs	r3, #0
 800cb08:	9303      	str	r3, [sp, #12]
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	9302      	str	r3, [sp, #8]
 800cb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb10:	9301      	str	r3, [sp, #4]
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	68b9      	ldr	r1, [r7, #8]
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f000 f80e 	bl	800cb3c <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800cb20:	69f8      	ldr	r0, [r7, #28]
 800cb22:	f000 f893 	bl	800cc4c <prvAddNewTaskToReadyList>
        xReturn = pdPASS;
 800cb26:	2301      	movs	r3, #1
 800cb28:	61bb      	str	r3, [r7, #24]
 800cb2a:	e002      	b.n	800cb32 <xTaskCreate+0x80>
    } else {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb30:	61bb      	str	r3, [r7, #24]
    }

    return xReturn;
 800cb32:	69bb      	ldr	r3, [r7, #24]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3720      	adds	r7, #32
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <prvInitialiseNewTask>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                 const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, TCB_t * pxNewTCB, const MemoryRegion_t * const xRegions) {
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b088      	sub	sp, #32
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
 800cb48:	603b      	str	r3, [r7, #0]
grows from high memory to low (as per the 80x86) or vice versa.
portSTACK_GROWTH is used to make the result positive or negative as required
by the port. */
#if (portSTACK_GROWTH < 0)
    {
        pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t)1]);
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb54:	3b01      	subs	r3, #1
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4413      	add	r3, r2
 800cb5a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack) & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK))); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	f023 0307 	bic.w	r3, r3, #7
 800cb62:	61bb      	str	r3, [r7, #24]
                                                                                                                                        differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT((((portPOINTER_SIZE_TYPE)pxTopOfStack & (portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK) == 0UL));
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	f003 0307 	and.w	r3, r3, #7
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00a      	beq.n	800cb84 <prvInitialiseNewTask+0x48>
    __asm volatile("	mov %0, %1												\n"
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	617b      	str	r3, [r7, #20]
}
 800cb80:	bf00      	nop
 800cb82:	e7fe      	b.n	800cb82 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    }
#endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if (pcName != NULL) {
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d01f      	beq.n	800cbca <prvInitialiseNewTask+0x8e>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	61fb      	str	r3, [r7, #28]
 800cb8e:	e012      	b.n	800cbb6 <prvInitialiseNewTask+0x7a>
            pxNewTCB->pcTaskName[x] = pcName[x];
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	4413      	add	r3, r2
 800cb96:	7819      	ldrb	r1, [r3, #0]
 800cb98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	3334      	adds	r3, #52	; 0x34
 800cba0:	460a      	mov	r2, r1
 800cba2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
            configMAX_TASK_NAME_LEN characters just in case the memory after the
            string is not accessible (extremely unlikely). */
            if (pcName[x] == (char)0x00) {
 800cba4:	68ba      	ldr	r2, [r7, #8]
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	4413      	add	r3, r2
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d006      	beq.n	800cbbe <prvInitialiseNewTask+0x82>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	61fb      	str	r3, [r7, #28]
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	2b1f      	cmp	r3, #31
 800cbba:	d9e9      	bls.n	800cb90 <prvInitialiseNewTask+0x54>
 800cbbc:	e000      	b.n	800cbc0 <prvInitialiseNewTask+0x84>
                break;
 800cbbe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
        was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
 800cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800cbc8:	e003      	b.n	800cbd2 <prvInitialiseNewTask+0x96>
    } else {
        /* The task has not been given a name, so just ensure there is a NULL
        terminator when it is read out. */
        pxNewTCB->pcTaskName[0] = 0x00;
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
    remove the privilege bit if one is present. */
    if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
 800cbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd4:	2b06      	cmp	r3, #6
 800cbd6:	d901      	bls.n	800cbdc <prvInitialiseNewTask+0xa0>
        uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
 800cbd8:	2306      	movs	r3, #6
 800cbda:	62bb      	str	r3, [r7, #40]	; 0x28
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbe0:	62da      	str	r2, [r3, #44]	; 0x2c
#if (configUSE_MUTEXES == 1)
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbe6:	655a      	str	r2, [r3, #84]	; 0x54
        pxNewTCB->uxMutexesHeld = 0;
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	2200      	movs	r2, #0
 800cbec:	659a      	str	r2, [r3, #88]	; 0x58
    }
#endif /* configUSE_MUTEXES */

    vListInitialiseItem(&(pxNewTCB->xStateListItem));
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff f983 	bl	800befe <vListInitialiseItem>
    vListInitialiseItem(&(pxNewTCB->xEventListItem));
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfa:	3318      	adds	r3, #24
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7ff f97e 	bl	800befe <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
    back to	the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 800cc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc06:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	f1c3 0207 	rsb	r2, r3, #7
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 800cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc16:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

#if (configUSE_TASK_NOTIFICATIONS == 1)
    {
        pxNewTCB->ulNotifiedValue = 0;
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	65da      	str	r2, [r3, #92]	; 0x5c
        pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
#endif /* portSTACK_GROWTH */
        }
#else  /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	68f9      	ldr	r1, [r7, #12]
 800cc2a:	69b8      	ldr	r0, [r7, #24]
 800cc2c:	f001 fb02 	bl	800e234 <pxPortInitialiseStack>
 800cc30:	4602      	mov	r2, r0
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	601a      	str	r2, [r3, #0]
        }
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
#endif /* portUSING_MPU_WRAPPERS */

    if (pxCreatedTask != NULL) {
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <prvInitialiseNewTask+0x106>
        /* Pass the handle out in an anonymous way.  The handle can be used to
        change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = (TaskHandle_t)pxNewTCB;
 800cc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc40:	601a      	str	r2, [r3, #0]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cc42:	bf00      	nop
 800cc44:	3720      	adds	r7, #32
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
	...

0800cc4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t * pxNewTCB) {
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
    updated. */
    taskENTER_CRITICAL();
 800cc54:	f001 fc1e 	bl	800e494 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800cc58:	4b2a      	ldr	r3, [pc, #168]	; (800cd04 <prvAddNewTaskToReadyList+0xb8>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	4a29      	ldr	r2, [pc, #164]	; (800cd04 <prvAddNewTaskToReadyList+0xb8>)
 800cc60:	6013      	str	r3, [r2, #0]
        if (pxCurrentTCB == NULL) {
 800cc62:	4b29      	ldr	r3, [pc, #164]	; (800cd08 <prvAddNewTaskToReadyList+0xbc>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d109      	bne.n	800cc7e <prvAddNewTaskToReadyList+0x32>
            /* There are no other tasks, or all the other tasks are in
            the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800cc6a:	4a27      	ldr	r2, [pc, #156]	; (800cd08 <prvAddNewTaskToReadyList+0xbc>)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6013      	str	r3, [r2, #0]

            if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
 800cc70:	4b24      	ldr	r3, [pc, #144]	; (800cd04 <prvAddNewTaskToReadyList+0xb8>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d110      	bne.n	800cc9a <prvAddNewTaskToReadyList+0x4e>
                /* This is the first task to be created so do the preliminary
                initialisation required.  We will not recover if this call
                fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800cc78:	f000 fd2a 	bl	800d6d0 <prvInitialiseTaskLists>
 800cc7c:	e00d      	b.n	800cc9a <prvAddNewTaskToReadyList+0x4e>
            }
        } else {
            /* If the scheduler is not already running, make this task the
            current task if it is the highest priority task to be created
            so far. */
            if (xSchedulerRunning == pdFALSE) {
 800cc7e:	4b23      	ldr	r3, [pc, #140]	; (800cd0c <prvAddNewTaskToReadyList+0xc0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d109      	bne.n	800cc9a <prvAddNewTaskToReadyList+0x4e>
                if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 800cc86:	4b20      	ldr	r3, [pc, #128]	; (800cd08 <prvAddNewTaskToReadyList+0xbc>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d802      	bhi.n	800cc9a <prvAddNewTaskToReadyList+0x4e>
                    pxCurrentTCB = pxNewTCB;
 800cc94:	4a1c      	ldr	r2, [pc, #112]	; (800cd08 <prvAddNewTaskToReadyList+0xbc>)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6013      	str	r3, [r2, #0]
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800cc9a:	4b1d      	ldr	r3, [pc, #116]	; (800cd10 <prvAddNewTaskToReadyList+0xc4>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	4a1b      	ldr	r2, [pc, #108]	; (800cd10 <prvAddNewTaskToReadyList+0xc4>)
 800cca2:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
#endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE(pxNewTCB);

        prvAddTaskToReadyList(pxNewTCB);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca8:	2201      	movs	r2, #1
 800ccaa:	409a      	lsls	r2, r3
 800ccac:	4b19      	ldr	r3, [pc, #100]	; (800cd14 <prvAddNewTaskToReadyList+0xc8>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	4a18      	ldr	r2, [pc, #96]	; (800cd14 <prvAddNewTaskToReadyList+0xc8>)
 800ccb4:	6013      	str	r3, [r2, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccba:	4613      	mov	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4a15      	ldr	r2, [pc, #84]	; (800cd18 <prvAddNewTaskToReadyList+0xcc>)
 800ccc4:	441a      	add	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3304      	adds	r3, #4
 800ccca:	4619      	mov	r1, r3
 800cccc:	4610      	mov	r0, r2
 800ccce:	f7ff f923 	bl	800bf18 <vListInsertEnd>

        portSETUP_TCB(pxNewTCB);
    }
    taskEXIT_CRITICAL();
 800ccd2:	f001 fc0f 	bl	800e4f4 <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800ccd6:	4b0d      	ldr	r3, [pc, #52]	; (800cd0c <prvAddNewTaskToReadyList+0xc0>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00e      	beq.n	800ccfc <prvAddNewTaskToReadyList+0xb0>
        /* If the created task is of a higher priority than the current task
        then it should run now. */
        if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 800ccde:	4b0a      	ldr	r3, [pc, #40]	; (800cd08 <prvAddNewTaskToReadyList+0xbc>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d207      	bcs.n	800ccfc <prvAddNewTaskToReadyList+0xb0>
            taskYIELD_IF_USING_PREEMPTION();
 800ccec:	4b0b      	ldr	r3, [pc, #44]	; (800cd1c <prvAddNewTaskToReadyList+0xd0>)
 800ccee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf2:	601a      	str	r2, [r3, #0]
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	20000d20 	.word	0x20000d20
 800cd08:	20000c20 	.word	0x20000c20
 800cd0c:	20000d2c 	.word	0x20000d2c
 800cd10:	20000d3c 	.word	0x20000d3c
 800cd14:	20000d28 	.word	0x20000d28
 800cd18:	20000c24 	.word	0x20000c24
 800cd1c:	e000ed04 	.word	0xe000ed04

0800cd20 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

void vTaskDelete(TaskHandle_t xTaskToDelete) {
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800cd28:	f001 fbb4 	bl	800e494 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the calling task that is
        being deleted. */
        pxTCB = prvGetTCBFromHandle(xTaskToDelete);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d102      	bne.n	800cd38 <vTaskDelete+0x18>
 800cd32:	4b39      	ldr	r3, [pc, #228]	; (800ce18 <vTaskDelete+0xf8>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	e000      	b.n	800cd3a <vTaskDelete+0x1a>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	60fb      	str	r3, [r7, #12]

        /* Remove task from the ready/delayed list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	3304      	adds	r3, #4
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7ff f946 	bl	800bfd2 <uxListRemove>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d115      	bne.n	800cd78 <vTaskDelete+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd50:	4932      	ldr	r1, [pc, #200]	; (800ce1c <vTaskDelete+0xfc>)
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	440b      	add	r3, r1
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d10a      	bne.n	800cd78 <vTaskDelete+0x58>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd66:	2201      	movs	r2, #1
 800cd68:	fa02 f303 	lsl.w	r3, r2, r3
 800cd6c:	43da      	mvns	r2, r3
 800cd6e:	4b2c      	ldr	r3, [pc, #176]	; (800ce20 <vTaskDelete+0x100>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4013      	ands	r3, r2
 800cd74:	4a2a      	ldr	r2, [pc, #168]	; (800ce20 <vTaskDelete+0x100>)
 800cd76:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d004      	beq.n	800cd8a <vTaskDelete+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	3318      	adds	r3, #24
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7ff f924 	bl	800bfd2 <uxListRemove>

        /* Increment the uxTaskNumber also so kernel aware debuggers can
        detect that the task lists need re-generating.  This is done before
        portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
        not return. */
        uxTaskNumber++;
 800cd8a:	4b26      	ldr	r3, [pc, #152]	; (800ce24 <vTaskDelete+0x104>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	4a24      	ldr	r2, [pc, #144]	; (800ce24 <vTaskDelete+0x104>)
 800cd92:	6013      	str	r3, [r2, #0]

        if (pxTCB == pxCurrentTCB) {
 800cd94:	4b20      	ldr	r3, [pc, #128]	; (800ce18 <vTaskDelete+0xf8>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d10b      	bne.n	800cdb6 <vTaskDelete+0x96>
            /* A task is deleting itself.  This cannot complete within the
            task itself, as a context switch to another task is required.
            Place the task in the termination list.  The idle task will
            check the termination list and free up any memory allocated by
            the scheduler for the TCB and stack of the deleted task. */
            vListInsertEnd(&xTasksWaitingTermination, &(pxTCB->xStateListItem));
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	3304      	adds	r3, #4
 800cda2:	4619      	mov	r1, r3
 800cda4:	4820      	ldr	r0, [pc, #128]	; (800ce28 <vTaskDelete+0x108>)
 800cda6:	f7ff f8b7 	bl	800bf18 <vListInsertEnd>

            /* Increment the ucTasksDeleted variable so the idle task knows
            there is a task that has been deleted and that it should therefore
            check the xTasksWaitingTermination list. */
            ++uxDeletedTasksWaitingCleanUp;
 800cdaa:	4b20      	ldr	r3, [pc, #128]	; (800ce2c <vTaskDelete+0x10c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	4a1e      	ldr	r2, [pc, #120]	; (800ce2c <vTaskDelete+0x10c>)
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	e009      	b.n	800cdca <vTaskDelete+0xaa>
            after which it is not possible to yield away from this task -
            hence xYieldPending is used to latch that a context switch is
            required. */
            portPRE_TASK_DELETE_HOOK(pxTCB, &xYieldPending);
        } else {
            --uxCurrentNumberOfTasks;
 800cdb6:	4b1e      	ldr	r3, [pc, #120]	; (800ce30 <vTaskDelete+0x110>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3b01      	subs	r3, #1
 800cdbc:	4a1c      	ldr	r2, [pc, #112]	; (800ce30 <vTaskDelete+0x110>)
 800cdbe:	6013      	str	r3, [r2, #0]
            traceTASK_DELETE(pxTCB);
            prvDeleteTCB(pxTCB);
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f000 fcf3 	bl	800d7ac <prvDeleteTCB>

            /* Reset the next expected unblock time in case it referred to
            the task that has just been deleted. */
            prvResetNextTaskUnblockTime();
 800cdc6:	f000 fd21 	bl	800d80c <prvResetNextTaskUnblockTime>
        }
    }
    taskEXIT_CRITICAL();
 800cdca:	f001 fb93 	bl	800e4f4 <vPortExitCritical>

    /* Force a reschedule if it is the currently running task that has just
    been deleted. */
    if (xSchedulerRunning != pdFALSE) {
 800cdce:	4b19      	ldr	r3, [pc, #100]	; (800ce34 <vTaskDelete+0x114>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d01b      	beq.n	800ce0e <vTaskDelete+0xee>
        if (pxTCB == pxCurrentTCB) {
 800cdd6:	4b10      	ldr	r3, [pc, #64]	; (800ce18 <vTaskDelete+0xf8>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d116      	bne.n	800ce0e <vTaskDelete+0xee>
            configASSERT(uxSchedulerSuspended == 0);
 800cde0:	4b15      	ldr	r3, [pc, #84]	; (800ce38 <vTaskDelete+0x118>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00a      	beq.n	800cdfe <vTaskDelete+0xde>
    __asm volatile("	mov %0, %1												\n"
 800cde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdec:	f383 8811 	msr	BASEPRI, r3
 800cdf0:	f3bf 8f6f 	isb	sy
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	60bb      	str	r3, [r7, #8]
}
 800cdfa:	bf00      	nop
 800cdfc:	e7fe      	b.n	800cdfc <vTaskDelete+0xdc>
            portYIELD_WITHIN_API();
 800cdfe:	4b0f      	ldr	r3, [pc, #60]	; (800ce3c <vTaskDelete+0x11c>)
 800ce00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce04:	601a      	str	r2, [r3, #0]
 800ce06:	f3bf 8f4f 	dsb	sy
 800ce0a:	f3bf 8f6f 	isb	sy
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ce0e:	bf00      	nop
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20000c20 	.word	0x20000c20
 800ce1c:	20000c24 	.word	0x20000c24
 800ce20:	20000d28 	.word	0x20000d28
 800ce24:	20000d3c 	.word	0x20000d3c
 800ce28:	20000cf4 	.word	0x20000cf4
 800ce2c:	20000d08 	.word	0x20000d08
 800ce30:	20000d20 	.word	0x20000d20
 800ce34:	20000d2c 	.word	0x20000d2c
 800ce38:	20000d48 	.word	0x20000d48
 800ce3c:	e000ed04 	.word	0xe000ed04

0800ce40 <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelay == 1)

void vTaskDelay(const TickType_t xTicksToDelay) {
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
    BaseType_t xAlreadyYielded = pdFALSE;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	60fb      	str	r3, [r7, #12]

    /* A delay time of zero just forces a reschedule. */
    if (xTicksToDelay > (TickType_t)0U) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d017      	beq.n	800ce82 <vTaskDelay+0x42>
        configASSERT(uxSchedulerSuspended == 0);
 800ce52:	4b13      	ldr	r3, [pc, #76]	; (800cea0 <vTaskDelay+0x60>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00a      	beq.n	800ce70 <vTaskDelay+0x30>
    __asm volatile("	mov %0, %1												\n"
 800ce5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	60bb      	str	r3, [r7, #8]
}
 800ce6c:	bf00      	nop
 800ce6e:	e7fe      	b.n	800ce6e <vTaskDelay+0x2e>
        vTaskSuspendAll();
 800ce70:	f000 f912 	bl	800d098 <vTaskSuspendAll>
            list or removed from the blocked list until the scheduler
            is resumed.

            This task cannot be in an event list as it is the currently
            executing task. */
            prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 800ce74:	2100      	movs	r1, #0
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fd8c 	bl	800d994 <prvAddCurrentTaskToDelayedList>
        }
        xAlreadyYielded = xTaskResumeAll();
 800ce7c:	f000 f91a 	bl	800d0b4 <xTaskResumeAll>
 800ce80:	60f8      	str	r0, [r7, #12]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Force a reschedule if xTaskResumeAll has not already done so, we may
    have put ourselves to sleep. */
    if (xAlreadyYielded == pdFALSE) {
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d107      	bne.n	800ce98 <vTaskDelay+0x58>
        portYIELD_WITHIN_API();
 800ce88:	4b06      	ldr	r3, [pc, #24]	; (800cea4 <vTaskDelay+0x64>)
 800ce8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	f3bf 8f6f 	isb	sy
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ce98:	bf00      	nop
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	20000d48 	.word	0x20000d48
 800cea4:	e000ed04 	.word	0xe000ed04

0800cea8 <vTaskSuspend>:
#endif /* INCLUDE_vTaskPrioritySet */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskSuspend == 1)

void vTaskSuspend(TaskHandle_t xTaskToSuspend) {
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800ceb0:	f001 faf0 	bl	800e494 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the running task that is
        being suspended. */
        pxTCB = prvGetTCBFromHandle(xTaskToSuspend);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d102      	bne.n	800cec0 <vTaskSuspend+0x18>
 800ceba:	4b3c      	ldr	r3, [pc, #240]	; (800cfac <vTaskSuspend+0x104>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	e000      	b.n	800cec2 <vTaskSuspend+0x1a>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	60fb      	str	r3, [r7, #12]

        traceTASK_SUSPEND(pxTCB);

        /* Remove task from the ready/delayed list and place in the
        suspended list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	3304      	adds	r3, #4
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7ff f882 	bl	800bfd2 <uxListRemove>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d115      	bne.n	800cf00 <vTaskSuspend+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced8:	4935      	ldr	r1, [pc, #212]	; (800cfb0 <vTaskSuspend+0x108>)
 800ceda:	4613      	mov	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	440b      	add	r3, r1
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10a      	bne.n	800cf00 <vTaskSuspend+0x58>
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceee:	2201      	movs	r2, #1
 800cef0:	fa02 f303 	lsl.w	r3, r2, r3
 800cef4:	43da      	mvns	r2, r3
 800cef6:	4b2f      	ldr	r3, [pc, #188]	; (800cfb4 <vTaskSuspend+0x10c>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4013      	ands	r3, r2
 800cefc:	4a2d      	ldr	r2, [pc, #180]	; (800cfb4 <vTaskSuspend+0x10c>)
 800cefe:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d004      	beq.n	800cf12 <vTaskSuspend+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	3318      	adds	r3, #24
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7ff f860 	bl	800bfd2 <uxListRemove>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        vListInsertEnd(&xSuspendedTaskList, &(pxTCB->xStateListItem));
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3304      	adds	r3, #4
 800cf16:	4619      	mov	r1, r3
 800cf18:	4827      	ldr	r0, [pc, #156]	; (800cfb8 <vTaskSuspend+0x110>)
 800cf1a:	f7fe fffd 	bl	800bf18 <vListInsertEnd>

#if (configUSE_TASK_NOTIFICATIONS == 1)
        {
            if (pxTCB->ucNotifyState == taskWAITING_NOTIFICATION) {
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d103      	bne.n	800cf32 <vTaskSuspend+0x8a>
                /* The task was blocked to wait for a notification, but is
                now suspended, so no notification was received. */
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
        }
#endif
    }
    taskEXIT_CRITICAL();
 800cf32:	f001 fadf 	bl	800e4f4 <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800cf36:	4b21      	ldr	r3, [pc, #132]	; (800cfbc <vTaskSuspend+0x114>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d005      	beq.n	800cf4a <vTaskSuspend+0xa2>
        /* Reset the next expected unblock time in case it referred to the
        task that is now in the Suspended state. */
        taskENTER_CRITICAL();
 800cf3e:	f001 faa9 	bl	800e494 <vPortEnterCritical>
        { prvResetNextTaskUnblockTime(); }
 800cf42:	f000 fc63 	bl	800d80c <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 800cf46:	f001 fad5 	bl	800e4f4 <vPortExitCritical>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    if (pxTCB == pxCurrentTCB) {
 800cf4a:	4b18      	ldr	r3, [pc, #96]	; (800cfac <vTaskSuspend+0x104>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d127      	bne.n	800cfa4 <vTaskSuspend+0xfc>
        if (xSchedulerRunning != pdFALSE) {
 800cf54:	4b19      	ldr	r3, [pc, #100]	; (800cfbc <vTaskSuspend+0x114>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d017      	beq.n	800cf8c <vTaskSuspend+0xe4>
            /* The current task has just been suspended. */
            configASSERT(uxSchedulerSuspended == 0);
 800cf5c:	4b18      	ldr	r3, [pc, #96]	; (800cfc0 <vTaskSuspend+0x118>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00a      	beq.n	800cf7a <vTaskSuspend+0xd2>
    __asm volatile("	mov %0, %1												\n"
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	60bb      	str	r3, [r7, #8]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <vTaskSuspend+0xd0>
            portYIELD_WITHIN_API();
 800cf7a:	4b12      	ldr	r3, [pc, #72]	; (800cfc4 <vTaskSuspend+0x11c>)
 800cf7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf80:	601a      	str	r2, [r3, #0]
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	f3bf 8f6f 	isb	sy
            }
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cf8a:	e00b      	b.n	800cfa4 <vTaskSuspend+0xfc>
            if (listCURRENT_LIST_LENGTH(&xSuspendedTaskList) == uxCurrentNumberOfTasks) /*lint !e931 Right has no side effect, just volatile. */
 800cf8c:	4b0a      	ldr	r3, [pc, #40]	; (800cfb8 <vTaskSuspend+0x110>)
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	4b0d      	ldr	r3, [pc, #52]	; (800cfc8 <vTaskSuspend+0x120>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d103      	bne.n	800cfa0 <vTaskSuspend+0xf8>
                pxCurrentTCB = NULL;
 800cf98:	4b04      	ldr	r3, [pc, #16]	; (800cfac <vTaskSuspend+0x104>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	601a      	str	r2, [r3, #0]
}
 800cf9e:	e001      	b.n	800cfa4 <vTaskSuspend+0xfc>
                vTaskSwitchContext();
 800cfa0:	f000 f9ec 	bl	800d37c <vTaskSwitchContext>
}
 800cfa4:	bf00      	nop
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	20000c20 	.word	0x20000c20
 800cfb0:	20000c24 	.word	0x20000c24
 800cfb4:	20000d28 	.word	0x20000d28
 800cfb8:	20000d0c 	.word	0x20000d0c
 800cfbc:	20000d2c 	.word	0x20000d2c
 800cfc0:	20000d48 	.word	0x20000d48
 800cfc4:	e000ed04 	.word	0xe000ed04
 800cfc8:	20000d20 	.word	0x20000d20

0800cfcc <vTaskStartScheduler>:
}

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08a      	sub	sp, #40	; 0x28
 800cfd0:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

/* Add the idle task at the lowest priority. */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
        address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
 800cfda:	463a      	mov	r2, r7
 800cfdc:	1d39      	adds	r1, r7, #4
 800cfde:	f107 0308 	add.w	r3, r7, #8
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7f4 fb82 	bl	80016ec <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic(prvIdleTask, configIDLE_TASK_NAME, ulIdleTaskStackSize, (void *)NULL, /*lint !e961.  The cast is not redundant for all compilers. */
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	9202      	str	r2, [sp, #8]
 800cff0:	9301      	str	r3, [sp, #4]
 800cff2:	2300      	movs	r3, #0
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	2300      	movs	r3, #0
 800cff8:	460a      	mov	r2, r1
 800cffa:	4921      	ldr	r1, [pc, #132]	; (800d080 <vTaskStartScheduler+0xb4>)
 800cffc:	4821      	ldr	r0, [pc, #132]	; (800d084 <vTaskStartScheduler+0xb8>)
 800cffe:	f7ff fcfb 	bl	800c9f8 <xTaskCreateStatic>
 800d002:	4603      	mov	r3, r0
 800d004:	4a20      	ldr	r2, [pc, #128]	; (800d088 <vTaskStartScheduler+0xbc>)
 800d006:	6013      	str	r3, [r2, #0]
                                            portPRIVILEGE_BIT,                                                    /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                            pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer);                          /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if (xIdleTaskHandle != NULL) {
 800d008:	4b1f      	ldr	r3, [pc, #124]	; (800d088 <vTaskStartScheduler+0xbc>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <vTaskStartScheduler+0x4a>
            xReturn = pdPASS;
 800d010:	2301      	movs	r3, #1
 800d012:	617b      	str	r3, [r7, #20]
 800d014:	e001      	b.n	800d01a <vTaskStartScheduler+0x4e>
        } else {
            xReturn = pdFAIL;
 800d016:	2300      	movs	r3, #0
 800d018:	617b      	str	r3, [r7, #20]
    }
#endif /* configSUPPORT_STATIC_ALLOCATION */

#if (configUSE_TIMERS == 1)
    {
        if (xReturn == pdPASS) {
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d102      	bne.n	800d026 <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
 800d020:	f000 fd1e 	bl	800da60 <xTimerCreateTimerTask>
 800d024:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif /* configUSE_TIMERS */

    if (xReturn == pdPASS) {
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d116      	bne.n	800d05a <vTaskStartScheduler+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800d02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	613b      	str	r3, [r7, #16]
}
 800d03e:	bf00      	nop
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800d040:	4b12      	ldr	r3, [pc, #72]	; (800d08c <vTaskStartScheduler+0xc0>)
 800d042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d046:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d048:	4b11      	ldr	r3, [pc, #68]	; (800d090 <vTaskStartScheduler+0xc4>)
 800d04a:	2201      	movs	r2, #1
 800d04c:	601a      	str	r2, [r3, #0]
        xTickCount = (TickType_t)configINITIAL_TICK_COUNT;
 800d04e:	4b11      	ldr	r3, [pc, #68]	; (800d094 <vTaskStartScheduler+0xc8>)
 800d050:	2200      	movs	r2, #0
 800d052:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
        portable interface. */
        if (xPortStartScheduler() != pdFALSE) {
 800d054:	f001 f97c 	bl	800e350 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
    meaning xIdleTaskHandle is not used anywhere else. */
    (void)xIdleTaskHandle;
}
 800d058:	e00e      	b.n	800d078 <vTaskStartScheduler+0xac>
        configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d060:	d10a      	bne.n	800d078 <vTaskStartScheduler+0xac>
    __asm volatile("	mov %0, %1												\n"
 800d062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	60fb      	str	r3, [r7, #12]
}
 800d074:	bf00      	nop
 800d076:	e7fe      	b.n	800d076 <vTaskStartScheduler+0xaa>
}
 800d078:	bf00      	nop
 800d07a:	3718      	adds	r7, #24
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	0801215c 	.word	0x0801215c
 800d084:	0800d6a1 	.word	0x0800d6a1
 800d088:	20000d44 	.word	0x20000d44
 800d08c:	20000d40 	.word	0x20000d40
 800d090:	20000d2c 	.word	0x20000d2c
 800d094:	20000d24 	.word	0x20000d24

0800d098 <vTaskSuspendAll>:
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 800d098:	b480      	push	{r7}
 800d09a:	af00      	add	r7, sp, #0
    do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
    is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d09c:	4b04      	ldr	r3, [pc, #16]	; (800d0b0 <vTaskSuspendAll+0x18>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	4a03      	ldr	r2, [pc, #12]	; (800d0b0 <vTaskSuspendAll+0x18>)
 800d0a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
    the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d0a6:	bf00      	nop
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	20000d48 	.word	0x20000d48

0800d0b4 <xTaskResumeAll>:
}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
    previous call to vTaskSuspendAll(). */
    configASSERT(uxSchedulerSuspended);
 800d0c2:	4b41      	ldr	r3, [pc, #260]	; (800d1c8 <xTaskResumeAll+0x114>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10a      	bne.n	800d0e0 <xTaskResumeAll+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	603b      	str	r3, [r7, #0]
}
 800d0dc:	bf00      	nop
 800d0de:	e7fe      	b.n	800d0de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
    list while the scheduler was suspended.  If this was the case then the
    removed task will have been added to the xPendingReadyList.  Once the
    scheduler has been resumed it is safe to move all the pending ready
    tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d0e0:	f001 f9d8 	bl	800e494 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d0e4:	4b38      	ldr	r3, [pc, #224]	; (800d1c8 <xTaskResumeAll+0x114>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	4a37      	ldr	r2, [pc, #220]	; (800d1c8 <xTaskResumeAll+0x114>)
 800d0ec:	6013      	str	r3, [r2, #0]

        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d0ee:	4b36      	ldr	r3, [pc, #216]	; (800d1c8 <xTaskResumeAll+0x114>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d161      	bne.n	800d1ba <xTaskResumeAll+0x106>
            if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
 800d0f6:	4b35      	ldr	r3, [pc, #212]	; (800d1cc <xTaskResumeAll+0x118>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d05d      	beq.n	800d1ba <xTaskResumeAll+0x106>
                /* Move any readied tasks from the pending list into the
                appropriate ready list. */
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800d0fe:	e02e      	b.n	800d15e <xTaskResumeAll+0xaa>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800d100:	4b33      	ldr	r3, [pc, #204]	; (800d1d0 <xTaskResumeAll+0x11c>)
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	60fb      	str	r3, [r7, #12]
                        (&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                    (void)uxListRemove(&(pxTCB->xEventListItem));
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3318      	adds	r3, #24
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe ff60 	bl	800bfd2 <uxListRemove>
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	3304      	adds	r3, #4
 800d116:	4618      	mov	r0, r3
 800d118:	f7fe ff5b 	bl	800bfd2 <uxListRemove>
                    prvAddTaskToReadyList(pxTCB);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d120:	2201      	movs	r2, #1
 800d122:	409a      	lsls	r2, r3
 800d124:	4b2b      	ldr	r3, [pc, #172]	; (800d1d4 <xTaskResumeAll+0x120>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4313      	orrs	r3, r2
 800d12a:	4a2a      	ldr	r2, [pc, #168]	; (800d1d4 <xTaskResumeAll+0x120>)
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d132:	4613      	mov	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4413      	add	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4a27      	ldr	r2, [pc, #156]	; (800d1d8 <xTaskResumeAll+0x124>)
 800d13c:	441a      	add	r2, r3
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3304      	adds	r3, #4
 800d142:	4619      	mov	r1, r3
 800d144:	4610      	mov	r0, r2
 800d146:	f7fe fee7 	bl	800bf18 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                    task then a yield must be performed. */
                    if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d14e:	4b23      	ldr	r3, [pc, #140]	; (800d1dc <xTaskResumeAll+0x128>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d154:	429a      	cmp	r2, r3
 800d156:	d302      	bcc.n	800d15e <xTaskResumeAll+0xaa>
                        xYieldPending = pdTRUE;
 800d158:	4b21      	ldr	r3, [pc, #132]	; (800d1e0 <xTaskResumeAll+0x12c>)
 800d15a:	2201      	movs	r2, #1
 800d15c:	601a      	str	r2, [r3, #0]
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800d15e:	4b1c      	ldr	r3, [pc, #112]	; (800d1d0 <xTaskResumeAll+0x11c>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d1cc      	bne.n	800d100 <xTaskResumeAll+0x4c>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (pxTCB != NULL) {
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d001      	beq.n	800d170 <xTaskResumeAll+0xbc>
                    which may have prevented the next unblock time from being
                    re-calculated, in which case re-calculate it now.  Mainly
                    important for low power tickless implementations, where
                    this can prevent an unnecessary exit from low power
                    state. */
                    prvResetNextTaskUnblockTime();
 800d16c:	f000 fb4e 	bl	800d80c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                they should be processed now.  This ensures the tick count does
                not	slip, and that any delayed tasks are resumed at the correct
                time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d170:	4b1c      	ldr	r3, [pc, #112]	; (800d1e4 <xTaskResumeAll+0x130>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	607b      	str	r3, [r7, #4]

                    if (xPendedCounts > (TickType_t)0U) {
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d010      	beq.n	800d19e <xTaskResumeAll+0xea>
                        do {
                            if (xTaskIncrementTick() != pdFALSE) {
 800d17c:	f000 f846 	bl	800d20c <xTaskIncrementTick>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d002      	beq.n	800d18c <xTaskResumeAll+0xd8>
                                xYieldPending = pdTRUE;
 800d186:	4b16      	ldr	r3, [pc, #88]	; (800d1e0 <xTaskResumeAll+0x12c>)
 800d188:	2201      	movs	r2, #1
 800d18a:	601a      	str	r2, [r3, #0]
                            } else {
                                mtCOVERAGE_TEST_MARKER();
                            }
                            --xPendedCounts;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3b01      	subs	r3, #1
 800d190:	607b      	str	r3, [r7, #4]
                        } while (xPendedCounts > (TickType_t)0U);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1f1      	bne.n	800d17c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800d198:	4b12      	ldr	r3, [pc, #72]	; (800d1e4 <xTaskResumeAll+0x130>)
 800d19a:	2200      	movs	r2, #0
 800d19c:	601a      	str	r2, [r3, #0]
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (xYieldPending != pdFALSE) {
 800d19e:	4b10      	ldr	r3, [pc, #64]	; (800d1e0 <xTaskResumeAll+0x12c>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d009      	beq.n	800d1ba <xTaskResumeAll+0x106>
#if (configUSE_PREEMPTION != 0)
                    { xAlreadyYielded = pdTRUE; }
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	60bb      	str	r3, [r7, #8]
#endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d1aa:	4b0f      	ldr	r3, [pc, #60]	; (800d1e8 <xTaskResumeAll+0x134>)
 800d1ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b0:	601a      	str	r2, [r3, #0]
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	f3bf 8f6f 	isb	sy
            }
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d1ba:	f001 f99b 	bl	800e4f4 <vPortExitCritical>

    return xAlreadyYielded;
 800d1be:	68bb      	ldr	r3, [r7, #8]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	20000d48 	.word	0x20000d48
 800d1cc:	20000d20 	.word	0x20000d20
 800d1d0:	20000ce0 	.word	0x20000ce0
 800d1d4:	20000d28 	.word	0x20000d28
 800d1d8:	20000c24 	.word	0x20000c24
 800d1dc:	20000c20 	.word	0x20000c20
 800d1e0:	20000d34 	.word	0x20000d34
 800d1e4:	20000d30 	.word	0x20000d30
 800d1e8:	e000ed04 	.word	0xe000ed04

0800d1ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    { xTicks = xTickCount; }
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <xTaskGetTickCount+0x1c>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	607b      	str	r3, [r7, #4]
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d1f8:	687b      	ldr	r3, [r7, #4]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	370c      	adds	r7, #12
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	20000d24 	.word	0x20000d24

0800d20c <xTaskIncrementTick>:
}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d212:	2300      	movs	r3, #0
 800d214:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
    Increments the tick then checks to see if the new tick value will cause any
    tasks to be unblocked. */
    traceTASK_INCREMENT_TICK(xTickCount);
    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d216:	4b4e      	ldr	r3, [pc, #312]	; (800d350 <xTaskIncrementTick+0x144>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f040 808e 	bne.w	800d33c <xTaskIncrementTick+0x130>
        /* Minor optimisation.  The tick count cannot change in this
        block. */
        const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
 800d220:	4b4c      	ldr	r3, [pc, #304]	; (800d354 <xTaskIncrementTick+0x148>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3301      	adds	r3, #1
 800d226:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
        delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d228:	4a4a      	ldr	r2, [pc, #296]	; (800d354 <xTaskIncrementTick+0x148>)
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	6013      	str	r3, [r2, #0]

        if (xConstTickCount == (TickType_t)0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d120      	bne.n	800d276 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800d234:	4b48      	ldr	r3, [pc, #288]	; (800d358 <xTaskIncrementTick+0x14c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00a      	beq.n	800d254 <xTaskIncrementTick+0x48>
    __asm volatile("	mov %0, %1												\n"
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	603b      	str	r3, [r7, #0]
}
 800d250:	bf00      	nop
 800d252:	e7fe      	b.n	800d252 <xTaskIncrementTick+0x46>
 800d254:	4b40      	ldr	r3, [pc, #256]	; (800d358 <xTaskIncrementTick+0x14c>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	60fb      	str	r3, [r7, #12]
 800d25a:	4b40      	ldr	r3, [pc, #256]	; (800d35c <xTaskIncrementTick+0x150>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a3e      	ldr	r2, [pc, #248]	; (800d358 <xTaskIncrementTick+0x14c>)
 800d260:	6013      	str	r3, [r2, #0]
 800d262:	4a3e      	ldr	r2, [pc, #248]	; (800d35c <xTaskIncrementTick+0x150>)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6013      	str	r3, [r2, #0]
 800d268:	4b3d      	ldr	r3, [pc, #244]	; (800d360 <xTaskIncrementTick+0x154>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3301      	adds	r3, #1
 800d26e:	4a3c      	ldr	r2, [pc, #240]	; (800d360 <xTaskIncrementTick+0x154>)
 800d270:	6013      	str	r3, [r2, #0]
 800d272:	f000 facb 	bl	800d80c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
        the	queue in the order of their wake time - meaning once one task
        has been found whose block time has not expired there is no need to
        look any further down the list. */
        if (xConstTickCount >= xNextTaskUnblockTime) {
 800d276:	4b3b      	ldr	r3, [pc, #236]	; (800d364 <xTaskIncrementTick+0x158>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d348      	bcc.n	800d312 <xTaskIncrementTick+0x106>
            for (;;) {
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800d280:	4b35      	ldr	r3, [pc, #212]	; (800d358 <xTaskIncrementTick+0x14c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d104      	bne.n	800d294 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                    to the maximum possible value so it is extremely
                    unlikely that the
                    if( xTickCount >= xNextTaskUnblockTime ) test will pass
                    next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d28a:	4b36      	ldr	r3, [pc, #216]	; (800d364 <xTaskIncrementTick+0x158>)
 800d28c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d290:	601a      	str	r2, [r3, #0]
                    break;
 800d292:	e03e      	b.n	800d312 <xTaskIncrementTick+0x106>
                    /* The delayed list is not empty, get the value of the
                    item at the head of the delayed list.  This is the time
                    at which the task at the head of the delayed list must
                    be removed from the Blocked state. */
                    pxTCB =
                        listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d294:	4b30      	ldr	r3, [pc, #192]	; (800d358 <xTaskIncrementTick+0x14c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	68db      	ldr	r3, [r3, #12]
                    pxTCB =
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	607b      	str	r3, [r7, #4]

                    if (xConstTickCount < xItemValue) {
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d203      	bcs.n	800d2b4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                        item value is the time at which the task at the head
                        of the blocked list must be removed from the Blocked
                        state -	so record the item value in
                        xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d2ac:	4a2d      	ldr	r2, [pc, #180]	; (800d364 <xTaskIncrementTick+0x158>)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2b2:	e02e      	b.n	800d312 <xTaskIncrementTick+0x106>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe fe8a 	bl	800bfd2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                    it from the event list. */
                    if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d004      	beq.n	800d2d0 <xTaskIncrementTick+0xc4>
                        (void)uxListRemove(&(pxTCB->xEventListItem));
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	3318      	adds	r3, #24
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fe fe81 	bl	800bfd2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                    list. */
                    prvAddTaskToReadyList(pxTCB);
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	409a      	lsls	r2, r3
 800d2d8:	4b23      	ldr	r3, [pc, #140]	; (800d368 <xTaskIncrementTick+0x15c>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	4a22      	ldr	r2, [pc, #136]	; (800d368 <xTaskIncrementTick+0x15c>)
 800d2e0:	6013      	str	r3, [r2, #0]
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4413      	add	r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	4a1f      	ldr	r2, [pc, #124]	; (800d36c <xTaskIncrementTick+0x160>)
 800d2f0:	441a      	add	r2, r3
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	f7fe fe0d 	bl	800bf18 <vListInsertEnd>
                    {
                        /* Preemption is on, but a context switch should
                        only be performed if the unblocked task has a
                        priority that is equal to or higher than the
                        currently executing task. */
                        if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d302:	4b1b      	ldr	r3, [pc, #108]	; (800d370 <xTaskIncrementTick+0x164>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d308:	429a      	cmp	r2, r3
 800d30a:	d3b9      	bcc.n	800d280 <xTaskIncrementTick+0x74>
                            xSwitchRequired = pdTRUE;
 800d30c:	2301      	movs	r3, #1
 800d30e:	617b      	str	r3, [r7, #20]
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800d310:	e7b6      	b.n	800d280 <xTaskIncrementTick+0x74>
/* Tasks of equal priority to the currently running task will share
processing time (time slice) if preemption is on, and the application
writer has not explicitly turned time slicing off. */
#if ((configUSE_PREEMPTION == 1) && (configUSE_TIME_SLICING == 1))
        {
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
 800d312:	4b17      	ldr	r3, [pc, #92]	; (800d370 <xTaskIncrementTick+0x164>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d318:	4914      	ldr	r1, [pc, #80]	; (800d36c <xTaskIncrementTick+0x160>)
 800d31a:	4613      	mov	r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	440b      	add	r3, r1
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b01      	cmp	r3, #1
 800d328:	d901      	bls.n	800d32e <xTaskIncrementTick+0x122>
                xSwitchRequired = pdTRUE;
 800d32a:	2301      	movs	r3, #1
 800d32c:	617b      	str	r3, [r7, #20]
        }
#endif /* configUSE_TICK_HOOK */

#if (configUSE_PREEMPTION == 1)
        {
            if (xYieldPending != pdFALSE) {
 800d32e:	4b11      	ldr	r3, [pc, #68]	; (800d374 <xTaskIncrementTick+0x168>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d007      	beq.n	800d346 <xTaskIncrementTick+0x13a>
                xSwitchRequired = pdTRUE;
 800d336:	2301      	movs	r3, #1
 800d338:	617b      	str	r3, [r7, #20]
 800d33a:	e004      	b.n	800d346 <xTaskIncrementTick+0x13a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_PREEMPTION */
    } else {
        ++xPendedTicks;
 800d33c:	4b0e      	ldr	r3, [pc, #56]	; (800d378 <xTaskIncrementTick+0x16c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	3301      	adds	r3, #1
 800d342:	4a0d      	ldr	r2, [pc, #52]	; (800d378 <xTaskIncrementTick+0x16c>)
 800d344:	6013      	str	r3, [r2, #0]
#if (configUSE_TICK_HOOK == 1)
        { vApplicationTickHook(); }
#endif
    }

    return xSwitchRequired;
 800d346:	697b      	ldr	r3, [r7, #20]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3718      	adds	r7, #24
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	20000d48 	.word	0x20000d48
 800d354:	20000d24 	.word	0x20000d24
 800d358:	20000cd8 	.word	0x20000cd8
 800d35c:	20000cdc 	.word	0x20000cdc
 800d360:	20000d38 	.word	0x20000d38
 800d364:	20000d40 	.word	0x20000d40
 800d368:	20000d28 	.word	0x20000d28
 800d36c:	20000c24 	.word	0x20000c24
 800d370:	20000c20 	.word	0x20000c20
 800d374:	20000d34 	.word	0x20000d34
 800d378:	20000d30 	.word	0x20000d30

0800d37c <vTaskSwitchContext>:
}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 800d37c:	b480      	push	{r7}
 800d37e:	b087      	sub	sp, #28
 800d380:	af00      	add	r7, sp, #0
    if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
 800d382:	4b27      	ldr	r3, [pc, #156]	; (800d420 <vTaskSwitchContext+0xa4>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d003      	beq.n	800d392 <vTaskSwitchContext+0x16>
        /* The scheduler is currently suspended - do not allow a context
        switch. */
        xYieldPending = pdTRUE;
 800d38a:	4b26      	ldr	r3, [pc, #152]	; (800d424 <vTaskSwitchContext+0xa8>)
 800d38c:	2201      	movs	r2, #1
 800d38e:	601a      	str	r2, [r3, #0]
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800d390:	e03f      	b.n	800d412 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800d392:	4b24      	ldr	r3, [pc, #144]	; (800d424 <vTaskSwitchContext+0xa8>)
 800d394:	2200      	movs	r2, #0
 800d396:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d398:	4b23      	ldr	r3, [pc, #140]	; (800d428 <vTaskSwitchContext+0xac>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	60fb      	str	r3, [r7, #12]
    __asm volatile("clz %0, %1" : "=r"(ucReturn) : "r"(ulBitmap) : "memory");
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	fab3 f383 	clz	r3, r3
 800d3a4:	72fb      	strb	r3, [r7, #11]
    return ucReturn;
 800d3a6:	7afb      	ldrb	r3, [r7, #11]
 800d3a8:	f1c3 031f 	rsb	r3, r3, #31
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	491f      	ldr	r1, [pc, #124]	; (800d42c <vTaskSwitchContext+0xb0>)
 800d3b0:	697a      	ldr	r2, [r7, #20]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	440b      	add	r3, r1
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10a      	bne.n	800d3d8 <vTaskSwitchContext+0x5c>
    __asm volatile("	mov %0, %1												\n"
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	607b      	str	r3, [r7, #4]
}
 800d3d4:	bf00      	nop
 800d3d6:	e7fe      	b.n	800d3d6 <vTaskSwitchContext+0x5a>
 800d3d8:	697a      	ldr	r2, [r7, #20]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	4413      	add	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4a12      	ldr	r2, [pc, #72]	; (800d42c <vTaskSwitchContext+0xb0>)
 800d3e4:	4413      	add	r3, r2
 800d3e6:	613b      	str	r3, [r7, #16]
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	605a      	str	r2, [r3, #4]
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	3308      	adds	r3, #8
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d104      	bne.n	800d408 <vTaskSwitchContext+0x8c>
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	685a      	ldr	r2, [r3, #4]
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	605a      	str	r2, [r3, #4]
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	4a08      	ldr	r2, [pc, #32]	; (800d430 <vTaskSwitchContext+0xb4>)
 800d410:	6013      	str	r3, [r2, #0]
}
 800d412:	bf00      	nop
 800d414:	371c      	adds	r7, #28
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	20000d48 	.word	0x20000d48
 800d424:	20000d34 	.word	0x20000d34
 800d428:	20000d28 	.word	0x20000d28
 800d42c:	20000c24 	.word	0x20000c24
 800d430:	20000c20 	.word	0x20000c20

0800d434 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t * const pxEventList, const TickType_t xTicksToWait) {
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
    configASSERT(pxEventList);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10a      	bne.n	800d45a <vTaskPlaceOnEventList+0x26>
    __asm volatile("	mov %0, %1												\n"
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	60fb      	str	r3, [r7, #12]
}
 800d456:	bf00      	nop
 800d458:	e7fe      	b.n	800d458 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
    This is placed in the list in priority order so the highest priority task
    is the first to be woken by the event.  The queue that contains the event
    list is locked, preventing simultaneous access from interrupts. */
    vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 800d45a:	4b07      	ldr	r3, [pc, #28]	; (800d478 <vTaskPlaceOnEventList+0x44>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3318      	adds	r3, #24
 800d460:	4619      	mov	r1, r3
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f7fe fd7c 	bl	800bf60 <vListInsert>

    prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 800d468:	2101      	movs	r1, #1
 800d46a:	6838      	ldr	r0, [r7, #0]
 800d46c:	f000 fa92 	bl	800d994 <prvAddCurrentTaskToDelayedList>
}
 800d470:	bf00      	nop
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	20000c20 	.word	0x20000c20

0800d47c <vTaskPlaceOnEventListRestricted>:
}
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vTaskPlaceOnEventListRestricted(List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
    configASSERT(pxEventList);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10a      	bne.n	800d4a4 <vTaskPlaceOnEventListRestricted+0x28>
    __asm volatile("	mov %0, %1												\n"
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	617b      	str	r3, [r7, #20]
}
 800d4a0:	bf00      	nop
 800d4a2:	e7fe      	b.n	800d4a2 <vTaskPlaceOnEventListRestricted+0x26>

    /* Place the event list item of the TCB in the appropriate event list.
    In this case it is assume that this is the only task that is going to
    be waiting on this event list, so the faster vListInsertEnd() function
    can be used in place of vListInsert. */
    vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 800d4a4:	4b0a      	ldr	r3, [pc, #40]	; (800d4d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	3318      	adds	r3, #24
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7fe fd33 	bl	800bf18 <vListInsertEnd>

    /* If the task should block indefinitely then set the block time to a
    value that will be recognised as an indefinite delay inside the
    prvAddCurrentTaskToDelayedList() function. */
    if (xWaitIndefinitely != pdFALSE) {
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d002      	beq.n	800d4be <vTaskPlaceOnEventListRestricted+0x42>
        xTicksToWait = portMAX_DELAY;
 800d4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4bc:	60bb      	str	r3, [r7, #8]
    }

    traceTASK_DELAY_UNTIL((xTickCount + xTicksToWait));
    prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 800d4be:	6879      	ldr	r1, [r7, #4]
 800d4c0:	68b8      	ldr	r0, [r7, #8]
 800d4c2:	f000 fa67 	bl	800d994 <prvAddCurrentTaskToDelayedList>
}
 800d4c6:	bf00      	nop
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	20000c20 	.word	0x20000c20

0800d4d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t * const pxEventList) {
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
    get called - the lock count on the queue will get modified instead.  This
    means exclusive access to the event list is guaranteed here.

    This function assumes that a check has already been made to ensure that
    pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	613b      	str	r3, [r7, #16]
    configASSERT(pxUnblockedTCB);
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10a      	bne.n	800d500 <xTaskRemoveFromEventList+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	60fb      	str	r3, [r7, #12]
}
 800d4fc:	bf00      	nop
 800d4fe:	e7fe      	b.n	800d4fe <xTaskRemoveFromEventList+0x2a>
    (void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	3318      	adds	r3, #24
 800d504:	4618      	mov	r0, r3
 800d506:	f7fe fd64 	bl	800bfd2 <uxListRemove>

    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d50a:	4b1d      	ldr	r3, [pc, #116]	; (800d580 <xTaskRemoveFromEventList+0xac>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d11c      	bne.n	800d54c <xTaskRemoveFromEventList+0x78>
        (void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	3304      	adds	r3, #4
 800d516:	4618      	mov	r0, r3
 800d518:	f7fe fd5b 	bl	800bfd2 <uxListRemove>
        prvAddTaskToReadyList(pxUnblockedTCB);
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d520:	2201      	movs	r2, #1
 800d522:	409a      	lsls	r2, r3
 800d524:	4b17      	ldr	r3, [pc, #92]	; (800d584 <xTaskRemoveFromEventList+0xb0>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4313      	orrs	r3, r2
 800d52a:	4a16      	ldr	r2, [pc, #88]	; (800d584 <xTaskRemoveFromEventList+0xb0>)
 800d52c:	6013      	str	r3, [r2, #0]
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d532:	4613      	mov	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4413      	add	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	4a13      	ldr	r2, [pc, #76]	; (800d588 <xTaskRemoveFromEventList+0xb4>)
 800d53c:	441a      	add	r2, r3
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	3304      	adds	r3, #4
 800d542:	4619      	mov	r1, r3
 800d544:	4610      	mov	r0, r2
 800d546:	f7fe fce7 	bl	800bf18 <vListInsertEnd>
 800d54a:	e005      	b.n	800d558 <xTaskRemoveFromEventList+0x84>
        }
#endif
    } else {
        /* The delayed and ready lists cannot be accessed, so hold this task
        pending until the scheduler is resumed. */
        vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	3318      	adds	r3, #24
 800d550:	4619      	mov	r1, r3
 800d552:	480e      	ldr	r0, [pc, #56]	; (800d58c <xTaskRemoveFromEventList+0xb8>)
 800d554:	f7fe fce0 	bl	800bf18 <vListInsertEnd>
    }

    if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d55c:	4b0c      	ldr	r3, [pc, #48]	; (800d590 <xTaskRemoveFromEventList+0xbc>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d562:	429a      	cmp	r2, r3
 800d564:	d905      	bls.n	800d572 <xTaskRemoveFromEventList+0x9e>
        /* Return true if the task removed from the event list has a higher
        priority than the calling task.  This allows the calling task to know if
        it should force a context switch now. */
        xReturn = pdTRUE;
 800d566:	2301      	movs	r3, #1
 800d568:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
        "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800d56a:	4b0a      	ldr	r3, [pc, #40]	; (800d594 <xTaskRemoveFromEventList+0xc0>)
 800d56c:	2201      	movs	r2, #1
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	e001      	b.n	800d576 <xTaskRemoveFromEventList+0xa2>
    } else {
        xReturn = pdFALSE;
 800d572:	2300      	movs	r3, #0
 800d574:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800d576:	697b      	ldr	r3, [r7, #20]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3718      	adds	r7, #24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	20000d48 	.word	0x20000d48
 800d584:	20000d28 	.word	0x20000d28
 800d588:	20000c24 	.word	0x20000c24
 800d58c:	20000ce0 	.word	0x20000ce0
 800d590:	20000c20 	.word	0x20000c20
 800d594:	20000d34 	.word	0x20000d34

0800d598 <vTaskInternalSetTimeOutState>:
    }
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t * const pxTimeOut) {
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5a0:	4b06      	ldr	r3, [pc, #24]	; (800d5bc <vTaskInternalSetTimeOutState+0x24>)
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800d5a8:	4b05      	ldr	r3, [pc, #20]	; (800d5c0 <vTaskInternalSetTimeOutState+0x28>)
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	605a      	str	r2, [r3, #4]
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	20000d38 	.word	0x20000d38
 800d5c0:	20000d24 	.word	0x20000d24

0800d5c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait) {
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b088      	sub	sp, #32
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT(pxTimeOut);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10a      	bne.n	800d5ea <xTaskCheckForTimeOut+0x26>
    __asm volatile("	mov %0, %1												\n"
 800d5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	613b      	str	r3, [r7, #16]
}
 800d5e6:	bf00      	nop
 800d5e8:	e7fe      	b.n	800d5e8 <xTaskCheckForTimeOut+0x24>
    configASSERT(pxTicksToWait);
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10a      	bne.n	800d606 <xTaskCheckForTimeOut+0x42>
    __asm volatile("	mov %0, %1												\n"
 800d5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	60fb      	str	r3, [r7, #12]
}
 800d602:	bf00      	nop
 800d604:	e7fe      	b.n	800d604 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800d606:	f000 ff45 	bl	800e494 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800d60a:	4b1d      	ldr	r3, [pc, #116]	; (800d680 <xTaskCheckForTimeOut+0xbc>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	69ba      	ldr	r2, [r7, #24]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	617b      	str	r3, [r7, #20]
            xReturn = pdTRUE;
        } else
#endif

#if (INCLUDE_vTaskSuspend == 1)
            if (*pxTicksToWait == portMAX_DELAY) {
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d622:	d102      	bne.n	800d62a <xTaskCheckForTimeOut+0x66>
            /* If INCLUDE_vTaskSuspend is set to 1 and the block time
            specified is the maximum block time then the task should block
            indefinitely, and therefore never time out. */
            xReturn = pdFALSE;
 800d624:	2300      	movs	r3, #0
 800d626:	61fb      	str	r3, [r7, #28]
 800d628:	e023      	b.n	800d672 <xTaskCheckForTimeOut+0xae>
        } else
#endif

            if ((xNumOfOverflows != pxTimeOut->xOverflowCount) && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	4b15      	ldr	r3, [pc, #84]	; (800d684 <xTaskCheckForTimeOut+0xc0>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	429a      	cmp	r2, r3
 800d634:	d007      	beq.n	800d646 <xTaskCheckForTimeOut+0x82>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	69ba      	ldr	r2, [r7, #24]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d302      	bcc.n	800d646 <xTaskCheckForTimeOut+0x82>
            /* The tick count is greater than the time at which
            vTaskSetTimeout() was called, but has also overflowed since
            vTaskSetTimeOut() was called.  It must have wrapped all the way
            around and gone past again. This passed since vTaskSetTimeout()
            was called. */
            xReturn = pdTRUE;
 800d640:	2301      	movs	r3, #1
 800d642:	61fb      	str	r3, [r7, #28]
 800d644:	e015      	b.n	800d672 <xTaskCheckForTimeOut+0xae>
        } else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d20b      	bcs.n	800d668 <xTaskCheckForTimeOut+0xa4>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	1ad2      	subs	r2, r2, r3
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState(pxTimeOut);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7ff ff9b 	bl	800d598 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800d662:	2300      	movs	r3, #0
 800d664:	61fb      	str	r3, [r7, #28]
 800d666:	e004      	b.n	800d672 <xTaskCheckForTimeOut+0xae>
        } else {
            *pxTicksToWait = 0;
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	2200      	movs	r2, #0
 800d66c:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800d66e:	2301      	movs	r3, #1
 800d670:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800d672:	f000 ff3f 	bl	800e4f4 <vPortExitCritical>

    return xReturn;
 800d676:	69fb      	ldr	r3, [r7, #28]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3720      	adds	r7, #32
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	20000d24 	.word	0x20000d24
 800d684:	20000d38 	.word	0x20000d38

0800d688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 800d688:	b480      	push	{r7}
 800d68a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800d68c:	4b03      	ldr	r3, [pc, #12]	; (800d69c <vTaskMissedYield+0x14>)
 800d68e:	2201      	movs	r2, #1
 800d690:	601a      	str	r2, [r3, #0]
}
 800d692:	bf00      	nop
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	20000d34 	.word	0x20000d34

0800d6a0 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION(prvIdleTask, pvParameters) {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
    portALLOCATE_SECURE_CONTEXT(configMINIMAL_SECURE_STACK_SIZE);

    for (;;) {
        /* See if any tasks have deleted themselves - if so then the idle task
        is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800d6a8:	f000 f852 	bl	800d750 <prvCheckTasksWaitingTermination>

            A critical region is not required here as we are just reading from
            the list, and an occasional incorrect value will not matter.  If
            the ready list at the idle priority contains more than one task
            then a task other than the idle task is ready to execute. */
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
 800d6ac:	4b06      	ldr	r3, [pc, #24]	; (800d6c8 <prvIdleTask+0x28>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d9f9      	bls.n	800d6a8 <prvIdleTask+0x8>
                taskYIELD();
 800d6b4:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <prvIdleTask+0x2c>)
 800d6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800d6c4:	e7f0      	b.n	800d6a8 <prvIdleTask+0x8>
 800d6c6:	bf00      	nop
 800d6c8:	20000c24 	.word	0x20000c24
 800d6cc:	e000ed04 	.word	0xe000ed04

0800d6d0 <prvInitialiseTaskLists>:
}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	607b      	str	r3, [r7, #4]
 800d6da:	e00c      	b.n	800d6f6 <prvInitialiseTaskLists+0x26>
        vListInitialise(&(pxReadyTasksLists[uxPriority]));
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4a12      	ldr	r2, [pc, #72]	; (800d730 <prvInitialiseTaskLists+0x60>)
 800d6e8:	4413      	add	r3, r2
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe fbe7 	bl	800bebe <vListInitialise>
    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	607b      	str	r3, [r7, #4]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b06      	cmp	r3, #6
 800d6fa:	d9ef      	bls.n	800d6dc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise(&xDelayedTaskList1);
 800d6fc:	480d      	ldr	r0, [pc, #52]	; (800d734 <prvInitialiseTaskLists+0x64>)
 800d6fe:	f7fe fbde 	bl	800bebe <vListInitialise>
    vListInitialise(&xDelayedTaskList2);
 800d702:	480d      	ldr	r0, [pc, #52]	; (800d738 <prvInitialiseTaskLists+0x68>)
 800d704:	f7fe fbdb 	bl	800bebe <vListInitialise>
    vListInitialise(&xPendingReadyList);
 800d708:	480c      	ldr	r0, [pc, #48]	; (800d73c <prvInitialiseTaskLists+0x6c>)
 800d70a:	f7fe fbd8 	bl	800bebe <vListInitialise>

#if (INCLUDE_vTaskDelete == 1)
    { vListInitialise(&xTasksWaitingTermination); }
 800d70e:	480c      	ldr	r0, [pc, #48]	; (800d740 <prvInitialiseTaskLists+0x70>)
 800d710:	f7fe fbd5 	bl	800bebe <vListInitialise>
#endif /* INCLUDE_vTaskDelete */

#if (INCLUDE_vTaskSuspend == 1)
    { vListInitialise(&xSuspendedTaskList); }
 800d714:	480b      	ldr	r0, [pc, #44]	; (800d744 <prvInitialiseTaskLists+0x74>)
 800d716:	f7fe fbd2 	bl	800bebe <vListInitialise>
#endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
    using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800d71a:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <prvInitialiseTaskLists+0x78>)
 800d71c:	4a05      	ldr	r2, [pc, #20]	; (800d734 <prvInitialiseTaskLists+0x64>)
 800d71e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d720:	4b0a      	ldr	r3, [pc, #40]	; (800d74c <prvInitialiseTaskLists+0x7c>)
 800d722:	4a05      	ldr	r2, [pc, #20]	; (800d738 <prvInitialiseTaskLists+0x68>)
 800d724:	601a      	str	r2, [r3, #0]
}
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	20000c24 	.word	0x20000c24
 800d734:	20000cb0 	.word	0x20000cb0
 800d738:	20000cc4 	.word	0x20000cc4
 800d73c:	20000ce0 	.word	0x20000ce0
 800d740:	20000cf4 	.word	0x20000cf4
 800d744:	20000d0c 	.word	0x20000d0c
 800d748:	20000cd8 	.word	0x20000cd8
 800d74c:	20000cdc 	.word	0x20000cdc

0800d750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
        being called too often in the idle task. */
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800d756:	e019      	b.n	800d78c <prvCheckTasksWaitingTermination+0x3c>
            taskENTER_CRITICAL();
 800d758:	f000 fe9c 	bl	800e494 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800d75c:	4b10      	ldr	r3, [pc, #64]	; (800d7a0 <prvCheckTasksWaitingTermination+0x50>)
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	607b      	str	r3, [r7, #4]
                    (&xTasksWaitingTermination)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                (void)uxListRemove(&(pxTCB->xStateListItem));
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	3304      	adds	r3, #4
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fe fc32 	bl	800bfd2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800d76e:	4b0d      	ldr	r3, [pc, #52]	; (800d7a4 <prvCheckTasksWaitingTermination+0x54>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3b01      	subs	r3, #1
 800d774:	4a0b      	ldr	r2, [pc, #44]	; (800d7a4 <prvCheckTasksWaitingTermination+0x54>)
 800d776:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800d778:	4b0b      	ldr	r3, [pc, #44]	; (800d7a8 <prvCheckTasksWaitingTermination+0x58>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	4a0a      	ldr	r2, [pc, #40]	; (800d7a8 <prvCheckTasksWaitingTermination+0x58>)
 800d780:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800d782:	f000 feb7 	bl	800e4f4 <vPortExitCritical>

            prvDeleteTCB(pxTCB);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f810 	bl	800d7ac <prvDeleteTCB>
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800d78c:	4b06      	ldr	r3, [pc, #24]	; (800d7a8 <prvCheckTasksWaitingTermination+0x58>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1e1      	bne.n	800d758 <prvCheckTasksWaitingTermination+0x8>
        }
    }
#endif /* INCLUDE_vTaskDelete */
}
 800d794:	bf00      	nop
 800d796:	bf00      	nop
 800d798:	3708      	adds	r7, #8
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	20000cf4 	.word	0x20000cf4
 800d7a4:	20000d20 	.word	0x20000d20
 800d7a8:	20000d08 	.word	0x20000d08

0800d7ac <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

static void prvDeleteTCB(TCB_t * pxTCB) {
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
#elif (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
    {
        /* The task could have been allocated statically or dynamically, so
        check what was statically allocated before trying to free the
        memory. */
        if (pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d108      	bne.n	800d7d0 <prvDeleteTCB+0x24>
            /* Both the stack and TCB were allocated dynamically, so both
            must be freed. */
            vPortFree(pxTCB->pxStack);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 ff9a 	bl	800e6fc <vPortFree>
            vPortFree(pxTCB);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 ff97 	bl	800e6fc <vPortFree>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif                                                 /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d7ce:	e018      	b.n	800d802 <prvDeleteTCB+0x56>
        } else if (pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d103      	bne.n	800d7e2 <prvDeleteTCB+0x36>
            vPortFree(pxTCB);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 ff8e 	bl	800e6fc <vPortFree>
}
 800d7e0:	e00f      	b.n	800d802 <prvDeleteTCB+0x56>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d00a      	beq.n	800d802 <prvDeleteTCB+0x56>
    __asm volatile("	mov %0, %1												\n"
 800d7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f0:	f383 8811 	msr	BASEPRI, r3
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	60fb      	str	r3, [r7, #12]
}
 800d7fe:	bf00      	nop
 800d800:	e7fe      	b.n	800d800 <prvDeleteTCB+0x54>
}
 800d802:	bf00      	nop
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
	...

0800d80c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;

    if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800d812:	4b0c      	ldr	r3, [pc, #48]	; (800d844 <prvResetNextTaskUnblockTime+0x38>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <prvResetNextTaskUnblockTime+0x1a>
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
        the maximum possible value so it is	extremely unlikely that the
        if( xTickCount >= xNextTaskUnblockTime ) test will pass until
        there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800d81c:	4b0a      	ldr	r3, [pc, #40]	; (800d848 <prvResetNextTaskUnblockTime+0x3c>)
 800d81e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d822:	601a      	str	r2, [r3, #0]
        which the task at the head of the delayed list should be removed
        from the Blocked state. */
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    }
}
 800d824:	e008      	b.n	800d838 <prvResetNextTaskUnblockTime+0x2c>
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d826:	4b07      	ldr	r3, [pc, #28]	; (800d844 <prvResetNextTaskUnblockTime+0x38>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	607b      	str	r3, [r7, #4]
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	4a04      	ldr	r2, [pc, #16]	; (800d848 <prvResetNextTaskUnblockTime+0x3c>)
 800d836:	6013      	str	r3, [r2, #0]
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr
 800d844:	20000cd8 	.word	0x20000cd8
 800d848:	20000d40 	.word	0x20000d40

0800d84c <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))

BaseType_t xTaskGetSchedulerState(void) {
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if (xSchedulerRunning == pdFALSE) {
 800d852:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <xTaskGetSchedulerState+0x34>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d102      	bne.n	800d860 <xTaskGetSchedulerState+0x14>
        xReturn = taskSCHEDULER_NOT_STARTED;
 800d85a:	2301      	movs	r3, #1
 800d85c:	607b      	str	r3, [r7, #4]
 800d85e:	e008      	b.n	800d872 <xTaskGetSchedulerState+0x26>
    } else {
        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800d860:	4b08      	ldr	r3, [pc, #32]	; (800d884 <xTaskGetSchedulerState+0x38>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d102      	bne.n	800d86e <xTaskGetSchedulerState+0x22>
            xReturn = taskSCHEDULER_RUNNING;
 800d868:	2302      	movs	r3, #2
 800d86a:	607b      	str	r3, [r7, #4]
 800d86c:	e001      	b.n	800d872 <xTaskGetSchedulerState+0x26>
        } else {
            xReturn = taskSCHEDULER_SUSPENDED;
 800d86e:	2300      	movs	r3, #0
 800d870:	607b      	str	r3, [r7, #4]
        }
    }

    return xReturn;
 800d872:	687b      	ldr	r3, [r7, #4]
}
 800d874:	4618      	mov	r0, r3
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	20000d2c 	.word	0x20000d2c
 800d884:	20000d48 	.word	0x20000d48

0800d888 <xTaskPriorityDisinherit>:
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

#if (configUSE_MUTEXES == 1)

BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder) {
 800d888:	b580      	push	{r7, lr}
 800d88a:	b086      	sub	sp, #24
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
    TCB_t * const pxTCB = pxMutexHolder;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	613b      	str	r3, [r7, #16]
    BaseType_t xReturn = pdFALSE;
 800d894:	2300      	movs	r3, #0
 800d896:	617b      	str	r3, [r7, #20]

    if (pxMutexHolder != NULL) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d06e      	beq.n	800d97c <xTaskPriorityDisinherit+0xf4>
        /* A task can only have an inherited priority if it holds the mutex.
        If the mutex is held by a task then it cannot be given from an
        interrupt, and if a mutex is given by the holding task then it must
        be the running state task. */
        configASSERT(pxTCB == pxCurrentTCB);
 800d89e:	4b3a      	ldr	r3, [pc, #232]	; (800d988 <xTaskPriorityDisinherit+0x100>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	693a      	ldr	r2, [r7, #16]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d00a      	beq.n	800d8be <xTaskPriorityDisinherit+0x36>
    __asm volatile("	mov %0, %1												\n"
 800d8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	60fb      	str	r3, [r7, #12]
}
 800d8ba:	bf00      	nop
 800d8bc:	e7fe      	b.n	800d8bc <xTaskPriorityDisinherit+0x34>
        configASSERT(pxTCB->uxMutexesHeld);
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d10a      	bne.n	800d8dc <xTaskPriorityDisinherit+0x54>
    __asm volatile("	mov %0, %1												\n"
 800d8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	60bb      	str	r3, [r7, #8]
}
 800d8d8:	bf00      	nop
 800d8da:	e7fe      	b.n	800d8da <xTaskPriorityDisinherit+0x52>
        (pxTCB->uxMutexesHeld)--;
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8e0:	1e5a      	subs	r2, r3, #1
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Has the holder of the mutex inherited the priority of another
        task? */
        if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d044      	beq.n	800d97c <xTaskPriorityDisinherit+0xf4>
            /* Only disinherit if no other mutexes are held. */
            if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d140      	bne.n	800d97c <xTaskPriorityDisinherit+0xf4>
                /* A task can only have an inherited priority if it holds
                the mutex.  If the mutex is held by a task then it cannot be
                given from an interrupt, and if a mutex is given by the
                holding task then it must be the running state task.  Remove
                the holding task from the ready/delayed list. */
                if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fe fb67 	bl	800bfd2 <uxListRemove>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d115      	bne.n	800d936 <xTaskPriorityDisinherit+0xae>
                    taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d90e:	491f      	ldr	r1, [pc, #124]	; (800d98c <xTaskPriorityDisinherit+0x104>)
 800d910:	4613      	mov	r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	4413      	add	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	440b      	add	r3, r1
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d10a      	bne.n	800d936 <xTaskPriorityDisinherit+0xae>
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d924:	2201      	movs	r2, #1
 800d926:	fa02 f303 	lsl.w	r3, r2, r3
 800d92a:	43da      	mvns	r2, r3
 800d92c:	4b18      	ldr	r3, [pc, #96]	; (800d990 <xTaskPriorityDisinherit+0x108>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4013      	ands	r3, r2
 800d932:	4a17      	ldr	r2, [pc, #92]	; (800d990 <xTaskPriorityDisinherit+0x108>)
 800d934:	6013      	str	r3, [r2, #0]
                }

                /* Disinherit the priority before adding the task into the
                new	ready list. */
                traceTASK_PRIORITY_DISINHERIT(pxTCB, pxTCB->uxBasePriority);
                pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Reset the event list item value.  It cannot be in use for
                any other purpose if this task is running, and it must be
                running to give back the mutex. */
                listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)pxTCB->uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d942:	f1c3 0207 	rsb	r2, r3, #7
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	619a      	str	r2, [r3, #24]
                prvAddTaskToReadyList(pxTCB);
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94e:	2201      	movs	r2, #1
 800d950:	409a      	lsls	r2, r3
 800d952:	4b0f      	ldr	r3, [pc, #60]	; (800d990 <xTaskPriorityDisinherit+0x108>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4313      	orrs	r3, r2
 800d958:	4a0d      	ldr	r2, [pc, #52]	; (800d990 <xTaskPriorityDisinherit+0x108>)
 800d95a:	6013      	str	r3, [r2, #0]
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d960:	4613      	mov	r3, r2
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4413      	add	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4a08      	ldr	r2, [pc, #32]	; (800d98c <xTaskPriorityDisinherit+0x104>)
 800d96a:	441a      	add	r2, r3
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	3304      	adds	r3, #4
 800d970:	4619      	mov	r1, r3
 800d972:	4610      	mov	r0, r2
 800d974:	f7fe fad0 	bl	800bf18 <vListInsertEnd>
                in an order different to that in which they were taken.
                If a context switch did not occur when the first mutex was
                returned, even if a task was waiting on it, then a context
                switch should occur when the last mutex is returned whether
                a task is waiting on it or not. */
                xReturn = pdTRUE;
 800d978:	2301      	movs	r3, #1
 800d97a:	617b      	str	r3, [r7, #20]
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
 800d97c:	697b      	ldr	r3, [r7, #20]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3718      	adds	r7, #24
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	20000c20 	.word	0x20000c20
 800d98c:	20000c24 	.word	0x20000c24
 800d990:	20000d28 	.word	0x20000d28

0800d994 <prvAddCurrentTaskToDelayedList>:
}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely) {
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800d99e:	4b29      	ldr	r3, [pc, #164]	; (800da44 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	60fb      	str	r3, [r7, #12]
    }
#endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
 800d9a4:	4b28      	ldr	r3, [pc, #160]	; (800da48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7fe fb11 	bl	800bfd2 <uxListRemove>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10b      	bne.n	800d9ce <prvAddCurrentTaskToDelayedList+0x3a>
        /* The current task must be in a ready list, so there is no need to
        check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY(pxCurrentTCB->uxPriority,
 800d9b6:	4b24      	ldr	r3, [pc, #144]	; (800da48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9bc:	2201      	movs	r2, #1
 800d9be:	fa02 f303 	lsl.w	r3, r2, r3
 800d9c2:	43da      	mvns	r2, r3
 800d9c4:	4b21      	ldr	r3, [pc, #132]	; (800da4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	4a20      	ldr	r2, [pc, #128]	; (800da4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9cc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

#if (INCLUDE_vTaskSuspend == 1)
    {
        if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9d4:	d10a      	bne.n	800d9ec <prvAddCurrentTaskToDelayedList+0x58>
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d007      	beq.n	800d9ec <prvAddCurrentTaskToDelayedList+0x58>
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
 800d9dc:	4b1a      	ldr	r3, [pc, #104]	; (800da48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3304      	adds	r3, #4
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	481a      	ldr	r0, [pc, #104]	; (800da50 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d9e6:	f7fe fa97 	bl	800bf18 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        (void)xCanBlockIndefinitely;
    }
#endif /* INCLUDE_vTaskSuspend */
}
 800d9ea:	e026      	b.n	800da3a <prvAddCurrentTaskToDelayedList+0xa6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	60bb      	str	r3, [r7, #8]
            listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
 800d9f4:	4b14      	ldr	r3, [pc, #80]	; (800da48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	605a      	str	r2, [r3, #4]
            if (xTimeToWake < xConstTickCount) {
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	429a      	cmp	r2, r3
 800da02:	d209      	bcs.n	800da18 <prvAddCurrentTaskToDelayedList+0x84>
                vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800da04:	4b13      	ldr	r3, [pc, #76]	; (800da54 <prvAddCurrentTaskToDelayedList+0xc0>)
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	4b0f      	ldr	r3, [pc, #60]	; (800da48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3304      	adds	r3, #4
 800da0e:	4619      	mov	r1, r3
 800da10:	4610      	mov	r0, r2
 800da12:	f7fe faa5 	bl	800bf60 <vListInsert>
}
 800da16:	e010      	b.n	800da3a <prvAddCurrentTaskToDelayedList+0xa6>
                vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800da18:	4b0f      	ldr	r3, [pc, #60]	; (800da58 <prvAddCurrentTaskToDelayedList+0xc4>)
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	4b0a      	ldr	r3, [pc, #40]	; (800da48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	3304      	adds	r3, #4
 800da22:	4619      	mov	r1, r3
 800da24:	4610      	mov	r0, r2
 800da26:	f7fe fa9b 	bl	800bf60 <vListInsert>
                if (xTimeToWake < xNextTaskUnblockTime) {
 800da2a:	4b0c      	ldr	r3, [pc, #48]	; (800da5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	68ba      	ldr	r2, [r7, #8]
 800da30:	429a      	cmp	r2, r3
 800da32:	d202      	bcs.n	800da3a <prvAddCurrentTaskToDelayedList+0xa6>
                    xNextTaskUnblockTime = xTimeToWake;
 800da34:	4a09      	ldr	r2, [pc, #36]	; (800da5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	6013      	str	r3, [r2, #0]
}
 800da3a:	bf00      	nop
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20000d24 	.word	0x20000d24
 800da48:	20000c20 	.word	0x20000c20
 800da4c:	20000d28 	.word	0x20000d28
 800da50:	20000d0c 	.word	0x20000d0c
 800da54:	20000cdc 	.word	0x20000cdc
 800da58:	20000cd8 	.word	0x20000cd8
 800da5c:	20000d40 	.word	0x20000d40

0800da60 <xTimerCreateTimerTask>:
 */
static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void) {
 800da60:	b580      	push	{r7, lr}
 800da62:	b08a      	sub	sp, #40	; 0x28
 800da64:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdFAIL;
 800da66:	2300      	movs	r3, #0
 800da68:	617b      	str	r3, [r7, #20]

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
 800da6a:	f000 fb63 	bl	800e134 <prvCheckForValidListAndQueue>

    if (xTimerQueue != NULL) {
 800da6e:	4b1c      	ldr	r3, [pc, #112]	; (800dae0 <xTimerCreateTimerTask+0x80>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d021      	beq.n	800daba <xTimerCreateTimerTask+0x5a>
#if (configSUPPORT_STATIC_ALLOCATION == 1)
        {
            StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800da76:	2300      	movs	r3, #0
 800da78:	60fb      	str	r3, [r7, #12]
            StackType_t * pxTimerTaskStackBuffer = NULL;
 800da7a:	2300      	movs	r3, #0
 800da7c:	60bb      	str	r3, [r7, #8]
            uint32_t ulTimerTaskStackSize;

            vApplicationGetTimerTaskMemory(&pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize);
 800da7e:	1d3a      	adds	r2, r7, #4
 800da80:	f107 0108 	add.w	r1, r7, #8
 800da84:	f107 030c 	add.w	r3, r7, #12
 800da88:	4618      	mov	r0, r3
 800da8a:	f7f3 fe49 	bl	8001720 <vApplicationGetTimerTaskMemory>
            xTimerTaskHandle = xTaskCreateStatic(prvTimerTask, configTIMER_SERVICE_TASK_NAME, ulTimerTaskStackSize, NULL, ((UBaseType_t)configTIMER_TASK_PRIORITY) | portPRIVILEGE_BIT, pxTimerTaskStackBuffer, pxTimerTaskTCBBuffer);
 800da8e:	6879      	ldr	r1, [r7, #4]
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	9202      	str	r2, [sp, #8]
 800da96:	9301      	str	r3, [sp, #4]
 800da98:	2302      	movs	r3, #2
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	2300      	movs	r3, #0
 800da9e:	460a      	mov	r2, r1
 800daa0:	4910      	ldr	r1, [pc, #64]	; (800dae4 <xTimerCreateTimerTask+0x84>)
 800daa2:	4811      	ldr	r0, [pc, #68]	; (800dae8 <xTimerCreateTimerTask+0x88>)
 800daa4:	f7fe ffa8 	bl	800c9f8 <xTaskCreateStatic>
 800daa8:	4603      	mov	r3, r0
 800daaa:	4a10      	ldr	r2, [pc, #64]	; (800daec <xTimerCreateTimerTask+0x8c>)
 800daac:	6013      	str	r3, [r2, #0]

            if (xTimerTaskHandle != NULL) {
 800daae:	4b0f      	ldr	r3, [pc, #60]	; (800daec <xTimerCreateTimerTask+0x8c>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <xTimerCreateTimerTask+0x5a>
                xReturn = pdPASS;
 800dab6:	2301      	movs	r3, #1
 800dab8:	617b      	str	r3, [r7, #20]
#endif /* configSUPPORT_STATIC_ALLOCATION */
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT(xReturn);
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d10a      	bne.n	800dad6 <xTimerCreateTimerTask+0x76>
    __asm volatile("	mov %0, %1												\n"
 800dac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	613b      	str	r3, [r7, #16]
}
 800dad2:	bf00      	nop
 800dad4:	e7fe      	b.n	800dad4 <xTimerCreateTimerTask+0x74>
    return xReturn;
 800dad6:	697b      	ldr	r3, [r7, #20]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3718      	adds	r7, #24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	20000d7c 	.word	0x20000d7c
 800dae4:	08012164 	.word	0x08012164
 800dae8:	0800dd15 	.word	0x0800dd15
 800daec:	20000d80 	.word	0x20000d80

0800daf0 <xTimerCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

TimerHandle_t xTimerCreate(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                           const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction) {
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b088      	sub	sp, #32
 800daf4:	af02      	add	r7, sp, #8
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	603b      	str	r3, [r7, #0]
    Timer_t * pxNewTimer;

    pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dafe:	2028      	movs	r0, #40	; 0x28
 800db00:	f000 fdea 	bl	800e6d8 <pvPortMalloc>
 800db04:	6178      	str	r0, [r7, #20]

    if (pxNewTimer != NULL) {
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00d      	beq.n	800db28 <xTimerCreate+0x38>
        /* Status is thus far zero as the timer is not created statically
        and has not been started.  The auto-reload bit may get set in
        prvInitialiseNewTimer. */
        pxNewTimer->ucStatus = 0x00;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        prvInitialiseNewTimer(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer);
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	9301      	str	r3, [sp, #4]
 800db18:	6a3b      	ldr	r3, [r7, #32]
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	68b9      	ldr	r1, [r7, #8]
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f000 f805 	bl	800db32 <prvInitialiseNewTimer>
    }

    return pxNewTimer;
 800db28:	697b      	ldr	r3, [r7, #20]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3718      	adds	r7, #24
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <prvInitialiseNewTimer>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) {
 800db32:	b580      	push	{r7, lr}
 800db34:	b086      	sub	sp, #24
 800db36:	af00      	add	r7, sp, #0
 800db38:	60f8      	str	r0, [r7, #12]
 800db3a:	60b9      	str	r1, [r7, #8]
 800db3c:	607a      	str	r2, [r7, #4]
 800db3e:	603b      	str	r3, [r7, #0]
    /* 0 is not a valid value for xTimerPeriodInTicks. */
    configASSERT((xTimerPeriodInTicks > 0));
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10a      	bne.n	800db5c <prvInitialiseNewTimer+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800db46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	617b      	str	r3, [r7, #20]
}
 800db58:	bf00      	nop
 800db5a:	e7fe      	b.n	800db5a <prvInitialiseNewTimer+0x28>

    if (pxNewTimer != NULL) {
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d01e      	beq.n	800dba0 <prvInitialiseNewTimer+0x6e>
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
 800db62:	f000 fae7 	bl	800e134 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db74:	683a      	ldr	r2, [r7, #0]
 800db76:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	6a3a      	ldr	r2, [r7, #32]
 800db7c:	621a      	str	r2, [r3, #32]
        vListInitialiseItem(&(pxNewTimer->xTimerListItem));
 800db7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db80:	3304      	adds	r3, #4
 800db82:	4618      	mov	r0, r3
 800db84:	f7fe f9bb 	bl	800befe <vListInitialiseItem>
        if (uxAutoReload != pdFALSE) {
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d008      	beq.n	800dba0 <prvInitialiseNewTimer+0x6e>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db94:	f043 0304 	orr.w	r3, r3, #4
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        traceTIMER_CREATE(pxNewTimer);
    }
}
 800dba0:	bf00      	nop
 800dba2:	3718      	adds	r7, #24
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait) {
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b08a      	sub	sp, #40	; 0x28
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	627b      	str	r3, [r7, #36]	; 0x24
    DaemonTaskMessage_t xMessage;

    configASSERT(xTimer);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10a      	bne.n	800dbd6 <xTimerGenericCommand+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800dbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	623b      	str	r3, [r7, #32]
}
 800dbd2:	bf00      	nop
 800dbd4:	e7fe      	b.n	800dbd4 <xTimerGenericCommand+0x2c>

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if (xTimerQueue != NULL) {
 800dbd6:	4b1a      	ldr	r3, [pc, #104]	; (800dc40 <xTimerGenericCommand+0x98>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d02a      	beq.n	800dc34 <xTimerGenericCommand+0x8c>
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	617b      	str	r3, [r7, #20]
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	61bb      	str	r3, [r7, #24]
        xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	61fb      	str	r3, [r7, #28]

        if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	2b05      	cmp	r3, #5
 800dbee:	dc18      	bgt.n	800dc22 <xTimerGenericCommand+0x7a>
            if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 800dbf0:	f7ff fe2c 	bl	800d84c <xTaskGetSchedulerState>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d109      	bne.n	800dc0e <xTimerGenericCommand+0x66>
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
 800dbfa:	4b11      	ldr	r3, [pc, #68]	; (800dc40 <xTimerGenericCommand+0x98>)
 800dbfc:	6818      	ldr	r0, [r3, #0]
 800dbfe:	f107 0114 	add.w	r1, r7, #20
 800dc02:	2300      	movs	r3, #0
 800dc04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc06:	f7fe fb0f 	bl	800c228 <xQueueGenericSend>
 800dc0a:	6278      	str	r0, [r7, #36]	; 0x24
 800dc0c:	e012      	b.n	800dc34 <xTimerGenericCommand+0x8c>
            } else {
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
 800dc0e:	4b0c      	ldr	r3, [pc, #48]	; (800dc40 <xTimerGenericCommand+0x98>)
 800dc10:	6818      	ldr	r0, [r3, #0]
 800dc12:	f107 0114 	add.w	r1, r7, #20
 800dc16:	2300      	movs	r3, #0
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f7fe fb05 	bl	800c228 <xQueueGenericSend>
 800dc1e:	6278      	str	r0, [r7, #36]	; 0x24
 800dc20:	e008      	b.n	800dc34 <xTimerGenericCommand+0x8c>
            }
        } else {
            xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
 800dc22:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <xTimerGenericCommand+0x98>)
 800dc24:	6818      	ldr	r0, [r3, #0]
 800dc26:	f107 0114 	add.w	r1, r7, #20
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	f7fe fbf9 	bl	800c424 <xQueueGenericSendFromISR>
 800dc32:	6278      	str	r0, [r7, #36]	; 0x24
        traceTIMER_COMMAND_SEND(xTimer, xCommandID, xOptionalValue, xReturn);
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3728      	adds	r7, #40	; 0x28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	20000d7c 	.word	0x20000d7c

0800dc44 <xTimerGetPeriod>:
    configASSERT((xTimerTaskHandle != NULL));
    return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod(TimerHandle_t xTimer) {
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
    Timer_t * pxTimer = xTimer;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d10a      	bne.n	800dc6c <xTimerGetPeriod+0x28>
    __asm volatile("	mov %0, %1												\n"
 800dc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5a:	f383 8811 	msr	BASEPRI, r3
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	60bb      	str	r3, [r7, #8]
}
 800dc68:	bf00      	nop
 800dc6a:	e7fe      	b.n	800dc6a <xTimerGetPeriod+0x26>
    return pxTimer->xTimerPeriodInTicks;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	699b      	ldr	r3, [r3, #24]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <prvProcessExpiredTimer>:
    configASSERT(xTimer);
    return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime, const TickType_t xTimeNow) {
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b088      	sub	sp, #32
 800dc80:	af02      	add	r7, sp, #8
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
    BaseType_t xResult;
    Timer_t * const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800dc86:	4b22      	ldr	r3, [pc, #136]	; (800dd10 <prvProcessExpiredTimer+0x94>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    (void)uxListRemove(&(pxTimer->xTimerListItem));
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	3304      	adds	r3, #4
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fe f99c 	bl	800bfd2 <uxListRemove>
    traceTIMER_EXPIRED(pxTimer);

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dca0:	f003 0304 	and.w	r3, r3, #4
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d022      	beq.n	800dcee <prvProcessExpiredTimer+0x72>
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if (prvInsertTimerInActiveList(pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime) != pdFALSE) {
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	699a      	ldr	r2, [r3, #24]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	18d1      	adds	r1, r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	6978      	ldr	r0, [r7, #20]
 800dcb6:	f000 f8d1 	bl	800de5c <prvInsertTimerInActiveList>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d01f      	beq.n	800dd00 <prvProcessExpiredTimer+0x84>
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	2100      	movs	r1, #0
 800dcca:	6978      	ldr	r0, [r7, #20]
 800dccc:	f7ff ff6c 	bl	800dba8 <xTimerGenericCommand>
 800dcd0:	6138      	str	r0, [r7, #16]
            configASSERT(xResult);
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d113      	bne.n	800dd00 <prvProcessExpiredTimer+0x84>
    __asm volatile("	mov %0, %1												\n"
 800dcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcdc:	f383 8811 	msr	BASEPRI, r3
 800dce0:	f3bf 8f6f 	isb	sy
 800dce4:	f3bf 8f4f 	dsb	sy
 800dce8:	60fb      	str	r3, [r7, #12]
}
 800dcea:	bf00      	nop
 800dcec:	e7fe      	b.n	800dcec <prvProcessExpiredTimer+0x70>
            (void)xResult;
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dcf4:	f023 0301 	bic.w	r3, r3, #1
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	6978      	ldr	r0, [r7, #20]
 800dd06:	4798      	blx	r3
}
 800dd08:	bf00      	nop
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	20000d74 	.word	0x20000d74

0800dd14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION(prvTimerTask, pvParameters) {
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

    for (;;) {
        /* Query the timers list to see if it contains any timers, and if so,
        obtain the time at which the next timer will expire. */
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800dd1c:	f107 0308 	add.w	r3, r7, #8
 800dd20:	4618      	mov	r0, r3
 800dd22:	f000 f857 	bl	800ddd4 <prvGetNextExpireTime>
 800dd26:	60f8      	str	r0, [r7, #12]

        /* If a timer has expired, process it.  Otherwise, block this task
        until either a timer does expire, or a command is received. */
        prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f000 f803 	bl	800dd38 <prvProcessTimerOrBlockTask>

        /* Empty the command queue. */
        prvProcessReceivedCommands();
 800dd32:	f000 f8d5 	bl	800dee0 <prvProcessReceivedCommands>
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800dd36:	e7f1      	b.n	800dd1c <prvTimerTask+0x8>

0800dd38 <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime, BaseType_t xListWasEmpty) {
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeNow;
    BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
 800dd42:	f7ff f9a9 	bl	800d098 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800dd46:	f107 0308 	add.w	r3, r7, #8
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 f866 	bl	800de1c <prvSampleTimeNow>
 800dd50:	60f8      	str	r0, [r7, #12]
        if (xTimerListsWereSwitched == pdFALSE) {
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d130      	bne.n	800ddba <prvProcessTimerOrBlockTask+0x82>
            /* The tick count has not overflowed, has the timer expired? */
            if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d10a      	bne.n	800dd74 <prvProcessTimerOrBlockTask+0x3c>
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d806      	bhi.n	800dd74 <prvProcessTimerOrBlockTask+0x3c>
                (void)xTaskResumeAll();
 800dd66:	f7ff f9a5 	bl	800d0b4 <xTaskResumeAll>
                prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
 800dd6a:	68f9      	ldr	r1, [r7, #12]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7ff ff85 	bl	800dc7c <prvProcessExpiredTimer>
            }
        } else {
            (void)xTaskResumeAll();
        }
    }
}
 800dd72:	e024      	b.n	800ddbe <prvProcessTimerOrBlockTask+0x86>
                if (xListWasEmpty != pdFALSE) {
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d008      	beq.n	800dd8c <prvProcessTimerOrBlockTask+0x54>
                    xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
 800dd7a:	4b13      	ldr	r3, [pc, #76]	; (800ddc8 <prvProcessTimerOrBlockTask+0x90>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d101      	bne.n	800dd88 <prvProcessTimerOrBlockTask+0x50>
 800dd84:	2301      	movs	r3, #1
 800dd86:	e000      	b.n	800dd8a <prvProcessTimerOrBlockTask+0x52>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	603b      	str	r3, [r7, #0]
                vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
 800dd8c:	4b0f      	ldr	r3, [pc, #60]	; (800ddcc <prvProcessTimerOrBlockTask+0x94>)
 800dd8e:	6818      	ldr	r0, [r3, #0]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	683a      	ldr	r2, [r7, #0]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f7fe fdf9 	bl	800c990 <vQueueWaitForMessageRestricted>
                if (xTaskResumeAll() == pdFALSE) {
 800dd9e:	f7ff f989 	bl	800d0b4 <xTaskResumeAll>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10a      	bne.n	800ddbe <prvProcessTimerOrBlockTask+0x86>
                    portYIELD_WITHIN_API();
 800dda8:	4b09      	ldr	r3, [pc, #36]	; (800ddd0 <prvProcessTimerOrBlockTask+0x98>)
 800ddaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddae:	601a      	str	r2, [r3, #0]
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	f3bf 8f6f 	isb	sy
}
 800ddb8:	e001      	b.n	800ddbe <prvProcessTimerOrBlockTask+0x86>
            (void)xTaskResumeAll();
 800ddba:	f7ff f97b 	bl	800d0b4 <xTaskResumeAll>
}
 800ddbe:	bf00      	nop
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20000d78 	.word	0x20000d78
 800ddcc:	20000d7c 	.word	0x20000d7c
 800ddd0:	e000ed04 	.word	0xe000ed04

0800ddd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t * const pxListWasEmpty) {
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
 800dddc:	4b0e      	ldr	r3, [pc, #56]	; (800de18 <prvGetNextExpireTime+0x44>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d101      	bne.n	800ddea <prvGetNextExpireTime+0x16>
 800dde6:	2201      	movs	r2, #1
 800dde8:	e000      	b.n	800ddec <prvGetNextExpireTime+0x18>
 800ddea:	2200      	movs	r2, #0
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	601a      	str	r2, [r3, #0]
    if (*pxListWasEmpty == pdFALSE) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d105      	bne.n	800de04 <prvGetNextExpireTime+0x30>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800ddf8:	4b07      	ldr	r3, [pc, #28]	; (800de18 <prvGetNextExpireTime+0x44>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	60fb      	str	r3, [r7, #12]
 800de02:	e001      	b.n	800de08 <prvGetNextExpireTime+0x34>
    } else {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = (TickType_t)0U;
 800de04:	2300      	movs	r3, #0
 800de06:	60fb      	str	r3, [r7, #12]
    }

    return xNextExpireTime;
 800de08:	68fb      	ldr	r3, [r7, #12]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3714      	adds	r7, #20
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	20000d74 	.word	0x20000d74

0800de1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t * const pxTimerListsWereSwitched) {
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
    TickType_t xTimeNow;
    PRIVILEGED_DATA static TickType_t xLastTime = (TickType_t)0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
 800de24:	f7ff f9e2 	bl	800d1ec <xTaskGetTickCount>
 800de28:	60f8      	str	r0, [r7, #12]

    if (xTimeNow < xLastTime) {
 800de2a:	4b0b      	ldr	r3, [pc, #44]	; (800de58 <prvSampleTimeNow+0x3c>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	68fa      	ldr	r2, [r7, #12]
 800de30:	429a      	cmp	r2, r3
 800de32:	d205      	bcs.n	800de40 <prvSampleTimeNow+0x24>
        prvSwitchTimerLists();
 800de34:	f000 f91a 	bl	800e06c <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	e002      	b.n	800de46 <prvSampleTimeNow+0x2a>
    } else {
        *pxTimerListsWereSwitched = pdFALSE;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	601a      	str	r2, [r3, #0]
    }

    xLastTime = xTimeNow;
 800de46:	4a04      	ldr	r2, [pc, #16]	; (800de58 <prvSampleTimeNow+0x3c>)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6013      	str	r3, [r2, #0]

    return xTimeNow;
 800de4c:	68fb      	ldr	r3, [r7, #12]
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	20000d84 	.word	0x20000d84

0800de5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime) {
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	607a      	str	r2, [r7, #4]
 800de68:	603b      	str	r3, [r7, #0]
    BaseType_t xProcessTimerNow = pdFALSE;
 800de6a:	2300      	movs	r3, #0
 800de6c:	617b      	str	r3, [r7, #20]

    listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	68ba      	ldr	r2, [r7, #8]
 800de72:	605a      	str	r2, [r3, #4]
    listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	611a      	str	r2, [r3, #16]

    if (xNextExpiryTime <= xTimeNow) {
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d812      	bhi.n	800dea8 <prvInsertTimerInActiveList+0x4c>
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if (((TickType_t)(xTimeNow - xCommandTime)) >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	1ad2      	subs	r2, r2, r3
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d302      	bcc.n	800de96 <prvInsertTimerInActiveList+0x3a>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
 800de90:	2301      	movs	r3, #1
 800de92:	617b      	str	r3, [r7, #20]
 800de94:	e01b      	b.n	800dece <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
 800de96:	4b10      	ldr	r3, [pc, #64]	; (800ded8 <prvInsertTimerInActiveList+0x7c>)
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3304      	adds	r3, #4
 800de9e:	4619      	mov	r1, r3
 800dea0:	4610      	mov	r0, r2
 800dea2:	f7fe f85d 	bl	800bf60 <vListInsert>
 800dea6:	e012      	b.n	800dece <prvInsertTimerInActiveList+0x72>
        }
    } else {
        if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	429a      	cmp	r2, r3
 800deae:	d206      	bcs.n	800debe <prvInsertTimerInActiveList+0x62>
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d302      	bcc.n	800debe <prvInsertTimerInActiveList+0x62>
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
 800deb8:	2301      	movs	r3, #1
 800deba:	617b      	str	r3, [r7, #20]
 800debc:	e007      	b.n	800dece <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800debe:	4b07      	ldr	r3, [pc, #28]	; (800dedc <prvInsertTimerInActiveList+0x80>)
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	3304      	adds	r3, #4
 800dec6:	4619      	mov	r1, r3
 800dec8:	4610      	mov	r0, r2
 800deca:	f7fe f849 	bl	800bf60 <vListInsert>
        }
    }

    return xProcessTimerNow;
 800dece:	697b      	ldr	r3, [r7, #20]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3718      	adds	r7, #24
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	20000d78 	.word	0x20000d78
 800dedc:	20000d74 	.word	0x20000d74

0800dee0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void) {
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08c      	sub	sp, #48	; 0x30
 800dee4:	af02      	add	r7, sp, #8
    DaemonTaskMessage_t xMessage;
    Timer_t * pxTimer;
    BaseType_t xTimerListsWereSwitched, xResult;
    TickType_t xTimeNow;

    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dee6:	e0ae      	b.n	800e046 <prvProcessReceivedCommands+0x166>
        }
#endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if (xMessage.xMessageID >= (BaseType_t)0) {
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	f2c0 80ab 	blt.w	800e046 <prvProcessReceivedCommands+0x166>
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	627b      	str	r3, [r7, #36]	; 0x24

            if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem)) == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	695b      	ldr	r3, [r3, #20]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d004      	beq.n	800df06 <prvProcessReceivedCommands+0x26>
            {
                /* The timer is in a list, remove it. */
                (void)uxListRemove(&(pxTimer->xTimerListItem));
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	3304      	adds	r3, #4
 800df00:	4618      	mov	r0, r3
 800df02:	f7fe f866 	bl	800bfd2 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800df06:	1d3b      	adds	r3, r7, #4
 800df08:	4618      	mov	r0, r3
 800df0a:	f7ff ff87 	bl	800de1c <prvSampleTimeNow>
 800df0e:	6238      	str	r0, [r7, #32]

            switch (xMessage.xMessageID) {
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	2b09      	cmp	r3, #9
 800df14:	f200 8096 	bhi.w	800e044 <prvProcessReceivedCommands+0x164>
 800df18:	a201      	add	r2, pc, #4	; (adr r2, 800df20 <prvProcessReceivedCommands+0x40>)
 800df1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df1e:	bf00      	nop
 800df20:	0800df49 	.word	0x0800df49
 800df24:	0800df49 	.word	0x0800df49
 800df28:	0800df49 	.word	0x0800df49
 800df2c:	0800dfbd 	.word	0x0800dfbd
 800df30:	0800dfd1 	.word	0x0800dfd1
 800df34:	0800e01b 	.word	0x0800e01b
 800df38:	0800df49 	.word	0x0800df49
 800df3c:	0800df49 	.word	0x0800df49
 800df40:	0800dfbd 	.word	0x0800dfbd
 800df44:	0800dfd1 	.word	0x0800dfd1
            case tmrCOMMAND_START_FROM_ISR:
            case tmrCOMMAND_RESET:
            case tmrCOMMAND_RESET_FROM_ISR:
            case tmrCOMMAND_START_DONT_TRACE:
                /* Start or restart a timer. */
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df4e:	f043 0301 	orr.w	r3, r3, #1
 800df52:	b2da      	uxtb	r2, r3
 800df54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                if (prvInsertTimerInActiveList(pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue) != pdFALSE) {
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5e:	699b      	ldr	r3, [r3, #24]
 800df60:	18d1      	adds	r1, r2, r3
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6a3a      	ldr	r2, [r7, #32]
 800df66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df68:	f7ff ff78 	bl	800de5c <prvInsertTimerInActiveList>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d069      	beq.n	800e046 <prvProcessReceivedCommands+0x166>
                    /* The timer expired before it was added to the active
                    timer list.  Process it now. */
                    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	6a1b      	ldr	r3, [r3, #32]
 800df76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df78:	4798      	blx	r3
                    traceTIMER_EXPIRED(pxTimer);

                    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800df7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df80:	f003 0304 	and.w	r3, r3, #4
 800df84:	2b00      	cmp	r3, #0
 800df86:	d05e      	beq.n	800e046 <prvProcessReceivedCommands+0x166>
                        xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY);
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8c:	699b      	ldr	r3, [r3, #24]
 800df8e:	441a      	add	r2, r3
 800df90:	2300      	movs	r3, #0
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	2300      	movs	r3, #0
 800df96:	2100      	movs	r1, #0
 800df98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df9a:	f7ff fe05 	bl	800dba8 <xTimerGenericCommand>
 800df9e:	61f8      	str	r0, [r7, #28]
                        configASSERT(xResult);
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d14f      	bne.n	800e046 <prvProcessReceivedCommands+0x166>
    __asm volatile("	mov %0, %1												\n"
 800dfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfaa:	f383 8811 	msr	BASEPRI, r3
 800dfae:	f3bf 8f6f 	isb	sy
 800dfb2:	f3bf 8f4f 	dsb	sy
 800dfb6:	61bb      	str	r3, [r7, #24]
}
 800dfb8:	bf00      	nop
 800dfba:	e7fe      	b.n	800dfba <prvProcessReceivedCommands+0xda>
                break;

            case tmrCOMMAND_STOP:
            case tmrCOMMAND_STOP_FROM_ISR:
                /* The timer has already been removed from the active list. */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dfc2:	f023 0301 	bic.w	r3, r3, #1
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                break;
 800dfce:	e03a      	b.n	800e046 <prvProcessReceivedCommands+0x166>

            case tmrCOMMAND_CHANGE_PERIOD:
            case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dfd6:	f043 0301 	orr.w	r3, r3, #1
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	619a      	str	r2, [r3, #24]
                configASSERT((pxTimer->xTimerPeriodInTicks > 0));
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	699b      	ldr	r3, [r3, #24]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d10a      	bne.n	800e006 <prvProcessReceivedCommands+0x126>
    __asm volatile("	mov %0, %1												\n"
 800dff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	617b      	str	r3, [r7, #20]
}
 800e002:	bf00      	nop
 800e004:	e7fe      	b.n	800e004 <prvProcessReceivedCommands+0x124>
                be longer or shorter than the old one.  The command time is
                therefore set to the current time, and as the period cannot
                be zero the next expiry time can only be in the future,
                meaning (unlike for the xTimerStart() case above) there is
                no fail case that needs to be handled here. */
                (void)prvInsertTimerInActiveList(pxTimer, (xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow, xTimeNow);
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	699a      	ldr	r2, [r3, #24]
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	18d1      	adds	r1, r2, r3
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	6a3a      	ldr	r2, [r7, #32]
 800e012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e014:	f7ff ff22 	bl	800de5c <prvInsertTimerInActiveList>
                break;
 800e018:	e015      	b.n	800e046 <prvProcessReceivedCommands+0x166>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            {
                /* The timer has already been removed from the active list,
                just free up the memory if the memory was dynamically
                allocated. */
                if ((pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED) == (uint8_t)0) {
 800e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e020:	f003 0302 	and.w	r3, r3, #2
 800e024:	2b00      	cmp	r3, #0
 800e026:	d103      	bne.n	800e030 <prvProcessReceivedCommands+0x150>
                    vPortFree(pxTimer);
 800e028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e02a:	f000 fb67 	bl	800e6fc <vPortFree>
 800e02e:	e00a      	b.n	800e046 <prvProcessReceivedCommands+0x166>
                } else {
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e032:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e036:	f023 0301 	bic.w	r3, r3, #1
 800e03a:	b2da      	uxtb	r2, r3
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                no need to free the memory - just mark the timer as
                "not active". */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
            }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
            break;
 800e042:	e000      	b.n	800e046 <prvProcessReceivedCommands+0x166>

            default:
                /* Don't expect to get here. */
                break;
 800e044:	bf00      	nop
    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e046:	4b08      	ldr	r3, [pc, #32]	; (800e068 <prvProcessReceivedCommands+0x188>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f107 0108 	add.w	r1, r7, #8
 800e04e:	2200      	movs	r2, #0
 800e050:	4618      	mov	r0, r3
 800e052:	f7fe fa83 	bl	800c55c <xQueueReceive>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f47f af45 	bne.w	800dee8 <prvProcessReceivedCommands+0x8>
            }
        }
    }
}
 800e05e:	bf00      	nop
 800e060:	bf00      	nop
 800e062:	3728      	adds	r7, #40	; 0x28
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	20000d7c 	.word	0x20000d7c

0800e06c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void) {
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b088      	sub	sp, #32
 800e070:	af02      	add	r7, sp, #8

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800e072:	e048      	b.n	800e106 <prvSwitchTimerLists+0x9a>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800e074:	4b2d      	ldr	r3, [pc, #180]	; (800e12c <prvSwitchTimerLists+0xc0>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	613b      	str	r3, [r7, #16]

        /* Remove the timer from the list. */
        pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800e07e:	4b2b      	ldr	r3, [pc, #172]	; (800e12c <prvSwitchTimerLists+0xc0>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	60fb      	str	r3, [r7, #12]
            pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        (void)uxListRemove(&(pxTimer->xTimerListItem));
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	3304      	adds	r3, #4
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fd ffa0 	bl	800bfd2 <uxListRemove>
        traceTIMER_EXPIRED(pxTimer);

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6a1b      	ldr	r3, [r3, #32]
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	4798      	blx	r3

        if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e0a0:	f003 0304 	and.w	r3, r3, #4
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d02e      	beq.n	800e106 <prvSwitchTimerLists+0x9a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	693a      	ldr	r2, [r7, #16]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	60bb      	str	r3, [r7, #8]
            if (xReloadTime > xNextExpireTime) {
 800e0b2:	68ba      	ldr	r2, [r7, #8]
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d90e      	bls.n	800e0d8 <prvSwitchTimerLists+0x6c>
                listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	605a      	str	r2, [r3, #4]
                listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	68fa      	ldr	r2, [r7, #12]
 800e0c4:	611a      	str	r2, [r3, #16]
                vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800e0c6:	4b19      	ldr	r3, [pc, #100]	; (800e12c <prvSwitchTimerLists+0xc0>)
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	4610      	mov	r0, r2
 800e0d2:	f7fd ff45 	bl	800bf60 <vListInsert>
 800e0d6:	e016      	b.n	800e106 <prvSwitchTimerLists+0x9a>
            } else {
                xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800e0d8:	2300      	movs	r3, #0
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	2300      	movs	r3, #0
 800e0de:	693a      	ldr	r2, [r7, #16]
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f7ff fd60 	bl	800dba8 <xTimerGenericCommand>
 800e0e8:	6078      	str	r0, [r7, #4]
                configASSERT(xResult);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d10a      	bne.n	800e106 <prvSwitchTimerLists+0x9a>
    __asm volatile("	mov %0, %1												\n"
 800e0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	603b      	str	r3, [r7, #0]
}
 800e102:	bf00      	nop
 800e104:	e7fe      	b.n	800e104 <prvSwitchTimerLists+0x98>
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800e106:	4b09      	ldr	r3, [pc, #36]	; (800e12c <prvSwitchTimerLists+0xc0>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1b1      	bne.n	800e074 <prvSwitchTimerLists+0x8>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
 800e110:	4b06      	ldr	r3, [pc, #24]	; (800e12c <prvSwitchTimerLists+0xc0>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	617b      	str	r3, [r7, #20]
    pxCurrentTimerList = pxOverflowTimerList;
 800e116:	4b06      	ldr	r3, [pc, #24]	; (800e130 <prvSwitchTimerLists+0xc4>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a04      	ldr	r2, [pc, #16]	; (800e12c <prvSwitchTimerLists+0xc0>)
 800e11c:	6013      	str	r3, [r2, #0]
    pxOverflowTimerList = pxTemp;
 800e11e:	4a04      	ldr	r2, [pc, #16]	; (800e130 <prvSwitchTimerLists+0xc4>)
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	6013      	str	r3, [r2, #0]
}
 800e124:	bf00      	nop
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	20000d74 	.word	0x20000d74
 800e130:	20000d78 	.word	0x20000d78

0800e134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void) {
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af02      	add	r7, sp, #8
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
 800e13a:	f000 f9ab 	bl	800e494 <vPortEnterCritical>
    {
        if (xTimerQueue == NULL) {
 800e13e:	4b15      	ldr	r3, [pc, #84]	; (800e194 <prvCheckForValidListAndQueue+0x60>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d120      	bne.n	800e188 <prvCheckForValidListAndQueue+0x54>
            vListInitialise(&xActiveTimerList1);
 800e146:	4814      	ldr	r0, [pc, #80]	; (800e198 <prvCheckForValidListAndQueue+0x64>)
 800e148:	f7fd feb9 	bl	800bebe <vListInitialise>
            vListInitialise(&xActiveTimerList2);
 800e14c:	4813      	ldr	r0, [pc, #76]	; (800e19c <prvCheckForValidListAndQueue+0x68>)
 800e14e:	f7fd feb6 	bl	800bebe <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
 800e152:	4b13      	ldr	r3, [pc, #76]	; (800e1a0 <prvCheckForValidListAndQueue+0x6c>)
 800e154:	4a10      	ldr	r2, [pc, #64]	; (800e198 <prvCheckForValidListAndQueue+0x64>)
 800e156:	601a      	str	r2, [r3, #0]
            pxOverflowTimerList = &xActiveTimerList2;
 800e158:	4b12      	ldr	r3, [pc, #72]	; (800e1a4 <prvCheckForValidListAndQueue+0x70>)
 800e15a:	4a10      	ldr	r2, [pc, #64]	; (800e19c <prvCheckForValidListAndQueue+0x68>)
 800e15c:	601a      	str	r2, [r3, #0]
                /* The timer queue is allocated statically in case
                configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                static StaticQueue_t xStaticTimerQueue;                                                                   /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                static uint8_t ucStaticTimerQueueStorage[(size_t)configTIMER_QUEUE_LENGTH * sizeof(DaemonTaskMessage_t)]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                xTimerQueue = xQueueCreateStatic((UBaseType_t)configTIMER_QUEUE_LENGTH, (UBaseType_t)sizeof(DaemonTaskMessage_t), &(ucStaticTimerQueueStorage[0]), &xStaticTimerQueue);
 800e15e:	2300      	movs	r3, #0
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	4b11      	ldr	r3, [pc, #68]	; (800e1a8 <prvCheckForValidListAndQueue+0x74>)
 800e164:	4a11      	ldr	r2, [pc, #68]	; (800e1ac <prvCheckForValidListAndQueue+0x78>)
 800e166:	210c      	movs	r1, #12
 800e168:	200a      	movs	r0, #10
 800e16a:	f7fd ffc5 	bl	800c0f8 <xQueueGenericCreateStatic>
 800e16e:	4603      	mov	r3, r0
 800e170:	4a08      	ldr	r2, [pc, #32]	; (800e194 <prvCheckForValidListAndQueue+0x60>)
 800e172:	6013      	str	r3, [r2, #0]
            }
#endif

#if (configQUEUE_REGISTRY_SIZE > 0)
            {
                if (xTimerQueue != NULL) {
 800e174:	4b07      	ldr	r3, [pc, #28]	; (800e194 <prvCheckForValidListAndQueue+0x60>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d005      	beq.n	800e188 <prvCheckForValidListAndQueue+0x54>
                    vQueueAddToRegistry(xTimerQueue, "TmrQ");
 800e17c:	4b05      	ldr	r3, [pc, #20]	; (800e194 <prvCheckForValidListAndQueue+0x60>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	490b      	ldr	r1, [pc, #44]	; (800e1b0 <prvCheckForValidListAndQueue+0x7c>)
 800e182:	4618      	mov	r0, r3
 800e184:	f7fe fbda 	bl	800c93c <vQueueAddToRegistry>
#endif /* configQUEUE_REGISTRY_SIZE */
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800e188:	f000 f9b4 	bl	800e4f4 <vPortExitCritical>
}
 800e18c:	bf00      	nop
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	20000d7c 	.word	0x20000d7c
 800e198:	20000d4c 	.word	0x20000d4c
 800e19c:	20000d60 	.word	0x20000d60
 800e1a0:	20000d74 	.word	0x20000d74
 800e1a4:	20000d78 	.word	0x20000d78
 800e1a8:	20000e00 	.word	0x20000e00
 800e1ac:	20000d88 	.word	0x20000d88
 800e1b0:	0801216c 	.word	0x0801216c

0800e1b4 <pvTimerGetTimerID>:

    return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void * pvTimerGetTimerID(const TimerHandle_t xTimer) {
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
    Timer_t * const pxTimer = xTimer;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	617b      	str	r3, [r7, #20]
    void * pvReturn;

    configASSERT(xTimer);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10a      	bne.n	800e1dc <pvTimerGetTimerID+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ca:	f383 8811 	msr	BASEPRI, r3
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	60fb      	str	r3, [r7, #12]
}
 800e1d8:	bf00      	nop
 800e1da:	e7fe      	b.n	800e1da <pvTimerGetTimerID+0x26>

    taskENTER_CRITICAL();
 800e1dc:	f000 f95a 	bl	800e494 <vPortEnterCritical>
    { pvReturn = pxTimer->pvTimerID; }
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	69db      	ldr	r3, [r3, #28]
 800e1e4:	613b      	str	r3, [r7, #16]
    taskEXIT_CRITICAL();
 800e1e6:	f000 f985 	bl	800e4f4 <vPortExitCritical>

    return pvReturn;
 800e1ea:	693b      	ldr	r3, [r7, #16]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID(TimerHandle_t xTimer, void * pvNewID) {
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
    Timer_t * const pxTimer = xTimer;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10a      	bne.n	800e21e <vTimerSetTimerID+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	60bb      	str	r3, [r7, #8]
}
 800e21a:	bf00      	nop
 800e21c:	e7fe      	b.n	800e21c <vTimerSetTimerID+0x28>

    taskENTER_CRITICAL();
 800e21e:	f000 f939 	bl	800e494 <vPortEnterCritical>
    { pxTimer->pvTimerID = pvNewID; }
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	683a      	ldr	r2, [r7, #0]
 800e226:	61da      	str	r2, [r3, #28]
    taskEXIT_CRITICAL();
 800e228:	f000 f964 	bl	800e4f4 <vPortExitCritical>
}
 800e22c:	bf00      	nop
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <pxPortInitialiseStack>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack(StackType_t * pxTopOfStack, TaskFunction_t pxCode, void * pvParameters) {
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
    interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
    of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3b04      	subs	r3, #4
 800e244:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e24c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	3b04      	subs	r3, #4
 800e252:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	f023 0201 	bic.w	r2, r3, #1
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	3b04      	subs	r3, #4
 800e262:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
 800e264:	4a0c      	ldr	r2, [pc, #48]	; (800e298 <pxPortInitialiseStack+0x64>)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                         /* R12, R3, R2 and R1. */
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	3b14      	subs	r3, #20
 800e26e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)pvParameters; /* R0 */
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
    own exec return value. */
    pxTopOfStack--;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	3b04      	subs	r3, #4
 800e27a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f06f 0202 	mvn.w	r2, #2
 800e282:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	3b20      	subs	r3, #32
 800e288:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800e28a:	68fb      	ldr	r3, [r7, #12]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3714      	adds	r7, #20
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr
 800e298:	0800e29d 	.word	0x0800e29d

0800e29c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 800e29c:	b480      	push	{r7}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	607b      	str	r3, [r7, #4]
    its caller as there is nothing to return to.  If a task wants to exit it
    should instead call vTaskDelete( NULL ).

    Artificially force an assert() to be triggered if configASSERT() is
    defined, then stop here so application writers can catch the error. */
    configASSERT(uxCriticalNesting == ~0UL);
 800e2a6:	4b12      	ldr	r3, [pc, #72]	; (800e2f0 <prvTaskExitError+0x54>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2ae:	d00a      	beq.n	800e2c6 <prvTaskExitError+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	f383 8811 	msr	BASEPRI, r3
 800e2b8:	f3bf 8f6f 	isb	sy
 800e2bc:	f3bf 8f4f 	dsb	sy
 800e2c0:	60fb      	str	r3, [r7, #12]
}
 800e2c2:	bf00      	nop
 800e2c4:	e7fe      	b.n	800e2c4 <prvTaskExitError+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	60bb      	str	r3, [r7, #8]
}
 800e2d8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    while (ulDummy == 0) {
 800e2da:	bf00      	nop
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d0fc      	beq.n	800e2dc <prvTaskExitError+0x40>
        about code appearing after this function is called - making ulDummy
        volatile makes the compiler think the function could return and
        therefore not output an 'unreachable code' warning for code that appears
        after it. */
    }
}
 800e2e2:	bf00      	nop
 800e2e4:	bf00      	nop
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr
 800e2f0:	200000b8 	.word	0x200000b8
	...

0800e300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
    __asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 800e300:	4b07      	ldr	r3, [pc, #28]	; (800e320 <pxCurrentTCBConst2>)
 800e302:	6819      	ldr	r1, [r3, #0]
 800e304:	6808      	ldr	r0, [r1, #0]
 800e306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30a:	f380 8809 	msr	PSP, r0
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f04f 0000 	mov.w	r0, #0
 800e316:	f380 8811 	msr	BASEPRI, r0
 800e31a:	4770      	bx	lr
 800e31c:	f3af 8000 	nop.w

0800e320 <pxCurrentTCBConst2>:
 800e320:	20000c20 	.word	0x20000c20
                   "	msr	basepri, r0					\n"
                   "	bx r14							\n"
                   "									\n"
                   "	.align 4						\n"
                   "pxCurrentTCBConst2: .word pxCurrentTCB				\n");
}
 800e324:	bf00      	nop
 800e326:	bf00      	nop

0800e328 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
    /* Start the first task.  This also clears the bit that indicates the FPU is
    in use in case the FPU was used before the scheduler was started - which
    would otherwise result in the unnecessary leaving of space in the SVC stack
    for lazy saving of FPU registers. */
    __asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 800e328:	4808      	ldr	r0, [pc, #32]	; (800e34c <prvPortStartFirstTask+0x24>)
 800e32a:	6800      	ldr	r0, [r0, #0]
 800e32c:	6800      	ldr	r0, [r0, #0]
 800e32e:	f380 8808 	msr	MSP, r0
 800e332:	f04f 0000 	mov.w	r0, #0
 800e336:	f380 8814 	msr	CONTROL, r0
 800e33a:	b662      	cpsie	i
 800e33c:	b661      	cpsie	f
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	df00      	svc	0
 800e348:	bf00      	nop
                   " cpsie f				\n"
                   " dsb					\n"
                   " isb					\n"
                   " svc 0					\n" /* System call to start first task. */
                   " nop					\n");
}
 800e34a:	bf00      	nop
 800e34c:	e000ed08 	.word	0xe000ed08

0800e350 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 800e350:	b580      	push	{r7, lr}
 800e352:	b086      	sub	sp, #24
 800e354:	af00      	add	r7, sp, #0
    configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

    /* This port can be used on all revisions of the Cortex-M7 core other than
    the r0p1 parts.  r0p1 parts should use the port from the
    /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 800e356:	4b46      	ldr	r3, [pc, #280]	; (800e470 <xPortStartScheduler+0x120>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a46      	ldr	r2, [pc, #280]	; (800e474 <xPortStartScheduler+0x124>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d10a      	bne.n	800e376 <xPortStartScheduler+0x26>
    __asm volatile("	mov %0, %1												\n"
 800e360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	613b      	str	r3, [r7, #16]
}
 800e372:	bf00      	nop
 800e374:	e7fe      	b.n	800e374 <xPortStartScheduler+0x24>
    configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 800e376:	4b3e      	ldr	r3, [pc, #248]	; (800e470 <xPortStartScheduler+0x120>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a3f      	ldr	r2, [pc, #252]	; (800e478 <xPortStartScheduler+0x128>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d10a      	bne.n	800e396 <xPortStartScheduler+0x46>
    __asm volatile("	mov %0, %1												\n"
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	60fb      	str	r3, [r7, #12]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <xPortStartScheduler+0x44>

#if (configASSERT_DEFINED == 1)
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = (volatile uint8_t * const)(portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER);
 800e396:	4b39      	ldr	r3, [pc, #228]	; (800e47c <xPortStartScheduler+0x12c>)
 800e398:	617b      	str	r3, [r7, #20]
        functions can be called.  ISR safe functions are those that end in
        "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
        ensure interrupt entry is as fast and simple as possible.

        Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
        possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	22ff      	movs	r2, #255	; 0xff
 800e3a6:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e3b8:	b2da      	uxtb	r2, r3
 800e3ba:	4b31      	ldr	r3, [pc, #196]	; (800e480 <xPortStartScheduler+0x130>)
 800e3bc:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
        of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3be:	4b31      	ldr	r3, [pc, #196]	; (800e484 <xPortStartScheduler+0x134>)
 800e3c0:	2207      	movs	r2, #7
 800e3c2:	601a      	str	r2, [r3, #0]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800e3c4:	e009      	b.n	800e3da <xPortStartScheduler+0x8a>
            ulMaxPRIGROUPValue--;
 800e3c6:	4b2f      	ldr	r3, [pc, #188]	; (800e484 <xPortStartScheduler+0x134>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	4a2d      	ldr	r2, [pc, #180]	; (800e484 <xPortStartScheduler+0x134>)
 800e3ce:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= (uint8_t)0x01;
 800e3d0:	78fb      	ldrb	r3, [r7, #3]
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	005b      	lsls	r3, r3, #1
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	70fb      	strb	r3, [r7, #3]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800e3da:	78fb      	ldrb	r3, [r7, #3]
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3e2:	2b80      	cmp	r3, #128	; 0x80
 800e3e4:	d0ef      	beq.n	800e3c6 <xPortStartScheduler+0x76>
#ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
            priority bits matches the number of priority bits actually queried
            from the hardware. */
            configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
 800e3e6:	4b27      	ldr	r3, [pc, #156]	; (800e484 <xPortStartScheduler+0x134>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f1c3 0307 	rsb	r3, r3, #7
 800e3ee:	2b04      	cmp	r3, #4
 800e3f0:	d00a      	beq.n	800e408 <xPortStartScheduler+0xb8>
    __asm volatile("	mov %0, %1												\n"
 800e3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	60bb      	str	r3, [r7, #8]
}
 800e404:	bf00      	nop
 800e406:	e7fe      	b.n	800e406 <xPortStartScheduler+0xb6>
        }
#endif

        /* Shift the priority group value back to its position within the AIRCR
        register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e408:	4b1e      	ldr	r3, [pc, #120]	; (800e484 <xPortStartScheduler+0x134>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	021b      	lsls	r3, r3, #8
 800e40e:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <xPortStartScheduler+0x134>)
 800e410:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e412:	4b1c      	ldr	r3, [pc, #112]	; (800e484 <xPortStartScheduler+0x134>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e41a:	4a1a      	ldr	r2, [pc, #104]	; (800e484 <xPortStartScheduler+0x134>)
 800e41c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
        value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	b2da      	uxtb	r2, r3
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	701a      	strb	r2, [r3, #0]
    }
#endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e426:	4b18      	ldr	r3, [pc, #96]	; (800e488 <xPortStartScheduler+0x138>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a17      	ldr	r2, [pc, #92]	; (800e488 <xPortStartScheduler+0x138>)
 800e42c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e430:	6013      	str	r3, [r2, #0]
    portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e432:	4b15      	ldr	r3, [pc, #84]	; (800e488 <xPortStartScheduler+0x138>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a14      	ldr	r2, [pc, #80]	; (800e488 <xPortStartScheduler+0x138>)
 800e438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e43c:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
    here already. */
    vPortSetupTimerInterrupt();
 800e43e:	f000 f8dd 	bl	800e5fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800e442:	4b12      	ldr	r3, [pc, #72]	; (800e48c <xPortStartScheduler+0x13c>)
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800e448:	f000 f8fc 	bl	800e644 <vPortEnableVFP>

    /* Lazy save always. */
    *(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 800e44c:	4b10      	ldr	r3, [pc, #64]	; (800e490 <xPortStartScheduler+0x140>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a0f      	ldr	r2, [pc, #60]	; (800e490 <xPortStartScheduler+0x140>)
 800e452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e456:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800e458:	f7ff ff66 	bl	800e328 <prvPortStartFirstTask>
    exit error function to prevent compiler warnings about a static function
    not being called in the case that the application writer overrides this
    functionality by defining configTASK_RETURN_ADDRESS.  Call
    vTaskSwitchContext() so link time optimisation does not remove the
    symbol. */
    vTaskSwitchContext();
 800e45c:	f7fe ff8e 	bl	800d37c <vTaskSwitchContext>
    prvTaskExitError();
 800e460:	f7ff ff1c 	bl	800e29c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	3718      	adds	r7, #24
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	e000ed00 	.word	0xe000ed00
 800e474:	410fc271 	.word	0x410fc271
 800e478:	410fc270 	.word	0x410fc270
 800e47c:	e000e400 	.word	0xe000e400
 800e480:	20000e48 	.word	0x20000e48
 800e484:	20000e4c 	.word	0x20000e4c
 800e488:	e000ed20 	.word	0xe000ed20
 800e48c:	200000b8 	.word	0x200000b8
 800e490:	e000ef34 	.word	0xe000ef34

0800e494 <vPortEnterCritical>:
    Artificially force an assert. */
    configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800e49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49e:	f383 8811 	msr	BASEPRI, r3
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	607b      	str	r3, [r7, #4]
}
 800e4ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800e4ae:	4b0f      	ldr	r3, [pc, #60]	; (800e4ec <vPortEnterCritical+0x58>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	4a0d      	ldr	r2, [pc, #52]	; (800e4ec <vPortEnterCritical+0x58>)
 800e4b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
    assert() if it is being called from an interrupt context.  Only API
    functions that end in "FromISR" can be used in an interrupt.  Only assert if
    the critical nesting count is 1 to protect against recursive calls if the
    assert function also uses a critical section. */
    if (uxCriticalNesting == 1) {
 800e4b8:	4b0c      	ldr	r3, [pc, #48]	; (800e4ec <vPortEnterCritical+0x58>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d10f      	bne.n	800e4e0 <vPortEnterCritical+0x4c>
        configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
 800e4c0:	4b0b      	ldr	r3, [pc, #44]	; (800e4f0 <vPortEnterCritical+0x5c>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00a      	beq.n	800e4e0 <vPortEnterCritical+0x4c>
    __asm volatile("	mov %0, %1												\n"
 800e4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	603b      	str	r3, [r7, #0]
}
 800e4dc:	bf00      	nop
 800e4de:	e7fe      	b.n	800e4de <vPortEnterCritical+0x4a>
    }
}
 800e4e0:	bf00      	nop
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr
 800e4ec:	200000b8 	.word	0x200000b8
 800e4f0:	e000ed04 	.word	0xe000ed04

0800e4f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
    configASSERT(uxCriticalNesting);
 800e4fa:	4b12      	ldr	r3, [pc, #72]	; (800e544 <vPortExitCritical+0x50>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d10a      	bne.n	800e518 <vPortExitCritical+0x24>
    __asm volatile("	mov %0, %1												\n"
 800e502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e506:	f383 8811 	msr	BASEPRI, r3
 800e50a:	f3bf 8f6f 	isb	sy
 800e50e:	f3bf 8f4f 	dsb	sy
 800e512:	607b      	str	r3, [r7, #4]
}
 800e514:	bf00      	nop
 800e516:	e7fe      	b.n	800e516 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800e518:	4b0a      	ldr	r3, [pc, #40]	; (800e544 <vPortExitCritical+0x50>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3b01      	subs	r3, #1
 800e51e:	4a09      	ldr	r2, [pc, #36]	; (800e544 <vPortExitCritical+0x50>)
 800e520:	6013      	str	r3, [r2, #0]
    if (uxCriticalNesting == 0) {
 800e522:	4b08      	ldr	r3, [pc, #32]	; (800e544 <vPortExitCritical+0x50>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d105      	bne.n	800e536 <vPortExitCritical+0x42>
 800e52a:	2300      	movs	r3, #0
 800e52c:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	f383 8811 	msr	BASEPRI, r3
}
 800e534:	bf00      	nop
        portENABLE_INTERRUPTS();
    }
}
 800e536:	bf00      	nop
 800e538:	370c      	adds	r7, #12
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	200000b8 	.word	0x200000b8
	...

0800e550 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
    /* This is a naked function. */

    __asm volatile("	mrs r0, psp							\n"
 800e550:	f3ef 8009 	mrs	r0, PSP
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	4b15      	ldr	r3, [pc, #84]	; (800e5b0 <pxCurrentTCBConst>)
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	f01e 0f10 	tst.w	lr, #16
 800e560:	bf08      	it	eq
 800e562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56a:	6010      	str	r0, [r2, #0]
 800e56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e570:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e574:	f380 8811 	msr	BASEPRI, r0
 800e578:	f3bf 8f4f 	dsb	sy
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f7fe fefc 	bl	800d37c <vTaskSwitchContext>
 800e584:	f04f 0000 	mov.w	r0, #0
 800e588:	f380 8811 	msr	BASEPRI, r0
 800e58c:	bc09      	pop	{r0, r3}
 800e58e:	6819      	ldr	r1, [r3, #0]
 800e590:	6808      	ldr	r0, [r1, #0]
 800e592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e596:	f01e 0f10 	tst.w	lr, #16
 800e59a:	bf08      	it	eq
 800e59c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e5a0:	f380 8809 	msr	PSP, r0
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	f3af 8000 	nop.w

0800e5b0 <pxCurrentTCBConst>:
 800e5b0:	20000c20 	.word	0x20000c20
                   "										\n"
                   "	bx r14								\n"
                   "										\n"
                   "	.align 4							\n"
                   "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop

0800e5b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800e5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c2:	f383 8811 	msr	BASEPRI, r3
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	607b      	str	r3, [r7, #4]
}
 800e5d0:	bf00      	nop
    save and then restore the interrupt mask value as its value is already
    known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if (xTaskIncrementTick() != pdFALSE) {
 800e5d2:	f7fe fe1b 	bl	800d20c <xTaskIncrementTick>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d003      	beq.n	800e5e4 <xPortSysTickHandler+0x2c>
            /* A context switch is required.  Context switching is performed in
            the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5dc:	4b06      	ldr	r3, [pc, #24]	; (800e5f8 <xPortSysTickHandler+0x40>)
 800e5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	f383 8811 	msr	BASEPRI, r3
}
 800e5ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800e5f0:	bf00      	nop
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	e000ed04 	.word	0xe000ed04

0800e5fc <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt(void) {
 800e5fc:	b480      	push	{r7}
 800e5fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / (configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ);
    }
#endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e600:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <vPortSetupTimerInterrupt+0x34>)
 800e602:	2200      	movs	r2, #0
 800e604:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e606:	4b0b      	ldr	r3, [pc, #44]	; (800e634 <vPortSetupTimerInterrupt+0x38>)
 800e608:	2200      	movs	r2, #0
 800e60a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800e60c:	4b0a      	ldr	r3, [pc, #40]	; (800e638 <vPortSetupTimerInterrupt+0x3c>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a0a      	ldr	r2, [pc, #40]	; (800e63c <vPortSetupTimerInterrupt+0x40>)
 800e612:	fba2 2303 	umull	r2, r3, r2, r3
 800e616:	099b      	lsrs	r3, r3, #6
 800e618:	4a09      	ldr	r2, [pc, #36]	; (800e640 <vPortSetupTimerInterrupt+0x44>)
 800e61a:	3b01      	subs	r3, #1
 800e61c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
 800e61e:	4b04      	ldr	r3, [pc, #16]	; (800e630 <vPortSetupTimerInterrupt+0x34>)
 800e620:	2207      	movs	r2, #7
 800e622:	601a      	str	r2, [r3, #0]
}
 800e624:	bf00      	nop
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	e000e010 	.word	0xe000e010
 800e634:	e000e018 	.word	0xe000e018
 800e638:	20000000 	.word	0x20000000
 800e63c:	10624dd3 	.word	0x10624dd3
 800e640:	e000e014 	.word	0xe000e014

0800e644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
    __asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 800e644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e654 <vPortEnableVFP+0x10>
 800e648:	6801      	ldr	r1, [r0, #0]
 800e64a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e64e:	6001      	str	r1, [r0, #0]
 800e650:	4770      	bx	lr
                   "	ldr r1, [r0]				\n"
                   "								\n"
                   "	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
                   "	str r1, [r0]				\n"
                   "	bx r14						");
}
 800e652:	bf00      	nop
 800e654:	e000ed88 	.word	0xe000ed88

0800e658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if (configASSERT_DEFINED == 1)

void vPortValidateInterruptPriority(void) {
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
    uint32_t ulCurrentInterrupt;
    uint8_t ucCurrentPriority;

    /* Obtain the number of the currently executing interrupt. */
    __asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
 800e65e:	f3ef 8305 	mrs	r3, IPSR
 800e662:	60fb      	str	r3, [r7, #12]

    /* Is the interrupt number a user defined interrupt? */
    if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b0f      	cmp	r3, #15
 800e668:	d914      	bls.n	800e694 <vPortValidateInterruptPriority+0x3c>
        /* Look up the interrupt's priority. */
        ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 800e66a:	4a17      	ldr	r2, [pc, #92]	; (800e6c8 <vPortValidateInterruptPriority+0x70>)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	4413      	add	r3, r2
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	72fb      	strb	r3, [r7, #11]
        interrupt entry is as fast and simple as possible.

        The following links provide detailed information:
        http://www.freertos.org/RTOS-Cortex-M3-M4.html
        http://www.freertos.org/FAQHelp.html */
        configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 800e674:	4b15      	ldr	r3, [pc, #84]	; (800e6cc <vPortValidateInterruptPriority+0x74>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	7afa      	ldrb	r2, [r7, #11]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d20a      	bcs.n	800e694 <vPortValidateInterruptPriority+0x3c>
    __asm volatile("	mov %0, %1												\n"
 800e67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	607b      	str	r3, [r7, #4]
}
 800e690:	bf00      	nop
 800e692:	e7fe      	b.n	800e692 <vPortValidateInterruptPriority+0x3a>
    configuration then the correct setting can be achieved on all Cortex-M
    devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
    scheduler.  Note however that some vendor specific peripheral libraries
    assume a non-zero priority group setting, in which cases using a value
    of zero will result in unpredictable behaviour. */
    configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
 800e694:	4b0e      	ldr	r3, [pc, #56]	; (800e6d0 <vPortValidateInterruptPriority+0x78>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e69c:	4b0d      	ldr	r3, [pc, #52]	; (800e6d4 <vPortValidateInterruptPriority+0x7c>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d90a      	bls.n	800e6ba <vPortValidateInterruptPriority+0x62>
    __asm volatile("	mov %0, %1												\n"
 800e6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	603b      	str	r3, [r7, #0]
}
 800e6b6:	bf00      	nop
 800e6b8:	e7fe      	b.n	800e6b8 <vPortValidateInterruptPriority+0x60>
}
 800e6ba:	bf00      	nop
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr
 800e6c6:	bf00      	nop
 800e6c8:	e000e3f0 	.word	0xe000e3f0
 800e6cc:	20000e48 	.word	0x20000e48
 800e6d0:	e000ed0c 	.word	0xe000ed0c
 800e6d4:	20000e4c 	.word	0x20000e4c

0800e6d8 <pvPortMalloc>:
#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc(size_t xWantedSize) {
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800e6e0:	f7fe fcda 	bl	800d098 <vTaskSuspendAll>
    {
        pvReturn = malloc(xWantedSize);
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 fd2b 	bl	800f140 <malloc>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	60fb      	str	r3, [r7, #12]
        traceMALLOC(pvReturn, xWantedSize);
    }
    (void)xTaskResumeAll();
 800e6ee:	f7fe fce1 	bl	800d0b4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
#endif

    return pvReturn;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void * pv) {
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
    if (pv) {
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d006      	beq.n	800e718 <vPortFree+0x1c>
        vTaskSuspendAll();
 800e70a:	f7fe fcc5 	bl	800d098 <vTaskSuspendAll>
        {
            free(pv);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 fd1e 	bl	800f150 <free>
            traceFREE(pv, 0);
        }
        (void)xTaskResumeAll();
 800e714:	f7fe fcce 	bl	800d0b4 <xTaskResumeAll>
    }
}
 800e718:	bf00      	nop
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 800e720:	b580      	push	{r7, lr}
 800e722:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800e724:	2200      	movs	r2, #0
 800e726:	4912      	ldr	r1, [pc, #72]	; (800e770 <MX_USB_DEVICE_Init+0x50>)
 800e728:	4812      	ldr	r0, [pc, #72]	; (800e774 <MX_USB_DEVICE_Init+0x54>)
 800e72a:	f7fc f857 	bl	800a7dc <USBD_Init>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d001      	beq.n	800e738 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800e734:	f7f3 fa72 	bl	8001c1c <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e738:	490f      	ldr	r1, [pc, #60]	; (800e778 <MX_USB_DEVICE_Init+0x58>)
 800e73a:	480e      	ldr	r0, [pc, #56]	; (800e774 <MX_USB_DEVICE_Init+0x54>)
 800e73c:	f7fc f87e 	bl	800a83c <USBD_RegisterClass>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800e746:	f7f3 fa69 	bl	8001c1c <Error_Handler>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e74a:	490c      	ldr	r1, [pc, #48]	; (800e77c <MX_USB_DEVICE_Init+0x5c>)
 800e74c:	4809      	ldr	r0, [pc, #36]	; (800e774 <MX_USB_DEVICE_Init+0x54>)
 800e74e:	f7fb ff6f 	bl	800a630 <USBD_CDC_RegisterInterface>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800e758:	f7f3 fa60 	bl	8001c1c <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e75c:	4805      	ldr	r0, [pc, #20]	; (800e774 <MX_USB_DEVICE_Init+0x54>)
 800e75e:	f7fc f8a3 	bl	800a8a8 <USBD_Start>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800e768:	f7f3 fa58 	bl	8001c1c <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e76c:	bf00      	nop
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	200000d0 	.word	0x200000d0
 800e774:	20000e50 	.word	0x20000e50
 800e778:	20000038 	.word	0x20000038
 800e77c:	200000bc 	.word	0x200000bc

0800e780 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800e780:	b580      	push	{r7, lr}
 800e782:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e784:	2200      	movs	r2, #0
 800e786:	4905      	ldr	r1, [pc, #20]	; (800e79c <CDC_Init_FS+0x1c>)
 800e788:	4805      	ldr	r0, [pc, #20]	; (800e7a0 <CDC_Init_FS+0x20>)
 800e78a:	f7fb ff6b 	bl	800a664 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e78e:	4905      	ldr	r1, [pc, #20]	; (800e7a4 <CDC_Init_FS+0x24>)
 800e790:	4803      	ldr	r0, [pc, #12]	; (800e7a0 <CDC_Init_FS+0x20>)
 800e792:	f7fb ff89 	bl	800a6a8 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800e796:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 800e798:	4618      	mov	r0, r3
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	2000152c 	.word	0x2000152c
 800e7a0:	20000e50 	.word	0x20000e50
 800e7a4:	2000112c 	.word	0x2000112c

0800e7a8 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800e7a8:	b480      	push	{r7}
 800e7aa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800e7ac:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t * pbuf, uint16_t length) {
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	4603      	mov	r3, r0
 800e7c0:	6039      	str	r1, [r7, #0]
 800e7c2:	71fb      	strb	r3, [r7, #7]
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd) {
 800e7c8:	79fb      	ldrb	r3, [r7, #7]
 800e7ca:	2b23      	cmp	r3, #35	; 0x23
 800e7cc:	d84a      	bhi.n	800e864 <CDC_Control_FS+0xac>
 800e7ce:	a201      	add	r2, pc, #4	; (adr r2, 800e7d4 <CDC_Control_FS+0x1c>)
 800e7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d4:	0800e865 	.word	0x0800e865
 800e7d8:	0800e865 	.word	0x0800e865
 800e7dc:	0800e865 	.word	0x0800e865
 800e7e0:	0800e865 	.word	0x0800e865
 800e7e4:	0800e865 	.word	0x0800e865
 800e7e8:	0800e865 	.word	0x0800e865
 800e7ec:	0800e865 	.word	0x0800e865
 800e7f0:	0800e865 	.word	0x0800e865
 800e7f4:	0800e865 	.word	0x0800e865
 800e7f8:	0800e865 	.word	0x0800e865
 800e7fc:	0800e865 	.word	0x0800e865
 800e800:	0800e865 	.word	0x0800e865
 800e804:	0800e865 	.word	0x0800e865
 800e808:	0800e865 	.word	0x0800e865
 800e80c:	0800e865 	.word	0x0800e865
 800e810:	0800e865 	.word	0x0800e865
 800e814:	0800e865 	.word	0x0800e865
 800e818:	0800e865 	.word	0x0800e865
 800e81c:	0800e865 	.word	0x0800e865
 800e820:	0800e865 	.word	0x0800e865
 800e824:	0800e865 	.word	0x0800e865
 800e828:	0800e865 	.word	0x0800e865
 800e82c:	0800e865 	.word	0x0800e865
 800e830:	0800e865 	.word	0x0800e865
 800e834:	0800e865 	.word	0x0800e865
 800e838:	0800e865 	.word	0x0800e865
 800e83c:	0800e865 	.word	0x0800e865
 800e840:	0800e865 	.word	0x0800e865
 800e844:	0800e865 	.word	0x0800e865
 800e848:	0800e865 	.word	0x0800e865
 800e84c:	0800e865 	.word	0x0800e865
 800e850:	0800e865 	.word	0x0800e865
 800e854:	0800e865 	.word	0x0800e865
 800e858:	0800e865 	.word	0x0800e865
 800e85c:	0800e865 	.word	0x0800e865
 800e860:	0800e865 	.word	0x0800e865
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800e864:	bf00      	nop
    }

    return (USBD_OK);
 800e866:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 800e868:	4618      	mov	r0, r3
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t * Buf, uint32_t * Len) {
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e87e:	6879      	ldr	r1, [r7, #4]
 800e880:	4805      	ldr	r0, [pc, #20]	; (800e898 <CDC_Receive_FS+0x24>)
 800e882:	f7fb ff11 	bl	800a6a8 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e886:	4804      	ldr	r0, [pc, #16]	; (800e898 <CDC_Receive_FS+0x24>)
 800e888:	f7fb ff72 	bl	800a770 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800e88c:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	20000e50 	.word	0x20000e50

0800e89c <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t * Buf, uint16_t Len) {
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800e8ac:	4b0d      	ldr	r3, [pc, #52]	; (800e8e4 <CDC_Transmit_FS+0x48>)
 800e8ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8b2:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d001      	beq.n	800e8c2 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e00b      	b.n	800e8da <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e8c2:	887b      	ldrh	r3, [r7, #2]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	6879      	ldr	r1, [r7, #4]
 800e8c8:	4806      	ldr	r0, [pc, #24]	; (800e8e4 <CDC_Transmit_FS+0x48>)
 800e8ca:	f7fb fecb 	bl	800a664 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e8ce:	4805      	ldr	r0, [pc, #20]	; (800e8e4 <CDC_Transmit_FS+0x48>)
 800e8d0:	f7fb ff08 	bl	800a6e4 <USBD_CDC_TransmitPacket>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 800e8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	20000e50 	.word	0x20000e50

0800e8e8 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t * Buf, uint32_t * Len, uint8_t epnum) {
 800e8e8:	b480      	push	{r7}
 800e8ea:	b087      	sub	sp, #28
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	71fb      	strb	r3, [r7, #7]
    uint8_t result = USBD_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	75fb      	strb	r3, [r7, #23]
    /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
    /* USER CODE END 13 */
    return result;
 800e8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	371c      	adds	r7, #28
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr
	...

0800e90c <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	6039      	str	r1, [r7, #0]
 800e916:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2212      	movs	r2, #18
 800e91c:	801a      	strh	r2, [r3, #0]
    return USBD_FS_DeviceDesc;
 800e91e:	4b03      	ldr	r3, [pc, #12]	; (800e92c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e920:	4618      	mov	r0, r3
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr
 800e92c:	200000ec 	.word	0x200000ec

0800e930 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	4603      	mov	r3, r0
 800e938:	6039      	str	r1, [r7, #0]
 800e93a:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2204      	movs	r2, #4
 800e940:	801a      	strh	r2, [r3, #0]
    return USBD_LangIDDesc;
 800e942:	4b03      	ldr	r3, [pc, #12]	; (800e950 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e944:	4618      	mov	r0, r3
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr
 800e950:	20000100 	.word	0x20000100

0800e954 <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	4603      	mov	r3, r0
 800e95c:	6039      	str	r1, [r7, #0]
 800e95e:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800e960:	79fb      	ldrb	r3, [r7, #7]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d105      	bne.n	800e972 <USBD_FS_ProductStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e966:	683a      	ldr	r2, [r7, #0]
 800e968:	4907      	ldr	r1, [pc, #28]	; (800e988 <USBD_FS_ProductStrDescriptor+0x34>)
 800e96a:	4808      	ldr	r0, [pc, #32]	; (800e98c <USBD_FS_ProductStrDescriptor+0x38>)
 800e96c:	f7fd f948 	bl	800bc00 <USBD_GetString>
 800e970:	e004      	b.n	800e97c <USBD_FS_ProductStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	4904      	ldr	r1, [pc, #16]	; (800e988 <USBD_FS_ProductStrDescriptor+0x34>)
 800e976:	4805      	ldr	r0, [pc, #20]	; (800e98c <USBD_FS_ProductStrDescriptor+0x38>)
 800e978:	f7fd f942 	bl	800bc00 <USBD_GetString>
    }
    return USBD_StrDesc;
 800e97c:	4b02      	ldr	r3, [pc, #8]	; (800e988 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	2000192c 	.word	0x2000192c
 800e98c:	08012174 	.word	0x08012174

0800e990 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	4603      	mov	r3, r0
 800e998:	6039      	str	r1, [r7, #0]
 800e99a:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e99c:	683a      	ldr	r2, [r7, #0]
 800e99e:	4904      	ldr	r1, [pc, #16]	; (800e9b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e9a0:	4804      	ldr	r0, [pc, #16]	; (800e9b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e9a2:	f7fd f92d 	bl	800bc00 <USBD_GetString>
    return USBD_StrDesc;
 800e9a6:	4b02      	ldr	r3, [pc, #8]	; (800e9b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	2000192c 	.word	0x2000192c
 800e9b4:	0801218c 	.word	0x0801218c

0800e9b8 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	4603      	mov	r3, r0
 800e9c0:	6039      	str	r1, [r7, #0]
 800e9c2:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = USB_SIZ_STRING_SERIAL;
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	221a      	movs	r2, #26
 800e9c8:	801a      	strh	r2, [r3, #0]

    /* Update the serial number string descriptor with the data from the unique
     * ID */
    Get_SerialNum();
 800e9ca:	f000 f843 	bl	800ea54 <Get_SerialNum>
    /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

    /* USER CODE END USBD_FS_SerialStrDescriptor */
    return (uint8_t *)USBD_StringSerial;
 800e9ce:	4b02      	ldr	r3, [pc, #8]	; (800e9d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	20000104 	.word	0x20000104

0800e9dc <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	6039      	str	r1, [r7, #0]
 800e9e6:	71fb      	strb	r3, [r7, #7]
    if (speed == USBD_SPEED_HIGH) {
 800e9e8:	79fb      	ldrb	r3, [r7, #7]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d105      	bne.n	800e9fa <USBD_FS_ConfigStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e9ee:	683a      	ldr	r2, [r7, #0]
 800e9f0:	4907      	ldr	r1, [pc, #28]	; (800ea10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e9f2:	4808      	ldr	r0, [pc, #32]	; (800ea14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e9f4:	f7fd f904 	bl	800bc00 <USBD_GetString>
 800e9f8:	e004      	b.n	800ea04 <USBD_FS_ConfigStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e9fa:	683a      	ldr	r2, [r7, #0]
 800e9fc:	4904      	ldr	r1, [pc, #16]	; (800ea10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e9fe:	4805      	ldr	r0, [pc, #20]	; (800ea14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ea00:	f7fd f8fe 	bl	800bc00 <USBD_GetString>
    }
    return USBD_StrDesc;
 800ea04:	4b02      	ldr	r3, [pc, #8]	; (800ea10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	2000192c 	.word	0x2000192c
 800ea14:	080121a0 	.word	0x080121a0

0800ea18 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	4603      	mov	r3, r0
 800ea20:	6039      	str	r1, [r7, #0]
 800ea22:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800ea24:	79fb      	ldrb	r3, [r7, #7]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d105      	bne.n	800ea36 <USBD_FS_InterfaceStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea2a:	683a      	ldr	r2, [r7, #0]
 800ea2c:	4907      	ldr	r1, [pc, #28]	; (800ea4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea2e:	4808      	ldr	r0, [pc, #32]	; (800ea50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea30:	f7fd f8e6 	bl	800bc00 <USBD_GetString>
 800ea34:	e004      	b.n	800ea40 <USBD_FS_InterfaceStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea36:	683a      	ldr	r2, [r7, #0]
 800ea38:	4904      	ldr	r1, [pc, #16]	; (800ea4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea3a:	4805      	ldr	r0, [pc, #20]	; (800ea50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea3c:	f7fd f8e0 	bl	800bc00 <USBD_GetString>
    }
    return USBD_StrDesc;
 800ea40:	4b02      	ldr	r3, [pc, #8]	; (800ea4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	2000192c 	.word	0x2000192c
 800ea50:	080121ac 	.word	0x080121ac

0800ea54 <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
    uint32_t deviceserial0;
    uint32_t deviceserial1;
    uint32_t deviceserial2;

    deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800ea5a:	4b0f      	ldr	r3, [pc, #60]	; (800ea98 <Get_SerialNum+0x44>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	60fb      	str	r3, [r7, #12]
    deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800ea60:	4b0e      	ldr	r3, [pc, #56]	; (800ea9c <Get_SerialNum+0x48>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	60bb      	str	r3, [r7, #8]
    deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800ea66:	4b0e      	ldr	r3, [pc, #56]	; (800eaa0 <Get_SerialNum+0x4c>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	607b      	str	r3, [r7, #4]

    deviceserial0 += deviceserial2;
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4413      	add	r3, r2
 800ea72:	60fb      	str	r3, [r7, #12]

    if (deviceserial0 != 0) {
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d009      	beq.n	800ea8e <Get_SerialNum+0x3a>
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ea7a:	2208      	movs	r2, #8
 800ea7c:	4909      	ldr	r1, [pc, #36]	; (800eaa4 <Get_SerialNum+0x50>)
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f000 f814 	bl	800eaac <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea84:	2204      	movs	r2, #4
 800ea86:	4908      	ldr	r1, [pc, #32]	; (800eaa8 <Get_SerialNum+0x54>)
 800ea88:	68b8      	ldr	r0, [r7, #8]
 800ea8a:	f000 f80f 	bl	800eaac <IntToUnicode>
    }
}
 800ea8e:	bf00      	nop
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	1fff7a10 	.word	0x1fff7a10
 800ea9c:	1fff7a14 	.word	0x1fff7a14
 800eaa0:	1fff7a18 	.word	0x1fff7a18
 800eaa4:	20000106 	.word	0x20000106
 800eaa8:	20000116 	.word	0x20000116

0800eaac <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 800eaac:	b480      	push	{r7}
 800eaae:	b087      	sub	sp, #28
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	4613      	mov	r3, r2
 800eab8:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	75fb      	strb	r3, [r7, #23]

    for (idx = 0; idx < len; idx++) {
 800eabe:	2300      	movs	r3, #0
 800eac0:	75fb      	strb	r3, [r7, #23]
 800eac2:	e027      	b.n	800eb14 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	0f1b      	lsrs	r3, r3, #28
 800eac8:	2b09      	cmp	r3, #9
 800eaca:	d80b      	bhi.n	800eae4 <IntToUnicode+0x38>
            pbuf[2 * idx] = (value >> 28) + '0';
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	0f1b      	lsrs	r3, r3, #28
 800ead0:	b2da      	uxtb	r2, r3
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
 800ead4:	005b      	lsls	r3, r3, #1
 800ead6:	4619      	mov	r1, r3
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	440b      	add	r3, r1
 800eadc:	3230      	adds	r2, #48	; 0x30
 800eade:	b2d2      	uxtb	r2, r2
 800eae0:	701a      	strb	r2, [r3, #0]
 800eae2:	e00a      	b.n	800eafa <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	0f1b      	lsrs	r3, r3, #28
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	7dfb      	ldrb	r3, [r7, #23]
 800eaec:	005b      	lsls	r3, r3, #1
 800eaee:	4619      	mov	r1, r3
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	440b      	add	r3, r1
 800eaf4:	3237      	adds	r2, #55	; 0x37
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	011b      	lsls	r3, r3, #4
 800eafe:	60fb      	str	r3, [r7, #12]

        pbuf[2 * idx + 1] = 0;
 800eb00:	7dfb      	ldrb	r3, [r7, #23]
 800eb02:	005b      	lsls	r3, r3, #1
 800eb04:	3301      	adds	r3, #1
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	4413      	add	r3, r2
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < len; idx++) {
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	3301      	adds	r3, #1
 800eb12:	75fb      	strb	r3, [r7, #23]
 800eb14:	7dfa      	ldrb	r2, [r7, #23]
 800eb16:	79fb      	ldrb	r3, [r7, #7]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d3d3      	bcc.n	800eac4 <IntToUnicode+0x18>
    }
}
 800eb1c:	bf00      	nop
 800eb1e:	bf00      	nop
 800eb20:	371c      	adds	r7, #28
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr
	...

0800eb2c <HAL_PCD_MspInit>:
/*******************************************************************************
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef * pcdHandle) {
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b08a      	sub	sp, #40	; 0x28
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb34:	f107 0314 	add.w	r3, r7, #20
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
 800eb3c:	605a      	str	r2, [r3, #4]
 800eb3e:	609a      	str	r2, [r3, #8]
 800eb40:	60da      	str	r2, [r3, #12]
 800eb42:	611a      	str	r2, [r3, #16]
    if (pcdHandle->Instance == USB_OTG_FS) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb4c:	d13a      	bne.n	800ebc4 <HAL_PCD_MspInit+0x98>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

        /* USER CODE END USB_OTG_FS_MspInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb4e:	2300      	movs	r3, #0
 800eb50:	613b      	str	r3, [r7, #16]
 800eb52:	4b1e      	ldr	r3, [pc, #120]	; (800ebcc <HAL_PCD_MspInit+0xa0>)
 800eb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb56:	4a1d      	ldr	r2, [pc, #116]	; (800ebcc <HAL_PCD_MspInit+0xa0>)
 800eb58:	f043 0301 	orr.w	r3, r3, #1
 800eb5c:	6313      	str	r3, [r2, #48]	; 0x30
 800eb5e:	4b1b      	ldr	r3, [pc, #108]	; (800ebcc <HAL_PCD_MspInit+0xa0>)
 800eb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb62:	f003 0301 	and.w	r3, r3, #1
 800eb66:	613b      	str	r3, [r7, #16]
 800eb68:	693b      	ldr	r3, [r7, #16]
        /**USB_OTG_FS GPIO Configuration
        PA11     ------> USB_OTG_FS_DM
        PA12     ------> USB_OTG_FS_DP
        */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800eb6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eb6e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb70:	2302      	movs	r3, #2
 800eb72:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb74:	2300      	movs	r3, #0
 800eb76:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eb7c:	230a      	movs	r3, #10
 800eb7e:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb80:	f107 0314 	add.w	r3, r7, #20
 800eb84:	4619      	mov	r1, r3
 800eb86:	4812      	ldr	r0, [pc, #72]	; (800ebd0 <HAL_PCD_MspInit+0xa4>)
 800eb88:	f7f5 fb1a 	bl	80041c0 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eb8c:	4b0f      	ldr	r3, [pc, #60]	; (800ebcc <HAL_PCD_MspInit+0xa0>)
 800eb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb90:	4a0e      	ldr	r2, [pc, #56]	; (800ebcc <HAL_PCD_MspInit+0xa0>)
 800eb92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb96:	6353      	str	r3, [r2, #52]	; 0x34
 800eb98:	2300      	movs	r3, #0
 800eb9a:	60fb      	str	r3, [r7, #12]
 800eb9c:	4b0b      	ldr	r3, [pc, #44]	; (800ebcc <HAL_PCD_MspInit+0xa0>)
 800eb9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eba0:	4a0a      	ldr	r2, [pc, #40]	; (800ebcc <HAL_PCD_MspInit+0xa0>)
 800eba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eba6:	6453      	str	r3, [r2, #68]	; 0x44
 800eba8:	4b08      	ldr	r3, [pc, #32]	; (800ebcc <HAL_PCD_MspInit+0xa0>)
 800ebaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebb0:	60fb      	str	r3, [r7, #12]
 800ebb2:	68fb      	ldr	r3, [r7, #12]

        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	2105      	movs	r1, #5
 800ebb8:	2043      	movs	r0, #67	; 0x43
 800ebba:	f7f5 f8e0 	bl	8003d7e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ebbe:	2043      	movs	r0, #67	; 0x43
 800ebc0:	f7f5 f8f9 	bl	8003db6 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 800ebc4:	bf00      	nop
 800ebc6:	3728      	adds	r7, #40	; 0x28
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	40023800 	.word	0x40023800
 800ebd0:	40020000 	.word	0x40020000

0800ebd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4610      	mov	r0, r2
 800ebec:	f7fb fea9 	bl	800a942 <USBD_LL_SetupStage>
}
 800ebf0:	bf00      	nop
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	460b      	mov	r3, r1
 800ec02:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ec0a:	78fa      	ldrb	r2, [r7, #3]
 800ec0c:	6879      	ldr	r1, [r7, #4]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	4413      	add	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	440b      	add	r3, r1
 800ec18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	78fb      	ldrb	r3, [r7, #3]
 800ec20:	4619      	mov	r1, r3
 800ec22:	f7fb fee3 	bl	800a9ec <USBD_LL_DataOutStage>
}
 800ec26:	bf00      	nop
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b082      	sub	sp, #8
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
 800ec36:	460b      	mov	r3, r1
 800ec38:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ec40:	78fa      	ldrb	r2, [r7, #3]
 800ec42:	6879      	ldr	r1, [r7, #4]
 800ec44:	4613      	mov	r3, r2
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	4413      	add	r3, r2
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	440b      	add	r3, r1
 800ec4e:	334c      	adds	r3, #76	; 0x4c
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	78fb      	ldrb	r3, [r7, #3]
 800ec54:	4619      	mov	r1, r3
 800ec56:	f7fb ff7c 	bl	800ab52 <USBD_LL_DataInStage>
}
 800ec5a:	bf00      	nop
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b082      	sub	sp, #8
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fc f8b0 	bl	800add6 <USBD_LL_SOF>
}
 800ec76:	bf00      	nop
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ec86:	2301      	movs	r3, #1
 800ec88:	73fb      	strb	r3, [r7, #15]

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	2b02      	cmp	r3, #2
 800ec90:	d001      	beq.n	800ec96 <HAL_PCD_ResetCallback+0x18>
        Error_Handler();
 800ec92:	f7f2 ffc3 	bl	8001c1c <Error_Handler>
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec9c:	7bfa      	ldrb	r2, [r7, #15]
 800ec9e:	4611      	mov	r1, r2
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fc f85a 	bl	800ad5a <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7fc f802 	bl	800acb6 <USBD_LL_Reset>
}
 800ecb2:	bf00      	nop
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
	...

0800ecbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fc f855 	bl	800ad7a <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	6812      	ldr	r2, [r2, #0]
 800ecde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ece2:	f043 0301 	orr.w	r3, r3, #1
 800ece6:	6013      	str	r3, [r2, #0]
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6a1b      	ldr	r3, [r3, #32]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d005      	beq.n	800ecfc <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ecf0:	4b04      	ldr	r3, [pc, #16]	; (800ed04 <HAL_PCD_SuspendCallback+0x48>)
 800ecf2:	691b      	ldr	r3, [r3, #16]
 800ecf4:	4a03      	ldr	r2, [pc, #12]	; (800ed04 <HAL_PCD_SuspendCallback+0x48>)
 800ecf6:	f043 0306 	orr.w	r3, r3, #6
 800ecfa:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 800ecfc:	bf00      	nop
 800ecfe:	3708      	adds	r7, #8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	e000ed00 	.word	0xe000ed00

0800ed08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fc f845 	bl	800ada6 <USBD_LL_Resume>
}
 800ed1c:	bf00      	nop
 800ed1e:	3708      	adds	r7, #8
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed36:	78fa      	ldrb	r2, [r7, #3]
 800ed38:	4611      	mov	r1, r2
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fc f89d 	bl	800ae7a <USBD_LL_IsoOUTIncomplete>
}
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed5a:	78fa      	ldrb	r2, [r7, #3]
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fc f859 	bl	800ae16 <USBD_LL_IsoINIncomplete>
}
 800ed64:	bf00      	nop
 800ed66:	3708      	adds	r7, #8
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fc f8af 	bl	800aede <USBD_LL_DevConnected>
}
 800ed80:	bf00      	nop
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fc f8ac 	bl	800aef4 <USBD_LL_DevDisconnected>
}
 800ed9c:	bf00      	nop
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <USBD_LL_Init>:
/**
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev) {
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d13c      	bne.n	800ee2e <USBD_LL_Init+0x8a>
        /* Link the driver to the stack. */
        hpcd_USB_OTG_FS.pData = pdev;
 800edb4:	4a20      	ldr	r2, [pc, #128]	; (800ee38 <USBD_LL_Init+0x94>)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
        pdev->pData = &hpcd_USB_OTG_FS;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4a1e      	ldr	r2, [pc, #120]	; (800ee38 <USBD_LL_Init+0x94>)
 800edc0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800edc4:	4b1c      	ldr	r3, [pc, #112]	; (800ee38 <USBD_LL_Init+0x94>)
 800edc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800edca:	601a      	str	r2, [r3, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800edcc:	4b1a      	ldr	r3, [pc, #104]	; (800ee38 <USBD_LL_Init+0x94>)
 800edce:	2204      	movs	r2, #4
 800edd0:	605a      	str	r2, [r3, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800edd2:	4b19      	ldr	r3, [pc, #100]	; (800ee38 <USBD_LL_Init+0x94>)
 800edd4:	2202      	movs	r2, #2
 800edd6:	60da      	str	r2, [r3, #12]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800edd8:	4b17      	ldr	r3, [pc, #92]	; (800ee38 <USBD_LL_Init+0x94>)
 800edda:	2200      	movs	r2, #0
 800eddc:	611a      	str	r2, [r3, #16]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800edde:	4b16      	ldr	r3, [pc, #88]	; (800ee38 <USBD_LL_Init+0x94>)
 800ede0:	2202      	movs	r2, #2
 800ede2:	619a      	str	r2, [r3, #24]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ede4:	4b14      	ldr	r3, [pc, #80]	; (800ee38 <USBD_LL_Init+0x94>)
 800ede6:	2200      	movs	r2, #0
 800ede8:	61da      	str	r2, [r3, #28]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800edea:	4b13      	ldr	r3, [pc, #76]	; (800ee38 <USBD_LL_Init+0x94>)
 800edec:	2200      	movs	r2, #0
 800edee:	621a      	str	r2, [r3, #32]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800edf0:	4b11      	ldr	r3, [pc, #68]	; (800ee38 <USBD_LL_Init+0x94>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	625a      	str	r2, [r3, #36]	; 0x24
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800edf6:	4b10      	ldr	r3, [pc, #64]	; (800ee38 <USBD_LL_Init+0x94>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	62da      	str	r2, [r3, #44]	; 0x2c
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800edfc:	4b0e      	ldr	r3, [pc, #56]	; (800ee38 <USBD_LL_Init+0x94>)
 800edfe:	2200      	movs	r2, #0
 800ee00:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800ee02:	480d      	ldr	r0, [pc, #52]	; (800ee38 <USBD_LL_Init+0x94>)
 800ee04:	f7f6 fb51 	bl	80054aa <HAL_PCD_Init>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <USBD_LL_Init+0x6e>
            Error_Handler();
 800ee0e:	f7f2 ff05 	bl	8001c1c <Error_Handler>
        HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
        HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
        HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
        HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ee12:	2180      	movs	r1, #128	; 0x80
 800ee14:	4808      	ldr	r0, [pc, #32]	; (800ee38 <USBD_LL_Init+0x94>)
 800ee16:	f7f7 fda8 	bl	800696a <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ee1a:	2240      	movs	r2, #64	; 0x40
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	4806      	ldr	r0, [pc, #24]	; (800ee38 <USBD_LL_Init+0x94>)
 800ee20:	f7f7 fd5c 	bl	80068dc <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ee24:	2280      	movs	r2, #128	; 0x80
 800ee26:	2101      	movs	r1, #1
 800ee28:	4803      	ldr	r0, [pc, #12]	; (800ee38 <USBD_LL_Init+0x94>)
 800ee2a:	f7f7 fd57 	bl	80068dc <HAL_PCDEx_SetTxFiFo>
    }
    return USBD_OK;
 800ee2e:	2300      	movs	r3, #0
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	20001b2c 	.word	0x20001b2c

0800ee3c <USBD_LL_Start>:
/**
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev) {
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800ee44:	2300      	movs	r3, #0
 800ee46:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_Start(pdev->pData);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7f6 fc46 	bl	80056e4 <HAL_PCD_Start>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800ee5c:	7bfb      	ldrb	r3, [r7, #15]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f000 f942 	bl	800f0e8 <USBD_Get_USB_Status>
 800ee64:	4603      	mov	r3, r0
 800ee66:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800ee68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <USBD_LL_OpenEP>:
 * @param  ep_addr: Endpoint number
 * @param  ep_type: Endpoint type
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps) {
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b084      	sub	sp, #16
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
 800ee7a:	4608      	mov	r0, r1
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	461a      	mov	r2, r3
 800ee80:	4603      	mov	r3, r0
 800ee82:	70fb      	strb	r3, [r7, #3]
 800ee84:	460b      	mov	r3, r1
 800ee86:	70bb      	strb	r3, [r7, #2]
 800ee88:	4613      	mov	r3, r2
 800ee8a:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800ee90:	2300      	movs	r3, #0
 800ee92:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee9a:	78bb      	ldrb	r3, [r7, #2]
 800ee9c:	883a      	ldrh	r2, [r7, #0]
 800ee9e:	78f9      	ldrb	r1, [r7, #3]
 800eea0:	f7f7 f917 	bl	80060d2 <HAL_PCD_EP_Open>
 800eea4:	4603      	mov	r3, r0
 800eea6:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f000 f91c 	bl	800f0e8 <USBD_Get_USB_Status>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800eeb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <USBD_LL_CloseEP>:
 * @brief  Closes an endpoint of the low level driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b084      	sub	sp, #16
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
 800eec6:	460b      	mov	r3, r1
 800eec8:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800eeca:	2300      	movs	r3, #0
 800eecc:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800eece:	2300      	movs	r3, #0
 800eed0:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eed8:	78fa      	ldrb	r2, [r7, #3]
 800eeda:	4611      	mov	r1, r2
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f7 f960 	bl	80061a2 <HAL_PCD_EP_Close>
 800eee2:	4603      	mov	r3, r0
 800eee4:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	4618      	mov	r0, r3
 800eeea:	f000 f8fd 	bl	800f0e8 <USBD_Get_USB_Status>
 800eeee:	4603      	mov	r3, r0
 800eef0:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800eef2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3710      	adds	r7, #16
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	460b      	mov	r3, r1
 800ef06:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ef16:	78fa      	ldrb	r2, [r7, #3]
 800ef18:	4611      	mov	r1, r2
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7f7 fa38 	bl	8006390 <HAL_PCD_EP_SetStall>
 800ef20:	4603      	mov	r3, r0
 800ef22:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800ef24:	7bfb      	ldrb	r3, [r7, #15]
 800ef26:	4618      	mov	r0, r3
 800ef28:	f000 f8de 	bl	800f0e8 <USBD_Get_USB_Status>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800ef30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <USBD_LL_ClearStallEP>:
 * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b084      	sub	sp, #16
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
 800ef42:	460b      	mov	r3, r1
 800ef44:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ef54:	78fa      	ldrb	r2, [r7, #3]
 800ef56:	4611      	mov	r1, r2
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7f7 fa7d 	bl	8006458 <HAL_PCD_EP_ClrStall>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800ef62:	7bfb      	ldrb	r3, [r7, #15]
 800ef64:	4618      	mov	r0, r3
 800ef66:	f000 f8bf 	bl	800f0e8 <USBD_Get_USB_Status>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800ef6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ef8a:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80) {
 800ef8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	da0b      	bge.n	800efac <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ef94:	78fb      	ldrb	r3, [r7, #3]
 800ef96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef9a:	68f9      	ldr	r1, [r7, #12]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	00db      	lsls	r3, r3, #3
 800efa0:	4413      	add	r3, r2
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	440b      	add	r3, r1
 800efa6:	333e      	adds	r3, #62	; 0x3e
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	e00b      	b.n	800efc4 <USBD_LL_IsStallEP+0x4c>
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800efac:	78fb      	ldrb	r3, [r7, #3]
 800efae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efb2:	68f9      	ldr	r1, [r7, #12]
 800efb4:	4613      	mov	r3, r2
 800efb6:	00db      	lsls	r3, r3, #3
 800efb8:	4413      	add	r3, r2
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	440b      	add	r3, r1
 800efbe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800efc2:	781b      	ldrb	r3, [r3, #0]
    }
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3714      	adds	r7, #20
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <USBD_LL_SetUSBAddress>:
 * @brief  Assigns a USB address to the device.
 * @param  pdev: Device handle
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev, uint8_t dev_addr) {
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	460b      	mov	r3, r1
 800efda:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800efe0:	2300      	movs	r3, #0
 800efe2:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800efea:	78fa      	ldrb	r2, [r7, #3]
 800efec:	4611      	mov	r1, r2
 800efee:	4618      	mov	r0, r3
 800eff0:	f7f7 f84a 	bl	8006088 <HAL_PCD_SetAddress>
 800eff4:	4603      	mov	r3, r0
 800eff6:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800eff8:	7bfb      	ldrb	r3, [r7, #15]
 800effa:	4618      	mov	r0, r3
 800effc:	f000 f874 	bl	800f0e8 <USBD_Get_USB_Status>
 800f000:	4603      	mov	r3, r0
 800f002:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f004:	7bbb      	ldrb	r3, [r7, #14]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <USBD_LL_Transmit>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 800f00e:	b580      	push	{r7, lr}
 800f010:	b086      	sub	sp, #24
 800f012:	af00      	add	r7, sp, #0
 800f014:	60f8      	str	r0, [r7, #12]
 800f016:	607a      	str	r2, [r7, #4]
 800f018:	603b      	str	r3, [r7, #0]
 800f01a:	460b      	mov	r3, r1
 800f01c:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f01e:	2300      	movs	r3, #0
 800f020:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f022:	2300      	movs	r3, #0
 800f024:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f02c:	7af9      	ldrb	r1, [r7, #11]
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	f7f7 f963 	bl	80062fc <HAL_PCD_EP_Transmit>
 800f036:	4603      	mov	r3, r0
 800f038:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f03a:	7dfb      	ldrb	r3, [r7, #23]
 800f03c:	4618      	mov	r0, r3
 800f03e:	f000 f853 	bl	800f0e8 <USBD_Get_USB_Status>
 800f042:	4603      	mov	r3, r0
 800f044:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 800f046:	7dbb      	ldrb	r3, [r7, #22]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3718      	adds	r7, #24
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <USBD_LL_PrepareReceive>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	607a      	str	r2, [r7, #4]
 800f05a:	603b      	str	r3, [r7, #0]
 800f05c:	460b      	mov	r3, r1
 800f05e:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f064:	2300      	movs	r3, #0
 800f066:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f06e:	7af9      	ldrb	r1, [r7, #11]
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	687a      	ldr	r2, [r7, #4]
 800f074:	f7f7 f8df 	bl	8006236 <HAL_PCD_EP_Receive>
 800f078:	4603      	mov	r3, r0
 800f07a:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f07c:	7dfb      	ldrb	r3, [r7, #23]
 800f07e:	4618      	mov	r0, r3
 800f080:	f000 f832 	bl	800f0e8 <USBD_Get_USB_Status>
 800f084:	4603      	mov	r3, r0
 800f086:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 800f088:	7dbb      	ldrb	r3, [r7, #22]
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3718      	adds	r7, #24
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}

0800f092 <USBD_LL_GetRxDataSize>:
 * @brief  Returns the last transferred packet size.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 800f092:	b580      	push	{r7, lr}
 800f094:	b082      	sub	sp, #8
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
 800f09a:	460b      	mov	r3, r1
 800f09c:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0a4:	78fa      	ldrb	r2, [r7, #3]
 800f0a6:	4611      	mov	r1, r2
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7f7 f90f 	bl	80062cc <HAL_PCD_EP_GetRxCount>
 800f0ae:	4603      	mov	r3, r0
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <USBD_static_malloc>:
/**
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void * USBD_static_malloc(uint32_t size) {
 800f0b8:	b480      	push	{r7}
 800f0ba:	b083      	sub	sp, #12
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
    return mem;
 800f0c0:	4b03      	ldr	r3, [pc, #12]	; (800f0d0 <USBD_static_malloc+0x18>)
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	370c      	adds	r7, #12
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	20002038 	.word	0x20002038

0800f0d4 <USBD_static_free>:
/**
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void * p) {
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
}
 800f0dc:	bf00      	nop
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <USBD_Get_USB_Status>:
/**
 * @brief  Returns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
 800f0e8:	b480      	push	{r7}
 800f0ea:	b085      	sub	sp, #20
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	73fb      	strb	r3, [r7, #15]

    switch (hal_status) {
 800f0f6:	79fb      	ldrb	r3, [r7, #7]
 800f0f8:	2b03      	cmp	r3, #3
 800f0fa:	d817      	bhi.n	800f12c <USBD_Get_USB_Status+0x44>
 800f0fc:	a201      	add	r2, pc, #4	; (adr r2, 800f104 <USBD_Get_USB_Status+0x1c>)
 800f0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f102:	bf00      	nop
 800f104:	0800f115 	.word	0x0800f115
 800f108:	0800f11b 	.word	0x0800f11b
 800f10c:	0800f121 	.word	0x0800f121
 800f110:	0800f127 	.word	0x0800f127
    case HAL_OK:
        usb_status = USBD_OK;
 800f114:	2300      	movs	r3, #0
 800f116:	73fb      	strb	r3, [r7, #15]
        break;
 800f118:	e00b      	b.n	800f132 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR:
        usb_status = USBD_FAIL;
 800f11a:	2303      	movs	r3, #3
 800f11c:	73fb      	strb	r3, [r7, #15]
        break;
 800f11e:	e008      	b.n	800f132 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 800f120:	2301      	movs	r3, #1
 800f122:	73fb      	strb	r3, [r7, #15]
        break;
 800f124:	e005      	b.n	800f132 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT:
        usb_status = USBD_FAIL;
 800f126:	2303      	movs	r3, #3
 800f128:	73fb      	strb	r3, [r7, #15]
        break;
 800f12a:	e002      	b.n	800f132 <USBD_Get_USB_Status+0x4a>
    default:
        usb_status = USBD_FAIL;
 800f12c:	2303      	movs	r3, #3
 800f12e:	73fb      	strb	r3, [r7, #15]
        break;
 800f130:	bf00      	nop
    }
    return usb_status;
 800f132:	7bfb      	ldrb	r3, [r7, #15]
}
 800f134:	4618      	mov	r0, r3
 800f136:	3714      	adds	r7, #20
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <malloc>:
 800f140:	4b02      	ldr	r3, [pc, #8]	; (800f14c <malloc+0xc>)
 800f142:	4601      	mov	r1, r0
 800f144:	6818      	ldr	r0, [r3, #0]
 800f146:	f000 b82b 	b.w	800f1a0 <_malloc_r>
 800f14a:	bf00      	nop
 800f14c:	20000178 	.word	0x20000178

0800f150 <free>:
 800f150:	4b02      	ldr	r3, [pc, #8]	; (800f15c <free+0xc>)
 800f152:	4601      	mov	r1, r0
 800f154:	6818      	ldr	r0, [r3, #0]
 800f156:	f001 bd2d 	b.w	8010bb4 <_free_r>
 800f15a:	bf00      	nop
 800f15c:	20000178 	.word	0x20000178

0800f160 <sbrk_aligned>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	4e0e      	ldr	r6, [pc, #56]	; (800f19c <sbrk_aligned+0x3c>)
 800f164:	460c      	mov	r4, r1
 800f166:	6831      	ldr	r1, [r6, #0]
 800f168:	4605      	mov	r5, r0
 800f16a:	b911      	cbnz	r1, 800f172 <sbrk_aligned+0x12>
 800f16c:	f000 fe4c 	bl	800fe08 <_sbrk_r>
 800f170:	6030      	str	r0, [r6, #0]
 800f172:	4621      	mov	r1, r4
 800f174:	4628      	mov	r0, r5
 800f176:	f000 fe47 	bl	800fe08 <_sbrk_r>
 800f17a:	1c43      	adds	r3, r0, #1
 800f17c:	d00a      	beq.n	800f194 <sbrk_aligned+0x34>
 800f17e:	1cc4      	adds	r4, r0, #3
 800f180:	f024 0403 	bic.w	r4, r4, #3
 800f184:	42a0      	cmp	r0, r4
 800f186:	d007      	beq.n	800f198 <sbrk_aligned+0x38>
 800f188:	1a21      	subs	r1, r4, r0
 800f18a:	4628      	mov	r0, r5
 800f18c:	f000 fe3c 	bl	800fe08 <_sbrk_r>
 800f190:	3001      	adds	r0, #1
 800f192:	d101      	bne.n	800f198 <sbrk_aligned+0x38>
 800f194:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f198:	4620      	mov	r0, r4
 800f19a:	bd70      	pop	{r4, r5, r6, pc}
 800f19c:	2000225c 	.word	0x2000225c

0800f1a0 <_malloc_r>:
 800f1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a4:	1ccd      	adds	r5, r1, #3
 800f1a6:	f025 0503 	bic.w	r5, r5, #3
 800f1aa:	3508      	adds	r5, #8
 800f1ac:	2d0c      	cmp	r5, #12
 800f1ae:	bf38      	it	cc
 800f1b0:	250c      	movcc	r5, #12
 800f1b2:	2d00      	cmp	r5, #0
 800f1b4:	4607      	mov	r7, r0
 800f1b6:	db01      	blt.n	800f1bc <_malloc_r+0x1c>
 800f1b8:	42a9      	cmp	r1, r5
 800f1ba:	d905      	bls.n	800f1c8 <_malloc_r+0x28>
 800f1bc:	230c      	movs	r3, #12
 800f1be:	603b      	str	r3, [r7, #0]
 800f1c0:	2600      	movs	r6, #0
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f29c <_malloc_r+0xfc>
 800f1cc:	f000 f868 	bl	800f2a0 <__malloc_lock>
 800f1d0:	f8d8 3000 	ldr.w	r3, [r8]
 800f1d4:	461c      	mov	r4, r3
 800f1d6:	bb5c      	cbnz	r4, 800f230 <_malloc_r+0x90>
 800f1d8:	4629      	mov	r1, r5
 800f1da:	4638      	mov	r0, r7
 800f1dc:	f7ff ffc0 	bl	800f160 <sbrk_aligned>
 800f1e0:	1c43      	adds	r3, r0, #1
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	d155      	bne.n	800f292 <_malloc_r+0xf2>
 800f1e6:	f8d8 4000 	ldr.w	r4, [r8]
 800f1ea:	4626      	mov	r6, r4
 800f1ec:	2e00      	cmp	r6, #0
 800f1ee:	d145      	bne.n	800f27c <_malloc_r+0xdc>
 800f1f0:	2c00      	cmp	r4, #0
 800f1f2:	d048      	beq.n	800f286 <_malloc_r+0xe6>
 800f1f4:	6823      	ldr	r3, [r4, #0]
 800f1f6:	4631      	mov	r1, r6
 800f1f8:	4638      	mov	r0, r7
 800f1fa:	eb04 0903 	add.w	r9, r4, r3
 800f1fe:	f000 fe03 	bl	800fe08 <_sbrk_r>
 800f202:	4581      	cmp	r9, r0
 800f204:	d13f      	bne.n	800f286 <_malloc_r+0xe6>
 800f206:	6821      	ldr	r1, [r4, #0]
 800f208:	1a6d      	subs	r5, r5, r1
 800f20a:	4629      	mov	r1, r5
 800f20c:	4638      	mov	r0, r7
 800f20e:	f7ff ffa7 	bl	800f160 <sbrk_aligned>
 800f212:	3001      	adds	r0, #1
 800f214:	d037      	beq.n	800f286 <_malloc_r+0xe6>
 800f216:	6823      	ldr	r3, [r4, #0]
 800f218:	442b      	add	r3, r5
 800f21a:	6023      	str	r3, [r4, #0]
 800f21c:	f8d8 3000 	ldr.w	r3, [r8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d038      	beq.n	800f296 <_malloc_r+0xf6>
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	42a2      	cmp	r2, r4
 800f228:	d12b      	bne.n	800f282 <_malloc_r+0xe2>
 800f22a:	2200      	movs	r2, #0
 800f22c:	605a      	str	r2, [r3, #4]
 800f22e:	e00f      	b.n	800f250 <_malloc_r+0xb0>
 800f230:	6822      	ldr	r2, [r4, #0]
 800f232:	1b52      	subs	r2, r2, r5
 800f234:	d41f      	bmi.n	800f276 <_malloc_r+0xd6>
 800f236:	2a0b      	cmp	r2, #11
 800f238:	d917      	bls.n	800f26a <_malloc_r+0xca>
 800f23a:	1961      	adds	r1, r4, r5
 800f23c:	42a3      	cmp	r3, r4
 800f23e:	6025      	str	r5, [r4, #0]
 800f240:	bf18      	it	ne
 800f242:	6059      	strne	r1, [r3, #4]
 800f244:	6863      	ldr	r3, [r4, #4]
 800f246:	bf08      	it	eq
 800f248:	f8c8 1000 	streq.w	r1, [r8]
 800f24c:	5162      	str	r2, [r4, r5]
 800f24e:	604b      	str	r3, [r1, #4]
 800f250:	4638      	mov	r0, r7
 800f252:	f104 060b 	add.w	r6, r4, #11
 800f256:	f000 f829 	bl	800f2ac <__malloc_unlock>
 800f25a:	f026 0607 	bic.w	r6, r6, #7
 800f25e:	1d23      	adds	r3, r4, #4
 800f260:	1af2      	subs	r2, r6, r3
 800f262:	d0ae      	beq.n	800f1c2 <_malloc_r+0x22>
 800f264:	1b9b      	subs	r3, r3, r6
 800f266:	50a3      	str	r3, [r4, r2]
 800f268:	e7ab      	b.n	800f1c2 <_malloc_r+0x22>
 800f26a:	42a3      	cmp	r3, r4
 800f26c:	6862      	ldr	r2, [r4, #4]
 800f26e:	d1dd      	bne.n	800f22c <_malloc_r+0x8c>
 800f270:	f8c8 2000 	str.w	r2, [r8]
 800f274:	e7ec      	b.n	800f250 <_malloc_r+0xb0>
 800f276:	4623      	mov	r3, r4
 800f278:	6864      	ldr	r4, [r4, #4]
 800f27a:	e7ac      	b.n	800f1d6 <_malloc_r+0x36>
 800f27c:	4634      	mov	r4, r6
 800f27e:	6876      	ldr	r6, [r6, #4]
 800f280:	e7b4      	b.n	800f1ec <_malloc_r+0x4c>
 800f282:	4613      	mov	r3, r2
 800f284:	e7cc      	b.n	800f220 <_malloc_r+0x80>
 800f286:	230c      	movs	r3, #12
 800f288:	603b      	str	r3, [r7, #0]
 800f28a:	4638      	mov	r0, r7
 800f28c:	f000 f80e 	bl	800f2ac <__malloc_unlock>
 800f290:	e797      	b.n	800f1c2 <_malloc_r+0x22>
 800f292:	6025      	str	r5, [r4, #0]
 800f294:	e7dc      	b.n	800f250 <_malloc_r+0xb0>
 800f296:	605b      	str	r3, [r3, #4]
 800f298:	deff      	udf	#255	; 0xff
 800f29a:	bf00      	nop
 800f29c:	20002258 	.word	0x20002258

0800f2a0 <__malloc_lock>:
 800f2a0:	4801      	ldr	r0, [pc, #4]	; (800f2a8 <__malloc_lock+0x8>)
 800f2a2:	f000 bdfd 	b.w	800fea0 <__retarget_lock_acquire_recursive>
 800f2a6:	bf00      	nop
 800f2a8:	200023a0 	.word	0x200023a0

0800f2ac <__malloc_unlock>:
 800f2ac:	4801      	ldr	r0, [pc, #4]	; (800f2b4 <__malloc_unlock+0x8>)
 800f2ae:	f000 bdf8 	b.w	800fea2 <__retarget_lock_release_recursive>
 800f2b2:	bf00      	nop
 800f2b4:	200023a0 	.word	0x200023a0

0800f2b8 <__cvt>:
 800f2b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2bc:	ec55 4b10 	vmov	r4, r5, d0
 800f2c0:	2d00      	cmp	r5, #0
 800f2c2:	460e      	mov	r6, r1
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	462b      	mov	r3, r5
 800f2c8:	bfbb      	ittet	lt
 800f2ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f2ce:	461d      	movlt	r5, r3
 800f2d0:	2300      	movge	r3, #0
 800f2d2:	232d      	movlt	r3, #45	; 0x2d
 800f2d4:	700b      	strb	r3, [r1, #0]
 800f2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f2dc:	4691      	mov	r9, r2
 800f2de:	f023 0820 	bic.w	r8, r3, #32
 800f2e2:	bfbc      	itt	lt
 800f2e4:	4622      	movlt	r2, r4
 800f2e6:	4614      	movlt	r4, r2
 800f2e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f2ec:	d005      	beq.n	800f2fa <__cvt+0x42>
 800f2ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f2f2:	d100      	bne.n	800f2f6 <__cvt+0x3e>
 800f2f4:	3601      	adds	r6, #1
 800f2f6:	2102      	movs	r1, #2
 800f2f8:	e000      	b.n	800f2fc <__cvt+0x44>
 800f2fa:	2103      	movs	r1, #3
 800f2fc:	ab03      	add	r3, sp, #12
 800f2fe:	9301      	str	r3, [sp, #4]
 800f300:	ab02      	add	r3, sp, #8
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	ec45 4b10 	vmov	d0, r4, r5
 800f308:	4653      	mov	r3, sl
 800f30a:	4632      	mov	r2, r6
 800f30c:	f000 fe60 	bl	800ffd0 <_dtoa_r>
 800f310:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f314:	4607      	mov	r7, r0
 800f316:	d102      	bne.n	800f31e <__cvt+0x66>
 800f318:	f019 0f01 	tst.w	r9, #1
 800f31c:	d022      	beq.n	800f364 <__cvt+0xac>
 800f31e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f322:	eb07 0906 	add.w	r9, r7, r6
 800f326:	d110      	bne.n	800f34a <__cvt+0x92>
 800f328:	783b      	ldrb	r3, [r7, #0]
 800f32a:	2b30      	cmp	r3, #48	; 0x30
 800f32c:	d10a      	bne.n	800f344 <__cvt+0x8c>
 800f32e:	2200      	movs	r2, #0
 800f330:	2300      	movs	r3, #0
 800f332:	4620      	mov	r0, r4
 800f334:	4629      	mov	r1, r5
 800f336:	f7f1 fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800f33a:	b918      	cbnz	r0, 800f344 <__cvt+0x8c>
 800f33c:	f1c6 0601 	rsb	r6, r6, #1
 800f340:	f8ca 6000 	str.w	r6, [sl]
 800f344:	f8da 3000 	ldr.w	r3, [sl]
 800f348:	4499      	add	r9, r3
 800f34a:	2200      	movs	r2, #0
 800f34c:	2300      	movs	r3, #0
 800f34e:	4620      	mov	r0, r4
 800f350:	4629      	mov	r1, r5
 800f352:	f7f1 fbc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800f356:	b108      	cbz	r0, 800f35c <__cvt+0xa4>
 800f358:	f8cd 900c 	str.w	r9, [sp, #12]
 800f35c:	2230      	movs	r2, #48	; 0x30
 800f35e:	9b03      	ldr	r3, [sp, #12]
 800f360:	454b      	cmp	r3, r9
 800f362:	d307      	bcc.n	800f374 <__cvt+0xbc>
 800f364:	9b03      	ldr	r3, [sp, #12]
 800f366:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f368:	1bdb      	subs	r3, r3, r7
 800f36a:	4638      	mov	r0, r7
 800f36c:	6013      	str	r3, [r2, #0]
 800f36e:	b004      	add	sp, #16
 800f370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f374:	1c59      	adds	r1, r3, #1
 800f376:	9103      	str	r1, [sp, #12]
 800f378:	701a      	strb	r2, [r3, #0]
 800f37a:	e7f0      	b.n	800f35e <__cvt+0xa6>

0800f37c <__exponent>:
 800f37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f37e:	4603      	mov	r3, r0
 800f380:	2900      	cmp	r1, #0
 800f382:	bfb8      	it	lt
 800f384:	4249      	neglt	r1, r1
 800f386:	f803 2b02 	strb.w	r2, [r3], #2
 800f38a:	bfb4      	ite	lt
 800f38c:	222d      	movlt	r2, #45	; 0x2d
 800f38e:	222b      	movge	r2, #43	; 0x2b
 800f390:	2909      	cmp	r1, #9
 800f392:	7042      	strb	r2, [r0, #1]
 800f394:	dd2a      	ble.n	800f3ec <__exponent+0x70>
 800f396:	f10d 0207 	add.w	r2, sp, #7
 800f39a:	4617      	mov	r7, r2
 800f39c:	260a      	movs	r6, #10
 800f39e:	4694      	mov	ip, r2
 800f3a0:	fb91 f5f6 	sdiv	r5, r1, r6
 800f3a4:	fb06 1415 	mls	r4, r6, r5, r1
 800f3a8:	3430      	adds	r4, #48	; 0x30
 800f3aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f3ae:	460c      	mov	r4, r1
 800f3b0:	2c63      	cmp	r4, #99	; 0x63
 800f3b2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	dcf1      	bgt.n	800f39e <__exponent+0x22>
 800f3ba:	3130      	adds	r1, #48	; 0x30
 800f3bc:	f1ac 0402 	sub.w	r4, ip, #2
 800f3c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f3c4:	1c41      	adds	r1, r0, #1
 800f3c6:	4622      	mov	r2, r4
 800f3c8:	42ba      	cmp	r2, r7
 800f3ca:	d30a      	bcc.n	800f3e2 <__exponent+0x66>
 800f3cc:	f10d 0209 	add.w	r2, sp, #9
 800f3d0:	eba2 020c 	sub.w	r2, r2, ip
 800f3d4:	42bc      	cmp	r4, r7
 800f3d6:	bf88      	it	hi
 800f3d8:	2200      	movhi	r2, #0
 800f3da:	4413      	add	r3, r2
 800f3dc:	1a18      	subs	r0, r3, r0
 800f3de:	b003      	add	sp, #12
 800f3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f3e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f3ea:	e7ed      	b.n	800f3c8 <__exponent+0x4c>
 800f3ec:	2330      	movs	r3, #48	; 0x30
 800f3ee:	3130      	adds	r1, #48	; 0x30
 800f3f0:	7083      	strb	r3, [r0, #2]
 800f3f2:	70c1      	strb	r1, [r0, #3]
 800f3f4:	1d03      	adds	r3, r0, #4
 800f3f6:	e7f1      	b.n	800f3dc <__exponent+0x60>

0800f3f8 <_printf_float>:
 800f3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3fc:	ed2d 8b02 	vpush	{d8}
 800f400:	b08d      	sub	sp, #52	; 0x34
 800f402:	460c      	mov	r4, r1
 800f404:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f408:	4616      	mov	r6, r2
 800f40a:	461f      	mov	r7, r3
 800f40c:	4605      	mov	r5, r0
 800f40e:	f000 fcc3 	bl	800fd98 <_localeconv_r>
 800f412:	f8d0 a000 	ldr.w	sl, [r0]
 800f416:	4650      	mov	r0, sl
 800f418:	f7f0 ff32 	bl	8000280 <strlen>
 800f41c:	2300      	movs	r3, #0
 800f41e:	930a      	str	r3, [sp, #40]	; 0x28
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	9305      	str	r3, [sp, #20]
 800f424:	f8d8 3000 	ldr.w	r3, [r8]
 800f428:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f42c:	3307      	adds	r3, #7
 800f42e:	f023 0307 	bic.w	r3, r3, #7
 800f432:	f103 0208 	add.w	r2, r3, #8
 800f436:	f8c8 2000 	str.w	r2, [r8]
 800f43a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f43e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f442:	9307      	str	r3, [sp, #28]
 800f444:	f8cd 8018 	str.w	r8, [sp, #24]
 800f448:	ee08 0a10 	vmov	s16, r0
 800f44c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f454:	4b9e      	ldr	r3, [pc, #632]	; (800f6d0 <_printf_float+0x2d8>)
 800f456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f45a:	f7f1 fb6f 	bl	8000b3c <__aeabi_dcmpun>
 800f45e:	bb88      	cbnz	r0, 800f4c4 <_printf_float+0xcc>
 800f460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f464:	4b9a      	ldr	r3, [pc, #616]	; (800f6d0 <_printf_float+0x2d8>)
 800f466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f46a:	f7f1 fb49 	bl	8000b00 <__aeabi_dcmple>
 800f46e:	bb48      	cbnz	r0, 800f4c4 <_printf_float+0xcc>
 800f470:	2200      	movs	r2, #0
 800f472:	2300      	movs	r3, #0
 800f474:	4640      	mov	r0, r8
 800f476:	4649      	mov	r1, r9
 800f478:	f7f1 fb38 	bl	8000aec <__aeabi_dcmplt>
 800f47c:	b110      	cbz	r0, 800f484 <_printf_float+0x8c>
 800f47e:	232d      	movs	r3, #45	; 0x2d
 800f480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f484:	4a93      	ldr	r2, [pc, #588]	; (800f6d4 <_printf_float+0x2dc>)
 800f486:	4b94      	ldr	r3, [pc, #592]	; (800f6d8 <_printf_float+0x2e0>)
 800f488:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f48c:	bf94      	ite	ls
 800f48e:	4690      	movls	r8, r2
 800f490:	4698      	movhi	r8, r3
 800f492:	2303      	movs	r3, #3
 800f494:	6123      	str	r3, [r4, #16]
 800f496:	9b05      	ldr	r3, [sp, #20]
 800f498:	f023 0304 	bic.w	r3, r3, #4
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	f04f 0900 	mov.w	r9, #0
 800f4a2:	9700      	str	r7, [sp, #0]
 800f4a4:	4633      	mov	r3, r6
 800f4a6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	f000 f9da 	bl	800f864 <_printf_common>
 800f4b0:	3001      	adds	r0, #1
 800f4b2:	f040 8090 	bne.w	800f5d6 <_printf_float+0x1de>
 800f4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4ba:	b00d      	add	sp, #52	; 0x34
 800f4bc:	ecbd 8b02 	vpop	{d8}
 800f4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4c4:	4642      	mov	r2, r8
 800f4c6:	464b      	mov	r3, r9
 800f4c8:	4640      	mov	r0, r8
 800f4ca:	4649      	mov	r1, r9
 800f4cc:	f7f1 fb36 	bl	8000b3c <__aeabi_dcmpun>
 800f4d0:	b140      	cbz	r0, 800f4e4 <_printf_float+0xec>
 800f4d2:	464b      	mov	r3, r9
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	bfbc      	itt	lt
 800f4d8:	232d      	movlt	r3, #45	; 0x2d
 800f4da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f4de:	4a7f      	ldr	r2, [pc, #508]	; (800f6dc <_printf_float+0x2e4>)
 800f4e0:	4b7f      	ldr	r3, [pc, #508]	; (800f6e0 <_printf_float+0x2e8>)
 800f4e2:	e7d1      	b.n	800f488 <_printf_float+0x90>
 800f4e4:	6863      	ldr	r3, [r4, #4]
 800f4e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f4ea:	9206      	str	r2, [sp, #24]
 800f4ec:	1c5a      	adds	r2, r3, #1
 800f4ee:	d13f      	bne.n	800f570 <_printf_float+0x178>
 800f4f0:	2306      	movs	r3, #6
 800f4f2:	6063      	str	r3, [r4, #4]
 800f4f4:	9b05      	ldr	r3, [sp, #20]
 800f4f6:	6861      	ldr	r1, [r4, #4]
 800f4f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	9303      	str	r3, [sp, #12]
 800f500:	ab0a      	add	r3, sp, #40	; 0x28
 800f502:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f506:	ab09      	add	r3, sp, #36	; 0x24
 800f508:	ec49 8b10 	vmov	d0, r8, r9
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	6022      	str	r2, [r4, #0]
 800f510:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f514:	4628      	mov	r0, r5
 800f516:	f7ff fecf 	bl	800f2b8 <__cvt>
 800f51a:	9b06      	ldr	r3, [sp, #24]
 800f51c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f51e:	2b47      	cmp	r3, #71	; 0x47
 800f520:	4680      	mov	r8, r0
 800f522:	d108      	bne.n	800f536 <_printf_float+0x13e>
 800f524:	1cc8      	adds	r0, r1, #3
 800f526:	db02      	blt.n	800f52e <_printf_float+0x136>
 800f528:	6863      	ldr	r3, [r4, #4]
 800f52a:	4299      	cmp	r1, r3
 800f52c:	dd41      	ble.n	800f5b2 <_printf_float+0x1ba>
 800f52e:	f1ab 0302 	sub.w	r3, fp, #2
 800f532:	fa5f fb83 	uxtb.w	fp, r3
 800f536:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f53a:	d820      	bhi.n	800f57e <_printf_float+0x186>
 800f53c:	3901      	subs	r1, #1
 800f53e:	465a      	mov	r2, fp
 800f540:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f544:	9109      	str	r1, [sp, #36]	; 0x24
 800f546:	f7ff ff19 	bl	800f37c <__exponent>
 800f54a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f54c:	1813      	adds	r3, r2, r0
 800f54e:	2a01      	cmp	r2, #1
 800f550:	4681      	mov	r9, r0
 800f552:	6123      	str	r3, [r4, #16]
 800f554:	dc02      	bgt.n	800f55c <_printf_float+0x164>
 800f556:	6822      	ldr	r2, [r4, #0]
 800f558:	07d2      	lsls	r2, r2, #31
 800f55a:	d501      	bpl.n	800f560 <_printf_float+0x168>
 800f55c:	3301      	adds	r3, #1
 800f55e:	6123      	str	r3, [r4, #16]
 800f560:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f564:	2b00      	cmp	r3, #0
 800f566:	d09c      	beq.n	800f4a2 <_printf_float+0xaa>
 800f568:	232d      	movs	r3, #45	; 0x2d
 800f56a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f56e:	e798      	b.n	800f4a2 <_printf_float+0xaa>
 800f570:	9a06      	ldr	r2, [sp, #24]
 800f572:	2a47      	cmp	r2, #71	; 0x47
 800f574:	d1be      	bne.n	800f4f4 <_printf_float+0xfc>
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1bc      	bne.n	800f4f4 <_printf_float+0xfc>
 800f57a:	2301      	movs	r3, #1
 800f57c:	e7b9      	b.n	800f4f2 <_printf_float+0xfa>
 800f57e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f582:	d118      	bne.n	800f5b6 <_printf_float+0x1be>
 800f584:	2900      	cmp	r1, #0
 800f586:	6863      	ldr	r3, [r4, #4]
 800f588:	dd0b      	ble.n	800f5a2 <_printf_float+0x1aa>
 800f58a:	6121      	str	r1, [r4, #16]
 800f58c:	b913      	cbnz	r3, 800f594 <_printf_float+0x19c>
 800f58e:	6822      	ldr	r2, [r4, #0]
 800f590:	07d0      	lsls	r0, r2, #31
 800f592:	d502      	bpl.n	800f59a <_printf_float+0x1a2>
 800f594:	3301      	adds	r3, #1
 800f596:	440b      	add	r3, r1
 800f598:	6123      	str	r3, [r4, #16]
 800f59a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f59c:	f04f 0900 	mov.w	r9, #0
 800f5a0:	e7de      	b.n	800f560 <_printf_float+0x168>
 800f5a2:	b913      	cbnz	r3, 800f5aa <_printf_float+0x1b2>
 800f5a4:	6822      	ldr	r2, [r4, #0]
 800f5a6:	07d2      	lsls	r2, r2, #31
 800f5a8:	d501      	bpl.n	800f5ae <_printf_float+0x1b6>
 800f5aa:	3302      	adds	r3, #2
 800f5ac:	e7f4      	b.n	800f598 <_printf_float+0x1a0>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e7f2      	b.n	800f598 <_printf_float+0x1a0>
 800f5b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5b8:	4299      	cmp	r1, r3
 800f5ba:	db05      	blt.n	800f5c8 <_printf_float+0x1d0>
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	6121      	str	r1, [r4, #16]
 800f5c0:	07d8      	lsls	r0, r3, #31
 800f5c2:	d5ea      	bpl.n	800f59a <_printf_float+0x1a2>
 800f5c4:	1c4b      	adds	r3, r1, #1
 800f5c6:	e7e7      	b.n	800f598 <_printf_float+0x1a0>
 800f5c8:	2900      	cmp	r1, #0
 800f5ca:	bfd4      	ite	le
 800f5cc:	f1c1 0202 	rsble	r2, r1, #2
 800f5d0:	2201      	movgt	r2, #1
 800f5d2:	4413      	add	r3, r2
 800f5d4:	e7e0      	b.n	800f598 <_printf_float+0x1a0>
 800f5d6:	6823      	ldr	r3, [r4, #0]
 800f5d8:	055a      	lsls	r2, r3, #21
 800f5da:	d407      	bmi.n	800f5ec <_printf_float+0x1f4>
 800f5dc:	6923      	ldr	r3, [r4, #16]
 800f5de:	4642      	mov	r2, r8
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	4628      	mov	r0, r5
 800f5e4:	47b8      	blx	r7
 800f5e6:	3001      	adds	r0, #1
 800f5e8:	d12c      	bne.n	800f644 <_printf_float+0x24c>
 800f5ea:	e764      	b.n	800f4b6 <_printf_float+0xbe>
 800f5ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f5f0:	f240 80e0 	bls.w	800f7b4 <_printf_float+0x3bc>
 800f5f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	f7f1 fa6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800f600:	2800      	cmp	r0, #0
 800f602:	d034      	beq.n	800f66e <_printf_float+0x276>
 800f604:	4a37      	ldr	r2, [pc, #220]	; (800f6e4 <_printf_float+0x2ec>)
 800f606:	2301      	movs	r3, #1
 800f608:	4631      	mov	r1, r6
 800f60a:	4628      	mov	r0, r5
 800f60c:	47b8      	blx	r7
 800f60e:	3001      	adds	r0, #1
 800f610:	f43f af51 	beq.w	800f4b6 <_printf_float+0xbe>
 800f614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f618:	429a      	cmp	r2, r3
 800f61a:	db02      	blt.n	800f622 <_printf_float+0x22a>
 800f61c:	6823      	ldr	r3, [r4, #0]
 800f61e:	07d8      	lsls	r0, r3, #31
 800f620:	d510      	bpl.n	800f644 <_printf_float+0x24c>
 800f622:	ee18 3a10 	vmov	r3, s16
 800f626:	4652      	mov	r2, sl
 800f628:	4631      	mov	r1, r6
 800f62a:	4628      	mov	r0, r5
 800f62c:	47b8      	blx	r7
 800f62e:	3001      	adds	r0, #1
 800f630:	f43f af41 	beq.w	800f4b6 <_printf_float+0xbe>
 800f634:	f04f 0800 	mov.w	r8, #0
 800f638:	f104 091a 	add.w	r9, r4, #26
 800f63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f63e:	3b01      	subs	r3, #1
 800f640:	4543      	cmp	r3, r8
 800f642:	dc09      	bgt.n	800f658 <_printf_float+0x260>
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	079b      	lsls	r3, r3, #30
 800f648:	f100 8107 	bmi.w	800f85a <_printf_float+0x462>
 800f64c:	68e0      	ldr	r0, [r4, #12]
 800f64e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f650:	4298      	cmp	r0, r3
 800f652:	bfb8      	it	lt
 800f654:	4618      	movlt	r0, r3
 800f656:	e730      	b.n	800f4ba <_printf_float+0xc2>
 800f658:	2301      	movs	r3, #1
 800f65a:	464a      	mov	r2, r9
 800f65c:	4631      	mov	r1, r6
 800f65e:	4628      	mov	r0, r5
 800f660:	47b8      	blx	r7
 800f662:	3001      	adds	r0, #1
 800f664:	f43f af27 	beq.w	800f4b6 <_printf_float+0xbe>
 800f668:	f108 0801 	add.w	r8, r8, #1
 800f66c:	e7e6      	b.n	800f63c <_printf_float+0x244>
 800f66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f670:	2b00      	cmp	r3, #0
 800f672:	dc39      	bgt.n	800f6e8 <_printf_float+0x2f0>
 800f674:	4a1b      	ldr	r2, [pc, #108]	; (800f6e4 <_printf_float+0x2ec>)
 800f676:	2301      	movs	r3, #1
 800f678:	4631      	mov	r1, r6
 800f67a:	4628      	mov	r0, r5
 800f67c:	47b8      	blx	r7
 800f67e:	3001      	adds	r0, #1
 800f680:	f43f af19 	beq.w	800f4b6 <_printf_float+0xbe>
 800f684:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f688:	4313      	orrs	r3, r2
 800f68a:	d102      	bne.n	800f692 <_printf_float+0x29a>
 800f68c:	6823      	ldr	r3, [r4, #0]
 800f68e:	07d9      	lsls	r1, r3, #31
 800f690:	d5d8      	bpl.n	800f644 <_printf_float+0x24c>
 800f692:	ee18 3a10 	vmov	r3, s16
 800f696:	4652      	mov	r2, sl
 800f698:	4631      	mov	r1, r6
 800f69a:	4628      	mov	r0, r5
 800f69c:	47b8      	blx	r7
 800f69e:	3001      	adds	r0, #1
 800f6a0:	f43f af09 	beq.w	800f4b6 <_printf_float+0xbe>
 800f6a4:	f04f 0900 	mov.w	r9, #0
 800f6a8:	f104 0a1a 	add.w	sl, r4, #26
 800f6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ae:	425b      	negs	r3, r3
 800f6b0:	454b      	cmp	r3, r9
 800f6b2:	dc01      	bgt.n	800f6b8 <_printf_float+0x2c0>
 800f6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6b6:	e792      	b.n	800f5de <_printf_float+0x1e6>
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	4652      	mov	r2, sl
 800f6bc:	4631      	mov	r1, r6
 800f6be:	4628      	mov	r0, r5
 800f6c0:	47b8      	blx	r7
 800f6c2:	3001      	adds	r0, #1
 800f6c4:	f43f aef7 	beq.w	800f4b6 <_printf_float+0xbe>
 800f6c8:	f109 0901 	add.w	r9, r9, #1
 800f6cc:	e7ee      	b.n	800f6ac <_printf_float+0x2b4>
 800f6ce:	bf00      	nop
 800f6d0:	7fefffff 	.word	0x7fefffff
 800f6d4:	080121dc 	.word	0x080121dc
 800f6d8:	080121e0 	.word	0x080121e0
 800f6dc:	080121e4 	.word	0x080121e4
 800f6e0:	080121e8 	.word	0x080121e8
 800f6e4:	080121ec 	.word	0x080121ec
 800f6e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	bfa8      	it	ge
 800f6f0:	461a      	movge	r2, r3
 800f6f2:	2a00      	cmp	r2, #0
 800f6f4:	4691      	mov	r9, r2
 800f6f6:	dc37      	bgt.n	800f768 <_printf_float+0x370>
 800f6f8:	f04f 0b00 	mov.w	fp, #0
 800f6fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f700:	f104 021a 	add.w	r2, r4, #26
 800f704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f706:	9305      	str	r3, [sp, #20]
 800f708:	eba3 0309 	sub.w	r3, r3, r9
 800f70c:	455b      	cmp	r3, fp
 800f70e:	dc33      	bgt.n	800f778 <_printf_float+0x380>
 800f710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f714:	429a      	cmp	r2, r3
 800f716:	db3b      	blt.n	800f790 <_printf_float+0x398>
 800f718:	6823      	ldr	r3, [r4, #0]
 800f71a:	07da      	lsls	r2, r3, #31
 800f71c:	d438      	bmi.n	800f790 <_printf_float+0x398>
 800f71e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f722:	eba2 0903 	sub.w	r9, r2, r3
 800f726:	9b05      	ldr	r3, [sp, #20]
 800f728:	1ad2      	subs	r2, r2, r3
 800f72a:	4591      	cmp	r9, r2
 800f72c:	bfa8      	it	ge
 800f72e:	4691      	movge	r9, r2
 800f730:	f1b9 0f00 	cmp.w	r9, #0
 800f734:	dc35      	bgt.n	800f7a2 <_printf_float+0x3aa>
 800f736:	f04f 0800 	mov.w	r8, #0
 800f73a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f73e:	f104 0a1a 	add.w	sl, r4, #26
 800f742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f746:	1a9b      	subs	r3, r3, r2
 800f748:	eba3 0309 	sub.w	r3, r3, r9
 800f74c:	4543      	cmp	r3, r8
 800f74e:	f77f af79 	ble.w	800f644 <_printf_float+0x24c>
 800f752:	2301      	movs	r3, #1
 800f754:	4652      	mov	r2, sl
 800f756:	4631      	mov	r1, r6
 800f758:	4628      	mov	r0, r5
 800f75a:	47b8      	blx	r7
 800f75c:	3001      	adds	r0, #1
 800f75e:	f43f aeaa 	beq.w	800f4b6 <_printf_float+0xbe>
 800f762:	f108 0801 	add.w	r8, r8, #1
 800f766:	e7ec      	b.n	800f742 <_printf_float+0x34a>
 800f768:	4613      	mov	r3, r2
 800f76a:	4631      	mov	r1, r6
 800f76c:	4642      	mov	r2, r8
 800f76e:	4628      	mov	r0, r5
 800f770:	47b8      	blx	r7
 800f772:	3001      	adds	r0, #1
 800f774:	d1c0      	bne.n	800f6f8 <_printf_float+0x300>
 800f776:	e69e      	b.n	800f4b6 <_printf_float+0xbe>
 800f778:	2301      	movs	r3, #1
 800f77a:	4631      	mov	r1, r6
 800f77c:	4628      	mov	r0, r5
 800f77e:	9205      	str	r2, [sp, #20]
 800f780:	47b8      	blx	r7
 800f782:	3001      	adds	r0, #1
 800f784:	f43f ae97 	beq.w	800f4b6 <_printf_float+0xbe>
 800f788:	9a05      	ldr	r2, [sp, #20]
 800f78a:	f10b 0b01 	add.w	fp, fp, #1
 800f78e:	e7b9      	b.n	800f704 <_printf_float+0x30c>
 800f790:	ee18 3a10 	vmov	r3, s16
 800f794:	4652      	mov	r2, sl
 800f796:	4631      	mov	r1, r6
 800f798:	4628      	mov	r0, r5
 800f79a:	47b8      	blx	r7
 800f79c:	3001      	adds	r0, #1
 800f79e:	d1be      	bne.n	800f71e <_printf_float+0x326>
 800f7a0:	e689      	b.n	800f4b6 <_printf_float+0xbe>
 800f7a2:	9a05      	ldr	r2, [sp, #20]
 800f7a4:	464b      	mov	r3, r9
 800f7a6:	4442      	add	r2, r8
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	47b8      	blx	r7
 800f7ae:	3001      	adds	r0, #1
 800f7b0:	d1c1      	bne.n	800f736 <_printf_float+0x33e>
 800f7b2:	e680      	b.n	800f4b6 <_printf_float+0xbe>
 800f7b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7b6:	2a01      	cmp	r2, #1
 800f7b8:	dc01      	bgt.n	800f7be <_printf_float+0x3c6>
 800f7ba:	07db      	lsls	r3, r3, #31
 800f7bc:	d53a      	bpl.n	800f834 <_printf_float+0x43c>
 800f7be:	2301      	movs	r3, #1
 800f7c0:	4642      	mov	r2, r8
 800f7c2:	4631      	mov	r1, r6
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	47b8      	blx	r7
 800f7c8:	3001      	adds	r0, #1
 800f7ca:	f43f ae74 	beq.w	800f4b6 <_printf_float+0xbe>
 800f7ce:	ee18 3a10 	vmov	r3, s16
 800f7d2:	4652      	mov	r2, sl
 800f7d4:	4631      	mov	r1, r6
 800f7d6:	4628      	mov	r0, r5
 800f7d8:	47b8      	blx	r7
 800f7da:	3001      	adds	r0, #1
 800f7dc:	f43f ae6b 	beq.w	800f4b6 <_printf_float+0xbe>
 800f7e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f7ec:	f7f1 f974 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7f0:	b9d8      	cbnz	r0, 800f82a <_printf_float+0x432>
 800f7f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f7f6:	f108 0201 	add.w	r2, r8, #1
 800f7fa:	4631      	mov	r1, r6
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	47b8      	blx	r7
 800f800:	3001      	adds	r0, #1
 800f802:	d10e      	bne.n	800f822 <_printf_float+0x42a>
 800f804:	e657      	b.n	800f4b6 <_printf_float+0xbe>
 800f806:	2301      	movs	r3, #1
 800f808:	4652      	mov	r2, sl
 800f80a:	4631      	mov	r1, r6
 800f80c:	4628      	mov	r0, r5
 800f80e:	47b8      	blx	r7
 800f810:	3001      	adds	r0, #1
 800f812:	f43f ae50 	beq.w	800f4b6 <_printf_float+0xbe>
 800f816:	f108 0801 	add.w	r8, r8, #1
 800f81a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f81c:	3b01      	subs	r3, #1
 800f81e:	4543      	cmp	r3, r8
 800f820:	dcf1      	bgt.n	800f806 <_printf_float+0x40e>
 800f822:	464b      	mov	r3, r9
 800f824:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f828:	e6da      	b.n	800f5e0 <_printf_float+0x1e8>
 800f82a:	f04f 0800 	mov.w	r8, #0
 800f82e:	f104 0a1a 	add.w	sl, r4, #26
 800f832:	e7f2      	b.n	800f81a <_printf_float+0x422>
 800f834:	2301      	movs	r3, #1
 800f836:	4642      	mov	r2, r8
 800f838:	e7df      	b.n	800f7fa <_printf_float+0x402>
 800f83a:	2301      	movs	r3, #1
 800f83c:	464a      	mov	r2, r9
 800f83e:	4631      	mov	r1, r6
 800f840:	4628      	mov	r0, r5
 800f842:	47b8      	blx	r7
 800f844:	3001      	adds	r0, #1
 800f846:	f43f ae36 	beq.w	800f4b6 <_printf_float+0xbe>
 800f84a:	f108 0801 	add.w	r8, r8, #1
 800f84e:	68e3      	ldr	r3, [r4, #12]
 800f850:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f852:	1a5b      	subs	r3, r3, r1
 800f854:	4543      	cmp	r3, r8
 800f856:	dcf0      	bgt.n	800f83a <_printf_float+0x442>
 800f858:	e6f8      	b.n	800f64c <_printf_float+0x254>
 800f85a:	f04f 0800 	mov.w	r8, #0
 800f85e:	f104 0919 	add.w	r9, r4, #25
 800f862:	e7f4      	b.n	800f84e <_printf_float+0x456>

0800f864 <_printf_common>:
 800f864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f868:	4616      	mov	r6, r2
 800f86a:	4699      	mov	r9, r3
 800f86c:	688a      	ldr	r2, [r1, #8]
 800f86e:	690b      	ldr	r3, [r1, #16]
 800f870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f874:	4293      	cmp	r3, r2
 800f876:	bfb8      	it	lt
 800f878:	4613      	movlt	r3, r2
 800f87a:	6033      	str	r3, [r6, #0]
 800f87c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f880:	4607      	mov	r7, r0
 800f882:	460c      	mov	r4, r1
 800f884:	b10a      	cbz	r2, 800f88a <_printf_common+0x26>
 800f886:	3301      	adds	r3, #1
 800f888:	6033      	str	r3, [r6, #0]
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	0699      	lsls	r1, r3, #26
 800f88e:	bf42      	ittt	mi
 800f890:	6833      	ldrmi	r3, [r6, #0]
 800f892:	3302      	addmi	r3, #2
 800f894:	6033      	strmi	r3, [r6, #0]
 800f896:	6825      	ldr	r5, [r4, #0]
 800f898:	f015 0506 	ands.w	r5, r5, #6
 800f89c:	d106      	bne.n	800f8ac <_printf_common+0x48>
 800f89e:	f104 0a19 	add.w	sl, r4, #25
 800f8a2:	68e3      	ldr	r3, [r4, #12]
 800f8a4:	6832      	ldr	r2, [r6, #0]
 800f8a6:	1a9b      	subs	r3, r3, r2
 800f8a8:	42ab      	cmp	r3, r5
 800f8aa:	dc26      	bgt.n	800f8fa <_printf_common+0x96>
 800f8ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8b0:	1e13      	subs	r3, r2, #0
 800f8b2:	6822      	ldr	r2, [r4, #0]
 800f8b4:	bf18      	it	ne
 800f8b6:	2301      	movne	r3, #1
 800f8b8:	0692      	lsls	r2, r2, #26
 800f8ba:	d42b      	bmi.n	800f914 <_printf_common+0xb0>
 800f8bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8c0:	4649      	mov	r1, r9
 800f8c2:	4638      	mov	r0, r7
 800f8c4:	47c0      	blx	r8
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	d01e      	beq.n	800f908 <_printf_common+0xa4>
 800f8ca:	6823      	ldr	r3, [r4, #0]
 800f8cc:	6922      	ldr	r2, [r4, #16]
 800f8ce:	f003 0306 	and.w	r3, r3, #6
 800f8d2:	2b04      	cmp	r3, #4
 800f8d4:	bf02      	ittt	eq
 800f8d6:	68e5      	ldreq	r5, [r4, #12]
 800f8d8:	6833      	ldreq	r3, [r6, #0]
 800f8da:	1aed      	subeq	r5, r5, r3
 800f8dc:	68a3      	ldr	r3, [r4, #8]
 800f8de:	bf0c      	ite	eq
 800f8e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8e4:	2500      	movne	r5, #0
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	bfc4      	itt	gt
 800f8ea:	1a9b      	subgt	r3, r3, r2
 800f8ec:	18ed      	addgt	r5, r5, r3
 800f8ee:	2600      	movs	r6, #0
 800f8f0:	341a      	adds	r4, #26
 800f8f2:	42b5      	cmp	r5, r6
 800f8f4:	d11a      	bne.n	800f92c <_printf_common+0xc8>
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	e008      	b.n	800f90c <_printf_common+0xa8>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	4652      	mov	r2, sl
 800f8fe:	4649      	mov	r1, r9
 800f900:	4638      	mov	r0, r7
 800f902:	47c0      	blx	r8
 800f904:	3001      	adds	r0, #1
 800f906:	d103      	bne.n	800f910 <_printf_common+0xac>
 800f908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f910:	3501      	adds	r5, #1
 800f912:	e7c6      	b.n	800f8a2 <_printf_common+0x3e>
 800f914:	18e1      	adds	r1, r4, r3
 800f916:	1c5a      	adds	r2, r3, #1
 800f918:	2030      	movs	r0, #48	; 0x30
 800f91a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f91e:	4422      	add	r2, r4
 800f920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f928:	3302      	adds	r3, #2
 800f92a:	e7c7      	b.n	800f8bc <_printf_common+0x58>
 800f92c:	2301      	movs	r3, #1
 800f92e:	4622      	mov	r2, r4
 800f930:	4649      	mov	r1, r9
 800f932:	4638      	mov	r0, r7
 800f934:	47c0      	blx	r8
 800f936:	3001      	adds	r0, #1
 800f938:	d0e6      	beq.n	800f908 <_printf_common+0xa4>
 800f93a:	3601      	adds	r6, #1
 800f93c:	e7d9      	b.n	800f8f2 <_printf_common+0x8e>
	...

0800f940 <_printf_i>:
 800f940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f944:	7e0f      	ldrb	r7, [r1, #24]
 800f946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f948:	2f78      	cmp	r7, #120	; 0x78
 800f94a:	4691      	mov	r9, r2
 800f94c:	4680      	mov	r8, r0
 800f94e:	460c      	mov	r4, r1
 800f950:	469a      	mov	sl, r3
 800f952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f956:	d807      	bhi.n	800f968 <_printf_i+0x28>
 800f958:	2f62      	cmp	r7, #98	; 0x62
 800f95a:	d80a      	bhi.n	800f972 <_printf_i+0x32>
 800f95c:	2f00      	cmp	r7, #0
 800f95e:	f000 80d4 	beq.w	800fb0a <_printf_i+0x1ca>
 800f962:	2f58      	cmp	r7, #88	; 0x58
 800f964:	f000 80c0 	beq.w	800fae8 <_printf_i+0x1a8>
 800f968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f96c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f970:	e03a      	b.n	800f9e8 <_printf_i+0xa8>
 800f972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f976:	2b15      	cmp	r3, #21
 800f978:	d8f6      	bhi.n	800f968 <_printf_i+0x28>
 800f97a:	a101      	add	r1, pc, #4	; (adr r1, 800f980 <_printf_i+0x40>)
 800f97c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f980:	0800f9d9 	.word	0x0800f9d9
 800f984:	0800f9ed 	.word	0x0800f9ed
 800f988:	0800f969 	.word	0x0800f969
 800f98c:	0800f969 	.word	0x0800f969
 800f990:	0800f969 	.word	0x0800f969
 800f994:	0800f969 	.word	0x0800f969
 800f998:	0800f9ed 	.word	0x0800f9ed
 800f99c:	0800f969 	.word	0x0800f969
 800f9a0:	0800f969 	.word	0x0800f969
 800f9a4:	0800f969 	.word	0x0800f969
 800f9a8:	0800f969 	.word	0x0800f969
 800f9ac:	0800faf1 	.word	0x0800faf1
 800f9b0:	0800fa19 	.word	0x0800fa19
 800f9b4:	0800faab 	.word	0x0800faab
 800f9b8:	0800f969 	.word	0x0800f969
 800f9bc:	0800f969 	.word	0x0800f969
 800f9c0:	0800fb13 	.word	0x0800fb13
 800f9c4:	0800f969 	.word	0x0800f969
 800f9c8:	0800fa19 	.word	0x0800fa19
 800f9cc:	0800f969 	.word	0x0800f969
 800f9d0:	0800f969 	.word	0x0800f969
 800f9d4:	0800fab3 	.word	0x0800fab3
 800f9d8:	682b      	ldr	r3, [r5, #0]
 800f9da:	1d1a      	adds	r2, r3, #4
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	602a      	str	r2, [r5, #0]
 800f9e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e09f      	b.n	800fb2c <_printf_i+0x1ec>
 800f9ec:	6820      	ldr	r0, [r4, #0]
 800f9ee:	682b      	ldr	r3, [r5, #0]
 800f9f0:	0607      	lsls	r7, r0, #24
 800f9f2:	f103 0104 	add.w	r1, r3, #4
 800f9f6:	6029      	str	r1, [r5, #0]
 800f9f8:	d501      	bpl.n	800f9fe <_printf_i+0xbe>
 800f9fa:	681e      	ldr	r6, [r3, #0]
 800f9fc:	e003      	b.n	800fa06 <_printf_i+0xc6>
 800f9fe:	0646      	lsls	r6, r0, #25
 800fa00:	d5fb      	bpl.n	800f9fa <_printf_i+0xba>
 800fa02:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fa06:	2e00      	cmp	r6, #0
 800fa08:	da03      	bge.n	800fa12 <_printf_i+0xd2>
 800fa0a:	232d      	movs	r3, #45	; 0x2d
 800fa0c:	4276      	negs	r6, r6
 800fa0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa12:	485a      	ldr	r0, [pc, #360]	; (800fb7c <_printf_i+0x23c>)
 800fa14:	230a      	movs	r3, #10
 800fa16:	e012      	b.n	800fa3e <_printf_i+0xfe>
 800fa18:	682b      	ldr	r3, [r5, #0]
 800fa1a:	6820      	ldr	r0, [r4, #0]
 800fa1c:	1d19      	adds	r1, r3, #4
 800fa1e:	6029      	str	r1, [r5, #0]
 800fa20:	0605      	lsls	r5, r0, #24
 800fa22:	d501      	bpl.n	800fa28 <_printf_i+0xe8>
 800fa24:	681e      	ldr	r6, [r3, #0]
 800fa26:	e002      	b.n	800fa2e <_printf_i+0xee>
 800fa28:	0641      	lsls	r1, r0, #25
 800fa2a:	d5fb      	bpl.n	800fa24 <_printf_i+0xe4>
 800fa2c:	881e      	ldrh	r6, [r3, #0]
 800fa2e:	4853      	ldr	r0, [pc, #332]	; (800fb7c <_printf_i+0x23c>)
 800fa30:	2f6f      	cmp	r7, #111	; 0x6f
 800fa32:	bf0c      	ite	eq
 800fa34:	2308      	moveq	r3, #8
 800fa36:	230a      	movne	r3, #10
 800fa38:	2100      	movs	r1, #0
 800fa3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa3e:	6865      	ldr	r5, [r4, #4]
 800fa40:	60a5      	str	r5, [r4, #8]
 800fa42:	2d00      	cmp	r5, #0
 800fa44:	bfa2      	ittt	ge
 800fa46:	6821      	ldrge	r1, [r4, #0]
 800fa48:	f021 0104 	bicge.w	r1, r1, #4
 800fa4c:	6021      	strge	r1, [r4, #0]
 800fa4e:	b90e      	cbnz	r6, 800fa54 <_printf_i+0x114>
 800fa50:	2d00      	cmp	r5, #0
 800fa52:	d04b      	beq.n	800faec <_printf_i+0x1ac>
 800fa54:	4615      	mov	r5, r2
 800fa56:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa5a:	fb03 6711 	mls	r7, r3, r1, r6
 800fa5e:	5dc7      	ldrb	r7, [r0, r7]
 800fa60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa64:	4637      	mov	r7, r6
 800fa66:	42bb      	cmp	r3, r7
 800fa68:	460e      	mov	r6, r1
 800fa6a:	d9f4      	bls.n	800fa56 <_printf_i+0x116>
 800fa6c:	2b08      	cmp	r3, #8
 800fa6e:	d10b      	bne.n	800fa88 <_printf_i+0x148>
 800fa70:	6823      	ldr	r3, [r4, #0]
 800fa72:	07de      	lsls	r6, r3, #31
 800fa74:	d508      	bpl.n	800fa88 <_printf_i+0x148>
 800fa76:	6923      	ldr	r3, [r4, #16]
 800fa78:	6861      	ldr	r1, [r4, #4]
 800fa7a:	4299      	cmp	r1, r3
 800fa7c:	bfde      	ittt	le
 800fa7e:	2330      	movle	r3, #48	; 0x30
 800fa80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fa88:	1b52      	subs	r2, r2, r5
 800fa8a:	6122      	str	r2, [r4, #16]
 800fa8c:	f8cd a000 	str.w	sl, [sp]
 800fa90:	464b      	mov	r3, r9
 800fa92:	aa03      	add	r2, sp, #12
 800fa94:	4621      	mov	r1, r4
 800fa96:	4640      	mov	r0, r8
 800fa98:	f7ff fee4 	bl	800f864 <_printf_common>
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	d14a      	bne.n	800fb36 <_printf_i+0x1f6>
 800faa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800faa4:	b004      	add	sp, #16
 800faa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faaa:	6823      	ldr	r3, [r4, #0]
 800faac:	f043 0320 	orr.w	r3, r3, #32
 800fab0:	6023      	str	r3, [r4, #0]
 800fab2:	4833      	ldr	r0, [pc, #204]	; (800fb80 <_printf_i+0x240>)
 800fab4:	2778      	movs	r7, #120	; 0x78
 800fab6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	6829      	ldr	r1, [r5, #0]
 800fabe:	061f      	lsls	r7, r3, #24
 800fac0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fac4:	d402      	bmi.n	800facc <_printf_i+0x18c>
 800fac6:	065f      	lsls	r7, r3, #25
 800fac8:	bf48      	it	mi
 800faca:	b2b6      	uxthmi	r6, r6
 800facc:	07df      	lsls	r7, r3, #31
 800face:	bf48      	it	mi
 800fad0:	f043 0320 	orrmi.w	r3, r3, #32
 800fad4:	6029      	str	r1, [r5, #0]
 800fad6:	bf48      	it	mi
 800fad8:	6023      	strmi	r3, [r4, #0]
 800fada:	b91e      	cbnz	r6, 800fae4 <_printf_i+0x1a4>
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	f023 0320 	bic.w	r3, r3, #32
 800fae2:	6023      	str	r3, [r4, #0]
 800fae4:	2310      	movs	r3, #16
 800fae6:	e7a7      	b.n	800fa38 <_printf_i+0xf8>
 800fae8:	4824      	ldr	r0, [pc, #144]	; (800fb7c <_printf_i+0x23c>)
 800faea:	e7e4      	b.n	800fab6 <_printf_i+0x176>
 800faec:	4615      	mov	r5, r2
 800faee:	e7bd      	b.n	800fa6c <_printf_i+0x12c>
 800faf0:	682b      	ldr	r3, [r5, #0]
 800faf2:	6826      	ldr	r6, [r4, #0]
 800faf4:	6961      	ldr	r1, [r4, #20]
 800faf6:	1d18      	adds	r0, r3, #4
 800faf8:	6028      	str	r0, [r5, #0]
 800fafa:	0635      	lsls	r5, r6, #24
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	d501      	bpl.n	800fb04 <_printf_i+0x1c4>
 800fb00:	6019      	str	r1, [r3, #0]
 800fb02:	e002      	b.n	800fb0a <_printf_i+0x1ca>
 800fb04:	0670      	lsls	r0, r6, #25
 800fb06:	d5fb      	bpl.n	800fb00 <_printf_i+0x1c0>
 800fb08:	8019      	strh	r1, [r3, #0]
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	6123      	str	r3, [r4, #16]
 800fb0e:	4615      	mov	r5, r2
 800fb10:	e7bc      	b.n	800fa8c <_printf_i+0x14c>
 800fb12:	682b      	ldr	r3, [r5, #0]
 800fb14:	1d1a      	adds	r2, r3, #4
 800fb16:	602a      	str	r2, [r5, #0]
 800fb18:	681d      	ldr	r5, [r3, #0]
 800fb1a:	6862      	ldr	r2, [r4, #4]
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	4628      	mov	r0, r5
 800fb20:	f7f0 fb5e 	bl	80001e0 <memchr>
 800fb24:	b108      	cbz	r0, 800fb2a <_printf_i+0x1ea>
 800fb26:	1b40      	subs	r0, r0, r5
 800fb28:	6060      	str	r0, [r4, #4]
 800fb2a:	6863      	ldr	r3, [r4, #4]
 800fb2c:	6123      	str	r3, [r4, #16]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb34:	e7aa      	b.n	800fa8c <_printf_i+0x14c>
 800fb36:	6923      	ldr	r3, [r4, #16]
 800fb38:	462a      	mov	r2, r5
 800fb3a:	4649      	mov	r1, r9
 800fb3c:	4640      	mov	r0, r8
 800fb3e:	47d0      	blx	sl
 800fb40:	3001      	adds	r0, #1
 800fb42:	d0ad      	beq.n	800faa0 <_printf_i+0x160>
 800fb44:	6823      	ldr	r3, [r4, #0]
 800fb46:	079b      	lsls	r3, r3, #30
 800fb48:	d413      	bmi.n	800fb72 <_printf_i+0x232>
 800fb4a:	68e0      	ldr	r0, [r4, #12]
 800fb4c:	9b03      	ldr	r3, [sp, #12]
 800fb4e:	4298      	cmp	r0, r3
 800fb50:	bfb8      	it	lt
 800fb52:	4618      	movlt	r0, r3
 800fb54:	e7a6      	b.n	800faa4 <_printf_i+0x164>
 800fb56:	2301      	movs	r3, #1
 800fb58:	4632      	mov	r2, r6
 800fb5a:	4649      	mov	r1, r9
 800fb5c:	4640      	mov	r0, r8
 800fb5e:	47d0      	blx	sl
 800fb60:	3001      	adds	r0, #1
 800fb62:	d09d      	beq.n	800faa0 <_printf_i+0x160>
 800fb64:	3501      	adds	r5, #1
 800fb66:	68e3      	ldr	r3, [r4, #12]
 800fb68:	9903      	ldr	r1, [sp, #12]
 800fb6a:	1a5b      	subs	r3, r3, r1
 800fb6c:	42ab      	cmp	r3, r5
 800fb6e:	dcf2      	bgt.n	800fb56 <_printf_i+0x216>
 800fb70:	e7eb      	b.n	800fb4a <_printf_i+0x20a>
 800fb72:	2500      	movs	r5, #0
 800fb74:	f104 0619 	add.w	r6, r4, #25
 800fb78:	e7f5      	b.n	800fb66 <_printf_i+0x226>
 800fb7a:	bf00      	nop
 800fb7c:	080121ee 	.word	0x080121ee
 800fb80:	080121ff 	.word	0x080121ff

0800fb84 <std>:
 800fb84:	2300      	movs	r3, #0
 800fb86:	b510      	push	{r4, lr}
 800fb88:	4604      	mov	r4, r0
 800fb8a:	e9c0 3300 	strd	r3, r3, [r0]
 800fb8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb92:	6083      	str	r3, [r0, #8]
 800fb94:	8181      	strh	r1, [r0, #12]
 800fb96:	6643      	str	r3, [r0, #100]	; 0x64
 800fb98:	81c2      	strh	r2, [r0, #14]
 800fb9a:	6183      	str	r3, [r0, #24]
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	2208      	movs	r2, #8
 800fba0:	305c      	adds	r0, #92	; 0x5c
 800fba2:	f000 f8e2 	bl	800fd6a <memset>
 800fba6:	4b05      	ldr	r3, [pc, #20]	; (800fbbc <std+0x38>)
 800fba8:	6263      	str	r3, [r4, #36]	; 0x24
 800fbaa:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <std+0x3c>)
 800fbac:	62a3      	str	r3, [r4, #40]	; 0x28
 800fbae:	4b05      	ldr	r3, [pc, #20]	; (800fbc4 <std+0x40>)
 800fbb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fbb2:	4b05      	ldr	r3, [pc, #20]	; (800fbc8 <std+0x44>)
 800fbb4:	6224      	str	r4, [r4, #32]
 800fbb6:	6323      	str	r3, [r4, #48]	; 0x30
 800fbb8:	bd10      	pop	{r4, pc}
 800fbba:	bf00      	nop
 800fbbc:	0800fce5 	.word	0x0800fce5
 800fbc0:	0800fd07 	.word	0x0800fd07
 800fbc4:	0800fd3f 	.word	0x0800fd3f
 800fbc8:	0800fd63 	.word	0x0800fd63

0800fbcc <stdio_exit_handler>:
 800fbcc:	4a02      	ldr	r2, [pc, #8]	; (800fbd8 <stdio_exit_handler+0xc>)
 800fbce:	4903      	ldr	r1, [pc, #12]	; (800fbdc <stdio_exit_handler+0x10>)
 800fbd0:	4803      	ldr	r0, [pc, #12]	; (800fbe0 <stdio_exit_handler+0x14>)
 800fbd2:	f000 b869 	b.w	800fca8 <_fwalk_sglue>
 800fbd6:	bf00      	nop
 800fbd8:	20000120 	.word	0x20000120
 800fbdc:	08011451 	.word	0x08011451
 800fbe0:	2000012c 	.word	0x2000012c

0800fbe4 <cleanup_stdio>:
 800fbe4:	6841      	ldr	r1, [r0, #4]
 800fbe6:	4b0c      	ldr	r3, [pc, #48]	; (800fc18 <cleanup_stdio+0x34>)
 800fbe8:	4299      	cmp	r1, r3
 800fbea:	b510      	push	{r4, lr}
 800fbec:	4604      	mov	r4, r0
 800fbee:	d001      	beq.n	800fbf4 <cleanup_stdio+0x10>
 800fbf0:	f001 fc2e 	bl	8011450 <_fflush_r>
 800fbf4:	68a1      	ldr	r1, [r4, #8]
 800fbf6:	4b09      	ldr	r3, [pc, #36]	; (800fc1c <cleanup_stdio+0x38>)
 800fbf8:	4299      	cmp	r1, r3
 800fbfa:	d002      	beq.n	800fc02 <cleanup_stdio+0x1e>
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f001 fc27 	bl	8011450 <_fflush_r>
 800fc02:	68e1      	ldr	r1, [r4, #12]
 800fc04:	4b06      	ldr	r3, [pc, #24]	; (800fc20 <cleanup_stdio+0x3c>)
 800fc06:	4299      	cmp	r1, r3
 800fc08:	d004      	beq.n	800fc14 <cleanup_stdio+0x30>
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc10:	f001 bc1e 	b.w	8011450 <_fflush_r>
 800fc14:	bd10      	pop	{r4, pc}
 800fc16:	bf00      	nop
 800fc18:	20002260 	.word	0x20002260
 800fc1c:	200022c8 	.word	0x200022c8
 800fc20:	20002330 	.word	0x20002330

0800fc24 <global_stdio_init.part.0>:
 800fc24:	b510      	push	{r4, lr}
 800fc26:	4b0b      	ldr	r3, [pc, #44]	; (800fc54 <global_stdio_init.part.0+0x30>)
 800fc28:	4c0b      	ldr	r4, [pc, #44]	; (800fc58 <global_stdio_init.part.0+0x34>)
 800fc2a:	4a0c      	ldr	r2, [pc, #48]	; (800fc5c <global_stdio_init.part.0+0x38>)
 800fc2c:	601a      	str	r2, [r3, #0]
 800fc2e:	4620      	mov	r0, r4
 800fc30:	2200      	movs	r2, #0
 800fc32:	2104      	movs	r1, #4
 800fc34:	f7ff ffa6 	bl	800fb84 <std>
 800fc38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	2109      	movs	r1, #9
 800fc40:	f7ff ffa0 	bl	800fb84 <std>
 800fc44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fc48:	2202      	movs	r2, #2
 800fc4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc4e:	2112      	movs	r1, #18
 800fc50:	f7ff bf98 	b.w	800fb84 <std>
 800fc54:	20002398 	.word	0x20002398
 800fc58:	20002260 	.word	0x20002260
 800fc5c:	0800fbcd 	.word	0x0800fbcd

0800fc60 <__sfp_lock_acquire>:
 800fc60:	4801      	ldr	r0, [pc, #4]	; (800fc68 <__sfp_lock_acquire+0x8>)
 800fc62:	f000 b91d 	b.w	800fea0 <__retarget_lock_acquire_recursive>
 800fc66:	bf00      	nop
 800fc68:	200023a1 	.word	0x200023a1

0800fc6c <__sfp_lock_release>:
 800fc6c:	4801      	ldr	r0, [pc, #4]	; (800fc74 <__sfp_lock_release+0x8>)
 800fc6e:	f000 b918 	b.w	800fea2 <__retarget_lock_release_recursive>
 800fc72:	bf00      	nop
 800fc74:	200023a1 	.word	0x200023a1

0800fc78 <__sinit>:
 800fc78:	b510      	push	{r4, lr}
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	f7ff fff0 	bl	800fc60 <__sfp_lock_acquire>
 800fc80:	6a23      	ldr	r3, [r4, #32]
 800fc82:	b11b      	cbz	r3, 800fc8c <__sinit+0x14>
 800fc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc88:	f7ff bff0 	b.w	800fc6c <__sfp_lock_release>
 800fc8c:	4b04      	ldr	r3, [pc, #16]	; (800fca0 <__sinit+0x28>)
 800fc8e:	6223      	str	r3, [r4, #32]
 800fc90:	4b04      	ldr	r3, [pc, #16]	; (800fca4 <__sinit+0x2c>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1f5      	bne.n	800fc84 <__sinit+0xc>
 800fc98:	f7ff ffc4 	bl	800fc24 <global_stdio_init.part.0>
 800fc9c:	e7f2      	b.n	800fc84 <__sinit+0xc>
 800fc9e:	bf00      	nop
 800fca0:	0800fbe5 	.word	0x0800fbe5
 800fca4:	20002398 	.word	0x20002398

0800fca8 <_fwalk_sglue>:
 800fca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcac:	4607      	mov	r7, r0
 800fcae:	4688      	mov	r8, r1
 800fcb0:	4614      	mov	r4, r2
 800fcb2:	2600      	movs	r6, #0
 800fcb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fcb8:	f1b9 0901 	subs.w	r9, r9, #1
 800fcbc:	d505      	bpl.n	800fcca <_fwalk_sglue+0x22>
 800fcbe:	6824      	ldr	r4, [r4, #0]
 800fcc0:	2c00      	cmp	r4, #0
 800fcc2:	d1f7      	bne.n	800fcb4 <_fwalk_sglue+0xc>
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcca:	89ab      	ldrh	r3, [r5, #12]
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d907      	bls.n	800fce0 <_fwalk_sglue+0x38>
 800fcd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	d003      	beq.n	800fce0 <_fwalk_sglue+0x38>
 800fcd8:	4629      	mov	r1, r5
 800fcda:	4638      	mov	r0, r7
 800fcdc:	47c0      	blx	r8
 800fcde:	4306      	orrs	r6, r0
 800fce0:	3568      	adds	r5, #104	; 0x68
 800fce2:	e7e9      	b.n	800fcb8 <_fwalk_sglue+0x10>

0800fce4 <__sread>:
 800fce4:	b510      	push	{r4, lr}
 800fce6:	460c      	mov	r4, r1
 800fce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcec:	f000 f87a 	bl	800fde4 <_read_r>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	bfab      	itete	ge
 800fcf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fcf6:	89a3      	ldrhlt	r3, [r4, #12]
 800fcf8:	181b      	addge	r3, r3, r0
 800fcfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fcfe:	bfac      	ite	ge
 800fd00:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd02:	81a3      	strhlt	r3, [r4, #12]
 800fd04:	bd10      	pop	{r4, pc}

0800fd06 <__swrite>:
 800fd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0a:	461f      	mov	r7, r3
 800fd0c:	898b      	ldrh	r3, [r1, #12]
 800fd0e:	05db      	lsls	r3, r3, #23
 800fd10:	4605      	mov	r5, r0
 800fd12:	460c      	mov	r4, r1
 800fd14:	4616      	mov	r6, r2
 800fd16:	d505      	bpl.n	800fd24 <__swrite+0x1e>
 800fd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd1c:	2302      	movs	r3, #2
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f000 f84e 	bl	800fdc0 <_lseek_r>
 800fd24:	89a3      	ldrh	r3, [r4, #12]
 800fd26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd2e:	81a3      	strh	r3, [r4, #12]
 800fd30:	4632      	mov	r2, r6
 800fd32:	463b      	mov	r3, r7
 800fd34:	4628      	mov	r0, r5
 800fd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3a:	f000 b875 	b.w	800fe28 <_write_r>

0800fd3e <__sseek>:
 800fd3e:	b510      	push	{r4, lr}
 800fd40:	460c      	mov	r4, r1
 800fd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd46:	f000 f83b 	bl	800fdc0 <_lseek_r>
 800fd4a:	1c43      	adds	r3, r0, #1
 800fd4c:	89a3      	ldrh	r3, [r4, #12]
 800fd4e:	bf15      	itete	ne
 800fd50:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd5a:	81a3      	strheq	r3, [r4, #12]
 800fd5c:	bf18      	it	ne
 800fd5e:	81a3      	strhne	r3, [r4, #12]
 800fd60:	bd10      	pop	{r4, pc}

0800fd62 <__sclose>:
 800fd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd66:	f000 b81b 	b.w	800fda0 <_close_r>

0800fd6a <memset>:
 800fd6a:	4402      	add	r2, r0
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d100      	bne.n	800fd74 <memset+0xa>
 800fd72:	4770      	bx	lr
 800fd74:	f803 1b01 	strb.w	r1, [r3], #1
 800fd78:	e7f9      	b.n	800fd6e <memset+0x4>

0800fd7a <strcat>:
 800fd7a:	b510      	push	{r4, lr}
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	7814      	ldrb	r4, [r2, #0]
 800fd80:	4613      	mov	r3, r2
 800fd82:	3201      	adds	r2, #1
 800fd84:	2c00      	cmp	r4, #0
 800fd86:	d1fa      	bne.n	800fd7e <strcat+0x4>
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd92:	2a00      	cmp	r2, #0
 800fd94:	d1f9      	bne.n	800fd8a <strcat+0x10>
 800fd96:	bd10      	pop	{r4, pc}

0800fd98 <_localeconv_r>:
 800fd98:	4800      	ldr	r0, [pc, #0]	; (800fd9c <_localeconv_r+0x4>)
 800fd9a:	4770      	bx	lr
 800fd9c:	2000026c 	.word	0x2000026c

0800fda0 <_close_r>:
 800fda0:	b538      	push	{r3, r4, r5, lr}
 800fda2:	4d06      	ldr	r5, [pc, #24]	; (800fdbc <_close_r+0x1c>)
 800fda4:	2300      	movs	r3, #0
 800fda6:	4604      	mov	r4, r0
 800fda8:	4608      	mov	r0, r1
 800fdaa:	602b      	str	r3, [r5, #0]
 800fdac:	f7f2 f977 	bl	800209e <_close>
 800fdb0:	1c43      	adds	r3, r0, #1
 800fdb2:	d102      	bne.n	800fdba <_close_r+0x1a>
 800fdb4:	682b      	ldr	r3, [r5, #0]
 800fdb6:	b103      	cbz	r3, 800fdba <_close_r+0x1a>
 800fdb8:	6023      	str	r3, [r4, #0]
 800fdba:	bd38      	pop	{r3, r4, r5, pc}
 800fdbc:	2000239c 	.word	0x2000239c

0800fdc0 <_lseek_r>:
 800fdc0:	b538      	push	{r3, r4, r5, lr}
 800fdc2:	4d07      	ldr	r5, [pc, #28]	; (800fde0 <_lseek_r+0x20>)
 800fdc4:	4604      	mov	r4, r0
 800fdc6:	4608      	mov	r0, r1
 800fdc8:	4611      	mov	r1, r2
 800fdca:	2200      	movs	r2, #0
 800fdcc:	602a      	str	r2, [r5, #0]
 800fdce:	461a      	mov	r2, r3
 800fdd0:	f7f2 f98c 	bl	80020ec <_lseek>
 800fdd4:	1c43      	adds	r3, r0, #1
 800fdd6:	d102      	bne.n	800fdde <_lseek_r+0x1e>
 800fdd8:	682b      	ldr	r3, [r5, #0]
 800fdda:	b103      	cbz	r3, 800fdde <_lseek_r+0x1e>
 800fddc:	6023      	str	r3, [r4, #0]
 800fdde:	bd38      	pop	{r3, r4, r5, pc}
 800fde0:	2000239c 	.word	0x2000239c

0800fde4 <_read_r>:
 800fde4:	b538      	push	{r3, r4, r5, lr}
 800fde6:	4d07      	ldr	r5, [pc, #28]	; (800fe04 <_read_r+0x20>)
 800fde8:	4604      	mov	r4, r0
 800fdea:	4608      	mov	r0, r1
 800fdec:	4611      	mov	r1, r2
 800fdee:	2200      	movs	r2, #0
 800fdf0:	602a      	str	r2, [r5, #0]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	f7f2 f91a 	bl	800202c <_read>
 800fdf8:	1c43      	adds	r3, r0, #1
 800fdfa:	d102      	bne.n	800fe02 <_read_r+0x1e>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	b103      	cbz	r3, 800fe02 <_read_r+0x1e>
 800fe00:	6023      	str	r3, [r4, #0]
 800fe02:	bd38      	pop	{r3, r4, r5, pc}
 800fe04:	2000239c 	.word	0x2000239c

0800fe08 <_sbrk_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	4d06      	ldr	r5, [pc, #24]	; (800fe24 <_sbrk_r+0x1c>)
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	4604      	mov	r4, r0
 800fe10:	4608      	mov	r0, r1
 800fe12:	602b      	str	r3, [r5, #0]
 800fe14:	f7f2 f978 	bl	8002108 <_sbrk>
 800fe18:	1c43      	adds	r3, r0, #1
 800fe1a:	d102      	bne.n	800fe22 <_sbrk_r+0x1a>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	b103      	cbz	r3, 800fe22 <_sbrk_r+0x1a>
 800fe20:	6023      	str	r3, [r4, #0]
 800fe22:	bd38      	pop	{r3, r4, r5, pc}
 800fe24:	2000239c 	.word	0x2000239c

0800fe28 <_write_r>:
 800fe28:	b538      	push	{r3, r4, r5, lr}
 800fe2a:	4d07      	ldr	r5, [pc, #28]	; (800fe48 <_write_r+0x20>)
 800fe2c:	4604      	mov	r4, r0
 800fe2e:	4608      	mov	r0, r1
 800fe30:	4611      	mov	r1, r2
 800fe32:	2200      	movs	r2, #0
 800fe34:	602a      	str	r2, [r5, #0]
 800fe36:	461a      	mov	r2, r3
 800fe38:	f7f2 f915 	bl	8002066 <_write>
 800fe3c:	1c43      	adds	r3, r0, #1
 800fe3e:	d102      	bne.n	800fe46 <_write_r+0x1e>
 800fe40:	682b      	ldr	r3, [r5, #0]
 800fe42:	b103      	cbz	r3, 800fe46 <_write_r+0x1e>
 800fe44:	6023      	str	r3, [r4, #0]
 800fe46:	bd38      	pop	{r3, r4, r5, pc}
 800fe48:	2000239c 	.word	0x2000239c

0800fe4c <__errno>:
 800fe4c:	4b01      	ldr	r3, [pc, #4]	; (800fe54 <__errno+0x8>)
 800fe4e:	6818      	ldr	r0, [r3, #0]
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop
 800fe54:	20000178 	.word	0x20000178

0800fe58 <__libc_init_array>:
 800fe58:	b570      	push	{r4, r5, r6, lr}
 800fe5a:	4d0d      	ldr	r5, [pc, #52]	; (800fe90 <__libc_init_array+0x38>)
 800fe5c:	4c0d      	ldr	r4, [pc, #52]	; (800fe94 <__libc_init_array+0x3c>)
 800fe5e:	1b64      	subs	r4, r4, r5
 800fe60:	10a4      	asrs	r4, r4, #2
 800fe62:	2600      	movs	r6, #0
 800fe64:	42a6      	cmp	r6, r4
 800fe66:	d109      	bne.n	800fe7c <__libc_init_array+0x24>
 800fe68:	4d0b      	ldr	r5, [pc, #44]	; (800fe98 <__libc_init_array+0x40>)
 800fe6a:	4c0c      	ldr	r4, [pc, #48]	; (800fe9c <__libc_init_array+0x44>)
 800fe6c:	f002 f89a 	bl	8011fa4 <_init>
 800fe70:	1b64      	subs	r4, r4, r5
 800fe72:	10a4      	asrs	r4, r4, #2
 800fe74:	2600      	movs	r6, #0
 800fe76:	42a6      	cmp	r6, r4
 800fe78:	d105      	bne.n	800fe86 <__libc_init_array+0x2e>
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}
 800fe7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe80:	4798      	blx	r3
 800fe82:	3601      	adds	r6, #1
 800fe84:	e7ee      	b.n	800fe64 <__libc_init_array+0xc>
 800fe86:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe8a:	4798      	blx	r3
 800fe8c:	3601      	adds	r6, #1
 800fe8e:	e7f2      	b.n	800fe76 <__libc_init_array+0x1e>
 800fe90:	080125c8 	.word	0x080125c8
 800fe94:	080125c8 	.word	0x080125c8
 800fe98:	080125c8 	.word	0x080125c8
 800fe9c:	080125cc 	.word	0x080125cc

0800fea0 <__retarget_lock_acquire_recursive>:
 800fea0:	4770      	bx	lr

0800fea2 <__retarget_lock_release_recursive>:
 800fea2:	4770      	bx	lr

0800fea4 <memcpy>:
 800fea4:	440a      	add	r2, r1
 800fea6:	4291      	cmp	r1, r2
 800fea8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800feac:	d100      	bne.n	800feb0 <memcpy+0xc>
 800feae:	4770      	bx	lr
 800feb0:	b510      	push	{r4, lr}
 800feb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800feb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feba:	4291      	cmp	r1, r2
 800febc:	d1f9      	bne.n	800feb2 <memcpy+0xe>
 800febe:	bd10      	pop	{r4, pc}

0800fec0 <quorem>:
 800fec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec4:	6903      	ldr	r3, [r0, #16]
 800fec6:	690c      	ldr	r4, [r1, #16]
 800fec8:	42a3      	cmp	r3, r4
 800feca:	4607      	mov	r7, r0
 800fecc:	db7e      	blt.n	800ffcc <quorem+0x10c>
 800fece:	3c01      	subs	r4, #1
 800fed0:	f101 0814 	add.w	r8, r1, #20
 800fed4:	f100 0514 	add.w	r5, r0, #20
 800fed8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fedc:	9301      	str	r3, [sp, #4]
 800fede:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fee6:	3301      	adds	r3, #1
 800fee8:	429a      	cmp	r2, r3
 800feea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800feee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fef2:	fbb2 f6f3 	udiv	r6, r2, r3
 800fef6:	d331      	bcc.n	800ff5c <quorem+0x9c>
 800fef8:	f04f 0e00 	mov.w	lr, #0
 800fefc:	4640      	mov	r0, r8
 800fefe:	46ac      	mov	ip, r5
 800ff00:	46f2      	mov	sl, lr
 800ff02:	f850 2b04 	ldr.w	r2, [r0], #4
 800ff06:	b293      	uxth	r3, r2
 800ff08:	fb06 e303 	mla	r3, r6, r3, lr
 800ff0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ff10:	0c1a      	lsrs	r2, r3, #16
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	ebaa 0303 	sub.w	r3, sl, r3
 800ff18:	f8dc a000 	ldr.w	sl, [ip]
 800ff1c:	fa13 f38a 	uxtah	r3, r3, sl
 800ff20:	fb06 220e 	mla	r2, r6, lr, r2
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	9b00      	ldr	r3, [sp, #0]
 800ff28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ff2c:	b292      	uxth	r2, r2
 800ff2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ff32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ff36:	f8bd 3000 	ldrh.w	r3, [sp]
 800ff3a:	4581      	cmp	r9, r0
 800ff3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff40:	f84c 3b04 	str.w	r3, [ip], #4
 800ff44:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ff48:	d2db      	bcs.n	800ff02 <quorem+0x42>
 800ff4a:	f855 300b 	ldr.w	r3, [r5, fp]
 800ff4e:	b92b      	cbnz	r3, 800ff5c <quorem+0x9c>
 800ff50:	9b01      	ldr	r3, [sp, #4]
 800ff52:	3b04      	subs	r3, #4
 800ff54:	429d      	cmp	r5, r3
 800ff56:	461a      	mov	r2, r3
 800ff58:	d32c      	bcc.n	800ffb4 <quorem+0xf4>
 800ff5a:	613c      	str	r4, [r7, #16]
 800ff5c:	4638      	mov	r0, r7
 800ff5e:	f001 f8f1 	bl	8011144 <__mcmp>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	db22      	blt.n	800ffac <quorem+0xec>
 800ff66:	3601      	adds	r6, #1
 800ff68:	4629      	mov	r1, r5
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ff70:	f8d1 c000 	ldr.w	ip, [r1]
 800ff74:	b293      	uxth	r3, r2
 800ff76:	1ac3      	subs	r3, r0, r3
 800ff78:	0c12      	lsrs	r2, r2, #16
 800ff7a:	fa13 f38c 	uxtah	r3, r3, ip
 800ff7e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ff82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff8c:	45c1      	cmp	r9, r8
 800ff8e:	f841 3b04 	str.w	r3, [r1], #4
 800ff92:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ff96:	d2e9      	bcs.n	800ff6c <quorem+0xac>
 800ff98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffa0:	b922      	cbnz	r2, 800ffac <quorem+0xec>
 800ffa2:	3b04      	subs	r3, #4
 800ffa4:	429d      	cmp	r5, r3
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	d30a      	bcc.n	800ffc0 <quorem+0x100>
 800ffaa:	613c      	str	r4, [r7, #16]
 800ffac:	4630      	mov	r0, r6
 800ffae:	b003      	add	sp, #12
 800ffb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb4:	6812      	ldr	r2, [r2, #0]
 800ffb6:	3b04      	subs	r3, #4
 800ffb8:	2a00      	cmp	r2, #0
 800ffba:	d1ce      	bne.n	800ff5a <quorem+0x9a>
 800ffbc:	3c01      	subs	r4, #1
 800ffbe:	e7c9      	b.n	800ff54 <quorem+0x94>
 800ffc0:	6812      	ldr	r2, [r2, #0]
 800ffc2:	3b04      	subs	r3, #4
 800ffc4:	2a00      	cmp	r2, #0
 800ffc6:	d1f0      	bne.n	800ffaa <quorem+0xea>
 800ffc8:	3c01      	subs	r4, #1
 800ffca:	e7eb      	b.n	800ffa4 <quorem+0xe4>
 800ffcc:	2000      	movs	r0, #0
 800ffce:	e7ee      	b.n	800ffae <quorem+0xee>

0800ffd0 <_dtoa_r>:
 800ffd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd4:	ed2d 8b04 	vpush	{d8-d9}
 800ffd8:	69c5      	ldr	r5, [r0, #28]
 800ffda:	b093      	sub	sp, #76	; 0x4c
 800ffdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ffe0:	ec57 6b10 	vmov	r6, r7, d0
 800ffe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ffe8:	9107      	str	r1, [sp, #28]
 800ffea:	4604      	mov	r4, r0
 800ffec:	920a      	str	r2, [sp, #40]	; 0x28
 800ffee:	930d      	str	r3, [sp, #52]	; 0x34
 800fff0:	b975      	cbnz	r5, 8010010 <_dtoa_r+0x40>
 800fff2:	2010      	movs	r0, #16
 800fff4:	f7ff f8a4 	bl	800f140 <malloc>
 800fff8:	4602      	mov	r2, r0
 800fffa:	61e0      	str	r0, [r4, #28]
 800fffc:	b920      	cbnz	r0, 8010008 <_dtoa_r+0x38>
 800fffe:	4bae      	ldr	r3, [pc, #696]	; (80102b8 <_dtoa_r+0x2e8>)
 8010000:	21ef      	movs	r1, #239	; 0xef
 8010002:	48ae      	ldr	r0, [pc, #696]	; (80102bc <_dtoa_r+0x2ec>)
 8010004:	f001 fa4c 	bl	80114a0 <__assert_func>
 8010008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801000c:	6005      	str	r5, [r0, #0]
 801000e:	60c5      	str	r5, [r0, #12]
 8010010:	69e3      	ldr	r3, [r4, #28]
 8010012:	6819      	ldr	r1, [r3, #0]
 8010014:	b151      	cbz	r1, 801002c <_dtoa_r+0x5c>
 8010016:	685a      	ldr	r2, [r3, #4]
 8010018:	604a      	str	r2, [r1, #4]
 801001a:	2301      	movs	r3, #1
 801001c:	4093      	lsls	r3, r2
 801001e:	608b      	str	r3, [r1, #8]
 8010020:	4620      	mov	r0, r4
 8010022:	f000 fe53 	bl	8010ccc <_Bfree>
 8010026:	69e3      	ldr	r3, [r4, #28]
 8010028:	2200      	movs	r2, #0
 801002a:	601a      	str	r2, [r3, #0]
 801002c:	1e3b      	subs	r3, r7, #0
 801002e:	bfbb      	ittet	lt
 8010030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010034:	9303      	strlt	r3, [sp, #12]
 8010036:	2300      	movge	r3, #0
 8010038:	2201      	movlt	r2, #1
 801003a:	bfac      	ite	ge
 801003c:	f8c8 3000 	strge.w	r3, [r8]
 8010040:	f8c8 2000 	strlt.w	r2, [r8]
 8010044:	4b9e      	ldr	r3, [pc, #632]	; (80102c0 <_dtoa_r+0x2f0>)
 8010046:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801004a:	ea33 0308 	bics.w	r3, r3, r8
 801004e:	d11b      	bne.n	8010088 <_dtoa_r+0xb8>
 8010050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010052:	f242 730f 	movw	r3, #9999	; 0x270f
 8010056:	6013      	str	r3, [r2, #0]
 8010058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801005c:	4333      	orrs	r3, r6
 801005e:	f000 8593 	beq.w	8010b88 <_dtoa_r+0xbb8>
 8010062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010064:	b963      	cbnz	r3, 8010080 <_dtoa_r+0xb0>
 8010066:	4b97      	ldr	r3, [pc, #604]	; (80102c4 <_dtoa_r+0x2f4>)
 8010068:	e027      	b.n	80100ba <_dtoa_r+0xea>
 801006a:	4b97      	ldr	r3, [pc, #604]	; (80102c8 <_dtoa_r+0x2f8>)
 801006c:	9300      	str	r3, [sp, #0]
 801006e:	3308      	adds	r3, #8
 8010070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010072:	6013      	str	r3, [r2, #0]
 8010074:	9800      	ldr	r0, [sp, #0]
 8010076:	b013      	add	sp, #76	; 0x4c
 8010078:	ecbd 8b04 	vpop	{d8-d9}
 801007c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010080:	4b90      	ldr	r3, [pc, #576]	; (80102c4 <_dtoa_r+0x2f4>)
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	3303      	adds	r3, #3
 8010086:	e7f3      	b.n	8010070 <_dtoa_r+0xa0>
 8010088:	ed9d 7b02 	vldr	d7, [sp, #8]
 801008c:	2200      	movs	r2, #0
 801008e:	ec51 0b17 	vmov	r0, r1, d7
 8010092:	eeb0 8a47 	vmov.f32	s16, s14
 8010096:	eef0 8a67 	vmov.f32	s17, s15
 801009a:	2300      	movs	r3, #0
 801009c:	f7f0 fd1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80100a0:	4681      	mov	r9, r0
 80100a2:	b160      	cbz	r0, 80100be <_dtoa_r+0xee>
 80100a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100a6:	2301      	movs	r3, #1
 80100a8:	6013      	str	r3, [r2, #0]
 80100aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f000 8568 	beq.w	8010b82 <_dtoa_r+0xbb2>
 80100b2:	4b86      	ldr	r3, [pc, #536]	; (80102cc <_dtoa_r+0x2fc>)
 80100b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80100b6:	6013      	str	r3, [r2, #0]
 80100b8:	3b01      	subs	r3, #1
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	e7da      	b.n	8010074 <_dtoa_r+0xa4>
 80100be:	aa10      	add	r2, sp, #64	; 0x40
 80100c0:	a911      	add	r1, sp, #68	; 0x44
 80100c2:	4620      	mov	r0, r4
 80100c4:	eeb0 0a48 	vmov.f32	s0, s16
 80100c8:	eef0 0a68 	vmov.f32	s1, s17
 80100cc:	f001 f8e0 	bl	8011290 <__d2b>
 80100d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80100d4:	4682      	mov	sl, r0
 80100d6:	2d00      	cmp	r5, #0
 80100d8:	d07f      	beq.n	80101da <_dtoa_r+0x20a>
 80100da:	ee18 3a90 	vmov	r3, s17
 80100de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80100e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80100e6:	ec51 0b18 	vmov	r0, r1, d8
 80100ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80100ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80100f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80100f6:	4619      	mov	r1, r3
 80100f8:	2200      	movs	r2, #0
 80100fa:	4b75      	ldr	r3, [pc, #468]	; (80102d0 <_dtoa_r+0x300>)
 80100fc:	f7f0 f8cc 	bl	8000298 <__aeabi_dsub>
 8010100:	a367      	add	r3, pc, #412	; (adr r3, 80102a0 <_dtoa_r+0x2d0>)
 8010102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010106:	f7f0 fa7f 	bl	8000608 <__aeabi_dmul>
 801010a:	a367      	add	r3, pc, #412	; (adr r3, 80102a8 <_dtoa_r+0x2d8>)
 801010c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010110:	f7f0 f8c4 	bl	800029c <__adddf3>
 8010114:	4606      	mov	r6, r0
 8010116:	4628      	mov	r0, r5
 8010118:	460f      	mov	r7, r1
 801011a:	f7f0 fa0b 	bl	8000534 <__aeabi_i2d>
 801011e:	a364      	add	r3, pc, #400	; (adr r3, 80102b0 <_dtoa_r+0x2e0>)
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	f7f0 fa70 	bl	8000608 <__aeabi_dmul>
 8010128:	4602      	mov	r2, r0
 801012a:	460b      	mov	r3, r1
 801012c:	4630      	mov	r0, r6
 801012e:	4639      	mov	r1, r7
 8010130:	f7f0 f8b4 	bl	800029c <__adddf3>
 8010134:	4606      	mov	r6, r0
 8010136:	460f      	mov	r7, r1
 8010138:	f7f0 fd16 	bl	8000b68 <__aeabi_d2iz>
 801013c:	2200      	movs	r2, #0
 801013e:	4683      	mov	fp, r0
 8010140:	2300      	movs	r3, #0
 8010142:	4630      	mov	r0, r6
 8010144:	4639      	mov	r1, r7
 8010146:	f7f0 fcd1 	bl	8000aec <__aeabi_dcmplt>
 801014a:	b148      	cbz	r0, 8010160 <_dtoa_r+0x190>
 801014c:	4658      	mov	r0, fp
 801014e:	f7f0 f9f1 	bl	8000534 <__aeabi_i2d>
 8010152:	4632      	mov	r2, r6
 8010154:	463b      	mov	r3, r7
 8010156:	f7f0 fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 801015a:	b908      	cbnz	r0, 8010160 <_dtoa_r+0x190>
 801015c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010160:	f1bb 0f16 	cmp.w	fp, #22
 8010164:	d857      	bhi.n	8010216 <_dtoa_r+0x246>
 8010166:	4b5b      	ldr	r3, [pc, #364]	; (80102d4 <_dtoa_r+0x304>)
 8010168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801016c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010170:	ec51 0b18 	vmov	r0, r1, d8
 8010174:	f7f0 fcba 	bl	8000aec <__aeabi_dcmplt>
 8010178:	2800      	cmp	r0, #0
 801017a:	d04e      	beq.n	801021a <_dtoa_r+0x24a>
 801017c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010180:	2300      	movs	r3, #0
 8010182:	930c      	str	r3, [sp, #48]	; 0x30
 8010184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010186:	1b5b      	subs	r3, r3, r5
 8010188:	1e5a      	subs	r2, r3, #1
 801018a:	bf45      	ittet	mi
 801018c:	f1c3 0301 	rsbmi	r3, r3, #1
 8010190:	9305      	strmi	r3, [sp, #20]
 8010192:	2300      	movpl	r3, #0
 8010194:	2300      	movmi	r3, #0
 8010196:	9206      	str	r2, [sp, #24]
 8010198:	bf54      	ite	pl
 801019a:	9305      	strpl	r3, [sp, #20]
 801019c:	9306      	strmi	r3, [sp, #24]
 801019e:	f1bb 0f00 	cmp.w	fp, #0
 80101a2:	db3c      	blt.n	801021e <_dtoa_r+0x24e>
 80101a4:	9b06      	ldr	r3, [sp, #24]
 80101a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80101aa:	445b      	add	r3, fp
 80101ac:	9306      	str	r3, [sp, #24]
 80101ae:	2300      	movs	r3, #0
 80101b0:	9308      	str	r3, [sp, #32]
 80101b2:	9b07      	ldr	r3, [sp, #28]
 80101b4:	2b09      	cmp	r3, #9
 80101b6:	d868      	bhi.n	801028a <_dtoa_r+0x2ba>
 80101b8:	2b05      	cmp	r3, #5
 80101ba:	bfc4      	itt	gt
 80101bc:	3b04      	subgt	r3, #4
 80101be:	9307      	strgt	r3, [sp, #28]
 80101c0:	9b07      	ldr	r3, [sp, #28]
 80101c2:	f1a3 0302 	sub.w	r3, r3, #2
 80101c6:	bfcc      	ite	gt
 80101c8:	2500      	movgt	r5, #0
 80101ca:	2501      	movle	r5, #1
 80101cc:	2b03      	cmp	r3, #3
 80101ce:	f200 8085 	bhi.w	80102dc <_dtoa_r+0x30c>
 80101d2:	e8df f003 	tbb	[pc, r3]
 80101d6:	3b2e      	.short	0x3b2e
 80101d8:	5839      	.short	0x5839
 80101da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80101de:	441d      	add	r5, r3
 80101e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80101e4:	2b20      	cmp	r3, #32
 80101e6:	bfc1      	itttt	gt
 80101e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80101ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80101f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80101f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80101f8:	bfd6      	itet	le
 80101fa:	f1c3 0320 	rsble	r3, r3, #32
 80101fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8010202:	fa06 f003 	lslle.w	r0, r6, r3
 8010206:	f7f0 f985 	bl	8000514 <__aeabi_ui2d>
 801020a:	2201      	movs	r2, #1
 801020c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010210:	3d01      	subs	r5, #1
 8010212:	920e      	str	r2, [sp, #56]	; 0x38
 8010214:	e76f      	b.n	80100f6 <_dtoa_r+0x126>
 8010216:	2301      	movs	r3, #1
 8010218:	e7b3      	b.n	8010182 <_dtoa_r+0x1b2>
 801021a:	900c      	str	r0, [sp, #48]	; 0x30
 801021c:	e7b2      	b.n	8010184 <_dtoa_r+0x1b4>
 801021e:	9b05      	ldr	r3, [sp, #20]
 8010220:	eba3 030b 	sub.w	r3, r3, fp
 8010224:	9305      	str	r3, [sp, #20]
 8010226:	f1cb 0300 	rsb	r3, fp, #0
 801022a:	9308      	str	r3, [sp, #32]
 801022c:	2300      	movs	r3, #0
 801022e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010230:	e7bf      	b.n	80101b2 <_dtoa_r+0x1e2>
 8010232:	2300      	movs	r3, #0
 8010234:	9309      	str	r3, [sp, #36]	; 0x24
 8010236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010238:	2b00      	cmp	r3, #0
 801023a:	dc52      	bgt.n	80102e2 <_dtoa_r+0x312>
 801023c:	2301      	movs	r3, #1
 801023e:	9301      	str	r3, [sp, #4]
 8010240:	9304      	str	r3, [sp, #16]
 8010242:	461a      	mov	r2, r3
 8010244:	920a      	str	r2, [sp, #40]	; 0x28
 8010246:	e00b      	b.n	8010260 <_dtoa_r+0x290>
 8010248:	2301      	movs	r3, #1
 801024a:	e7f3      	b.n	8010234 <_dtoa_r+0x264>
 801024c:	2300      	movs	r3, #0
 801024e:	9309      	str	r3, [sp, #36]	; 0x24
 8010250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010252:	445b      	add	r3, fp
 8010254:	9301      	str	r3, [sp, #4]
 8010256:	3301      	adds	r3, #1
 8010258:	2b01      	cmp	r3, #1
 801025a:	9304      	str	r3, [sp, #16]
 801025c:	bfb8      	it	lt
 801025e:	2301      	movlt	r3, #1
 8010260:	69e0      	ldr	r0, [r4, #28]
 8010262:	2100      	movs	r1, #0
 8010264:	2204      	movs	r2, #4
 8010266:	f102 0614 	add.w	r6, r2, #20
 801026a:	429e      	cmp	r6, r3
 801026c:	d93d      	bls.n	80102ea <_dtoa_r+0x31a>
 801026e:	6041      	str	r1, [r0, #4]
 8010270:	4620      	mov	r0, r4
 8010272:	f000 fceb 	bl	8010c4c <_Balloc>
 8010276:	9000      	str	r0, [sp, #0]
 8010278:	2800      	cmp	r0, #0
 801027a:	d139      	bne.n	80102f0 <_dtoa_r+0x320>
 801027c:	4b16      	ldr	r3, [pc, #88]	; (80102d8 <_dtoa_r+0x308>)
 801027e:	4602      	mov	r2, r0
 8010280:	f240 11af 	movw	r1, #431	; 0x1af
 8010284:	e6bd      	b.n	8010002 <_dtoa_r+0x32>
 8010286:	2301      	movs	r3, #1
 8010288:	e7e1      	b.n	801024e <_dtoa_r+0x27e>
 801028a:	2501      	movs	r5, #1
 801028c:	2300      	movs	r3, #0
 801028e:	9307      	str	r3, [sp, #28]
 8010290:	9509      	str	r5, [sp, #36]	; 0x24
 8010292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010296:	9301      	str	r3, [sp, #4]
 8010298:	9304      	str	r3, [sp, #16]
 801029a:	2200      	movs	r2, #0
 801029c:	2312      	movs	r3, #18
 801029e:	e7d1      	b.n	8010244 <_dtoa_r+0x274>
 80102a0:	636f4361 	.word	0x636f4361
 80102a4:	3fd287a7 	.word	0x3fd287a7
 80102a8:	8b60c8b3 	.word	0x8b60c8b3
 80102ac:	3fc68a28 	.word	0x3fc68a28
 80102b0:	509f79fb 	.word	0x509f79fb
 80102b4:	3fd34413 	.word	0x3fd34413
 80102b8:	0801221d 	.word	0x0801221d
 80102bc:	08012234 	.word	0x08012234
 80102c0:	7ff00000 	.word	0x7ff00000
 80102c4:	08012219 	.word	0x08012219
 80102c8:	08012210 	.word	0x08012210
 80102cc:	080121ed 	.word	0x080121ed
 80102d0:	3ff80000 	.word	0x3ff80000
 80102d4:	08012320 	.word	0x08012320
 80102d8:	0801228c 	.word	0x0801228c
 80102dc:	2301      	movs	r3, #1
 80102de:	9309      	str	r3, [sp, #36]	; 0x24
 80102e0:	e7d7      	b.n	8010292 <_dtoa_r+0x2c2>
 80102e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102e4:	9301      	str	r3, [sp, #4]
 80102e6:	9304      	str	r3, [sp, #16]
 80102e8:	e7ba      	b.n	8010260 <_dtoa_r+0x290>
 80102ea:	3101      	adds	r1, #1
 80102ec:	0052      	lsls	r2, r2, #1
 80102ee:	e7ba      	b.n	8010266 <_dtoa_r+0x296>
 80102f0:	69e3      	ldr	r3, [r4, #28]
 80102f2:	9a00      	ldr	r2, [sp, #0]
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	9b04      	ldr	r3, [sp, #16]
 80102f8:	2b0e      	cmp	r3, #14
 80102fa:	f200 80a8 	bhi.w	801044e <_dtoa_r+0x47e>
 80102fe:	2d00      	cmp	r5, #0
 8010300:	f000 80a5 	beq.w	801044e <_dtoa_r+0x47e>
 8010304:	f1bb 0f00 	cmp.w	fp, #0
 8010308:	dd38      	ble.n	801037c <_dtoa_r+0x3ac>
 801030a:	4bc0      	ldr	r3, [pc, #768]	; (801060c <_dtoa_r+0x63c>)
 801030c:	f00b 020f 	and.w	r2, fp, #15
 8010310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010314:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010318:	e9d3 6700 	ldrd	r6, r7, [r3]
 801031c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010320:	d019      	beq.n	8010356 <_dtoa_r+0x386>
 8010322:	4bbb      	ldr	r3, [pc, #748]	; (8010610 <_dtoa_r+0x640>)
 8010324:	ec51 0b18 	vmov	r0, r1, d8
 8010328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801032c:	f7f0 fa96 	bl	800085c <__aeabi_ddiv>
 8010330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010334:	f008 080f 	and.w	r8, r8, #15
 8010338:	2503      	movs	r5, #3
 801033a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010610 <_dtoa_r+0x640>
 801033e:	f1b8 0f00 	cmp.w	r8, #0
 8010342:	d10a      	bne.n	801035a <_dtoa_r+0x38a>
 8010344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010348:	4632      	mov	r2, r6
 801034a:	463b      	mov	r3, r7
 801034c:	f7f0 fa86 	bl	800085c <__aeabi_ddiv>
 8010350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010354:	e02b      	b.n	80103ae <_dtoa_r+0x3de>
 8010356:	2502      	movs	r5, #2
 8010358:	e7ef      	b.n	801033a <_dtoa_r+0x36a>
 801035a:	f018 0f01 	tst.w	r8, #1
 801035e:	d008      	beq.n	8010372 <_dtoa_r+0x3a2>
 8010360:	4630      	mov	r0, r6
 8010362:	4639      	mov	r1, r7
 8010364:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010368:	f7f0 f94e 	bl	8000608 <__aeabi_dmul>
 801036c:	3501      	adds	r5, #1
 801036e:	4606      	mov	r6, r0
 8010370:	460f      	mov	r7, r1
 8010372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010376:	f109 0908 	add.w	r9, r9, #8
 801037a:	e7e0      	b.n	801033e <_dtoa_r+0x36e>
 801037c:	f000 809f 	beq.w	80104be <_dtoa_r+0x4ee>
 8010380:	f1cb 0600 	rsb	r6, fp, #0
 8010384:	4ba1      	ldr	r3, [pc, #644]	; (801060c <_dtoa_r+0x63c>)
 8010386:	4fa2      	ldr	r7, [pc, #648]	; (8010610 <_dtoa_r+0x640>)
 8010388:	f006 020f 	and.w	r2, r6, #15
 801038c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010394:	ec51 0b18 	vmov	r0, r1, d8
 8010398:	f7f0 f936 	bl	8000608 <__aeabi_dmul>
 801039c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103a0:	1136      	asrs	r6, r6, #4
 80103a2:	2300      	movs	r3, #0
 80103a4:	2502      	movs	r5, #2
 80103a6:	2e00      	cmp	r6, #0
 80103a8:	d17e      	bne.n	80104a8 <_dtoa_r+0x4d8>
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1d0      	bne.n	8010350 <_dtoa_r+0x380>
 80103ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	f000 8084 	beq.w	80104c2 <_dtoa_r+0x4f2>
 80103ba:	4b96      	ldr	r3, [pc, #600]	; (8010614 <_dtoa_r+0x644>)
 80103bc:	2200      	movs	r2, #0
 80103be:	4640      	mov	r0, r8
 80103c0:	4649      	mov	r1, r9
 80103c2:	f7f0 fb93 	bl	8000aec <__aeabi_dcmplt>
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d07b      	beq.n	80104c2 <_dtoa_r+0x4f2>
 80103ca:	9b04      	ldr	r3, [sp, #16]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d078      	beq.n	80104c2 <_dtoa_r+0x4f2>
 80103d0:	9b01      	ldr	r3, [sp, #4]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	dd39      	ble.n	801044a <_dtoa_r+0x47a>
 80103d6:	4b90      	ldr	r3, [pc, #576]	; (8010618 <_dtoa_r+0x648>)
 80103d8:	2200      	movs	r2, #0
 80103da:	4640      	mov	r0, r8
 80103dc:	4649      	mov	r1, r9
 80103de:	f7f0 f913 	bl	8000608 <__aeabi_dmul>
 80103e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103e6:	9e01      	ldr	r6, [sp, #4]
 80103e8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80103ec:	3501      	adds	r5, #1
 80103ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80103f2:	4628      	mov	r0, r5
 80103f4:	f7f0 f89e 	bl	8000534 <__aeabi_i2d>
 80103f8:	4642      	mov	r2, r8
 80103fa:	464b      	mov	r3, r9
 80103fc:	f7f0 f904 	bl	8000608 <__aeabi_dmul>
 8010400:	4b86      	ldr	r3, [pc, #536]	; (801061c <_dtoa_r+0x64c>)
 8010402:	2200      	movs	r2, #0
 8010404:	f7ef ff4a 	bl	800029c <__adddf3>
 8010408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801040c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010410:	9303      	str	r3, [sp, #12]
 8010412:	2e00      	cmp	r6, #0
 8010414:	d158      	bne.n	80104c8 <_dtoa_r+0x4f8>
 8010416:	4b82      	ldr	r3, [pc, #520]	; (8010620 <_dtoa_r+0x650>)
 8010418:	2200      	movs	r2, #0
 801041a:	4640      	mov	r0, r8
 801041c:	4649      	mov	r1, r9
 801041e:	f7ef ff3b 	bl	8000298 <__aeabi_dsub>
 8010422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010426:	4680      	mov	r8, r0
 8010428:	4689      	mov	r9, r1
 801042a:	f7f0 fb7d 	bl	8000b28 <__aeabi_dcmpgt>
 801042e:	2800      	cmp	r0, #0
 8010430:	f040 8296 	bne.w	8010960 <_dtoa_r+0x990>
 8010434:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010438:	4640      	mov	r0, r8
 801043a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801043e:	4649      	mov	r1, r9
 8010440:	f7f0 fb54 	bl	8000aec <__aeabi_dcmplt>
 8010444:	2800      	cmp	r0, #0
 8010446:	f040 8289 	bne.w	801095c <_dtoa_r+0x98c>
 801044a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801044e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010450:	2b00      	cmp	r3, #0
 8010452:	f2c0 814e 	blt.w	80106f2 <_dtoa_r+0x722>
 8010456:	f1bb 0f0e 	cmp.w	fp, #14
 801045a:	f300 814a 	bgt.w	80106f2 <_dtoa_r+0x722>
 801045e:	4b6b      	ldr	r3, [pc, #428]	; (801060c <_dtoa_r+0x63c>)
 8010460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801046a:	2b00      	cmp	r3, #0
 801046c:	f280 80dc 	bge.w	8010628 <_dtoa_r+0x658>
 8010470:	9b04      	ldr	r3, [sp, #16]
 8010472:	2b00      	cmp	r3, #0
 8010474:	f300 80d8 	bgt.w	8010628 <_dtoa_r+0x658>
 8010478:	f040 826f 	bne.w	801095a <_dtoa_r+0x98a>
 801047c:	4b68      	ldr	r3, [pc, #416]	; (8010620 <_dtoa_r+0x650>)
 801047e:	2200      	movs	r2, #0
 8010480:	4640      	mov	r0, r8
 8010482:	4649      	mov	r1, r9
 8010484:	f7f0 f8c0 	bl	8000608 <__aeabi_dmul>
 8010488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801048c:	f7f0 fb42 	bl	8000b14 <__aeabi_dcmpge>
 8010490:	9e04      	ldr	r6, [sp, #16]
 8010492:	4637      	mov	r7, r6
 8010494:	2800      	cmp	r0, #0
 8010496:	f040 8245 	bne.w	8010924 <_dtoa_r+0x954>
 801049a:	9d00      	ldr	r5, [sp, #0]
 801049c:	2331      	movs	r3, #49	; 0x31
 801049e:	f805 3b01 	strb.w	r3, [r5], #1
 80104a2:	f10b 0b01 	add.w	fp, fp, #1
 80104a6:	e241      	b.n	801092c <_dtoa_r+0x95c>
 80104a8:	07f2      	lsls	r2, r6, #31
 80104aa:	d505      	bpl.n	80104b8 <_dtoa_r+0x4e8>
 80104ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104b0:	f7f0 f8aa 	bl	8000608 <__aeabi_dmul>
 80104b4:	3501      	adds	r5, #1
 80104b6:	2301      	movs	r3, #1
 80104b8:	1076      	asrs	r6, r6, #1
 80104ba:	3708      	adds	r7, #8
 80104bc:	e773      	b.n	80103a6 <_dtoa_r+0x3d6>
 80104be:	2502      	movs	r5, #2
 80104c0:	e775      	b.n	80103ae <_dtoa_r+0x3de>
 80104c2:	9e04      	ldr	r6, [sp, #16]
 80104c4:	465f      	mov	r7, fp
 80104c6:	e792      	b.n	80103ee <_dtoa_r+0x41e>
 80104c8:	9900      	ldr	r1, [sp, #0]
 80104ca:	4b50      	ldr	r3, [pc, #320]	; (801060c <_dtoa_r+0x63c>)
 80104cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104d0:	4431      	add	r1, r6
 80104d2:	9102      	str	r1, [sp, #8]
 80104d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104d6:	eeb0 9a47 	vmov.f32	s18, s14
 80104da:	eef0 9a67 	vmov.f32	s19, s15
 80104de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80104e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80104e6:	2900      	cmp	r1, #0
 80104e8:	d044      	beq.n	8010574 <_dtoa_r+0x5a4>
 80104ea:	494e      	ldr	r1, [pc, #312]	; (8010624 <_dtoa_r+0x654>)
 80104ec:	2000      	movs	r0, #0
 80104ee:	f7f0 f9b5 	bl	800085c <__aeabi_ddiv>
 80104f2:	ec53 2b19 	vmov	r2, r3, d9
 80104f6:	f7ef fecf 	bl	8000298 <__aeabi_dsub>
 80104fa:	9d00      	ldr	r5, [sp, #0]
 80104fc:	ec41 0b19 	vmov	d9, r0, r1
 8010500:	4649      	mov	r1, r9
 8010502:	4640      	mov	r0, r8
 8010504:	f7f0 fb30 	bl	8000b68 <__aeabi_d2iz>
 8010508:	4606      	mov	r6, r0
 801050a:	f7f0 f813 	bl	8000534 <__aeabi_i2d>
 801050e:	4602      	mov	r2, r0
 8010510:	460b      	mov	r3, r1
 8010512:	4640      	mov	r0, r8
 8010514:	4649      	mov	r1, r9
 8010516:	f7ef febf 	bl	8000298 <__aeabi_dsub>
 801051a:	3630      	adds	r6, #48	; 0x30
 801051c:	f805 6b01 	strb.w	r6, [r5], #1
 8010520:	ec53 2b19 	vmov	r2, r3, d9
 8010524:	4680      	mov	r8, r0
 8010526:	4689      	mov	r9, r1
 8010528:	f7f0 fae0 	bl	8000aec <__aeabi_dcmplt>
 801052c:	2800      	cmp	r0, #0
 801052e:	d164      	bne.n	80105fa <_dtoa_r+0x62a>
 8010530:	4642      	mov	r2, r8
 8010532:	464b      	mov	r3, r9
 8010534:	4937      	ldr	r1, [pc, #220]	; (8010614 <_dtoa_r+0x644>)
 8010536:	2000      	movs	r0, #0
 8010538:	f7ef feae 	bl	8000298 <__aeabi_dsub>
 801053c:	ec53 2b19 	vmov	r2, r3, d9
 8010540:	f7f0 fad4 	bl	8000aec <__aeabi_dcmplt>
 8010544:	2800      	cmp	r0, #0
 8010546:	f040 80b6 	bne.w	80106b6 <_dtoa_r+0x6e6>
 801054a:	9b02      	ldr	r3, [sp, #8]
 801054c:	429d      	cmp	r5, r3
 801054e:	f43f af7c 	beq.w	801044a <_dtoa_r+0x47a>
 8010552:	4b31      	ldr	r3, [pc, #196]	; (8010618 <_dtoa_r+0x648>)
 8010554:	ec51 0b19 	vmov	r0, r1, d9
 8010558:	2200      	movs	r2, #0
 801055a:	f7f0 f855 	bl	8000608 <__aeabi_dmul>
 801055e:	4b2e      	ldr	r3, [pc, #184]	; (8010618 <_dtoa_r+0x648>)
 8010560:	ec41 0b19 	vmov	d9, r0, r1
 8010564:	2200      	movs	r2, #0
 8010566:	4640      	mov	r0, r8
 8010568:	4649      	mov	r1, r9
 801056a:	f7f0 f84d 	bl	8000608 <__aeabi_dmul>
 801056e:	4680      	mov	r8, r0
 8010570:	4689      	mov	r9, r1
 8010572:	e7c5      	b.n	8010500 <_dtoa_r+0x530>
 8010574:	ec51 0b17 	vmov	r0, r1, d7
 8010578:	f7f0 f846 	bl	8000608 <__aeabi_dmul>
 801057c:	9b02      	ldr	r3, [sp, #8]
 801057e:	9d00      	ldr	r5, [sp, #0]
 8010580:	930f      	str	r3, [sp, #60]	; 0x3c
 8010582:	ec41 0b19 	vmov	d9, r0, r1
 8010586:	4649      	mov	r1, r9
 8010588:	4640      	mov	r0, r8
 801058a:	f7f0 faed 	bl	8000b68 <__aeabi_d2iz>
 801058e:	4606      	mov	r6, r0
 8010590:	f7ef ffd0 	bl	8000534 <__aeabi_i2d>
 8010594:	3630      	adds	r6, #48	; 0x30
 8010596:	4602      	mov	r2, r0
 8010598:	460b      	mov	r3, r1
 801059a:	4640      	mov	r0, r8
 801059c:	4649      	mov	r1, r9
 801059e:	f7ef fe7b 	bl	8000298 <__aeabi_dsub>
 80105a2:	f805 6b01 	strb.w	r6, [r5], #1
 80105a6:	9b02      	ldr	r3, [sp, #8]
 80105a8:	429d      	cmp	r5, r3
 80105aa:	4680      	mov	r8, r0
 80105ac:	4689      	mov	r9, r1
 80105ae:	f04f 0200 	mov.w	r2, #0
 80105b2:	d124      	bne.n	80105fe <_dtoa_r+0x62e>
 80105b4:	4b1b      	ldr	r3, [pc, #108]	; (8010624 <_dtoa_r+0x654>)
 80105b6:	ec51 0b19 	vmov	r0, r1, d9
 80105ba:	f7ef fe6f 	bl	800029c <__adddf3>
 80105be:	4602      	mov	r2, r0
 80105c0:	460b      	mov	r3, r1
 80105c2:	4640      	mov	r0, r8
 80105c4:	4649      	mov	r1, r9
 80105c6:	f7f0 faaf 	bl	8000b28 <__aeabi_dcmpgt>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	d173      	bne.n	80106b6 <_dtoa_r+0x6e6>
 80105ce:	ec53 2b19 	vmov	r2, r3, d9
 80105d2:	4914      	ldr	r1, [pc, #80]	; (8010624 <_dtoa_r+0x654>)
 80105d4:	2000      	movs	r0, #0
 80105d6:	f7ef fe5f 	bl	8000298 <__aeabi_dsub>
 80105da:	4602      	mov	r2, r0
 80105dc:	460b      	mov	r3, r1
 80105de:	4640      	mov	r0, r8
 80105e0:	4649      	mov	r1, r9
 80105e2:	f7f0 fa83 	bl	8000aec <__aeabi_dcmplt>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	f43f af2f 	beq.w	801044a <_dtoa_r+0x47a>
 80105ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80105ee:	1e6b      	subs	r3, r5, #1
 80105f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80105f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80105f6:	2b30      	cmp	r3, #48	; 0x30
 80105f8:	d0f8      	beq.n	80105ec <_dtoa_r+0x61c>
 80105fa:	46bb      	mov	fp, r7
 80105fc:	e04a      	b.n	8010694 <_dtoa_r+0x6c4>
 80105fe:	4b06      	ldr	r3, [pc, #24]	; (8010618 <_dtoa_r+0x648>)
 8010600:	f7f0 f802 	bl	8000608 <__aeabi_dmul>
 8010604:	4680      	mov	r8, r0
 8010606:	4689      	mov	r9, r1
 8010608:	e7bd      	b.n	8010586 <_dtoa_r+0x5b6>
 801060a:	bf00      	nop
 801060c:	08012320 	.word	0x08012320
 8010610:	080122f8 	.word	0x080122f8
 8010614:	3ff00000 	.word	0x3ff00000
 8010618:	40240000 	.word	0x40240000
 801061c:	401c0000 	.word	0x401c0000
 8010620:	40140000 	.word	0x40140000
 8010624:	3fe00000 	.word	0x3fe00000
 8010628:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801062c:	9d00      	ldr	r5, [sp, #0]
 801062e:	4642      	mov	r2, r8
 8010630:	464b      	mov	r3, r9
 8010632:	4630      	mov	r0, r6
 8010634:	4639      	mov	r1, r7
 8010636:	f7f0 f911 	bl	800085c <__aeabi_ddiv>
 801063a:	f7f0 fa95 	bl	8000b68 <__aeabi_d2iz>
 801063e:	9001      	str	r0, [sp, #4]
 8010640:	f7ef ff78 	bl	8000534 <__aeabi_i2d>
 8010644:	4642      	mov	r2, r8
 8010646:	464b      	mov	r3, r9
 8010648:	f7ef ffde 	bl	8000608 <__aeabi_dmul>
 801064c:	4602      	mov	r2, r0
 801064e:	460b      	mov	r3, r1
 8010650:	4630      	mov	r0, r6
 8010652:	4639      	mov	r1, r7
 8010654:	f7ef fe20 	bl	8000298 <__aeabi_dsub>
 8010658:	9e01      	ldr	r6, [sp, #4]
 801065a:	9f04      	ldr	r7, [sp, #16]
 801065c:	3630      	adds	r6, #48	; 0x30
 801065e:	f805 6b01 	strb.w	r6, [r5], #1
 8010662:	9e00      	ldr	r6, [sp, #0]
 8010664:	1bae      	subs	r6, r5, r6
 8010666:	42b7      	cmp	r7, r6
 8010668:	4602      	mov	r2, r0
 801066a:	460b      	mov	r3, r1
 801066c:	d134      	bne.n	80106d8 <_dtoa_r+0x708>
 801066e:	f7ef fe15 	bl	800029c <__adddf3>
 8010672:	4642      	mov	r2, r8
 8010674:	464b      	mov	r3, r9
 8010676:	4606      	mov	r6, r0
 8010678:	460f      	mov	r7, r1
 801067a:	f7f0 fa55 	bl	8000b28 <__aeabi_dcmpgt>
 801067e:	b9c8      	cbnz	r0, 80106b4 <_dtoa_r+0x6e4>
 8010680:	4642      	mov	r2, r8
 8010682:	464b      	mov	r3, r9
 8010684:	4630      	mov	r0, r6
 8010686:	4639      	mov	r1, r7
 8010688:	f7f0 fa26 	bl	8000ad8 <__aeabi_dcmpeq>
 801068c:	b110      	cbz	r0, 8010694 <_dtoa_r+0x6c4>
 801068e:	9b01      	ldr	r3, [sp, #4]
 8010690:	07db      	lsls	r3, r3, #31
 8010692:	d40f      	bmi.n	80106b4 <_dtoa_r+0x6e4>
 8010694:	4651      	mov	r1, sl
 8010696:	4620      	mov	r0, r4
 8010698:	f000 fb18 	bl	8010ccc <_Bfree>
 801069c:	2300      	movs	r3, #0
 801069e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80106a0:	702b      	strb	r3, [r5, #0]
 80106a2:	f10b 0301 	add.w	r3, fp, #1
 80106a6:	6013      	str	r3, [r2, #0]
 80106a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	f43f ace2 	beq.w	8010074 <_dtoa_r+0xa4>
 80106b0:	601d      	str	r5, [r3, #0]
 80106b2:	e4df      	b.n	8010074 <_dtoa_r+0xa4>
 80106b4:	465f      	mov	r7, fp
 80106b6:	462b      	mov	r3, r5
 80106b8:	461d      	mov	r5, r3
 80106ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106be:	2a39      	cmp	r2, #57	; 0x39
 80106c0:	d106      	bne.n	80106d0 <_dtoa_r+0x700>
 80106c2:	9a00      	ldr	r2, [sp, #0]
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d1f7      	bne.n	80106b8 <_dtoa_r+0x6e8>
 80106c8:	9900      	ldr	r1, [sp, #0]
 80106ca:	2230      	movs	r2, #48	; 0x30
 80106cc:	3701      	adds	r7, #1
 80106ce:	700a      	strb	r2, [r1, #0]
 80106d0:	781a      	ldrb	r2, [r3, #0]
 80106d2:	3201      	adds	r2, #1
 80106d4:	701a      	strb	r2, [r3, #0]
 80106d6:	e790      	b.n	80105fa <_dtoa_r+0x62a>
 80106d8:	4ba3      	ldr	r3, [pc, #652]	; (8010968 <_dtoa_r+0x998>)
 80106da:	2200      	movs	r2, #0
 80106dc:	f7ef ff94 	bl	8000608 <__aeabi_dmul>
 80106e0:	2200      	movs	r2, #0
 80106e2:	2300      	movs	r3, #0
 80106e4:	4606      	mov	r6, r0
 80106e6:	460f      	mov	r7, r1
 80106e8:	f7f0 f9f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80106ec:	2800      	cmp	r0, #0
 80106ee:	d09e      	beq.n	801062e <_dtoa_r+0x65e>
 80106f0:	e7d0      	b.n	8010694 <_dtoa_r+0x6c4>
 80106f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106f4:	2a00      	cmp	r2, #0
 80106f6:	f000 80ca 	beq.w	801088e <_dtoa_r+0x8be>
 80106fa:	9a07      	ldr	r2, [sp, #28]
 80106fc:	2a01      	cmp	r2, #1
 80106fe:	f300 80ad 	bgt.w	801085c <_dtoa_r+0x88c>
 8010702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010704:	2a00      	cmp	r2, #0
 8010706:	f000 80a5 	beq.w	8010854 <_dtoa_r+0x884>
 801070a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801070e:	9e08      	ldr	r6, [sp, #32]
 8010710:	9d05      	ldr	r5, [sp, #20]
 8010712:	9a05      	ldr	r2, [sp, #20]
 8010714:	441a      	add	r2, r3
 8010716:	9205      	str	r2, [sp, #20]
 8010718:	9a06      	ldr	r2, [sp, #24]
 801071a:	2101      	movs	r1, #1
 801071c:	441a      	add	r2, r3
 801071e:	4620      	mov	r0, r4
 8010720:	9206      	str	r2, [sp, #24]
 8010722:	f000 fb89 	bl	8010e38 <__i2b>
 8010726:	4607      	mov	r7, r0
 8010728:	b165      	cbz	r5, 8010744 <_dtoa_r+0x774>
 801072a:	9b06      	ldr	r3, [sp, #24]
 801072c:	2b00      	cmp	r3, #0
 801072e:	dd09      	ble.n	8010744 <_dtoa_r+0x774>
 8010730:	42ab      	cmp	r3, r5
 8010732:	9a05      	ldr	r2, [sp, #20]
 8010734:	bfa8      	it	ge
 8010736:	462b      	movge	r3, r5
 8010738:	1ad2      	subs	r2, r2, r3
 801073a:	9205      	str	r2, [sp, #20]
 801073c:	9a06      	ldr	r2, [sp, #24]
 801073e:	1aed      	subs	r5, r5, r3
 8010740:	1ad3      	subs	r3, r2, r3
 8010742:	9306      	str	r3, [sp, #24]
 8010744:	9b08      	ldr	r3, [sp, #32]
 8010746:	b1f3      	cbz	r3, 8010786 <_dtoa_r+0x7b6>
 8010748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801074a:	2b00      	cmp	r3, #0
 801074c:	f000 80a3 	beq.w	8010896 <_dtoa_r+0x8c6>
 8010750:	2e00      	cmp	r6, #0
 8010752:	dd10      	ble.n	8010776 <_dtoa_r+0x7a6>
 8010754:	4639      	mov	r1, r7
 8010756:	4632      	mov	r2, r6
 8010758:	4620      	mov	r0, r4
 801075a:	f000 fc2d 	bl	8010fb8 <__pow5mult>
 801075e:	4652      	mov	r2, sl
 8010760:	4601      	mov	r1, r0
 8010762:	4607      	mov	r7, r0
 8010764:	4620      	mov	r0, r4
 8010766:	f000 fb7d 	bl	8010e64 <__multiply>
 801076a:	4651      	mov	r1, sl
 801076c:	4680      	mov	r8, r0
 801076e:	4620      	mov	r0, r4
 8010770:	f000 faac 	bl	8010ccc <_Bfree>
 8010774:	46c2      	mov	sl, r8
 8010776:	9b08      	ldr	r3, [sp, #32]
 8010778:	1b9a      	subs	r2, r3, r6
 801077a:	d004      	beq.n	8010786 <_dtoa_r+0x7b6>
 801077c:	4651      	mov	r1, sl
 801077e:	4620      	mov	r0, r4
 8010780:	f000 fc1a 	bl	8010fb8 <__pow5mult>
 8010784:	4682      	mov	sl, r0
 8010786:	2101      	movs	r1, #1
 8010788:	4620      	mov	r0, r4
 801078a:	f000 fb55 	bl	8010e38 <__i2b>
 801078e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010790:	2b00      	cmp	r3, #0
 8010792:	4606      	mov	r6, r0
 8010794:	f340 8081 	ble.w	801089a <_dtoa_r+0x8ca>
 8010798:	461a      	mov	r2, r3
 801079a:	4601      	mov	r1, r0
 801079c:	4620      	mov	r0, r4
 801079e:	f000 fc0b 	bl	8010fb8 <__pow5mult>
 80107a2:	9b07      	ldr	r3, [sp, #28]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	4606      	mov	r6, r0
 80107a8:	dd7a      	ble.n	80108a0 <_dtoa_r+0x8d0>
 80107aa:	f04f 0800 	mov.w	r8, #0
 80107ae:	6933      	ldr	r3, [r6, #16]
 80107b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80107b4:	6918      	ldr	r0, [r3, #16]
 80107b6:	f000 faf1 	bl	8010d9c <__hi0bits>
 80107ba:	f1c0 0020 	rsb	r0, r0, #32
 80107be:	9b06      	ldr	r3, [sp, #24]
 80107c0:	4418      	add	r0, r3
 80107c2:	f010 001f 	ands.w	r0, r0, #31
 80107c6:	f000 8094 	beq.w	80108f2 <_dtoa_r+0x922>
 80107ca:	f1c0 0320 	rsb	r3, r0, #32
 80107ce:	2b04      	cmp	r3, #4
 80107d0:	f340 8085 	ble.w	80108de <_dtoa_r+0x90e>
 80107d4:	9b05      	ldr	r3, [sp, #20]
 80107d6:	f1c0 001c 	rsb	r0, r0, #28
 80107da:	4403      	add	r3, r0
 80107dc:	9305      	str	r3, [sp, #20]
 80107de:	9b06      	ldr	r3, [sp, #24]
 80107e0:	4403      	add	r3, r0
 80107e2:	4405      	add	r5, r0
 80107e4:	9306      	str	r3, [sp, #24]
 80107e6:	9b05      	ldr	r3, [sp, #20]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	dd05      	ble.n	80107f8 <_dtoa_r+0x828>
 80107ec:	4651      	mov	r1, sl
 80107ee:	461a      	mov	r2, r3
 80107f0:	4620      	mov	r0, r4
 80107f2:	f000 fc3b 	bl	801106c <__lshift>
 80107f6:	4682      	mov	sl, r0
 80107f8:	9b06      	ldr	r3, [sp, #24]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	dd05      	ble.n	801080a <_dtoa_r+0x83a>
 80107fe:	4631      	mov	r1, r6
 8010800:	461a      	mov	r2, r3
 8010802:	4620      	mov	r0, r4
 8010804:	f000 fc32 	bl	801106c <__lshift>
 8010808:	4606      	mov	r6, r0
 801080a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801080c:	2b00      	cmp	r3, #0
 801080e:	d072      	beq.n	80108f6 <_dtoa_r+0x926>
 8010810:	4631      	mov	r1, r6
 8010812:	4650      	mov	r0, sl
 8010814:	f000 fc96 	bl	8011144 <__mcmp>
 8010818:	2800      	cmp	r0, #0
 801081a:	da6c      	bge.n	80108f6 <_dtoa_r+0x926>
 801081c:	2300      	movs	r3, #0
 801081e:	4651      	mov	r1, sl
 8010820:	220a      	movs	r2, #10
 8010822:	4620      	mov	r0, r4
 8010824:	f000 fa74 	bl	8010d10 <__multadd>
 8010828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801082a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801082e:	4682      	mov	sl, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	f000 81b0 	beq.w	8010b96 <_dtoa_r+0xbc6>
 8010836:	2300      	movs	r3, #0
 8010838:	4639      	mov	r1, r7
 801083a:	220a      	movs	r2, #10
 801083c:	4620      	mov	r0, r4
 801083e:	f000 fa67 	bl	8010d10 <__multadd>
 8010842:	9b01      	ldr	r3, [sp, #4]
 8010844:	2b00      	cmp	r3, #0
 8010846:	4607      	mov	r7, r0
 8010848:	f300 8096 	bgt.w	8010978 <_dtoa_r+0x9a8>
 801084c:	9b07      	ldr	r3, [sp, #28]
 801084e:	2b02      	cmp	r3, #2
 8010850:	dc59      	bgt.n	8010906 <_dtoa_r+0x936>
 8010852:	e091      	b.n	8010978 <_dtoa_r+0x9a8>
 8010854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801085a:	e758      	b.n	801070e <_dtoa_r+0x73e>
 801085c:	9b04      	ldr	r3, [sp, #16]
 801085e:	1e5e      	subs	r6, r3, #1
 8010860:	9b08      	ldr	r3, [sp, #32]
 8010862:	42b3      	cmp	r3, r6
 8010864:	bfbf      	itttt	lt
 8010866:	9b08      	ldrlt	r3, [sp, #32]
 8010868:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801086a:	9608      	strlt	r6, [sp, #32]
 801086c:	1af3      	sublt	r3, r6, r3
 801086e:	bfb4      	ite	lt
 8010870:	18d2      	addlt	r2, r2, r3
 8010872:	1b9e      	subge	r6, r3, r6
 8010874:	9b04      	ldr	r3, [sp, #16]
 8010876:	bfbc      	itt	lt
 8010878:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801087a:	2600      	movlt	r6, #0
 801087c:	2b00      	cmp	r3, #0
 801087e:	bfb7      	itett	lt
 8010880:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010884:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010888:	1a9d      	sublt	r5, r3, r2
 801088a:	2300      	movlt	r3, #0
 801088c:	e741      	b.n	8010712 <_dtoa_r+0x742>
 801088e:	9e08      	ldr	r6, [sp, #32]
 8010890:	9d05      	ldr	r5, [sp, #20]
 8010892:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010894:	e748      	b.n	8010728 <_dtoa_r+0x758>
 8010896:	9a08      	ldr	r2, [sp, #32]
 8010898:	e770      	b.n	801077c <_dtoa_r+0x7ac>
 801089a:	9b07      	ldr	r3, [sp, #28]
 801089c:	2b01      	cmp	r3, #1
 801089e:	dc19      	bgt.n	80108d4 <_dtoa_r+0x904>
 80108a0:	9b02      	ldr	r3, [sp, #8]
 80108a2:	b9bb      	cbnz	r3, 80108d4 <_dtoa_r+0x904>
 80108a4:	9b03      	ldr	r3, [sp, #12]
 80108a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108aa:	b99b      	cbnz	r3, 80108d4 <_dtoa_r+0x904>
 80108ac:	9b03      	ldr	r3, [sp, #12]
 80108ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80108b2:	0d1b      	lsrs	r3, r3, #20
 80108b4:	051b      	lsls	r3, r3, #20
 80108b6:	b183      	cbz	r3, 80108da <_dtoa_r+0x90a>
 80108b8:	9b05      	ldr	r3, [sp, #20]
 80108ba:	3301      	adds	r3, #1
 80108bc:	9305      	str	r3, [sp, #20]
 80108be:	9b06      	ldr	r3, [sp, #24]
 80108c0:	3301      	adds	r3, #1
 80108c2:	9306      	str	r3, [sp, #24]
 80108c4:	f04f 0801 	mov.w	r8, #1
 80108c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	f47f af6f 	bne.w	80107ae <_dtoa_r+0x7de>
 80108d0:	2001      	movs	r0, #1
 80108d2:	e774      	b.n	80107be <_dtoa_r+0x7ee>
 80108d4:	f04f 0800 	mov.w	r8, #0
 80108d8:	e7f6      	b.n	80108c8 <_dtoa_r+0x8f8>
 80108da:	4698      	mov	r8, r3
 80108dc:	e7f4      	b.n	80108c8 <_dtoa_r+0x8f8>
 80108de:	d082      	beq.n	80107e6 <_dtoa_r+0x816>
 80108e0:	9a05      	ldr	r2, [sp, #20]
 80108e2:	331c      	adds	r3, #28
 80108e4:	441a      	add	r2, r3
 80108e6:	9205      	str	r2, [sp, #20]
 80108e8:	9a06      	ldr	r2, [sp, #24]
 80108ea:	441a      	add	r2, r3
 80108ec:	441d      	add	r5, r3
 80108ee:	9206      	str	r2, [sp, #24]
 80108f0:	e779      	b.n	80107e6 <_dtoa_r+0x816>
 80108f2:	4603      	mov	r3, r0
 80108f4:	e7f4      	b.n	80108e0 <_dtoa_r+0x910>
 80108f6:	9b04      	ldr	r3, [sp, #16]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	dc37      	bgt.n	801096c <_dtoa_r+0x99c>
 80108fc:	9b07      	ldr	r3, [sp, #28]
 80108fe:	2b02      	cmp	r3, #2
 8010900:	dd34      	ble.n	801096c <_dtoa_r+0x99c>
 8010902:	9b04      	ldr	r3, [sp, #16]
 8010904:	9301      	str	r3, [sp, #4]
 8010906:	9b01      	ldr	r3, [sp, #4]
 8010908:	b963      	cbnz	r3, 8010924 <_dtoa_r+0x954>
 801090a:	4631      	mov	r1, r6
 801090c:	2205      	movs	r2, #5
 801090e:	4620      	mov	r0, r4
 8010910:	f000 f9fe 	bl	8010d10 <__multadd>
 8010914:	4601      	mov	r1, r0
 8010916:	4606      	mov	r6, r0
 8010918:	4650      	mov	r0, sl
 801091a:	f000 fc13 	bl	8011144 <__mcmp>
 801091e:	2800      	cmp	r0, #0
 8010920:	f73f adbb 	bgt.w	801049a <_dtoa_r+0x4ca>
 8010924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010926:	9d00      	ldr	r5, [sp, #0]
 8010928:	ea6f 0b03 	mvn.w	fp, r3
 801092c:	f04f 0800 	mov.w	r8, #0
 8010930:	4631      	mov	r1, r6
 8010932:	4620      	mov	r0, r4
 8010934:	f000 f9ca 	bl	8010ccc <_Bfree>
 8010938:	2f00      	cmp	r7, #0
 801093a:	f43f aeab 	beq.w	8010694 <_dtoa_r+0x6c4>
 801093e:	f1b8 0f00 	cmp.w	r8, #0
 8010942:	d005      	beq.n	8010950 <_dtoa_r+0x980>
 8010944:	45b8      	cmp	r8, r7
 8010946:	d003      	beq.n	8010950 <_dtoa_r+0x980>
 8010948:	4641      	mov	r1, r8
 801094a:	4620      	mov	r0, r4
 801094c:	f000 f9be 	bl	8010ccc <_Bfree>
 8010950:	4639      	mov	r1, r7
 8010952:	4620      	mov	r0, r4
 8010954:	f000 f9ba 	bl	8010ccc <_Bfree>
 8010958:	e69c      	b.n	8010694 <_dtoa_r+0x6c4>
 801095a:	2600      	movs	r6, #0
 801095c:	4637      	mov	r7, r6
 801095e:	e7e1      	b.n	8010924 <_dtoa_r+0x954>
 8010960:	46bb      	mov	fp, r7
 8010962:	4637      	mov	r7, r6
 8010964:	e599      	b.n	801049a <_dtoa_r+0x4ca>
 8010966:	bf00      	nop
 8010968:	40240000 	.word	0x40240000
 801096c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801096e:	2b00      	cmp	r3, #0
 8010970:	f000 80c8 	beq.w	8010b04 <_dtoa_r+0xb34>
 8010974:	9b04      	ldr	r3, [sp, #16]
 8010976:	9301      	str	r3, [sp, #4]
 8010978:	2d00      	cmp	r5, #0
 801097a:	dd05      	ble.n	8010988 <_dtoa_r+0x9b8>
 801097c:	4639      	mov	r1, r7
 801097e:	462a      	mov	r2, r5
 8010980:	4620      	mov	r0, r4
 8010982:	f000 fb73 	bl	801106c <__lshift>
 8010986:	4607      	mov	r7, r0
 8010988:	f1b8 0f00 	cmp.w	r8, #0
 801098c:	d05b      	beq.n	8010a46 <_dtoa_r+0xa76>
 801098e:	6879      	ldr	r1, [r7, #4]
 8010990:	4620      	mov	r0, r4
 8010992:	f000 f95b 	bl	8010c4c <_Balloc>
 8010996:	4605      	mov	r5, r0
 8010998:	b928      	cbnz	r0, 80109a6 <_dtoa_r+0x9d6>
 801099a:	4b83      	ldr	r3, [pc, #524]	; (8010ba8 <_dtoa_r+0xbd8>)
 801099c:	4602      	mov	r2, r0
 801099e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80109a2:	f7ff bb2e 	b.w	8010002 <_dtoa_r+0x32>
 80109a6:	693a      	ldr	r2, [r7, #16]
 80109a8:	3202      	adds	r2, #2
 80109aa:	0092      	lsls	r2, r2, #2
 80109ac:	f107 010c 	add.w	r1, r7, #12
 80109b0:	300c      	adds	r0, #12
 80109b2:	f7ff fa77 	bl	800fea4 <memcpy>
 80109b6:	2201      	movs	r2, #1
 80109b8:	4629      	mov	r1, r5
 80109ba:	4620      	mov	r0, r4
 80109bc:	f000 fb56 	bl	801106c <__lshift>
 80109c0:	9b00      	ldr	r3, [sp, #0]
 80109c2:	3301      	adds	r3, #1
 80109c4:	9304      	str	r3, [sp, #16]
 80109c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109ca:	4413      	add	r3, r2
 80109cc:	9308      	str	r3, [sp, #32]
 80109ce:	9b02      	ldr	r3, [sp, #8]
 80109d0:	f003 0301 	and.w	r3, r3, #1
 80109d4:	46b8      	mov	r8, r7
 80109d6:	9306      	str	r3, [sp, #24]
 80109d8:	4607      	mov	r7, r0
 80109da:	9b04      	ldr	r3, [sp, #16]
 80109dc:	4631      	mov	r1, r6
 80109de:	3b01      	subs	r3, #1
 80109e0:	4650      	mov	r0, sl
 80109e2:	9301      	str	r3, [sp, #4]
 80109e4:	f7ff fa6c 	bl	800fec0 <quorem>
 80109e8:	4641      	mov	r1, r8
 80109ea:	9002      	str	r0, [sp, #8]
 80109ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80109f0:	4650      	mov	r0, sl
 80109f2:	f000 fba7 	bl	8011144 <__mcmp>
 80109f6:	463a      	mov	r2, r7
 80109f8:	9005      	str	r0, [sp, #20]
 80109fa:	4631      	mov	r1, r6
 80109fc:	4620      	mov	r0, r4
 80109fe:	f000 fbbd 	bl	801117c <__mdiff>
 8010a02:	68c2      	ldr	r2, [r0, #12]
 8010a04:	4605      	mov	r5, r0
 8010a06:	bb02      	cbnz	r2, 8010a4a <_dtoa_r+0xa7a>
 8010a08:	4601      	mov	r1, r0
 8010a0a:	4650      	mov	r0, sl
 8010a0c:	f000 fb9a 	bl	8011144 <__mcmp>
 8010a10:	4602      	mov	r2, r0
 8010a12:	4629      	mov	r1, r5
 8010a14:	4620      	mov	r0, r4
 8010a16:	9209      	str	r2, [sp, #36]	; 0x24
 8010a18:	f000 f958 	bl	8010ccc <_Bfree>
 8010a1c:	9b07      	ldr	r3, [sp, #28]
 8010a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a20:	9d04      	ldr	r5, [sp, #16]
 8010a22:	ea43 0102 	orr.w	r1, r3, r2
 8010a26:	9b06      	ldr	r3, [sp, #24]
 8010a28:	4319      	orrs	r1, r3
 8010a2a:	d110      	bne.n	8010a4e <_dtoa_r+0xa7e>
 8010a2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010a30:	d029      	beq.n	8010a86 <_dtoa_r+0xab6>
 8010a32:	9b05      	ldr	r3, [sp, #20]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	dd02      	ble.n	8010a3e <_dtoa_r+0xa6e>
 8010a38:	9b02      	ldr	r3, [sp, #8]
 8010a3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010a3e:	9b01      	ldr	r3, [sp, #4]
 8010a40:	f883 9000 	strb.w	r9, [r3]
 8010a44:	e774      	b.n	8010930 <_dtoa_r+0x960>
 8010a46:	4638      	mov	r0, r7
 8010a48:	e7ba      	b.n	80109c0 <_dtoa_r+0x9f0>
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	e7e1      	b.n	8010a12 <_dtoa_r+0xa42>
 8010a4e:	9b05      	ldr	r3, [sp, #20]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	db04      	blt.n	8010a5e <_dtoa_r+0xa8e>
 8010a54:	9907      	ldr	r1, [sp, #28]
 8010a56:	430b      	orrs	r3, r1
 8010a58:	9906      	ldr	r1, [sp, #24]
 8010a5a:	430b      	orrs	r3, r1
 8010a5c:	d120      	bne.n	8010aa0 <_dtoa_r+0xad0>
 8010a5e:	2a00      	cmp	r2, #0
 8010a60:	dded      	ble.n	8010a3e <_dtoa_r+0xa6e>
 8010a62:	4651      	mov	r1, sl
 8010a64:	2201      	movs	r2, #1
 8010a66:	4620      	mov	r0, r4
 8010a68:	f000 fb00 	bl	801106c <__lshift>
 8010a6c:	4631      	mov	r1, r6
 8010a6e:	4682      	mov	sl, r0
 8010a70:	f000 fb68 	bl	8011144 <__mcmp>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	dc03      	bgt.n	8010a80 <_dtoa_r+0xab0>
 8010a78:	d1e1      	bne.n	8010a3e <_dtoa_r+0xa6e>
 8010a7a:	f019 0f01 	tst.w	r9, #1
 8010a7e:	d0de      	beq.n	8010a3e <_dtoa_r+0xa6e>
 8010a80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010a84:	d1d8      	bne.n	8010a38 <_dtoa_r+0xa68>
 8010a86:	9a01      	ldr	r2, [sp, #4]
 8010a88:	2339      	movs	r3, #57	; 0x39
 8010a8a:	7013      	strb	r3, [r2, #0]
 8010a8c:	462b      	mov	r3, r5
 8010a8e:	461d      	mov	r5, r3
 8010a90:	3b01      	subs	r3, #1
 8010a92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010a96:	2a39      	cmp	r2, #57	; 0x39
 8010a98:	d06c      	beq.n	8010b74 <_dtoa_r+0xba4>
 8010a9a:	3201      	adds	r2, #1
 8010a9c:	701a      	strb	r2, [r3, #0]
 8010a9e:	e747      	b.n	8010930 <_dtoa_r+0x960>
 8010aa0:	2a00      	cmp	r2, #0
 8010aa2:	dd07      	ble.n	8010ab4 <_dtoa_r+0xae4>
 8010aa4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010aa8:	d0ed      	beq.n	8010a86 <_dtoa_r+0xab6>
 8010aaa:	9a01      	ldr	r2, [sp, #4]
 8010aac:	f109 0301 	add.w	r3, r9, #1
 8010ab0:	7013      	strb	r3, [r2, #0]
 8010ab2:	e73d      	b.n	8010930 <_dtoa_r+0x960>
 8010ab4:	9b04      	ldr	r3, [sp, #16]
 8010ab6:	9a08      	ldr	r2, [sp, #32]
 8010ab8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d043      	beq.n	8010b48 <_dtoa_r+0xb78>
 8010ac0:	4651      	mov	r1, sl
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	220a      	movs	r2, #10
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f000 f922 	bl	8010d10 <__multadd>
 8010acc:	45b8      	cmp	r8, r7
 8010ace:	4682      	mov	sl, r0
 8010ad0:	f04f 0300 	mov.w	r3, #0
 8010ad4:	f04f 020a 	mov.w	r2, #10
 8010ad8:	4641      	mov	r1, r8
 8010ada:	4620      	mov	r0, r4
 8010adc:	d107      	bne.n	8010aee <_dtoa_r+0xb1e>
 8010ade:	f000 f917 	bl	8010d10 <__multadd>
 8010ae2:	4680      	mov	r8, r0
 8010ae4:	4607      	mov	r7, r0
 8010ae6:	9b04      	ldr	r3, [sp, #16]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	9304      	str	r3, [sp, #16]
 8010aec:	e775      	b.n	80109da <_dtoa_r+0xa0a>
 8010aee:	f000 f90f 	bl	8010d10 <__multadd>
 8010af2:	4639      	mov	r1, r7
 8010af4:	4680      	mov	r8, r0
 8010af6:	2300      	movs	r3, #0
 8010af8:	220a      	movs	r2, #10
 8010afa:	4620      	mov	r0, r4
 8010afc:	f000 f908 	bl	8010d10 <__multadd>
 8010b00:	4607      	mov	r7, r0
 8010b02:	e7f0      	b.n	8010ae6 <_dtoa_r+0xb16>
 8010b04:	9b04      	ldr	r3, [sp, #16]
 8010b06:	9301      	str	r3, [sp, #4]
 8010b08:	9d00      	ldr	r5, [sp, #0]
 8010b0a:	4631      	mov	r1, r6
 8010b0c:	4650      	mov	r0, sl
 8010b0e:	f7ff f9d7 	bl	800fec0 <quorem>
 8010b12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010b16:	9b00      	ldr	r3, [sp, #0]
 8010b18:	f805 9b01 	strb.w	r9, [r5], #1
 8010b1c:	1aea      	subs	r2, r5, r3
 8010b1e:	9b01      	ldr	r3, [sp, #4]
 8010b20:	4293      	cmp	r3, r2
 8010b22:	dd07      	ble.n	8010b34 <_dtoa_r+0xb64>
 8010b24:	4651      	mov	r1, sl
 8010b26:	2300      	movs	r3, #0
 8010b28:	220a      	movs	r2, #10
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	f000 f8f0 	bl	8010d10 <__multadd>
 8010b30:	4682      	mov	sl, r0
 8010b32:	e7ea      	b.n	8010b0a <_dtoa_r+0xb3a>
 8010b34:	9b01      	ldr	r3, [sp, #4]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	bfc8      	it	gt
 8010b3a:	461d      	movgt	r5, r3
 8010b3c:	9b00      	ldr	r3, [sp, #0]
 8010b3e:	bfd8      	it	le
 8010b40:	2501      	movle	r5, #1
 8010b42:	441d      	add	r5, r3
 8010b44:	f04f 0800 	mov.w	r8, #0
 8010b48:	4651      	mov	r1, sl
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f000 fa8d 	bl	801106c <__lshift>
 8010b52:	4631      	mov	r1, r6
 8010b54:	4682      	mov	sl, r0
 8010b56:	f000 faf5 	bl	8011144 <__mcmp>
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	dc96      	bgt.n	8010a8c <_dtoa_r+0xabc>
 8010b5e:	d102      	bne.n	8010b66 <_dtoa_r+0xb96>
 8010b60:	f019 0f01 	tst.w	r9, #1
 8010b64:	d192      	bne.n	8010a8c <_dtoa_r+0xabc>
 8010b66:	462b      	mov	r3, r5
 8010b68:	461d      	mov	r5, r3
 8010b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b6e:	2a30      	cmp	r2, #48	; 0x30
 8010b70:	d0fa      	beq.n	8010b68 <_dtoa_r+0xb98>
 8010b72:	e6dd      	b.n	8010930 <_dtoa_r+0x960>
 8010b74:	9a00      	ldr	r2, [sp, #0]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d189      	bne.n	8010a8e <_dtoa_r+0xabe>
 8010b7a:	f10b 0b01 	add.w	fp, fp, #1
 8010b7e:	2331      	movs	r3, #49	; 0x31
 8010b80:	e796      	b.n	8010ab0 <_dtoa_r+0xae0>
 8010b82:	4b0a      	ldr	r3, [pc, #40]	; (8010bac <_dtoa_r+0xbdc>)
 8010b84:	f7ff ba99 	b.w	80100ba <_dtoa_r+0xea>
 8010b88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f47f aa6d 	bne.w	801006a <_dtoa_r+0x9a>
 8010b90:	4b07      	ldr	r3, [pc, #28]	; (8010bb0 <_dtoa_r+0xbe0>)
 8010b92:	f7ff ba92 	b.w	80100ba <_dtoa_r+0xea>
 8010b96:	9b01      	ldr	r3, [sp, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	dcb5      	bgt.n	8010b08 <_dtoa_r+0xb38>
 8010b9c:	9b07      	ldr	r3, [sp, #28]
 8010b9e:	2b02      	cmp	r3, #2
 8010ba0:	f73f aeb1 	bgt.w	8010906 <_dtoa_r+0x936>
 8010ba4:	e7b0      	b.n	8010b08 <_dtoa_r+0xb38>
 8010ba6:	bf00      	nop
 8010ba8:	0801228c 	.word	0x0801228c
 8010bac:	080121ec 	.word	0x080121ec
 8010bb0:	08012210 	.word	0x08012210

08010bb4 <_free_r>:
 8010bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bb6:	2900      	cmp	r1, #0
 8010bb8:	d044      	beq.n	8010c44 <_free_r+0x90>
 8010bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bbe:	9001      	str	r0, [sp, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8010bc6:	bfb8      	it	lt
 8010bc8:	18e4      	addlt	r4, r4, r3
 8010bca:	f7fe fb69 	bl	800f2a0 <__malloc_lock>
 8010bce:	4a1e      	ldr	r2, [pc, #120]	; (8010c48 <_free_r+0x94>)
 8010bd0:	9801      	ldr	r0, [sp, #4]
 8010bd2:	6813      	ldr	r3, [r2, #0]
 8010bd4:	b933      	cbnz	r3, 8010be4 <_free_r+0x30>
 8010bd6:	6063      	str	r3, [r4, #4]
 8010bd8:	6014      	str	r4, [r2, #0]
 8010bda:	b003      	add	sp, #12
 8010bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010be0:	f7fe bb64 	b.w	800f2ac <__malloc_unlock>
 8010be4:	42a3      	cmp	r3, r4
 8010be6:	d908      	bls.n	8010bfa <_free_r+0x46>
 8010be8:	6825      	ldr	r5, [r4, #0]
 8010bea:	1961      	adds	r1, r4, r5
 8010bec:	428b      	cmp	r3, r1
 8010bee:	bf01      	itttt	eq
 8010bf0:	6819      	ldreq	r1, [r3, #0]
 8010bf2:	685b      	ldreq	r3, [r3, #4]
 8010bf4:	1949      	addeq	r1, r1, r5
 8010bf6:	6021      	streq	r1, [r4, #0]
 8010bf8:	e7ed      	b.n	8010bd6 <_free_r+0x22>
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	b10b      	cbz	r3, 8010c04 <_free_r+0x50>
 8010c00:	42a3      	cmp	r3, r4
 8010c02:	d9fa      	bls.n	8010bfa <_free_r+0x46>
 8010c04:	6811      	ldr	r1, [r2, #0]
 8010c06:	1855      	adds	r5, r2, r1
 8010c08:	42a5      	cmp	r5, r4
 8010c0a:	d10b      	bne.n	8010c24 <_free_r+0x70>
 8010c0c:	6824      	ldr	r4, [r4, #0]
 8010c0e:	4421      	add	r1, r4
 8010c10:	1854      	adds	r4, r2, r1
 8010c12:	42a3      	cmp	r3, r4
 8010c14:	6011      	str	r1, [r2, #0]
 8010c16:	d1e0      	bne.n	8010bda <_free_r+0x26>
 8010c18:	681c      	ldr	r4, [r3, #0]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	6053      	str	r3, [r2, #4]
 8010c1e:	440c      	add	r4, r1
 8010c20:	6014      	str	r4, [r2, #0]
 8010c22:	e7da      	b.n	8010bda <_free_r+0x26>
 8010c24:	d902      	bls.n	8010c2c <_free_r+0x78>
 8010c26:	230c      	movs	r3, #12
 8010c28:	6003      	str	r3, [r0, #0]
 8010c2a:	e7d6      	b.n	8010bda <_free_r+0x26>
 8010c2c:	6825      	ldr	r5, [r4, #0]
 8010c2e:	1961      	adds	r1, r4, r5
 8010c30:	428b      	cmp	r3, r1
 8010c32:	bf04      	itt	eq
 8010c34:	6819      	ldreq	r1, [r3, #0]
 8010c36:	685b      	ldreq	r3, [r3, #4]
 8010c38:	6063      	str	r3, [r4, #4]
 8010c3a:	bf04      	itt	eq
 8010c3c:	1949      	addeq	r1, r1, r5
 8010c3e:	6021      	streq	r1, [r4, #0]
 8010c40:	6054      	str	r4, [r2, #4]
 8010c42:	e7ca      	b.n	8010bda <_free_r+0x26>
 8010c44:	b003      	add	sp, #12
 8010c46:	bd30      	pop	{r4, r5, pc}
 8010c48:	20002258 	.word	0x20002258

08010c4c <_Balloc>:
 8010c4c:	b570      	push	{r4, r5, r6, lr}
 8010c4e:	69c6      	ldr	r6, [r0, #28]
 8010c50:	4604      	mov	r4, r0
 8010c52:	460d      	mov	r5, r1
 8010c54:	b976      	cbnz	r6, 8010c74 <_Balloc+0x28>
 8010c56:	2010      	movs	r0, #16
 8010c58:	f7fe fa72 	bl	800f140 <malloc>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	61e0      	str	r0, [r4, #28]
 8010c60:	b920      	cbnz	r0, 8010c6c <_Balloc+0x20>
 8010c62:	4b18      	ldr	r3, [pc, #96]	; (8010cc4 <_Balloc+0x78>)
 8010c64:	4818      	ldr	r0, [pc, #96]	; (8010cc8 <_Balloc+0x7c>)
 8010c66:	216b      	movs	r1, #107	; 0x6b
 8010c68:	f000 fc1a 	bl	80114a0 <__assert_func>
 8010c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c70:	6006      	str	r6, [r0, #0]
 8010c72:	60c6      	str	r6, [r0, #12]
 8010c74:	69e6      	ldr	r6, [r4, #28]
 8010c76:	68f3      	ldr	r3, [r6, #12]
 8010c78:	b183      	cbz	r3, 8010c9c <_Balloc+0x50>
 8010c7a:	69e3      	ldr	r3, [r4, #28]
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c82:	b9b8      	cbnz	r0, 8010cb4 <_Balloc+0x68>
 8010c84:	2101      	movs	r1, #1
 8010c86:	fa01 f605 	lsl.w	r6, r1, r5
 8010c8a:	1d72      	adds	r2, r6, #5
 8010c8c:	0092      	lsls	r2, r2, #2
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f000 fc24 	bl	80114dc <_calloc_r>
 8010c94:	b160      	cbz	r0, 8010cb0 <_Balloc+0x64>
 8010c96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c9a:	e00e      	b.n	8010cba <_Balloc+0x6e>
 8010c9c:	2221      	movs	r2, #33	; 0x21
 8010c9e:	2104      	movs	r1, #4
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f000 fc1b 	bl	80114dc <_calloc_r>
 8010ca6:	69e3      	ldr	r3, [r4, #28]
 8010ca8:	60f0      	str	r0, [r6, #12]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1e4      	bne.n	8010c7a <_Balloc+0x2e>
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	6802      	ldr	r2, [r0, #0]
 8010cb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010cba:	2300      	movs	r3, #0
 8010cbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010cc0:	e7f7      	b.n	8010cb2 <_Balloc+0x66>
 8010cc2:	bf00      	nop
 8010cc4:	0801221d 	.word	0x0801221d
 8010cc8:	0801229d 	.word	0x0801229d

08010ccc <_Bfree>:
 8010ccc:	b570      	push	{r4, r5, r6, lr}
 8010cce:	69c6      	ldr	r6, [r0, #28]
 8010cd0:	4605      	mov	r5, r0
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	b976      	cbnz	r6, 8010cf4 <_Bfree+0x28>
 8010cd6:	2010      	movs	r0, #16
 8010cd8:	f7fe fa32 	bl	800f140 <malloc>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	61e8      	str	r0, [r5, #28]
 8010ce0:	b920      	cbnz	r0, 8010cec <_Bfree+0x20>
 8010ce2:	4b09      	ldr	r3, [pc, #36]	; (8010d08 <_Bfree+0x3c>)
 8010ce4:	4809      	ldr	r0, [pc, #36]	; (8010d0c <_Bfree+0x40>)
 8010ce6:	218f      	movs	r1, #143	; 0x8f
 8010ce8:	f000 fbda 	bl	80114a0 <__assert_func>
 8010cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cf0:	6006      	str	r6, [r0, #0]
 8010cf2:	60c6      	str	r6, [r0, #12]
 8010cf4:	b13c      	cbz	r4, 8010d06 <_Bfree+0x3a>
 8010cf6:	69eb      	ldr	r3, [r5, #28]
 8010cf8:	6862      	ldr	r2, [r4, #4]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d00:	6021      	str	r1, [r4, #0]
 8010d02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d06:	bd70      	pop	{r4, r5, r6, pc}
 8010d08:	0801221d 	.word	0x0801221d
 8010d0c:	0801229d 	.word	0x0801229d

08010d10 <__multadd>:
 8010d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d14:	690d      	ldr	r5, [r1, #16]
 8010d16:	4607      	mov	r7, r0
 8010d18:	460c      	mov	r4, r1
 8010d1a:	461e      	mov	r6, r3
 8010d1c:	f101 0c14 	add.w	ip, r1, #20
 8010d20:	2000      	movs	r0, #0
 8010d22:	f8dc 3000 	ldr.w	r3, [ip]
 8010d26:	b299      	uxth	r1, r3
 8010d28:	fb02 6101 	mla	r1, r2, r1, r6
 8010d2c:	0c1e      	lsrs	r6, r3, #16
 8010d2e:	0c0b      	lsrs	r3, r1, #16
 8010d30:	fb02 3306 	mla	r3, r2, r6, r3
 8010d34:	b289      	uxth	r1, r1
 8010d36:	3001      	adds	r0, #1
 8010d38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010d3c:	4285      	cmp	r5, r0
 8010d3e:	f84c 1b04 	str.w	r1, [ip], #4
 8010d42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010d46:	dcec      	bgt.n	8010d22 <__multadd+0x12>
 8010d48:	b30e      	cbz	r6, 8010d8e <__multadd+0x7e>
 8010d4a:	68a3      	ldr	r3, [r4, #8]
 8010d4c:	42ab      	cmp	r3, r5
 8010d4e:	dc19      	bgt.n	8010d84 <__multadd+0x74>
 8010d50:	6861      	ldr	r1, [r4, #4]
 8010d52:	4638      	mov	r0, r7
 8010d54:	3101      	adds	r1, #1
 8010d56:	f7ff ff79 	bl	8010c4c <_Balloc>
 8010d5a:	4680      	mov	r8, r0
 8010d5c:	b928      	cbnz	r0, 8010d6a <__multadd+0x5a>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	4b0c      	ldr	r3, [pc, #48]	; (8010d94 <__multadd+0x84>)
 8010d62:	480d      	ldr	r0, [pc, #52]	; (8010d98 <__multadd+0x88>)
 8010d64:	21ba      	movs	r1, #186	; 0xba
 8010d66:	f000 fb9b 	bl	80114a0 <__assert_func>
 8010d6a:	6922      	ldr	r2, [r4, #16]
 8010d6c:	3202      	adds	r2, #2
 8010d6e:	f104 010c 	add.w	r1, r4, #12
 8010d72:	0092      	lsls	r2, r2, #2
 8010d74:	300c      	adds	r0, #12
 8010d76:	f7ff f895 	bl	800fea4 <memcpy>
 8010d7a:	4621      	mov	r1, r4
 8010d7c:	4638      	mov	r0, r7
 8010d7e:	f7ff ffa5 	bl	8010ccc <_Bfree>
 8010d82:	4644      	mov	r4, r8
 8010d84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d88:	3501      	adds	r5, #1
 8010d8a:	615e      	str	r6, [r3, #20]
 8010d8c:	6125      	str	r5, [r4, #16]
 8010d8e:	4620      	mov	r0, r4
 8010d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d94:	0801228c 	.word	0x0801228c
 8010d98:	0801229d 	.word	0x0801229d

08010d9c <__hi0bits>:
 8010d9c:	0c03      	lsrs	r3, r0, #16
 8010d9e:	041b      	lsls	r3, r3, #16
 8010da0:	b9d3      	cbnz	r3, 8010dd8 <__hi0bits+0x3c>
 8010da2:	0400      	lsls	r0, r0, #16
 8010da4:	2310      	movs	r3, #16
 8010da6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010daa:	bf04      	itt	eq
 8010dac:	0200      	lsleq	r0, r0, #8
 8010dae:	3308      	addeq	r3, #8
 8010db0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010db4:	bf04      	itt	eq
 8010db6:	0100      	lsleq	r0, r0, #4
 8010db8:	3304      	addeq	r3, #4
 8010dba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010dbe:	bf04      	itt	eq
 8010dc0:	0080      	lsleq	r0, r0, #2
 8010dc2:	3302      	addeq	r3, #2
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	db05      	blt.n	8010dd4 <__hi0bits+0x38>
 8010dc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010dcc:	f103 0301 	add.w	r3, r3, #1
 8010dd0:	bf08      	it	eq
 8010dd2:	2320      	moveq	r3, #32
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	4770      	bx	lr
 8010dd8:	2300      	movs	r3, #0
 8010dda:	e7e4      	b.n	8010da6 <__hi0bits+0xa>

08010ddc <__lo0bits>:
 8010ddc:	6803      	ldr	r3, [r0, #0]
 8010dde:	f013 0207 	ands.w	r2, r3, #7
 8010de2:	d00c      	beq.n	8010dfe <__lo0bits+0x22>
 8010de4:	07d9      	lsls	r1, r3, #31
 8010de6:	d422      	bmi.n	8010e2e <__lo0bits+0x52>
 8010de8:	079a      	lsls	r2, r3, #30
 8010dea:	bf49      	itett	mi
 8010dec:	085b      	lsrmi	r3, r3, #1
 8010dee:	089b      	lsrpl	r3, r3, #2
 8010df0:	6003      	strmi	r3, [r0, #0]
 8010df2:	2201      	movmi	r2, #1
 8010df4:	bf5c      	itt	pl
 8010df6:	6003      	strpl	r3, [r0, #0]
 8010df8:	2202      	movpl	r2, #2
 8010dfa:	4610      	mov	r0, r2
 8010dfc:	4770      	bx	lr
 8010dfe:	b299      	uxth	r1, r3
 8010e00:	b909      	cbnz	r1, 8010e06 <__lo0bits+0x2a>
 8010e02:	0c1b      	lsrs	r3, r3, #16
 8010e04:	2210      	movs	r2, #16
 8010e06:	b2d9      	uxtb	r1, r3
 8010e08:	b909      	cbnz	r1, 8010e0e <__lo0bits+0x32>
 8010e0a:	3208      	adds	r2, #8
 8010e0c:	0a1b      	lsrs	r3, r3, #8
 8010e0e:	0719      	lsls	r1, r3, #28
 8010e10:	bf04      	itt	eq
 8010e12:	091b      	lsreq	r3, r3, #4
 8010e14:	3204      	addeq	r2, #4
 8010e16:	0799      	lsls	r1, r3, #30
 8010e18:	bf04      	itt	eq
 8010e1a:	089b      	lsreq	r3, r3, #2
 8010e1c:	3202      	addeq	r2, #2
 8010e1e:	07d9      	lsls	r1, r3, #31
 8010e20:	d403      	bmi.n	8010e2a <__lo0bits+0x4e>
 8010e22:	085b      	lsrs	r3, r3, #1
 8010e24:	f102 0201 	add.w	r2, r2, #1
 8010e28:	d003      	beq.n	8010e32 <__lo0bits+0x56>
 8010e2a:	6003      	str	r3, [r0, #0]
 8010e2c:	e7e5      	b.n	8010dfa <__lo0bits+0x1e>
 8010e2e:	2200      	movs	r2, #0
 8010e30:	e7e3      	b.n	8010dfa <__lo0bits+0x1e>
 8010e32:	2220      	movs	r2, #32
 8010e34:	e7e1      	b.n	8010dfa <__lo0bits+0x1e>
	...

08010e38 <__i2b>:
 8010e38:	b510      	push	{r4, lr}
 8010e3a:	460c      	mov	r4, r1
 8010e3c:	2101      	movs	r1, #1
 8010e3e:	f7ff ff05 	bl	8010c4c <_Balloc>
 8010e42:	4602      	mov	r2, r0
 8010e44:	b928      	cbnz	r0, 8010e52 <__i2b+0x1a>
 8010e46:	4b05      	ldr	r3, [pc, #20]	; (8010e5c <__i2b+0x24>)
 8010e48:	4805      	ldr	r0, [pc, #20]	; (8010e60 <__i2b+0x28>)
 8010e4a:	f240 1145 	movw	r1, #325	; 0x145
 8010e4e:	f000 fb27 	bl	80114a0 <__assert_func>
 8010e52:	2301      	movs	r3, #1
 8010e54:	6144      	str	r4, [r0, #20]
 8010e56:	6103      	str	r3, [r0, #16]
 8010e58:	bd10      	pop	{r4, pc}
 8010e5a:	bf00      	nop
 8010e5c:	0801228c 	.word	0x0801228c
 8010e60:	0801229d 	.word	0x0801229d

08010e64 <__multiply>:
 8010e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e68:	4691      	mov	r9, r2
 8010e6a:	690a      	ldr	r2, [r1, #16]
 8010e6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	bfb8      	it	lt
 8010e74:	460b      	movlt	r3, r1
 8010e76:	460c      	mov	r4, r1
 8010e78:	bfbc      	itt	lt
 8010e7a:	464c      	movlt	r4, r9
 8010e7c:	4699      	movlt	r9, r3
 8010e7e:	6927      	ldr	r7, [r4, #16]
 8010e80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010e84:	68a3      	ldr	r3, [r4, #8]
 8010e86:	6861      	ldr	r1, [r4, #4]
 8010e88:	eb07 060a 	add.w	r6, r7, sl
 8010e8c:	42b3      	cmp	r3, r6
 8010e8e:	b085      	sub	sp, #20
 8010e90:	bfb8      	it	lt
 8010e92:	3101      	addlt	r1, #1
 8010e94:	f7ff feda 	bl	8010c4c <_Balloc>
 8010e98:	b930      	cbnz	r0, 8010ea8 <__multiply+0x44>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	4b44      	ldr	r3, [pc, #272]	; (8010fb0 <__multiply+0x14c>)
 8010e9e:	4845      	ldr	r0, [pc, #276]	; (8010fb4 <__multiply+0x150>)
 8010ea0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010ea4:	f000 fafc 	bl	80114a0 <__assert_func>
 8010ea8:	f100 0514 	add.w	r5, r0, #20
 8010eac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010eb0:	462b      	mov	r3, r5
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	4543      	cmp	r3, r8
 8010eb6:	d321      	bcc.n	8010efc <__multiply+0x98>
 8010eb8:	f104 0314 	add.w	r3, r4, #20
 8010ebc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ec0:	f109 0314 	add.w	r3, r9, #20
 8010ec4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010ec8:	9202      	str	r2, [sp, #8]
 8010eca:	1b3a      	subs	r2, r7, r4
 8010ecc:	3a15      	subs	r2, #21
 8010ece:	f022 0203 	bic.w	r2, r2, #3
 8010ed2:	3204      	adds	r2, #4
 8010ed4:	f104 0115 	add.w	r1, r4, #21
 8010ed8:	428f      	cmp	r7, r1
 8010eda:	bf38      	it	cc
 8010edc:	2204      	movcc	r2, #4
 8010ede:	9201      	str	r2, [sp, #4]
 8010ee0:	9a02      	ldr	r2, [sp, #8]
 8010ee2:	9303      	str	r3, [sp, #12]
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d80c      	bhi.n	8010f02 <__multiply+0x9e>
 8010ee8:	2e00      	cmp	r6, #0
 8010eea:	dd03      	ble.n	8010ef4 <__multiply+0x90>
 8010eec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d05b      	beq.n	8010fac <__multiply+0x148>
 8010ef4:	6106      	str	r6, [r0, #16]
 8010ef6:	b005      	add	sp, #20
 8010ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010efc:	f843 2b04 	str.w	r2, [r3], #4
 8010f00:	e7d8      	b.n	8010eb4 <__multiply+0x50>
 8010f02:	f8b3 a000 	ldrh.w	sl, [r3]
 8010f06:	f1ba 0f00 	cmp.w	sl, #0
 8010f0a:	d024      	beq.n	8010f56 <__multiply+0xf2>
 8010f0c:	f104 0e14 	add.w	lr, r4, #20
 8010f10:	46a9      	mov	r9, r5
 8010f12:	f04f 0c00 	mov.w	ip, #0
 8010f16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010f1a:	f8d9 1000 	ldr.w	r1, [r9]
 8010f1e:	fa1f fb82 	uxth.w	fp, r2
 8010f22:	b289      	uxth	r1, r1
 8010f24:	fb0a 110b 	mla	r1, sl, fp, r1
 8010f28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010f2c:	f8d9 2000 	ldr.w	r2, [r9]
 8010f30:	4461      	add	r1, ip
 8010f32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010f36:	fb0a c20b 	mla	r2, sl, fp, ip
 8010f3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010f3e:	b289      	uxth	r1, r1
 8010f40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010f44:	4577      	cmp	r7, lr
 8010f46:	f849 1b04 	str.w	r1, [r9], #4
 8010f4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010f4e:	d8e2      	bhi.n	8010f16 <__multiply+0xb2>
 8010f50:	9a01      	ldr	r2, [sp, #4]
 8010f52:	f845 c002 	str.w	ip, [r5, r2]
 8010f56:	9a03      	ldr	r2, [sp, #12]
 8010f58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010f5c:	3304      	adds	r3, #4
 8010f5e:	f1b9 0f00 	cmp.w	r9, #0
 8010f62:	d021      	beq.n	8010fa8 <__multiply+0x144>
 8010f64:	6829      	ldr	r1, [r5, #0]
 8010f66:	f104 0c14 	add.w	ip, r4, #20
 8010f6a:	46ae      	mov	lr, r5
 8010f6c:	f04f 0a00 	mov.w	sl, #0
 8010f70:	f8bc b000 	ldrh.w	fp, [ip]
 8010f74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010f78:	fb09 220b 	mla	r2, r9, fp, r2
 8010f7c:	4452      	add	r2, sl
 8010f7e:	b289      	uxth	r1, r1
 8010f80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010f84:	f84e 1b04 	str.w	r1, [lr], #4
 8010f88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010f8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010f90:	f8be 1000 	ldrh.w	r1, [lr]
 8010f94:	fb09 110a 	mla	r1, r9, sl, r1
 8010f98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010f9c:	4567      	cmp	r7, ip
 8010f9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010fa2:	d8e5      	bhi.n	8010f70 <__multiply+0x10c>
 8010fa4:	9a01      	ldr	r2, [sp, #4]
 8010fa6:	50a9      	str	r1, [r5, r2]
 8010fa8:	3504      	adds	r5, #4
 8010faa:	e799      	b.n	8010ee0 <__multiply+0x7c>
 8010fac:	3e01      	subs	r6, #1
 8010fae:	e79b      	b.n	8010ee8 <__multiply+0x84>
 8010fb0:	0801228c 	.word	0x0801228c
 8010fb4:	0801229d 	.word	0x0801229d

08010fb8 <__pow5mult>:
 8010fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fbc:	4615      	mov	r5, r2
 8010fbe:	f012 0203 	ands.w	r2, r2, #3
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	460f      	mov	r7, r1
 8010fc6:	d007      	beq.n	8010fd8 <__pow5mult+0x20>
 8010fc8:	4c25      	ldr	r4, [pc, #148]	; (8011060 <__pow5mult+0xa8>)
 8010fca:	3a01      	subs	r2, #1
 8010fcc:	2300      	movs	r3, #0
 8010fce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010fd2:	f7ff fe9d 	bl	8010d10 <__multadd>
 8010fd6:	4607      	mov	r7, r0
 8010fd8:	10ad      	asrs	r5, r5, #2
 8010fda:	d03d      	beq.n	8011058 <__pow5mult+0xa0>
 8010fdc:	69f4      	ldr	r4, [r6, #28]
 8010fde:	b97c      	cbnz	r4, 8011000 <__pow5mult+0x48>
 8010fe0:	2010      	movs	r0, #16
 8010fe2:	f7fe f8ad 	bl	800f140 <malloc>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	61f0      	str	r0, [r6, #28]
 8010fea:	b928      	cbnz	r0, 8010ff8 <__pow5mult+0x40>
 8010fec:	4b1d      	ldr	r3, [pc, #116]	; (8011064 <__pow5mult+0xac>)
 8010fee:	481e      	ldr	r0, [pc, #120]	; (8011068 <__pow5mult+0xb0>)
 8010ff0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010ff4:	f000 fa54 	bl	80114a0 <__assert_func>
 8010ff8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ffc:	6004      	str	r4, [r0, #0]
 8010ffe:	60c4      	str	r4, [r0, #12]
 8011000:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011004:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011008:	b94c      	cbnz	r4, 801101e <__pow5mult+0x66>
 801100a:	f240 2171 	movw	r1, #625	; 0x271
 801100e:	4630      	mov	r0, r6
 8011010:	f7ff ff12 	bl	8010e38 <__i2b>
 8011014:	2300      	movs	r3, #0
 8011016:	f8c8 0008 	str.w	r0, [r8, #8]
 801101a:	4604      	mov	r4, r0
 801101c:	6003      	str	r3, [r0, #0]
 801101e:	f04f 0900 	mov.w	r9, #0
 8011022:	07eb      	lsls	r3, r5, #31
 8011024:	d50a      	bpl.n	801103c <__pow5mult+0x84>
 8011026:	4639      	mov	r1, r7
 8011028:	4622      	mov	r2, r4
 801102a:	4630      	mov	r0, r6
 801102c:	f7ff ff1a 	bl	8010e64 <__multiply>
 8011030:	4639      	mov	r1, r7
 8011032:	4680      	mov	r8, r0
 8011034:	4630      	mov	r0, r6
 8011036:	f7ff fe49 	bl	8010ccc <_Bfree>
 801103a:	4647      	mov	r7, r8
 801103c:	106d      	asrs	r5, r5, #1
 801103e:	d00b      	beq.n	8011058 <__pow5mult+0xa0>
 8011040:	6820      	ldr	r0, [r4, #0]
 8011042:	b938      	cbnz	r0, 8011054 <__pow5mult+0x9c>
 8011044:	4622      	mov	r2, r4
 8011046:	4621      	mov	r1, r4
 8011048:	4630      	mov	r0, r6
 801104a:	f7ff ff0b 	bl	8010e64 <__multiply>
 801104e:	6020      	str	r0, [r4, #0]
 8011050:	f8c0 9000 	str.w	r9, [r0]
 8011054:	4604      	mov	r4, r0
 8011056:	e7e4      	b.n	8011022 <__pow5mult+0x6a>
 8011058:	4638      	mov	r0, r7
 801105a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801105e:	bf00      	nop
 8011060:	080123e8 	.word	0x080123e8
 8011064:	0801221d 	.word	0x0801221d
 8011068:	0801229d 	.word	0x0801229d

0801106c <__lshift>:
 801106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011070:	460c      	mov	r4, r1
 8011072:	6849      	ldr	r1, [r1, #4]
 8011074:	6923      	ldr	r3, [r4, #16]
 8011076:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801107a:	68a3      	ldr	r3, [r4, #8]
 801107c:	4607      	mov	r7, r0
 801107e:	4691      	mov	r9, r2
 8011080:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011084:	f108 0601 	add.w	r6, r8, #1
 8011088:	42b3      	cmp	r3, r6
 801108a:	db0b      	blt.n	80110a4 <__lshift+0x38>
 801108c:	4638      	mov	r0, r7
 801108e:	f7ff fddd 	bl	8010c4c <_Balloc>
 8011092:	4605      	mov	r5, r0
 8011094:	b948      	cbnz	r0, 80110aa <__lshift+0x3e>
 8011096:	4602      	mov	r2, r0
 8011098:	4b28      	ldr	r3, [pc, #160]	; (801113c <__lshift+0xd0>)
 801109a:	4829      	ldr	r0, [pc, #164]	; (8011140 <__lshift+0xd4>)
 801109c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80110a0:	f000 f9fe 	bl	80114a0 <__assert_func>
 80110a4:	3101      	adds	r1, #1
 80110a6:	005b      	lsls	r3, r3, #1
 80110a8:	e7ee      	b.n	8011088 <__lshift+0x1c>
 80110aa:	2300      	movs	r3, #0
 80110ac:	f100 0114 	add.w	r1, r0, #20
 80110b0:	f100 0210 	add.w	r2, r0, #16
 80110b4:	4618      	mov	r0, r3
 80110b6:	4553      	cmp	r3, sl
 80110b8:	db33      	blt.n	8011122 <__lshift+0xb6>
 80110ba:	6920      	ldr	r0, [r4, #16]
 80110bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80110c0:	f104 0314 	add.w	r3, r4, #20
 80110c4:	f019 091f 	ands.w	r9, r9, #31
 80110c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80110cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80110d0:	d02b      	beq.n	801112a <__lshift+0xbe>
 80110d2:	f1c9 0e20 	rsb	lr, r9, #32
 80110d6:	468a      	mov	sl, r1
 80110d8:	2200      	movs	r2, #0
 80110da:	6818      	ldr	r0, [r3, #0]
 80110dc:	fa00 f009 	lsl.w	r0, r0, r9
 80110e0:	4310      	orrs	r0, r2
 80110e2:	f84a 0b04 	str.w	r0, [sl], #4
 80110e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110ea:	459c      	cmp	ip, r3
 80110ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80110f0:	d8f3      	bhi.n	80110da <__lshift+0x6e>
 80110f2:	ebac 0304 	sub.w	r3, ip, r4
 80110f6:	3b15      	subs	r3, #21
 80110f8:	f023 0303 	bic.w	r3, r3, #3
 80110fc:	3304      	adds	r3, #4
 80110fe:	f104 0015 	add.w	r0, r4, #21
 8011102:	4584      	cmp	ip, r0
 8011104:	bf38      	it	cc
 8011106:	2304      	movcc	r3, #4
 8011108:	50ca      	str	r2, [r1, r3]
 801110a:	b10a      	cbz	r2, 8011110 <__lshift+0xa4>
 801110c:	f108 0602 	add.w	r6, r8, #2
 8011110:	3e01      	subs	r6, #1
 8011112:	4638      	mov	r0, r7
 8011114:	612e      	str	r6, [r5, #16]
 8011116:	4621      	mov	r1, r4
 8011118:	f7ff fdd8 	bl	8010ccc <_Bfree>
 801111c:	4628      	mov	r0, r5
 801111e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011122:	f842 0f04 	str.w	r0, [r2, #4]!
 8011126:	3301      	adds	r3, #1
 8011128:	e7c5      	b.n	80110b6 <__lshift+0x4a>
 801112a:	3904      	subs	r1, #4
 801112c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011130:	f841 2f04 	str.w	r2, [r1, #4]!
 8011134:	459c      	cmp	ip, r3
 8011136:	d8f9      	bhi.n	801112c <__lshift+0xc0>
 8011138:	e7ea      	b.n	8011110 <__lshift+0xa4>
 801113a:	bf00      	nop
 801113c:	0801228c 	.word	0x0801228c
 8011140:	0801229d 	.word	0x0801229d

08011144 <__mcmp>:
 8011144:	b530      	push	{r4, r5, lr}
 8011146:	6902      	ldr	r2, [r0, #16]
 8011148:	690c      	ldr	r4, [r1, #16]
 801114a:	1b12      	subs	r2, r2, r4
 801114c:	d10e      	bne.n	801116c <__mcmp+0x28>
 801114e:	f100 0314 	add.w	r3, r0, #20
 8011152:	3114      	adds	r1, #20
 8011154:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011158:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801115c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011160:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011164:	42a5      	cmp	r5, r4
 8011166:	d003      	beq.n	8011170 <__mcmp+0x2c>
 8011168:	d305      	bcc.n	8011176 <__mcmp+0x32>
 801116a:	2201      	movs	r2, #1
 801116c:	4610      	mov	r0, r2
 801116e:	bd30      	pop	{r4, r5, pc}
 8011170:	4283      	cmp	r3, r0
 8011172:	d3f3      	bcc.n	801115c <__mcmp+0x18>
 8011174:	e7fa      	b.n	801116c <__mcmp+0x28>
 8011176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801117a:	e7f7      	b.n	801116c <__mcmp+0x28>

0801117c <__mdiff>:
 801117c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011180:	460c      	mov	r4, r1
 8011182:	4606      	mov	r6, r0
 8011184:	4611      	mov	r1, r2
 8011186:	4620      	mov	r0, r4
 8011188:	4690      	mov	r8, r2
 801118a:	f7ff ffdb 	bl	8011144 <__mcmp>
 801118e:	1e05      	subs	r5, r0, #0
 8011190:	d110      	bne.n	80111b4 <__mdiff+0x38>
 8011192:	4629      	mov	r1, r5
 8011194:	4630      	mov	r0, r6
 8011196:	f7ff fd59 	bl	8010c4c <_Balloc>
 801119a:	b930      	cbnz	r0, 80111aa <__mdiff+0x2e>
 801119c:	4b3a      	ldr	r3, [pc, #232]	; (8011288 <__mdiff+0x10c>)
 801119e:	4602      	mov	r2, r0
 80111a0:	f240 2137 	movw	r1, #567	; 0x237
 80111a4:	4839      	ldr	r0, [pc, #228]	; (801128c <__mdiff+0x110>)
 80111a6:	f000 f97b 	bl	80114a0 <__assert_func>
 80111aa:	2301      	movs	r3, #1
 80111ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80111b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111b4:	bfa4      	itt	ge
 80111b6:	4643      	movge	r3, r8
 80111b8:	46a0      	movge	r8, r4
 80111ba:	4630      	mov	r0, r6
 80111bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80111c0:	bfa6      	itte	ge
 80111c2:	461c      	movge	r4, r3
 80111c4:	2500      	movge	r5, #0
 80111c6:	2501      	movlt	r5, #1
 80111c8:	f7ff fd40 	bl	8010c4c <_Balloc>
 80111cc:	b920      	cbnz	r0, 80111d8 <__mdiff+0x5c>
 80111ce:	4b2e      	ldr	r3, [pc, #184]	; (8011288 <__mdiff+0x10c>)
 80111d0:	4602      	mov	r2, r0
 80111d2:	f240 2145 	movw	r1, #581	; 0x245
 80111d6:	e7e5      	b.n	80111a4 <__mdiff+0x28>
 80111d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80111dc:	6926      	ldr	r6, [r4, #16]
 80111de:	60c5      	str	r5, [r0, #12]
 80111e0:	f104 0914 	add.w	r9, r4, #20
 80111e4:	f108 0514 	add.w	r5, r8, #20
 80111e8:	f100 0e14 	add.w	lr, r0, #20
 80111ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80111f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80111f4:	f108 0210 	add.w	r2, r8, #16
 80111f8:	46f2      	mov	sl, lr
 80111fa:	2100      	movs	r1, #0
 80111fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011200:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011204:	fa11 f88b 	uxtah	r8, r1, fp
 8011208:	b299      	uxth	r1, r3
 801120a:	0c1b      	lsrs	r3, r3, #16
 801120c:	eba8 0801 	sub.w	r8, r8, r1
 8011210:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011214:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011218:	fa1f f888 	uxth.w	r8, r8
 801121c:	1419      	asrs	r1, r3, #16
 801121e:	454e      	cmp	r6, r9
 8011220:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011224:	f84a 3b04 	str.w	r3, [sl], #4
 8011228:	d8e8      	bhi.n	80111fc <__mdiff+0x80>
 801122a:	1b33      	subs	r3, r6, r4
 801122c:	3b15      	subs	r3, #21
 801122e:	f023 0303 	bic.w	r3, r3, #3
 8011232:	3304      	adds	r3, #4
 8011234:	3415      	adds	r4, #21
 8011236:	42a6      	cmp	r6, r4
 8011238:	bf38      	it	cc
 801123a:	2304      	movcc	r3, #4
 801123c:	441d      	add	r5, r3
 801123e:	4473      	add	r3, lr
 8011240:	469e      	mov	lr, r3
 8011242:	462e      	mov	r6, r5
 8011244:	4566      	cmp	r6, ip
 8011246:	d30e      	bcc.n	8011266 <__mdiff+0xea>
 8011248:	f10c 0203 	add.w	r2, ip, #3
 801124c:	1b52      	subs	r2, r2, r5
 801124e:	f022 0203 	bic.w	r2, r2, #3
 8011252:	3d03      	subs	r5, #3
 8011254:	45ac      	cmp	ip, r5
 8011256:	bf38      	it	cc
 8011258:	2200      	movcc	r2, #0
 801125a:	4413      	add	r3, r2
 801125c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011260:	b17a      	cbz	r2, 8011282 <__mdiff+0x106>
 8011262:	6107      	str	r7, [r0, #16]
 8011264:	e7a4      	b.n	80111b0 <__mdiff+0x34>
 8011266:	f856 8b04 	ldr.w	r8, [r6], #4
 801126a:	fa11 f288 	uxtah	r2, r1, r8
 801126e:	1414      	asrs	r4, r2, #16
 8011270:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011274:	b292      	uxth	r2, r2
 8011276:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801127a:	f84e 2b04 	str.w	r2, [lr], #4
 801127e:	1421      	asrs	r1, r4, #16
 8011280:	e7e0      	b.n	8011244 <__mdiff+0xc8>
 8011282:	3f01      	subs	r7, #1
 8011284:	e7ea      	b.n	801125c <__mdiff+0xe0>
 8011286:	bf00      	nop
 8011288:	0801228c 	.word	0x0801228c
 801128c:	0801229d 	.word	0x0801229d

08011290 <__d2b>:
 8011290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011294:	460f      	mov	r7, r1
 8011296:	2101      	movs	r1, #1
 8011298:	ec59 8b10 	vmov	r8, r9, d0
 801129c:	4616      	mov	r6, r2
 801129e:	f7ff fcd5 	bl	8010c4c <_Balloc>
 80112a2:	4604      	mov	r4, r0
 80112a4:	b930      	cbnz	r0, 80112b4 <__d2b+0x24>
 80112a6:	4602      	mov	r2, r0
 80112a8:	4b24      	ldr	r3, [pc, #144]	; (801133c <__d2b+0xac>)
 80112aa:	4825      	ldr	r0, [pc, #148]	; (8011340 <__d2b+0xb0>)
 80112ac:	f240 310f 	movw	r1, #783	; 0x30f
 80112b0:	f000 f8f6 	bl	80114a0 <__assert_func>
 80112b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80112b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80112bc:	bb2d      	cbnz	r5, 801130a <__d2b+0x7a>
 80112be:	9301      	str	r3, [sp, #4]
 80112c0:	f1b8 0300 	subs.w	r3, r8, #0
 80112c4:	d026      	beq.n	8011314 <__d2b+0x84>
 80112c6:	4668      	mov	r0, sp
 80112c8:	9300      	str	r3, [sp, #0]
 80112ca:	f7ff fd87 	bl	8010ddc <__lo0bits>
 80112ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80112d2:	b1e8      	cbz	r0, 8011310 <__d2b+0x80>
 80112d4:	f1c0 0320 	rsb	r3, r0, #32
 80112d8:	fa02 f303 	lsl.w	r3, r2, r3
 80112dc:	430b      	orrs	r3, r1
 80112de:	40c2      	lsrs	r2, r0
 80112e0:	6163      	str	r3, [r4, #20]
 80112e2:	9201      	str	r2, [sp, #4]
 80112e4:	9b01      	ldr	r3, [sp, #4]
 80112e6:	61a3      	str	r3, [r4, #24]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	bf14      	ite	ne
 80112ec:	2202      	movne	r2, #2
 80112ee:	2201      	moveq	r2, #1
 80112f0:	6122      	str	r2, [r4, #16]
 80112f2:	b1bd      	cbz	r5, 8011324 <__d2b+0x94>
 80112f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80112f8:	4405      	add	r5, r0
 80112fa:	603d      	str	r5, [r7, #0]
 80112fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011300:	6030      	str	r0, [r6, #0]
 8011302:	4620      	mov	r0, r4
 8011304:	b003      	add	sp, #12
 8011306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801130a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801130e:	e7d6      	b.n	80112be <__d2b+0x2e>
 8011310:	6161      	str	r1, [r4, #20]
 8011312:	e7e7      	b.n	80112e4 <__d2b+0x54>
 8011314:	a801      	add	r0, sp, #4
 8011316:	f7ff fd61 	bl	8010ddc <__lo0bits>
 801131a:	9b01      	ldr	r3, [sp, #4]
 801131c:	6163      	str	r3, [r4, #20]
 801131e:	3020      	adds	r0, #32
 8011320:	2201      	movs	r2, #1
 8011322:	e7e5      	b.n	80112f0 <__d2b+0x60>
 8011324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801132c:	6038      	str	r0, [r7, #0]
 801132e:	6918      	ldr	r0, [r3, #16]
 8011330:	f7ff fd34 	bl	8010d9c <__hi0bits>
 8011334:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011338:	e7e2      	b.n	8011300 <__d2b+0x70>
 801133a:	bf00      	nop
 801133c:	0801228c 	.word	0x0801228c
 8011340:	0801229d 	.word	0x0801229d

08011344 <__sflush_r>:
 8011344:	898a      	ldrh	r2, [r1, #12]
 8011346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801134a:	4605      	mov	r5, r0
 801134c:	0710      	lsls	r0, r2, #28
 801134e:	460c      	mov	r4, r1
 8011350:	d458      	bmi.n	8011404 <__sflush_r+0xc0>
 8011352:	684b      	ldr	r3, [r1, #4]
 8011354:	2b00      	cmp	r3, #0
 8011356:	dc05      	bgt.n	8011364 <__sflush_r+0x20>
 8011358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801135a:	2b00      	cmp	r3, #0
 801135c:	dc02      	bgt.n	8011364 <__sflush_r+0x20>
 801135e:	2000      	movs	r0, #0
 8011360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011366:	2e00      	cmp	r6, #0
 8011368:	d0f9      	beq.n	801135e <__sflush_r+0x1a>
 801136a:	2300      	movs	r3, #0
 801136c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011370:	682f      	ldr	r7, [r5, #0]
 8011372:	6a21      	ldr	r1, [r4, #32]
 8011374:	602b      	str	r3, [r5, #0]
 8011376:	d032      	beq.n	80113de <__sflush_r+0x9a>
 8011378:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801137a:	89a3      	ldrh	r3, [r4, #12]
 801137c:	075a      	lsls	r2, r3, #29
 801137e:	d505      	bpl.n	801138c <__sflush_r+0x48>
 8011380:	6863      	ldr	r3, [r4, #4]
 8011382:	1ac0      	subs	r0, r0, r3
 8011384:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011386:	b10b      	cbz	r3, 801138c <__sflush_r+0x48>
 8011388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801138a:	1ac0      	subs	r0, r0, r3
 801138c:	2300      	movs	r3, #0
 801138e:	4602      	mov	r2, r0
 8011390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011392:	6a21      	ldr	r1, [r4, #32]
 8011394:	4628      	mov	r0, r5
 8011396:	47b0      	blx	r6
 8011398:	1c43      	adds	r3, r0, #1
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	d106      	bne.n	80113ac <__sflush_r+0x68>
 801139e:	6829      	ldr	r1, [r5, #0]
 80113a0:	291d      	cmp	r1, #29
 80113a2:	d82b      	bhi.n	80113fc <__sflush_r+0xb8>
 80113a4:	4a29      	ldr	r2, [pc, #164]	; (801144c <__sflush_r+0x108>)
 80113a6:	410a      	asrs	r2, r1
 80113a8:	07d6      	lsls	r6, r2, #31
 80113aa:	d427      	bmi.n	80113fc <__sflush_r+0xb8>
 80113ac:	2200      	movs	r2, #0
 80113ae:	6062      	str	r2, [r4, #4]
 80113b0:	04d9      	lsls	r1, r3, #19
 80113b2:	6922      	ldr	r2, [r4, #16]
 80113b4:	6022      	str	r2, [r4, #0]
 80113b6:	d504      	bpl.n	80113c2 <__sflush_r+0x7e>
 80113b8:	1c42      	adds	r2, r0, #1
 80113ba:	d101      	bne.n	80113c0 <__sflush_r+0x7c>
 80113bc:	682b      	ldr	r3, [r5, #0]
 80113be:	b903      	cbnz	r3, 80113c2 <__sflush_r+0x7e>
 80113c0:	6560      	str	r0, [r4, #84]	; 0x54
 80113c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113c4:	602f      	str	r7, [r5, #0]
 80113c6:	2900      	cmp	r1, #0
 80113c8:	d0c9      	beq.n	801135e <__sflush_r+0x1a>
 80113ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113ce:	4299      	cmp	r1, r3
 80113d0:	d002      	beq.n	80113d8 <__sflush_r+0x94>
 80113d2:	4628      	mov	r0, r5
 80113d4:	f7ff fbee 	bl	8010bb4 <_free_r>
 80113d8:	2000      	movs	r0, #0
 80113da:	6360      	str	r0, [r4, #52]	; 0x34
 80113dc:	e7c0      	b.n	8011360 <__sflush_r+0x1c>
 80113de:	2301      	movs	r3, #1
 80113e0:	4628      	mov	r0, r5
 80113e2:	47b0      	blx	r6
 80113e4:	1c41      	adds	r1, r0, #1
 80113e6:	d1c8      	bne.n	801137a <__sflush_r+0x36>
 80113e8:	682b      	ldr	r3, [r5, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d0c5      	beq.n	801137a <__sflush_r+0x36>
 80113ee:	2b1d      	cmp	r3, #29
 80113f0:	d001      	beq.n	80113f6 <__sflush_r+0xb2>
 80113f2:	2b16      	cmp	r3, #22
 80113f4:	d101      	bne.n	80113fa <__sflush_r+0xb6>
 80113f6:	602f      	str	r7, [r5, #0]
 80113f8:	e7b1      	b.n	801135e <__sflush_r+0x1a>
 80113fa:	89a3      	ldrh	r3, [r4, #12]
 80113fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011400:	81a3      	strh	r3, [r4, #12]
 8011402:	e7ad      	b.n	8011360 <__sflush_r+0x1c>
 8011404:	690f      	ldr	r7, [r1, #16]
 8011406:	2f00      	cmp	r7, #0
 8011408:	d0a9      	beq.n	801135e <__sflush_r+0x1a>
 801140a:	0793      	lsls	r3, r2, #30
 801140c:	680e      	ldr	r6, [r1, #0]
 801140e:	bf08      	it	eq
 8011410:	694b      	ldreq	r3, [r1, #20]
 8011412:	600f      	str	r7, [r1, #0]
 8011414:	bf18      	it	ne
 8011416:	2300      	movne	r3, #0
 8011418:	eba6 0807 	sub.w	r8, r6, r7
 801141c:	608b      	str	r3, [r1, #8]
 801141e:	f1b8 0f00 	cmp.w	r8, #0
 8011422:	dd9c      	ble.n	801135e <__sflush_r+0x1a>
 8011424:	6a21      	ldr	r1, [r4, #32]
 8011426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011428:	4643      	mov	r3, r8
 801142a:	463a      	mov	r2, r7
 801142c:	4628      	mov	r0, r5
 801142e:	47b0      	blx	r6
 8011430:	2800      	cmp	r0, #0
 8011432:	dc06      	bgt.n	8011442 <__sflush_r+0xfe>
 8011434:	89a3      	ldrh	r3, [r4, #12]
 8011436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801143a:	81a3      	strh	r3, [r4, #12]
 801143c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011440:	e78e      	b.n	8011360 <__sflush_r+0x1c>
 8011442:	4407      	add	r7, r0
 8011444:	eba8 0800 	sub.w	r8, r8, r0
 8011448:	e7e9      	b.n	801141e <__sflush_r+0xda>
 801144a:	bf00      	nop
 801144c:	dfbffffe 	.word	0xdfbffffe

08011450 <_fflush_r>:
 8011450:	b538      	push	{r3, r4, r5, lr}
 8011452:	690b      	ldr	r3, [r1, #16]
 8011454:	4605      	mov	r5, r0
 8011456:	460c      	mov	r4, r1
 8011458:	b913      	cbnz	r3, 8011460 <_fflush_r+0x10>
 801145a:	2500      	movs	r5, #0
 801145c:	4628      	mov	r0, r5
 801145e:	bd38      	pop	{r3, r4, r5, pc}
 8011460:	b118      	cbz	r0, 801146a <_fflush_r+0x1a>
 8011462:	6a03      	ldr	r3, [r0, #32]
 8011464:	b90b      	cbnz	r3, 801146a <_fflush_r+0x1a>
 8011466:	f7fe fc07 	bl	800fc78 <__sinit>
 801146a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d0f3      	beq.n	801145a <_fflush_r+0xa>
 8011472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011474:	07d0      	lsls	r0, r2, #31
 8011476:	d404      	bmi.n	8011482 <_fflush_r+0x32>
 8011478:	0599      	lsls	r1, r3, #22
 801147a:	d402      	bmi.n	8011482 <_fflush_r+0x32>
 801147c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801147e:	f7fe fd0f 	bl	800fea0 <__retarget_lock_acquire_recursive>
 8011482:	4628      	mov	r0, r5
 8011484:	4621      	mov	r1, r4
 8011486:	f7ff ff5d 	bl	8011344 <__sflush_r>
 801148a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801148c:	07da      	lsls	r2, r3, #31
 801148e:	4605      	mov	r5, r0
 8011490:	d4e4      	bmi.n	801145c <_fflush_r+0xc>
 8011492:	89a3      	ldrh	r3, [r4, #12]
 8011494:	059b      	lsls	r3, r3, #22
 8011496:	d4e1      	bmi.n	801145c <_fflush_r+0xc>
 8011498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801149a:	f7fe fd02 	bl	800fea2 <__retarget_lock_release_recursive>
 801149e:	e7dd      	b.n	801145c <_fflush_r+0xc>

080114a0 <__assert_func>:
 80114a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114a2:	4614      	mov	r4, r2
 80114a4:	461a      	mov	r2, r3
 80114a6:	4b09      	ldr	r3, [pc, #36]	; (80114cc <__assert_func+0x2c>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	4605      	mov	r5, r0
 80114ac:	68d8      	ldr	r0, [r3, #12]
 80114ae:	b14c      	cbz	r4, 80114c4 <__assert_func+0x24>
 80114b0:	4b07      	ldr	r3, [pc, #28]	; (80114d0 <__assert_func+0x30>)
 80114b2:	9100      	str	r1, [sp, #0]
 80114b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114b8:	4906      	ldr	r1, [pc, #24]	; (80114d4 <__assert_func+0x34>)
 80114ba:	462b      	mov	r3, r5
 80114bc:	f000 f844 	bl	8011548 <fiprintf>
 80114c0:	f000 f854 	bl	801156c <abort>
 80114c4:	4b04      	ldr	r3, [pc, #16]	; (80114d8 <__assert_func+0x38>)
 80114c6:	461c      	mov	r4, r3
 80114c8:	e7f3      	b.n	80114b2 <__assert_func+0x12>
 80114ca:	bf00      	nop
 80114cc:	20000178 	.word	0x20000178
 80114d0:	080123fe 	.word	0x080123fe
 80114d4:	0801240b 	.word	0x0801240b
 80114d8:	08012439 	.word	0x08012439

080114dc <_calloc_r>:
 80114dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114de:	fba1 2402 	umull	r2, r4, r1, r2
 80114e2:	b94c      	cbnz	r4, 80114f8 <_calloc_r+0x1c>
 80114e4:	4611      	mov	r1, r2
 80114e6:	9201      	str	r2, [sp, #4]
 80114e8:	f7fd fe5a 	bl	800f1a0 <_malloc_r>
 80114ec:	9a01      	ldr	r2, [sp, #4]
 80114ee:	4605      	mov	r5, r0
 80114f0:	b930      	cbnz	r0, 8011500 <_calloc_r+0x24>
 80114f2:	4628      	mov	r0, r5
 80114f4:	b003      	add	sp, #12
 80114f6:	bd30      	pop	{r4, r5, pc}
 80114f8:	220c      	movs	r2, #12
 80114fa:	6002      	str	r2, [r0, #0]
 80114fc:	2500      	movs	r5, #0
 80114fe:	e7f8      	b.n	80114f2 <_calloc_r+0x16>
 8011500:	4621      	mov	r1, r4
 8011502:	f7fe fc32 	bl	800fd6a <memset>
 8011506:	e7f4      	b.n	80114f2 <_calloc_r+0x16>

08011508 <__ascii_mbtowc>:
 8011508:	b082      	sub	sp, #8
 801150a:	b901      	cbnz	r1, 801150e <__ascii_mbtowc+0x6>
 801150c:	a901      	add	r1, sp, #4
 801150e:	b142      	cbz	r2, 8011522 <__ascii_mbtowc+0x1a>
 8011510:	b14b      	cbz	r3, 8011526 <__ascii_mbtowc+0x1e>
 8011512:	7813      	ldrb	r3, [r2, #0]
 8011514:	600b      	str	r3, [r1, #0]
 8011516:	7812      	ldrb	r2, [r2, #0]
 8011518:	1e10      	subs	r0, r2, #0
 801151a:	bf18      	it	ne
 801151c:	2001      	movne	r0, #1
 801151e:	b002      	add	sp, #8
 8011520:	4770      	bx	lr
 8011522:	4610      	mov	r0, r2
 8011524:	e7fb      	b.n	801151e <__ascii_mbtowc+0x16>
 8011526:	f06f 0001 	mvn.w	r0, #1
 801152a:	e7f8      	b.n	801151e <__ascii_mbtowc+0x16>

0801152c <__ascii_wctomb>:
 801152c:	b149      	cbz	r1, 8011542 <__ascii_wctomb+0x16>
 801152e:	2aff      	cmp	r2, #255	; 0xff
 8011530:	bf85      	ittet	hi
 8011532:	238a      	movhi	r3, #138	; 0x8a
 8011534:	6003      	strhi	r3, [r0, #0]
 8011536:	700a      	strbls	r2, [r1, #0]
 8011538:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801153c:	bf98      	it	ls
 801153e:	2001      	movls	r0, #1
 8011540:	4770      	bx	lr
 8011542:	4608      	mov	r0, r1
 8011544:	4770      	bx	lr
	...

08011548 <fiprintf>:
 8011548:	b40e      	push	{r1, r2, r3}
 801154a:	b503      	push	{r0, r1, lr}
 801154c:	4601      	mov	r1, r0
 801154e:	ab03      	add	r3, sp, #12
 8011550:	4805      	ldr	r0, [pc, #20]	; (8011568 <fiprintf+0x20>)
 8011552:	f853 2b04 	ldr.w	r2, [r3], #4
 8011556:	6800      	ldr	r0, [r0, #0]
 8011558:	9301      	str	r3, [sp, #4]
 801155a:	f000 f837 	bl	80115cc <_vfiprintf_r>
 801155e:	b002      	add	sp, #8
 8011560:	f85d eb04 	ldr.w	lr, [sp], #4
 8011564:	b003      	add	sp, #12
 8011566:	4770      	bx	lr
 8011568:	20000178 	.word	0x20000178

0801156c <abort>:
 801156c:	b508      	push	{r3, lr}
 801156e:	2006      	movs	r0, #6
 8011570:	f000 fa04 	bl	801197c <raise>
 8011574:	2001      	movs	r0, #1
 8011576:	f7f0 fd4f 	bl	8002018 <_exit>

0801157a <__sfputc_r>:
 801157a:	6893      	ldr	r3, [r2, #8]
 801157c:	3b01      	subs	r3, #1
 801157e:	2b00      	cmp	r3, #0
 8011580:	b410      	push	{r4}
 8011582:	6093      	str	r3, [r2, #8]
 8011584:	da08      	bge.n	8011598 <__sfputc_r+0x1e>
 8011586:	6994      	ldr	r4, [r2, #24]
 8011588:	42a3      	cmp	r3, r4
 801158a:	db01      	blt.n	8011590 <__sfputc_r+0x16>
 801158c:	290a      	cmp	r1, #10
 801158e:	d103      	bne.n	8011598 <__sfputc_r+0x1e>
 8011590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011594:	f000 b934 	b.w	8011800 <__swbuf_r>
 8011598:	6813      	ldr	r3, [r2, #0]
 801159a:	1c58      	adds	r0, r3, #1
 801159c:	6010      	str	r0, [r2, #0]
 801159e:	7019      	strb	r1, [r3, #0]
 80115a0:	4608      	mov	r0, r1
 80115a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <__sfputs_r>:
 80115a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115aa:	4606      	mov	r6, r0
 80115ac:	460f      	mov	r7, r1
 80115ae:	4614      	mov	r4, r2
 80115b0:	18d5      	adds	r5, r2, r3
 80115b2:	42ac      	cmp	r4, r5
 80115b4:	d101      	bne.n	80115ba <__sfputs_r+0x12>
 80115b6:	2000      	movs	r0, #0
 80115b8:	e007      	b.n	80115ca <__sfputs_r+0x22>
 80115ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115be:	463a      	mov	r2, r7
 80115c0:	4630      	mov	r0, r6
 80115c2:	f7ff ffda 	bl	801157a <__sfputc_r>
 80115c6:	1c43      	adds	r3, r0, #1
 80115c8:	d1f3      	bne.n	80115b2 <__sfputs_r+0xa>
 80115ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080115cc <_vfiprintf_r>:
 80115cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d0:	460d      	mov	r5, r1
 80115d2:	b09d      	sub	sp, #116	; 0x74
 80115d4:	4614      	mov	r4, r2
 80115d6:	4698      	mov	r8, r3
 80115d8:	4606      	mov	r6, r0
 80115da:	b118      	cbz	r0, 80115e4 <_vfiprintf_r+0x18>
 80115dc:	6a03      	ldr	r3, [r0, #32]
 80115de:	b90b      	cbnz	r3, 80115e4 <_vfiprintf_r+0x18>
 80115e0:	f7fe fb4a 	bl	800fc78 <__sinit>
 80115e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115e6:	07d9      	lsls	r1, r3, #31
 80115e8:	d405      	bmi.n	80115f6 <_vfiprintf_r+0x2a>
 80115ea:	89ab      	ldrh	r3, [r5, #12]
 80115ec:	059a      	lsls	r2, r3, #22
 80115ee:	d402      	bmi.n	80115f6 <_vfiprintf_r+0x2a>
 80115f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115f2:	f7fe fc55 	bl	800fea0 <__retarget_lock_acquire_recursive>
 80115f6:	89ab      	ldrh	r3, [r5, #12]
 80115f8:	071b      	lsls	r3, r3, #28
 80115fa:	d501      	bpl.n	8011600 <_vfiprintf_r+0x34>
 80115fc:	692b      	ldr	r3, [r5, #16]
 80115fe:	b99b      	cbnz	r3, 8011628 <_vfiprintf_r+0x5c>
 8011600:	4629      	mov	r1, r5
 8011602:	4630      	mov	r0, r6
 8011604:	f000 f93a 	bl	801187c <__swsetup_r>
 8011608:	b170      	cbz	r0, 8011628 <_vfiprintf_r+0x5c>
 801160a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801160c:	07dc      	lsls	r4, r3, #31
 801160e:	d504      	bpl.n	801161a <_vfiprintf_r+0x4e>
 8011610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011614:	b01d      	add	sp, #116	; 0x74
 8011616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801161a:	89ab      	ldrh	r3, [r5, #12]
 801161c:	0598      	lsls	r0, r3, #22
 801161e:	d4f7      	bmi.n	8011610 <_vfiprintf_r+0x44>
 8011620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011622:	f7fe fc3e 	bl	800fea2 <__retarget_lock_release_recursive>
 8011626:	e7f3      	b.n	8011610 <_vfiprintf_r+0x44>
 8011628:	2300      	movs	r3, #0
 801162a:	9309      	str	r3, [sp, #36]	; 0x24
 801162c:	2320      	movs	r3, #32
 801162e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011632:	f8cd 800c 	str.w	r8, [sp, #12]
 8011636:	2330      	movs	r3, #48	; 0x30
 8011638:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80117ec <_vfiprintf_r+0x220>
 801163c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011640:	f04f 0901 	mov.w	r9, #1
 8011644:	4623      	mov	r3, r4
 8011646:	469a      	mov	sl, r3
 8011648:	f813 2b01 	ldrb.w	r2, [r3], #1
 801164c:	b10a      	cbz	r2, 8011652 <_vfiprintf_r+0x86>
 801164e:	2a25      	cmp	r2, #37	; 0x25
 8011650:	d1f9      	bne.n	8011646 <_vfiprintf_r+0x7a>
 8011652:	ebba 0b04 	subs.w	fp, sl, r4
 8011656:	d00b      	beq.n	8011670 <_vfiprintf_r+0xa4>
 8011658:	465b      	mov	r3, fp
 801165a:	4622      	mov	r2, r4
 801165c:	4629      	mov	r1, r5
 801165e:	4630      	mov	r0, r6
 8011660:	f7ff ffa2 	bl	80115a8 <__sfputs_r>
 8011664:	3001      	adds	r0, #1
 8011666:	f000 80a9 	beq.w	80117bc <_vfiprintf_r+0x1f0>
 801166a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801166c:	445a      	add	r2, fp
 801166e:	9209      	str	r2, [sp, #36]	; 0x24
 8011670:	f89a 3000 	ldrb.w	r3, [sl]
 8011674:	2b00      	cmp	r3, #0
 8011676:	f000 80a1 	beq.w	80117bc <_vfiprintf_r+0x1f0>
 801167a:	2300      	movs	r3, #0
 801167c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011684:	f10a 0a01 	add.w	sl, sl, #1
 8011688:	9304      	str	r3, [sp, #16]
 801168a:	9307      	str	r3, [sp, #28]
 801168c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011690:	931a      	str	r3, [sp, #104]	; 0x68
 8011692:	4654      	mov	r4, sl
 8011694:	2205      	movs	r2, #5
 8011696:	f814 1b01 	ldrb.w	r1, [r4], #1
 801169a:	4854      	ldr	r0, [pc, #336]	; (80117ec <_vfiprintf_r+0x220>)
 801169c:	f7ee fda0 	bl	80001e0 <memchr>
 80116a0:	9a04      	ldr	r2, [sp, #16]
 80116a2:	b9d8      	cbnz	r0, 80116dc <_vfiprintf_r+0x110>
 80116a4:	06d1      	lsls	r1, r2, #27
 80116a6:	bf44      	itt	mi
 80116a8:	2320      	movmi	r3, #32
 80116aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116ae:	0713      	lsls	r3, r2, #28
 80116b0:	bf44      	itt	mi
 80116b2:	232b      	movmi	r3, #43	; 0x2b
 80116b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116b8:	f89a 3000 	ldrb.w	r3, [sl]
 80116bc:	2b2a      	cmp	r3, #42	; 0x2a
 80116be:	d015      	beq.n	80116ec <_vfiprintf_r+0x120>
 80116c0:	9a07      	ldr	r2, [sp, #28]
 80116c2:	4654      	mov	r4, sl
 80116c4:	2000      	movs	r0, #0
 80116c6:	f04f 0c0a 	mov.w	ip, #10
 80116ca:	4621      	mov	r1, r4
 80116cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116d0:	3b30      	subs	r3, #48	; 0x30
 80116d2:	2b09      	cmp	r3, #9
 80116d4:	d94d      	bls.n	8011772 <_vfiprintf_r+0x1a6>
 80116d6:	b1b0      	cbz	r0, 8011706 <_vfiprintf_r+0x13a>
 80116d8:	9207      	str	r2, [sp, #28]
 80116da:	e014      	b.n	8011706 <_vfiprintf_r+0x13a>
 80116dc:	eba0 0308 	sub.w	r3, r0, r8
 80116e0:	fa09 f303 	lsl.w	r3, r9, r3
 80116e4:	4313      	orrs	r3, r2
 80116e6:	9304      	str	r3, [sp, #16]
 80116e8:	46a2      	mov	sl, r4
 80116ea:	e7d2      	b.n	8011692 <_vfiprintf_r+0xc6>
 80116ec:	9b03      	ldr	r3, [sp, #12]
 80116ee:	1d19      	adds	r1, r3, #4
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	9103      	str	r1, [sp, #12]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	bfbb      	ittet	lt
 80116f8:	425b      	neglt	r3, r3
 80116fa:	f042 0202 	orrlt.w	r2, r2, #2
 80116fe:	9307      	strge	r3, [sp, #28]
 8011700:	9307      	strlt	r3, [sp, #28]
 8011702:	bfb8      	it	lt
 8011704:	9204      	strlt	r2, [sp, #16]
 8011706:	7823      	ldrb	r3, [r4, #0]
 8011708:	2b2e      	cmp	r3, #46	; 0x2e
 801170a:	d10c      	bne.n	8011726 <_vfiprintf_r+0x15a>
 801170c:	7863      	ldrb	r3, [r4, #1]
 801170e:	2b2a      	cmp	r3, #42	; 0x2a
 8011710:	d134      	bne.n	801177c <_vfiprintf_r+0x1b0>
 8011712:	9b03      	ldr	r3, [sp, #12]
 8011714:	1d1a      	adds	r2, r3, #4
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	9203      	str	r2, [sp, #12]
 801171a:	2b00      	cmp	r3, #0
 801171c:	bfb8      	it	lt
 801171e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011722:	3402      	adds	r4, #2
 8011724:	9305      	str	r3, [sp, #20]
 8011726:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80117fc <_vfiprintf_r+0x230>
 801172a:	7821      	ldrb	r1, [r4, #0]
 801172c:	2203      	movs	r2, #3
 801172e:	4650      	mov	r0, sl
 8011730:	f7ee fd56 	bl	80001e0 <memchr>
 8011734:	b138      	cbz	r0, 8011746 <_vfiprintf_r+0x17a>
 8011736:	9b04      	ldr	r3, [sp, #16]
 8011738:	eba0 000a 	sub.w	r0, r0, sl
 801173c:	2240      	movs	r2, #64	; 0x40
 801173e:	4082      	lsls	r2, r0
 8011740:	4313      	orrs	r3, r2
 8011742:	3401      	adds	r4, #1
 8011744:	9304      	str	r3, [sp, #16]
 8011746:	f814 1b01 	ldrb.w	r1, [r4], #1
 801174a:	4829      	ldr	r0, [pc, #164]	; (80117f0 <_vfiprintf_r+0x224>)
 801174c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011750:	2206      	movs	r2, #6
 8011752:	f7ee fd45 	bl	80001e0 <memchr>
 8011756:	2800      	cmp	r0, #0
 8011758:	d03f      	beq.n	80117da <_vfiprintf_r+0x20e>
 801175a:	4b26      	ldr	r3, [pc, #152]	; (80117f4 <_vfiprintf_r+0x228>)
 801175c:	bb1b      	cbnz	r3, 80117a6 <_vfiprintf_r+0x1da>
 801175e:	9b03      	ldr	r3, [sp, #12]
 8011760:	3307      	adds	r3, #7
 8011762:	f023 0307 	bic.w	r3, r3, #7
 8011766:	3308      	adds	r3, #8
 8011768:	9303      	str	r3, [sp, #12]
 801176a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801176c:	443b      	add	r3, r7
 801176e:	9309      	str	r3, [sp, #36]	; 0x24
 8011770:	e768      	b.n	8011644 <_vfiprintf_r+0x78>
 8011772:	fb0c 3202 	mla	r2, ip, r2, r3
 8011776:	460c      	mov	r4, r1
 8011778:	2001      	movs	r0, #1
 801177a:	e7a6      	b.n	80116ca <_vfiprintf_r+0xfe>
 801177c:	2300      	movs	r3, #0
 801177e:	3401      	adds	r4, #1
 8011780:	9305      	str	r3, [sp, #20]
 8011782:	4619      	mov	r1, r3
 8011784:	f04f 0c0a 	mov.w	ip, #10
 8011788:	4620      	mov	r0, r4
 801178a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801178e:	3a30      	subs	r2, #48	; 0x30
 8011790:	2a09      	cmp	r2, #9
 8011792:	d903      	bls.n	801179c <_vfiprintf_r+0x1d0>
 8011794:	2b00      	cmp	r3, #0
 8011796:	d0c6      	beq.n	8011726 <_vfiprintf_r+0x15a>
 8011798:	9105      	str	r1, [sp, #20]
 801179a:	e7c4      	b.n	8011726 <_vfiprintf_r+0x15a>
 801179c:	fb0c 2101 	mla	r1, ip, r1, r2
 80117a0:	4604      	mov	r4, r0
 80117a2:	2301      	movs	r3, #1
 80117a4:	e7f0      	b.n	8011788 <_vfiprintf_r+0x1bc>
 80117a6:	ab03      	add	r3, sp, #12
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	462a      	mov	r2, r5
 80117ac:	4b12      	ldr	r3, [pc, #72]	; (80117f8 <_vfiprintf_r+0x22c>)
 80117ae:	a904      	add	r1, sp, #16
 80117b0:	4630      	mov	r0, r6
 80117b2:	f7fd fe21 	bl	800f3f8 <_printf_float>
 80117b6:	4607      	mov	r7, r0
 80117b8:	1c78      	adds	r0, r7, #1
 80117ba:	d1d6      	bne.n	801176a <_vfiprintf_r+0x19e>
 80117bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117be:	07d9      	lsls	r1, r3, #31
 80117c0:	d405      	bmi.n	80117ce <_vfiprintf_r+0x202>
 80117c2:	89ab      	ldrh	r3, [r5, #12]
 80117c4:	059a      	lsls	r2, r3, #22
 80117c6:	d402      	bmi.n	80117ce <_vfiprintf_r+0x202>
 80117c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117ca:	f7fe fb6a 	bl	800fea2 <__retarget_lock_release_recursive>
 80117ce:	89ab      	ldrh	r3, [r5, #12]
 80117d0:	065b      	lsls	r3, r3, #25
 80117d2:	f53f af1d 	bmi.w	8011610 <_vfiprintf_r+0x44>
 80117d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117d8:	e71c      	b.n	8011614 <_vfiprintf_r+0x48>
 80117da:	ab03      	add	r3, sp, #12
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	462a      	mov	r2, r5
 80117e0:	4b05      	ldr	r3, [pc, #20]	; (80117f8 <_vfiprintf_r+0x22c>)
 80117e2:	a904      	add	r1, sp, #16
 80117e4:	4630      	mov	r0, r6
 80117e6:	f7fe f8ab 	bl	800f940 <_printf_i>
 80117ea:	e7e4      	b.n	80117b6 <_vfiprintf_r+0x1ea>
 80117ec:	0801253b 	.word	0x0801253b
 80117f0:	08012545 	.word	0x08012545
 80117f4:	0800f3f9 	.word	0x0800f3f9
 80117f8:	080115a9 	.word	0x080115a9
 80117fc:	08012541 	.word	0x08012541

08011800 <__swbuf_r>:
 8011800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011802:	460e      	mov	r6, r1
 8011804:	4614      	mov	r4, r2
 8011806:	4605      	mov	r5, r0
 8011808:	b118      	cbz	r0, 8011812 <__swbuf_r+0x12>
 801180a:	6a03      	ldr	r3, [r0, #32]
 801180c:	b90b      	cbnz	r3, 8011812 <__swbuf_r+0x12>
 801180e:	f7fe fa33 	bl	800fc78 <__sinit>
 8011812:	69a3      	ldr	r3, [r4, #24]
 8011814:	60a3      	str	r3, [r4, #8]
 8011816:	89a3      	ldrh	r3, [r4, #12]
 8011818:	071a      	lsls	r2, r3, #28
 801181a:	d525      	bpl.n	8011868 <__swbuf_r+0x68>
 801181c:	6923      	ldr	r3, [r4, #16]
 801181e:	b31b      	cbz	r3, 8011868 <__swbuf_r+0x68>
 8011820:	6823      	ldr	r3, [r4, #0]
 8011822:	6922      	ldr	r2, [r4, #16]
 8011824:	1a98      	subs	r0, r3, r2
 8011826:	6963      	ldr	r3, [r4, #20]
 8011828:	b2f6      	uxtb	r6, r6
 801182a:	4283      	cmp	r3, r0
 801182c:	4637      	mov	r7, r6
 801182e:	dc04      	bgt.n	801183a <__swbuf_r+0x3a>
 8011830:	4621      	mov	r1, r4
 8011832:	4628      	mov	r0, r5
 8011834:	f7ff fe0c 	bl	8011450 <_fflush_r>
 8011838:	b9e0      	cbnz	r0, 8011874 <__swbuf_r+0x74>
 801183a:	68a3      	ldr	r3, [r4, #8]
 801183c:	3b01      	subs	r3, #1
 801183e:	60a3      	str	r3, [r4, #8]
 8011840:	6823      	ldr	r3, [r4, #0]
 8011842:	1c5a      	adds	r2, r3, #1
 8011844:	6022      	str	r2, [r4, #0]
 8011846:	701e      	strb	r6, [r3, #0]
 8011848:	6962      	ldr	r2, [r4, #20]
 801184a:	1c43      	adds	r3, r0, #1
 801184c:	429a      	cmp	r2, r3
 801184e:	d004      	beq.n	801185a <__swbuf_r+0x5a>
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	07db      	lsls	r3, r3, #31
 8011854:	d506      	bpl.n	8011864 <__swbuf_r+0x64>
 8011856:	2e0a      	cmp	r6, #10
 8011858:	d104      	bne.n	8011864 <__swbuf_r+0x64>
 801185a:	4621      	mov	r1, r4
 801185c:	4628      	mov	r0, r5
 801185e:	f7ff fdf7 	bl	8011450 <_fflush_r>
 8011862:	b938      	cbnz	r0, 8011874 <__swbuf_r+0x74>
 8011864:	4638      	mov	r0, r7
 8011866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011868:	4621      	mov	r1, r4
 801186a:	4628      	mov	r0, r5
 801186c:	f000 f806 	bl	801187c <__swsetup_r>
 8011870:	2800      	cmp	r0, #0
 8011872:	d0d5      	beq.n	8011820 <__swbuf_r+0x20>
 8011874:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011878:	e7f4      	b.n	8011864 <__swbuf_r+0x64>
	...

0801187c <__swsetup_r>:
 801187c:	b538      	push	{r3, r4, r5, lr}
 801187e:	4b2a      	ldr	r3, [pc, #168]	; (8011928 <__swsetup_r+0xac>)
 8011880:	4605      	mov	r5, r0
 8011882:	6818      	ldr	r0, [r3, #0]
 8011884:	460c      	mov	r4, r1
 8011886:	b118      	cbz	r0, 8011890 <__swsetup_r+0x14>
 8011888:	6a03      	ldr	r3, [r0, #32]
 801188a:	b90b      	cbnz	r3, 8011890 <__swsetup_r+0x14>
 801188c:	f7fe f9f4 	bl	800fc78 <__sinit>
 8011890:	89a3      	ldrh	r3, [r4, #12]
 8011892:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011896:	0718      	lsls	r0, r3, #28
 8011898:	d422      	bmi.n	80118e0 <__swsetup_r+0x64>
 801189a:	06d9      	lsls	r1, r3, #27
 801189c:	d407      	bmi.n	80118ae <__swsetup_r+0x32>
 801189e:	2309      	movs	r3, #9
 80118a0:	602b      	str	r3, [r5, #0]
 80118a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80118a6:	81a3      	strh	r3, [r4, #12]
 80118a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118ac:	e034      	b.n	8011918 <__swsetup_r+0x9c>
 80118ae:	0758      	lsls	r0, r3, #29
 80118b0:	d512      	bpl.n	80118d8 <__swsetup_r+0x5c>
 80118b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118b4:	b141      	cbz	r1, 80118c8 <__swsetup_r+0x4c>
 80118b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118ba:	4299      	cmp	r1, r3
 80118bc:	d002      	beq.n	80118c4 <__swsetup_r+0x48>
 80118be:	4628      	mov	r0, r5
 80118c0:	f7ff f978 	bl	8010bb4 <_free_r>
 80118c4:	2300      	movs	r3, #0
 80118c6:	6363      	str	r3, [r4, #52]	; 0x34
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118ce:	81a3      	strh	r3, [r4, #12]
 80118d0:	2300      	movs	r3, #0
 80118d2:	6063      	str	r3, [r4, #4]
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	6023      	str	r3, [r4, #0]
 80118d8:	89a3      	ldrh	r3, [r4, #12]
 80118da:	f043 0308 	orr.w	r3, r3, #8
 80118de:	81a3      	strh	r3, [r4, #12]
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	b94b      	cbnz	r3, 80118f8 <__swsetup_r+0x7c>
 80118e4:	89a3      	ldrh	r3, [r4, #12]
 80118e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118ee:	d003      	beq.n	80118f8 <__swsetup_r+0x7c>
 80118f0:	4621      	mov	r1, r4
 80118f2:	4628      	mov	r0, r5
 80118f4:	f000 f884 	bl	8011a00 <__smakebuf_r>
 80118f8:	89a0      	ldrh	r0, [r4, #12]
 80118fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118fe:	f010 0301 	ands.w	r3, r0, #1
 8011902:	d00a      	beq.n	801191a <__swsetup_r+0x9e>
 8011904:	2300      	movs	r3, #0
 8011906:	60a3      	str	r3, [r4, #8]
 8011908:	6963      	ldr	r3, [r4, #20]
 801190a:	425b      	negs	r3, r3
 801190c:	61a3      	str	r3, [r4, #24]
 801190e:	6923      	ldr	r3, [r4, #16]
 8011910:	b943      	cbnz	r3, 8011924 <__swsetup_r+0xa8>
 8011912:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011916:	d1c4      	bne.n	80118a2 <__swsetup_r+0x26>
 8011918:	bd38      	pop	{r3, r4, r5, pc}
 801191a:	0781      	lsls	r1, r0, #30
 801191c:	bf58      	it	pl
 801191e:	6963      	ldrpl	r3, [r4, #20]
 8011920:	60a3      	str	r3, [r4, #8]
 8011922:	e7f4      	b.n	801190e <__swsetup_r+0x92>
 8011924:	2000      	movs	r0, #0
 8011926:	e7f7      	b.n	8011918 <__swsetup_r+0x9c>
 8011928:	20000178 	.word	0x20000178

0801192c <_raise_r>:
 801192c:	291f      	cmp	r1, #31
 801192e:	b538      	push	{r3, r4, r5, lr}
 8011930:	4604      	mov	r4, r0
 8011932:	460d      	mov	r5, r1
 8011934:	d904      	bls.n	8011940 <_raise_r+0x14>
 8011936:	2316      	movs	r3, #22
 8011938:	6003      	str	r3, [r0, #0]
 801193a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801193e:	bd38      	pop	{r3, r4, r5, pc}
 8011940:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011942:	b112      	cbz	r2, 801194a <_raise_r+0x1e>
 8011944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011948:	b94b      	cbnz	r3, 801195e <_raise_r+0x32>
 801194a:	4620      	mov	r0, r4
 801194c:	f000 f830 	bl	80119b0 <_getpid_r>
 8011950:	462a      	mov	r2, r5
 8011952:	4601      	mov	r1, r0
 8011954:	4620      	mov	r0, r4
 8011956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801195a:	f000 b817 	b.w	801198c <_kill_r>
 801195e:	2b01      	cmp	r3, #1
 8011960:	d00a      	beq.n	8011978 <_raise_r+0x4c>
 8011962:	1c59      	adds	r1, r3, #1
 8011964:	d103      	bne.n	801196e <_raise_r+0x42>
 8011966:	2316      	movs	r3, #22
 8011968:	6003      	str	r3, [r0, #0]
 801196a:	2001      	movs	r0, #1
 801196c:	e7e7      	b.n	801193e <_raise_r+0x12>
 801196e:	2400      	movs	r4, #0
 8011970:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011974:	4628      	mov	r0, r5
 8011976:	4798      	blx	r3
 8011978:	2000      	movs	r0, #0
 801197a:	e7e0      	b.n	801193e <_raise_r+0x12>

0801197c <raise>:
 801197c:	4b02      	ldr	r3, [pc, #8]	; (8011988 <raise+0xc>)
 801197e:	4601      	mov	r1, r0
 8011980:	6818      	ldr	r0, [r3, #0]
 8011982:	f7ff bfd3 	b.w	801192c <_raise_r>
 8011986:	bf00      	nop
 8011988:	20000178 	.word	0x20000178

0801198c <_kill_r>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	4d07      	ldr	r5, [pc, #28]	; (80119ac <_kill_r+0x20>)
 8011990:	2300      	movs	r3, #0
 8011992:	4604      	mov	r4, r0
 8011994:	4608      	mov	r0, r1
 8011996:	4611      	mov	r1, r2
 8011998:	602b      	str	r3, [r5, #0]
 801199a:	f7f0 fb2d 	bl	8001ff8 <_kill>
 801199e:	1c43      	adds	r3, r0, #1
 80119a0:	d102      	bne.n	80119a8 <_kill_r+0x1c>
 80119a2:	682b      	ldr	r3, [r5, #0]
 80119a4:	b103      	cbz	r3, 80119a8 <_kill_r+0x1c>
 80119a6:	6023      	str	r3, [r4, #0]
 80119a8:	bd38      	pop	{r3, r4, r5, pc}
 80119aa:	bf00      	nop
 80119ac:	2000239c 	.word	0x2000239c

080119b0 <_getpid_r>:
 80119b0:	f7f0 bb1a 	b.w	8001fe8 <_getpid>

080119b4 <__swhatbuf_r>:
 80119b4:	b570      	push	{r4, r5, r6, lr}
 80119b6:	460c      	mov	r4, r1
 80119b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119bc:	2900      	cmp	r1, #0
 80119be:	b096      	sub	sp, #88	; 0x58
 80119c0:	4615      	mov	r5, r2
 80119c2:	461e      	mov	r6, r3
 80119c4:	da0d      	bge.n	80119e2 <__swhatbuf_r+0x2e>
 80119c6:	89a3      	ldrh	r3, [r4, #12]
 80119c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80119cc:	f04f 0100 	mov.w	r1, #0
 80119d0:	bf0c      	ite	eq
 80119d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80119d6:	2340      	movne	r3, #64	; 0x40
 80119d8:	2000      	movs	r0, #0
 80119da:	6031      	str	r1, [r6, #0]
 80119dc:	602b      	str	r3, [r5, #0]
 80119de:	b016      	add	sp, #88	; 0x58
 80119e0:	bd70      	pop	{r4, r5, r6, pc}
 80119e2:	466a      	mov	r2, sp
 80119e4:	f000 f848 	bl	8011a78 <_fstat_r>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	dbec      	blt.n	80119c6 <__swhatbuf_r+0x12>
 80119ec:	9901      	ldr	r1, [sp, #4]
 80119ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80119f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80119f6:	4259      	negs	r1, r3
 80119f8:	4159      	adcs	r1, r3
 80119fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119fe:	e7eb      	b.n	80119d8 <__swhatbuf_r+0x24>

08011a00 <__smakebuf_r>:
 8011a00:	898b      	ldrh	r3, [r1, #12]
 8011a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a04:	079d      	lsls	r5, r3, #30
 8011a06:	4606      	mov	r6, r0
 8011a08:	460c      	mov	r4, r1
 8011a0a:	d507      	bpl.n	8011a1c <__smakebuf_r+0x1c>
 8011a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a10:	6023      	str	r3, [r4, #0]
 8011a12:	6123      	str	r3, [r4, #16]
 8011a14:	2301      	movs	r3, #1
 8011a16:	6163      	str	r3, [r4, #20]
 8011a18:	b002      	add	sp, #8
 8011a1a:	bd70      	pop	{r4, r5, r6, pc}
 8011a1c:	ab01      	add	r3, sp, #4
 8011a1e:	466a      	mov	r2, sp
 8011a20:	f7ff ffc8 	bl	80119b4 <__swhatbuf_r>
 8011a24:	9900      	ldr	r1, [sp, #0]
 8011a26:	4605      	mov	r5, r0
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f7fd fbb9 	bl	800f1a0 <_malloc_r>
 8011a2e:	b948      	cbnz	r0, 8011a44 <__smakebuf_r+0x44>
 8011a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a34:	059a      	lsls	r2, r3, #22
 8011a36:	d4ef      	bmi.n	8011a18 <__smakebuf_r+0x18>
 8011a38:	f023 0303 	bic.w	r3, r3, #3
 8011a3c:	f043 0302 	orr.w	r3, r3, #2
 8011a40:	81a3      	strh	r3, [r4, #12]
 8011a42:	e7e3      	b.n	8011a0c <__smakebuf_r+0xc>
 8011a44:	89a3      	ldrh	r3, [r4, #12]
 8011a46:	6020      	str	r0, [r4, #0]
 8011a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a4c:	81a3      	strh	r3, [r4, #12]
 8011a4e:	9b00      	ldr	r3, [sp, #0]
 8011a50:	6163      	str	r3, [r4, #20]
 8011a52:	9b01      	ldr	r3, [sp, #4]
 8011a54:	6120      	str	r0, [r4, #16]
 8011a56:	b15b      	cbz	r3, 8011a70 <__smakebuf_r+0x70>
 8011a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a5c:	4630      	mov	r0, r6
 8011a5e:	f000 f81d 	bl	8011a9c <_isatty_r>
 8011a62:	b128      	cbz	r0, 8011a70 <__smakebuf_r+0x70>
 8011a64:	89a3      	ldrh	r3, [r4, #12]
 8011a66:	f023 0303 	bic.w	r3, r3, #3
 8011a6a:	f043 0301 	orr.w	r3, r3, #1
 8011a6e:	81a3      	strh	r3, [r4, #12]
 8011a70:	89a3      	ldrh	r3, [r4, #12]
 8011a72:	431d      	orrs	r5, r3
 8011a74:	81a5      	strh	r5, [r4, #12]
 8011a76:	e7cf      	b.n	8011a18 <__smakebuf_r+0x18>

08011a78 <_fstat_r>:
 8011a78:	b538      	push	{r3, r4, r5, lr}
 8011a7a:	4d07      	ldr	r5, [pc, #28]	; (8011a98 <_fstat_r+0x20>)
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	4604      	mov	r4, r0
 8011a80:	4608      	mov	r0, r1
 8011a82:	4611      	mov	r1, r2
 8011a84:	602b      	str	r3, [r5, #0]
 8011a86:	f7f0 fb16 	bl	80020b6 <_fstat>
 8011a8a:	1c43      	adds	r3, r0, #1
 8011a8c:	d102      	bne.n	8011a94 <_fstat_r+0x1c>
 8011a8e:	682b      	ldr	r3, [r5, #0]
 8011a90:	b103      	cbz	r3, 8011a94 <_fstat_r+0x1c>
 8011a92:	6023      	str	r3, [r4, #0]
 8011a94:	bd38      	pop	{r3, r4, r5, pc}
 8011a96:	bf00      	nop
 8011a98:	2000239c 	.word	0x2000239c

08011a9c <_isatty_r>:
 8011a9c:	b538      	push	{r3, r4, r5, lr}
 8011a9e:	4d06      	ldr	r5, [pc, #24]	; (8011ab8 <_isatty_r+0x1c>)
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	4608      	mov	r0, r1
 8011aa6:	602b      	str	r3, [r5, #0]
 8011aa8:	f7f0 fb15 	bl	80020d6 <_isatty>
 8011aac:	1c43      	adds	r3, r0, #1
 8011aae:	d102      	bne.n	8011ab6 <_isatty_r+0x1a>
 8011ab0:	682b      	ldr	r3, [r5, #0]
 8011ab2:	b103      	cbz	r3, 8011ab6 <_isatty_r+0x1a>
 8011ab4:	6023      	str	r3, [r4, #0]
 8011ab6:	bd38      	pop	{r3, r4, r5, pc}
 8011ab8:	2000239c 	.word	0x2000239c

08011abc <atan2>:
 8011abc:	f000 b800 	b.w	8011ac0 <__ieee754_atan2>

08011ac0 <__ieee754_atan2>:
 8011ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ac4:	ec57 6b11 	vmov	r6, r7, d1
 8011ac8:	4273      	negs	r3, r6
 8011aca:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8011c48 <__ieee754_atan2+0x188>
 8011ace:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011ad2:	4333      	orrs	r3, r6
 8011ad4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011ad8:	4543      	cmp	r3, r8
 8011ada:	ec51 0b10 	vmov	r0, r1, d0
 8011ade:	ee11 5a10 	vmov	r5, s2
 8011ae2:	d80a      	bhi.n	8011afa <__ieee754_atan2+0x3a>
 8011ae4:	4244      	negs	r4, r0
 8011ae6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011aea:	4304      	orrs	r4, r0
 8011aec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011af0:	4544      	cmp	r4, r8
 8011af2:	ee10 9a10 	vmov	r9, s0
 8011af6:	468e      	mov	lr, r1
 8011af8:	d907      	bls.n	8011b0a <__ieee754_atan2+0x4a>
 8011afa:	4632      	mov	r2, r6
 8011afc:	463b      	mov	r3, r7
 8011afe:	f7ee fbcd 	bl	800029c <__adddf3>
 8011b02:	ec41 0b10 	vmov	d0, r0, r1
 8011b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b0a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011b0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011b12:	4334      	orrs	r4, r6
 8011b14:	d103      	bne.n	8011b1e <__ieee754_atan2+0x5e>
 8011b16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b1a:	f000 b899 	b.w	8011c50 <atan>
 8011b1e:	17bc      	asrs	r4, r7, #30
 8011b20:	f004 0402 	and.w	r4, r4, #2
 8011b24:	ea53 0909 	orrs.w	r9, r3, r9
 8011b28:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011b2c:	d107      	bne.n	8011b3e <__ieee754_atan2+0x7e>
 8011b2e:	2c02      	cmp	r4, #2
 8011b30:	d05f      	beq.n	8011bf2 <__ieee754_atan2+0x132>
 8011b32:	2c03      	cmp	r4, #3
 8011b34:	d1e5      	bne.n	8011b02 <__ieee754_atan2+0x42>
 8011b36:	a140      	add	r1, pc, #256	; (adr r1, 8011c38 <__ieee754_atan2+0x178>)
 8011b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b3c:	e7e1      	b.n	8011b02 <__ieee754_atan2+0x42>
 8011b3e:	4315      	orrs	r5, r2
 8011b40:	d106      	bne.n	8011b50 <__ieee754_atan2+0x90>
 8011b42:	f1be 0f00 	cmp.w	lr, #0
 8011b46:	da5f      	bge.n	8011c08 <__ieee754_atan2+0x148>
 8011b48:	a13d      	add	r1, pc, #244	; (adr r1, 8011c40 <__ieee754_atan2+0x180>)
 8011b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b4e:	e7d8      	b.n	8011b02 <__ieee754_atan2+0x42>
 8011b50:	4542      	cmp	r2, r8
 8011b52:	d10f      	bne.n	8011b74 <__ieee754_atan2+0xb4>
 8011b54:	4293      	cmp	r3, r2
 8011b56:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011b5a:	d107      	bne.n	8011b6c <__ieee754_atan2+0xac>
 8011b5c:	2c02      	cmp	r4, #2
 8011b5e:	d84c      	bhi.n	8011bfa <__ieee754_atan2+0x13a>
 8011b60:	4b33      	ldr	r3, [pc, #204]	; (8011c30 <__ieee754_atan2+0x170>)
 8011b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b6a:	e7ca      	b.n	8011b02 <__ieee754_atan2+0x42>
 8011b6c:	2c02      	cmp	r4, #2
 8011b6e:	d848      	bhi.n	8011c02 <__ieee754_atan2+0x142>
 8011b70:	4b30      	ldr	r3, [pc, #192]	; (8011c34 <__ieee754_atan2+0x174>)
 8011b72:	e7f6      	b.n	8011b62 <__ieee754_atan2+0xa2>
 8011b74:	4543      	cmp	r3, r8
 8011b76:	d0e4      	beq.n	8011b42 <__ieee754_atan2+0x82>
 8011b78:	1a9b      	subs	r3, r3, r2
 8011b7a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011b7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011b82:	da1e      	bge.n	8011bc2 <__ieee754_atan2+0x102>
 8011b84:	2f00      	cmp	r7, #0
 8011b86:	da01      	bge.n	8011b8c <__ieee754_atan2+0xcc>
 8011b88:	323c      	adds	r2, #60	; 0x3c
 8011b8a:	db1e      	blt.n	8011bca <__ieee754_atan2+0x10a>
 8011b8c:	4632      	mov	r2, r6
 8011b8e:	463b      	mov	r3, r7
 8011b90:	f7ee fe64 	bl	800085c <__aeabi_ddiv>
 8011b94:	ec41 0b10 	vmov	d0, r0, r1
 8011b98:	f000 f9fa 	bl	8011f90 <fabs>
 8011b9c:	f000 f858 	bl	8011c50 <atan>
 8011ba0:	ec51 0b10 	vmov	r0, r1, d0
 8011ba4:	2c01      	cmp	r4, #1
 8011ba6:	d013      	beq.n	8011bd0 <__ieee754_atan2+0x110>
 8011ba8:	2c02      	cmp	r4, #2
 8011baa:	d015      	beq.n	8011bd8 <__ieee754_atan2+0x118>
 8011bac:	2c00      	cmp	r4, #0
 8011bae:	d0a8      	beq.n	8011b02 <__ieee754_atan2+0x42>
 8011bb0:	a317      	add	r3, pc, #92	; (adr r3, 8011c10 <__ieee754_atan2+0x150>)
 8011bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb6:	f7ee fb6f 	bl	8000298 <__aeabi_dsub>
 8011bba:	a317      	add	r3, pc, #92	; (adr r3, 8011c18 <__ieee754_atan2+0x158>)
 8011bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc0:	e014      	b.n	8011bec <__ieee754_atan2+0x12c>
 8011bc2:	a117      	add	r1, pc, #92	; (adr r1, 8011c20 <__ieee754_atan2+0x160>)
 8011bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bc8:	e7ec      	b.n	8011ba4 <__ieee754_atan2+0xe4>
 8011bca:	2000      	movs	r0, #0
 8011bcc:	2100      	movs	r1, #0
 8011bce:	e7e9      	b.n	8011ba4 <__ieee754_atan2+0xe4>
 8011bd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	e794      	b.n	8011b02 <__ieee754_atan2+0x42>
 8011bd8:	a30d      	add	r3, pc, #52	; (adr r3, 8011c10 <__ieee754_atan2+0x150>)
 8011bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bde:	f7ee fb5b 	bl	8000298 <__aeabi_dsub>
 8011be2:	4602      	mov	r2, r0
 8011be4:	460b      	mov	r3, r1
 8011be6:	a10c      	add	r1, pc, #48	; (adr r1, 8011c18 <__ieee754_atan2+0x158>)
 8011be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bec:	f7ee fb54 	bl	8000298 <__aeabi_dsub>
 8011bf0:	e787      	b.n	8011b02 <__ieee754_atan2+0x42>
 8011bf2:	a109      	add	r1, pc, #36	; (adr r1, 8011c18 <__ieee754_atan2+0x158>)
 8011bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bf8:	e783      	b.n	8011b02 <__ieee754_atan2+0x42>
 8011bfa:	a10b      	add	r1, pc, #44	; (adr r1, 8011c28 <__ieee754_atan2+0x168>)
 8011bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c00:	e77f      	b.n	8011b02 <__ieee754_atan2+0x42>
 8011c02:	2000      	movs	r0, #0
 8011c04:	2100      	movs	r1, #0
 8011c06:	e77c      	b.n	8011b02 <__ieee754_atan2+0x42>
 8011c08:	a105      	add	r1, pc, #20	; (adr r1, 8011c20 <__ieee754_atan2+0x160>)
 8011c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c0e:	e778      	b.n	8011b02 <__ieee754_atan2+0x42>
 8011c10:	33145c07 	.word	0x33145c07
 8011c14:	3ca1a626 	.word	0x3ca1a626
 8011c18:	54442d18 	.word	0x54442d18
 8011c1c:	400921fb 	.word	0x400921fb
 8011c20:	54442d18 	.word	0x54442d18
 8011c24:	3ff921fb 	.word	0x3ff921fb
 8011c28:	54442d18 	.word	0x54442d18
 8011c2c:	3fe921fb 	.word	0x3fe921fb
 8011c30:	08012550 	.word	0x08012550
 8011c34:	08012568 	.word	0x08012568
 8011c38:	54442d18 	.word	0x54442d18
 8011c3c:	c00921fb 	.word	0xc00921fb
 8011c40:	54442d18 	.word	0x54442d18
 8011c44:	bff921fb 	.word	0xbff921fb
 8011c48:	7ff00000 	.word	0x7ff00000
 8011c4c:	00000000 	.word	0x00000000

08011c50 <atan>:
 8011c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c54:	ec55 4b10 	vmov	r4, r5, d0
 8011c58:	4bc3      	ldr	r3, [pc, #780]	; (8011f68 <atan+0x318>)
 8011c5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011c5e:	429e      	cmp	r6, r3
 8011c60:	46ab      	mov	fp, r5
 8011c62:	dd18      	ble.n	8011c96 <atan+0x46>
 8011c64:	4bc1      	ldr	r3, [pc, #772]	; (8011f6c <atan+0x31c>)
 8011c66:	429e      	cmp	r6, r3
 8011c68:	dc01      	bgt.n	8011c6e <atan+0x1e>
 8011c6a:	d109      	bne.n	8011c80 <atan+0x30>
 8011c6c:	b144      	cbz	r4, 8011c80 <atan+0x30>
 8011c6e:	4622      	mov	r2, r4
 8011c70:	462b      	mov	r3, r5
 8011c72:	4620      	mov	r0, r4
 8011c74:	4629      	mov	r1, r5
 8011c76:	f7ee fb11 	bl	800029c <__adddf3>
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	460d      	mov	r5, r1
 8011c7e:	e006      	b.n	8011c8e <atan+0x3e>
 8011c80:	f1bb 0f00 	cmp.w	fp, #0
 8011c84:	f300 8131 	bgt.w	8011eea <atan+0x29a>
 8011c88:	a59b      	add	r5, pc, #620	; (adr r5, 8011ef8 <atan+0x2a8>)
 8011c8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011c8e:	ec45 4b10 	vmov	d0, r4, r5
 8011c92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c96:	4bb6      	ldr	r3, [pc, #728]	; (8011f70 <atan+0x320>)
 8011c98:	429e      	cmp	r6, r3
 8011c9a:	dc14      	bgt.n	8011cc6 <atan+0x76>
 8011c9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011ca0:	429e      	cmp	r6, r3
 8011ca2:	dc0d      	bgt.n	8011cc0 <atan+0x70>
 8011ca4:	a396      	add	r3, pc, #600	; (adr r3, 8011f00 <atan+0x2b0>)
 8011ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011caa:	ee10 0a10 	vmov	r0, s0
 8011cae:	4629      	mov	r1, r5
 8011cb0:	f7ee faf4 	bl	800029c <__adddf3>
 8011cb4:	4baf      	ldr	r3, [pc, #700]	; (8011f74 <atan+0x324>)
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f7ee ff36 	bl	8000b28 <__aeabi_dcmpgt>
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	d1e6      	bne.n	8011c8e <atan+0x3e>
 8011cc0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011cc4:	e02b      	b.n	8011d1e <atan+0xce>
 8011cc6:	f000 f963 	bl	8011f90 <fabs>
 8011cca:	4bab      	ldr	r3, [pc, #684]	; (8011f78 <atan+0x328>)
 8011ccc:	429e      	cmp	r6, r3
 8011cce:	ec55 4b10 	vmov	r4, r5, d0
 8011cd2:	f300 80bf 	bgt.w	8011e54 <atan+0x204>
 8011cd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011cda:	429e      	cmp	r6, r3
 8011cdc:	f300 80a0 	bgt.w	8011e20 <atan+0x1d0>
 8011ce0:	ee10 2a10 	vmov	r2, s0
 8011ce4:	ee10 0a10 	vmov	r0, s0
 8011ce8:	462b      	mov	r3, r5
 8011cea:	4629      	mov	r1, r5
 8011cec:	f7ee fad6 	bl	800029c <__adddf3>
 8011cf0:	4ba0      	ldr	r3, [pc, #640]	; (8011f74 <atan+0x324>)
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f7ee fad0 	bl	8000298 <__aeabi_dsub>
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	4606      	mov	r6, r0
 8011cfc:	460f      	mov	r7, r1
 8011cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d02:	4620      	mov	r0, r4
 8011d04:	4629      	mov	r1, r5
 8011d06:	f7ee fac9 	bl	800029c <__adddf3>
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	4630      	mov	r0, r6
 8011d10:	4639      	mov	r1, r7
 8011d12:	f7ee fda3 	bl	800085c <__aeabi_ddiv>
 8011d16:	f04f 0a00 	mov.w	sl, #0
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	460d      	mov	r5, r1
 8011d1e:	4622      	mov	r2, r4
 8011d20:	462b      	mov	r3, r5
 8011d22:	4620      	mov	r0, r4
 8011d24:	4629      	mov	r1, r5
 8011d26:	f7ee fc6f 	bl	8000608 <__aeabi_dmul>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	4680      	mov	r8, r0
 8011d30:	4689      	mov	r9, r1
 8011d32:	f7ee fc69 	bl	8000608 <__aeabi_dmul>
 8011d36:	a374      	add	r3, pc, #464	; (adr r3, 8011f08 <atan+0x2b8>)
 8011d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	460f      	mov	r7, r1
 8011d40:	f7ee fc62 	bl	8000608 <__aeabi_dmul>
 8011d44:	a372      	add	r3, pc, #456	; (adr r3, 8011f10 <atan+0x2c0>)
 8011d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4a:	f7ee faa7 	bl	800029c <__adddf3>
 8011d4e:	4632      	mov	r2, r6
 8011d50:	463b      	mov	r3, r7
 8011d52:	f7ee fc59 	bl	8000608 <__aeabi_dmul>
 8011d56:	a370      	add	r3, pc, #448	; (adr r3, 8011f18 <atan+0x2c8>)
 8011d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5c:	f7ee fa9e 	bl	800029c <__adddf3>
 8011d60:	4632      	mov	r2, r6
 8011d62:	463b      	mov	r3, r7
 8011d64:	f7ee fc50 	bl	8000608 <__aeabi_dmul>
 8011d68:	a36d      	add	r3, pc, #436	; (adr r3, 8011f20 <atan+0x2d0>)
 8011d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6e:	f7ee fa95 	bl	800029c <__adddf3>
 8011d72:	4632      	mov	r2, r6
 8011d74:	463b      	mov	r3, r7
 8011d76:	f7ee fc47 	bl	8000608 <__aeabi_dmul>
 8011d7a:	a36b      	add	r3, pc, #428	; (adr r3, 8011f28 <atan+0x2d8>)
 8011d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d80:	f7ee fa8c 	bl	800029c <__adddf3>
 8011d84:	4632      	mov	r2, r6
 8011d86:	463b      	mov	r3, r7
 8011d88:	f7ee fc3e 	bl	8000608 <__aeabi_dmul>
 8011d8c:	a368      	add	r3, pc, #416	; (adr r3, 8011f30 <atan+0x2e0>)
 8011d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d92:	f7ee fa83 	bl	800029c <__adddf3>
 8011d96:	4642      	mov	r2, r8
 8011d98:	464b      	mov	r3, r9
 8011d9a:	f7ee fc35 	bl	8000608 <__aeabi_dmul>
 8011d9e:	a366      	add	r3, pc, #408	; (adr r3, 8011f38 <atan+0x2e8>)
 8011da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da4:	4680      	mov	r8, r0
 8011da6:	4689      	mov	r9, r1
 8011da8:	4630      	mov	r0, r6
 8011daa:	4639      	mov	r1, r7
 8011dac:	f7ee fc2c 	bl	8000608 <__aeabi_dmul>
 8011db0:	a363      	add	r3, pc, #396	; (adr r3, 8011f40 <atan+0x2f0>)
 8011db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db6:	f7ee fa6f 	bl	8000298 <__aeabi_dsub>
 8011dba:	4632      	mov	r2, r6
 8011dbc:	463b      	mov	r3, r7
 8011dbe:	f7ee fc23 	bl	8000608 <__aeabi_dmul>
 8011dc2:	a361      	add	r3, pc, #388	; (adr r3, 8011f48 <atan+0x2f8>)
 8011dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc8:	f7ee fa66 	bl	8000298 <__aeabi_dsub>
 8011dcc:	4632      	mov	r2, r6
 8011dce:	463b      	mov	r3, r7
 8011dd0:	f7ee fc1a 	bl	8000608 <__aeabi_dmul>
 8011dd4:	a35e      	add	r3, pc, #376	; (adr r3, 8011f50 <atan+0x300>)
 8011dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dda:	f7ee fa5d 	bl	8000298 <__aeabi_dsub>
 8011dde:	4632      	mov	r2, r6
 8011de0:	463b      	mov	r3, r7
 8011de2:	f7ee fc11 	bl	8000608 <__aeabi_dmul>
 8011de6:	a35c      	add	r3, pc, #368	; (adr r3, 8011f58 <atan+0x308>)
 8011de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dec:	f7ee fa54 	bl	8000298 <__aeabi_dsub>
 8011df0:	4632      	mov	r2, r6
 8011df2:	463b      	mov	r3, r7
 8011df4:	f7ee fc08 	bl	8000608 <__aeabi_dmul>
 8011df8:	4602      	mov	r2, r0
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	4640      	mov	r0, r8
 8011dfe:	4649      	mov	r1, r9
 8011e00:	f7ee fa4c 	bl	800029c <__adddf3>
 8011e04:	4622      	mov	r2, r4
 8011e06:	462b      	mov	r3, r5
 8011e08:	f7ee fbfe 	bl	8000608 <__aeabi_dmul>
 8011e0c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8011e10:	4602      	mov	r2, r0
 8011e12:	460b      	mov	r3, r1
 8011e14:	d14b      	bne.n	8011eae <atan+0x25e>
 8011e16:	4620      	mov	r0, r4
 8011e18:	4629      	mov	r1, r5
 8011e1a:	f7ee fa3d 	bl	8000298 <__aeabi_dsub>
 8011e1e:	e72c      	b.n	8011c7a <atan+0x2a>
 8011e20:	ee10 0a10 	vmov	r0, s0
 8011e24:	4b53      	ldr	r3, [pc, #332]	; (8011f74 <atan+0x324>)
 8011e26:	2200      	movs	r2, #0
 8011e28:	4629      	mov	r1, r5
 8011e2a:	f7ee fa35 	bl	8000298 <__aeabi_dsub>
 8011e2e:	4b51      	ldr	r3, [pc, #324]	; (8011f74 <atan+0x324>)
 8011e30:	4606      	mov	r6, r0
 8011e32:	460f      	mov	r7, r1
 8011e34:	2200      	movs	r2, #0
 8011e36:	4620      	mov	r0, r4
 8011e38:	4629      	mov	r1, r5
 8011e3a:	f7ee fa2f 	bl	800029c <__adddf3>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	460b      	mov	r3, r1
 8011e42:	4630      	mov	r0, r6
 8011e44:	4639      	mov	r1, r7
 8011e46:	f7ee fd09 	bl	800085c <__aeabi_ddiv>
 8011e4a:	f04f 0a01 	mov.w	sl, #1
 8011e4e:	4604      	mov	r4, r0
 8011e50:	460d      	mov	r5, r1
 8011e52:	e764      	b.n	8011d1e <atan+0xce>
 8011e54:	4b49      	ldr	r3, [pc, #292]	; (8011f7c <atan+0x32c>)
 8011e56:	429e      	cmp	r6, r3
 8011e58:	da1d      	bge.n	8011e96 <atan+0x246>
 8011e5a:	ee10 0a10 	vmov	r0, s0
 8011e5e:	4b48      	ldr	r3, [pc, #288]	; (8011f80 <atan+0x330>)
 8011e60:	2200      	movs	r2, #0
 8011e62:	4629      	mov	r1, r5
 8011e64:	f7ee fa18 	bl	8000298 <__aeabi_dsub>
 8011e68:	4b45      	ldr	r3, [pc, #276]	; (8011f80 <atan+0x330>)
 8011e6a:	4606      	mov	r6, r0
 8011e6c:	460f      	mov	r7, r1
 8011e6e:	2200      	movs	r2, #0
 8011e70:	4620      	mov	r0, r4
 8011e72:	4629      	mov	r1, r5
 8011e74:	f7ee fbc8 	bl	8000608 <__aeabi_dmul>
 8011e78:	4b3e      	ldr	r3, [pc, #248]	; (8011f74 <atan+0x324>)
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	f7ee fa0e 	bl	800029c <__adddf3>
 8011e80:	4602      	mov	r2, r0
 8011e82:	460b      	mov	r3, r1
 8011e84:	4630      	mov	r0, r6
 8011e86:	4639      	mov	r1, r7
 8011e88:	f7ee fce8 	bl	800085c <__aeabi_ddiv>
 8011e8c:	f04f 0a02 	mov.w	sl, #2
 8011e90:	4604      	mov	r4, r0
 8011e92:	460d      	mov	r5, r1
 8011e94:	e743      	b.n	8011d1e <atan+0xce>
 8011e96:	462b      	mov	r3, r5
 8011e98:	ee10 2a10 	vmov	r2, s0
 8011e9c:	4939      	ldr	r1, [pc, #228]	; (8011f84 <atan+0x334>)
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	f7ee fcdc 	bl	800085c <__aeabi_ddiv>
 8011ea4:	f04f 0a03 	mov.w	sl, #3
 8011ea8:	4604      	mov	r4, r0
 8011eaa:	460d      	mov	r5, r1
 8011eac:	e737      	b.n	8011d1e <atan+0xce>
 8011eae:	4b36      	ldr	r3, [pc, #216]	; (8011f88 <atan+0x338>)
 8011eb0:	4e36      	ldr	r6, [pc, #216]	; (8011f8c <atan+0x33c>)
 8011eb2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eba:	f7ee f9ed 	bl	8000298 <__aeabi_dsub>
 8011ebe:	4622      	mov	r2, r4
 8011ec0:	462b      	mov	r3, r5
 8011ec2:	f7ee f9e9 	bl	8000298 <__aeabi_dsub>
 8011ec6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011eca:	4602      	mov	r2, r0
 8011ecc:	460b      	mov	r3, r1
 8011ece:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011ed2:	f7ee f9e1 	bl	8000298 <__aeabi_dsub>
 8011ed6:	f1bb 0f00 	cmp.w	fp, #0
 8011eda:	4604      	mov	r4, r0
 8011edc:	460d      	mov	r5, r1
 8011ede:	f6bf aed6 	bge.w	8011c8e <atan+0x3e>
 8011ee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ee6:	461d      	mov	r5, r3
 8011ee8:	e6d1      	b.n	8011c8e <atan+0x3e>
 8011eea:	a51d      	add	r5, pc, #116	; (adr r5, 8011f60 <atan+0x310>)
 8011eec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011ef0:	e6cd      	b.n	8011c8e <atan+0x3e>
 8011ef2:	bf00      	nop
 8011ef4:	f3af 8000 	nop.w
 8011ef8:	54442d18 	.word	0x54442d18
 8011efc:	bff921fb 	.word	0xbff921fb
 8011f00:	8800759c 	.word	0x8800759c
 8011f04:	7e37e43c 	.word	0x7e37e43c
 8011f08:	e322da11 	.word	0xe322da11
 8011f0c:	3f90ad3a 	.word	0x3f90ad3a
 8011f10:	24760deb 	.word	0x24760deb
 8011f14:	3fa97b4b 	.word	0x3fa97b4b
 8011f18:	a0d03d51 	.word	0xa0d03d51
 8011f1c:	3fb10d66 	.word	0x3fb10d66
 8011f20:	c54c206e 	.word	0xc54c206e
 8011f24:	3fb745cd 	.word	0x3fb745cd
 8011f28:	920083ff 	.word	0x920083ff
 8011f2c:	3fc24924 	.word	0x3fc24924
 8011f30:	5555550d 	.word	0x5555550d
 8011f34:	3fd55555 	.word	0x3fd55555
 8011f38:	2c6a6c2f 	.word	0x2c6a6c2f
 8011f3c:	bfa2b444 	.word	0xbfa2b444
 8011f40:	52defd9a 	.word	0x52defd9a
 8011f44:	3fadde2d 	.word	0x3fadde2d
 8011f48:	af749a6d 	.word	0xaf749a6d
 8011f4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011f50:	fe231671 	.word	0xfe231671
 8011f54:	3fbc71c6 	.word	0x3fbc71c6
 8011f58:	9998ebc4 	.word	0x9998ebc4
 8011f5c:	3fc99999 	.word	0x3fc99999
 8011f60:	54442d18 	.word	0x54442d18
 8011f64:	3ff921fb 	.word	0x3ff921fb
 8011f68:	440fffff 	.word	0x440fffff
 8011f6c:	7ff00000 	.word	0x7ff00000
 8011f70:	3fdbffff 	.word	0x3fdbffff
 8011f74:	3ff00000 	.word	0x3ff00000
 8011f78:	3ff2ffff 	.word	0x3ff2ffff
 8011f7c:	40038000 	.word	0x40038000
 8011f80:	3ff80000 	.word	0x3ff80000
 8011f84:	bff00000 	.word	0xbff00000
 8011f88:	080125a0 	.word	0x080125a0
 8011f8c:	08012580 	.word	0x08012580

08011f90 <fabs>:
 8011f90:	ec51 0b10 	vmov	r0, r1, d0
 8011f94:	ee10 2a10 	vmov	r2, s0
 8011f98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f9c:	ec43 2b10 	vmov	d0, r2, r3
 8011fa0:	4770      	bx	lr
	...

08011fa4 <_init>:
 8011fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa6:	bf00      	nop
 8011fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011faa:	bc08      	pop	{r3}
 8011fac:	469e      	mov	lr, r3
 8011fae:	4770      	bx	lr

08011fb0 <_fini>:
 8011fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb2:	bf00      	nop
 8011fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fb6:	bc08      	pop	{r3}
 8011fb8:	469e      	mov	lr, r3
 8011fba:	4770      	bx	lr
